
Export testing;              

Export you, nature, you_alt, americans, upf;

Export Heike, Olaf, Sonya, Oswald, Ralph, Kowalski, Suze, MarkB, Kurt, Martin, Louis;
Export Khattam, upf_deserter, other_louis_folks;
Export Gensher, Heinz, Gordon, Willard, freelancers_leader, other_freelancers;
Export Powell, Hugh;

Export ai_soldiers, ai_engineers, ai_mechanics_defend, ai_scientists, ai_commander, ai_depot, ai_labs, ai_siberite_mines;
Export ai_power_plants, ai_buildings_locations, ai_vehicles_defend, ai_vehicles_attack, ai_human_pullback_hex, ai_vehicle_pullback_hexes;
Export ai_building_under_construction, ai_heal_these_humans, ai_all_buildings, ai_building_constructor;
Export ai_upcoming_building_data, ai_facts, ai_armouries, ai_bunkers, ai_oil_mine, ai_fact_extensions;
Export ai_near_base_dist, ai_going_to_attack_this_base, ai_refuel_vehicles_list, ai_turrets, ai_control_tower;
Export ai_vehicle_attack_delay, ai_bases, ai_has_switched_base_target, ai_cargo_bay, ai_cargo_bay_under_construction, ai_apemen_engineers;
Export ai_attacking_soldiers, ai_attacking_scientists, ai_humans_ready_to_attack, ai_retreating_attacking_humans, ai_human_attack_delay;
Export ai_crane, ai_crane_under_construction, ai_time_shift_data, ai_time_shift_hexes, ai_time_shift_hexes_underway, ai_attacking_unit_hex_index;
Export ai_contact_time, ai_attack_ground_info_initial, ai_attack_ground_info_sustain, ai_vehicle_being_moved, ai_vehicles_having_been_moved;
Export ai_retreating_vehicles_defend, ai_mechanics_attack, ai_cargo_bay_destroy_tick, ai_crane_destroy_tick, ai_crane_is_being_repaired;
Export ai_crane_driver, ai_cannot_rebuild_these_buildings, ai_captured_buildings, ai_vehicles_being_repaired, ai_excepted_buildings;
Export ai_sib_bomb_mechanics;

Export sib_rocket_factory, sib_rocket_factory_location, sib_lab, player_base_b_types, buildup_objective_can_be_completed;
Export khattam_choice, freelancers_may_appear, freelancers_choice, freelancers_are_dead, upf_deserter_choice, upf_speaker;
Export louis_gordon_dispute_choice, am_reinforcements_time, am_reinforcements_start, freelancers_bombing_start, gensher_accused_deserter;
Export gensher_accused_freelancers, freelancers_second_choice, kill_gensher_objective_status, louis_walks_away_himself;
Export am_scientists_escape_status, scientist_escaped, am_reinforcements_got_through, louis_gone, player_has_seen_am_labs_explode;
Export americans_retreat, sib_rocket_fired;

Export upf_attack_status, upf_gensher_guards, upf_mechanics, upf_soldiers_west, upf_soldiers_east, upf_vehicles_control;
Export upf_vehicles_attack, upf_gensher_guards_vehicles, upf_mechanic_attack_map, upf_mechanic_control_map, gensher_vehicle;
Export upf_scientists_west, upf_scientists_east, upf_mine_list, upf_mines_are_placed, upf_start_mineclearing;


Starting
begin
     RandomizeAll;
     ResetFog;

     testing = false;  //Testing mission or real campaign?

     ai_bases = [1,2];  //1 = American main base, 2 = Small American base, (3 = UPF ;-; only used for select variables)
     ai_soldiers = [[],[],[]];  //Soldiers for computer sides
     ai_attacking_soldiers = [[],[],[]];  //Soldiers who are attacking
     ai_engineers = [[],[],[]]; //Engineers for computer sides
     ai_mechanics_defend = [[],[],[]];  //Mechanics for computer sides (in the base)
     ai_mechanics_attack = [[],[],[]];  //Mechanics for computer sides (attacking in vehicles)
     ai_scientists = [[],[],[]];  //Scientists for computer sides
     ai_attacking_scientists = [[],[],[]];  //Scientists who are attacking
     ai_apemen_engineers = [[],[],[]];  //Apemen engineers for computer sides
     ai_sib_bomb_mechanics = [[],[],[],[]];  //Mechanics dedicated to constructing the siberite bomb
     ai_depot = [0,0,0];  //The depot of each computer side
     ai_labs = [[],[],[]];  //The lab of each computer side
     ai_facts = [[],[],[]];  //The factory of each computer side
     ai_armouries = [[],[],[]];  //The armouries of each computer side
     ai_bunkers = [[],[],[]];  //The bunkers of each computer side
     ai_turrets = [[],[],[]];  //The turrets of each computer side
     ai_oil_mine = [0,0,0];  //The oil mine of each computer side
     ai_siberite_mines = [[],[],[]];  //The siberite mines of each computer side/base
     ai_fact_extensions = [[],[],[]];  //The factory extensions of each computer side
     ai_power_plants = [[],[],[]];  //The power plants of each computer side
     ai_control_tower = [0,0,0];  //Control tower (American) of each side
     ai_buildings_locations = [[],[],[]];  //The locations of all buildings for each side. Data looking like [x,y,dir,btype,labkind1,labkind2,bweapon] (CF. function "ScanBuildings")
     ai_captured_buildings = [[],[],[]];  //Identifiers of the buildings each base has lost because someone captured them. Will be recaptured if possible.
     ai_vehicles_defend = [[],[],[]];  //Vehicles of each computer side (in the base)
     ai_vehicles_attack = [[],[],[]];  //Vehicles of each computer side (attacking the enemy)
     ai_retreating_vehicles_defend = [[],[],[]];  //The defending vehicles which need to retreat during an attack on the base.
     ai_vehicles_being_repaired = [[],[],[]];  //The vehicles which are going to be or are being repaired.
     ai_refuel_vehicles_list = [[],[],[]];  //(defending) vehicles needing to be refueled
     ai_vehicle_pullback_hexes = [ [ [52,76],[34,45],[25,38],[29,53] ],
                                   [],[]];  //Hexes where vehicles can be parked
     ai_human_pullback_hex = [[34,61],[94,104]];  //Hex where humans can safely retreat to (center of the base)
     ai_building_under_construction = [0,0,0];  //Identifier of building under construction (only 1 building at a time)
     ai_heal_these_humans = [[],[],[]];  //Humans needing to be healed
     ai_all_buildings = [[],[],[]];  //Identifiers of all buildings for each computer side
     ai_building_constructor = [0,0,0];  //Identifier of the engineer who are going to build a building
     ai_vehicle_being_moved = [0,0,0];  //Identifier of vehicle which is being moved away from building site
     ai_vehicles_having_been_moved = [[],[],[]];  //Identifiers of the vehicles which have been moved away from building site. Don't move them again until construction has started
     ai_upcoming_building_data = [[],[],[]];  //Holds the data (building_location syntax) of the building which is going to be build. Isn't reset until the building is completely done.
     ai_cannot_rebuild_these_buildings = [[],[],[]];  //Holds the buildings the AI cannot rebuild, typically because the constructor is a crane and a crane can't move blocking vehicles or reach all places like a human. Same format as "ai_buildings_locations".
     ai_near_base_dist = 18;  //Distance within base where the computer scans for enemies to determine if the base is under attack (so this distance also decides how far away from the base retreating attackers will be pursued).
     ai_vehicle_attack_delay = [0$0,0$0,0$0];  //The minimum time between attacking (with vehicles) (cf. function "ResetVehicleAttackDelay").
     ai_human_attack_delay = [0$0,0$0,0$0];  //The minimum time between attacking (with humans) (cf. function "ResetHumanAttackDelay").
     ai_cargo_bay = [0,0,0];  //holds the identifier of the (automatic) cargo bay
     ai_cargo_bay_under_construction = [false,false,false];  //True if the base is currently constructing a cargo bay
     ai_cargo_bay_destroy_tick = [tick,tick,tick];  //To make it worth destroying the cargo bay there is a cooldown on its reconstruction. This variable holds the tick when the cargo bay was destroyed for each base.
     ai_crane = [0,0,0];  //Identifier of the crane of each computer
     ai_crane_under_construction = [false,false,false];  //True if the base is currently constructing a crane
     ai_crane_destroy_tick = [tick,tick,tick];  //To make it worth destroying the crane there is a cooldown on its reconstruction. This variable holds the tick when the crane was destroyed for each base.
     ai_crane_is_being_repaired = [false,false,false];  //True if the crane is under repairation (or needs repairation).
     ai_crane_driver = [0,0,0];  //Identifier of the mechanic driving the crane (if the crane is manual).
     ai_attacking_unit_hex_index = [[],[],[]];  //What hex an attacking unit is going for now (index is unit id, value is hex number). Must be reset/prepared when new attacking units are added.
     ai_retreating_attacking_humans = [[],[],[]];  //Holds the attacking humans who are retreating.
     ai_excepted_buildings = [[],[],[]];  //Identifier of the buildings the base will not rebuild. Does not work well with capturing buildings (if the player captures one of these buildings and the computer captures it back the building will remain removed from this list) - it's a rare bug though.
     ai_time_shift_data = [[],[],[],[],[],[],[],[]];  //[time,radius] - duration and radius of a time shifting rocket (for each side (NOT BASE!)).
     ai_time_shift_hexes = [[],[],[]];  //[x,y,time] - hexes where a time shifting rocket has landed (and how long until the effect disappears).
     ai_time_shift_hexes_underway = [[],[],[]];  //[x,y,id] - The bazooker who have been ordered to fire a time shifting rocket at hex [x,y] but haven't done so yet.
     Initiate_ai_contact_time;
     ai_attack_ground_info_initial = [];  //[attacking_un,target_un,target_un_side,x,y] - Used to determine if we are under attack by attacking ground, cf. "ai_contact_time".
     ai_attack_ground_info_sustain = [];  //[attacking_un,target_un,target_un_side,x,y] - Used to determine if we are under attack by attacking ground, cf. "ai_contact_time".


     sib_rocket_factory = sib_fact;  //Identifier of the factory constructing the siberite rocket.
     sib_rocket_factory_location = [GetX(sib_fact),GetY(sib_fact)];  //Coordinates of the siberite rocket factory.
     sib_lab = 0;  //Identifier of the lab researching siberite fission.
     player_base_b_types = [b_depot,b_lab,b_workshop,b_armoury];  //When the player has build these building let's just say the base is built (mission objective).
     buildup_objective_can_be_completed = false;  //True when the first primary objective (build base) may be cleared.
     khattam_choice = 0;  //Holds the player's decision of what to do with Khattam (see module 'Events').
     freelancers_may_appear = false;  //Turns true when the union of freelancers should show up.
     freelancers_choice = 0;  //Holds the player's decision of what to do with the union of freelancers (see module 'Events').
     freelancers_are_dead = false;  //True if the freelancers will not appear at all.
     upf_deserter_choice = 0;  //Holds the player's decision of what to do with the upf deserter (see module 'Events').
     upf_speaker = 0;  //Identifier of the unit who doubts the loyalty of the upf deserter.
     louis_gordon_dispute_choice = 0;  //Holds the player's decision of how to solve the conflict between Louis's people and Gordon's freelancers (see module 'Events').
     am_reinforcements_time = 0$0;  //Countdown to arrival of American reinforcements.
     am_reinforcements_start = false;  //True when countdown to American reinforcements starts.
     freelancers_bombing_start = false;  //True when the freelancers betray Heike, blow their mines within the player's base and run away.
     gensher_accused_deserter = false;  //True if Gensher implies the upf deserter still works for UPF.
     gensher_accused_freelancers = false;  //True if Gensher implies the union of freelancers are working for UPF.
     freelancers_second_choice = 0;  //Holds the player's decision of what to do with the freelancers if Gensher implies they are working for UPF.
     kill_gensher_objective_status = 0;  //0 for not given, 1 for given, 2 for completed.
     louis_walks_away_himself = false;  //True if Louis chooses to leave Legion by himself.
     am_scientists_escape_status = 0;  //1 when the American scientists try to escape, 2 when all scientists are gone (dead or escaped).
     scientist_escaped = false;  //True if one or more American scientists successfully escapes.
     am_reinforcements_got_through = false;  //True if one or more American reinforcements successfully reached the main American base.
     louis_gone = false;  //True if Louis and his people are either sent away or walks away themselves.
     player_has_seen_am_labs_explode = false;  //True when the player has seen the Americans blow up their own labs.
     americans_retreat = false;  //True when the Americans retreat.
     sib_rocket_fired = false;  //True when the Americans fire the siberite rocket.

     upf_attack_status = 0;  //UPF's assault. 0 = not started, 1 = spawn units for first attack + dialogue, 2 = first attack start, 3 = first attack end, 4 = spawn units for second attack, 5 = second attack start, 6 = second attack end / pullback (either because second attack failed or Gensher died).
     upf_gensher_guards = [];  //Identifiers of Gensher's bodyguards (humans).
     upf_gensher_guards_vehicles = [];  //Identifiers of Gensher's bodyguards' vehicles.
     upf_mechanics = [];  //UPF mechanics in control tower vehicles.
     upf_soldiers_west = [];  //UPF soldiers and mortars attacking from the west.
     upf_soldiers_east = [];  //UPF soldiers and mortars attacking from the east.
     upf_scientists_west = [];  //UPF scientists attacking from the west.
     upf_scientists_east = [];  //UPF scientists attacking from the east.
     upf_vehicles_control = [];  //UPF control tower vehicles.
     upf_vehicles_attack = [];  //UPF remote controlled vehicles.
     upf_mechanic_attack_map = [];  //Index is identifier of a mechanic (in control tower), value is a list of identifiers of the vehicles that mechanic controls.
     upf_mechanic_control_map = [];  //Index is identifier of a mechanic, value is identifier of the control tower vehicle he/she is in.
     gensher_vehicle = 0;  //Identifier of Gensher's vehicle.
     upf_mine_list = [];  //Hexes containing mines placed by UPF. Gonna say boom.
     upf_mines_are_placed = false;  //Turns true when UPF has finished placing mines.
     upf_start_mineclearing = false;  //When UPF first enters the scene they clear mines in the "UPF base" (the player could have placed some there). false = not started, true = started

     PrepareSides;
     PrepareNature;
     PrepareArabians;
     ScanBuildings;
     PrepareComputerSides;
     InitiateTimeShiftData;
     PrepareCrates;


     Action;
end;

Function Initiate_ai_contact_time;
     var i;
     begin
          //2-dimensional array which tells how long it was since a side was in contact with another side. E.g.
          {
          [[100000,150,100000,100000,1800,100000,100000,100000],
           [150,100000,500,100000,100000,100000,100000,100000],
           [100000,500,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [1800,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000]]
          }
          //Here side 1 (first row) was in contact with side 2 150 ticks ago and with side 5 1800 ticks ago.
          //The variable is necessary because function ContactTime doesn't take attacking ground into consideration
          //(if you attack ground where an enemy unit is, ContactTime doesn't take it as you are attacking the enemy).

          ai_contact_time = [];
          for i = 1 to 8 do
               ai_contact_time = ai_contact_time ^ [[100000,100000,100000,100000,100000,100000,100000,100000]];
     end;

Function InitiateTimeShiftData;
     var side;
     begin
          //The following is approximate data on time shifting rockets.
          //No space-time upgrade researched: Duration 215 tick, radius 4 hexes.
          //Space-time upgrade 1 researched: Duration 320 tick, radius 7 hexes.
          //Space-time upgrade 2 researched: Duration 420 tick, radius 10 hexes.
          //Space-time upgrade 3 researched: Duration 420 tick, radius 10 hexes.

          for side = 1 to 8 do
               if Researched(side,tech_st3) then
                    ai_time_shift_data = Replace(ai_time_shift_data,side,[420,10])
               else
                    if Researched(side,tech_st2) then
                         ai_time_shift_data = Replace(ai_time_shift_data,side,[420,10])
                    else
                         if Researched(side,tech_st1) then
                              ai_time_shift_data = Replace(ai_time_shift_data,side,[320,7])
                         else
                              ai_time_shift_data = Replace(ai_time_shift_data,side,[215,4]);
     end;

Function PrepareSides;
     begin
          //Who is who and decide initial attitudes
          nature = 0;
          americans = 1;
          upf = 2;
          you_alt = 5;
          you = 8;

          SetAttitude(americans,upf,att_enemy,true);
          SetAttitude(americans,you_alt,att_enemy,true);
          SetAttitude(americans,you,att_enemy,true);

          SetAttitude(upf,you_alt,att_enemy,true);
          SetAttitude(upf,you,att_enemy,true);

          SetAttitude(you_alt,you,att_friend,true);
     end;

Function PrepareNature;
     var i, spots, num, agres, count, temp_unit;
     begin
          spots = [[118,6],[135,40],[143,56],[137,76],[171,114],[113,109],[101,8],[110,21],[78,21],[63,13],[42,9],[30,12],
                   [9,4],[46,23],[46,33],[68,40],[61,51]];

          InitUc;
          InitHc;

          uc_side = nature;
          uc_nation = nation_nature;

          agres = -10 + difficulty * 20;

          //Apemen
          count = [5,4,3][difficulty];
          hc_class = class_apeman;
          for i = 1 to count do
               begin
                    if spots = 0 then
                         exit;

                    uc_direction = Rand(0,5);

                    hc_agressivity = Rand(-1*agres,agres);

                    hc_attr = [Rand(11,13),Rand(10,11)];
                    hc_sex = Rand(sex_male,sex_female);
                    hc_skills = [Rand(0,1),Rand(0,1),0,0];

                    num = Rand(1,spots);
                    PlaceUnitXYR(CreateHuman,spots[num][1],spots[num][2],5,false);
                    spots = Delete(spots,num);
               end;

          //Tigers
          count = [1,2,3][difficulty];
          hc_gallery = 'nature_foreg';
          hc_face_number = 3;
          hc_class = class_tiger;
          hc_sex = sex_male;
          for i = 1 to count do
               begin
                    if spots = 0 then
                         exit;

                    uc_direction = Rand(0,5);
                    hc_agressivity = Rand(0,agres);
                    hc_attr = [Rand(11,12),Rand(10,11)];
                    hc_skills = [Rand(2,difficulty+1),0,0,0];

                    num = Rand(1,spots);
                    PlaceUnitXYR(CreateHuman,spots[num][1],spots[num][2],5,false);
                    spots = Delete(spots,num);
               end;

          //Phororhacoses (big birds)
          hc_class = class_phororhacos;
          hc_gallery = 'nature_foreg';
          hc_face_number = 1;
          hc_skills = [0,0,0,0];
          for i = 1 to 3 do
               begin
                    if spots = 0 then
                         exit;

                    uc_direction = Rand(0,5);
                    hc_agressivity = Rand(-30,0);
                    hc_attr = [Rand(9,10),Rand(11,12)];

                    num = Rand(1,spots);
                    PlaceUnitXYR(CreateHuman,spots[num][1],spots[num][2],5,false);
                    spots = Delete(spots,num);
               end;
     end;

Function PrepareArabians;
     var human_list, i, temp_unit, val, k;
     begin
          InitHc;
          InitUc;
          uc_side = you;
          uc_nation = nation_arabian;
          
          if not testing then
               begin
                    Heike = CreateCharacter('Heike_13a');

                    if TestCharacters('Olaf_13a') then
                         Olaf = CreateCharacter('Olaf_13a')
                    else
                         Olaf = 0;

                    if TestCharacters('Sonya_13a') then
                         Sonya = CreateCharacter('Sonya_13a')
                    else
                         Sonya = 0;

                    if TestCharacters('Oswald_13a') then
                         Oswald = CreateCharacter('Oswald_13a')
                    else
                         Oswald = 0;

                    if TestCharacters('Ralph_13a') then
                         Ralph = CreateCharacter('Ralph_13a')
                    else
                         Ralph = 0;

                    if TestCharacters('Kowalski_13a') then
                         Kowalski = CreateCharacter('Kowalski_13a')
                    else
                         Kowalski = 0;

                    if TestCharacters('Suze_13a') then
                         Suze = CreateCharacter('Suze_13a')
                    else
                         Suze = 0;

                    if TestCharacters('MarkB_13a') then
                         MarkB = CreateCharacter('MarkB_13a')
                    else
                         MarkB = 0;

                    if TestCharacters('Kurt_13a') then
                         Kurt = CreateCharacter('Kurt_13a')
                    else
                         Kurt = 0;

                    if TestCharacters('Martin_13a') then
                         Martin = CreateCharacter('Martin_13a')
                    else
                         Martin = 0;

                    if TestCharacters('Louis_13a') then
                         Louis = CreateCharacter('Louis_13a')
                    else
                         Louis = 0;

                    if TestCharacters('Khattam_13a') then
                         Khattam = CreateCharacter('Khattam_13a')
                    else
                         Khattam = 0;

                    if TestCharacters('upf_deserter_13a') then
                         upf_deserter = CreateCharacter('upf_deserter_13a')
                    else
                         upf_deserter = 0;

                    other_louis_folks = CreateCharacterSet('Other_Louis_people_13a') diff 0;

                    human_list = [Heike, Olaf, Sonya, Oswald, Ralph, Kowalski, Suze, MarkB, Kurt, Martin, Louis, Khattam, upf_deserter] diff 0;

                    human_list = human_list ^ (CreateCharacterSet('Others_13a') diff 0);

                    human_list = human_list ^ other_louis_folks;
               end
          else
               begin
                    InitHc;

                    PrepareSoldier(sex_female,8);
                    hc_name = 'Heike';
                    Heike = CreateHuman;

                    PrepareMechanic(sex_male,8);
                    hc_name = 'Olaf';
                    Olaf = CreateHuman;

                    PrepareScientist(sex_female,8);
                    hc_name = 'Sonya';
                    Sonya = CreateHuman;

                    PrepareSoldier(sex_male,8);
                    hc_name = 'Oswald';
                    Oswald = CreateHuman;

                    PrepareSoldier(sex_male,8);
                    hc_name = 'Ralph';
                    Ralph = CreateHuman;

                    PrepareSoldier(sex_male,8);
                    hc_name = 'Kowalski';
                    Kowalski = CreateHuman;

                    PrepareSoldier(sex_female,8);
                    hc_name = 'Suze';
                    Suze = CreateHuman;

                    PrepareScientist(sex_male,8);
                    hc_name = 'Mark';
                    MarkB = CreateHuman;

                    PrepareSoldier(sex_male,8);
                    hc_name = 'Kurt';
                    Kurt = CreateHuman;

                    PrepareMechanic(sex_male,8);
                    hc_name = 'Martin';
                    Martin = CreateHuman;

                    PrepareSoldier(sex_male,8);
                    hc_name = 'Louis';
                    Louis = CreateHuman;
                    SetClass(Louis,class_mortar);

                    PrepareScientist(sex_male,8);
                    hc_name = 'Khattam';
                    Khattam = CreateHuman;

                    PrepareSoldier(sex_male,8);
                    hc_name = 'Bergkamp';
                    upf_deserter = CreateHuman;

                    other_louis_folks = [];
                    InitHc;
                    for i = 1 to 2 do
                         begin
                              PrepareHuman(false,[class_soldier,class_mechanic,class_scientistic][Rand(1,3)],7);
                              other_louis_folks = other_louis_folks ^ CreateHuman;
                         end;

                    human_list = [Heike, Olaf, Sonya, Oswald, Ralph, Kowalski, Suze, MarkB, Kurt, Martin, Louis, Khattam, upf_deserter] diff 0;

                    InitHc;
                    PrepareEngineer(false,6);
                    human_list = human_list ^ CreateHuman;

                    human_list = human_list ^ other_louis_folks;
               end;


          //Place player units
          for i in human_list do
               PlaceUnitArea(i,player_enter_area,false);


          //Other
          uc_side = you_alt;
          InitHc;
          PrepareSoldier(sex_male,8);
          hc_name = 'Heinz';  //from CharNames.wri
          hc_gallery = 'ar_new';
          hc_face_number = 23;
          Heinz = CreateHuman;


          //UPF
          uc_side = upf;
          if not testing then
               begin
                    Gensher = CreateCharacter('Gensher_11_cont');
                    SetClass(Gensher,class_soldier);
               end
          else
               begin
                    InitHc;

                    PrepareSoldier(sex_male,10);
                    hc_name = 'Dietrich';
                    Gensher = CreateHuman;
               end;

          if difficulty >= 2 then
               begin
                    SetTech(tech_stimdrugs,upf,state_researched);
                    SetTech(tech_bio1,upf,state_researched);
                    SetTech(tech_opto1,upf,state_researched);
                    SetTech(tech_weap1,upf,state_researched);
                    SetTech(tech_sib1,upf,state_researched);
               end;

          if difficulty = 3 then
               begin
                    SetTech(tech_bio2,upf,state_researched);
                    SetTech(tech_bio3,upf,state_researched);
                    SetTech(tech_opto2,upf,state_researched);
                    SetTech(tech_opto3,upf,state_researched);
                    SetTech(tech_weap2,upf,state_researched);
                    SetTech(tech_sib2,upf,state_researched);
               end;


          //Independent Union of Freelancers
          uc_side = you_alt;
          if not testing then
               begin
                    Willard = CreateCharacter('Willard_10');

                    other_freelancers = (CreateCharacterSet('Other_traitors_10') ^ CreateCharacter('Traitors_scout_10')) diff 0;

                    freelancers_leader = CreateCharacter('Traitors_leader_10');
                    if freelancers_leader > 0 and LoadVariable('Traitors_leader_is_Gordon_10',false) then
                         Gordon = freelancers_leader
                    else
                         Gordon = 0;
               end
          else
               begin
                    InitHc;

                    PrepareMechanic(sex_male,8);
                    hc_name = 'Willard';
                    Willard = CreateHuman;
                    
                    PrepareSoldier(sex_male,8);
                    hc_name = 'Gordon';
                    Gordon = CreateHuman;
                    freelancers_leader = Gordon;

                    other_freelancers = [];
                    InitHc;
                    for i = 1 to 3 do
                         begin
                              PrepareHuman(false,[class_soldier,class_mechanic,class_scientistic][Rand(1,3)],7);
                              other_freelancers = other_freelancers ^ CreateHuman;
                         end;
               end;

          if freelancers_leader = 0 then
               begin
                    if other_freelancers > 0 then  //another member has become the leader (never Willard, though)
                         begin
                              freelancers_leader = other_freelancers[1];
                              other_freelancers = Delete(other_freelancers,1);
                         end
                    else
                         begin
                              //The freelancers no longer exist. They do not appear.
                              Willard = 0;
                              other_freelancers = [];
                              freelancers_leader = 0;
                              Gordon = 0;

                              freelancers_are_dead = true;
                         end;
               end;

          //There should be at least 4 freelancers but no more than 5.
          if ((other_freelancers ^ Willard ^ freelancers_leader) diff 0) < 4 then
               other_freelancers = other_freelancers ^ CreateUnitsWithClass(4 - ((other_freelancers ^ Willard ^ freelancers_leader) diff 0),class_soldier,uc_side)
          else
               for i = 6 to ((other_freelancers ^ Willard ^ freelancers_leader) diff 0)+0 do
                    begin
                         DestroyUnit(other_freelancers[1]);
                         other_freelancers = Delete(other_freelancers,1);
                    end;
     end;

Function ScanBuildings;
     var side, i, temp_list, base, area, temp_list_2;
     begin
          if difficulty <= 2 then
               begin
                    PlaceWeaponTurret(am_minor_b1,us_double_gun);

                    ReplaceBunkerWithTurret(am_bu2);

                    ReplaceBunkerWithTurret(am_bu4);

                    ReplaceBunkerWithTurret(am_bu6);

                    ReplaceBunkerWithTurret(am_bu7);

                    if difficulty = 2 then
                         begin
                              temp_list = [GetX(am_bu9),GetY(am_bu9),GetDir(am_bu9)];
                              DestroyUnit(am_bu9);
                              bc_type = b_bunker;
                              i = CreateAndPlaceBuildingXYD(temp_list[1],temp_list[2],temp_list[3]);
                              PlaceWeaponTurret(i,us_gatling_gun);
                         end;

                    DestroyUnit(am_bu8);
               end;

          if difficulty = 1 then
               begin
                    InitUc;
                    InitBc;
                    uc_nation = nation_american;
                    uc_side = americans;

                    temp_list = [GetX(am_minor_b1),GetY(am_minor_b1),GetDir(am_minor_b1)];
                    DestroyUnit(am_minor_b1);
                    bc_type = b_breastwork;
                    CreateAndPlaceBuildingXYD(temp_list[1],temp_list[2],temp_list[3]);

                    temp_list = [GetX(am_bar1),GetY(am_bar1),GetDir(am_bar1)];
                    DestroyUnit(am_bar1);
                    bc_type = b_breastwork;
                    CreateAndPlaceBuildingXYD(temp_list[1],temp_list[2],temp_list[3]);

                    ReplaceBunkerWithTurret(am_bu1);

                    ReplaceBunkerWithTurret(am_bu3);

                    ReplaceBunkerWithTurret(am_bu5);

                    DestroyUnit(am_bu7);

                    DestroyUnit(am_bu10);

                    DestroyUnit(am_bu9);

                    DestroyUnit(am_br4);
               end;

          for base in ai_bases do
               begin
                    case base of
                         1: begin
                              area = Am_base;
                              side = americans;
                         end;
                         2: begin
                              area = Am_small_base;
                              side = americans;
                         end;
                    end;

                    ai_all_buildings = Replace(ai_all_buildings,base, FilterAllUnits([[f_side,side],[f_type,unit_building],[f_inarea,area]]) );

                    if base = 1 and IsLive(am_br4) then
                         begin
                              temp_list = ai_all_buildings[base] ^ am_br4;
                              ai_all_buildings = Replace(ai_all_buildings,base,temp_list);
                         end;

                    for i in ai_all_buildings[base] do
                         UpdateBuildingBasicVariables(base,i,true);

                    //Prioritated order
                    //The minor American base can't rebuilt the bunkers with weapons since it has no factory so it rebuilds them as breastworks.
                    temp_list = [];
                    //for i in (ai_depot[base] ^ ai_armouries[base] ^ ai_bunkers[base] ^ ai_power_plants[base] ^ ai_control_tower[base] ^ ai_turrets[base] ^ ai_labs[base] ^ ai_facts[base] ^ ai_fact_extensions[base] ^ ai_siberite_mines[base] ^ ai_oil_mine[base]) diff 0 do
                    for i in ai_all_buildings[base] do
                         begin
                              //The Americans do not rebuild the northernmost breastwork (out of depot range).
                              if base = 1 and i = am_br4 then
                                   begin
                                        ai_excepted_buildings = Replace(ai_excepted_buildings,base,[am_br4]);
                                        continue;
                                   end;

                              temp_list = temp_list ^ [ [GetX(i),GetY(i),GetDir(i),GetBType(i),GetLabKind(i,1),GetLabKind(i,2),GetBWeapon(i)] ];

                              if base = 2 and temp_list[temp_list+0][4] in [b_bunker,b_turret] then
                                   begin
                                        temp_list_2 = Replace(temp_list[temp_list+0],4,b_breastwork);
                                        temp_list = Replace(temp_list,temp_list+0,temp_list_2);
                                   end;  
                         end;

                    ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list);
                    SortBuildingLocationsListInCorrectOrder(base);
                    
                    //Make sources visible
                    for i in ai_siberite_mines[base] ^ ai_oil_mine[base] do
                         SetResourceVisibility(GetX(i),GetY(i),side);
               end;
     end;
Function ReplaceBunkerWithTurret(id);
     var un, temp_list;
     begin
          InitUc;
          InitBc;
          uc_nation = GetNation(id);
          uc_side = GetSide(id);

          temp_list = [GetX(id),GetY(id),GetDir(id),GetBWeapon(id)];
          DestroyUnit(id);
          bc_type = b_turret;
          un = CreateAndPlaceBuildingXYD(temp_list[1],temp_list[2],temp_list[3]);
          PlaceWeaponTurret(un,temp_list[4]);
     end;
Export Function UpdateBuildingBasicVariables(base,un,add);
     var temp_list;
     begin
          //un - unit to add/remove from basic building variables
          //add - boolean (true for add units, false for remove)

          case GetBType(un) of
               b_depot,b_warehouse:
                    if add then
                         ai_depot = Replace(ai_depot,base,un)
                    else
                         if un = ai_depot[base] then
                              ai_depot = Replace(ai_depot,base,0);
               b_lab,b_lab_half,b_lab_full: begin
                    if add then
                         temp_list = ai_labs[base] ^ un
                    else temp_list = ai_labs[base] diff un;
                    ai_labs = Replace(ai_labs,base,temp_list);
               end;
               b_factory,b_workshop: begin
                    if add then
                         temp_list = ai_facts[base] ^ un
                    else temp_list = ai_facts[base] diff un;
                    ai_facts = Replace(ai_facts,base,temp_list);
               end;
               b_armoury,b_barracks: begin
                    if add then
                         temp_list = ai_armouries[base] ^ un
                    else temp_list = ai_armouries[base] diff un;
                    ai_armouries = Replace(ai_armouries,base,temp_list);
               end;
               b_breastwork,b_bunker: begin
                    if add then
                         temp_list = ai_bunkers[base] ^ un
                    else temp_list = ai_bunkers[base] diff un;
                    ai_bunkers = Replace(ai_bunkers,base,temp_list);
               end;
               b_turret: begin
                    if add then
                         temp_list = ai_turrets[base] ^ un
                    else temp_list = ai_turrets[base] diff un;
                    ai_turrets = Replace(ai_turrets,base,temp_list);
               end;
               b_oil_mine:
                    if add then
                         ai_oil_mine = Replace(ai_oil_mine,base,un)
                    else
                         if un = ai_oil_mine[base] then
                              ai_oil_mine = Replace(ai_oil_mine,base,0);
               b_siberite_mine: begin
                    if add then
                         temp_list = ai_siberite_mines[base] ^ un
                    else temp_list = ai_siberite_mines[base] diff un;
                    ai_siberite_mines = Replace(ai_siberite_mines,base,temp_list);
               end;
               b_ext_gun,b_ext_noncombat,b_ext_laser,b_ext_computer,b_ext_radar,b_ext_rocket,b_ext_siberium,b_ext_track,b_ext_stitch: begin
                    if add then
                         temp_list = ai_fact_extensions[base] ^ un
                    else temp_list = ai_fact_extensions[base] diff un;
                    ai_fact_extensions = Replace(ai_fact_extensions,base,temp_list);
               end;
               b_solar_power,b_oil_power,b_siberite_power: begin
                    if add then
                         temp_list = ai_power_plants[base] ^ un
                    else temp_list = ai_power_plants[base] diff un;
                    ai_power_plants = Replace(ai_power_plants,base,temp_list);
               end;
               b_control_tower: begin
                    if add then
                         ai_control_tower = Replace(ai_control_tower,base,un)
                    else
                         if un = ai_control_tower[base] then
                              ai_control_tower = Replace(ai_control_tower,base,0);
               end;
          end;
     end;
Function SortBuildingLocationsListInCorrectOrder(base);
     var i, temp_list, p;
     begin
         temp_list = [];

         for i in ai_buildings_locations[base] do
              begin
                   //Prioritated order in which buildings should be (re-)build.
                   case i[4] of
                        b_depot, b_warehouse: p = 100;
                        b_armoury, b_barracks, b_fort: p = 99;
                        b_solar_power, b_oil_power, b_siberite_power: p = 98;
                        b_breastwork: p = 97;
                        b_factory, b_workshop: p = 96;
                        b_ext_gun, b_ext_noncombat, b_ext_laser, b_ext_computer,
                        b_ext_radar, b_ext_rocket, b_ext_siberium, b_ext_track, b_ext_stitch: p = 95;
                        b_bunker: p = 94;
                        b_control_tower: p = 93;
                        b_turret: p = 92;
                        b_lab, b_lab_half, b_lab_full: p = 91;
                        b_teleport: p = 90;
                        b_siberite_mine: p = 89;
                        b_oil_mine: p = 88;
                   end;

                   temp_list = temp_list ^ p;
              end;

          temp_list = SortListByListDesc(ai_buildings_locations[base],temp_list);
          ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list);
     end;

Function PrepareComputerSides;
     var i, temp_list, side, base, num;
     begin
          for base in ai_bases do
               begin
                    case base of
                         1: begin
                              side = americans;
                         end;
                         2: begin
                              side = americans;
                         end;
                    end;

                    InitUc;
                    InitHc;

                    uc_side = side;
                    case side of
                         americans: uc_nation = nation_american;
                    end;


                    //Soldiers - at least one for each defensive building (remember armouries)
                    //Special units (bazoookers, snipers) go to armouries as first priority.
                    case difficulty of
                         1: begin
                              num = ai_bunkers[base]+ai_armouries[base];
                              i = [3,4,5][difficulty]*ai_armouries[base];
                         end;
                         2: begin
                              num = (ai_bunkers[base]+ai_armouries[base]) div 2;
                              i = [3,4,5][difficulty]*ai_armouries[base] + ((ai_bunkers[base]+ai_armouries[base]) - (ai_bunkers[base]+ai_armouries[base]) div 2);
                         end;
                         3: begin
                              num = 0;
                              i = [3,4,5][difficulty]*ai_armouries[base] + (ai_bunkers[base]+ai_armouries[base]);
                         end;
                    end;

                    temp_list = CreateUnitsWithClass(num, class_soldier, side);
                    temp_list = temp_list ^ CreateUnitsWithClass(i, class_sniper, side);
                    ai_soldiers = Replace(ai_soldiers,base,temp_list);


                    //Engineers
                    if base = 1 then
                         ai_engineers = Replace(ai_engineers,base, CreateUnitsWithClass([2,3,4][difficulty], class_engineer, side) )
                    else
                         ai_engineers = Replace(ai_engineers,base, CreateUnitsWithClass([1,1,2][difficulty], class_engineer, side) );

                    //Adapt the level of buildings to the highest engineering skill.
                    temp_list = [];
                    for i in ai_engineers[base] do
                         temp_list = temp_list ^ GetSkill(i,skill_engineering);
                    num = BestFromListByList(temp_list,temp_list);
                    for i in ai_all_buildings[base] do
                         SetBLevel(i,num);

                    //Apemen engineers
                    if base = 1 then
                         ai_apemen_engineers = Replace(ai_apemen_engineers,base, CreateApemenWithClass(3,class_apeman_engineer,side) )
                    else
                         ai_apemen_engineers = Replace(ai_apemen_engineers,base, CreateApemenWithClass([0,1,2][difficulty],class_apeman_engineer,side) );


                    //Mechanics
                    if base = 1 then
                         ai_mechanics_defend = Replace(ai_mechanics_defend,base, CreateUnitsWithClass([4+Rand(0,1), 5+Rand(0,1), 6][difficulty], class_mechanic, side) );


                    //Scientists
                    if base = 1 then
                         begin
                              num = [4,6,8][difficulty] + Rand(0,1);
                              ai_scientists = Replace(ai_scientists,base, CreateUnitsWithClass(num,class_scientistic,side) );
                         end;


                    //Resources
                    SetResourceType(GetBase(ai_depot[base]),mat_cans,300);
                    SetResourceType(GetBase(ai_depot[base]),mat_oil,300);
                    SetResourceType(GetBase(ai_depot[base]),mat_siberit,300);


                    //Place units
                    for i in ai_soldiers[base] ^ ai_engineers[base] ^ ai_mechanics_defend[base] ^ ai_scientists[base] ^ ai_apemen_engineers[base] do
                         PlaceUnitXYR(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2],7,false);
               end;

          ai_sib_bomb_mechanics = Replace(ai_sib_bomb_mechanics,1,CreateUnitsWithClass(3,class_mechanic,americans));
          for i in ai_sib_bomb_mechanics[1] do
               begin
                    SetSkill(i,skill_mechanical,10);
                    PlaceUnitXYR(i,ai_human_pullback_hex[1][1],ai_human_pullback_hex[1][2],7,false);
               end;

          //American main characters
          Powell = NewCharacter('Powell');

          Hugh = NewCharacter('Stevens');
          temp_list = ai_scientists[1] ^ Hugh;
          ai_scientists = Replace(ai_scientists,1,temp_list);
          PlaceUnitXYR(Hugh,ai_human_pullback_hex[1][1],ai_human_pullback_hex[1][2],7,false);


          //Technologies
          SetTech(tech_tech1,americans,state_researched);
          SetTech(tech_tech2,americans,state_researched);
          SetTech(tech_weap1,americans,state_researched);
          SetTech(tech_sib1,americans,state_researched);
          SetTech(tech_comp1,americans,state_researched);

          if difficulty >= 2 then
               begin
                    SetTech(tech_tech3,americans,state_researched);
                    SetTech(tech_weap2,americans,state_researched);
                    SetTech(tech_sib2,americans,state_researched);
                    SetTech(tech_comp2,americans,state_researched);
               end;

          if difficulty = 3 then
               begin
                    SetTech(tech_weap3,americans,state_researched);
                    SetTech(tech_comp3,americans,state_researched);
               end;
     end;
Export Function CreateUnitsWithClass(num_units,un_class,side);
     var i, overskill;
     begin
          result = [];

          InitUc;
          InitHc;

          case side of
               americans: begin
                    uc_nation = nation_american;
               end;
               upf,you_alt,you: begin
                    uc_nation = nation_arabian;
               end;
          end;
          uc_side = side;

          overskill = difficulty + 6;

          for i = 1 to num_units do
               begin
                    if Rand(1,3) = 1 then
                         PrepareHuman(false,un_class,-overskill)
                    else PrepareHuman(false,un_class,overskill);

                    result = result ^ CreateHuman;
               end;
     end;
Export Function CreateApemenWithClass(num_units,un_class,side);
     var i;
     begin
          result = [];

          InitUc;
          InitHc;
          uc_side = side;
          uc_nation = nation_nature;
          hc_class = un_class;

          for i = 1 to num_units do
               begin
                    hc_attr = [Rand(11,13),Rand(10,11)];
                    hc_sex = Rand(sex_male,sex_female);
                    hc_skills = [Rand(0,2),Rand(0,2),0,0];

                    result = result ^ CreateHuman;
               end;
     end;


Function Action;
     var helper, i;
     begin
          InGameOn;
          wait(2);
          CenterNowOnXY(2,2);

          PlaceUnitXY(Heinz,153,93,false);

          InitHc;
          InitUc;
          uc_side = you_alt;
          uc_nation = nation_arabian;
          PrepareSoldier(false,8);
          helper = CreateHuman;
          PlaceUnitXY(helper,153,95,false);

          ComMoveXY([Heinz,helper],GetX(Heike),GetY(Heike));
          ComTurnUnit(FilterAllUnits([[f_side,you],[f_type,unit_human]]),Heinz);

          wait(0$0.5);
          CenterNowOnUnits(Heike);
          
          i = 0;
          repeat
          wait(0$0.5);
          i = i + 1;
          until GetDistUnits(Heike,Heinz) <= 3 or i > 20;

          Say(Heinz,'D2-He-1');
          Say(Heike,'D2-H-1');
          Say(Heinz,'D2-He-2');
          Say(Heike,'D2-H-2');
          Say(Heinz,'D2-He-3');
          Say(Heike,'D2-H-3');
          Say(Heinz,'D2-He-4');
          Say(Heike,'D2-H-4');
          Say(Heike,'D2-H-5');
          Say(Heinz,'D2-He-5');

          wait(0$0.2);
          InGameOff;

          ComFree(FilterAllUnits([[f_side,you],[f_type,unit_human]]));

          wait(0$0.2);
          ChangeMissionObjectives('M1');

          wait(0$0.2);
          SaveForQuickRestart;

          repeat
          ComMoveXY([Heinz,helper],158,118);
          wait(0$0.5);

          for i in [Heinz,helper] do
               if GetDistUnitXY(i,158,118) <= 2 then
                    begin
                         if i = Heinz then
                              RemoveUnit(i)
                         else
                              DestroyUnit(i);
                    end;

          until UnitFilter([Heinz,helper],[f_placed]) = 0;
     end;