// export testing , logsenabled ; export you , russians , nature , you_alt , americans , scout_side , americans_alt ; export Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ; export Gensher ; export Simms , Cornell , Khattam , Joan , Powell ; export ai_soldiers , ai_engineers , ai_mechanics_defend , ai_scientists , ai_commander , ai_depot , ai_labs , ai_siberite_mines ; export ai_power_plants , ai_buildings_locations , ai_vehicles_defend , ai_vehicles_attack , ai_human_pullback_hex ; export ai_building_under_construction , ai_heal_these_humans , ai_all_buildings , ai_building_constructor ; export ai_upcoming_building_data , ai_facts , ai_armouries , ai_bunkers , ai_oil_mine , ai_fact_extensions ; export ai_near_base_dist , ai_going_to_attack_this_base , ai_refuel_vehicles_list , ai_turrets , ai_control_tower ; export ai_vehicle_attack_delay , ai_bases , ai_has_switched_base_target , ai_cargo_bay , ai_cargo_bay_under_construction , ai_apemen_engineers ; export ai_attacking_soldiers , ai_attacking_scientists , ai_humans_ready_to_attack , ai_retreating_attacking_humans , ai_human_attack_delay ; export ai_excepted_buildings , ai_new_attack_commencing ; export ai_crane , ai_time_shift_data , ai_time_shift_hexes , ai_time_shift_hexes_underway , ai_attacking_unit_hex_index ; export ai_contact_time , ai_attack_ground_info_initial , ai_attack_ground_info_sustain , ai_captured_buildings , ai_vehicles_being_repaired ; export oswald_is_substitute , kurt_is_substitute , original_gensher_people , russian_attack_strategy , special_russian_attackers ; export yashin_alive , num_russian_attacks , gensher_spec_research_progress , game_phase , first_teleport , camera_engineers ; export cameras_placed , scout_event_over , russians_allowed_to_attack_gensher_time , saved_gensher_people , khattam_choice ; export russian_interference_points , camera_engineers_task_map ; export gensher_bunker_apes , gensher_mortars ; export us_reserve_troops , russian_reserve_troops ; export gensher_interference_threshold ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// testing = false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// logsenabled = true ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 1
  23: ST_TO_ADDR
// ai_bases = [ 1 , 2 , 3 ] ;
  24: LD_ADDR_EXP 59
  28: PUSH
  29: LD_INT 1
  31: PUSH
  32: LD_INT 2
  34: PUSH
  35: LD_INT 3
  37: PUSH
  38: EMPTY
  39: LIST
  40: LIST
  41: LIST
  42: ST_TO_ADDR
// ai_soldiers = [ [ ] , [ ] , [ ] ] ;
  43: LD_ADDR_EXP 30
  47: PUSH
  48: EMPTY
  49: PUSH
  50: EMPTY
  51: PUSH
  52: EMPTY
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: LIST
  58: ST_TO_ADDR
// ai_attacking_soldiers = [ [ ] , [ ] , [ ] ] ;
  59: LD_ADDR_EXP 64
  63: PUSH
  64: EMPTY
  65: PUSH
  66: EMPTY
  67: PUSH
  68: EMPTY
  69: PUSH
  70: EMPTY
  71: LIST
  72: LIST
  73: LIST
  74: ST_TO_ADDR
// ai_engineers = [ [ ] , [ ] , [ ] ] ;
  75: LD_ADDR_EXP 31
  79: PUSH
  80: EMPTY
  81: PUSH
  82: EMPTY
  83: PUSH
  84: EMPTY
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: LIST
  90: ST_TO_ADDR
// ai_mechanics_defend = [ [ ] , [ ] , [ ] ] ;
  91: LD_ADDR_EXP 32
  95: PUSH
  96: EMPTY
  97: PUSH
  98: EMPTY
  99: PUSH
 100: EMPTY
 101: PUSH
 102: EMPTY
 103: LIST
 104: LIST
 105: LIST
 106: ST_TO_ADDR
// ai_scientists = [ [ ] , [ ] , [ ] ] ;
 107: LD_ADDR_EXP 33
 111: PUSH
 112: EMPTY
 113: PUSH
 114: EMPTY
 115: PUSH
 116: EMPTY
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// ai_attacking_scientists = [ [ ] , [ ] , [ ] ] ;
 123: LD_ADDR_EXP 65
 127: PUSH
 128: EMPTY
 129: PUSH
 130: EMPTY
 131: PUSH
 132: EMPTY
 133: PUSH
 134: EMPTY
 135: LIST
 136: LIST
 137: LIST
 138: ST_TO_ADDR
// ai_apemen_engineers = [ [ ] , [ ] , [ ] ] ;
 139: LD_ADDR_EXP 63
 143: PUSH
 144: EMPTY
 145: PUSH
 146: EMPTY
 147: PUSH
 148: EMPTY
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: ST_TO_ADDR
// ai_depot = [ 0 , 0 , 0 ] ;
 155: LD_ADDR_EXP 35
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: LIST
 173: ST_TO_ADDR
// ai_labs = [ [ ] , [ ] , [ ] ] ;
 174: LD_ADDR_EXP 36
 178: PUSH
 179: EMPTY
 180: PUSH
 181: EMPTY
 182: PUSH
 183: EMPTY
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: ST_TO_ADDR
// ai_facts = [ [ ] , [ ] , [ ] ] ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: EMPTY
 196: PUSH
 197: EMPTY
 198: PUSH
 199: EMPTY
 200: PUSH
 201: EMPTY
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// ai_armouries = [ [ ] , [ ] , [ ] ] ;
 206: LD_ADDR_EXP 49
 210: PUSH
 211: EMPTY
 212: PUSH
 213: EMPTY
 214: PUSH
 215: EMPTY
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: ST_TO_ADDR
// ai_bunkers = [ [ ] , [ ] , [ ] ] ;
 222: LD_ADDR_EXP 50
 226: PUSH
 227: EMPTY
 228: PUSH
 229: EMPTY
 230: PUSH
 231: EMPTY
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: ST_TO_ADDR
// ai_turrets = [ [ ] , [ ] , [ ] ] ;
 238: LD_ADDR_EXP 56
 242: PUSH
 243: EMPTY
 244: PUSH
 245: EMPTY
 246: PUSH
 247: EMPTY
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// ai_oil_mine = [ 0 , 0 , 0 ] ;
 254: LD_ADDR_EXP 51
 258: PUSH
 259: LD_INT 0
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// ai_siberite_mines = [ [ ] , [ ] , [ ] ] ;
 273: LD_ADDR_EXP 37
 277: PUSH
 278: EMPTY
 279: PUSH
 280: EMPTY
 281: PUSH
 282: EMPTY
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: ST_TO_ADDR
// ai_fact_extensions = [ [ ] , [ ] , [ ] ] ;
 289: LD_ADDR_EXP 52
 293: PUSH
 294: EMPTY
 295: PUSH
 296: EMPTY
 297: PUSH
 298: EMPTY
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// ai_power_plants = [ [ ] , [ ] , [ ] ] ;
 305: LD_ADDR_EXP 38
 309: PUSH
 310: EMPTY
 311: PUSH
 312: EMPTY
 313: PUSH
 314: EMPTY
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: ST_TO_ADDR
// ai_control_tower = [ 0 , 0 , 0 ] ;
 321: LD_ADDR_EXP 57
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// ai_buildings_locations = [ [ ] , [ ] , [ ] ] ;
 340: LD_ADDR_EXP 39
 344: PUSH
 345: EMPTY
 346: PUSH
 347: EMPTY
 348: PUSH
 349: EMPTY
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: ST_TO_ADDR
// ai_captured_buildings = [ [ ] , [ ] , [ ] ] ;
 356: LD_ADDR_EXP 79
 360: PUSH
 361: EMPTY
 362: PUSH
 363: EMPTY
 364: PUSH
 365: EMPTY
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// ai_vehicles_defend = [ [ ] , [ ] , [ ] ] ;
 372: LD_ADDR_EXP 40
 376: PUSH
 377: EMPTY
 378: PUSH
 379: EMPTY
 380: PUSH
 381: EMPTY
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// ai_vehicles_attack = [ [ ] , [ ] , [ ] ] ;
 388: LD_ADDR_EXP 41
 392: PUSH
 393: EMPTY
 394: PUSH
 395: EMPTY
 396: PUSH
 397: EMPTY
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: ST_TO_ADDR
// ai_vehicles_being_repaired = [ [ ] , [ ] , [ ] ] ;
 404: LD_ADDR_EXP 80
 408: PUSH
 409: EMPTY
 410: PUSH
 411: EMPTY
 412: PUSH
 413: EMPTY
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: LIST
 419: ST_TO_ADDR
// ai_refuel_vehicles_list = [ [ ] , [ ] , [ ] ] ;
 420: LD_ADDR_EXP 55
 424: PUSH
 425: EMPTY
 426: PUSH
 427: EMPTY
 428: PUSH
 429: EMPTY
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: LIST
 435: ST_TO_ADDR
// ai_human_pullback_hex = [ [ 106 , 40 ] , [ 75 , 22 ] , [ 60 , 81 ] ] ;
 436: LD_ADDR_EXP 42
 440: PUSH
 441: LD_INT 106
 443: PUSH
 444: LD_INT 40
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 75
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 60
 463: PUSH
 464: LD_INT 81
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: ST_TO_ADDR
// ai_building_under_construction = [ 0 , 0 , 0 ] ;
 476: LD_ADDR_EXP 43
 480: PUSH
 481: LD_INT 0
 483: PUSH
 484: LD_INT 0
 486: PUSH
 487: LD_INT 0
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: LIST
 494: ST_TO_ADDR
// ai_heal_these_humans = [ [ ] , [ ] , [ ] ] ;
 495: LD_ADDR_EXP 44
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: ST_TO_ADDR
// ai_all_buildings = [ [ ] , [ ] , [ ] ] ;
 511: LD_ADDR_EXP 45
 515: PUSH
 516: EMPTY
 517: PUSH
 518: EMPTY
 519: PUSH
 520: EMPTY
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// ai_building_constructor = [ 0 , 0 , 0 ] ;
 527: LD_ADDR_EXP 46
 531: PUSH
 532: LD_INT 0
 534: PUSH
 535: LD_INT 0
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: ST_TO_ADDR
// ai_upcoming_building_data = [ [ ] , [ ] , [ ] ] ;
 546: LD_ADDR_EXP 47
 550: PUSH
 551: EMPTY
 552: PUSH
 553: EMPTY
 554: PUSH
 555: EMPTY
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// ai_near_base_dist = 18 ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 18
 569: ST_TO_ADDR
// ai_vehicle_attack_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
 570: LD_ADDR_EXP 58
 574: PUSH
 575: LD_INT 0
 577: PUSH
 578: LD_INT 0
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// ai_human_attack_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
 589: LD_ADDR_EXP 68
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: ST_TO_ADDR
// ai_cargo_bay = [ 0 , 0 , 0 ] ;
 608: LD_ADDR_EXP 61
 612: PUSH
 613: LD_INT 0
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 0
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: LIST
 626: ST_TO_ADDR
// ai_cargo_bay_under_construction = [ false , false , false ] ;
 627: LD_ADDR_EXP 62
 631: PUSH
 632: LD_INT 0
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: LD_INT 0
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: ST_TO_ADDR
// ai_crane = [ 0 , 0 , 0 ] ;
 646: LD_ADDR_EXP 71
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// ai_attacking_unit_hex_index = [ [ ] , [ ] , [ ] ] ;
 665: LD_ADDR_EXP 75
 669: PUSH
 670: EMPTY
 671: PUSH
 672: EMPTY
 673: PUSH
 674: EMPTY
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: ST_TO_ADDR
// ai_retreating_attacking_humans = [ [ ] , [ ] , [ ] ] ;
 681: LD_ADDR_EXP 67
 685: PUSH
 686: EMPTY
 687: PUSH
 688: EMPTY
 689: PUSH
 690: EMPTY
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: ST_TO_ADDR
// ai_excepted_buildings = [ [ ] , [ ] , [ ] ] ;
 697: LD_ADDR_EXP 69
 701: PUSH
 702: EMPTY
 703: PUSH
 704: EMPTY
 705: PUSH
 706: EMPTY
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
// ai_new_attack_commencing = [ false , false , false ] ;
 713: LD_ADDR_EXP 70
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: LIST
 731: ST_TO_ADDR
// ai_time_shift_data = [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 732: LD_ADDR_EXP 72
 736: PUSH
 737: EMPTY
 738: PUSH
 739: EMPTY
 740: PUSH
 741: EMPTY
 742: PUSH
 743: EMPTY
 744: PUSH
 745: EMPTY
 746: PUSH
 747: EMPTY
 748: PUSH
 749: EMPTY
 750: PUSH
 751: EMPTY
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// ai_time_shift_hexes = [ [ ] , [ ] , [ ] ] ;
 763: LD_ADDR_EXP 73
 767: PUSH
 768: EMPTY
 769: PUSH
 770: EMPTY
 771: PUSH
 772: EMPTY
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: ST_TO_ADDR
// ai_time_shift_hexes_underway = [ [ ] , [ ] , [ ] ] ;
 779: LD_ADDR_EXP 74
 783: PUSH
 784: EMPTY
 785: PUSH
 786: EMPTY
 787: PUSH
 788: EMPTY
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: ST_TO_ADDR
// Initiate_ai_contact_time ;
 795: CALL 1072 0 0
// ai_attack_ground_info_initial = [ ] ;
 799: LD_ADDR_EXP 77
 803: PUSH
 804: EMPTY
 805: ST_TO_ADDR
// ai_attack_ground_info_sustain = [ ] ;
 806: LD_ADDR_EXP 78
 810: PUSH
 811: EMPTY
 812: ST_TO_ADDR
// oswald_is_substitute = false ;
 813: LD_ADDR_EXP 81
 817: PUSH
 818: LD_INT 0
 820: ST_TO_ADDR
// kurt_is_substitute = false ;
 821: LD_ADDR_EXP 82
 825: PUSH
 826: LD_INT 0
 828: ST_TO_ADDR
// original_gensher_people = [ ] ;
 829: LD_ADDR_EXP 83
 833: PUSH
 834: EMPTY
 835: ST_TO_ADDR
// russian_attack_strategy = - 1 ;
 836: LD_ADDR_EXP 84
 840: PUSH
 841: LD_INT 1
 843: NEG
 844: ST_TO_ADDR
// special_russian_attackers = [ ] ;
 845: LD_ADDR_EXP 85
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// yashin_alive = TestCharacters ( Yashin_08 ) ;
 852: LD_ADDR_EXP 86
 856: PUSH
 857: LD_STRING Yashin_08
 859: PPUSH
 860: CALL_OW 28
 864: ST_TO_ADDR
// num_russian_attacks = 0 ;
 865: LD_ADDR_EXP 87
 869: PUSH
 870: LD_INT 0
 872: ST_TO_ADDR
// gensher_spec_research_progress = 0 ;
 873: LD_ADDR_EXP 88
 877: PUSH
 878: LD_INT 0
 880: ST_TO_ADDR
// game_phase = 1 ;
 881: LD_ADDR_EXP 89
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// first_teleport = true ;
 889: LD_ADDR_EXP 90
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
// camera_engineers = [ ] ;
 897: LD_ADDR_EXP 91
 901: PUSH
 902: EMPTY
 903: ST_TO_ADDR
// cameras_placed = false ;
 904: LD_ADDR_EXP 92
 908: PUSH
 909: LD_INT 0
 911: ST_TO_ADDR
// scout_event_over = false ;
 912: LD_ADDR_EXP 93
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = [ 30 30$0 , 25 25$0 , 20 20$0 ] [ difficulty ] ;
 920: LD_ADDR_EXP 94
 924: PUSH
 925: LD_INT 63000
 927: PUSH
 928: LD_INT 52500
 930: PUSH
 931: LD_INT 42000
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: PUSH
 939: LD_OWVAR 67
 943: ARRAY
 944: ST_TO_ADDR
// saved_gensher_people = [ ] ;
 945: LD_ADDR_EXP 95
 949: PUSH
 950: EMPTY
 951: ST_TO_ADDR
// khattam_choice = 0 ;
 952: LD_ADDR_EXP 96
 956: PUSH
 957: LD_INT 0
 959: ST_TO_ADDR
// russian_interference_points = 0 ;
 960: LD_ADDR_EXP 97
 964: PUSH
 965: LD_INT 0
 967: ST_TO_ADDR
// us_reserve_troops = [ 20 , 30 , 60 ] [ difficulty ] ;
 968: LD_ADDR_EXP 101
 972: PUSH
 973: LD_INT 20
 975: PUSH
 976: LD_INT 30
 978: PUSH
 979: LD_INT 60
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: LD_OWVAR 67
 991: ARRAY
 992: ST_TO_ADDR
// russian_reserve_troops = [ 20 , 30 , 60 ] [ difficulty ] ;
 993: LD_ADDR_EXP 102
 997: PUSH
 998: LD_INT 20
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 60
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: ST_TO_ADDR
// gensher_interference_threshold = [ 20 , 15 , 10 ] [ difficulty ] ;
1018: LD_ADDR_EXP 103
1022: PUSH
1023: LD_INT 20
1025: PUSH
1026: LD_INT 15
1028: PUSH
1029: LD_INT 10
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_OWVAR 67
1041: ARRAY
1042: ST_TO_ADDR
// PrepareSides ;
1043: CALL 1353 0 0
// PrepareNature ;
1047: CALL 1806 0 0
// PrepareArabians ;
1051: CALL 2330 0 0
// ScanBuildings ;
1055: CALL 6183 0 0
// PrepareComputerSides ;
1059: CALL 8670 0 0
// InitiateTimeShiftData ;
1063: CALL 1156 0 0
// Action ;
1067: CALL 10456 0 0
// end ;
1071: END
// function Initiate_ai_contact_time ; var i ; begin
1072: LD_INT 0
1074: PPUSH
1075: PPUSH
// ai_contact_time = [ ] ;
1076: LD_ADDR_EXP 76
1080: PUSH
1081: EMPTY
1082: ST_TO_ADDR
// for i = 1 to 8 do
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_INT 8
1095: PUSH
1096: FOR_TO
1097: IFFALSE 1149
// ai_contact_time = ai_contact_time ^ [ [ 100000 , 100000 , 100000 , 100000 , 100000 , 100000 , 100000 , 100000 ] ] ;
1099: LD_ADDR_EXP 76
1103: PUSH
1104: LD_EXP 76
1108: PUSH
1109: LD_INT 100000
1111: PUSH
1112: LD_INT 100000
1114: PUSH
1115: LD_INT 100000
1117: PUSH
1118: LD_INT 100000
1120: PUSH
1121: LD_INT 100000
1123: PUSH
1124: LD_INT 100000
1126: PUSH
1127: LD_INT 100000
1129: PUSH
1130: LD_INT 100000
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: EMPTY
1144: LIST
1145: ADD
1146: ST_TO_ADDR
1147: GO 1096
1149: POP
1150: POP
// end ;
1151: LD_VAR 0 1
1155: RET
// function InitiateTimeShiftData ; var side ; begin
1156: LD_INT 0
1158: PPUSH
1159: PPUSH
// for side = 1 to 8 do
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: DOUBLE
1166: LD_INT 1
1168: DEC
1169: ST_TO_ADDR
1170: LD_INT 8
1172: PUSH
1173: FOR_TO
1174: IFFALSE 1346
// if Researched ( side , tech_st3 ) then
1176: LD_VAR 0 2
1180: PPUSH
1181: LD_INT 65
1183: PPUSH
1184: CALL_OW 325
1188: IFFALSE 1222
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 420 , 10 ] ) else
1190: LD_ADDR_EXP 72
1194: PUSH
1195: LD_EXP 72
1199: PPUSH
1200: LD_VAR 0 2
1204: PPUSH
1205: LD_INT 420
1207: PUSH
1208: LD_INT 10
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PPUSH
1215: CALL_OW 1
1219: ST_TO_ADDR
1220: GO 1344
// if Researched ( side , tech_st2 ) then
1222: LD_VAR 0 2
1226: PPUSH
1227: LD_INT 64
1229: PPUSH
1230: CALL_OW 325
1234: IFFALSE 1268
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 420 , 10 ] ) else
1236: LD_ADDR_EXP 72
1240: PUSH
1241: LD_EXP 72
1245: PPUSH
1246: LD_VAR 0 2
1250: PPUSH
1251: LD_INT 420
1253: PUSH
1254: LD_INT 10
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PPUSH
1261: CALL_OW 1
1265: ST_TO_ADDR
1266: GO 1344
// if Researched ( side , tech_st1 ) then
1268: LD_VAR 0 2
1272: PPUSH
1273: LD_INT 63
1275: PPUSH
1276: CALL_OW 325
1280: IFFALSE 1314
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 320 , 7 ] ) else
1282: LD_ADDR_EXP 72
1286: PUSH
1287: LD_EXP 72
1291: PPUSH
1292: LD_VAR 0 2
1296: PPUSH
1297: LD_INT 320
1299: PUSH
1300: LD_INT 7
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PPUSH
1307: CALL_OW 1
1311: ST_TO_ADDR
1312: GO 1344
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 215 , 4 ] ) ;
1314: LD_ADDR_EXP 72
1318: PUSH
1319: LD_EXP 72
1323: PPUSH
1324: LD_VAR 0 2
1328: PPUSH
1329: LD_INT 215
1331: PUSH
1332: LD_INT 4
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PPUSH
1339: CALL_OW 1
1343: ST_TO_ADDR
1344: GO 1173
1346: POP
1347: POP
// end ;
1348: LD_VAR 0 1
1352: RET
// function PrepareSides ; begin
1353: LD_INT 0
1355: PPUSH
// nature = 0 ;
1356: LD_ADDR_EXP 5
1360: PUSH
1361: LD_INT 0
1363: ST_TO_ADDR
// americans = 1 ;
1364: LD_ADDR_EXP 7
1368: PUSH
1369: LD_INT 1
1371: ST_TO_ADDR
// you = 2 ;
1372: LD_ADDR_EXP 3
1376: PUSH
1377: LD_INT 2
1379: ST_TO_ADDR
// russians = 3 ;
1380: LD_ADDR_EXP 4
1384: PUSH
1385: LD_INT 3
1387: ST_TO_ADDR
// americans_alt = 4 ;
1388: LD_ADDR_EXP 9
1392: PUSH
1393: LD_INT 4
1395: ST_TO_ADDR
// you_alt = 5 ;
1396: LD_ADDR_EXP 6
1400: PUSH
1401: LD_INT 5
1403: ST_TO_ADDR
// scout_side = 8 ;
1404: LD_ADDR_EXP 8
1408: PUSH
1409: LD_INT 8
1411: ST_TO_ADDR
// SetAttitude ( americans , you , att_enemy , true ) ;
1412: LD_EXP 7
1416: PPUSH
1417: LD_EXP 3
1421: PPUSH
1422: LD_INT 2
1424: PPUSH
1425: LD_INT 1
1427: PPUSH
1428: CALL_OW 80
// SetAttitude ( americans , russians , att_enemy , true ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_EXP 4
1441: PPUSH
1442: LD_INT 2
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: CALL_OW 80
// SetAttitude ( americans , americans_alt , att_friend , true ) ;
1452: LD_EXP 7
1456: PPUSH
1457: LD_EXP 9
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: CALL_OW 80
// SetAttitude ( americans , you_alt , att_friend , true ) ;
1472: LD_EXP 7
1476: PPUSH
1477: LD_EXP 6
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: LD_INT 1
1487: PPUSH
1488: CALL_OW 80
// SetAttitude ( americans , scout_side , att_friend , true ) ;
1492: LD_EXP 7
1496: PPUSH
1497: LD_EXP 8
1501: PPUSH
1502: LD_INT 1
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 80
// SetAttitude ( you , russians , att_enemy , true ) ;
1512: LD_EXP 3
1516: PPUSH
1517: LD_EXP 4
1521: PPUSH
1522: LD_INT 2
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 80
// SetAttitude ( you , americans_alt , att_enemy , true ) ;
1532: LD_EXP 3
1536: PPUSH
1537: LD_EXP 9
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: LD_INT 1
1547: PPUSH
1548: CALL_OW 80
// SetAttitude ( you , you_alt , att_friend , true ) ;
1552: LD_EXP 3
1556: PPUSH
1557: LD_EXP 6
1561: PPUSH
1562: LD_INT 1
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 80
// SetAttitude ( you , scout_side , att_friend , true ) ;
1572: LD_EXP 3
1576: PPUSH
1577: LD_EXP 8
1581: PPUSH
1582: LD_INT 1
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: CALL_OW 80
// SetAttitude ( russians , americans_alt , att_enemy , true ) ;
1592: LD_EXP 4
1596: PPUSH
1597: LD_EXP 9
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 1
1607: PPUSH
1608: CALL_OW 80
// SetAttitude ( russians , you_alt , att_enemy , true ) ;
1612: LD_EXP 4
1616: PPUSH
1617: LD_EXP 6
1621: PPUSH
1622: LD_INT 2
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 80
// SetAttitude ( russians , scout_side , att_friend , true ) ;
1632: LD_EXP 4
1636: PPUSH
1637: LD_EXP 8
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: LD_INT 1
1647: PPUSH
1648: CALL_OW 80
// SetAttitude ( americans_alt , you_alt , att_enemy , true ) ;
1652: LD_EXP 9
1656: PPUSH
1657: LD_EXP 6
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 1
1667: PPUSH
1668: CALL_OW 80
// SetAttitude ( americans_alt , scout_side , att_friend , true ) ;
1672: LD_EXP 9
1676: PPUSH
1677: LD_EXP 8
1681: PPUSH
1682: LD_INT 1
1684: PPUSH
1685: LD_INT 1
1687: PPUSH
1688: CALL_OW 80
// SetAttitude ( you_alt , scout_side , att_friend , true ) ;
1692: LD_EXP 6
1696: PPUSH
1697: LD_EXP 8
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: LD_INT 1
1707: PPUSH
1708: CALL_OW 80
// ChangeSideFog ( you_alt , you ) ;
1712: LD_EXP 6
1716: PPUSH
1717: LD_EXP 3
1721: PPUSH
1722: CALL_OW 343
// if difficulty = 3 then
1726: LD_OWVAR 67
1730: PUSH
1731: LD_INT 3
1733: EQUAL
1734: IFFALSE 1751
// SetTech ( tech_opto1 , americans , state_researched ) ;
1736: LD_INT 60
1738: PPUSH
1739: LD_EXP 7
1743: PPUSH
1744: LD_INT 2
1746: PPUSH
1747: CALL_OW 322
// if difficulty = 3 then
1751: LD_OWVAR 67
1755: PUSH
1756: LD_INT 3
1758: EQUAL
1759: IFFALSE 1776
// SetTech ( tech_comp3 , russians , state_researched ) ;
1761: LD_INT 59
1763: PPUSH
1764: LD_EXP 4
1768: PPUSH
1769: LD_INT 2
1771: PPUSH
1772: CALL_OW 322
// if difficulty = 3 then
1776: LD_OWVAR 67
1780: PUSH
1781: LD_INT 3
1783: EQUAL
1784: IFFALSE 1801
// SetTech ( tech_st3 , russians , state_researched ) ;
1786: LD_INT 65
1788: PPUSH
1789: LD_EXP 4
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: CALL_OW 322
// end ;
1801: LD_VAR 0 1
1805: RET
// function PrepareNature ; var i , spots , num , agres , count , temp_unit ; begin
1806: LD_INT 0
1808: PPUSH
1809: PPUSH
1810: PPUSH
1811: PPUSH
1812: PPUSH
1813: PPUSH
1814: PPUSH
// for i in FilterAllUnits ( [ f_side , nature ] ) do
1815: LD_ADDR_VAR 0 2
1819: PUSH
1820: LD_INT 22
1822: PUSH
1823: LD_EXP 5
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PPUSH
1832: CALL_OW 69
1836: PUSH
1837: FOR_IN
1838: IFFALSE 1851
// DestroyUnit ( i ) ;
1840: LD_VAR 0 2
1844: PPUSH
1845: CALL_OW 65
1849: GO 1837
1851: POP
1852: POP
// spots = [ [ 158 , 91 ] , [ 140 , 107 ] , [ 37 , 27 ] , [ 22 , 4 ] , [ 38 , 10 ] , [ 50 , 23 ] , [ 40 , 20 ] , [ 158 , 110 ] , [ 159 , 118 ] , [ 146 , 115 ] , [ 135 , 100 ] , [ 155 , 115 ] ] ;
1853: LD_ADDR_VAR 0 3
1857: PUSH
1858: LD_INT 158
1860: PUSH
1861: LD_INT 91
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 140
1870: PUSH
1871: LD_INT 107
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 37
1880: PUSH
1881: LD_INT 27
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 22
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 38
1900: PUSH
1901: LD_INT 10
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: LD_INT 50
1910: PUSH
1911: LD_INT 23
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 40
1920: PUSH
1921: LD_INT 20
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 158
1930: PUSH
1931: LD_INT 110
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 159
1940: PUSH
1941: LD_INT 118
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: LD_INT 146
1950: PUSH
1951: LD_INT 115
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 135
1960: PUSH
1961: LD_INT 100
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 155
1970: PUSH
1971: LD_INT 115
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: ST_TO_ADDR
// InitUc ;
1992: CALL_OW 18
// InitHc ;
1996: CALL_OW 19
// uc_side = nature ;
2000: LD_ADDR_OWVAR 20
2004: PUSH
2005: LD_EXP 5
2009: ST_TO_ADDR
// uc_nation = nation_nature ;
2010: LD_ADDR_OWVAR 21
2014: PUSH
2015: LD_INT 0
2017: ST_TO_ADDR
// agres = - 10 + difficulty * 20 ;
2018: LD_ADDR_VAR 0 5
2022: PUSH
2023: LD_INT 10
2025: NEG
2026: PUSH
2027: LD_OWVAR 67
2031: PUSH
2032: LD_INT 20
2034: MUL
2035: PLUS
2036: ST_TO_ADDR
// count = [ 15 , 13 , 10 ] [ difficulty ] ;
2037: LD_ADDR_VAR 0 6
2041: PUSH
2042: LD_INT 15
2044: PUSH
2045: LD_INT 13
2047: PUSH
2048: LD_INT 10
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: PUSH
2056: LD_OWVAR 67
2060: ARRAY
2061: ST_TO_ADDR
// hc_class = class_apeman ;
2062: LD_ADDR_OWVAR 28
2066: PUSH
2067: LD_INT 12
2069: ST_TO_ADDR
// for i = 1 to count do
2070: LD_ADDR_VAR 0 2
2074: PUSH
2075: DOUBLE
2076: LD_INT 1
2078: DEC
2079: ST_TO_ADDR
2080: LD_VAR 0 6
2084: PUSH
2085: FOR_TO
2086: IFFALSE 2323
// begin if spots = 0 then
2088: LD_VAR 0 3
2092: PUSH
2093: LD_INT 0
2095: EQUAL
2096: IFFALSE 2102
// exit ;
2098: POP
2099: POP
2100: GO 2325
// uc_direction = Rand ( 0 , 5 ) ;
2102: LD_ADDR_OWVAR 24
2106: PUSH
2107: LD_INT 0
2109: PPUSH
2110: LD_INT 5
2112: PPUSH
2113: CALL_OW 12
2117: ST_TO_ADDR
// hc_agressivity = Rand ( - 1 * agres , agres ) ;
2118: LD_ADDR_OWVAR 35
2122: PUSH
2123: LD_INT 1
2125: NEG
2126: PUSH
2127: LD_VAR 0 5
2131: MUL
2132: PPUSH
2133: LD_VAR 0 5
2137: PPUSH
2138: CALL_OW 12
2142: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
2143: LD_ADDR_OWVAR 29
2147: PUSH
2148: LD_INT 11
2150: PPUSH
2151: LD_INT 13
2153: PPUSH
2154: CALL_OW 12
2158: PUSH
2159: LD_INT 10
2161: PPUSH
2162: LD_INT 11
2164: PPUSH
2165: CALL_OW 12
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
2174: LD_ADDR_OWVAR 27
2178: PUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 2
2184: PPUSH
2185: CALL_OW 12
2189: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , Rand ( 0 , 1 ) , 0 , 0 ] ;
2190: LD_ADDR_OWVAR 31
2194: PUSH
2195: LD_INT 0
2197: PPUSH
2198: LD_INT 1
2200: PPUSH
2201: CALL_OW 12
2205: PUSH
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: CALL_OW 12
2216: PUSH
2217: LD_INT 0
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// num = Rand ( 1 , spots ) ;
2229: LD_ADDR_VAR 0 4
2233: PUSH
2234: LD_INT 1
2236: PPUSH
2237: LD_VAR 0 3
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , spots [ num ] [ 1 ] , spots [ num ] [ 2 ] , 5 , false ) ;
2247: CALL_OW 44
2251: PPUSH
2252: LD_VAR 0 3
2256: PUSH
2257: LD_VAR 0 4
2261: ARRAY
2262: PUSH
2263: LD_INT 1
2265: ARRAY
2266: PPUSH
2267: LD_VAR 0 3
2271: PUSH
2272: LD_VAR 0 4
2276: ARRAY
2277: PUSH
2278: LD_INT 2
2280: ARRAY
2281: PPUSH
2282: LD_INT 5
2284: PPUSH
2285: LD_INT 0
2287: PPUSH
2288: CALL_OW 50
// if Prob ( 50 ) then
2292: LD_INT 50
2294: PPUSH
2295: CALL_OW 13
2299: IFFALSE 2321
// spots = Delete ( spots , num ) ;
2301: LD_ADDR_VAR 0 3
2305: PUSH
2306: LD_VAR 0 3
2310: PPUSH
2311: LD_VAR 0 4
2315: PPUSH
2316: CALL_OW 3
2320: ST_TO_ADDR
// end ;
2321: GO 2085
2323: POP
2324: POP
// end ;
2325: LD_VAR 0 1
2329: RET
// function PrepareArabians ; var human_list , i , temp_unit , val , k , gensher_bunker_apes ; begin
2330: LD_INT 0
2332: PPUSH
2333: PPUSH
2334: PPUSH
2335: PPUSH
2336: PPUSH
2337: PPUSH
2338: PPUSH
// InitHc ;
2339: CALL_OW 19
// InitUc ;
2343: CALL_OW 18
// uc_side = you ;
2347: LD_ADDR_OWVAR 20
2351: PUSH
2352: LD_EXP 3
2356: ST_TO_ADDR
// uc_nation = nation_arabian ;
2357: LD_ADDR_OWVAR 21
2361: PUSH
2362: LD_INT 2
2364: ST_TO_ADDR
// if not testing then
2365: LD_EXP 1
2369: NOT
2370: IFFALSE 2963
// begin Heike = CreateCharacter ( Heike_11_sel ) ;
2372: LD_ADDR_EXP 10
2376: PUSH
2377: LD_STRING Heike_11_sel
2379: PPUSH
2380: CALL_OW 34
2384: ST_TO_ADDR
// if TestCharacters ( Oswald_11_sel ) then
2385: LD_STRING Oswald_11_sel
2387: PPUSH
2388: CALL_OW 28
2392: IFFALSE 2409
// Oswald = CreateCharacter ( Oswald_11_sel ) else
2394: LD_ADDR_EXP 12
2398: PUSH
2399: LD_STRING Oswald_11_sel
2401: PPUSH
2402: CALL_OW 34
2406: ST_TO_ADDR
2407: GO 2417
// Oswald = 0 ;
2409: LD_ADDR_EXP 12
2413: PUSH
2414: LD_INT 0
2416: ST_TO_ADDR
// oswald_is_substitute = LoadVariable ( Oswald_is_substitute_10 , false ) ;
2417: LD_ADDR_EXP 81
2421: PUSH
2422: LD_STRING Oswald_is_substitute_10
2424: PPUSH
2425: LD_INT 0
2427: PPUSH
2428: CALL_OW 30
2432: ST_TO_ADDR
// if TestCharacters ( Kurt_11_sel ) then
2433: LD_STRING Kurt_11_sel
2435: PPUSH
2436: CALL_OW 28
2440: IFFALSE 2457
// Kurt = CreateCharacter ( Kurt_11_sel ) else
2442: LD_ADDR_EXP 18
2446: PUSH
2447: LD_STRING Kurt_11_sel
2449: PPUSH
2450: CALL_OW 34
2454: ST_TO_ADDR
2455: GO 2465
// Kurt = 0 ;
2457: LD_ADDR_EXP 18
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// kurt_is_substitute = LoadVariable ( Kurt_is_substitute_10 , false ) ;
2465: LD_ADDR_EXP 82
2469: PUSH
2470: LD_STRING Kurt_is_substitute_10
2472: PPUSH
2473: LD_INT 0
2475: PPUSH
2476: CALL_OW 30
2480: ST_TO_ADDR
// if TestCharacters ( Sonya_11_sel ) then
2481: LD_STRING Sonya_11_sel
2483: PPUSH
2484: CALL_OW 28
2488: IFFALSE 2505
// Sonya = CreateCharacter ( Sonya_11_sel ) else
2490: LD_ADDR_EXP 11
2494: PUSH
2495: LD_STRING Sonya_11_sel
2497: PPUSH
2498: CALL_OW 34
2502: ST_TO_ADDR
2503: GO 2513
// Sonya = 0 ;
2505: LD_ADDR_EXP 11
2509: PUSH
2510: LD_INT 0
2512: ST_TO_ADDR
// if TestCharacters ( Ralph_11_sel ) then
2513: LD_STRING Ralph_11_sel
2515: PPUSH
2516: CALL_OW 28
2520: IFFALSE 2537
// Ralph = CreateCharacter ( Ralph_11_sel ) else
2522: LD_ADDR_EXP 13
2526: PUSH
2527: LD_STRING Ralph_11_sel
2529: PPUSH
2530: CALL_OW 34
2534: ST_TO_ADDR
2535: GO 2545
// Ralph = 0 ;
2537: LD_ADDR_EXP 13
2541: PUSH
2542: LD_INT 0
2544: ST_TO_ADDR
// if TestCharacters ( Kowalski_11_sel ) then
2545: LD_STRING Kowalski_11_sel
2547: PPUSH
2548: CALL_OW 28
2552: IFFALSE 2569
// Kowalski = CreateCharacter ( Kowalski_11_sel ) else
2554: LD_ADDR_EXP 14
2558: PUSH
2559: LD_STRING Kowalski_11_sel
2561: PPUSH
2562: CALL_OW 34
2566: ST_TO_ADDR
2567: GO 2577
// Kowalski = 0 ;
2569: LD_ADDR_EXP 14
2573: PUSH
2574: LD_INT 0
2576: ST_TO_ADDR
// if TestCharacters ( Evelyn_11_sel ) then
2577: LD_STRING Evelyn_11_sel
2579: PPUSH
2580: CALL_OW 28
2584: IFFALSE 2601
// Evelyn = CreateCharacter ( Evelyn_11_sel ) else
2586: LD_ADDR_EXP 15
2590: PUSH
2591: LD_STRING Evelyn_11_sel
2593: PPUSH
2594: CALL_OW 34
2598: ST_TO_ADDR
2599: GO 2609
// Evelyn = 0 ;
2601: LD_ADDR_EXP 15
2605: PUSH
2606: LD_INT 0
2608: ST_TO_ADDR
// if TestCharacters ( Suze_11_sel ) then
2609: LD_STRING Suze_11_sel
2611: PPUSH
2612: CALL_OW 28
2616: IFFALSE 2633
// Suze = CreateCharacter ( Suze_11_sel ) else
2618: LD_ADDR_EXP 16
2622: PUSH
2623: LD_STRING Suze_11_sel
2625: PPUSH
2626: CALL_OW 34
2630: ST_TO_ADDR
2631: GO 2641
// Suze = 0 ;
2633: LD_ADDR_EXP 16
2637: PUSH
2638: LD_INT 0
2640: ST_TO_ADDR
// if TestCharacters ( Olaf_11_sel ) then
2641: LD_STRING Olaf_11_sel
2643: PPUSH
2644: CALL_OW 28
2648: IFFALSE 2665
// Olaf = CreateCharacter ( Olaf_11_sel ) else
2650: LD_ADDR_EXP 17
2654: PUSH
2655: LD_STRING Olaf_11_sel
2657: PPUSH
2658: CALL_OW 34
2662: ST_TO_ADDR
2663: GO 2673
// Olaf = 0 ;
2665: LD_ADDR_EXP 17
2669: PUSH
2670: LD_INT 0
2672: ST_TO_ADDR
// if TestCharacters ( Dwayne_11_sel ) then
2673: LD_STRING Dwayne_11_sel
2675: PPUSH
2676: CALL_OW 28
2680: IFFALSE 2697
// Dwayne = CreateCharacter ( Dwayne_11_sel ) else
2682: LD_ADDR_EXP 19
2686: PUSH
2687: LD_STRING Dwayne_11_sel
2689: PPUSH
2690: CALL_OW 34
2694: ST_TO_ADDR
2695: GO 2705
// Dwayne = 0 ;
2697: LD_ADDR_EXP 19
2701: PUSH
2702: LD_INT 0
2704: ST_TO_ADDR
// if TestCharacters ( MarkB_11_sel ) then
2705: LD_STRING MarkB_11_sel
2707: PPUSH
2708: CALL_OW 28
2712: IFFALSE 2729
// MarkB = CreateCharacter ( MarkB_11_sel ) else
2714: LD_ADDR_EXP 20
2718: PUSH
2719: LD_STRING MarkB_11_sel
2721: PPUSH
2722: CALL_OW 34
2726: ST_TO_ADDR
2727: GO 2737
// MarkB = 0 ;
2729: LD_ADDR_EXP 20
2733: PUSH
2734: LD_INT 0
2736: ST_TO_ADDR
// if TestCharacters ( Aviradze_11_sel ) then
2737: LD_STRING Aviradze_11_sel
2739: PPUSH
2740: CALL_OW 28
2744: IFFALSE 2761
// Aviradze = CreateCharacter ( Aviradze_11_sel ) else
2746: LD_ADDR_EXP 21
2750: PUSH
2751: LD_STRING Aviradze_11_sel
2753: PPUSH
2754: CALL_OW 34
2758: ST_TO_ADDR
2759: GO 2769
// Aviradze = 0 ;
2761: LD_ADDR_EXP 21
2765: PUSH
2766: LD_INT 0
2768: ST_TO_ADDR
// if TestCharacters ( Swansson_11_sel ) then
2769: LD_STRING Swansson_11_sel
2771: PPUSH
2772: CALL_OW 28
2776: IFFALSE 2793
// Swansson = CreateCharacter ( Swansson_11_sel ) else
2778: LD_ADDR_EXP 22
2782: PUSH
2783: LD_STRING Swansson_11_sel
2785: PPUSH
2786: CALL_OW 34
2790: ST_TO_ADDR
2791: GO 2801
// Swansson = 0 ;
2793: LD_ADDR_EXP 22
2797: PUSH
2798: LD_INT 0
2800: ST_TO_ADDR
// human_list = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] diff 0 ;
2801: LD_ADDR_VAR 0 2
2805: PUSH
2806: LD_EXP 10
2810: PUSH
2811: LD_EXP 11
2815: PUSH
2816: LD_EXP 12
2820: PUSH
2821: LD_EXP 13
2825: PUSH
2826: LD_EXP 14
2830: PUSH
2831: LD_EXP 15
2835: PUSH
2836: LD_EXP 16
2840: PUSH
2841: LD_EXP 17
2845: PUSH
2846: LD_EXP 18
2850: PUSH
2851: LD_EXP 19
2855: PUSH
2856: LD_EXP 20
2860: PUSH
2861: LD_EXP 21
2865: PUSH
2866: LD_EXP 22
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_INT 0
2888: DIFF
2889: ST_TO_ADDR
// human_list = human_list ^ ( CreateCharacterSet ( Others_11_sel ) diff 0 ) ;
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: LD_VAR 0 2
2899: PUSH
2900: LD_STRING Others_11_sel
2902: PPUSH
2903: CALL_OW 31
2907: PUSH
2908: LD_INT 0
2910: DIFF
2911: ADD
2912: ST_TO_ADDR
// if TestCharacters ( Gonzo_10 ) then
2913: LD_STRING Gonzo_10
2915: PPUSH
2916: CALL_OW 28
2920: IFFALSE 2953
// begin Gonzo = CreateCharacter ( Gonzo_10 ) ;
2922: LD_ADDR_EXP 23
2926: PUSH
2927: LD_STRING Gonzo_10
2929: PPUSH
2930: CALL_OW 34
2934: ST_TO_ADDR
// human_list = human_list ^ Gonzo ;
2935: LD_ADDR_VAR 0 2
2939: PUSH
2940: LD_VAR 0 2
2944: PUSH
2945: LD_EXP 23
2949: ADD
2950: ST_TO_ADDR
// end else
2951: GO 2961
// Gonzo = 0 ;
2953: LD_ADDR_EXP 23
2957: PUSH
2958: LD_INT 0
2960: ST_TO_ADDR
// end else
2961: GO 3496
// begin InitHc ;
2963: CALL_OW 19
// PrepareSoldier ( sex_female , 7 ) ;
2967: LD_INT 2
2969: PPUSH
2970: LD_INT 7
2972: PPUSH
2973: CALL_OW 381
// hc_name = Heike ;
2977: LD_ADDR_OWVAR 26
2981: PUSH
2982: LD_STRING Heike
2984: ST_TO_ADDR
// Heike = CreateHuman ;
2985: LD_ADDR_EXP 10
2989: PUSH
2990: CALL_OW 44
2994: ST_TO_ADDR
// PrepareScientist ( sex_female , 7 ) ;
2995: LD_INT 2
2997: PPUSH
2998: LD_INT 7
3000: PPUSH
3001: CALL_OW 384
// hc_name = Sonya ;
3005: LD_ADDR_OWVAR 26
3009: PUSH
3010: LD_STRING Sonya
3012: ST_TO_ADDR
// Sonya = CreateHuman ;
3013: LD_ADDR_EXP 11
3017: PUSH
3018: CALL_OW 44
3022: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3023: LD_INT 1
3025: PPUSH
3026: LD_INT 7
3028: PPUSH
3029: CALL_OW 381
// hc_name = Oswald ;
3033: LD_ADDR_OWVAR 26
3037: PUSH
3038: LD_STRING Oswald
3040: ST_TO_ADDR
// Oswald = CreateHuman ;
3041: LD_ADDR_EXP 12
3045: PUSH
3046: CALL_OW 44
3050: ST_TO_ADDR
// oswald_is_substitute = false ;
3051: LD_ADDR_EXP 81
3055: PUSH
3056: LD_INT 0
3058: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3059: LD_INT 1
3061: PPUSH
3062: LD_INT 7
3064: PPUSH
3065: CALL_OW 381
// hc_name = Ralph ;
3069: LD_ADDR_OWVAR 26
3073: PUSH
3074: LD_STRING Ralph
3076: ST_TO_ADDR
// Ralph = CreateHuman ;
3077: LD_ADDR_EXP 13
3081: PUSH
3082: CALL_OW 44
3086: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3087: LD_INT 1
3089: PPUSH
3090: LD_INT 7
3092: PPUSH
3093: CALL_OW 381
// hc_name = Kowalski ;
3097: LD_ADDR_OWVAR 26
3101: PUSH
3102: LD_STRING Kowalski
3104: ST_TO_ADDR
// Kowalski = CreateHuman ;
3105: LD_ADDR_EXP 14
3109: PUSH
3110: CALL_OW 44
3114: ST_TO_ADDR
// PrepareEngineer ( sex_female , 7 ) ;
3115: LD_INT 2
3117: PPUSH
3118: LD_INT 7
3120: PPUSH
3121: CALL_OW 382
// hc_name = Evelyn ;
3125: LD_ADDR_OWVAR 26
3129: PUSH
3130: LD_STRING Evelyn
3132: ST_TO_ADDR
// Evelyn = CreateHuman ;
3133: LD_ADDR_EXP 15
3137: PUSH
3138: CALL_OW 44
3142: ST_TO_ADDR
// PrepareSoldier ( sex_female , 7 ) ;
3143: LD_INT 2
3145: PPUSH
3146: LD_INT 7
3148: PPUSH
3149: CALL_OW 381
// hc_name = Suze ;
3153: LD_ADDR_OWVAR 26
3157: PUSH
3158: LD_STRING Suze
3160: ST_TO_ADDR
// Suze = CreateHuman ;
3161: LD_ADDR_EXP 16
3165: PUSH
3166: CALL_OW 44
3170: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
3171: LD_INT 1
3173: PPUSH
3174: LD_INT 7
3176: PPUSH
3177: CALL_OW 383
// hc_name = Olaf ;
3181: LD_ADDR_OWVAR 26
3185: PUSH
3186: LD_STRING Olaf
3188: ST_TO_ADDR
// Olaf = CreateHuman ;
3189: LD_ADDR_EXP 17
3193: PUSH
3194: CALL_OW 44
3198: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 7
3204: PPUSH
3205: CALL_OW 381
// hc_name = Kurt ;
3209: LD_ADDR_OWVAR 26
3213: PUSH
3214: LD_STRING Kurt
3216: ST_TO_ADDR
// Kurt = CreateHuman ;
3217: LD_ADDR_EXP 18
3221: PUSH
3222: CALL_OW 44
3226: ST_TO_ADDR
// kurt_is_substitute = false ;
3227: LD_ADDR_EXP 82
3231: PUSH
3232: LD_INT 0
3234: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
3235: LD_INT 1
3237: PPUSH
3238: LD_INT 7
3240: PPUSH
3241: CALL_OW 383
// hc_name = Dwayne ;
3245: LD_ADDR_OWVAR 26
3249: PUSH
3250: LD_STRING Dwayne
3252: ST_TO_ADDR
// Dwayne = CreateHuman ;
3253: LD_ADDR_EXP 19
3257: PUSH
3258: CALL_OW 44
3262: ST_TO_ADDR
// PrepareScientist ( sex_male , 7 ) ;
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 7
3268: PPUSH
3269: CALL_OW 384
// hc_name = Mark ;
3273: LD_ADDR_OWVAR 26
3277: PUSH
3278: LD_STRING Mark
3280: ST_TO_ADDR
// MarkB = CreateHuman ;
3281: LD_ADDR_EXP 20
3285: PUSH
3286: CALL_OW 44
3290: ST_TO_ADDR
// Aviradze = 0 ;
3291: LD_ADDR_EXP 21
3295: PUSH
3296: LD_INT 0
3298: ST_TO_ADDR
// Swansson = 0 ;
3299: LD_ADDR_EXP 22
3303: PUSH
3304: LD_INT 0
3306: ST_TO_ADDR
// human_list = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] diff 0 ;
3307: LD_ADDR_VAR 0 2
3311: PUSH
3312: LD_EXP 10
3316: PUSH
3317: LD_EXP 11
3321: PUSH
3322: LD_EXP 12
3326: PUSH
3327: LD_EXP 13
3331: PUSH
3332: LD_EXP 14
3336: PUSH
3337: LD_EXP 15
3341: PUSH
3342: LD_EXP 16
3346: PUSH
3347: LD_EXP 17
3351: PUSH
3352: LD_EXP 18
3356: PUSH
3357: LD_EXP 19
3361: PUSH
3362: LD_EXP 20
3366: PUSH
3367: LD_EXP 21
3371: PUSH
3372: LD_EXP 22
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: PUSH
3392: LD_INT 0
3394: DIFF
3395: ST_TO_ADDR
// InitHc ;
3396: CALL_OW 19
// uc_nation = nation_nature ;
3400: LD_ADDR_OWVAR 21
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
3408: LD_ADDR_OWVAR 28
3412: PUSH
3413: LD_INT 15
3415: ST_TO_ADDR
// hc_name = Gonzo ;
3416: LD_ADDR_OWVAR 26
3420: PUSH
3421: LD_STRING Gonzo
3423: ST_TO_ADDR
// hc_skills = [ 3 , 1 , 0 , 0 ] ;
3424: LD_ADDR_OWVAR 31
3428: PUSH
3429: LD_INT 3
3431: PUSH
3432: LD_INT 1
3434: PUSH
3435: LD_INT 0
3437: PUSH
3438: LD_INT 0
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: ST_TO_ADDR
// hc_attr = [ 13 , 12 ] ;
3447: LD_ADDR_OWVAR 29
3451: PUSH
3452: LD_INT 13
3454: PUSH
3455: LD_INT 12
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: ST_TO_ADDR
// hc_sex = sex_male ;
3462: LD_ADDR_OWVAR 27
3466: PUSH
3467: LD_INT 1
3469: ST_TO_ADDR
// Gonzo = CreateHuman ;
3470: LD_ADDR_EXP 23
3474: PUSH
3475: CALL_OW 44
3479: ST_TO_ADDR
// human_list = human_list ^ Gonzo ;
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: LD_VAR 0 2
3489: PUSH
3490: LD_EXP 23
3494: ADD
3495: ST_TO_ADDR
// end ; InitVc ;
3496: CALL_OW 20
// uc_direction = 5 ;
3500: LD_ADDR_OWVAR 24
3504: PUSH
3505: LD_INT 5
3507: ST_TO_ADDR
// uc_nation = nation_arabian ;
3508: LD_ADDR_OWVAR 21
3512: PUSH
3513: LD_INT 2
3515: ST_TO_ADDR
// vc_engine = engine_combustion ;
3516: LD_ADDR_OWVAR 39
3520: PUSH
3521: LD_INT 1
3523: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
3524: LD_ADDR_OWVAR 37
3528: PUSH
3529: LD_INT 14
3531: ST_TO_ADDR
// vc_control = control_manual ;
3532: LD_ADDR_OWVAR 38
3536: PUSH
3537: LD_INT 1
3539: ST_TO_ADDR
// vc_weapon = ar_cargo_bay ;
3540: LD_ADDR_OWVAR 40
3544: PUSH
3545: LD_INT 32
3547: ST_TO_ADDR
// for i = 1 to 2 do
3548: LD_ADDR_VAR 0 3
3552: PUSH
3553: DOUBLE
3554: LD_INT 1
3556: DEC
3557: ST_TO_ADDR
3558: LD_INT 2
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3883
// begin temp_unit = CreateVehicle ;
3564: LD_ADDR_VAR 0 4
3568: PUSH
3569: CALL_OW 45
3573: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
3574: LD_VAR 0 4
3578: PPUSH
3579: LD_INT 50
3581: PPUSH
3582: LD_INT 70
3584: PPUSH
3585: CALL_OW 12
3589: PPUSH
3590: CALL_OW 240
// val = Rand ( 1 , human_list - 1 ) ;
3594: LD_ADDR_VAR 0 5
3598: PUSH
3599: LD_INT 1
3601: PPUSH
3602: LD_VAR 0 2
3606: PUSH
3607: LD_INT 1
3609: MINUS
3610: PPUSH
3611: CALL_OW 12
3615: ST_TO_ADDR
// PlaceHumanInUnit ( human_list [ val ] , temp_unit ) ;
3616: LD_VAR 0 2
3620: PUSH
3621: LD_VAR 0 5
3625: ARRAY
3626: PPUSH
3627: LD_VAR 0 4
3631: PPUSH
3632: CALL_OW 52
// human_list = Delete ( human_list , val ) ;
3636: LD_ADDR_VAR 0 2
3640: PUSH
3641: LD_VAR 0 2
3645: PPUSH
3646: LD_VAR 0 5
3650: PPUSH
3651: CALL_OW 3
3655: ST_TO_ADDR
// case i of 1 :
3656: LD_VAR 0 3
3660: PUSH
3661: LD_INT 1
3663: DOUBLE
3664: EQUAL
3665: IFTRUE 3669
3667: GO 3687
3669: POP
// begin SetCargo ( temp_unit , mat_cans , 100 ) ;
3670: LD_VAR 0 4
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_INT 100
3680: PPUSH
3681: CALL_OW 290
// end ; 2 :
3685: GO 3866
3687: LD_INT 2
3689: DOUBLE
3690: EQUAL
3691: IFTRUE 3695
3693: GO 3865
3695: POP
// begin val = [ 90 , 70 , 50 ] [ difficulty ] ;
3696: LD_ADDR_VAR 0 5
3700: PUSH
3701: LD_INT 90
3703: PUSH
3704: LD_INT 70
3706: PUSH
3707: LD_INT 50
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_OWVAR 67
3719: ARRAY
3720: ST_TO_ADDR
// if LoadVariable ( Abdul_doubt_07 , false ) then
3721: LD_STRING Abdul_doubt_07
3723: PPUSH
3724: LD_INT 0
3726: PPUSH
3727: CALL_OW 30
3731: IFFALSE 3747
// val = val - 50 ;
3733: LD_ADDR_VAR 0 5
3737: PUSH
3738: LD_VAR 0 5
3742: PUSH
3743: LD_INT 50
3745: MINUS
3746: ST_TO_ADDR
// if LoadVariable ( Siberite_gathered_on_time_07_cont , true ) then
3747: LD_STRING Siberite_gathered_on_time_07_cont
3749: PPUSH
3750: LD_INT 1
3752: PPUSH
3753: CALL_OW 30
3757: IFFALSE 3793
// begin val = val + 20 ;
3759: LD_ADDR_VAR 0 5
3763: PUSH
3764: LD_VAR 0 5
3768: PUSH
3769: LD_INT 20
3771: PLUS
3772: ST_TO_ADDR
// if val > 100 then
3773: LD_VAR 0 5
3777: PUSH
3778: LD_INT 100
3780: GREATER
3781: IFFALSE 3791
// val = 100 ;
3783: LD_ADDR_VAR 0 5
3787: PUSH
3788: LD_INT 100
3790: ST_TO_ADDR
// end else
3791: GO 3807
// val = val - 50 ;
3793: LD_ADDR_VAR 0 5
3797: PUSH
3798: LD_VAR 0 5
3802: PUSH
3803: LD_INT 50
3805: MINUS
3806: ST_TO_ADDR
// if val < 0 then
3807: LD_VAR 0 5
3811: PUSH
3812: LD_INT 0
3814: LESS
3815: IFFALSE 3825
// val = 0 ;
3817: LD_ADDR_VAR 0 5
3821: PUSH
3822: LD_INT 0
3824: ST_TO_ADDR
// SetCargo ( temp_unit , mat_cans , val ) ;
3825: LD_VAR 0 4
3829: PPUSH
3830: LD_INT 1
3832: PPUSH
3833: LD_VAR 0 5
3837: PPUSH
3838: CALL_OW 290
// AddCargo ( temp_unit , mat_oil , 100 - val ) ;
3842: LD_VAR 0 4
3846: PPUSH
3847: LD_INT 2
3849: PPUSH
3850: LD_INT 100
3852: PUSH
3853: LD_VAR 0 5
3857: MINUS
3858: PPUSH
3859: CALL_OW 291
// end ; end ;
3863: GO 3866
3865: POP
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
3866: LD_VAR 0 4
3870: PPUSH
3871: LD_INT 8
3873: PPUSH
3874: LD_INT 0
3876: PPUSH
3877: CALL_OW 49
// end ;
3881: GO 3561
3883: POP
3884: POP
// val = 0 ;
3885: LD_ADDR_VAR 0 5
3889: PUSH
3890: LD_INT 0
3892: ST_TO_ADDR
// for i = 1 to [ 3 , 2 , 1 ] [ difficulty ] - LoadVariable ( Abdul_doubt_07 , false ) do
3893: LD_ADDR_VAR 0 3
3897: PUSH
3898: DOUBLE
3899: LD_INT 1
3901: DEC
3902: ST_TO_ADDR
3903: LD_INT 3
3905: PUSH
3906: LD_INT 2
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: PUSH
3917: LD_OWVAR 67
3921: ARRAY
3922: PUSH
3923: LD_STRING Abdul_doubt_07
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL_OW 30
3933: MINUS
3934: PUSH
3935: FOR_TO
3936: IFFALSE 4482
// begin vc_engine = engine_combustion ;
3938: LD_ADDR_OWVAR 39
3942: PUSH
3943: LD_INT 1
3945: ST_TO_ADDR
// if val = 0 then
3946: LD_VAR 0 5
3950: PUSH
3951: LD_INT 0
3953: EQUAL
3954: IFFALSE 4046
// begin case Rand ( 1 , 4 ) of 1 :
3956: LD_INT 1
3958: PPUSH
3959: LD_INT 4
3961: PPUSH
3962: CALL_OW 12
3966: PUSH
3967: LD_INT 1
3969: DOUBLE
3970: EQUAL
3971: IFTRUE 3975
3973: GO 3986
3975: POP
// vc_chassis = ar_hovercraft ; 2 :
3976: LD_ADDR_OWVAR 37
3980: PUSH
3981: LD_INT 11
3983: ST_TO_ADDR
3984: GO 4044
3986: LD_INT 2
3988: DOUBLE
3989: EQUAL
3990: IFTRUE 3994
3992: GO 4005
3994: POP
// vc_chassis = ar_light_trike ; 3 :
3995: LD_ADDR_OWVAR 37
3999: PUSH
4000: LD_INT 12
4002: ST_TO_ADDR
4003: GO 4044
4005: LD_INT 3
4007: DOUBLE
4008: EQUAL
4009: IFTRUE 4013
4011: GO 4024
4013: POP
// vc_chassis = ar_medium_trike ; 4 :
4014: LD_ADDR_OWVAR 37
4018: PUSH
4019: LD_INT 13
4021: ST_TO_ADDR
4022: GO 4044
4024: LD_INT 4
4026: DOUBLE
4027: EQUAL
4028: IFTRUE 4032
4030: GO 4043
4032: POP
// vc_chassis = ar_half_tracked ; end ;
4033: LD_ADDR_OWVAR 37
4037: PUSH
4038: LD_INT 14
4040: ST_TO_ADDR
4041: GO 4044
4043: POP
// end else
4044: GO 4096
// begin case Rand ( 1 , 2 ) of 1 :
4046: LD_INT 1
4048: PPUSH
4049: LD_INT 2
4051: PPUSH
4052: CALL_OW 12
4056: PUSH
4057: LD_INT 1
4059: DOUBLE
4060: EQUAL
4061: IFTRUE 4065
4063: GO 4076
4065: POP
// vc_chassis = ar_medium_trike ; 2 :
4066: LD_ADDR_OWVAR 37
4070: PUSH
4071: LD_INT 13
4073: ST_TO_ADDR
4074: GO 4096
4076: LD_INT 2
4078: DOUBLE
4079: EQUAL
4080: IFTRUE 4084
4082: GO 4095
4084: POP
// vc_chassis = ar_half_tracked ; end ;
4085: LD_ADDR_OWVAR 37
4089: PUSH
4090: LD_INT 14
4092: ST_TO_ADDR
4093: GO 4096
4095: POP
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
4096: LD_OWVAR 37
4100: PUSH
4101: LD_INT 11
4103: PUSH
4104: LD_INT 12
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: IN
4111: IFFALSE 4241
// begin val = val + 1 ;
4113: LD_ADDR_VAR 0 5
4117: PUSH
4118: LD_VAR 0 5
4122: PUSH
4123: LD_INT 1
4125: PLUS
4126: ST_TO_ADDR
// case Rand ( 1 , 4 ) of 1 :
4127: LD_INT 1
4129: PPUSH
4130: LD_INT 4
4132: PPUSH
4133: CALL_OW 12
4137: PUSH
4138: LD_INT 1
4140: DOUBLE
4141: EQUAL
4142: IFTRUE 4146
4144: GO 4157
4146: POP
// vc_weapon = ar_multimissile_ballista ; 2 :
4147: LD_ADDR_OWVAR 40
4151: PUSH
4152: LD_INT 22
4154: ST_TO_ADDR
4155: GO 4215
4157: LD_INT 2
4159: DOUBLE
4160: EQUAL
4161: IFTRUE 4165
4163: GO 4176
4165: POP
// vc_weapon = ar_light_gun ; 3 :
4166: LD_ADDR_OWVAR 40
4170: PUSH
4171: LD_INT 23
4173: ST_TO_ADDR
4174: GO 4215
4176: LD_INT 3
4178: DOUBLE
4179: EQUAL
4180: IFTRUE 4184
4182: GO 4195
4184: POP
// vc_weapon = ar_double_machine_gun ; 4 :
4185: LD_ADDR_OWVAR 40
4189: PUSH
4190: LD_INT 24
4192: ST_TO_ADDR
4193: GO 4215
4195: LD_INT 4
4197: DOUBLE
4198: EQUAL
4199: IFTRUE 4203
4201: GO 4214
4203: POP
// vc_weapon = ar_radar ; end ;
4204: LD_ADDR_OWVAR 40
4208: PUSH
4209: LD_INT 30
4211: ST_TO_ADDR
4212: GO 4215
4214: POP
// if Rand ( 1 , 2 ) = 1 then
4215: LD_INT 1
4217: PPUSH
4218: LD_INT 2
4220: PPUSH
4221: CALL_OW 12
4225: PUSH
4226: LD_INT 1
4228: EQUAL
4229: IFFALSE 4239
// vc_engine = engine_solar ;
4231: LD_ADDR_OWVAR 39
4235: PUSH
4236: LD_INT 2
4238: ST_TO_ADDR
// end else
4239: GO 4329
// begin case Rand ( 1 , 4 ) of 1 :
4241: LD_INT 1
4243: PPUSH
4244: LD_INT 4
4246: PPUSH
4247: CALL_OW 12
4251: PUSH
4252: LD_INT 1
4254: DOUBLE
4255: EQUAL
4256: IFTRUE 4260
4258: GO 4271
4260: POP
// vc_weapon = ar_gatling_gun ; 2 :
4261: LD_ADDR_OWVAR 40
4265: PUSH
4266: LD_INT 25
4268: ST_TO_ADDR
4269: GO 4329
4271: LD_INT 2
4273: DOUBLE
4274: EQUAL
4275: IFTRUE 4279
4277: GO 4290
4279: POP
// vc_weapon = ar_gun ; 3 :
4280: LD_ADDR_OWVAR 40
4284: PUSH
4285: LD_INT 27
4287: ST_TO_ADDR
4288: GO 4329
4290: LD_INT 3
4292: DOUBLE
4293: EQUAL
4294: IFTRUE 4298
4296: GO 4309
4298: POP
// vc_weapon = ar_flame_thrower ; 4 :
4299: LD_ADDR_OWVAR 40
4303: PUSH
4304: LD_INT 26
4306: ST_TO_ADDR
4307: GO 4329
4309: LD_INT 4
4311: DOUBLE
4312: EQUAL
4313: IFTRUE 4317
4315: GO 4328
4317: POP
// vc_weapon = ar_rocket_launcher ; end ;
4318: LD_ADDR_OWVAR 40
4322: PUSH
4323: LD_INT 28
4325: ST_TO_ADDR
4326: GO 4329
4328: POP
// end ; if Rand ( 1 , 5 ) <= 2 then
4329: LD_INT 1
4331: PPUSH
4332: LD_INT 5
4334: PPUSH
4335: CALL_OW 12
4339: PUSH
4340: LD_INT 2
4342: LESSEQUAL
4343: IFFALSE 4355
// vc_control = control_apeman else
4345: LD_ADDR_OWVAR 38
4349: PUSH
4350: LD_INT 5
4352: ST_TO_ADDR
4353: GO 4363
// vc_control = control_manual ;
4355: LD_ADDR_OWVAR 38
4359: PUSH
4360: LD_INT 1
4362: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4363: LD_ADDR_VAR 0 4
4367: PUSH
4368: CALL_OW 45
4372: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4373: LD_VAR 0 4
4377: PPUSH
4378: LD_INT 50
4380: PPUSH
4381: LD_INT 70
4383: PPUSH
4384: CALL_OW 12
4388: PPUSH
4389: CALL_OW 240
// if vc_control = control_manual then
4393: LD_OWVAR 38
4397: PUSH
4398: LD_INT 1
4400: EQUAL
4401: IFFALSE 4465
// begin val = Rand ( 1 , human_list - 1 ) ;
4403: LD_ADDR_VAR 0 5
4407: PUSH
4408: LD_INT 1
4410: PPUSH
4411: LD_VAR 0 2
4415: PUSH
4416: LD_INT 1
4418: MINUS
4419: PPUSH
4420: CALL_OW 12
4424: ST_TO_ADDR
// PlaceHumanInUnit ( human_list [ val ] , temp_unit ) ;
4425: LD_VAR 0 2
4429: PUSH
4430: LD_VAR 0 5
4434: ARRAY
4435: PPUSH
4436: LD_VAR 0 4
4440: PPUSH
4441: CALL_OW 52
// human_list = Delete ( human_list , val ) ;
4445: LD_ADDR_VAR 0 2
4449: PUSH
4450: LD_VAR 0 2
4454: PPUSH
4455: LD_VAR 0 5
4459: PPUSH
4460: CALL_OW 3
4464: ST_TO_ADDR
// end ; PlaceUnitArea ( temp_unit , enter_area , false ) ;
4465: LD_VAR 0 4
4469: PPUSH
4470: LD_INT 8
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL_OW 49
// end ;
4480: GO 3935
4482: POP
4483: POP
// for i in human_list do
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_VAR 0 2
4493: PUSH
4494: FOR_IN
4495: IFFALSE 4514
// PlaceUnitArea ( i , enter_area , false ) ;
4497: LD_VAR 0 3
4501: PPUSH
4502: LD_INT 8
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: CALL_OW 49
4512: GO 4494
4514: POP
4515: POP
// vc_engine = engine_solar ;
4516: LD_ADDR_OWVAR 39
4520: PUSH
4521: LD_INT 2
4523: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
4524: LD_ADDR_OWVAR 37
4528: PUSH
4529: LD_INT 11
4531: ST_TO_ADDR
// vc_control = control_apeman ;
4532: LD_ADDR_OWVAR 38
4536: PUSH
4537: LD_INT 5
4539: ST_TO_ADDR
// vc_weapon = ar_radar ;
4540: LD_ADDR_OWVAR 40
4544: PUSH
4545: LD_INT 30
4547: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: CALL_OW 45
4557: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4558: LD_VAR 0 4
4562: PPUSH
4563: LD_INT 50
4565: PPUSH
4566: LD_INT 70
4568: PPUSH
4569: CALL_OW 12
4573: PPUSH
4574: CALL_OW 240
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
4578: LD_VAR 0 4
4582: PPUSH
4583: LD_INT 8
4585: PPUSH
4586: LD_INT 0
4588: PPUSH
4589: CALL_OW 49
// vc_engine = engine_solar ;
4593: LD_ADDR_OWVAR 39
4597: PUSH
4598: LD_INT 2
4600: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
4601: LD_ADDR_OWVAR 37
4605: PUSH
4606: LD_INT 14
4608: ST_TO_ADDR
// vc_control = control_apeman ;
4609: LD_ADDR_OWVAR 38
4613: PUSH
4614: LD_INT 5
4616: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
4617: LD_ADDR_OWVAR 40
4621: PUSH
4622: LD_INT 28
4624: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4625: LD_ADDR_VAR 0 4
4629: PUSH
4630: CALL_OW 45
4634: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4635: LD_VAR 0 4
4639: PPUSH
4640: LD_INT 50
4642: PPUSH
4643: LD_INT 70
4645: PPUSH
4646: CALL_OW 12
4650: PPUSH
4651: CALL_OW 240
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
4655: LD_VAR 0 4
4659: PPUSH
4660: LD_INT 8
4662: PPUSH
4663: LD_INT 0
4665: PPUSH
4666: CALL_OW 49
// Gensher = NewCharacter ( Dietrich ) ;
4670: LD_ADDR_EXP 24
4674: PUSH
4675: LD_STRING Dietrich
4677: PPUSH
4678: CALL_OW 25
4682: ST_TO_ADDR
// SetSide ( Gensher , you_alt ) ;
4683: LD_EXP 24
4687: PPUSH
4688: LD_EXP 6
4692: PPUSH
4693: CALL_OW 235
// PlaceHumanInUnit ( Gensher , ar_bar ) ;
4697: LD_EXP 24
4701: PPUSH
4702: LD_INT 61
4704: PPUSH
4705: CALL_OW 52
// InitHc ;
4709: CALL_OW 19
// uc_side = you_alt ;
4713: LD_ADDR_OWVAR 20
4717: PUSH
4718: LD_EXP 6
4722: ST_TO_ADDR
// for i = 1 to 4 do
4723: LD_ADDR_VAR 0 3
4727: PUSH
4728: DOUBLE
4729: LD_INT 1
4731: DEC
4732: ST_TO_ADDR
4733: LD_INT 4
4735: PUSH
4736: FOR_TO
4737: IFFALSE 4789
// begin PrepareScientist ( false , 7 ) ;
4739: LD_INT 0
4741: PPUSH
4742: LD_INT 7
4744: PPUSH
4745: CALL_OW 384
// temp_unit = CreateHuman ;
4749: LD_ADDR_VAR 0 4
4753: PUSH
4754: CALL_OW 44
4758: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ temp_unit ;
4759: LD_ADDR_EXP 83
4763: PUSH
4764: LD_EXP 83
4768: PUSH
4769: LD_VAR 0 4
4773: ADD
4774: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lab ) ;
4775: LD_VAR 0 4
4779: PPUSH
4780: LD_INT 59
4782: PPUSH
4783: CALL_OW 52
// end ;
4787: GO 4736
4789: POP
4790: POP
// ai_scientists = Replace ( ai_scientists , 2 , original_gensher_people ) ;
4791: LD_ADDR_EXP 33
4795: PUSH
4796: LD_EXP 33
4800: PPUSH
4801: LD_INT 2
4803: PPUSH
4804: LD_EXP 83
4808: PPUSH
4809: CALL_OW 1
4813: ST_TO_ADDR
// PrepareEngineer ( false , [ 7 , 6 , 5 ] [ difficulty ] ) ;
4814: LD_INT 0
4816: PPUSH
4817: LD_INT 7
4819: PUSH
4820: LD_INT 6
4822: PUSH
4823: LD_INT 5
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: PUSH
4831: LD_OWVAR 67
4835: ARRAY
4836: PPUSH
4837: CALL_OW 382
// temp_unit = CreateHuman ;
4841: LD_ADDR_VAR 0 4
4845: PUSH
4846: CALL_OW 44
4850: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ temp_unit ;
4851: LD_ADDR_EXP 83
4855: PUSH
4856: LD_EXP 83
4860: PUSH
4861: LD_VAR 0 4
4865: ADD
4866: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_dep ) ;
4867: LD_VAR 0 4
4871: PPUSH
4872: LD_INT 58
4874: PPUSH
4875: CALL_OW 52
// ai_engineers = Replace ( ai_engineers , 2 , [ temp_unit ] ) ;
4879: LD_ADDR_EXP 31
4883: PUSH
4884: LD_EXP 31
4888: PPUSH
4889: LD_INT 2
4891: PPUSH
4892: LD_VAR 0 4
4896: PUSH
4897: EMPTY
4898: LIST
4899: PPUSH
4900: CALL_OW 1
4904: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ mech1 ;
4905: LD_ADDR_EXP 83
4909: PUSH
4910: LD_EXP 83
4914: PUSH
4915: LD_INT 495
4917: ADD
4918: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ mech2 ;
4919: LD_ADDR_EXP 83
4923: PUSH
4924: LD_EXP 83
4928: PUSH
4929: LD_INT 494
4931: ADD
4932: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ healer ;
4933: LD_ADDR_EXP 83
4937: PUSH
4938: LD_EXP 83
4942: PUSH
4943: LD_INT 541
4945: ADD
4946: ST_TO_ADDR
// InitHc ;
4947: CALL_OW 19
// uc_nation = nation_nature ;
4951: LD_ADDR_OWVAR 21
4955: PUSH
4956: LD_INT 0
4958: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
4959: LD_ADDR_OWVAR 28
4963: PUSH
4964: LD_INT 15
4966: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 2 ) , Rand ( 0 , 1 ) , 0 , 0 ] ;
4967: LD_ADDR_OWVAR 31
4971: PUSH
4972: LD_INT 1
4974: PPUSH
4975: LD_INT 2
4977: PPUSH
4978: CALL_OW 12
4982: PUSH
4983: LD_INT 0
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 12
4993: PUSH
4994: LD_INT 0
4996: PUSH
4997: LD_INT 0
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 12 ) ] ;
5006: LD_ADDR_OWVAR 29
5010: PUSH
5011: LD_INT 11
5013: PPUSH
5014: LD_INT 13
5016: PPUSH
5017: CALL_OW 12
5021: PUSH
5022: LD_INT 10
5024: PPUSH
5025: LD_INT 12
5027: PPUSH
5028: CALL_OW 12
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5037: LD_ADDR_OWVAR 27
5041: PUSH
5042: LD_INT 1
5044: PPUSH
5045: LD_INT 2
5047: PPUSH
5048: CALL_OW 12
5052: ST_TO_ADDR
// temp_unit = CreateHuman ;
5053: LD_ADDR_VAR 0 4
5057: PUSH
5058: CALL_OW 44
5062: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_bu1 ) ;
5063: LD_VAR 0 4
5067: PPUSH
5068: LD_INT 73
5070: PPUSH
5071: CALL_OW 52
// human_list = [ temp_unit ] ;
5075: LD_ADDR_VAR 0 2
5079: PUSH
5080: LD_VAR 0 4
5084: PUSH
5085: EMPTY
5086: LIST
5087: ST_TO_ADDR
// gensher_bunker_apes = [ temp_unit ] ;
5088: LD_ADDR_VAR 0 7
5092: PUSH
5093: LD_VAR 0 4
5097: PUSH
5098: EMPTY
5099: LIST
5100: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5101: LD_ADDR_OWVAR 27
5105: PUSH
5106: LD_INT 1
5108: PPUSH
5109: LD_INT 2
5111: PPUSH
5112: CALL_OW 12
5116: ST_TO_ADDR
// temp_unit = CreateHuman ;
5117: LD_ADDR_VAR 0 4
5121: PUSH
5122: CALL_OW 44
5126: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_bu2 ) ;
5127: LD_VAR 0 4
5131: PPUSH
5132: LD_INT 78
5134: PPUSH
5135: CALL_OW 52
// human_list = human_list ^ temp_unit ;
5139: LD_ADDR_VAR 0 2
5143: PUSH
5144: LD_VAR 0 2
5148: PUSH
5149: LD_VAR 0 4
5153: ADD
5154: ST_TO_ADDR
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5155: LD_ADDR_VAR 0 7
5159: PUSH
5160: LD_VAR 0 7
5164: PUSH
5165: LD_VAR 0 4
5169: ADD
5170: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5171: LD_ADDR_OWVAR 27
5175: PUSH
5176: LD_INT 1
5178: PPUSH
5179: LD_INT 2
5181: PPUSH
5182: CALL_OW 12
5186: ST_TO_ADDR
// temp_unit = CreateHuman ;
5187: LD_ADDR_VAR 0 4
5191: PUSH
5192: CALL_OW 44
5196: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill1 ) ;
5197: LD_VAR 0 4
5201: PPUSH
5202: LD_INT 298
5204: PPUSH
5205: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5209: LD_ADDR_VAR 0 7
5213: PUSH
5214: LD_VAR 0 7
5218: PUSH
5219: LD_VAR 0 4
5223: ADD
5224: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5225: LD_ADDR_OWVAR 27
5229: PUSH
5230: LD_INT 1
5232: PPUSH
5233: LD_INT 2
5235: PPUSH
5236: CALL_OW 12
5240: ST_TO_ADDR
// temp_unit = CreateHuman ;
5241: LD_ADDR_VAR 0 4
5245: PUSH
5246: CALL_OW 44
5250: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill2 ) ;
5251: LD_VAR 0 4
5255: PPUSH
5256: LD_INT 299
5258: PPUSH
5259: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5263: LD_ADDR_VAR 0 7
5267: PUSH
5268: LD_VAR 0 7
5272: PUSH
5273: LD_VAR 0 4
5277: ADD
5278: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5279: LD_ADDR_OWVAR 27
5283: PUSH
5284: LD_INT 1
5286: PPUSH
5287: LD_INT 2
5289: PPUSH
5290: CALL_OW 12
5294: ST_TO_ADDR
// temp_unit = CreateHuman ;
5295: LD_ADDR_VAR 0 4
5299: PUSH
5300: CALL_OW 44
5304: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill3 ) ;
5305: LD_VAR 0 4
5309: PPUSH
5310: LD_INT 300
5312: PPUSH
5313: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5317: LD_ADDR_VAR 0 7
5321: PUSH
5322: LD_VAR 0 7
5326: PUSH
5327: LD_VAR 0 4
5331: ADD
5332: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5333: LD_ADDR_OWVAR 27
5337: PUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_INT 2
5343: PPUSH
5344: CALL_OW 12
5348: ST_TO_ADDR
// temp_unit = CreateHuman ;
5349: LD_ADDR_VAR 0 4
5353: PUSH
5354: CALL_OW 44
5358: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill4 ) ;
5359: LD_VAR 0 4
5363: PPUSH
5364: LD_INT 343
5366: PPUSH
5367: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5371: LD_ADDR_VAR 0 7
5375: PUSH
5376: LD_VAR 0 7
5380: PUSH
5381: LD_VAR 0 4
5385: ADD
5386: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5387: LD_ADDR_OWVAR 27
5391: PUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_INT 2
5397: PPUSH
5398: CALL_OW 12
5402: ST_TO_ADDR
// temp_unit = CreateHuman ;
5403: LD_ADDR_VAR 0 4
5407: PUSH
5408: CALL_OW 44
5412: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu1 ) ;
5413: LD_VAR 0 4
5417: PPUSH
5418: LD_INT 308
5420: PPUSH
5421: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5425: LD_ADDR_VAR 0 7
5429: PUSH
5430: LD_VAR 0 7
5434: PUSH
5435: LD_VAR 0 4
5439: ADD
5440: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5441: LD_ADDR_OWVAR 27
5445: PUSH
5446: LD_INT 1
5448: PPUSH
5449: LD_INT 2
5451: PPUSH
5452: CALL_OW 12
5456: ST_TO_ADDR
// temp_unit = CreateHuman ;
5457: LD_ADDR_VAR 0 4
5461: PUSH
5462: CALL_OW 44
5466: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu2 ) ;
5467: LD_VAR 0 4
5471: PPUSH
5472: LD_INT 347
5474: PPUSH
5475: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5479: LD_ADDR_VAR 0 7
5483: PUSH
5484: LD_VAR 0 7
5488: PUSH
5489: LD_VAR 0 4
5493: ADD
5494: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5495: LD_ADDR_OWVAR 27
5499: PUSH
5500: LD_INT 1
5502: PPUSH
5503: LD_INT 2
5505: PPUSH
5506: CALL_OW 12
5510: ST_TO_ADDR
// temp_unit = CreateHuman ;
5511: LD_ADDR_VAR 0 4
5515: PUSH
5516: CALL_OW 44
5520: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu3 ) ;
5521: LD_VAR 0 4
5525: PPUSH
5526: LD_INT 346
5528: PPUSH
5529: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5533: LD_ADDR_VAR 0 7
5537: PUSH
5538: LD_VAR 0 7
5542: PUSH
5543: LD_VAR 0 4
5547: ADD
5548: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5549: LD_ADDR_OWVAR 27
5553: PUSH
5554: LD_INT 1
5556: PPUSH
5557: LD_INT 2
5559: PPUSH
5560: CALL_OW 12
5564: ST_TO_ADDR
// temp_unit = CreateHuman ;
5565: LD_ADDR_VAR 0 4
5569: PUSH
5570: CALL_OW 44
5574: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu4 ) ;
5575: LD_VAR 0 4
5579: PPUSH
5580: LD_INT 345
5582: PPUSH
5583: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5587: LD_ADDR_VAR 0 7
5591: PUSH
5592: LD_VAR 0 7
5596: PUSH
5597: LD_VAR 0 4
5601: ADD
5602: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5603: LD_ADDR_OWVAR 27
5607: PUSH
5608: LD_INT 1
5610: PPUSH
5611: LD_INT 2
5613: PPUSH
5614: CALL_OW 12
5618: ST_TO_ADDR
// temp_unit = CreateHuman ;
5619: LD_ADDR_VAR 0 4
5623: PUSH
5624: CALL_OW 44
5628: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu1 ) ;
5629: LD_VAR 0 4
5633: PPUSH
5634: LD_INT 305
5636: PPUSH
5637: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5641: LD_ADDR_VAR 0 7
5645: PUSH
5646: LD_VAR 0 7
5650: PUSH
5651: LD_VAR 0 4
5655: ADD
5656: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5657: LD_ADDR_OWVAR 27
5661: PUSH
5662: LD_INT 1
5664: PPUSH
5665: LD_INT 2
5667: PPUSH
5668: CALL_OW 12
5672: ST_TO_ADDR
// temp_unit = CreateHuman ;
5673: LD_ADDR_VAR 0 4
5677: PUSH
5678: CALL_OW 44
5682: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu2 ) ;
5683: LD_VAR 0 4
5687: PPUSH
5688: LD_INT 304
5690: PPUSH
5691: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5695: LD_ADDR_VAR 0 7
5699: PUSH
5700: LD_VAR 0 7
5704: PUSH
5705: LD_VAR 0 4
5709: ADD
5710: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5711: LD_ADDR_OWVAR 27
5715: PUSH
5716: LD_INT 1
5718: PPUSH
5719: LD_INT 2
5721: PPUSH
5722: CALL_OW 12
5726: ST_TO_ADDR
// temp_unit = CreateHuman ;
5727: LD_ADDR_VAR 0 4
5731: PUSH
5732: CALL_OW 44
5736: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu3 ) ;
5737: LD_VAR 0 4
5741: PPUSH
5742: LD_INT 303
5744: PPUSH
5745: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5749: LD_ADDR_VAR 0 7
5753: PUSH
5754: LD_VAR 0 7
5758: PUSH
5759: LD_VAR 0 4
5763: ADD
5764: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5765: LD_ADDR_OWVAR 27
5769: PUSH
5770: LD_INT 1
5772: PPUSH
5773: LD_INT 2
5775: PPUSH
5776: CALL_OW 12
5780: ST_TO_ADDR
// temp_unit = CreateHuman ;
5781: LD_ADDR_VAR 0 4
5785: PUSH
5786: CALL_OW 44
5790: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu4 ) ;
5791: LD_VAR 0 4
5795: PPUSH
5796: LD_INT 302
5798: PPUSH
5799: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5803: LD_ADDR_VAR 0 7
5807: PUSH
5808: LD_VAR 0 7
5812: PUSH
5813: LD_VAR 0 4
5817: ADD
5818: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5819: LD_ADDR_OWVAR 27
5823: PUSH
5824: LD_INT 1
5826: PPUSH
5827: LD_INT 2
5829: PPUSH
5830: CALL_OW 12
5834: ST_TO_ADDR
// temp_unit = CreateHuman ;
5835: LD_ADDR_VAR 0 4
5839: PUSH
5840: CALL_OW 44
5844: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu5 ) ;
5845: LD_VAR 0 4
5849: PPUSH
5850: LD_INT 374
5852: PPUSH
5853: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5857: LD_ADDR_VAR 0 7
5861: PUSH
5862: LD_VAR 0 7
5866: PUSH
5867: LD_VAR 0 4
5871: ADD
5872: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5873: LD_ADDR_OWVAR 27
5877: PUSH
5878: LD_INT 1
5880: PPUSH
5881: LD_INT 2
5883: PPUSH
5884: CALL_OW 12
5888: ST_TO_ADDR
// temp_unit = CreateHuman ;
5889: LD_ADDR_VAR 0 4
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu6 ) ;
5899: LD_VAR 0 4
5903: PPUSH
5904: LD_INT 397
5906: PPUSH
5907: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5911: LD_ADDR_VAR 0 7
5915: PUSH
5916: LD_VAR 0 7
5920: PUSH
5921: LD_VAR 0 4
5925: ADD
5926: ST_TO_ADDR
// gensher_mortars = [ mortar1 ] ;
5927: LD_ADDR_EXP 100
5931: PUSH
5932: LD_INT 336
5934: PUSH
5935: EMPTY
5936: LIST
5937: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar2 ;
5938: LD_ADDR_EXP 100
5942: PUSH
5943: LD_EXP 100
5947: PUSH
5948: LD_INT 493
5950: ADD
5951: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar3 ;
5952: LD_ADDR_EXP 100
5956: PUSH
5957: LD_EXP 100
5961: PUSH
5962: LD_INT 338
5964: ADD
5965: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar4 ;
5966: LD_ADDR_EXP 100
5970: PUSH
5971: LD_EXP 100
5975: PUSH
5976: LD_INT 339
5978: ADD
5979: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar5 ;
5980: LD_ADDR_EXP 100
5984: PUSH
5985: LD_EXP 100
5989: PUSH
5990: LD_INT 340
5992: ADD
5993: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar6 ;
5994: LD_ADDR_EXP 100
5998: PUSH
5999: LD_EXP 100
6003: PUSH
6004: LD_INT 341
6006: ADD
6007: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , 2 , human_list ^ Gensher ) ;
6008: LD_ADDR_EXP 30
6012: PUSH
6013: LD_EXP 30
6017: PPUSH
6018: LD_INT 2
6020: PPUSH
6021: LD_VAR 0 2
6025: PUSH
6026: LD_EXP 24
6030: ADD
6031: PPUSH
6032: CALL_OW 1
6036: ST_TO_ADDR
// val = GetSkill ( ai_engineers [ 2 ] [ 1 ] , skill_engineering ) ;
6037: LD_ADDR_VAR 0 5
6041: PUSH
6042: LD_EXP 31
6046: PUSH
6047: LD_INT 2
6049: ARRAY
6050: PUSH
6051: LD_INT 1
6053: ARRAY
6054: PPUSH
6055: LD_INT 2
6057: PPUSH
6058: CALL_OW 259
6062: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_building ] ] ) do
6063: LD_ADDR_VAR 0 3
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_EXP 6
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 21
6082: PUSH
6083: LD_INT 3
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: PUSH
6099: FOR_IN
6100: IFFALSE 6118
// SetBLevel ( i , val ) ;
6102: LD_VAR 0 3
6106: PPUSH
6107: LD_VAR 0 5
6111: PPUSH
6112: CALL_OW 241
6116: GO 6099
6118: POP
6119: POP
// for i in ai_engineers [ 2 ] do
6120: LD_ADDR_VAR 0 3
6124: PUSH
6125: LD_EXP 31
6129: PUSH
6130: LD_INT 2
6132: ARRAY
6133: PUSH
6134: FOR_IN
6135: IFFALSE 6176
// if GetSkill ( i , skill_engineering ) > val then
6137: LD_VAR 0 3
6141: PPUSH
6142: LD_INT 2
6144: PPUSH
6145: CALL_OW 259
6149: PUSH
6150: LD_VAR 0 5
6154: GREATER
6155: IFFALSE 6174
// SetSkill ( i , skill_engineering , val ) ;
6157: LD_VAR 0 3
6161: PPUSH
6162: LD_INT 2
6164: PPUSH
6165: LD_VAR 0 5
6169: PPUSH
6170: CALL_OW 237
6174: GO 6134
6176: POP
6177: POP
// end ;
6178: LD_VAR 0 1
6182: RET
// function ScanBuildings ; var side , i , temp_list , base , area , temp_list_2 ; begin
6183: LD_INT 0
6185: PPUSH
6186: PPUSH
6187: PPUSH
6188: PPUSH
6189: PPUSH
6190: PPUSH
6191: PPUSH
// if difficulty <= 2 then
6192: LD_OWVAR 67
6196: PUSH
6197: LD_INT 2
6199: LESSEQUAL
6200: IFFALSE 6341
// begin temp_list = [ GetX ( rub3 ) , GetY ( rub3 ) , GetDir ( rub3 ) , GetBWeapon ( rub3 ) ] ;
6202: LD_ADDR_VAR 0 4
6206: PUSH
6207: LD_INT 269
6209: PPUSH
6210: CALL_OW 250
6214: PUSH
6215: LD_INT 269
6217: PPUSH
6218: CALL_OW 251
6222: PUSH
6223: LD_INT 269
6225: PPUSH
6226: CALL_OW 254
6230: PUSH
6231: LD_INT 269
6233: PPUSH
6234: CALL_OW 269
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: ST_TO_ADDR
// DestroyUnit ( rub3 ) ;
6245: LD_INT 269
6247: PPUSH
6248: CALL_OW 65
// InitUc ;
6252: CALL_OW 18
// InitBc ;
6256: CALL_OW 21
// uc_nation = nation_russian ;
6260: LD_ADDR_OWVAR 21
6264: PUSH
6265: LD_INT 3
6267: ST_TO_ADDR
// uc_side = russians ;
6268: LD_ADDR_OWVAR 20
6272: PUSH
6273: LD_EXP 4
6277: ST_TO_ADDR
// bc_type = b_turret ;
6278: LD_ADDR_OWVAR 42
6282: PUSH
6283: LD_INT 33
6285: ST_TO_ADDR
// i = CreateAndPlaceBuildingXYD ( temp_list [ 1 ] , temp_list [ 2 ] , temp_list [ 3 ] ) ;
6286: LD_ADDR_VAR 0 3
6290: PUSH
6291: LD_VAR 0 4
6295: PUSH
6296: LD_INT 1
6298: ARRAY
6299: PPUSH
6300: LD_VAR 0 4
6304: PUSH
6305: LD_INT 2
6307: ARRAY
6308: PPUSH
6309: LD_VAR 0 4
6313: PUSH
6314: LD_INT 3
6316: ARRAY
6317: PPUSH
6318: CALL_OW 47
6322: ST_TO_ADDR
// PlaceWeaponTurret ( i , temp_list [ 4 ] ) ;
6323: LD_VAR 0 3
6327: PPUSH
6328: LD_VAR 0 4
6332: PUSH
6333: LD_INT 4
6335: ARRAY
6336: PPUSH
6337: CALL_OW 431
// end ; if difficulty = 1 then
6341: LD_OWVAR 67
6345: PUSH
6346: LD_INT 1
6348: EQUAL
6349: IFFALSE 6490
// begin temp_list = [ GetX ( rub1 ) , GetY ( rub1 ) , GetDir ( rub1 ) , GetBWeapon ( rub1 ) ] ;
6351: LD_ADDR_VAR 0 4
6355: PUSH
6356: LD_INT 273
6358: PPUSH
6359: CALL_OW 250
6363: PUSH
6364: LD_INT 273
6366: PPUSH
6367: CALL_OW 251
6371: PUSH
6372: LD_INT 273
6374: PPUSH
6375: CALL_OW 254
6379: PUSH
6380: LD_INT 273
6382: PPUSH
6383: CALL_OW 269
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: ST_TO_ADDR
// DestroyUnit ( rub1 ) ;
6394: LD_INT 273
6396: PPUSH
6397: CALL_OW 65
// InitUc ;
6401: CALL_OW 18
// InitBc ;
6405: CALL_OW 21
// uc_nation = nation_russian ;
6409: LD_ADDR_OWVAR 21
6413: PUSH
6414: LD_INT 3
6416: ST_TO_ADDR
// uc_side = russians ;
6417: LD_ADDR_OWVAR 20
6421: PUSH
6422: LD_EXP 4
6426: ST_TO_ADDR
// bc_type = b_turret ;
6427: LD_ADDR_OWVAR 42
6431: PUSH
6432: LD_INT 33
6434: ST_TO_ADDR
// i = CreateAndPlaceBuildingXYD ( temp_list [ 1 ] , temp_list [ 2 ] , temp_list [ 3 ] ) ;
6435: LD_ADDR_VAR 0 3
6439: PUSH
6440: LD_VAR 0 4
6444: PUSH
6445: LD_INT 1
6447: ARRAY
6448: PPUSH
6449: LD_VAR 0 4
6453: PUSH
6454: LD_INT 2
6456: ARRAY
6457: PPUSH
6458: LD_VAR 0 4
6462: PUSH
6463: LD_INT 3
6465: ARRAY
6466: PPUSH
6467: CALL_OW 47
6471: ST_TO_ADDR
// PlaceWeaponTurret ( i , temp_list [ 4 ] ) ;
6472: LD_VAR 0 3
6476: PPUSH
6477: LD_VAR 0 4
6481: PUSH
6482: LD_INT 4
6484: ARRAY
6485: PPUSH
6486: CALL_OW 431
// end ; for base in ai_bases do
6490: LD_ADDR_VAR 0 5
6494: PUSH
6495: LD_EXP 59
6499: PUSH
6500: FOR_IN
6501: IFFALSE 7127
// begin case base of 1 :
6503: LD_VAR 0 5
6507: PUSH
6508: LD_INT 1
6510: DOUBLE
6511: EQUAL
6512: IFTRUE 6516
6514: GO 6537
6516: POP
// begin area = Am_base ;
6517: LD_ADDR_VAR 0 6
6521: PUSH
6522: LD_INT 4
6524: ST_TO_ADDR
// side = americans ;
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: LD_EXP 7
6534: ST_TO_ADDR
// end ; 2 :
6535: GO 6596
6537: LD_INT 2
6539: DOUBLE
6540: EQUAL
6541: IFTRUE 6545
6543: GO 6566
6545: POP
// begin area = Gensher_base ;
6546: LD_ADDR_VAR 0 6
6550: PUSH
6551: LD_INT 7
6553: ST_TO_ADDR
// side = you_alt ;
6554: LD_ADDR_VAR 0 2
6558: PUSH
6559: LD_EXP 6
6563: ST_TO_ADDR
// end ; 3 :
6564: GO 6596
6566: LD_INT 3
6568: DOUBLE
6569: EQUAL
6570: IFTRUE 6574
6572: GO 6595
6574: POP
// begin area = Ru_base ;
6575: LD_ADDR_VAR 0 6
6579: PUSH
6580: LD_INT 3
6582: ST_TO_ADDR
// side = russians ;
6583: LD_ADDR_VAR 0 2
6587: PUSH
6588: LD_EXP 4
6592: ST_TO_ADDR
// end ; end ;
6593: GO 6596
6595: POP
// ai_all_buildings = Replace ( ai_all_buildings , base , FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_inarea , area ] ] ) ) ;
6596: LD_ADDR_EXP 45
6600: PUSH
6601: LD_EXP 45
6605: PPUSH
6606: LD_VAR 0 5
6610: PPUSH
6611: LD_INT 22
6613: PUSH
6614: LD_VAR 0 2
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 21
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 95
6635: PUSH
6636: LD_VAR 0 6
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: PPUSH
6650: CALL_OW 69
6654: PPUSH
6655: CALL_OW 1
6659: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
6660: LD_ADDR_VAR 0 3
6664: PUSH
6665: LD_EXP 45
6669: PUSH
6670: LD_VAR 0 5
6674: ARRAY
6675: PUSH
6676: FOR_IN
6677: IFFALSE 6698
// UpdateBuildingBasicVariables ( base , i , true ) ;
6679: LD_VAR 0 5
6683: PPUSH
6684: LD_VAR 0 3
6688: PPUSH
6689: LD_INT 1
6691: PPUSH
6692: CALL 7134 0 3
6696: GO 6676
6698: POP
6699: POP
// if base = 1 then
6700: LD_VAR 0 5
6704: PUSH
6705: LD_INT 1
6707: EQUAL
6708: IFFALSE 6728
// SetBName ( ai_depot [ base ] , epsilon ) ;
6710: LD_EXP 35
6714: PUSH
6715: LD_VAR 0 5
6719: ARRAY
6720: PPUSH
6721: LD_STRING epsilon
6723: PPUSH
6724: CALL_OW 500
// temp_list = [ ] ;
6728: LD_ADDR_VAR 0 4
6732: PUSH
6733: EMPTY
6734: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
6735: LD_ADDR_VAR 0 3
6739: PUSH
6740: LD_EXP 45
6744: PUSH
6745: LD_VAR 0 5
6749: ARRAY
6750: PUSH
6751: FOR_IN
6752: IFFALSE 7025
// begin if base = 3 and i in [ rub1 , rub2 ] then
6754: LD_VAR 0 5
6758: PUSH
6759: LD_INT 3
6761: EQUAL
6762: PUSH
6763: LD_VAR 0 3
6767: PUSH
6768: LD_INT 273
6770: PUSH
6771: LD_INT 271
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: IN
6778: AND
6779: IFFALSE 6830
// begin temp_list_2 = ai_excepted_buildings [ base ] ^ i ;
6781: LD_ADDR_VAR 0 7
6785: PUSH
6786: LD_EXP 69
6790: PUSH
6791: LD_VAR 0 5
6795: ARRAY
6796: PUSH
6797: LD_VAR 0 3
6801: ADD
6802: ST_TO_ADDR
// ai_excepted_buildings = Replace ( ai_excepted_buildings , base , temp_list_2 ) ;
6803: LD_ADDR_EXP 69
6807: PUSH
6808: LD_EXP 69
6812: PPUSH
6813: LD_VAR 0 5
6817: PPUSH
6818: LD_VAR 0 7
6822: PPUSH
6823: CALL_OW 1
6827: ST_TO_ADDR
// continue ;
6828: GO 6751
// end ; temp_list = temp_list ^ [ [ GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBType ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: LD_VAR 0 4
6839: PUSH
6840: LD_VAR 0 3
6844: PPUSH
6845: CALL_OW 250
6849: PUSH
6850: LD_VAR 0 3
6854: PPUSH
6855: CALL_OW 251
6859: PUSH
6860: LD_VAR 0 3
6864: PPUSH
6865: CALL_OW 254
6869: PUSH
6870: LD_VAR 0 3
6874: PPUSH
6875: CALL_OW 266
6879: PUSH
6880: LD_VAR 0 3
6884: PPUSH
6885: LD_INT 1
6887: PPUSH
6888: CALL_OW 268
6892: PUSH
6893: LD_VAR 0 3
6897: PPUSH
6898: LD_INT 2
6900: PPUSH
6901: CALL_OW 268
6905: PUSH
6906: LD_VAR 0 3
6910: PPUSH
6911: CALL_OW 269
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: ADD
6928: ST_TO_ADDR
// if base = 2 and temp_list [ temp_list + 0 ] [ 4 ] = b_bunker then
6929: LD_VAR 0 5
6933: PUSH
6934: LD_INT 2
6936: EQUAL
6937: PUSH
6938: LD_VAR 0 4
6942: PUSH
6943: LD_VAR 0 4
6947: PUSH
6948: LD_INT 0
6950: PLUS
6951: ARRAY
6952: PUSH
6953: LD_INT 4
6955: ARRAY
6956: PUSH
6957: LD_INT 32
6959: EQUAL
6960: AND
6961: IFFALSE 7023
// begin temp_list_2 = Replace ( temp_list [ temp_list + 0 ] , 4 , b_breastwork ) ;
6963: LD_ADDR_VAR 0 7
6967: PUSH
6968: LD_VAR 0 4
6972: PUSH
6973: LD_VAR 0 4
6977: PUSH
6978: LD_INT 0
6980: PLUS
6981: ARRAY
6982: PPUSH
6983: LD_INT 4
6985: PPUSH
6986: LD_INT 31
6988: PPUSH
6989: CALL_OW 1
6993: ST_TO_ADDR
// temp_list = Replace ( temp_list , temp_list + 0 , temp_list_2 ) ;
6994: LD_ADDR_VAR 0 4
6998: PUSH
6999: LD_VAR 0 4
7003: PPUSH
7004: LD_VAR 0 4
7008: PUSH
7009: LD_INT 0
7011: PLUS
7012: PPUSH
7013: LD_VAR 0 7
7017: PPUSH
7018: CALL_OW 1
7022: ST_TO_ADDR
// end ; end ;
7023: GO 6751
7025: POP
7026: POP
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list ) ;
7027: LD_ADDR_EXP 39
7031: PUSH
7032: LD_EXP 39
7036: PPUSH
7037: LD_VAR 0 5
7041: PPUSH
7042: LD_VAR 0 4
7046: PPUSH
7047: CALL_OW 1
7051: ST_TO_ADDR
// SortBuildingLocationsListInCorrectOrder ( base ) ;
7052: LD_VAR 0 5
7056: PPUSH
7057: CALL 8209 0 1
// for i in ai_siberite_mines [ base ] ^ ai_oil_mine [ base ] do
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_EXP 37
7070: PUSH
7071: LD_VAR 0 5
7075: ARRAY
7076: PUSH
7077: LD_EXP 51
7081: PUSH
7082: LD_VAR 0 5
7086: ARRAY
7087: ADD
7088: PUSH
7089: FOR_IN
7090: IFFALSE 7123
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
7092: LD_VAR 0 3
7096: PPUSH
7097: CALL_OW 250
7101: PPUSH
7102: LD_VAR 0 3
7106: PPUSH
7107: CALL_OW 251
7111: PPUSH
7112: LD_VAR 0 2
7116: PPUSH
7117: CALL_OW 441
7121: GO 7089
7123: POP
7124: POP
// end ;
7125: GO 6500
7127: POP
7128: POP
// end ;
7129: LD_VAR 0 1
7133: RET
// export function UpdateBuildingBasicVariables ( base , un , add ) ; var temp_list ; begin
7134: LD_INT 0
7136: PPUSH
7137: PPUSH
// case GetBType ( un ) of b_depot , b_warehouse :
7138: LD_VAR 0 2
7142: PPUSH
7143: CALL_OW 266
7147: PUSH
7148: LD_INT 0
7150: DOUBLE
7151: EQUAL
7152: IFTRUE 7162
7154: LD_INT 1
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7239
7162: POP
// if add then
7163: LD_VAR 0 3
7167: IFFALSE 7196
// ai_depot = Replace ( ai_depot , base , un ) else
7169: LD_ADDR_EXP 35
7173: PUSH
7174: LD_EXP 35
7178: PPUSH
7179: LD_VAR 0 1
7183: PPUSH
7184: LD_VAR 0 2
7188: PPUSH
7189: CALL_OW 1
7193: ST_TO_ADDR
7194: GO 7237
// if un = ai_depot [ base ] then
7196: LD_VAR 0 2
7200: PUSH
7201: LD_EXP 35
7205: PUSH
7206: LD_VAR 0 1
7210: ARRAY
7211: EQUAL
7212: IFFALSE 7237
// ai_depot = Replace ( ai_depot , base , 0 ) ; b_lab , b_lab_half , b_lab_full :
7214: LD_ADDR_EXP 35
7218: PUSH
7219: LD_EXP 35
7223: PPUSH
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_INT 0
7231: PPUSH
7232: CALL_OW 1
7236: ST_TO_ADDR
7237: GO 8204
7239: LD_INT 6
7241: DOUBLE
7242: EQUAL
7243: IFTRUE 7259
7245: LD_INT 7
7247: DOUBLE
7248: EQUAL
7249: IFTRUE 7259
7251: LD_INT 8
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7339
7259: POP
// begin if add then
7260: LD_VAR 0 3
7264: IFFALSE 7290
// temp_list = ai_labs [ base ] ^ un else
7266: LD_ADDR_VAR 0 5
7270: PUSH
7271: LD_EXP 36
7275: PUSH
7276: LD_VAR 0 1
7280: ARRAY
7281: PUSH
7282: LD_VAR 0 2
7286: ADD
7287: ST_TO_ADDR
7288: GO 7312
// temp_list = ai_labs [ base ] diff un ;
7290: LD_ADDR_VAR 0 5
7294: PUSH
7295: LD_EXP 36
7299: PUSH
7300: LD_VAR 0 1
7304: ARRAY
7305: PUSH
7306: LD_VAR 0 2
7310: DIFF
7311: ST_TO_ADDR
// ai_labs = Replace ( ai_labs , base , temp_list ) ;
7312: LD_ADDR_EXP 36
7316: PUSH
7317: LD_EXP 36
7321: PPUSH
7322: LD_VAR 0 1
7326: PPUSH
7327: LD_VAR 0 5
7331: PPUSH
7332: CALL_OW 1
7336: ST_TO_ADDR
// end ; b_factory , b_workshop :
7337: GO 8204
7339: LD_INT 3
7341: DOUBLE
7342: EQUAL
7343: IFTRUE 7353
7345: LD_INT 2
7347: DOUBLE
7348: EQUAL
7349: IFTRUE 7353
7351: GO 7433
7353: POP
// begin if add then
7354: LD_VAR 0 3
7358: IFFALSE 7384
// temp_list = ai_facts [ base ] ^ un else
7360: LD_ADDR_VAR 0 5
7364: PUSH
7365: LD_EXP 48
7369: PUSH
7370: LD_VAR 0 1
7374: ARRAY
7375: PUSH
7376: LD_VAR 0 2
7380: ADD
7381: ST_TO_ADDR
7382: GO 7406
// temp_list = ai_facts [ base ] diff un ;
7384: LD_ADDR_VAR 0 5
7388: PUSH
7389: LD_EXP 48
7393: PUSH
7394: LD_VAR 0 1
7398: ARRAY
7399: PUSH
7400: LD_VAR 0 2
7404: DIFF
7405: ST_TO_ADDR
// ai_facts = Replace ( ai_facts , base , temp_list ) ;
7406: LD_ADDR_EXP 48
7410: PUSH
7411: LD_EXP 48
7415: PPUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: LD_VAR 0 5
7425: PPUSH
7426: CALL_OW 1
7430: ST_TO_ADDR
// end ; b_armoury , b_barracks :
7431: GO 8204
7433: LD_INT 4
7435: DOUBLE
7436: EQUAL
7437: IFTRUE 7447
7439: LD_INT 5
7441: DOUBLE
7442: EQUAL
7443: IFTRUE 7447
7445: GO 7527
7447: POP
// begin if add then
7448: LD_VAR 0 3
7452: IFFALSE 7478
// temp_list = ai_armouries [ base ] ^ un else
7454: LD_ADDR_VAR 0 5
7458: PUSH
7459: LD_EXP 49
7463: PUSH
7464: LD_VAR 0 1
7468: ARRAY
7469: PUSH
7470: LD_VAR 0 2
7474: ADD
7475: ST_TO_ADDR
7476: GO 7500
// temp_list = ai_armouries [ base ] diff un ;
7478: LD_ADDR_VAR 0 5
7482: PUSH
7483: LD_EXP 49
7487: PUSH
7488: LD_VAR 0 1
7492: ARRAY
7493: PUSH
7494: LD_VAR 0 2
7498: DIFF
7499: ST_TO_ADDR
// ai_armouries = Replace ( ai_armouries , base , temp_list ) ;
7500: LD_ADDR_EXP 49
7504: PUSH
7505: LD_EXP 49
7509: PPUSH
7510: LD_VAR 0 1
7514: PPUSH
7515: LD_VAR 0 5
7519: PPUSH
7520: CALL_OW 1
7524: ST_TO_ADDR
// end ; b_breastwork , b_bunker :
7525: GO 8204
7527: LD_INT 31
7529: DOUBLE
7530: EQUAL
7531: IFTRUE 7541
7533: LD_INT 32
7535: DOUBLE
7536: EQUAL
7537: IFTRUE 7541
7539: GO 7621
7541: POP
// begin if add then
7542: LD_VAR 0 3
7546: IFFALSE 7572
// temp_list = ai_bunkers [ base ] ^ un else
7548: LD_ADDR_VAR 0 5
7552: PUSH
7553: LD_EXP 50
7557: PUSH
7558: LD_VAR 0 1
7562: ARRAY
7563: PUSH
7564: LD_VAR 0 2
7568: ADD
7569: ST_TO_ADDR
7570: GO 7594
// temp_list = ai_bunkers [ base ] diff un ;
7572: LD_ADDR_VAR 0 5
7576: PUSH
7577: LD_EXP 50
7581: PUSH
7582: LD_VAR 0 1
7586: ARRAY
7587: PUSH
7588: LD_VAR 0 2
7592: DIFF
7593: ST_TO_ADDR
// ai_bunkers = Replace ( ai_bunkers , base , temp_list ) ;
7594: LD_ADDR_EXP 50
7598: PUSH
7599: LD_EXP 50
7603: PPUSH
7604: LD_VAR 0 1
7608: PPUSH
7609: LD_VAR 0 5
7613: PPUSH
7614: CALL_OW 1
7618: ST_TO_ADDR
// end ; b_turret :
7619: GO 8204
7621: LD_INT 33
7623: DOUBLE
7624: EQUAL
7625: IFTRUE 7629
7627: GO 7709
7629: POP
// begin if add then
7630: LD_VAR 0 3
7634: IFFALSE 7660
// temp_list = ai_turrets [ base ] ^ un else
7636: LD_ADDR_VAR 0 5
7640: PUSH
7641: LD_EXP 56
7645: PUSH
7646: LD_VAR 0 1
7650: ARRAY
7651: PUSH
7652: LD_VAR 0 2
7656: ADD
7657: ST_TO_ADDR
7658: GO 7682
// temp_list = ai_turrets [ base ] diff un ;
7660: LD_ADDR_VAR 0 5
7664: PUSH
7665: LD_EXP 56
7669: PUSH
7670: LD_VAR 0 1
7674: ARRAY
7675: PUSH
7676: LD_VAR 0 2
7680: DIFF
7681: ST_TO_ADDR
// ai_turrets = Replace ( ai_turrets , base , temp_list ) ;
7682: LD_ADDR_EXP 56
7686: PUSH
7687: LD_EXP 56
7691: PPUSH
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_VAR 0 5
7701: PPUSH
7702: CALL_OW 1
7706: ST_TO_ADDR
// end ; b_oil_mine :
7707: GO 8204
7709: LD_INT 29
7711: DOUBLE
7712: EQUAL
7713: IFTRUE 7717
7715: GO 7794
7717: POP
// if add then
7718: LD_VAR 0 3
7722: IFFALSE 7751
// ai_oil_mine = Replace ( ai_oil_mine , base , un ) else
7724: LD_ADDR_EXP 51
7728: PUSH
7729: LD_EXP 51
7733: PPUSH
7734: LD_VAR 0 1
7738: PPUSH
7739: LD_VAR 0 2
7743: PPUSH
7744: CALL_OW 1
7748: ST_TO_ADDR
7749: GO 7792
// if un = ai_oil_mine [ base ] then
7751: LD_VAR 0 2
7755: PUSH
7756: LD_EXP 51
7760: PUSH
7761: LD_VAR 0 1
7765: ARRAY
7766: EQUAL
7767: IFFALSE 7792
// ai_oil_mine = Replace ( ai_oil_mine , base , 0 ) ; b_siberite_mine :
7769: LD_ADDR_EXP 51
7773: PUSH
7774: LD_EXP 51
7778: PPUSH
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_INT 0
7786: PPUSH
7787: CALL_OW 1
7791: ST_TO_ADDR
7792: GO 8204
7794: LD_INT 30
7796: DOUBLE
7797: EQUAL
7798: IFTRUE 7802
7800: GO 7882
7802: POP
// begin if add then
7803: LD_VAR 0 3
7807: IFFALSE 7833
// temp_list = ai_siberite_mines [ base ] ^ un else
7809: LD_ADDR_VAR 0 5
7813: PUSH
7814: LD_EXP 37
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PUSH
7825: LD_VAR 0 2
7829: ADD
7830: ST_TO_ADDR
7831: GO 7855
// temp_list = ai_siberite_mines [ base ] diff un ;
7833: LD_ADDR_VAR 0 5
7837: PUSH
7838: LD_EXP 37
7842: PUSH
7843: LD_VAR 0 1
7847: ARRAY
7848: PUSH
7849: LD_VAR 0 2
7853: DIFF
7854: ST_TO_ADDR
// ai_siberite_mines = Replace ( ai_siberite_mines , base , temp_list ) ;
7855: LD_ADDR_EXP 37
7859: PUSH
7860: LD_EXP 37
7864: PPUSH
7865: LD_VAR 0 1
7869: PPUSH
7870: LD_VAR 0 5
7874: PPUSH
7875: CALL_OW 1
7879: ST_TO_ADDR
// end ; b_ext_gun , b_ext_noncombat , b_ext_laser , b_ext_computer , b_ext_radar , b_ext_rocket , b_ext_siberium , b_ext_track , b_ext_stitch :
7880: GO 8204
7882: LD_INT 17
7884: DOUBLE
7885: EQUAL
7886: IFTRUE 7938
7888: LD_INT 19
7890: DOUBLE
7891: EQUAL
7892: IFTRUE 7938
7894: LD_INT 25
7896: DOUBLE
7897: EQUAL
7898: IFTRUE 7938
7900: LD_INT 24
7902: DOUBLE
7903: EQUAL
7904: IFTRUE 7938
7906: LD_INT 20
7908: DOUBLE
7909: EQUAL
7910: IFTRUE 7938
7912: LD_INT 18
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7938
7918: LD_INT 21
7920: DOUBLE
7921: EQUAL
7922: IFTRUE 7938
7924: LD_INT 16
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7938
7930: LD_INT 23
7932: DOUBLE
7933: EQUAL
7934: IFTRUE 7938
7936: GO 8018
7938: POP
// begin if add then
7939: LD_VAR 0 3
7943: IFFALSE 7969
// temp_list = ai_fact_extensions [ base ] ^ un else
7945: LD_ADDR_VAR 0 5
7949: PUSH
7950: LD_EXP 52
7954: PUSH
7955: LD_VAR 0 1
7959: ARRAY
7960: PUSH
7961: LD_VAR 0 2
7965: ADD
7966: ST_TO_ADDR
7967: GO 7991
// temp_list = ai_fact_extensions [ base ] diff un ;
7969: LD_ADDR_VAR 0 5
7973: PUSH
7974: LD_EXP 52
7978: PUSH
7979: LD_VAR 0 1
7983: ARRAY
7984: PUSH
7985: LD_VAR 0 2
7989: DIFF
7990: ST_TO_ADDR
// ai_fact_extensions = Replace ( ai_fact_extensions , base , temp_list ) ;
7991: LD_ADDR_EXP 52
7995: PUSH
7996: LD_EXP 52
8000: PPUSH
8001: LD_VAR 0 1
8005: PPUSH
8006: LD_VAR 0 5
8010: PPUSH
8011: CALL_OW 1
8015: ST_TO_ADDR
// end ; b_solar_power , b_oil_power , b_siberite_power :
8016: GO 8204
8018: LD_INT 27
8020: DOUBLE
8021: EQUAL
8022: IFTRUE 8038
8024: LD_INT 26
8026: DOUBLE
8027: EQUAL
8028: IFTRUE 8038
8030: LD_INT 28
8032: DOUBLE
8033: EQUAL
8034: IFTRUE 8038
8036: GO 8118
8038: POP
// begin if add then
8039: LD_VAR 0 3
8043: IFFALSE 8069
// temp_list = ai_power_plants [ base ] ^ un else
8045: LD_ADDR_VAR 0 5
8049: PUSH
8050: LD_EXP 38
8054: PUSH
8055: LD_VAR 0 1
8059: ARRAY
8060: PUSH
8061: LD_VAR 0 2
8065: ADD
8066: ST_TO_ADDR
8067: GO 8091
// temp_list = ai_power_plants [ base ] diff un ;
8069: LD_ADDR_VAR 0 5
8073: PUSH
8074: LD_EXP 38
8078: PUSH
8079: LD_VAR 0 1
8083: ARRAY
8084: PUSH
8085: LD_VAR 0 2
8089: DIFF
8090: ST_TO_ADDR
// ai_power_plants = Replace ( ai_power_plants , base , temp_list ) ;
8091: LD_ADDR_EXP 38
8095: PUSH
8096: LD_EXP 38
8100: PPUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: LD_VAR 0 5
8110: PPUSH
8111: CALL_OW 1
8115: ST_TO_ADDR
// end ; b_control_tower :
8116: GO 8204
8118: LD_INT 36
8120: DOUBLE
8121: EQUAL
8122: IFTRUE 8126
8124: GO 8203
8126: POP
// begin if add then
8127: LD_VAR 0 3
8131: IFFALSE 8160
// ai_control_tower = Replace ( ai_control_tower , base , un ) else
8133: LD_ADDR_EXP 57
8137: PUSH
8138: LD_EXP 57
8142: PPUSH
8143: LD_VAR 0 1
8147: PPUSH
8148: LD_VAR 0 2
8152: PPUSH
8153: CALL_OW 1
8157: ST_TO_ADDR
8158: GO 8201
// if un = ai_control_tower [ base ] then
8160: LD_VAR 0 2
8164: PUSH
8165: LD_EXP 57
8169: PUSH
8170: LD_VAR 0 1
8174: ARRAY
8175: EQUAL
8176: IFFALSE 8201
// ai_control_tower = Replace ( ai_control_tower , base , 0 ) ;
8178: LD_ADDR_EXP 57
8182: PUSH
8183: LD_EXP 57
8187: PPUSH
8188: LD_VAR 0 1
8192: PPUSH
8193: LD_INT 0
8195: PPUSH
8196: CALL_OW 1
8200: ST_TO_ADDR
// end ; end ;
8201: GO 8204
8203: POP
// end ;
8204: LD_VAR 0 4
8208: RET
// function SortBuildingLocationsListInCorrectOrder ( base ) ; var i , temp_list , p ; begin
8209: LD_INT 0
8211: PPUSH
8212: PPUSH
8213: PPUSH
8214: PPUSH
// temp_list = [ ] ;
8215: LD_ADDR_VAR 0 4
8219: PUSH
8220: EMPTY
8221: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
8222: LD_ADDR_VAR 0 3
8226: PUSH
8227: LD_EXP 39
8231: PUSH
8232: LD_VAR 0 1
8236: ARRAY
8237: PUSH
8238: FOR_IN
8239: IFFALSE 8612
// begin case i [ 4 ] of b_depot , b_warehouse :
8241: LD_VAR 0 3
8245: PUSH
8246: LD_INT 4
8248: ARRAY
8249: PUSH
8250: LD_INT 0
8252: DOUBLE
8253: EQUAL
8254: IFTRUE 8264
8256: LD_INT 1
8258: DOUBLE
8259: EQUAL
8260: IFTRUE 8264
8262: GO 8275
8264: POP
// p = 100 ; b_armoury , b_barracks , b_fort :
8265: LD_ADDR_VAR 0 5
8269: PUSH
8270: LD_INT 100
8272: ST_TO_ADDR
8273: GO 8594
8275: LD_INT 4
8277: DOUBLE
8278: EQUAL
8279: IFTRUE 8295
8281: LD_INT 5
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8295
8287: LD_INT 35
8289: DOUBLE
8290: EQUAL
8291: IFTRUE 8295
8293: GO 8306
8295: POP
// p = 99 ; b_solar_power , b_oil_power , b_siberite_power :
8296: LD_ADDR_VAR 0 5
8300: PUSH
8301: LD_INT 99
8303: ST_TO_ADDR
8304: GO 8594
8306: LD_INT 27
8308: DOUBLE
8309: EQUAL
8310: IFTRUE 8326
8312: LD_INT 26
8314: DOUBLE
8315: EQUAL
8316: IFTRUE 8326
8318: LD_INT 28
8320: DOUBLE
8321: EQUAL
8322: IFTRUE 8326
8324: GO 8337
8326: POP
// p = 98 ; b_breastwork :
8327: LD_ADDR_VAR 0 5
8331: PUSH
8332: LD_INT 98
8334: ST_TO_ADDR
8335: GO 8594
8337: LD_INT 31
8339: DOUBLE
8340: EQUAL
8341: IFTRUE 8345
8343: GO 8356
8345: POP
// p = 97 ; b_factory , b_workshop :
8346: LD_ADDR_VAR 0 5
8350: PUSH
8351: LD_INT 97
8353: ST_TO_ADDR
8354: GO 8594
8356: LD_INT 3
8358: DOUBLE
8359: EQUAL
8360: IFTRUE 8370
8362: LD_INT 2
8364: DOUBLE
8365: EQUAL
8366: IFTRUE 8370
8368: GO 8381
8370: POP
// p = 96 ; b_ext_gun , b_ext_noncombat , b_ext_laser , b_ext_computer , b_ext_radar , b_ext_rocket , b_ext_siberium , b_ext_track , b_ext_stitch :
8371: LD_ADDR_VAR 0 5
8375: PUSH
8376: LD_INT 96
8378: ST_TO_ADDR
8379: GO 8594
8381: LD_INT 17
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8437
8387: LD_INT 19
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8437
8393: LD_INT 25
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8437
8399: LD_INT 24
8401: DOUBLE
8402: EQUAL
8403: IFTRUE 8437
8405: LD_INT 20
8407: DOUBLE
8408: EQUAL
8409: IFTRUE 8437
8411: LD_INT 18
8413: DOUBLE
8414: EQUAL
8415: IFTRUE 8437
8417: LD_INT 21
8419: DOUBLE
8420: EQUAL
8421: IFTRUE 8437
8423: LD_INT 16
8425: DOUBLE
8426: EQUAL
8427: IFTRUE 8437
8429: LD_INT 23
8431: DOUBLE
8432: EQUAL
8433: IFTRUE 8437
8435: GO 8448
8437: POP
// p = 95 ; b_bunker :
8438: LD_ADDR_VAR 0 5
8442: PUSH
8443: LD_INT 95
8445: ST_TO_ADDR
8446: GO 8594
8448: LD_INT 32
8450: DOUBLE
8451: EQUAL
8452: IFTRUE 8456
8454: GO 8467
8456: POP
// p = 94 ; b_control_tower :
8457: LD_ADDR_VAR 0 5
8461: PUSH
8462: LD_INT 94
8464: ST_TO_ADDR
8465: GO 8594
8467: LD_INT 36
8469: DOUBLE
8470: EQUAL
8471: IFTRUE 8475
8473: GO 8486
8475: POP
// p = 93 ; b_turret :
8476: LD_ADDR_VAR 0 5
8480: PUSH
8481: LD_INT 93
8483: ST_TO_ADDR
8484: GO 8594
8486: LD_INT 33
8488: DOUBLE
8489: EQUAL
8490: IFTRUE 8494
8492: GO 8505
8494: POP
// p = 92 ; b_lab , b_lab_half , b_lab_full :
8495: LD_ADDR_VAR 0 5
8499: PUSH
8500: LD_INT 92
8502: ST_TO_ADDR
8503: GO 8594
8505: LD_INT 6
8507: DOUBLE
8508: EQUAL
8509: IFTRUE 8525
8511: LD_INT 7
8513: DOUBLE
8514: EQUAL
8515: IFTRUE 8525
8517: LD_INT 8
8519: DOUBLE
8520: EQUAL
8521: IFTRUE 8525
8523: GO 8536
8525: POP
// p = 91 ; b_teleport :
8526: LD_ADDR_VAR 0 5
8530: PUSH
8531: LD_INT 91
8533: ST_TO_ADDR
8534: GO 8594
8536: LD_INT 34
8538: DOUBLE
8539: EQUAL
8540: IFTRUE 8544
8542: GO 8555
8544: POP
// p = 90 ; b_siberite_mine :
8545: LD_ADDR_VAR 0 5
8549: PUSH
8550: LD_INT 90
8552: ST_TO_ADDR
8553: GO 8594
8555: LD_INT 30
8557: DOUBLE
8558: EQUAL
8559: IFTRUE 8563
8561: GO 8574
8563: POP
// p = 89 ; b_oil_mine :
8564: LD_ADDR_VAR 0 5
8568: PUSH
8569: LD_INT 89
8571: ST_TO_ADDR
8572: GO 8594
8574: LD_INT 29
8576: DOUBLE
8577: EQUAL
8578: IFTRUE 8582
8580: GO 8593
8582: POP
// p = 88 ; end ;
8583: LD_ADDR_VAR 0 5
8587: PUSH
8588: LD_INT 88
8590: ST_TO_ADDR
8591: GO 8594
8593: POP
// temp_list = temp_list ^ p ;
8594: LD_ADDR_VAR 0 4
8598: PUSH
8599: LD_VAR 0 4
8603: PUSH
8604: LD_VAR 0 5
8608: ADD
8609: ST_TO_ADDR
// end ;
8610: GO 8238
8612: POP
8613: POP
// temp_list = SortListByListDesc ( ai_buildings_locations [ base ] , temp_list ) ;
8614: LD_ADDR_VAR 0 4
8618: PUSH
8619: LD_EXP 39
8623: PUSH
8624: LD_VAR 0 1
8628: ARRAY
8629: PPUSH
8630: LD_VAR 0 4
8634: PPUSH
8635: CALL_OW 77
8639: ST_TO_ADDR
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list ) ;
8640: LD_ADDR_EXP 39
8644: PUSH
8645: LD_EXP 39
8649: PPUSH
8650: LD_VAR 0 1
8654: PPUSH
8655: LD_VAR 0 4
8659: PPUSH
8660: CALL_OW 1
8664: ST_TO_ADDR
// end ;
8665: LD_VAR 0 2
8669: RET
// function PrepareComputerSides ; var i , temp_list , side , base , num ; begin
8670: LD_INT 0
8672: PPUSH
8673: PPUSH
8674: PPUSH
8675: PPUSH
8676: PPUSH
8677: PPUSH
// for base in ai_bases do
8678: LD_ADDR_VAR 0 5
8682: PUSH
8683: LD_EXP 59
8687: PUSH
8688: FOR_IN
8689: IFFALSE 9602
// begin case base of 1 :
8691: LD_VAR 0 5
8695: PUSH
8696: LD_INT 1
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8717
8704: POP
// begin side = americans ;
8705: LD_ADDR_VAR 0 4
8709: PUSH
8710: LD_EXP 7
8714: ST_TO_ADDR
// end ; 2 :
8715: GO 8752
8717: LD_INT 2
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8730
8725: POP
// begin continue ;
8726: GO 8688
// end ; 3 :
8728: GO 8752
8730: LD_INT 3
8732: DOUBLE
8733: EQUAL
8734: IFTRUE 8738
8736: GO 8751
8738: POP
// begin side = russians ;
8739: LD_ADDR_VAR 0 4
8743: PUSH
8744: LD_EXP 4
8748: ST_TO_ADDR
// end ; end ;
8749: GO 8752
8751: POP
// InitUc ;
8752: CALL_OW 18
// InitHc ;
8756: CALL_OW 19
// uc_side = side ;
8760: LD_ADDR_OWVAR 20
8764: PUSH
8765: LD_VAR 0 4
8769: ST_TO_ADDR
// case side of americans :
8770: LD_VAR 0 4
8774: PUSH
8775: LD_EXP 7
8779: DOUBLE
8780: EQUAL
8781: IFTRUE 8785
8783: GO 8796
8785: POP
// uc_nation = nation_american ; russians :
8786: LD_ADDR_OWVAR 21
8790: PUSH
8791: LD_INT 1
8793: ST_TO_ADDR
8794: GO 8818
8796: LD_EXP 4
8800: DOUBLE
8801: EQUAL
8802: IFTRUE 8806
8804: GO 8817
8806: POP
// uc_nation = nation_russian ; end ;
8807: LD_ADDR_OWVAR 21
8811: PUSH
8812: LD_INT 3
8814: ST_TO_ADDR
8815: GO 8818
8817: POP
// temp_list = CreateUnitsWithClass ( ai_bunkers [ base ] + ai_armouries [ base ] , class_soldier , side ) ;
8818: LD_ADDR_VAR 0 3
8822: PUSH
8823: LD_EXP 50
8827: PUSH
8828: LD_VAR 0 5
8832: ARRAY
8833: PUSH
8834: LD_EXP 49
8838: PUSH
8839: LD_VAR 0 5
8843: ARRAY
8844: PLUS
8845: PPUSH
8846: LD_INT 1
8848: PPUSH
8849: LD_VAR 0 4
8853: PPUSH
8854: CALL 9737 0 3
8858: ST_TO_ADDR
// temp_list = temp_list ^ CreateUnitsWithClass ( [ 3 , 4 , 5 ] [ difficulty ] * ai_armouries [ base ] , [ class_sniper , 0 , class_bazooker ] [ base ] , side ) ;
8859: LD_ADDR_VAR 0 3
8863: PUSH
8864: LD_VAR 0 3
8868: PUSH
8869: LD_INT 3
8871: PUSH
8872: LD_INT 4
8874: PUSH
8875: LD_INT 5
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: PUSH
8883: LD_OWVAR 67
8887: ARRAY
8888: PUSH
8889: LD_EXP 49
8893: PUSH
8894: LD_VAR 0 5
8898: ARRAY
8899: MUL
8900: PPUSH
8901: LD_INT 5
8903: PUSH
8904: LD_INT 0
8906: PUSH
8907: LD_INT 9
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: LIST
8914: PUSH
8915: LD_VAR 0 5
8919: ARRAY
8920: PPUSH
8921: LD_VAR 0 4
8925: PPUSH
8926: CALL 9737 0 3
8930: ADD
8931: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , base , temp_list ) ;
8932: LD_ADDR_EXP 30
8936: PUSH
8937: LD_EXP 30
8941: PPUSH
8942: LD_VAR 0 5
8946: PPUSH
8947: LD_VAR 0 3
8951: PPUSH
8952: CALL_OW 1
8956: ST_TO_ADDR
// ai_engineers = Replace ( ai_engineers , base , CreateUnitsWithClass ( [ 2 , 3 , 4 ] [ difficulty ] , class_engineer , side ) ) ;
8957: LD_ADDR_EXP 31
8961: PUSH
8962: LD_EXP 31
8966: PPUSH
8967: LD_VAR 0 5
8971: PPUSH
8972: LD_INT 2
8974: PUSH
8975: LD_INT 3
8977: PUSH
8978: LD_INT 4
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_OWVAR 67
8990: ARRAY
8991: PPUSH
8992: LD_INT 2
8994: PPUSH
8995: LD_VAR 0 4
8999: PPUSH
9000: CALL 9737 0 3
9004: PPUSH
9005: CALL_OW 1
9009: ST_TO_ADDR
// temp_list = [ ] ;
9010: LD_ADDR_VAR 0 3
9014: PUSH
9015: EMPTY
9016: ST_TO_ADDR
// for i in ai_engineers [ base ] do
9017: LD_ADDR_VAR 0 2
9021: PUSH
9022: LD_EXP 31
9026: PUSH
9027: LD_VAR 0 5
9031: ARRAY
9032: PUSH
9033: FOR_IN
9034: IFFALSE 9062
// temp_list = temp_list ^ GetSkill ( i , skill_engineering ) ;
9036: LD_ADDR_VAR 0 3
9040: PUSH
9041: LD_VAR 0 3
9045: PUSH
9046: LD_VAR 0 2
9050: PPUSH
9051: LD_INT 2
9053: PPUSH
9054: CALL_OW 259
9058: ADD
9059: ST_TO_ADDR
9060: GO 9033
9062: POP
9063: POP
// num = BestFromListByList ( temp_list , temp_list ) ;
9064: LD_ADDR_VAR 0 6
9068: PUSH
9069: LD_VAR 0 3
9073: PPUSH
9074: LD_VAR 0 3
9078: PPUSH
9079: CALL_OW 79
9083: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: LD_EXP 45
9093: PUSH
9094: LD_VAR 0 5
9098: ARRAY
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9119
// SetBLevel ( i , num ) ;
9103: LD_VAR 0 2
9107: PPUSH
9108: LD_VAR 0 6
9112: PPUSH
9113: CALL_OW 241
9117: GO 9100
9119: POP
9120: POP
// ai_apemen_engineers = Replace ( ai_apemen_engineers , base , CreateApemenWithClass ( 2 , class_apeman_engineer , side ) ) ;
9121: LD_ADDR_EXP 63
9125: PUSH
9126: LD_EXP 63
9130: PPUSH
9131: LD_VAR 0 5
9135: PPUSH
9136: LD_INT 2
9138: PPUSH
9139: LD_INT 16
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: CALL 10160 0 3
9151: PPUSH
9152: CALL_OW 1
9156: ST_TO_ADDR
// ai_mechanics_defend = Replace ( ai_mechanics_defend , base , CreateUnitsWithClass ( [ 4 + Rand ( 0 , 1 ) , 5 + Rand ( 0 , 1 ) , 6 ] [ difficulty ] , class_mechanic , side ) ) ;
9157: LD_ADDR_EXP 32
9161: PUSH
9162: LD_EXP 32
9166: PPUSH
9167: LD_VAR 0 5
9171: PPUSH
9172: LD_INT 4
9174: PUSH
9175: LD_INT 0
9177: PPUSH
9178: LD_INT 1
9180: PPUSH
9181: CALL_OW 12
9185: PLUS
9186: PUSH
9187: LD_INT 5
9189: PUSH
9190: LD_INT 0
9192: PPUSH
9193: LD_INT 1
9195: PPUSH
9196: CALL_OW 12
9200: PLUS
9201: PUSH
9202: LD_INT 6
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: LD_OWVAR 67
9214: ARRAY
9215: PPUSH
9216: LD_INT 3
9218: PPUSH
9219: LD_VAR 0 4
9223: PPUSH
9224: CALL 9737 0 3
9228: PPUSH
9229: CALL_OW 1
9233: ST_TO_ADDR
// num = [ 3 , 4 , 5 ] [ difficulty ] ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_INT 3
9241: PUSH
9242: LD_INT 4
9244: PUSH
9245: LD_INT 5
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: PUSH
9253: LD_OWVAR 67
9257: ARRAY
9258: ST_TO_ADDR
// for i = 1 to ai_labs [ base ] do
9259: LD_ADDR_VAR 0 2
9263: PUSH
9264: DOUBLE
9265: LD_INT 1
9267: DEC
9268: ST_TO_ADDR
9269: LD_EXP 36
9273: PUSH
9274: LD_VAR 0 5
9278: ARRAY
9279: PUSH
9280: FOR_TO
9281: IFFALSE 9307
// num = num + Rand ( 0 , 1 ) ;
9283: LD_ADDR_VAR 0 6
9287: PUSH
9288: LD_VAR 0 6
9292: PUSH
9293: LD_INT 0
9295: PPUSH
9296: LD_INT 1
9298: PPUSH
9299: CALL_OW 12
9303: PLUS
9304: ST_TO_ADDR
9305: GO 9280
9307: POP
9308: POP
// if base = 1 then
9309: LD_VAR 0 5
9313: PUSH
9314: LD_INT 1
9316: EQUAL
9317: IFFALSE 9350
// num = num + [ 3 , 4 , 5 ] [ difficulty ] ;
9319: LD_ADDR_VAR 0 6
9323: PUSH
9324: LD_VAR 0 6
9328: PUSH
9329: LD_INT 3
9331: PUSH
9332: LD_INT 4
9334: PUSH
9335: LD_INT 5
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: PUSH
9343: LD_OWVAR 67
9347: ARRAY
9348: PLUS
9349: ST_TO_ADDR
// ai_scientists = Replace ( ai_scientists , base , CreateUnitsWithClass ( num , class_scientistic , side ) ) ;
9350: LD_ADDR_EXP 33
9354: PUSH
9355: LD_EXP 33
9359: PPUSH
9360: LD_VAR 0 5
9364: PPUSH
9365: LD_VAR 0 6
9369: PPUSH
9370: LD_INT 4
9372: PPUSH
9373: LD_VAR 0 4
9377: PPUSH
9378: CALL 9737 0 3
9382: PPUSH
9383: CALL_OW 1
9387: ST_TO_ADDR
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_cans , 300 ) ;
9388: LD_EXP 35
9392: PUSH
9393: LD_VAR 0 5
9397: ARRAY
9398: PPUSH
9399: CALL_OW 274
9403: PPUSH
9404: LD_INT 1
9406: PPUSH
9407: LD_INT 300
9409: PPUSH
9410: CALL_OW 277
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_oil , 300 ) ;
9414: LD_EXP 35
9418: PUSH
9419: LD_VAR 0 5
9423: ARRAY
9424: PPUSH
9425: CALL_OW 274
9429: PPUSH
9430: LD_INT 2
9432: PPUSH
9433: LD_INT 300
9435: PPUSH
9436: CALL_OW 277
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_siberit , 300 ) ;
9440: LD_EXP 35
9444: PUSH
9445: LD_VAR 0 5
9449: ARRAY
9450: PPUSH
9451: CALL_OW 274
9455: PPUSH
9456: LD_INT 3
9458: PPUSH
9459: LD_INT 300
9461: PPUSH
9462: CALL_OW 277
// for i in ai_soldiers [ base ] ^ ai_engineers [ base ] ^ ai_mechanics_defend [ base ] ^ ai_scientists [ base ] ^ ai_apemen_engineers [ base ] do
9466: LD_ADDR_VAR 0 2
9470: PUSH
9471: LD_EXP 30
9475: PUSH
9476: LD_VAR 0 5
9480: ARRAY
9481: PUSH
9482: LD_EXP 31
9486: PUSH
9487: LD_VAR 0 5
9491: ARRAY
9492: ADD
9493: PUSH
9494: LD_EXP 32
9498: PUSH
9499: LD_VAR 0 5
9503: ARRAY
9504: ADD
9505: PUSH
9506: LD_EXP 33
9510: PUSH
9511: LD_VAR 0 5
9515: ARRAY
9516: ADD
9517: PUSH
9518: LD_EXP 63
9522: PUSH
9523: LD_VAR 0 5
9527: ARRAY
9528: ADD
9529: PUSH
9530: FOR_IN
9531: IFFALSE 9580
// PlaceUnitXYR ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] , 7 , false ) ;
9533: LD_VAR 0 2
9537: PPUSH
9538: LD_EXP 42
9542: PUSH
9543: LD_VAR 0 5
9547: ARRAY
9548: PUSH
9549: LD_INT 1
9551: ARRAY
9552: PPUSH
9553: LD_EXP 42
9557: PUSH
9558: LD_VAR 0 5
9562: ARRAY
9563: PUSH
9564: LD_INT 2
9566: ARRAY
9567: PPUSH
9568: LD_INT 7
9570: PPUSH
9571: LD_INT 0
9573: PPUSH
9574: CALL_OW 50
9578: GO 9530
9580: POP
9581: POP
// ResetVehicleAttackDelay ( base ) ;
9582: LD_VAR 0 5
9586: PPUSH
9587: CALL 10336 0 1
// ResetHumanAttackDelay ( base ) ;
9591: LD_VAR 0 5
9595: PPUSH
9596: CALL 10385 0 1
// end ;
9600: GO 8688
9602: POP
9603: POP
// uc_side = americans ;
9604: LD_ADDR_OWVAR 20
9608: PUSH
9609: LD_EXP 7
9613: ST_TO_ADDR
// Simms = NewCharacter ( Simms ) ;
9614: LD_ADDR_EXP 25
9618: PUSH
9619: LD_STRING Simms
9621: PPUSH
9622: CALL_OW 25
9626: ST_TO_ADDR
// Joan = NewCharacter ( Joan ) ;
9627: LD_ADDR_EXP 28
9631: PUSH
9632: LD_STRING Joan
9634: PPUSH
9635: CALL_OW 25
9639: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
9640: LD_ADDR_EXP 29
9644: PUSH
9645: LD_STRING Powell
9647: PPUSH
9648: CALL_OW 25
9652: ST_TO_ADDR
// uc_side = americans_alt ;
9653: LD_ADDR_OWVAR 20
9657: PUSH
9658: LD_EXP 9
9662: ST_TO_ADDR
// Cornell = NewCharacter ( Cornell ) ;
9663: LD_ADDR_EXP 26
9667: PUSH
9668: LD_STRING Cornell
9670: PPUSH
9671: CALL_OW 25
9675: ST_TO_ADDR
// Khattam = NewCharacter ( Khatam ) ;
9676: LD_ADDR_EXP 27
9680: PUSH
9681: LD_STRING Khatam
9683: PPUSH
9684: CALL_OW 25
9688: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , americans ] ) do
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_INT 22
9696: PUSH
9697: LD_EXP 7
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PPUSH
9706: CALL_OW 69
9710: PUSH
9711: FOR_IN
9712: IFFALSE 9730
// DoNotAttack ( you , i ) ;
9714: LD_EXP 3
9718: PPUSH
9719: LD_VAR 0 2
9723: PPUSH
9724: CALL_OW 471
9728: GO 9711
9730: POP
9731: POP
// end ;
9732: LD_VAR 0 1
9736: RET
// export function CreateUnitsWithClass ( num_units , un_class , side ) ; var i , overskill ; begin
9737: LD_INT 0
9739: PPUSH
9740: PPUSH
9741: PPUSH
// result = [ ] ;
9742: LD_ADDR_VAR 0 4
9746: PUSH
9747: EMPTY
9748: ST_TO_ADDR
// InitUc ;
9749: CALL_OW 18
// InitHc ;
9753: CALL_OW 19
// case side of americans :
9757: LD_VAR 0 3
9761: PUSH
9762: LD_EXP 7
9766: DOUBLE
9767: EQUAL
9768: IFTRUE 9772
9770: GO 9783
9772: POP
// begin uc_nation = nation_american ;
9773: LD_ADDR_OWVAR 21
9777: PUSH
9778: LD_INT 1
9780: ST_TO_ADDR
// end ; russians :
9781: GO 9805
9783: LD_EXP 4
9787: DOUBLE
9788: EQUAL
9789: IFTRUE 9793
9791: GO 9804
9793: POP
// begin uc_nation = nation_russian ;
9794: LD_ADDR_OWVAR 21
9798: PUSH
9799: LD_INT 3
9801: ST_TO_ADDR
// end ; end ;
9802: GO 9805
9804: POP
// uc_side = side ;
9805: LD_ADDR_OWVAR 20
9809: PUSH
9810: LD_VAR 0 3
9814: ST_TO_ADDR
// overskill = difficulty + 4 ;
9815: LD_ADDR_VAR 0 6
9819: PUSH
9820: LD_OWVAR 67
9824: PUSH
9825: LD_INT 4
9827: PLUS
9828: ST_TO_ADDR
// for i = 1 to num_units do
9829: LD_ADDR_VAR 0 5
9833: PUSH
9834: DOUBLE
9835: LD_INT 1
9837: DEC
9838: ST_TO_ADDR
9839: LD_VAR 0 1
9843: PUSH
9844: FOR_TO
9845: IFFALSE 9918
// begin if Rand ( 1 , 3 ) = 1 then
9847: LD_INT 1
9849: PPUSH
9850: LD_INT 3
9852: PPUSH
9853: CALL_OW 12
9857: PUSH
9858: LD_INT 1
9860: EQUAL
9861: IFFALSE 9883
// PrepareHuman ( false , un_class , - overskill ) else
9863: LD_INT 0
9865: PPUSH
9866: LD_VAR 0 2
9870: PPUSH
9871: LD_VAR 0 6
9875: NEG
9876: PPUSH
9877: CALL_OW 380
9881: GO 9900
// PrepareHuman ( false , un_class , overskill ) ;
9883: LD_INT 0
9885: PPUSH
9886: LD_VAR 0 2
9890: PPUSH
9891: LD_VAR 0 6
9895: PPUSH
9896: CALL_OW 380
// result = result ^ CreateHuman ;
9900: LD_ADDR_VAR 0 4
9904: PUSH
9905: LD_VAR 0 4
9909: PUSH
9910: CALL_OW 44
9914: ADD
9915: ST_TO_ADDR
// end ;
9916: GO 9844
9918: POP
9919: POP
// end ;
9920: LD_VAR 0 4
9924: RET
// export function CreateUnitsWithClassLimited ( num_units , un_class , side , limit ) ; var i , overskill , count ; begin
9925: LD_INT 0
9927: PPUSH
9928: PPUSH
9929: PPUSH
9930: PPUSH
// result = [ ] ;
9931: LD_ADDR_VAR 0 5
9935: PUSH
9936: EMPTY
9937: ST_TO_ADDR
// InitUc ;
9938: CALL_OW 18
// InitHc ;
9942: CALL_OW 19
// if limit <= 0 then
9946: LD_VAR 0 4
9950: PUSH
9951: LD_INT 0
9953: LESSEQUAL
9954: IFFALSE 9958
// exit ;
9956: GO 10155
// if limit < num_units then
9958: LD_VAR 0 4
9962: PUSH
9963: LD_VAR 0 1
9967: LESS
9968: IFFALSE 9982
// count = limit else
9970: LD_ADDR_VAR 0 8
9974: PUSH
9975: LD_VAR 0 4
9979: ST_TO_ADDR
9980: GO 9992
// count = num_units ;
9982: LD_ADDR_VAR 0 8
9986: PUSH
9987: LD_VAR 0 1
9991: ST_TO_ADDR
// case side of americans :
9992: LD_VAR 0 3
9996: PUSH
9997: LD_EXP 7
10001: DOUBLE
10002: EQUAL
10003: IFTRUE 10007
10005: GO 10018
10007: POP
// begin uc_nation = nation_american ;
10008: LD_ADDR_OWVAR 21
10012: PUSH
10013: LD_INT 1
10015: ST_TO_ADDR
// end ; russians :
10016: GO 10040
10018: LD_EXP 4
10022: DOUBLE
10023: EQUAL
10024: IFTRUE 10028
10026: GO 10039
10028: POP
// begin uc_nation = nation_russian ;
10029: LD_ADDR_OWVAR 21
10033: PUSH
10034: LD_INT 3
10036: ST_TO_ADDR
// end ; end ;
10037: GO 10040
10039: POP
// uc_side = side ;
10040: LD_ADDR_OWVAR 20
10044: PUSH
10045: LD_VAR 0 3
10049: ST_TO_ADDR
// overskill = difficulty + 4 ;
10050: LD_ADDR_VAR 0 7
10054: PUSH
10055: LD_OWVAR 67
10059: PUSH
10060: LD_INT 4
10062: PLUS
10063: ST_TO_ADDR
// for i = 1 to count do
10064: LD_ADDR_VAR 0 6
10068: PUSH
10069: DOUBLE
10070: LD_INT 1
10072: DEC
10073: ST_TO_ADDR
10074: LD_VAR 0 8
10078: PUSH
10079: FOR_TO
10080: IFFALSE 10153
// begin if Rand ( 1 , 3 ) = 1 then
10082: LD_INT 1
10084: PPUSH
10085: LD_INT 3
10087: PPUSH
10088: CALL_OW 12
10092: PUSH
10093: LD_INT 1
10095: EQUAL
10096: IFFALSE 10118
// PrepareHuman ( false , un_class , - overskill ) else
10098: LD_INT 0
10100: PPUSH
10101: LD_VAR 0 2
10105: PPUSH
10106: LD_VAR 0 7
10110: NEG
10111: PPUSH
10112: CALL_OW 380
10116: GO 10135
// PrepareHuman ( false , un_class , overskill ) ;
10118: LD_INT 0
10120: PPUSH
10121: LD_VAR 0 2
10125: PPUSH
10126: LD_VAR 0 7
10130: PPUSH
10131: CALL_OW 380
// result = result ^ CreateHuman ;
10135: LD_ADDR_VAR 0 5
10139: PUSH
10140: LD_VAR 0 5
10144: PUSH
10145: CALL_OW 44
10149: ADD
10150: ST_TO_ADDR
// end ;
10151: GO 10079
10153: POP
10154: POP
// end ;
10155: LD_VAR 0 5
10159: RET
// export function CreateApemenWithClass ( num_units , un_class , side ) ; var i ; begin
10160: LD_INT 0
10162: PPUSH
10163: PPUSH
// result = [ ] ;
10164: LD_ADDR_VAR 0 4
10168: PUSH
10169: EMPTY
10170: ST_TO_ADDR
// InitUc ;
10171: CALL_OW 18
// InitHc ;
10175: CALL_OW 19
// uc_side = side ;
10179: LD_ADDR_OWVAR 20
10183: PUSH
10184: LD_VAR 0 3
10188: ST_TO_ADDR
// uc_nation = nation_nature ;
10189: LD_ADDR_OWVAR 21
10193: PUSH
10194: LD_INT 0
10196: ST_TO_ADDR
// hc_class = un_class ;
10197: LD_ADDR_OWVAR 28
10201: PUSH
10202: LD_VAR 0 2
10206: ST_TO_ADDR
// for i = 1 to num_units do
10207: LD_ADDR_VAR 0 5
10211: PUSH
10212: DOUBLE
10213: LD_INT 1
10215: DEC
10216: ST_TO_ADDR
10217: LD_VAR 0 1
10221: PUSH
10222: FOR_TO
10223: IFFALSE 10329
// begin hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10225: LD_ADDR_OWVAR 29
10229: PUSH
10230: LD_INT 11
10232: PPUSH
10233: LD_INT 13
10235: PPUSH
10236: CALL_OW 12
10240: PUSH
10241: LD_INT 10
10243: PPUSH
10244: LD_INT 11
10246: PPUSH
10247: CALL_OW 12
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
10256: LD_ADDR_OWVAR 27
10260: PUSH
10261: LD_INT 1
10263: PPUSH
10264: LD_INT 2
10266: PPUSH
10267: CALL_OW 12
10271: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , 0 , 0 ] ;
10272: LD_ADDR_OWVAR 31
10276: PUSH
10277: LD_INT 0
10279: PPUSH
10280: LD_INT 2
10282: PPUSH
10283: CALL_OW 12
10287: PUSH
10288: LD_INT 0
10290: PPUSH
10291: LD_INT 2
10293: PPUSH
10294: CALL_OW 12
10298: PUSH
10299: LD_INT 0
10301: PUSH
10302: LD_INT 0
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: ST_TO_ADDR
// result = result ^ CreateHuman ;
10311: LD_ADDR_VAR 0 4
10315: PUSH
10316: LD_VAR 0 4
10320: PUSH
10321: CALL_OW 44
10325: ADD
10326: ST_TO_ADDR
// end ;
10327: GO 10222
10329: POP
10330: POP
// end ;
10331: LD_VAR 0 4
10335: RET
// export function ResetVehicleAttackDelay ( base ) ; begin
10336: LD_INT 0
10338: PPUSH
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , Rand ( 5 5$30 , 7 7$30 ) - 1 1$0 * difficulty ) ;
10339: LD_ADDR_EXP 58
10343: PUSH
10344: LD_EXP 58
10348: PPUSH
10349: LD_VAR 0 1
10353: PPUSH
10354: LD_INT 11550
10356: PPUSH
10357: LD_INT 15750
10359: PPUSH
10360: CALL_OW 12
10364: PUSH
10365: LD_INT 2100
10367: PUSH
10368: LD_OWVAR 67
10372: MUL
10373: MINUS
10374: PPUSH
10375: CALL_OW 1
10379: ST_TO_ADDR
// end ;
10380: LD_VAR 0 2
10384: RET
// export function ResetHumanAttackDelay ( base ) ; begin
10385: LD_INT 0
10387: PPUSH
// ai_human_attack_delay = Replace ( ai_human_attack_delay , base , Rand ( 6 6$30 , 8 8$30 ) - 0 0$45 * difficulty ) ;
10388: LD_ADDR_EXP 68
10392: PUSH
10393: LD_EXP 68
10397: PPUSH
10398: LD_VAR 0 1
10402: PPUSH
10403: LD_INT 13650
10405: PPUSH
10406: LD_INT 17850
10408: PPUSH
10409: CALL_OW 12
10413: PUSH
10414: LD_INT 1575
10416: PUSH
10417: LD_OWVAR 67
10421: MUL
10422: MINUS
10423: PPUSH
10424: CALL_OW 1
10428: ST_TO_ADDR
// end ;
10429: LD_VAR 0 2
10433: RET
// export function sizeof ( list ) ; begin
10434: LD_INT 0
10436: PPUSH
// result = list + 0 ;
10437: LD_ADDR_VAR 0 2
10441: PUSH
10442: LD_VAR 0 1
10446: PUSH
10447: LD_INT 0
10449: PLUS
10450: ST_TO_ADDR
// end ;
10451: LD_VAR 0 2
10455: RET
// function Action ; begin
10456: LD_INT 0
10458: PPUSH
// wait ( 2 ) ;
10459: LD_INT 2
10461: PPUSH
10462: CALL_OW 67
// CenterNowOnXY ( 168 , 109 ) ;
10466: LD_INT 168
10468: PPUSH
10469: LD_INT 109
10471: PPUSH
10472: CALL_OW 86
// RevealFogArea ( you , Am_base ) ;
10476: LD_EXP 3
10480: PPUSH
10481: LD_INT 4
10483: PPUSH
10484: CALL_OW 332
// wait ( 0 0$0.2 ) ;
10488: LD_INT 7
10490: PPUSH
10491: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10495: LD_STRING M1
10497: PPUSH
10498: CALL_OW 337
// wait ( 0 0$0.2 ) ;
10502: LD_INT 7
10504: PPUSH
10505: CALL_OW 67
// SaveForQuickRestart ;
10509: CALL_OW 22
// end ; end_of_file
10513: LD_VAR 0 1
10517: RET
// every 0 0$1 + 0 0$0.4 do
10518: GO 10520
10520: DISABLE
// begin repeat wait ( Rand ( 1 1$10 , 2 2$40 ) ) ;
10521: LD_INT 2450
10523: PPUSH
10524: LD_INT 5600
10526: PPUSH
10527: CALL_OW 12
10531: PPUSH
10532: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 3 , 5 ) , true ) ;
10536: LD_INT 3
10538: PPUSH
10539: LD_INT 5
10541: PPUSH
10542: CALL_OW 12
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL_OW 57
// if Rand ( 1 , 4 ) = 1 then
10554: LD_INT 1
10556: PPUSH
10557: LD_INT 4
10559: PPUSH
10560: CALL_OW 12
10564: PUSH
10565: LD_INT 1
10567: EQUAL
10568: IFFALSE 10603
// begin wait ( Rand ( 0 0$5 , 0 0$20 ) ) ;
10570: LD_INT 175
10572: PPUSH
10573: LD_INT 700
10575: PPUSH
10576: CALL_OW 12
10580: PPUSH
10581: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 2 , 4 ) , true ) ;
10585: LD_INT 2
10587: PPUSH
10588: LD_INT 4
10590: PPUSH
10591: CALL_OW 12
10595: PPUSH
10596: LD_INT 1
10598: PPUSH
10599: CALL_OW 57
// end ; until false ;
10603: LD_INT 0
10605: IFFALSE 10521
// end ;
10607: END
// every 0 0$1 + 0 0$0.5 do var count , time ;
10608: GO 10610
10610: DISABLE
10611: LD_INT 0
10613: PPUSH
10614: PPUSH
// begin count = 0 ;
10615: LD_ADDR_VAR 0 1
10619: PUSH
10620: LD_INT 0
10622: ST_TO_ADDR
// repeat if game_phase < 3 then
10623: LD_EXP 89
10627: PUSH
10628: LD_INT 3
10630: LESS
10631: IFFALSE 10680
// time = [ 1 1$0 , 1 1$15 , 1 1$30 ] [ difficulty ] + ( 0 0$45 * count / ( count + 6 ) ) else
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: LD_INT 2100
10640: PUSH
10641: LD_INT 2625
10643: PUSH
10644: LD_INT 3150
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: LD_OWVAR 67
10656: ARRAY
10657: PUSH
10658: LD_INT 1575
10660: PUSH
10661: LD_VAR 0 1
10665: MUL
10666: PUSH
10667: LD_VAR 0 1
10671: PUSH
10672: LD_INT 6
10674: PLUS
10675: DIVREAL
10676: PLUS
10677: ST_TO_ADDR
10678: GO 10705
// time = [ 1 1$40 , 1 1$55 , 2 2$10 ] [ difficulty ] ;
10680: LD_ADDR_VAR 0 2
10684: PUSH
10685: LD_INT 3500
10687: PUSH
10688: LD_INT 4025
10690: PUSH
10691: LD_INT 4550
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: PUSH
10699: LD_OWVAR 67
10703: ARRAY
10704: ST_TO_ADDR
// wait ( Rand ( time , time + 0 0$30 ) ) ;
10705: LD_VAR 0 2
10709: PPUSH
10710: LD_VAR 0 2
10714: PUSH
10715: LD_INT 1050
10717: PLUS
10718: PPUSH
10719: CALL_OW 12
10723: PPUSH
10724: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , player_crate_area , true ) ;
10728: LD_INT 3
10730: PPUSH
10731: LD_INT 5
10733: PPUSH
10734: CALL_OW 12
10738: PPUSH
10739: LD_INT 9
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: CALL_OW 55
// count = count + 1 ;
10749: LD_ADDR_VAR 0 1
10753: PUSH
10754: LD_VAR 0 1
10758: PUSH
10759: LD_INT 1
10761: PLUS
10762: ST_TO_ADDR
// until false ;
10763: LD_INT 0
10765: IFFALSE 10623
// end ; end_of_file
10767: PPOPN 2
10769: END
// every 0 0$10 do var i , base ;
10770: GO 10772
10772: DISABLE
10773: LD_INT 0
10775: PPUSH
10776: PPUSH
// begin for i = 1 to ai_depot do
10777: LD_ADDR_VAR 0 1
10781: PUSH
10782: DOUBLE
10783: LD_INT 1
10785: DEC
10786: ST_TO_ADDR
10787: LD_EXP 35
10791: PUSH
10792: FOR_TO
10793: IFFALSE 10903
// if IsOk ( ai_depot [ i ] ) and GetSide ( ai_depot [ i ] ) <> you then
10795: LD_EXP 35
10799: PUSH
10800: LD_VAR 0 1
10804: ARRAY
10805: PPUSH
10806: CALL_OW 302
10810: PUSH
10811: LD_EXP 35
10815: PUSH
10816: LD_VAR 0 1
10820: ARRAY
10821: PPUSH
10822: CALL_OW 255
10826: PUSH
10827: LD_EXP 3
10831: NONEQUAL
10832: AND
10833: IFFALSE 10901
// begin base = GetBase ( ai_depot [ i ] ) ;
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_EXP 35
10844: PUSH
10845: LD_VAR 0 1
10849: ARRAY
10850: PPUSH
10851: CALL_OW 274
10855: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 300 ) ;
10856: LD_VAR 0 2
10860: PPUSH
10861: LD_INT 1
10863: PPUSH
10864: LD_INT 300
10866: PPUSH
10867: CALL_OW 277
// SetResourceType ( base , mat_oil , 300 ) ;
10871: LD_VAR 0 2
10875: PPUSH
10876: LD_INT 2
10878: PPUSH
10879: LD_INT 300
10881: PPUSH
10882: CALL_OW 277
// SetResourceType ( base , mat_siberit , 300 ) ;
10886: LD_VAR 0 2
10890: PPUSH
10891: LD_INT 3
10893: PPUSH
10894: LD_INT 300
10896: PPUSH
10897: CALL_OW 277
// end ;
10901: GO 10792
10903: POP
10904: POP
// enable ;
10905: ENABLE
// end ;
10906: PPOPN 2
10908: END
// on UnitDestroyed ( un ) do var side , temp_list , base ;
10909: LD_INT 0
10911: PPUSH
10912: PPUSH
10913: PPUSH
// begin if un = Heike then
10914: LD_VAR 0 1
10918: PUSH
10919: LD_EXP 10
10923: EQUAL
10924: IFFALSE 10948
// begin ExclusiveOn ;
10926: CALL_OW 4
// Wait ( 0 0$1 ) ;
10930: LD_INT 35
10932: PPUSH
10933: CALL_OW 67
// YouLost ( HeikeDead ) ;
10937: LD_STRING HeikeDead
10939: PPUSH
10940: CALL_OW 104
// ExclusiveOff ;
10944: CALL_OW 5
// end ; if un = Gensher then
10948: LD_VAR 0 1
10952: PUSH
10953: LD_EXP 24
10957: EQUAL
10958: IFFALSE 10982
// begin ExclusiveOn ;
10960: CALL_OW 4
// Wait ( 0 0$1 ) ;
10964: LD_INT 35
10966: PPUSH
10967: CALL_OW 67
// YouLost ( GensherDead ) ;
10971: LD_STRING GensherDead
10973: PPUSH
10974: CALL_OW 104
// ExclusiveOff ;
10978: CALL_OW 5
// end ; if UnitFilter ( original_gensher_people , [ [ f_class , class_scientistic ] , [ f_lives , 1 ] ] ) = 0 then
10982: LD_EXP 83
10986: PPUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 4
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 24
10999: PUSH
11000: LD_INT 1
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PPUSH
11011: CALL_OW 72
11015: PUSH
11016: LD_INT 0
11018: EQUAL
11019: IFFALSE 11043
// begin ExclusiveOn ;
11021: CALL_OW 4
// wait ( 0 0$1 ) ;
11025: LD_INT 35
11027: PPUSH
11028: CALL_OW 67
// YouLost ( GensherScisDead ) ;
11032: LD_STRING GensherScisDead
11034: PPUSH
11035: CALL_OW 104
// ExclusiveOff ;
11039: CALL_OW 5
// end ; for base in ai_bases do
11043: LD_ADDR_VAR 0 4
11047: PUSH
11048: LD_EXP 59
11052: PUSH
11053: FOR_IN
11054: IFFALSE 11105
// begin temp_list = ai_captured_buildings [ base ] diff un ;
11056: LD_ADDR_VAR 0 3
11060: PUSH
11061: LD_EXP 79
11065: PUSH
11066: LD_VAR 0 4
11070: ARRAY
11071: PUSH
11072: LD_VAR 0 1
11076: DIFF
11077: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
11078: LD_ADDR_EXP 79
11082: PUSH
11083: LD_EXP 79
11087: PPUSH
11088: LD_VAR 0 4
11092: PPUSH
11093: LD_VAR 0 3
11097: PPUSH
11098: CALL_OW 1
11102: ST_TO_ADDR
// end ;
11103: GO 11053
11105: POP
11106: POP
// side = GetSide ( un ) ;
11107: LD_ADDR_VAR 0 2
11111: PUSH
11112: LD_VAR 0 1
11116: PPUSH
11117: CALL_OW 255
11121: ST_TO_ADDR
// if side = you then
11122: LD_VAR 0 2
11126: PUSH
11127: LD_EXP 3
11131: EQUAL
11132: IFFALSE 11136
// exit ;
11134: GO 11359
// if side = you_alt and game_phase = 1 then
11136: LD_VAR 0 2
11140: PUSH
11141: LD_EXP 6
11145: EQUAL
11146: PUSH
11147: LD_EXP 89
11151: PUSH
11152: LD_INT 1
11154: EQUAL
11155: AND
11156: IFFALSE 11219
// begin case GetType ( un ) of unit_human :
11158: LD_VAR 0 1
11162: PPUSH
11163: CALL_OW 247
11167: PUSH
11168: LD_INT 1
11170: DOUBLE
11171: EQUAL
11172: IFTRUE 11176
11174: GO 11193
11176: POP
// russian_interference_points = russian_interference_points + 3 ; unit_building :
11177: LD_ADDR_EXP 97
11181: PUSH
11182: LD_EXP 97
11186: PUSH
11187: LD_INT 3
11189: PLUS
11190: ST_TO_ADDR
11191: GO 11219
11193: LD_INT 3
11195: DOUBLE
11196: EQUAL
11197: IFTRUE 11201
11199: GO 11218
11201: POP
// russian_interference_points = russian_interference_points + 2 ; end ;
11202: LD_ADDR_EXP 97
11206: PUSH
11207: LD_EXP 97
11211: PUSH
11212: LD_INT 2
11214: PLUS
11215: ST_TO_ADDR
11216: GO 11219
11218: POP
// end ; case GetType ( un ) of unit_human :
11219: LD_VAR 0 1
11223: PPUSH
11224: CALL_OW 247
11228: PUSH
11229: LD_INT 1
11231: DOUBLE
11232: EQUAL
11233: IFTRUE 11237
11235: GO 11274
11237: POP
// for base in ai_bases do
11238: LD_ADDR_VAR 0 4
11242: PUSH
11243: LD_EXP 59
11247: PUSH
11248: FOR_IN
11249: IFFALSE 11270
// RemoveHumanFromVariables ( base , un , true ) ; unit_vehicle :
11251: LD_VAR 0 4
11255: PPUSH
11256: LD_VAR 0 1
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL 11915 0 3
11268: GO 11248
11270: POP
11271: POP
11272: GO 11359
11274: LD_INT 2
11276: DOUBLE
11277: EQUAL
11278: IFTRUE 11282
11280: GO 11316
11282: POP
// for base in ai_bases do
11283: LD_ADDR_VAR 0 4
11287: PUSH
11288: LD_EXP 59
11292: PUSH
11293: FOR_IN
11294: IFFALSE 11312
// RemoveVehicleFromVariables ( base , un ) ; unit_building :
11296: LD_VAR 0 4
11300: PPUSH
11301: LD_VAR 0 1
11305: PPUSH
11306: CALL 11523 0 2
11310: GO 11293
11312: POP
11313: POP
11314: GO 11359
11316: LD_INT 3
11318: DOUBLE
11319: EQUAL
11320: IFTRUE 11324
11322: GO 11358
11324: POP
// for base in ai_bases do
11325: LD_ADDR_VAR 0 4
11329: PUSH
11330: LD_EXP 59
11334: PUSH
11335: FOR_IN
11336: IFFALSE 11354
// RemoveBuildingFromVariables ( base , un ) ; end ;
11338: LD_VAR 0 4
11342: PPUSH
11343: LD_VAR 0 1
11347: PPUSH
11348: CALL 11362 0 2
11352: GO 11335
11354: POP
11355: POP
11356: GO 11359
11358: POP
// end ;
11359: PPOPN 4
11361: END
// function RemoveBuildingFromVariables ( base , building ) ; var temp_list ; begin
11362: LD_INT 0
11364: PPUSH
11365: PPUSH
// temp_list = ai_all_buildings [ base ] diff building ;
11366: LD_ADDR_VAR 0 4
11370: PUSH
11371: LD_EXP 45
11375: PUSH
11376: LD_VAR 0 1
11380: ARRAY
11381: PUSH
11382: LD_VAR 0 2
11386: DIFF
11387: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
11388: LD_ADDR_EXP 45
11392: PUSH
11393: LD_EXP 45
11397: PPUSH
11398: LD_VAR 0 1
11402: PPUSH
11403: LD_VAR 0 4
11407: PPUSH
11408: CALL_OW 1
11412: ST_TO_ADDR
// temp_list = ai_excepted_buildings [ base ] diff building ;
11413: LD_ADDR_VAR 0 4
11417: PUSH
11418: LD_EXP 69
11422: PUSH
11423: LD_VAR 0 1
11427: ARRAY
11428: PUSH
11429: LD_VAR 0 2
11433: DIFF
11434: ST_TO_ADDR
// ai_excepted_buildings = Replace ( ai_excepted_buildings , base , temp_list ) ;
11435: LD_ADDR_EXP 69
11439: PUSH
11440: LD_EXP 69
11444: PPUSH
11445: LD_VAR 0 1
11449: PPUSH
11450: LD_VAR 0 4
11454: PPUSH
11455: CALL_OW 1
11459: ST_TO_ADDR
// if building = ai_building_under_construction [ base ] then
11460: LD_VAR 0 2
11464: PUSH
11465: LD_EXP 43
11469: PUSH
11470: LD_VAR 0 1
11474: ARRAY
11475: EQUAL
11476: IFFALSE 11501
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
11478: LD_ADDR_EXP 43
11482: PUSH
11483: LD_EXP 43
11487: PPUSH
11488: LD_VAR 0 1
11492: PPUSH
11493: LD_INT 0
11495: PPUSH
11496: CALL_OW 1
11500: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , building , false ) ;
11501: LD_VAR 0 1
11505: PPUSH
11506: LD_VAR 0 2
11510: PPUSH
11511: LD_INT 0
11513: PPUSH
11514: CALL 7134 0 3
// end ;
11518: LD_VAR 0 3
11522: RET
// function RemoveVehicleFromVariables ( base , vehicle ) ; var temp_list ; begin
11523: LD_INT 0
11525: PPUSH
11526: PPUSH
// if vehicle in ai_vehicles_defend [ base ] then
11527: LD_VAR 0 2
11531: PUSH
11532: LD_EXP 40
11536: PUSH
11537: LD_VAR 0 1
11541: ARRAY
11542: IN
11543: IFFALSE 11592
// begin temp_list = ai_vehicles_defend [ base ] diff vehicle ;
11545: LD_ADDR_VAR 0 4
11549: PUSH
11550: LD_EXP 40
11554: PUSH
11555: LD_VAR 0 1
11559: ARRAY
11560: PUSH
11561: LD_VAR 0 2
11565: DIFF
11566: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list ) ;
11567: LD_ADDR_EXP 40
11571: PUSH
11572: LD_EXP 40
11576: PPUSH
11577: LD_VAR 0 1
11581: PPUSH
11582: LD_VAR 0 4
11586: PPUSH
11587: CALL_OW 1
11591: ST_TO_ADDR
// end ; if vehicle in ai_vehicles_attack [ base ] then
11592: LD_VAR 0 2
11596: PUSH
11597: LD_EXP 41
11601: PUSH
11602: LD_VAR 0 1
11606: ARRAY
11607: IN
11608: IFFALSE 11657
// begin temp_list = ai_vehicles_attack [ base ] diff vehicle ;
11610: LD_ADDR_VAR 0 4
11614: PUSH
11615: LD_EXP 41
11619: PUSH
11620: LD_VAR 0 1
11624: ARRAY
11625: PUSH
11626: LD_VAR 0 2
11630: DIFF
11631: ST_TO_ADDR
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , temp_list ) ;
11632: LD_ADDR_EXP 41
11636: PUSH
11637: LD_EXP 41
11641: PPUSH
11642: LD_VAR 0 1
11646: PPUSH
11647: LD_VAR 0 4
11651: PPUSH
11652: CALL_OW 1
11656: ST_TO_ADDR
// end ; if vehicle = ai_cargo_bay [ base ] then
11657: LD_VAR 0 2
11661: PUSH
11662: LD_EXP 61
11666: PUSH
11667: LD_VAR 0 1
11671: ARRAY
11672: EQUAL
11673: IFFALSE 11698
// begin ai_cargo_bay = Replace ( ai_cargo_bay , base , 0 ) ;
11675: LD_ADDR_EXP 61
11679: PUSH
11680: LD_EXP 61
11684: PPUSH
11685: LD_VAR 0 1
11689: PPUSH
11690: LD_INT 0
11692: PPUSH
11693: CALL_OW 1
11697: ST_TO_ADDR
// end ; if vehicle = ai_crane [ base ] then
11698: LD_VAR 0 2
11702: PUSH
11703: LD_EXP 71
11707: PUSH
11708: LD_VAR 0 1
11712: ARRAY
11713: EQUAL
11714: IFFALSE 11780
// begin ai_crane = Replace ( ai_crane , base , 0 ) ;
11716: LD_ADDR_EXP 71
11720: PUSH
11721: LD_EXP 71
11725: PPUSH
11726: LD_VAR 0 1
11730: PPUSH
11731: LD_INT 0
11733: PPUSH
11734: CALL_OW 1
11738: ST_TO_ADDR
// if vehicle = ai_building_constructor [ base ] then
11739: LD_VAR 0 2
11743: PUSH
11744: LD_EXP 46
11748: PUSH
11749: LD_VAR 0 1
11753: ARRAY
11754: EQUAL
11755: IFFALSE 11780
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
11757: LD_ADDR_EXP 46
11761: PUSH
11762: LD_EXP 46
11766: PPUSH
11767: LD_VAR 0 1
11771: PPUSH
11772: LD_INT 0
11774: PPUSH
11775: CALL_OW 1
11779: ST_TO_ADDR
// end ; if vehicle in ai_vehicles_being_repaired [ base ] then
11780: LD_VAR 0 2
11784: PUSH
11785: LD_EXP 80
11789: PUSH
11790: LD_VAR 0 1
11794: ARRAY
11795: IN
11796: IFFALSE 11845
// begin temp_list = ai_vehicles_being_repaired [ base ] diff vehicle ;
11798: LD_ADDR_VAR 0 4
11802: PUSH
11803: LD_EXP 80
11807: PUSH
11808: LD_VAR 0 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: DIFF
11819: ST_TO_ADDR
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
11820: LD_ADDR_EXP 80
11824: PUSH
11825: LD_EXP 80
11829: PPUSH
11830: LD_VAR 0 1
11834: PPUSH
11835: LD_VAR 0 4
11839: PPUSH
11840: CALL_OW 1
11844: ST_TO_ADDR
// end ; if vehicle in ai_refuel_vehicles_list [ base ] then
11845: LD_VAR 0 2
11849: PUSH
11850: LD_EXP 55
11854: PUSH
11855: LD_VAR 0 1
11859: ARRAY
11860: IN
11861: IFFALSE 11910
// begin temp_list = ai_refuel_vehicles_list [ base ] diff vehicle ;
11863: LD_ADDR_VAR 0 4
11867: PUSH
11868: LD_EXP 55
11872: PUSH
11873: LD_VAR 0 1
11877: ARRAY
11878: PUSH
11879: LD_VAR 0 2
11883: DIFF
11884: ST_TO_ADDR
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
11885: LD_ADDR_EXP 55
11889: PUSH
11890: LD_EXP 55
11894: PPUSH
11895: LD_VAR 0 1
11899: PPUSH
11900: LD_VAR 0 4
11904: PPUSH
11905: CALL_OW 1
11909: ST_TO_ADDR
// end ; end ;
11910: LD_VAR 0 3
11914: RET
// function RemoveHumanFromVariables ( base , human , check_if_base_is_dead ) ; var temp_list ; begin
11915: LD_INT 0
11917: PPUSH
11918: PPUSH
// if human in ai_soldiers [ base ] then
11919: LD_VAR 0 2
11923: PUSH
11924: LD_EXP 30
11928: PUSH
11929: LD_VAR 0 1
11933: ARRAY
11934: IN
11935: IFFALSE 11984
// begin temp_list = ai_soldiers [ base ] diff human ;
11937: LD_ADDR_VAR 0 5
11941: PUSH
11942: LD_EXP 30
11946: PUSH
11947: LD_VAR 0 1
11951: ARRAY
11952: PUSH
11953: LD_VAR 0 2
11957: DIFF
11958: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , base , temp_list ) ;
11959: LD_ADDR_EXP 30
11963: PUSH
11964: LD_EXP 30
11968: PPUSH
11969: LD_VAR 0 1
11973: PPUSH
11974: LD_VAR 0 5
11978: PPUSH
11979: CALL_OW 1
11983: ST_TO_ADDR
// end ; if human in ai_attacking_soldiers [ base ] then
11984: LD_VAR 0 2
11988: PUSH
11989: LD_EXP 64
11993: PUSH
11994: LD_VAR 0 1
11998: ARRAY
11999: IN
12000: IFFALSE 12049
// begin temp_list = ai_attacking_soldiers [ base ] diff human ;
12002: LD_ADDR_VAR 0 5
12006: PUSH
12007: LD_EXP 64
12011: PUSH
12012: LD_VAR 0 1
12016: ARRAY
12017: PUSH
12018: LD_VAR 0 2
12022: DIFF
12023: ST_TO_ADDR
// ai_attacking_soldiers = Replace ( ai_attacking_soldiers , base , temp_list ) ;
12024: LD_ADDR_EXP 64
12028: PUSH
12029: LD_EXP 64
12033: PPUSH
12034: LD_VAR 0 1
12038: PPUSH
12039: LD_VAR 0 5
12043: PPUSH
12044: CALL_OW 1
12048: ST_TO_ADDR
// end ; if human in ai_engineers [ base ] then
12049: LD_VAR 0 2
12053: PUSH
12054: LD_EXP 31
12058: PUSH
12059: LD_VAR 0 1
12063: ARRAY
12064: IN
12065: IFFALSE 12114
// begin temp_list = ai_engineers [ base ] diff human ;
12067: LD_ADDR_VAR 0 5
12071: PUSH
12072: LD_EXP 31
12076: PUSH
12077: LD_VAR 0 1
12081: ARRAY
12082: PUSH
12083: LD_VAR 0 2
12087: DIFF
12088: ST_TO_ADDR
// ai_engineers = Replace ( ai_engineers , base , temp_list ) ;
12089: LD_ADDR_EXP 31
12093: PUSH
12094: LD_EXP 31
12098: PPUSH
12099: LD_VAR 0 1
12103: PPUSH
12104: LD_VAR 0 5
12108: PPUSH
12109: CALL_OW 1
12113: ST_TO_ADDR
// end ; if human in ai_apemen_engineers [ base ] then
12114: LD_VAR 0 2
12118: PUSH
12119: LD_EXP 63
12123: PUSH
12124: LD_VAR 0 1
12128: ARRAY
12129: IN
12130: IFFALSE 12179
// begin temp_list = ai_apemen_engineers [ base ] diff human ;
12132: LD_ADDR_VAR 0 5
12136: PUSH
12137: LD_EXP 63
12141: PUSH
12142: LD_VAR 0 1
12146: ARRAY
12147: PUSH
12148: LD_VAR 0 2
12152: DIFF
12153: ST_TO_ADDR
// ai_apemen_engineers = Replace ( ai_apemen_engineers , base , temp_list ) ;
12154: LD_ADDR_EXP 63
12158: PUSH
12159: LD_EXP 63
12163: PPUSH
12164: LD_VAR 0 1
12168: PPUSH
12169: LD_VAR 0 5
12173: PPUSH
12174: CALL_OW 1
12178: ST_TO_ADDR
// end ; if human in ai_mechanics_defend [ base ] then
12179: LD_VAR 0 2
12183: PUSH
12184: LD_EXP 32
12188: PUSH
12189: LD_VAR 0 1
12193: ARRAY
12194: IN
12195: IFFALSE 12244
// begin temp_list = ai_mechanics_defend [ base ] diff human ;
12197: LD_ADDR_VAR 0 5
12201: PUSH
12202: LD_EXP 32
12206: PUSH
12207: LD_VAR 0 1
12211: ARRAY
12212: PUSH
12213: LD_VAR 0 2
12217: DIFF
12218: ST_TO_ADDR
// ai_mechanics_defend = Replace ( ai_mechanics_defend , base , temp_list ) ;
12219: LD_ADDR_EXP 32
12223: PUSH
12224: LD_EXP 32
12228: PPUSH
12229: LD_VAR 0 1
12233: PPUSH
12234: LD_VAR 0 5
12238: PPUSH
12239: CALL_OW 1
12243: ST_TO_ADDR
// end ; if human in ai_scientists [ base ] then
12244: LD_VAR 0 2
12248: PUSH
12249: LD_EXP 33
12253: PUSH
12254: LD_VAR 0 1
12258: ARRAY
12259: IN
12260: IFFALSE 12309
// begin temp_list = ai_scientists [ base ] diff human ;
12262: LD_ADDR_VAR 0 5
12266: PUSH
12267: LD_EXP 33
12271: PUSH
12272: LD_VAR 0 1
12276: ARRAY
12277: PUSH
12278: LD_VAR 0 2
12282: DIFF
12283: ST_TO_ADDR
// ai_scientists = Replace ( ai_scientists , base , temp_list ) ;
12284: LD_ADDR_EXP 33
12288: PUSH
12289: LD_EXP 33
12293: PPUSH
12294: LD_VAR 0 1
12298: PPUSH
12299: LD_VAR 0 5
12303: PPUSH
12304: CALL_OW 1
12308: ST_TO_ADDR
// end ; if human in ai_attacking_scientists [ base ] then
12309: LD_VAR 0 2
12313: PUSH
12314: LD_EXP 65
12318: PUSH
12319: LD_VAR 0 1
12323: ARRAY
12324: IN
12325: IFFALSE 12374
// begin temp_list = ai_attacking_scientists [ base ] diff human ;
12327: LD_ADDR_VAR 0 5
12331: PUSH
12332: LD_EXP 65
12336: PUSH
12337: LD_VAR 0 1
12341: ARRAY
12342: PUSH
12343: LD_VAR 0 2
12347: DIFF
12348: ST_TO_ADDR
// ai_attacking_scientists = Replace ( ai_attacking_scientists , base , temp_list ) ;
12349: LD_ADDR_EXP 65
12353: PUSH
12354: LD_EXP 65
12358: PPUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: LD_VAR 0 5
12368: PPUSH
12369: CALL_OW 1
12373: ST_TO_ADDR
// end ; if human in ai_heal_these_humans [ base ] then
12374: LD_VAR 0 2
12378: PUSH
12379: LD_EXP 44
12383: PUSH
12384: LD_VAR 0 1
12388: ARRAY
12389: IN
12390: IFFALSE 12439
// begin temp_list = ai_heal_these_humans [ base ] diff human ;
12392: LD_ADDR_VAR 0 5
12396: PUSH
12397: LD_EXP 44
12401: PUSH
12402: LD_VAR 0 1
12406: ARRAY
12407: PUSH
12408: LD_VAR 0 2
12412: DIFF
12413: ST_TO_ADDR
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12414: LD_ADDR_EXP 44
12418: PUSH
12419: LD_EXP 44
12423: PPUSH
12424: LD_VAR 0 1
12428: PPUSH
12429: LD_VAR 0 5
12433: PPUSH
12434: CALL_OW 1
12438: ST_TO_ADDR
// end ; if human = ai_building_constructor [ base ] then
12439: LD_VAR 0 2
12443: PUSH
12444: LD_EXP 46
12448: PUSH
12449: LD_VAR 0 1
12453: ARRAY
12454: EQUAL
12455: IFFALSE 12480
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
12457: LD_ADDR_EXP 46
12461: PUSH
12462: LD_EXP 46
12466: PPUSH
12467: LD_VAR 0 1
12471: PPUSH
12472: LD_INT 0
12474: PPUSH
12475: CALL_OW 1
12479: ST_TO_ADDR
// if human in ai_retreating_attacking_humans [ base ] then
12480: LD_VAR 0 2
12484: PUSH
12485: LD_EXP 67
12489: PUSH
12490: LD_VAR 0 1
12494: ARRAY
12495: IN
12496: IFFALSE 12545
// begin temp_list = ai_retreating_attacking_humans [ base ] diff human ;
12498: LD_ADDR_VAR 0 5
12502: PUSH
12503: LD_EXP 67
12507: PUSH
12508: LD_VAR 0 1
12512: ARRAY
12513: PUSH
12514: LD_VAR 0 2
12518: DIFF
12519: ST_TO_ADDR
// ai_retreating_attacking_humans = Replace ( ai_retreating_attacking_humans , base , temp_list ) ;
12520: LD_ADDR_EXP 67
12524: PUSH
12525: LD_EXP 67
12529: PPUSH
12530: LD_VAR 0 1
12534: PPUSH
12535: LD_VAR 0 5
12539: PPUSH
12540: CALL_OW 1
12544: ST_TO_ADDR
// end ; if check_if_base_is_dead then
12545: LD_VAR 0 3
12549: IFFALSE 12659
// if ( ( ai_soldiers [ base ] ^ ai_attacking_soldiers [ base ] ^ ai_engineers [ base ] ^ ai_apemen_engineers [ base ] ^ ai_mechanics_defend [ base ] ^ ai_scientists [ base ] ^ ai_attacking_scientists [ base ] ) diff 0 ) = 0 then
12551: LD_EXP 30
12555: PUSH
12556: LD_VAR 0 1
12560: ARRAY
12561: PUSH
12562: LD_EXP 64
12566: PUSH
12567: LD_VAR 0 1
12571: ARRAY
12572: ADD
12573: PUSH
12574: LD_EXP 31
12578: PUSH
12579: LD_VAR 0 1
12583: ARRAY
12584: ADD
12585: PUSH
12586: LD_EXP 63
12590: PUSH
12591: LD_VAR 0 1
12595: ARRAY
12596: ADD
12597: PUSH
12598: LD_EXP 32
12602: PUSH
12603: LD_VAR 0 1
12607: ARRAY
12608: ADD
12609: PUSH
12610: LD_EXP 33
12614: PUSH
12615: LD_VAR 0 1
12619: ARRAY
12620: ADD
12621: PUSH
12622: LD_EXP 65
12626: PUSH
12627: LD_VAR 0 1
12631: ARRAY
12632: ADD
12633: PUSH
12634: LD_INT 0
12636: DIFF
12637: PUSH
12638: LD_INT 0
12640: EQUAL
12641: IFFALSE 12659
// ai_bases = ai_bases diff base ;
12643: LD_ADDR_EXP 59
12647: PUSH
12648: LD_EXP 59
12652: PUSH
12653: LD_VAR 0 1
12657: DIFF
12658: ST_TO_ADDR
// end ;
12659: LD_VAR 0 4
12663: RET
// function GetBaseArea ( base ) ; begin
12664: LD_INT 0
12666: PPUSH
// case base of 1 :
12667: LD_VAR 0 1
12671: PUSH
12672: LD_INT 1
12674: DOUBLE
12675: EQUAL
12676: IFTRUE 12680
12678: GO 12691
12680: POP
// result = Am_base ; 2 :
12681: LD_ADDR_VAR 0 2
12685: PUSH
12686: LD_INT 4
12688: ST_TO_ADDR
12689: GO 12730
12691: LD_INT 2
12693: DOUBLE
12694: EQUAL
12695: IFTRUE 12699
12697: GO 12710
12699: POP
// result = Gensher_base ; 3 :
12700: LD_ADDR_VAR 0 2
12704: PUSH
12705: LD_INT 7
12707: ST_TO_ADDR
12708: GO 12730
12710: LD_INT 3
12712: DOUBLE
12713: EQUAL
12714: IFTRUE 12718
12716: GO 12729
12718: POP
// result = Ru_base ; end ;
12719: LD_ADDR_VAR 0 2
12723: PUSH
12724: LD_INT 3
12726: ST_TO_ADDR
12727: GO 12730
12729: POP
// end ;
12730: LD_VAR 0 2
12734: RET
// function GetBaseSide ( base ) ; begin
12735: LD_INT 0
12737: PPUSH
// case base of 1 :
12738: LD_VAR 0 1
12742: PUSH
12743: LD_INT 1
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12764
12751: POP
// result = americans ; 2 :
12752: LD_ADDR_VAR 0 2
12756: PUSH
12757: LD_EXP 7
12761: ST_TO_ADDR
12762: GO 12807
12764: LD_INT 2
12766: DOUBLE
12767: EQUAL
12768: IFTRUE 12772
12770: GO 12785
12772: POP
// result = you_alt ; 3 :
12773: LD_ADDR_VAR 0 2
12777: PUSH
12778: LD_EXP 6
12782: ST_TO_ADDR
12783: GO 12807
12785: LD_INT 3
12787: DOUBLE
12788: EQUAL
12789: IFTRUE 12793
12791: GO 12806
12793: POP
// result = russians ; end ;
12794: LD_ADDR_VAR 0 2
12798: PUSH
12799: LD_EXP 4
12803: ST_TO_ADDR
12804: GO 12807
12806: POP
// end ;
12807: LD_VAR 0 2
12811: RET
// function GetBaseNation ( base ) ; begin
12812: LD_INT 0
12814: PPUSH
// case base of 1 :
12815: LD_VAR 0 1
12819: PUSH
12820: LD_INT 1
12822: DOUBLE
12823: EQUAL
12824: IFTRUE 12828
12826: GO 12839
12828: POP
// result = nation_american ; 2 :
12829: LD_ADDR_VAR 0 2
12833: PUSH
12834: LD_INT 1
12836: ST_TO_ADDR
12837: GO 12878
12839: LD_INT 2
12841: DOUBLE
12842: EQUAL
12843: IFTRUE 12847
12845: GO 12858
12847: POP
// result = nation_arabian ; 3 :
12848: LD_ADDR_VAR 0 2
12852: PUSH
12853: LD_INT 2
12855: ST_TO_ADDR
12856: GO 12878
12858: LD_INT 3
12860: DOUBLE
12861: EQUAL
12862: IFTRUE 12866
12864: GO 12877
12866: POP
// result = nation_russian ; end ;
12867: LD_ADDR_VAR 0 2
12871: PUSH
12872: LD_INT 3
12874: ST_TO_ADDR
12875: GO 12878
12877: POP
// end ;
12878: LD_VAR 0 2
12882: RET
// function FindBase ( un ) ; var base ; begin
12883: LD_INT 0
12885: PPUSH
12886: PPUSH
// for base in ai_bases do
12887: LD_ADDR_VAR 0 3
12891: PUSH
12892: LD_EXP 59
12896: PUSH
12897: FOR_IN
12898: IFFALSE 12937
// if IsInArea ( un , GetBaseArea ( base ) ) then
12900: LD_VAR 0 1
12904: PPUSH
12905: LD_VAR 0 3
12909: PPUSH
12910: CALL 12664 0 1
12914: PPUSH
12915: CALL_OW 308
12919: IFFALSE 12935
// begin result = base ;
12921: LD_ADDR_VAR 0 2
12925: PUSH
12926: LD_VAR 0 3
12930: ST_TO_ADDR
// exit ;
12931: POP
12932: POP
12933: GO 12948
// end ;
12935: GO 12897
12937: POP
12938: POP
// result = - 1 ;
12939: LD_ADDR_VAR 0 2
12943: PUSH
12944: LD_INT 1
12946: NEG
12947: ST_TO_ADDR
// end ;
12948: LD_VAR 0 2
12952: RET
// every 0 0$1 do var side , i , temp_list , buildings_list , soldiers_list , temp_unit , base , val , special_units , bunkers , under_attack , j ; var am_snipers , temp_list_2 ;
12953: GO 12955
12955: DISABLE
12956: LD_INT 0
12958: PPUSH
12959: PPUSH
12960: PPUSH
12961: PPUSH
12962: PPUSH
12963: PPUSH
12964: PPUSH
12965: PPUSH
12966: PPUSH
12967: PPUSH
12968: PPUSH
12969: PPUSH
12970: PPUSH
12971: PPUSH
// begin for base in ai_bases do
12972: LD_ADDR_VAR 0 7
12976: PUSH
12977: LD_EXP 59
12981: PUSH
12982: FOR_IN
12983: IFFALSE 14367
// begin side = GetBaseSide ( base ) ;
12985: LD_ADDR_VAR 0 1
12989: PUSH
12990: LD_VAR 0 7
12994: PPUSH
12995: CALL 12735 0 1
12999: ST_TO_ADDR
// soldiers_list = ai_soldiers [ base ] ;
13000: LD_ADDR_VAR 0 5
13004: PUSH
13005: LD_EXP 30
13009: PUSH
13010: LD_VAR 0 7
13014: ARRAY
13015: ST_TO_ADDR
// under_attack := BaseUnderAttack ( base , - 1 ) ;
13016: LD_ADDR_VAR 0 11
13020: PUSH
13021: LD_VAR 0 7
13025: PPUSH
13026: LD_INT 1
13028: NEG
13029: PPUSH
13030: CALL 23655 0 2
13034: ST_TO_ADDR
// if base = 1 and under_attack and game_phase > 1 then
13035: LD_VAR 0 7
13039: PUSH
13040: LD_INT 1
13042: EQUAL
13043: PUSH
13044: LD_VAR 0 11
13048: AND
13049: PUSH
13050: LD_EXP 89
13054: PUSH
13055: LD_INT 1
13057: GREATER
13058: AND
13059: IFFALSE 13094
// am_snipers = UnitFilter ( ai_soldiers [ base ] , [ f_class , class_sniper ] ) else
13061: LD_ADDR_VAR 0 13
13065: PUSH
13066: LD_EXP 30
13070: PUSH
13071: LD_VAR 0 7
13075: ARRAY
13076: PPUSH
13077: LD_INT 25
13079: PUSH
13080: LD_INT 5
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PPUSH
13087: CALL_OW 72
13091: ST_TO_ADDR
13092: GO 13101
// am_snipers = [ ] ;
13094: LD_ADDR_VAR 0 13
13098: PUSH
13099: EMPTY
13100: ST_TO_ADDR
// if under_attack then
13101: LD_VAR 0 11
13105: IFFALSE 13162
// begin temp_list = ai_heal_these_humans [ base ] diff ( soldiers_list diff am_snipers ) ;
13107: LD_ADDR_VAR 0 3
13111: PUSH
13112: LD_EXP 44
13116: PUSH
13117: LD_VAR 0 7
13121: ARRAY
13122: PUSH
13123: LD_VAR 0 5
13127: PUSH
13128: LD_VAR 0 13
13132: DIFF
13133: DIFF
13134: ST_TO_ADDR
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
13135: LD_ADDR_EXP 44
13139: PUSH
13140: LD_EXP 44
13144: PPUSH
13145: LD_VAR 0 7
13149: PPUSH
13150: LD_VAR 0 3
13154: PPUSH
13155: CALL_OW 1
13159: ST_TO_ADDR
// end else
13160: GO 13376
// begin temp_list = ai_heal_these_humans [ base ] ;
13162: LD_ADDR_VAR 0 3
13166: PUSH
13167: LD_EXP 44
13171: PUSH
13172: LD_VAR 0 7
13176: ARRAY
13177: ST_TO_ADDR
// for i in soldiers_list diff ai_heal_these_humans [ base ] do
13178: LD_ADDR_VAR 0 2
13182: PUSH
13183: LD_VAR 0 5
13187: PUSH
13188: LD_EXP 44
13192: PUSH
13193: LD_VAR 0 7
13197: ARRAY
13198: DIFF
13199: PUSH
13200: FOR_IN
13201: IFFALSE 13236
// if GetLives ( i ) < 800 then
13203: LD_VAR 0 2
13207: PPUSH
13208: CALL_OW 256
13212: PUSH
13213: LD_INT 800
13215: LESS
13216: IFFALSE 13234
// temp_list = temp_list ^ i ;
13218: LD_ADDR_VAR 0 3
13222: PUSH
13223: LD_VAR 0 3
13227: PUSH
13228: LD_VAR 0 2
13232: ADD
13233: ST_TO_ADDR
13234: GO 13200
13236: POP
13237: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
13238: LD_ADDR_EXP 44
13242: PUSH
13243: LD_EXP 44
13247: PPUSH
13248: LD_VAR 0 7
13252: PPUSH
13253: LD_VAR 0 3
13257: PPUSH
13258: CALL_OW 1
13262: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: LD_EXP 44
13272: PUSH
13273: LD_VAR 0 7
13277: ARRAY
13278: PUSH
13279: FOR_IN
13280: IFFALSE 13352
// if i in soldiers_list then
13282: LD_VAR 0 2
13286: PUSH
13287: LD_VAR 0 5
13291: IN
13292: IFFALSE 13350
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
13294: LD_VAR 0 2
13298: PPUSH
13299: CALL_OW 310
13303: PPUSH
13304: CALL_OW 247
13308: PUSH
13309: LD_INT 2
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13329
13317: POP
// ComExitVehicle ( i ) ; unit_building :
13318: LD_VAR 0 2
13322: PPUSH
13323: CALL_OW 121
13327: GO 13350
13329: LD_INT 3
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13349
13337: POP
// ComExitBuilding ( i ) ; end ;
13338: LD_VAR 0 2
13342: PPUSH
13343: CALL_OW 122
13347: GO 13350
13349: POP
13350: GO 13279
13352: POP
13353: POP
// soldiers_list = soldiers_list diff ai_heal_these_humans [ base ] ;
13354: LD_ADDR_VAR 0 5
13358: PUSH
13359: LD_VAR 0 5
13363: PUSH
13364: LD_EXP 44
13368: PUSH
13369: LD_VAR 0 7
13373: ARRAY
13374: DIFF
13375: ST_TO_ADDR
// end ; temp_list = ai_heal_these_humans [ base ] ;
13376: LD_ADDR_VAR 0 3
13380: PUSH
13381: LD_EXP 44
13385: PUSH
13386: LD_VAR 0 7
13390: ARRAY
13391: ST_TO_ADDR
// for i in am_snipers diff ai_heal_these_humans [ base ] do
13392: LD_ADDR_VAR 0 2
13396: PUSH
13397: LD_VAR 0 13
13401: PUSH
13402: LD_EXP 44
13406: PUSH
13407: LD_VAR 0 7
13411: ARRAY
13412: DIFF
13413: PUSH
13414: FOR_IN
13415: IFFALSE 13450
// if GetLives ( i ) <= 500 then
13417: LD_VAR 0 2
13421: PPUSH
13422: CALL_OW 256
13426: PUSH
13427: LD_INT 500
13429: LESSEQUAL
13430: IFFALSE 13448
// temp_list = temp_list ^ i ;
13432: LD_ADDR_VAR 0 3
13436: PUSH
13437: LD_VAR 0 3
13441: PUSH
13442: LD_VAR 0 2
13446: ADD
13447: ST_TO_ADDR
13448: GO 13414
13450: POP
13451: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
13452: LD_ADDR_EXP 44
13456: PUSH
13457: LD_EXP 44
13461: PPUSH
13462: LD_VAR 0 7
13466: PPUSH
13467: LD_VAR 0 3
13471: PPUSH
13472: CALL_OW 1
13476: ST_TO_ADDR
// am_snipers = am_snipers diff ai_heal_these_humans [ base ] ;
13477: LD_ADDR_VAR 0 13
13481: PUSH
13482: LD_VAR 0 13
13486: PUSH
13487: LD_EXP 44
13491: PUSH
13492: LD_VAR 0 7
13496: ARRAY
13497: DIFF
13498: ST_TO_ADDR
// if soldiers_list = 0 then
13499: LD_VAR 0 5
13503: PUSH
13504: LD_INT 0
13506: EQUAL
13507: IFFALSE 13511
// continue ;
13509: GO 12982
// if am_snipers > 0 then
13511: LD_VAR 0 13
13515: PUSH
13516: LD_INT 0
13518: GREATER
13519: IFFALSE 13636
// begin temp_list_2 = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_human ] , [ f_inarea , am_sniper_defend_area ] ] ) ;
13521: LD_ADDR_VAR 0 14
13525: PUSH
13526: LD_INT 81
13528: PUSH
13529: LD_VAR 0 1
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 21
13540: PUSH
13541: LD_INT 1
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 95
13550: PUSH
13551: LD_INT 12
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: PPUSH
13563: CALL_OW 69
13567: ST_TO_ADDR
// if temp_list_2 > 0 then
13568: LD_VAR 0 14
13572: PUSH
13573: LD_INT 0
13575: GREATER
13576: IFFALSE 13636
// begin soldiers_list = soldiers_list diff am_snipers ;
13578: LD_ADDR_VAR 0 5
13582: PUSH
13583: LD_VAR 0 5
13587: PUSH
13588: LD_VAR 0 13
13592: DIFF
13593: ST_TO_ADDR
// ComAgressiveMove ( GetHumansOutOfUnits ( am_snipers ) , GetX ( temp_list_2 [ 1 ] ) , GetY ( temp_list_2 [ 1 ] ) ) ;
13594: LD_VAR 0 13
13598: PPUSH
13599: CALL 23550 0 1
13603: PPUSH
13604: LD_VAR 0 14
13608: PUSH
13609: LD_INT 1
13611: ARRAY
13612: PPUSH
13613: CALL_OW 250
13617: PPUSH
13618: LD_VAR 0 14
13622: PUSH
13623: LD_INT 1
13625: ARRAY
13626: PPUSH
13627: CALL_OW 251
13631: PPUSH
13632: CALL_OW 114
// end ; end ; i = false ;
13636: LD_ADDR_VAR 0 2
13640: PUSH
13641: LD_INT 0
13643: ST_TO_ADDR
// if IsOk ( ai_depot [ base ] ) then
13644: LD_EXP 35
13648: PUSH
13649: LD_VAR 0 7
13653: ARRAY
13654: PPUSH
13655: CALL_OW 302
13659: IFFALSE 13699
// if GetEnergy ( GetBase ( ai_depot [ base ] ) ) [ 4 ] > 0 then
13661: LD_EXP 35
13665: PUSH
13666: LD_VAR 0 7
13670: ARRAY
13671: PPUSH
13672: CALL_OW 274
13676: PPUSH
13677: CALL_OW 278
13681: PUSH
13682: LD_INT 4
13684: ARRAY
13685: PUSH
13686: LD_INT 0
13688: GREATER
13689: IFFALSE 13699
// i = true ;
13691: LD_ADDR_VAR 0 2
13695: PUSH
13696: LD_INT 1
13698: ST_TO_ADDR
// if i then
13699: LD_VAR 0 2
13703: IFFALSE 13723
// bunkers = ai_bunkers [ base ] else
13705: LD_ADDR_VAR 0 10
13709: PUSH
13710: LD_EXP 50
13714: PUSH
13715: LD_VAR 0 7
13719: ARRAY
13720: ST_TO_ADDR
13721: GO 13784
// begin bunkers = [ ] ;
13723: LD_ADDR_VAR 0 10
13727: PUSH
13728: EMPTY
13729: ST_TO_ADDR
// for i in ai_bunkers [ base ] do
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_EXP 50
13739: PUSH
13740: LD_VAR 0 7
13744: ARRAY
13745: PUSH
13746: FOR_IN
13747: IFFALSE 13782
// if GetBType ( i ) = b_breastwork then
13749: LD_VAR 0 2
13753: PPUSH
13754: CALL_OW 266
13758: PUSH
13759: LD_INT 31
13761: EQUAL
13762: IFFALSE 13780
// bunkers = bunkers ^ i ;
13764: LD_ADDR_VAR 0 10
13768: PUSH
13769: LD_VAR 0 10
13773: PUSH
13774: LD_VAR 0 2
13778: ADD
13779: ST_TO_ADDR
13780: GO 13746
13782: POP
13783: POP
// end ; buildings_list = [ ] ;
13784: LD_ADDR_VAR 0 4
13788: PUSH
13789: EMPTY
13790: ST_TO_ADDR
// for i in UnitFilter ( bunkers , [ f_ok ] ) do
13791: LD_ADDR_VAR 0 2
13795: PUSH
13796: LD_VAR 0 10
13800: PPUSH
13801: LD_INT 50
13803: PUSH
13804: EMPTY
13805: LIST
13806: PPUSH
13807: CALL_OW 72
13811: PUSH
13812: FOR_IN
13813: IFFALSE 13876
// begin temp_unit = UnitsInside ( i ) ;
13815: LD_ADDR_VAR 0 6
13819: PUSH
13820: LD_VAR 0 2
13824: PPUSH
13825: CALL_OW 313
13829: ST_TO_ADDR
// if temp_unit = 0 then
13830: LD_VAR 0 6
13834: PUSH
13835: LD_INT 0
13837: EQUAL
13838: IFFALSE 13858
// buildings_list = buildings_list ^ i else
13840: LD_ADDR_VAR 0 4
13844: PUSH
13845: LD_VAR 0 4
13849: PUSH
13850: LD_VAR 0 2
13854: ADD
13855: ST_TO_ADDR
13856: GO 13874
// soldiers_list = soldiers_list diff temp_unit ;
13858: LD_ADDR_VAR 0 5
13862: PUSH
13863: LD_VAR 0 5
13867: PUSH
13868: LD_VAR 0 6
13872: DIFF
13873: ST_TO_ADDR
// end ;
13874: GO 13812
13876: POP
13877: POP
// soldiers_list = soldiers_list diff Gensher ;
13878: LD_ADDR_VAR 0 5
13882: PUSH
13883: LD_VAR 0 5
13887: PUSH
13888: LD_EXP 24
13892: DIFF
13893: ST_TO_ADDR
// if buildings_list > 0 then
13894: LD_VAR 0 4
13898: PUSH
13899: LD_INT 0
13901: GREATER
13902: IFFALSE 14247
// begin if not under_attack then
13904: LD_VAR 0 11
13908: NOT
13909: IFFALSE 13979
// begin temp_list = [ ] ;
13911: LD_ADDR_VAR 0 3
13915: PUSH
13916: EMPTY
13917: ST_TO_ADDR
// for i in soldiers_list do
13918: LD_ADDR_VAR 0 2
13922: PUSH
13923: LD_VAR 0 5
13927: PUSH
13928: FOR_IN
13929: IFFALSE 13957
// temp_list = temp_list ^ GetSkill ( i , skill_combat ) ;
13931: LD_ADDR_VAR 0 3
13935: PUSH
13936: LD_VAR 0 3
13940: PUSH
13941: LD_VAR 0 2
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 259
13953: ADD
13954: ST_TO_ADDR
13955: GO 13928
13957: POP
13958: POP
// soldiers_list = SortListByListDesc ( soldiers_list , temp_list ) ;
13959: LD_ADDR_VAR 0 5
13963: PUSH
13964: LD_VAR 0 5
13968: PPUSH
13969: LD_VAR 0 3
13973: PPUSH
13974: CALL_OW 77
13978: ST_TO_ADDR
// end ; special_units = UnitFilter ( soldiers_list , [ f_or , [ f_class , class_bazooker ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] ) ;
13979: LD_ADDR_VAR 0 9
13983: PUSH
13984: LD_VAR 0 5
13988: PPUSH
13989: LD_INT 2
13991: PUSH
13992: LD_INT 25
13994: PUSH
13995: LD_INT 9
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 25
14004: PUSH
14005: LD_INT 5
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 25
14014: PUSH
14015: LD_INT 8
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: PPUSH
14028: CALL_OW 72
14032: ST_TO_ADDR
// soldiers_list = soldiers_list diff special_units ;
14033: LD_ADDR_VAR 0 5
14037: PUSH
14038: LD_VAR 0 5
14042: PUSH
14043: LD_VAR 0 9
14047: DIFF
14048: ST_TO_ADDR
// for i = 1 to buildings_list do
14049: LD_ADDR_VAR 0 2
14053: PUSH
14054: DOUBLE
14055: LD_INT 1
14057: DEC
14058: ST_TO_ADDR
14059: LD_VAR 0 4
14063: PUSH
14064: FOR_TO
14065: IFFALSE 14243
// begin if soldiers_list = 0 then
14067: LD_VAR 0 5
14071: PUSH
14072: LD_INT 0
14074: EQUAL
14075: IFFALSE 14106
// begin if special_units = 0 then
14077: LD_VAR 0 9
14081: PUSH
14082: LD_INT 0
14084: EQUAL
14085: IFFALSE 14089
// break ;
14087: GO 14243
// soldiers_list = special_units ;
14089: LD_ADDR_VAR 0 5
14093: PUSH
14094: LD_VAR 0 9
14098: ST_TO_ADDR
// special_units = [ ] ;
14099: LD_ADDR_VAR 0 9
14103: PUSH
14104: EMPTY
14105: ST_TO_ADDR
// end ; if not under_attack then
14106: LD_VAR 0 11
14110: NOT
14111: IFFALSE 14129
// temp_unit = soldiers_list [ 1 ] else
14113: LD_ADDR_VAR 0 6
14117: PUSH
14118: LD_VAR 0 5
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: ST_TO_ADDR
14127: GO 14205
// begin temp_list = [ ] ;
14129: LD_ADDR_VAR 0 3
14133: PUSH
14134: EMPTY
14135: ST_TO_ADDR
// for j in soldiers_list do
14136: LD_ADDR_VAR 0 12
14140: PUSH
14141: LD_VAR 0 5
14145: PUSH
14146: FOR_IN
14147: IFFALSE 14183
// temp_list = temp_list ^ GetDistUnits ( j , buildings_list [ i ] ) ;
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_VAR 0 3
14158: PUSH
14159: LD_VAR 0 12
14163: PPUSH
14164: LD_VAR 0 4
14168: PUSH
14169: LD_VAR 0 2
14173: ARRAY
14174: PPUSH
14175: CALL_OW 296
14179: ADD
14180: ST_TO_ADDR
14181: GO 14146
14183: POP
14184: POP
// temp_unit = WorstFromListByList ( soldiers_list , temp_list ) ;
14185: LD_ADDR_VAR 0 6
14189: PUSH
14190: LD_VAR 0 5
14194: PPUSH
14195: LD_VAR 0 3
14199: PPUSH
14200: CALL_OW 78
14204: ST_TO_ADDR
// end ; ComEnterUnit ( temp_unit , buildings_list [ i ] ) ;
14205: LD_VAR 0 6
14209: PPUSH
14210: LD_VAR 0 4
14214: PUSH
14215: LD_VAR 0 2
14219: ARRAY
14220: PPUSH
14221: CALL_OW 120
// soldiers_list = soldiers_list diff temp_unit ;
14225: LD_ADDR_VAR 0 5
14229: PUSH
14230: LD_VAR 0 5
14234: PUSH
14235: LD_VAR 0 6
14239: DIFF
14240: ST_TO_ADDR
// end ;
14241: GO 14064
14243: POP
14244: POP
// end else
14245: GO 14254
// special_units = [ ] ;
14247: LD_ADDR_VAR 0 9
14251: PUSH
14252: EMPTY
14253: ST_TO_ADDR
// if base = 2 then
14254: LD_VAR 0 7
14258: PUSH
14259: LD_INT 2
14261: EQUAL
14262: IFFALSE 14294
// soldiers_list = soldiers_list ^ UnitFilter ( [ Gensher ] , [ f_alive ] ) ;
14264: LD_ADDR_VAR 0 5
14268: PUSH
14269: LD_VAR 0 5
14273: PUSH
14274: LD_EXP 24
14278: PUSH
14279: EMPTY
14280: LIST
14281: PPUSH
14282: LD_INT 51
14284: PUSH
14285: EMPTY
14286: LIST
14287: PPUSH
14288: CALL_OW 72
14292: ADD
14293: ST_TO_ADDR
// DistributeHumansToBuildings ( base , soldiers_list ^ special_units , UnitFilter ( ai_armouries [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , false , 6 , true , true ) ;
14294: LD_VAR 0 7
14298: PPUSH
14299: LD_VAR 0 5
14303: PUSH
14304: LD_VAR 0 9
14308: ADD
14309: PPUSH
14310: LD_EXP 49
14314: PUSH
14315: LD_VAR 0 7
14319: ARRAY
14320: PPUSH
14321: LD_INT 50
14323: PUSH
14324: EMPTY
14325: LIST
14326: PUSH
14327: LD_INT 3
14329: PUSH
14330: LD_INT 57
14332: PUSH
14333: EMPTY
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PPUSH
14344: CALL_OW 72
14348: PPUSH
14349: LD_INT 0
14351: PPUSH
14352: LD_INT 6
14354: PPUSH
14355: LD_INT 1
14357: PPUSH
14358: LD_INT 1
14360: PPUSH
14361: CALL 15621 0 7
// end ;
14365: GO 12982
14367: POP
14368: POP
// enable ;
14369: ENABLE
// end ;
14370: PPOPN 14
14372: END
// every 0 0$1 + 0 0$0.1 do var side , base , i , temp_list , un1 , temp_list_2 , temp_value , val ;
14373: GO 14375
14375: DISABLE
14376: LD_INT 0
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
14384: PPUSH
14385: PPUSH
// begin repeat wait ( 0 0$1 ) ;
14386: LD_INT 35
14388: PPUSH
14389: CALL_OW 67
// for base in ai_bases do
14393: LD_ADDR_VAR 0 2
14397: PUSH
14398: LD_EXP 59
14402: PUSH
14403: FOR_IN
14404: IFFALSE 14855
// begin if base in [ 1 , 2 ] then
14406: LD_VAR 0 2
14410: PUSH
14411: LD_INT 1
14413: PUSH
14414: LD_INT 2
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: IN
14421: IFFALSE 14425
// continue ;
14423: GO 14403
// side = GetBaseSide ( base ) ;
14425: LD_ADDR_VAR 0 1
14429: PUSH
14430: LD_VAR 0 2
14434: PPUSH
14435: CALL 12735 0 1
14439: ST_TO_ADDR
// for i in ai_soldiers [ base ] diff ai_heal_these_humans [ base ] do
14440: LD_ADDR_VAR 0 3
14444: PUSH
14445: LD_EXP 30
14449: PUSH
14450: LD_VAR 0 2
14454: ARRAY
14455: PUSH
14456: LD_EXP 44
14460: PUSH
14461: LD_VAR 0 2
14465: ARRAY
14466: DIFF
14467: PUSH
14468: FOR_IN
14469: IFFALSE 14851
// if GetClass ( i ) = class_bazooker then
14471: LD_VAR 0 3
14475: PPUSH
14476: CALL_OW 257
14480: PUSH
14481: LD_INT 9
14483: EQUAL
14484: IFFALSE 14849
// begin temp_list = GetTaskList ( i ) ;
14486: LD_ADDR_VAR 0 4
14490: PUSH
14491: LD_VAR 0 3
14495: PPUSH
14496: CALL_OW 437
14500: ST_TO_ADDR
// if temp_list > 0 then
14501: LD_VAR 0 4
14505: PUSH
14506: LD_INT 0
14508: GREATER
14509: IFFALSE 14549
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
14511: LD_VAR 0 4
14515: PUSH
14516: LD_INT 1
14518: ARRAY
14519: PUSH
14520: LD_INT 1
14522: ARRAY
14523: PUSH
14524: LD_STRING &
14526: EQUAL
14527: PUSH
14528: LD_VAR 0 4
14532: PUSH
14533: LD_INT 1
14535: ARRAY
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PUSH
14541: LD_STRING %
14543: EQUAL
14544: OR
14545: IFFALSE 14549
// continue ;
14547: GO 14468
// un1 = Attacks ( i ) ;
14549: LD_ADDR_VAR 0 5
14553: PUSH
14554: LD_VAR 0 3
14558: PPUSH
14559: CALL_OW 320
14563: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
14564: LD_VAR 0 5
14568: PUSH
14569: LD_INT 0
14571: GREATER
14572: PUSH
14573: LD_VAR 0 5
14577: PUSH
14578: EMPTY
14579: LIST
14580: PPUSH
14581: CALL 41003 0 1
14585: PUSH
14586: LD_INT 0
14588: GREATER
14589: AND
14590: IFFALSE 14849
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
14592: LD_ADDR_VAR 0 6
14596: PUSH
14597: LD_VAR 0 5
14601: PPUSH
14602: CALL_OW 250
14606: PUSH
14607: LD_VAR 0 5
14611: PPUSH
14612: CALL_OW 251
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: ST_TO_ADDR
// temp_value = false ;
14621: LD_ADDR_VAR 0 7
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
14629: LD_ADDR_VAR 0 8
14633: PUSH
14634: LD_EXP 73
14638: PUSH
14639: LD_VAR 0 2
14643: ARRAY
14644: PUSH
14645: LD_EXP 74
14649: PUSH
14650: LD_VAR 0 2
14654: ARRAY
14655: ADD
14656: PUSH
14657: FOR_IN
14658: IFFALSE 14730
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
14660: LD_VAR 0 6
14664: PUSH
14665: LD_INT 1
14667: ARRAY
14668: PPUSH
14669: LD_VAR 0 6
14673: PUSH
14674: LD_INT 2
14676: ARRAY
14677: PPUSH
14678: LD_VAR 0 8
14682: PUSH
14683: LD_INT 1
14685: ARRAY
14686: PPUSH
14687: LD_VAR 0 8
14691: PUSH
14692: LD_INT 2
14694: ARRAY
14695: PPUSH
14696: CALL_OW 298
14700: PUSH
14701: LD_EXP 72
14705: PUSH
14706: LD_VAR 0 1
14710: ARRAY
14711: PUSH
14712: LD_INT 2
14714: ARRAY
14715: LESSEQUAL
14716: IFFALSE 14728
// begin temp_value = true ;
14718: LD_ADDR_VAR 0 7
14722: PUSH
14723: LD_INT 1
14725: ST_TO_ADDR
// break ;
14726: GO 14730
// end ;
14728: GO 14657
14730: POP
14731: POP
// if not temp_value then
14732: LD_VAR 0 7
14736: NOT
14737: IFFALSE 14849
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
14739: LD_VAR 0 3
14743: PPUSH
14744: LD_VAR 0 6
14748: PUSH
14749: LD_INT 1
14751: ARRAY
14752: PPUSH
14753: LD_VAR 0 6
14757: PUSH
14758: LD_INT 2
14760: ARRAY
14761: PPUSH
14762: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
14766: LD_ADDR_VAR 0 4
14770: PUSH
14771: LD_EXP 74
14775: PUSH
14776: LD_VAR 0 2
14780: ARRAY
14781: PPUSH
14782: LD_INT 1
14784: PPUSH
14785: LD_VAR 0 6
14789: PUSH
14790: LD_INT 1
14792: ARRAY
14793: PUSH
14794: LD_VAR 0 6
14798: PUSH
14799: LD_INT 2
14801: ARRAY
14802: PUSH
14803: LD_VAR 0 3
14807: PUSH
14808: LD_OWVAR 1
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: PPUSH
14819: CALL_OW 2
14823: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
14824: LD_ADDR_EXP 74
14828: PUSH
14829: LD_EXP 74
14833: PPUSH
14834: LD_VAR 0 2
14838: PPUSH
14839: LD_VAR 0 4
14843: PPUSH
14844: CALL_OW 1
14848: ST_TO_ADDR
// end ; end ; end ;
14849: GO 14468
14851: POP
14852: POP
// end ;
14853: GO 14403
14855: POP
14856: POP
// until false ;
14857: LD_INT 0
14859: IFFALSE 14386
// end ;
14861: PPOPN 8
14863: END
// every 0 0$1 + 0 0$0.2 do var base , i , temp_list , un1 , temp_list_2 , temp_value ; var shooting_delay ;
14864: GO 14866
14866: DISABLE
14867: LD_INT 0
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
14873: PPUSH
14874: PPUSH
14875: PPUSH
// begin shooting_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
14876: LD_ADDR_VAR 0 7
14880: PUSH
14881: LD_INT 0
14883: PUSH
14884: LD_INT 0
14886: PUSH
14887: LD_INT 0
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: ST_TO_ADDR
// if not yashin_alive then
14895: LD_EXP 86
14899: NOT
14900: IFFALSE 14904
// exit ;
14902: GO 15400
// repeat wait ( 0 0$1 ) ;
14904: LD_INT 35
14906: PPUSH
14907: CALL_OW 67
// for base in ai_bases do
14911: LD_ADDR_VAR 0 1
14915: PUSH
14916: LD_EXP 59
14920: PUSH
14921: FOR_IN
14922: IFFALSE 15394
// begin if base in [ 1 , 2 ] then
14924: LD_VAR 0 1
14928: PUSH
14929: LD_INT 1
14931: PUSH
14932: LD_INT 2
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: IN
14939: IFFALSE 14943
// continue ;
14941: GO 14921
// if shooting_delay [ base ] > 0 0$0 then
14943: LD_VAR 0 7
14947: PUSH
14948: LD_VAR 0 1
14952: ARRAY
14953: PUSH
14954: LD_INT 0
14956: GREATER
14957: IFFALSE 14996
// begin shooting_delay = Replace ( shooting_delay , base , shooting_delay [ base ] - 0 0$1 ) ;
14959: LD_ADDR_VAR 0 7
14963: PUSH
14964: LD_VAR 0 7
14968: PPUSH
14969: LD_VAR 0 1
14973: PPUSH
14974: LD_VAR 0 7
14978: PUSH
14979: LD_VAR 0 1
14983: ARRAY
14984: PUSH
14985: LD_INT 35
14987: MINUS
14988: PPUSH
14989: CALL_OW 1
14993: ST_TO_ADDR
// continue ;
14994: GO 14921
// end ; if Rand ( 1 , 15 ) > 1 then
14996: LD_INT 1
14998: PPUSH
14999: LD_INT 15
15001: PPUSH
15002: CALL_OW 12
15006: PUSH
15007: LD_INT 1
15009: GREATER
15010: IFFALSE 15014
// continue ;
15012: GO 14921
// temp_list = [ ] ;
15014: LD_ADDR_VAR 0 3
15018: PUSH
15019: EMPTY
15020: ST_TO_ADDR
// for i in ai_soldiers [ base ] diff ai_heal_these_humans [ base ] do
15021: LD_ADDR_VAR 0 2
15025: PUSH
15026: LD_EXP 30
15030: PUSH
15031: LD_VAR 0 1
15035: ARRAY
15036: PUSH
15037: LD_EXP 44
15041: PUSH
15042: LD_VAR 0 1
15046: ARRAY
15047: DIFF
15048: PUSH
15049: FOR_IN
15050: IFFALSE 15093
// if IsInUnit ( i ) in ai_armouries [ base ] then
15052: LD_VAR 0 2
15056: PPUSH
15057: CALL_OW 310
15061: PUSH
15062: LD_EXP 49
15066: PUSH
15067: LD_VAR 0 1
15071: ARRAY
15072: IN
15073: IFFALSE 15091
// temp_list = temp_list ^ i ;
15075: LD_ADDR_VAR 0 3
15079: PUSH
15080: LD_VAR 0 3
15084: PUSH
15085: LD_VAR 0 2
15089: ADD
15090: ST_TO_ADDR
15091: GO 15049
15093: POP
15094: POP
// for i in temp_list do
15095: LD_ADDR_VAR 0 2
15099: PUSH
15100: LD_VAR 0 3
15104: PUSH
15105: FOR_IN
15106: IFFALSE 15390
// if GetClass ( i ) = class_bazooker then
15108: LD_VAR 0 2
15112: PPUSH
15113: CALL_OW 257
15117: PUSH
15118: LD_INT 9
15120: EQUAL
15121: IFFALSE 15388
// begin temp_list = GetTaskList ( i ) ;
15123: LD_ADDR_VAR 0 3
15127: PUSH
15128: LD_VAR 0 2
15132: PPUSH
15133: CALL_OW 437
15137: ST_TO_ADDR
// if temp_list > 0 then
15138: LD_VAR 0 3
15142: PUSH
15143: LD_INT 0
15145: GREATER
15146: IFFALSE 15186
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
15148: LD_VAR 0 3
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PUSH
15157: LD_INT 1
15159: ARRAY
15160: PUSH
15161: LD_STRING &
15163: EQUAL
15164: PUSH
15165: LD_VAR 0 3
15169: PUSH
15170: LD_INT 1
15172: ARRAY
15173: PUSH
15174: LD_INT 1
15176: ARRAY
15177: PUSH
15178: LD_STRING %
15180: EQUAL
15181: OR
15182: IFFALSE 15186
// continue ;
15184: GO 15105
// un1 = Attacks ( i ) ;
15186: LD_ADDR_VAR 0 4
15190: PUSH
15191: LD_VAR 0 2
15195: PPUSH
15196: CALL_OW 320
15200: ST_TO_ADDR
// if un1 > 0 and not IsInArea ( un1 , GetBaseArea ( base ) ) then
15201: LD_VAR 0 4
15205: PUSH
15206: LD_INT 0
15208: GREATER
15209: PUSH
15210: LD_VAR 0 4
15214: PPUSH
15215: LD_VAR 0 1
15219: PPUSH
15220: CALL 12664 0 1
15224: PPUSH
15225: CALL_OW 308
15229: NOT
15230: AND
15231: IFFALSE 15388
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
15233: LD_ADDR_VAR 0 5
15237: PUSH
15238: LD_VAR 0 4
15242: PPUSH
15243: CALL_OW 250
15247: PUSH
15248: LD_VAR 0 4
15252: PPUSH
15253: CALL_OW 251
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: ST_TO_ADDR
// temp_value = AI_GetTurnDirection ( GetX ( i ) , GetY ( i ) , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
15262: LD_ADDR_VAR 0 6
15266: PUSH
15267: LD_VAR 0 2
15271: PPUSH
15272: CALL_OW 250
15276: PPUSH
15277: LD_VAR 0 2
15281: PPUSH
15282: CALL_OW 251
15286: PPUSH
15287: LD_VAR 0 5
15291: PUSH
15292: LD_INT 1
15294: ARRAY
15295: PPUSH
15296: LD_VAR 0 5
15300: PUSH
15301: LD_INT 2
15303: ARRAY
15304: PPUSH
15305: CALL 15403 0 4
15309: ST_TO_ADDR
// ComSpaceShift ( i , ShiftX ( temp_list_2 [ 1 ] , temp_value , 1 ) , ShiftY ( temp_list_2 [ 2 ] , temp_value , 1 ) ) ;
15310: LD_VAR 0 2
15314: PPUSH
15315: LD_VAR 0 5
15319: PUSH
15320: LD_INT 1
15322: ARRAY
15323: PPUSH
15324: LD_VAR 0 6
15328: PPUSH
15329: LD_INT 1
15331: PPUSH
15332: CALL_OW 272
15336: PPUSH
15337: LD_VAR 0 5
15341: PUSH
15342: LD_INT 2
15344: ARRAY
15345: PPUSH
15346: LD_VAR 0 6
15350: PPUSH
15351: LD_INT 1
15353: PPUSH
15354: CALL_OW 273
15358: PPUSH
15359: CALL_OW 153
// shooting_delay = Replace ( shooting_delay , base , 0 0$5 ) ;
15363: LD_ADDR_VAR 0 7
15367: PUSH
15368: LD_VAR 0 7
15372: PPUSH
15373: LD_VAR 0 1
15377: PPUSH
15378: LD_INT 175
15380: PPUSH
15381: CALL_OW 1
15385: ST_TO_ADDR
// break ;
15386: GO 15390
// end ; end ;
15388: GO 15105
15390: POP
15391: POP
// end ;
15392: GO 14921
15394: POP
15395: POP
// until false ;
15396: LD_INT 0
15398: IFFALSE 14904
// end ;
15400: PPOPN 7
15402: END
// function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
15403: LD_INT 0
15405: PPUSH
15406: PPUSH
15407: PPUSH
15408: PPUSH
15409: PPUSH
15410: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
15411: LD_VAR 0 1
15415: PPUSH
15416: LD_VAR 0 2
15420: PPUSH
15421: CALL_OW 488
15425: NOT
15426: PUSH
15427: LD_VAR 0 3
15431: PPUSH
15432: LD_VAR 0 4
15436: PPUSH
15437: CALL_OW 488
15441: NOT
15442: OR
15443: IFFALSE 15456
// begin result = - 1 ;
15445: LD_ADDR_VAR 0 5
15449: PUSH
15450: LD_INT 1
15452: NEG
15453: ST_TO_ADDR
// exit ;
15454: GO 15616
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
15456: LD_ADDR_VAR 0 6
15460: PUSH
15461: LD_VAR 0 1
15465: PPUSH
15466: LD_VAR 0 2
15470: PPUSH
15471: LD_VAR 0 3
15475: PPUSH
15476: LD_VAR 0 4
15480: PPUSH
15481: CALL_OW 298
15485: ST_TO_ADDR
// dist_2 = 99999 ;
15486: LD_ADDR_VAR 0 7
15490: PUSH
15491: LD_INT 99999
15493: ST_TO_ADDR
// for b = 0 to 5 do
15494: LD_ADDR_VAR 0 8
15498: PUSH
15499: DOUBLE
15500: LD_INT 0
15502: DEC
15503: ST_TO_ADDR
15504: LD_INT 5
15506: PUSH
15507: FOR_TO
15508: IFFALSE 15604
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
15510: LD_ADDR_VAR 0 9
15514: PUSH
15515: LD_VAR 0 1
15519: PPUSH
15520: LD_VAR 0 8
15524: PPUSH
15525: LD_VAR 0 6
15529: PPUSH
15530: CALL_OW 272
15534: PPUSH
15535: LD_VAR 0 2
15539: PPUSH
15540: LD_VAR 0 8
15544: PPUSH
15545: LD_VAR 0 6
15549: PPUSH
15550: CALL_OW 273
15554: PPUSH
15555: LD_VAR 0 3
15559: PPUSH
15560: LD_VAR 0 4
15564: PPUSH
15565: CALL_OW 298
15569: ST_TO_ADDR
// if temp_dist < dist_2 then
15570: LD_VAR 0 9
15574: PUSH
15575: LD_VAR 0 7
15579: LESS
15580: IFFALSE 15602
// begin dist_2 = temp_dist ;
15582: LD_ADDR_VAR 0 7
15586: PUSH
15587: LD_VAR 0 9
15591: ST_TO_ADDR
// dir = b ;
15592: LD_ADDR_VAR 0 10
15596: PUSH
15597: LD_VAR 0 8
15601: ST_TO_ADDR
// end ; end ;
15602: GO 15507
15604: POP
15605: POP
// result = dir ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_VAR 0 10
15615: ST_TO_ADDR
// end ;
15616: LD_VAR 0 5
15620: RET
// function DistributeHumansToBuildings ( base , human_list , building_list , change_to_this_class , building_capacity , help_building , aggressive_pullback ) ; var i , temp_list , val , temp_unit , area , special_un_count , counter , k , under_attack ; begin
15621: LD_INT 0
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
15628: PPUSH
15629: PPUSH
15630: PPUSH
15631: PPUSH
15632: PPUSH
// if human_list = 0 then
15633: LD_VAR 0 2
15637: PUSH
15638: LD_INT 0
15640: EQUAL
15641: IFFALSE 15645
// exit ;
15643: GO 16923
// area = GetBaseArea ( base ) ;
15645: LD_ADDR_VAR 0 13
15649: PUSH
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL 12664 0 1
15659: ST_TO_ADDR
// under_attack = BaseUnderAttack ( base , - 1 ) ;
15660: LD_ADDR_VAR 0 17
15664: PUSH
15665: LD_VAR 0 1
15669: PPUSH
15670: LD_INT 1
15672: NEG
15673: PPUSH
15674: CALL 23655 0 2
15678: ST_TO_ADDR
// if not GetClass ( human_list [ 1 ] ) in [ class_engineer , class_apeman_engineer , class_mechanic , class_scientistic ] and building_list > 0 then
15679: LD_VAR 0 2
15683: PUSH
15684: LD_INT 1
15686: ARRAY
15687: PPUSH
15688: CALL_OW 257
15692: PUSH
15693: LD_INT 2
15695: PUSH
15696: LD_INT 16
15698: PUSH
15699: LD_INT 3
15701: PUSH
15702: LD_INT 4
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: IN
15711: NOT
15712: PUSH
15713: LD_VAR 0 3
15717: PUSH
15718: LD_INT 0
15720: GREATER
15721: AND
15722: IFFALSE 15811
// begin val = 0 ;
15724: LD_ADDR_VAR 0 11
15728: PUSH
15729: LD_INT 0
15731: ST_TO_ADDR
// for i in human_list do
15732: LD_ADDR_VAR 0 9
15736: PUSH
15737: LD_VAR 0 2
15741: PUSH
15742: FOR_IN
15743: IFFALSE 15787
// if GetClass ( i ) in [ class_sniper , class_mortar , class_bazooker ] then
15745: LD_VAR 0 9
15749: PPUSH
15750: CALL_OW 257
15754: PUSH
15755: LD_INT 5
15757: PUSH
15758: LD_INT 8
15760: PUSH
15761: LD_INT 9
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: IN
15769: IFFALSE 15785
// val = val + 1 ;
15771: LD_ADDR_VAR 0 11
15775: PUSH
15776: LD_VAR 0 11
15780: PUSH
15781: LD_INT 1
15783: PLUS
15784: ST_TO_ADDR
15785: GO 15742
15787: POP
15788: POP
// special_un_count = val div ( building_list + 0 ) ;
15789: LD_ADDR_VAR 0 14
15793: PUSH
15794: LD_VAR 0 11
15798: PUSH
15799: LD_VAR 0 3
15803: PUSH
15804: LD_INT 0
15806: PLUS
15807: DIV
15808: ST_TO_ADDR
// end else
15809: GO 15819
// special_un_count = 0 ;
15811: LD_ADDR_VAR 0 14
15815: PUSH
15816: LD_INT 0
15818: ST_TO_ADDR
// val = building_list + 0 ;
15819: LD_ADDR_VAR 0 11
15823: PUSH
15824: LD_VAR 0 3
15828: PUSH
15829: LD_INT 0
15831: PLUS
15832: ST_TO_ADDR
// while val > 0 and human_list > 0 do
15833: LD_VAR 0 11
15837: PUSH
15838: LD_INT 0
15840: GREATER
15841: PUSH
15842: LD_VAR 0 2
15846: PUSH
15847: LD_INT 0
15849: GREATER
15850: AND
15851: IFFALSE 16657
// begin temp_list = [ ] ;
15853: LD_ADDR_VAR 0 10
15857: PUSH
15858: EMPTY
15859: ST_TO_ADDR
// for i in human_list do
15860: LD_ADDR_VAR 0 9
15864: PUSH
15865: LD_VAR 0 2
15869: PUSH
15870: FOR_IN
15871: IFFALSE 15914
// if IsInUnit ( i ) = building_list [ val ] then
15873: LD_VAR 0 9
15877: PPUSH
15878: CALL_OW 310
15882: PUSH
15883: LD_VAR 0 3
15887: PUSH
15888: LD_VAR 0 11
15892: ARRAY
15893: EQUAL
15894: IFFALSE 15912
// temp_list = temp_list ^ i ;
15896: LD_ADDR_VAR 0 10
15900: PUSH
15901: LD_VAR 0 10
15905: PUSH
15906: LD_VAR 0 9
15910: ADD
15911: ST_TO_ADDR
15912: GO 15870
15914: POP
15915: POP
// human_list = temp_list ^ ( human_list diff temp_list ) ;
15916: LD_ADDR_VAR 0 2
15920: PUSH
15921: LD_VAR 0 10
15925: PUSH
15926: LD_VAR 0 2
15930: PUSH
15931: LD_VAR 0 10
15935: DIFF
15936: ADD
15937: ST_TO_ADDR
// counter = 0 ;
15938: LD_ADDR_VAR 0 15
15942: PUSH
15943: LD_INT 0
15945: ST_TO_ADDR
// temp_list = [ ] ;
15946: LD_ADDR_VAR 0 10
15950: PUSH
15951: EMPTY
15952: ST_TO_ADDR
// for i = 1 to human_list div val do
15953: LD_ADDR_VAR 0 9
15957: PUSH
15958: DOUBLE
15959: LD_INT 1
15961: DEC
15962: ST_TO_ADDR
15963: LD_VAR 0 2
15967: PUSH
15968: LD_VAR 0 11
15972: DIV
15973: PUSH
15974: FOR_TO
15975: IFFALSE 16340
// begin if i > building_capacity then
15977: LD_VAR 0 9
15981: PUSH
15982: LD_VAR 0 5
15986: GREATER
15987: IFFALSE 15991
// break ;
15989: GO 16340
// if special_un_count = 0 then
15991: LD_VAR 0 14
15995: PUSH
15996: LD_INT 0
15998: EQUAL
15999: IFFALSE 16041
// begin temp_list = temp_list ^ human_list [ 1 ] ;
16001: LD_ADDR_VAR 0 10
16005: PUSH
16006: LD_VAR 0 10
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: LD_INT 1
16018: ARRAY
16019: ADD
16020: ST_TO_ADDR
// human_list = Delete ( human_list , 1 ) ;
16021: LD_ADDR_VAR 0 2
16025: PUSH
16026: LD_VAR 0 2
16030: PPUSH
16031: LD_INT 1
16033: PPUSH
16034: CALL_OW 3
16038: ST_TO_ADDR
// end else
16039: GO 16338
// if counter = special_un_count then
16041: LD_VAR 0 15
16045: PUSH
16046: LD_VAR 0 14
16050: EQUAL
16051: IFFALSE 16190
// begin temp_unit = 0 ;
16053: LD_ADDR_VAR 0 12
16057: PUSH
16058: LD_INT 0
16060: ST_TO_ADDR
// for k = 1 to human_list do
16061: LD_ADDR_VAR 0 16
16065: PUSH
16066: DOUBLE
16067: LD_INT 1
16069: DEC
16070: ST_TO_ADDR
16071: LD_VAR 0 2
16075: PUSH
16076: FOR_TO
16077: IFFALSE 16126
// if not GetClass ( human_list [ k ] ) in [ class_sniper , class_mortar , class_bazooker ] then
16079: LD_VAR 0 2
16083: PUSH
16084: LD_VAR 0 16
16088: ARRAY
16089: PPUSH
16090: CALL_OW 257
16094: PUSH
16095: LD_INT 5
16097: PUSH
16098: LD_INT 8
16100: PUSH
16101: LD_INT 9
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: LIST
16108: IN
16109: NOT
16110: IFFALSE 16124
// begin temp_unit = k ;
16112: LD_ADDR_VAR 0 12
16116: PUSH
16117: LD_VAR 0 16
16121: ST_TO_ADDR
// break ;
16122: GO 16126
// end ;
16124: GO 16076
16126: POP
16127: POP
// if temp_unit = 0 then
16128: LD_VAR 0 12
16132: PUSH
16133: LD_INT 0
16135: EQUAL
16136: IFFALSE 16146
// temp_unit = 1 ;
16138: LD_ADDR_VAR 0 12
16142: PUSH
16143: LD_INT 1
16145: ST_TO_ADDR
// temp_list = temp_list ^ human_list [ temp_unit ] ;
16146: LD_ADDR_VAR 0 10
16150: PUSH
16151: LD_VAR 0 10
16155: PUSH
16156: LD_VAR 0 2
16160: PUSH
16161: LD_VAR 0 12
16165: ARRAY
16166: ADD
16167: ST_TO_ADDR
// human_list = Delete ( human_list , temp_unit ) ;
16168: LD_ADDR_VAR 0 2
16172: PUSH
16173: LD_VAR 0 2
16177: PPUSH
16178: LD_VAR 0 12
16182: PPUSH
16183: CALL_OW 3
16187: ST_TO_ADDR
// end else
16188: GO 16338
// begin counter = counter + 1 ;
16190: LD_ADDR_VAR 0 15
16194: PUSH
16195: LD_VAR 0 15
16199: PUSH
16200: LD_INT 1
16202: PLUS
16203: ST_TO_ADDR
// temp_unit = 0 ;
16204: LD_ADDR_VAR 0 12
16208: PUSH
16209: LD_INT 0
16211: ST_TO_ADDR
// for k = 1 to human_list do
16212: LD_ADDR_VAR 0 16
16216: PUSH
16217: DOUBLE
16218: LD_INT 1
16220: DEC
16221: ST_TO_ADDR
16222: LD_VAR 0 2
16226: PUSH
16227: FOR_TO
16228: IFFALSE 16276
// if GetClass ( human_list [ k ] ) in [ class_sniper , class_mortar , class_bazooker ] then
16230: LD_VAR 0 2
16234: PUSH
16235: LD_VAR 0 16
16239: ARRAY
16240: PPUSH
16241: CALL_OW 257
16245: PUSH
16246: LD_INT 5
16248: PUSH
16249: LD_INT 8
16251: PUSH
16252: LD_INT 9
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: LIST
16259: IN
16260: IFFALSE 16274
// begin temp_unit = k ;
16262: LD_ADDR_VAR 0 12
16266: PUSH
16267: LD_VAR 0 16
16271: ST_TO_ADDR
// break ;
16272: GO 16276
// end ;
16274: GO 16227
16276: POP
16277: POP
// if temp_unit = 0 then
16278: LD_VAR 0 12
16282: PUSH
16283: LD_INT 0
16285: EQUAL
16286: IFFALSE 16296
// temp_unit = 1 ;
16288: LD_ADDR_VAR 0 12
16292: PUSH
16293: LD_INT 1
16295: ST_TO_ADDR
// temp_list = temp_list ^ human_list [ temp_unit ] ;
16296: LD_ADDR_VAR 0 10
16300: PUSH
16301: LD_VAR 0 10
16305: PUSH
16306: LD_VAR 0 2
16310: PUSH
16311: LD_VAR 0 12
16315: ARRAY
16316: ADD
16317: ST_TO_ADDR
// human_list = Delete ( human_list , temp_unit ) ;
16318: LD_ADDR_VAR 0 2
16322: PUSH
16323: LD_VAR 0 2
16327: PPUSH
16328: LD_VAR 0 12
16332: PPUSH
16333: CALL_OW 3
16337: ST_TO_ADDR
// end ; end ;
16338: GO 15974
16340: POP
16341: POP
// for i in temp_list do
16342: LD_ADDR_VAR 0 9
16346: PUSH
16347: LD_VAR 0 10
16351: PUSH
16352: FOR_IN
16353: IFFALSE 16639
// begin temp_unit = IsInUnit ( i ) ;
16355: LD_ADDR_VAR 0 12
16359: PUSH
16360: LD_VAR 0 9
16364: PPUSH
16365: CALL_OW 310
16369: ST_TO_ADDR
// if temp_unit <> building_list [ val ] then
16370: LD_VAR 0 12
16374: PUSH
16375: LD_VAR 0 3
16379: PUSH
16380: LD_VAR 0 11
16384: ARRAY
16385: NONEQUAL
16386: IFFALSE 16637
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
16388: LD_VAR 0 9
16392: PPUSH
16393: CALL_OW 310
16397: PPUSH
16398: CALL_OW 247
16402: PUSH
16403: LD_INT 2
16405: DOUBLE
16406: EQUAL
16407: IFTRUE 16411
16409: GO 16423
16411: POP
// ComExitVehicle ( i ) ; unit_building :
16412: LD_VAR 0 9
16416: PPUSH
16417: CALL_OW 121
16421: GO 16637
16423: LD_INT 3
16425: DOUBLE
16426: EQUAL
16427: IFTRUE 16431
16429: GO 16443
16431: POP
// ComExitBuilding ( i ) ; else
16432: LD_VAR 0 9
16436: PPUSH
16437: CALL_OW 122
16441: GO 16637
16443: POP
// begin if IsInArea ( i , area ) or not aggressive_pullback then
16444: LD_VAR 0 9
16448: PPUSH
16449: LD_VAR 0 13
16453: PPUSH
16454: CALL_OW 308
16458: PUSH
16459: LD_VAR 0 7
16463: NOT
16464: OR
16465: IFFALSE 16489
// ComEnterUnit ( i , building_list [ val ] ) else
16467: LD_VAR 0 9
16471: PPUSH
16472: LD_VAR 0 3
16476: PUSH
16477: LD_VAR 0 11
16481: ARRAY
16482: PPUSH
16483: CALL_OW 120
16487: GO 16530
// ComAgressiveMove ( i , GetX ( building_list [ val ] ) , GetY ( building_list [ val ] ) ) ;
16489: LD_VAR 0 9
16493: PPUSH
16494: LD_VAR 0 3
16498: PUSH
16499: LD_VAR 0 11
16503: ARRAY
16504: PPUSH
16505: CALL_OW 250
16509: PPUSH
16510: LD_VAR 0 3
16514: PUSH
16515: LD_VAR 0 11
16519: ARRAY
16520: PPUSH
16521: CALL_OW 251
16525: PPUSH
16526: CALL_OW 114
// if change_to_this_class > 0 then
16530: LD_VAR 0 4
16534: PUSH
16535: LD_INT 0
16537: GREATER
16538: IFFALSE 16637
// begin if GetClass ( i ) <> change_to_this_class and GetNation ( i ) <> nation_nature then
16540: LD_VAR 0 9
16544: PPUSH
16545: CALL_OW 257
16549: PUSH
16550: LD_VAR 0 4
16554: NONEQUAL
16555: PUSH
16556: LD_VAR 0 9
16560: PPUSH
16561: CALL_OW 248
16565: PUSH
16566: LD_INT 0
16568: NONEQUAL
16569: AND
16570: IFFALSE 16637
// if not ( change_to_this_class in [ class_sniper , class_mortar , class_bazooker ] and not GetBType ( building_list [ val ] ) in [ b_barracks , b_fort ] ) then
16572: LD_VAR 0 4
16576: PUSH
16577: LD_INT 5
16579: PUSH
16580: LD_INT 8
16582: PUSH
16583: LD_INT 9
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: IN
16591: PUSH
16592: LD_VAR 0 3
16596: PUSH
16597: LD_VAR 0 11
16601: ARRAY
16602: PPUSH
16603: CALL_OW 266
16607: PUSH
16608: LD_INT 5
16610: PUSH
16611: LD_INT 35
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: IN
16618: NOT
16619: AND
16620: NOT
16621: IFFALSE 16637
// AddComChangeProfession ( i , change_to_this_class ) ;
16623: LD_VAR 0 9
16627: PPUSH
16628: LD_VAR 0 4
16632: PPUSH
16633: CALL_OW 183
// end ; end ; end ; end ;
16637: GO 16352
16639: POP
16640: POP
// val = val - 1 ;
16641: LD_ADDR_VAR 0 11
16645: PUSH
16646: LD_VAR 0 11
16650: PUSH
16651: LD_INT 1
16653: MINUS
16654: ST_TO_ADDR
// end ;
16655: GO 15833
// if human_list > 0 then
16657: LD_VAR 0 2
16661: PUSH
16662: LD_INT 0
16664: GREATER
16665: IFFALSE 16923
// if ai_building_under_construction [ base ] > 0 and help_building and not under_attack then
16667: LD_EXP 43
16671: PUSH
16672: LD_VAR 0 1
16676: ARRAY
16677: PUSH
16678: LD_INT 0
16680: GREATER
16681: PUSH
16682: LD_VAR 0 6
16686: AND
16687: PUSH
16688: LD_VAR 0 17
16692: NOT
16693: AND
16694: IFFALSE 16770
// begin for i in GetHumansOutOfUnits ( human_list ) do
16696: LD_ADDR_VAR 0 9
16700: PUSH
16701: LD_VAR 0 2
16705: PPUSH
16706: CALL 23550 0 1
16710: PUSH
16711: FOR_IN
16712: IFFALSE 16766
// SetTaskList ( i , [ [ h , 0 , 0 , ai_building_under_construction [ base ] , 0 , 0 , 0 ] ] ) ;
16714: LD_VAR 0 9
16718: PPUSH
16719: LD_STRING h
16721: PUSH
16722: LD_INT 0
16724: PUSH
16725: LD_INT 0
16727: PUSH
16728: LD_EXP 43
16732: PUSH
16733: LD_VAR 0 1
16737: ARRAY
16738: PUSH
16739: LD_INT 0
16741: PUSH
16742: LD_INT 0
16744: PUSH
16745: LD_INT 0
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: PUSH
16757: EMPTY
16758: LIST
16759: PPUSH
16760: CALL_OW 446
16764: GO 16711
16766: POP
16767: POP
// end else
16768: GO 16923
// for i in GetHumansOutOfUnits ( human_list ) do
16770: LD_ADDR_VAR 0 9
16774: PUSH
16775: LD_VAR 0 2
16779: PPUSH
16780: CALL 23550 0 1
16784: PUSH
16785: FOR_IN
16786: IFFALSE 16921
// if GetDistUnitXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 4 then
16788: LD_VAR 0 9
16792: PPUSH
16793: LD_EXP 42
16797: PUSH
16798: LD_VAR 0 1
16802: ARRAY
16803: PUSH
16804: LD_INT 1
16806: ARRAY
16807: PPUSH
16808: LD_EXP 42
16812: PUSH
16813: LD_VAR 0 1
16817: ARRAY
16818: PUSH
16819: LD_INT 2
16821: ARRAY
16822: PPUSH
16823: CALL_OW 297
16827: PUSH
16828: LD_INT 4
16830: GREATER
16831: IFFALSE 16919
// if aggressive_pullback then
16833: LD_VAR 0 7
16837: IFFALSE 16880
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) else
16839: LD_VAR 0 9
16843: PPUSH
16844: LD_EXP 42
16848: PUSH
16849: LD_VAR 0 1
16853: ARRAY
16854: PUSH
16855: LD_INT 1
16857: ARRAY
16858: PPUSH
16859: LD_EXP 42
16863: PUSH
16864: LD_VAR 0 1
16868: ARRAY
16869: PUSH
16870: LD_INT 2
16872: ARRAY
16873: PPUSH
16874: CALL_OW 114
16878: GO 16919
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
16880: LD_VAR 0 9
16884: PPUSH
16885: LD_EXP 42
16889: PUSH
16890: LD_VAR 0 1
16894: ARRAY
16895: PUSH
16896: LD_INT 1
16898: ARRAY
16899: PPUSH
16900: LD_EXP 42
16904: PUSH
16905: LD_VAR 0 1
16909: ARRAY
16910: PUSH
16911: LD_INT 2
16913: ARRAY
16914: PPUSH
16915: CALL_OW 111
16919: GO 16785
16921: POP
16922: POP
// end ;
16923: LD_VAR 0 8
16927: RET
// every 0 0$1 do var side , i , engineers_list , temp_list , buildings_list , temp_unit , away_dist , temp_list_2 , base , apemen_engineers_list ; var humans_list , crane_usable , b_value , k ; var crane_being_repaired ;
16928: GO 16930
16930: DISABLE
16931: LD_INT 0
16933: PPUSH
16934: PPUSH
16935: PPUSH
16936: PPUSH
16937: PPUSH
16938: PPUSH
16939: PPUSH
16940: PPUSH
16941: PPUSH
16942: PPUSH
16943: PPUSH
16944: PPUSH
16945: PPUSH
16946: PPUSH
16947: PPUSH
// begin crane_being_repaired = false ;
16948: LD_ADDR_VAR 0 15
16952: PUSH
16953: LD_INT 0
16955: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16956: LD_INT 35
16958: PPUSH
16959: CALL_OW 67
// for base in ai_bases do
16963: LD_ADDR_VAR 0 9
16967: PUSH
16968: LD_EXP 59
16972: PUSH
16973: FOR_IN
16974: IFFALSE 22208
// begin side = GetBaseSide ( base ) ;
16976: LD_ADDR_VAR 0 1
16980: PUSH
16981: LD_VAR 0 9
16985: PPUSH
16986: CALL 12735 0 1
16990: ST_TO_ADDR
// engineers_list = ai_engineers [ base ] diff ai_heal_these_humans [ base ] ;
16991: LD_ADDR_VAR 0 3
16995: PUSH
16996: LD_EXP 31
17000: PUSH
17001: LD_VAR 0 9
17005: ARRAY
17006: PUSH
17007: LD_EXP 44
17011: PUSH
17012: LD_VAR 0 9
17016: ARRAY
17017: DIFF
17018: ST_TO_ADDR
// apemen_engineers_list = ai_apemen_engineers [ base ] diff ai_heal_these_humans [ base ] ;
17019: LD_ADDR_VAR 0 10
17023: PUSH
17024: LD_EXP 63
17028: PUSH
17029: LD_VAR 0 9
17033: ARRAY
17034: PUSH
17035: LD_EXP 44
17039: PUSH
17040: LD_VAR 0 9
17044: ARRAY
17045: DIFF
17046: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
17047: LD_ADDR_VAR 0 4
17051: PUSH
17052: LD_EXP 44
17056: PUSH
17057: LD_VAR 0 9
17061: ARRAY
17062: ST_TO_ADDR
// humans_list = engineers_list ^ apemen_engineers_list ;
17063: LD_ADDR_VAR 0 11
17067: PUSH
17068: LD_VAR 0 3
17072: PUSH
17073: LD_VAR 0 10
17077: ADD
17078: ST_TO_ADDR
// i = 1 ;
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_INT 1
17086: ST_TO_ADDR
// while i <= humans_list do
17087: LD_VAR 0 2
17091: PUSH
17092: LD_VAR 0 11
17096: LESSEQUAL
17097: IFFALSE 17236
// begin if GetLives ( humans_list [ i ] ) <= 700 then
17099: LD_VAR 0 11
17103: PUSH
17104: LD_VAR 0 2
17108: ARRAY
17109: PPUSH
17110: CALL_OW 256
17114: PUSH
17115: LD_INT 700
17117: LESSEQUAL
17118: IFFALSE 17220
// begin temp_list = temp_list ^ humans_list [ i ] ;
17120: LD_ADDR_VAR 0 4
17124: PUSH
17125: LD_VAR 0 4
17129: PUSH
17130: LD_VAR 0 11
17134: PUSH
17135: LD_VAR 0 2
17139: ARRAY
17140: ADD
17141: ST_TO_ADDR
// engineers_list = engineers_list diff humans_list [ i ] ;
17142: LD_ADDR_VAR 0 3
17146: PUSH
17147: LD_VAR 0 3
17151: PUSH
17152: LD_VAR 0 11
17156: PUSH
17157: LD_VAR 0 2
17161: ARRAY
17162: DIFF
17163: ST_TO_ADDR
// apemen_engineers_list = apemen_engineers_list diff humans_list [ i ] ;
17164: LD_ADDR_VAR 0 10
17168: PUSH
17169: LD_VAR 0 10
17173: PUSH
17174: LD_VAR 0 11
17178: PUSH
17179: LD_VAR 0 2
17183: ARRAY
17184: DIFF
17185: ST_TO_ADDR
// humans_list = Delete ( humans_list , i ) ;
17186: LD_ADDR_VAR 0 11
17190: PUSH
17191: LD_VAR 0 11
17195: PPUSH
17196: LD_VAR 0 2
17200: PPUSH
17201: CALL_OW 3
17205: ST_TO_ADDR
// i = i - 1 ;
17206: LD_ADDR_VAR 0 2
17210: PUSH
17211: LD_VAR 0 2
17215: PUSH
17216: LD_INT 1
17218: MINUS
17219: ST_TO_ADDR
// end ; i = i + 1 ;
17220: LD_ADDR_VAR 0 2
17224: PUSH
17225: LD_VAR 0 2
17229: PUSH
17230: LD_INT 1
17232: PLUS
17233: ST_TO_ADDR
// end ;
17234: GO 17087
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
17236: LD_ADDR_EXP 44
17240: PUSH
17241: LD_EXP 44
17245: PPUSH
17246: LD_VAR 0 9
17250: PPUSH
17251: LD_VAR 0 4
17255: PPUSH
17256: CALL_OW 1
17260: ST_TO_ADDR
// crane_usable = false ;
17261: LD_ADDR_VAR 0 12
17265: PUSH
17266: LD_INT 0
17268: ST_TO_ADDR
// if ai_crane [ base ] > 0 then
17269: LD_EXP 71
17273: PUSH
17274: LD_VAR 0 9
17278: ARRAY
17279: PUSH
17280: LD_INT 0
17282: GREATER
17283: IFFALSE 17455
// if GetLives ( ai_crane [ base ] ) <= 500 or ( crane_being_repaired and GetLives ( ai_crane [ base ] ) < 1000 ) then
17285: LD_EXP 71
17289: PUSH
17290: LD_VAR 0 9
17294: ARRAY
17295: PPUSH
17296: CALL_OW 256
17300: PUSH
17301: LD_INT 500
17303: LESSEQUAL
17304: PUSH
17305: LD_VAR 0 15
17309: PUSH
17310: LD_EXP 71
17314: PUSH
17315: LD_VAR 0 9
17319: ARRAY
17320: PPUSH
17321: CALL_OW 256
17325: PUSH
17326: LD_INT 1000
17328: LESS
17329: AND
17330: OR
17331: IFFALSE 17439
// begin crane_being_repaired = true ;
17333: LD_ADDR_VAR 0 15
17337: PUSH
17338: LD_INT 1
17340: ST_TO_ADDR
// if GetDistUnitXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 6 then
17341: LD_EXP 71
17345: PUSH
17346: LD_VAR 0 9
17350: ARRAY
17351: PPUSH
17352: LD_EXP 42
17356: PUSH
17357: LD_VAR 0 9
17361: ARRAY
17362: PUSH
17363: LD_INT 1
17365: ARRAY
17366: PPUSH
17367: LD_EXP 42
17371: PUSH
17372: LD_VAR 0 9
17376: ARRAY
17377: PUSH
17378: LD_INT 2
17380: ARRAY
17381: PPUSH
17382: CALL_OW 297
17386: PUSH
17387: LD_INT 6
17389: GREATER
17390: IFFALSE 17437
// ComMoveXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
17392: LD_EXP 71
17396: PUSH
17397: LD_VAR 0 9
17401: ARRAY
17402: PPUSH
17403: LD_EXP 42
17407: PUSH
17408: LD_VAR 0 9
17412: ARRAY
17413: PUSH
17414: LD_INT 1
17416: ARRAY
17417: PPUSH
17418: LD_EXP 42
17422: PUSH
17423: LD_VAR 0 9
17427: ARRAY
17428: PUSH
17429: LD_INT 2
17431: ARRAY
17432: PPUSH
17433: CALL_OW 111
// end else
17437: GO 17455
// begin crane_usable = true ;
17439: LD_ADDR_VAR 0 12
17443: PUSH
17444: LD_INT 1
17446: ST_TO_ADDR
// crane_being_repaired = false ;
17447: LD_ADDR_VAR 0 15
17451: PUSH
17452: LD_INT 0
17454: ST_TO_ADDR
// end ; if engineers_list = 0 and apemen_engineers_list = 0 and not crane_usable then
17455: LD_VAR 0 3
17459: PUSH
17460: LD_INT 0
17462: EQUAL
17463: PUSH
17464: LD_VAR 0 10
17468: PUSH
17469: LD_INT 0
17471: EQUAL
17472: AND
17473: PUSH
17474: LD_VAR 0 12
17478: NOT
17479: AND
17480: IFFALSE 17484
// continue ;
17482: GO 16973
// temp_list_2 = UnitFilter ( engineers_list , [ f_class , class_engineer ] ) ;
17484: LD_ADDR_VAR 0 8
17488: PUSH
17489: LD_VAR 0 3
17493: PPUSH
17494: LD_INT 25
17496: PUSH
17497: LD_INT 2
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 72
17508: ST_TO_ADDR
// if ai_captured_buildings [ base ] > 0 and temp_list_2 > 0 then
17509: LD_EXP 79
17513: PUSH
17514: LD_VAR 0 9
17518: ARRAY
17519: PUSH
17520: LD_INT 0
17522: GREATER
17523: PUSH
17524: LD_VAR 0 8
17528: PUSH
17529: LD_INT 0
17531: GREATER
17532: AND
17533: IFFALSE 17804
// begin temp_list = [ ] ;
17535: LD_ADDR_VAR 0 4
17539: PUSH
17540: EMPTY
17541: ST_TO_ADDR
// for i in ai_captured_buildings [ base ] do
17542: LD_ADDR_VAR 0 2
17546: PUSH
17547: LD_EXP 79
17551: PUSH
17552: LD_VAR 0 9
17556: ARRAY
17557: PUSH
17558: FOR_IN
17559: IFFALSE 17615
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
17561: LD_VAR 0 2
17565: PPUSH
17566: CALL_OW 266
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: IN
17581: IFFALSE 17599
// temp_list = temp_list ^ 1 else
17583: LD_ADDR_VAR 0 4
17587: PUSH
17588: LD_VAR 0 4
17592: PUSH
17593: LD_INT 1
17595: ADD
17596: ST_TO_ADDR
17597: GO 17613
// temp_list = temp_list ^ 0 ;
17599: LD_ADDR_VAR 0 4
17603: PUSH
17604: LD_VAR 0 4
17608: PUSH
17609: LD_INT 0
17611: ADD
17612: ST_TO_ADDR
17613: GO 17558
17615: POP
17616: POP
// temp_list = SortListByListDesc ( ai_captured_buildings [ base ] , temp_list ) ;
17617: LD_ADDR_VAR 0 4
17621: PUSH
17622: LD_EXP 79
17626: PUSH
17627: LD_VAR 0 9
17631: ARRAY
17632: PPUSH
17633: LD_VAR 0 4
17637: PPUSH
17638: CALL_OW 77
17642: ST_TO_ADDR
// temp_list_2 = GetHumansOutOfUnits ( temp_list_2 ) ;
17643: LD_ADDR_VAR 0 8
17647: PUSH
17648: LD_VAR 0 8
17652: PPUSH
17653: CALL 23550 0 1
17657: ST_TO_ADDR
// if temp_list_2 > 0 then
17658: LD_VAR 0 8
17662: PUSH
17663: LD_INT 0
17665: GREATER
17666: IFFALSE 17782
// begin temp_list_2 = SortListByListDesc ( temp_list_2 , temp_list_2 ) ;
17668: LD_ADDR_VAR 0 8
17672: PUSH
17673: LD_VAR 0 8
17677: PPUSH
17678: LD_VAR 0 8
17682: PPUSH
17683: CALL_OW 77
17687: ST_TO_ADDR
// SetTaskList ( temp_list_2 [ 1 ] , [ [ e , GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) , temp_list [ 1 ] , 0 , 0 , 0 ] ] ) ;
17688: LD_VAR 0 8
17692: PUSH
17693: LD_INT 1
17695: ARRAY
17696: PPUSH
17697: LD_STRING e
17699: PUSH
17700: LD_VAR 0 4
17704: PUSH
17705: LD_INT 1
17707: ARRAY
17708: PPUSH
17709: CALL_OW 250
17713: PUSH
17714: LD_VAR 0 4
17718: PUSH
17719: LD_INT 1
17721: ARRAY
17722: PPUSH
17723: CALL_OW 251
17727: PUSH
17728: LD_VAR 0 4
17732: PUSH
17733: LD_INT 1
17735: ARRAY
17736: PUSH
17737: LD_INT 0
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: PUSH
17755: EMPTY
17756: LIST
17757: PPUSH
17758: CALL_OW 446
// engineers_list = engineers_list diff temp_list_2 [ 1 ] ;
17762: LD_ADDR_VAR 0 3
17766: PUSH
17767: LD_VAR 0 3
17771: PUSH
17772: LD_VAR 0 8
17776: PUSH
17777: LD_INT 1
17779: ARRAY
17780: DIFF
17781: ST_TO_ADDR
// end ; if engineers_list = 0 and apemen_engineers_list = 0 then
17782: LD_VAR 0 3
17786: PUSH
17787: LD_INT 0
17789: EQUAL
17790: PUSH
17791: LD_VAR 0 10
17795: PUSH
17796: LD_INT 0
17798: EQUAL
17799: AND
17800: IFFALSE 17804
// continue ;
17802: GO 16973
// end ; i = 1 ;
17804: LD_ADDR_VAR 0 2
17808: PUSH
17809: LD_INT 1
17811: ST_TO_ADDR
// buildings_list = [ ] ;
17812: LD_ADDR_VAR 0 5
17816: PUSH
17817: EMPTY
17818: ST_TO_ADDR
// repeat case i of 1 :
17819: LD_VAR 0 2
17823: PUSH
17824: LD_INT 1
17826: DOUBLE
17827: EQUAL
17828: IFTRUE 17832
17830: GO 17869
17832: POP
// buildings_list = UnitFilter ( ai_all_buildings [ base ] , [ f_not , [ f_ok ] ] ) ; 2 :
17833: LD_ADDR_VAR 0 5
17837: PUSH
17838: LD_EXP 45
17842: PUSH
17843: LD_VAR 0 9
17847: ARRAY
17848: PPUSH
17849: LD_INT 3
17851: PUSH
17852: LD_INT 50
17854: PUSH
17855: EMPTY
17856: LIST
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PPUSH
17862: CALL_OW 72
17866: ST_TO_ADDR
17867: GO 17919
17869: LD_INT 2
17871: DOUBLE
17872: EQUAL
17873: IFTRUE 17877
17875: GO 17918
17877: POP
// buildings_list = UnitFilter ( ai_all_buildings [ base ] , [ f_not , [ f_lives , 1000 ] ] ) ; end ;
17878: LD_ADDR_VAR 0 5
17882: PUSH
17883: LD_EXP 45
17887: PUSH
17888: LD_VAR 0 9
17892: ARRAY
17893: PPUSH
17894: LD_INT 3
17896: PUSH
17897: LD_INT 24
17899: PUSH
17900: LD_INT 1000
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PPUSH
17911: CALL_OW 72
17915: ST_TO_ADDR
17916: GO 17919
17918: POP
// i = i + 1 ;
17919: LD_ADDR_VAR 0 2
17923: PUSH
17924: LD_VAR 0 2
17928: PUSH
17929: LD_INT 1
17931: PLUS
17932: ST_TO_ADDR
// until buildings_list > 0 or i > 2 ;
17933: LD_VAR 0 5
17937: PUSH
17938: LD_INT 0
17940: GREATER
17941: PUSH
17942: LD_VAR 0 2
17946: PUSH
17947: LD_INT 2
17949: GREATER
17950: OR
17951: IFFALSE 17819
// if buildings_list > 0 then
17953: LD_VAR 0 5
17957: PUSH
17958: LD_INT 0
17960: GREATER
17961: IFFALSE 18184
// begin humans_list = engineers_list ^ apemen_engineers_list ;
17963: LD_ADDR_VAR 0 11
17967: PUSH
17968: LD_VAR 0 3
17972: PUSH
17973: LD_VAR 0 10
17977: ADD
17978: ST_TO_ADDR
// humans_list = GetHumansOutOfUnits ( humans_list ) ;
17979: LD_ADDR_VAR 0 11
17983: PUSH
17984: LD_VAR 0 11
17988: PPUSH
17989: CALL 23550 0 1
17993: ST_TO_ADDR
// if crane_usable then
17994: LD_VAR 0 12
17998: IFFALSE 18030
// begin humans_list = humans_list ^ ai_crane [ base ] ;
18000: LD_ADDR_VAR 0 11
18004: PUSH
18005: LD_VAR 0 11
18009: PUSH
18010: LD_EXP 71
18014: PUSH
18015: LD_VAR 0 9
18019: ARRAY
18020: ADD
18021: ST_TO_ADDR
// crane_usable = false ;
18022: LD_ADDR_VAR 0 12
18026: PUSH
18027: LD_INT 0
18029: ST_TO_ADDR
// end ; repeat i = 1 ;
18030: LD_ADDR_VAR 0 2
18034: PUSH
18035: LD_INT 1
18037: ST_TO_ADDR
// while i <= buildings_list do
18038: LD_VAR 0 2
18042: PUSH
18043: LD_VAR 0 5
18047: LESSEQUAL
18048: IFFALSE 18172
// begin if humans_list = 0 then
18050: LD_VAR 0 11
18054: PUSH
18055: LD_INT 0
18057: EQUAL
18058: IFFALSE 18062
// break ;
18060: GO 18172
// temp_unit = NearestUnitToUnit ( humans_list , buildings_list [ i ] ) ;
18062: LD_ADDR_VAR 0 6
18066: PUSH
18067: LD_VAR 0 11
18071: PPUSH
18072: LD_VAR 0 5
18076: PUSH
18077: LD_VAR 0 2
18081: ARRAY
18082: PPUSH
18083: CALL_OW 74
18087: ST_TO_ADDR
// ComRepairBuilding ( temp_unit , buildings_list [ i ] ) ;
18088: LD_VAR 0 6
18092: PPUSH
18093: LD_VAR 0 5
18097: PUSH
18098: LD_VAR 0 2
18102: ARRAY
18103: PPUSH
18104: CALL_OW 130
// humans_list = humans_list diff temp_unit ;
18108: LD_ADDR_VAR 0 11
18112: PUSH
18113: LD_VAR 0 11
18117: PUSH
18118: LD_VAR 0 6
18122: DIFF
18123: ST_TO_ADDR
// engineers_list = engineers_list diff temp_unit ;
18124: LD_ADDR_VAR 0 3
18128: PUSH
18129: LD_VAR 0 3
18133: PUSH
18134: LD_VAR 0 6
18138: DIFF
18139: ST_TO_ADDR
// apemen_engineers_list = apemen_engineers_list diff temp_unit ;
18140: LD_ADDR_VAR 0 10
18144: PUSH
18145: LD_VAR 0 10
18149: PUSH
18150: LD_VAR 0 6
18154: DIFF
18155: ST_TO_ADDR
// i = i + 1 ;
18156: LD_ADDR_VAR 0 2
18160: PUSH
18161: LD_VAR 0 2
18165: PUSH
18166: LD_INT 1
18168: PLUS
18169: ST_TO_ADDR
// end ;
18170: GO 18038
// until humans_list = 0 ;
18172: LD_VAR 0 11
18176: PUSH
18177: LD_INT 0
18179: EQUAL
18180: IFFALSE 18030
// continue ;
18182: GO 16973
// end ; if not BaseUnderAttack ( base , - 1 ) then
18184: LD_VAR 0 9
18188: PPUSH
18189: LD_INT 1
18191: NEG
18192: PPUSH
18193: CALL 23655 0 2
18197: NOT
18198: IFFALSE 22032
// begin if ai_building_under_construction [ base ] > 0 then
18200: LD_EXP 43
18204: PUSH
18205: LD_VAR 0 9
18209: ARRAY
18210: PUSH
18211: LD_INT 0
18213: GREATER
18214: IFFALSE 18365
// if BuildingStatus ( ai_building_under_construction [ base ] ) = bs_build then
18216: LD_EXP 43
18220: PUSH
18221: LD_VAR 0 9
18225: ARRAY
18226: PPUSH
18227: CALL_OW 461
18231: PUSH
18232: LD_INT 1
18234: EQUAL
18235: IFFALSE 18327
// begin temp_list_2 = GetHumansOutOfUnits ( engineers_list ^ apemen_engineers_list ) ;
18237: LD_ADDR_VAR 0 8
18241: PUSH
18242: LD_VAR 0 3
18246: PUSH
18247: LD_VAR 0 10
18251: ADD
18252: PPUSH
18253: CALL 23550 0 1
18257: ST_TO_ADDR
// if crane_usable then
18258: LD_VAR 0 12
18262: IFFALSE 18286
// temp_list_2 = temp_list_2 ^ ai_crane [ base ] ;
18264: LD_ADDR_VAR 0 8
18268: PUSH
18269: LD_VAR 0 8
18273: PUSH
18274: LD_EXP 71
18278: PUSH
18279: LD_VAR 0 9
18283: ARRAY
18284: ADD
18285: ST_TO_ADDR
// for i in temp_list_2 do
18286: LD_ADDR_VAR 0 2
18290: PUSH
18291: LD_VAR 0 8
18295: PUSH
18296: FOR_IN
18297: IFFALSE 18321
// ComRepairBuilding ( i , ai_building_under_construction [ base ] ) ;
18299: LD_VAR 0 2
18303: PPUSH
18304: LD_EXP 43
18308: PUSH
18309: LD_VAR 0 9
18313: ARRAY
18314: PPUSH
18315: CALL_OW 130
18319: GO 18296
18321: POP
18322: POP
// continue ;
18323: GO 16973
// end else
18325: GO 18365
// begin ComCancel ( ai_building_under_construction [ base ] ) ;
18327: LD_EXP 43
18331: PUSH
18332: LD_VAR 0 9
18336: ARRAY
18337: PPUSH
18338: CALL_OW 127
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
18342: LD_ADDR_EXP 43
18346: PUSH
18347: LD_EXP 43
18351: PPUSH
18352: LD_VAR 0 9
18356: PPUSH
18357: LD_INT 0
18359: PPUSH
18360: CALL_OW 1
18364: ST_TO_ADDR
// end ; if ai_all_buildings [ base ] - ai_excepted_buildings [ base ] < ai_buildings_locations [ base ] or ai_upcoming_building_data [ base ] > 0 then
18365: LD_EXP 45
18369: PUSH
18370: LD_VAR 0 9
18374: ARRAY
18375: PUSH
18376: LD_EXP 69
18380: PUSH
18381: LD_VAR 0 9
18385: ARRAY
18386: MINUS
18387: PUSH
18388: LD_EXP 39
18392: PUSH
18393: LD_VAR 0 9
18397: ARRAY
18398: LESS
18399: PUSH
18400: LD_EXP 47
18404: PUSH
18405: LD_VAR 0 9
18409: ARRAY
18410: PUSH
18411: LD_INT 0
18413: GREATER
18414: OR
18415: IFFALSE 21918
// begin if ai_upcoming_building_data [ base ] = 0 then
18417: LD_EXP 47
18421: PUSH
18422: LD_VAR 0 9
18426: ARRAY
18427: PUSH
18428: LD_INT 0
18430: EQUAL
18431: IFFALSE 18840
// begin temp_list = [ ] ;
18433: LD_ADDR_VAR 0 4
18437: PUSH
18438: EMPTY
18439: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
18440: LD_ADDR_VAR 0 2
18444: PUSH
18445: LD_EXP 39
18449: PUSH
18450: LD_VAR 0 9
18454: ARRAY
18455: PUSH
18456: FOR_IN
18457: IFFALSE 18507
// if GetBType ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) = - 1 then
18459: LD_VAR 0 2
18463: PUSH
18464: LD_INT 1
18466: ARRAY
18467: PPUSH
18468: LD_VAR 0 2
18472: PUSH
18473: LD_INT 2
18475: ARRAY
18476: PPUSH
18477: CALL_OW 428
18481: PPUSH
18482: CALL_OW 266
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: EQUAL
18491: IFFALSE 18505
// begin temp_list = i ;
18493: LD_ADDR_VAR 0 4
18497: PUSH
18498: LD_VAR 0 2
18502: ST_TO_ADDR
// break ;
18503: GO 18507
// end ;
18505: GO 18456
18507: POP
18508: POP
// if temp_list > 0 then
18509: LD_VAR 0 4
18513: PUSH
18514: LD_INT 0
18516: GREATER
18517: IFFALSE 18840
// begin if temp_list [ 4 ] = b_bunker and GetBaseNation ( base ) in [ nation_american , nation_russian ] then
18519: LD_VAR 0 4
18523: PUSH
18524: LD_INT 4
18526: ARRAY
18527: PUSH
18528: LD_INT 32
18530: EQUAL
18531: PUSH
18532: LD_VAR 0 9
18536: PPUSH
18537: CALL 12812 0 1
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: IN
18552: AND
18553: IFFALSE 18815
// begin k = 0 ;
18555: LD_ADDR_VAR 0 14
18559: PUSH
18560: LD_INT 0
18562: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
18563: LD_ADDR_VAR 0 2
18567: PUSH
18568: LD_EXP 39
18572: PUSH
18573: LD_VAR 0 9
18577: ARRAY
18578: PUSH
18579: FOR_IN
18580: IFFALSE 18631
// if i [ 4 ] in [ b_breastwork , b_bunker , b_armoury , b_barracks , b_fort ] then
18582: LD_VAR 0 2
18586: PUSH
18587: LD_INT 4
18589: ARRAY
18590: PUSH
18591: LD_INT 31
18593: PUSH
18594: LD_INT 32
18596: PUSH
18597: LD_INT 4
18599: PUSH
18600: LD_INT 5
18602: PUSH
18603: LD_INT 35
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: IN
18613: IFFALSE 18629
// k = k + 1 ;
18615: LD_ADDR_VAR 0 14
18619: PUSH
18620: LD_VAR 0 14
18624: PUSH
18625: LD_INT 1
18627: PLUS
18628: ST_TO_ADDR
18629: GO 18579
18631: POP
18632: POP
// if k > ai_soldiers [ base ] then
18633: LD_VAR 0 14
18637: PUSH
18638: LD_EXP 30
18642: PUSH
18643: LD_VAR 0 9
18647: ARRAY
18648: GREATER
18649: IFFALSE 18815
// begin for i = 1 to ai_buildings_locations [ base ] do
18651: LD_ADDR_VAR 0 2
18655: PUSH
18656: DOUBLE
18657: LD_INT 1
18659: DEC
18660: ST_TO_ADDR
18661: LD_EXP 39
18665: PUSH
18666: LD_VAR 0 9
18670: ARRAY
18671: PUSH
18672: FOR_TO
18673: IFFALSE 18792
// if ai_buildings_locations [ base ] [ i ] = temp_list then
18675: LD_EXP 39
18679: PUSH
18680: LD_VAR 0 9
18684: ARRAY
18685: PUSH
18686: LD_VAR 0 2
18690: ARRAY
18691: PUSH
18692: LD_VAR 0 4
18696: EQUAL
18697: IFFALSE 18790
// begin temp_list_2 = Replace ( ai_buildings_locations [ base ] [ i ] , 4 , b_turret ) ;
18699: LD_ADDR_VAR 0 8
18703: PUSH
18704: LD_EXP 39
18708: PUSH
18709: LD_VAR 0 9
18713: ARRAY
18714: PUSH
18715: LD_VAR 0 2
18719: ARRAY
18720: PPUSH
18721: LD_INT 4
18723: PPUSH
18724: LD_INT 33
18726: PPUSH
18727: CALL_OW 1
18731: ST_TO_ADDR
// temp_list_2 = Replace ( ai_buildings_locations [ base ] , i , temp_list_2 ) ;
18732: LD_ADDR_VAR 0 8
18736: PUSH
18737: LD_EXP 39
18741: PUSH
18742: LD_VAR 0 9
18746: ARRAY
18747: PPUSH
18748: LD_VAR 0 2
18752: PPUSH
18753: LD_VAR 0 8
18757: PPUSH
18758: CALL_OW 1
18762: ST_TO_ADDR
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list_2 ) ;
18763: LD_ADDR_EXP 39
18767: PUSH
18768: LD_EXP 39
18772: PPUSH
18773: LD_VAR 0 9
18777: PPUSH
18778: LD_VAR 0 8
18782: PPUSH
18783: CALL_OW 1
18787: ST_TO_ADDR
// break ;
18788: GO 18792
// end ;
18790: GO 18672
18792: POP
18793: POP
// temp_list = Replace ( temp_list , 4 , b_turret ) ;
18794: LD_ADDR_VAR 0 4
18798: PUSH
18799: LD_VAR 0 4
18803: PPUSH
18804: LD_INT 4
18806: PPUSH
18807: LD_INT 33
18809: PPUSH
18810: CALL_OW 1
18814: ST_TO_ADDR
// end ; end ; ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , temp_list ) ;
18815: LD_ADDR_EXP 47
18819: PUSH
18820: LD_EXP 47
18824: PPUSH
18825: LD_VAR 0 9
18829: PPUSH
18830: LD_VAR 0 4
18834: PPUSH
18835: CALL_OW 1
18839: ST_TO_ADDR
// end ; end ; if ai_upcoming_building_data [ base ] > 0 then
18840: LD_EXP 47
18844: PUSH
18845: LD_VAR 0 9
18849: ARRAY
18850: PUSH
18851: LD_INT 0
18853: GREATER
18854: IFFALSE 21918
// begin if ai_building_constructor [ base ] = 0 then
18856: LD_EXP 46
18860: PUSH
18861: LD_VAR 0 9
18865: ARRAY
18866: PUSH
18867: LD_INT 0
18869: EQUAL
18870: IFFALSE 19024
// begin temp_list_2 = UnitFilter ( ai_engineers [ base ] , [ f_class , class_engineer ] ) ;
18872: LD_ADDR_VAR 0 8
18876: PUSH
18877: LD_EXP 31
18881: PUSH
18882: LD_VAR 0 9
18886: ARRAY
18887: PPUSH
18888: LD_INT 25
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PPUSH
18898: CALL_OW 72
18902: ST_TO_ADDR
// if crane_usable then
18903: LD_VAR 0 12
18907: IFFALSE 18931
// temp_list_2 = temp_list_2 ^ ai_crane [ base ] ;
18909: LD_ADDR_VAR 0 8
18913: PUSH
18914: LD_VAR 0 8
18918: PUSH
18919: LD_EXP 71
18923: PUSH
18924: LD_VAR 0 9
18928: ARRAY
18929: ADD
18930: ST_TO_ADDR
// if temp_list_2 > 0 then
18931: LD_VAR 0 8
18935: PUSH
18936: LD_INT 0
18938: GREATER
18939: IFFALSE 19024
// begin temp_list = [ ] ;
18941: LD_ADDR_VAR 0 4
18945: PUSH
18946: EMPTY
18947: ST_TO_ADDR
// for i in temp_list_2 do
18948: LD_ADDR_VAR 0 2
18952: PUSH
18953: LD_VAR 0 8
18957: PUSH
18958: FOR_IN
18959: IFFALSE 18987
// temp_list = temp_list ^ GetSkill ( i , skill_engineering ) ;
18961: LD_ADDR_VAR 0 4
18965: PUSH
18966: LD_VAR 0 4
18970: PUSH
18971: LD_VAR 0 2
18975: PPUSH
18976: LD_INT 2
18978: PPUSH
18979: CALL_OW 259
18983: ADD
18984: ST_TO_ADDR
18985: GO 18958
18987: POP
18988: POP
// ai_building_constructor = Replace ( ai_building_constructor , base , BestFromListByList ( temp_list_2 , temp_list ) ) ;
18989: LD_ADDR_EXP 46
18993: PUSH
18994: LD_EXP 46
18998: PPUSH
18999: LD_VAR 0 9
19003: PPUSH
19004: LD_VAR 0 8
19008: PPUSH
19009: LD_VAR 0 4
19013: PPUSH
19014: CALL_OW 79
19018: PPUSH
19019: CALL_OW 1
19023: ST_TO_ADDR
// end ; end ; if ai_building_constructor [ base ] > 0 and ( ai_building_constructor [ base ] in engineers_list or ( ai_building_constructor [ base ] = ai_crane [ base ] and crane_usable ) ) then
19024: LD_EXP 46
19028: PUSH
19029: LD_VAR 0 9
19033: ARRAY
19034: PUSH
19035: LD_INT 0
19037: GREATER
19038: PUSH
19039: LD_EXP 46
19043: PUSH
19044: LD_VAR 0 9
19048: ARRAY
19049: PUSH
19050: LD_VAR 0 3
19054: IN
19055: PUSH
19056: LD_EXP 46
19060: PUSH
19061: LD_VAR 0 9
19065: ARRAY
19066: PUSH
19067: LD_EXP 71
19071: PUSH
19072: LD_VAR 0 9
19076: ARRAY
19077: EQUAL
19078: PUSH
19079: LD_VAR 0 12
19083: AND
19084: OR
19085: AND
19086: IFFALSE 21918
// begin engineers_list = engineers_list diff ai_building_constructor [ base ] ;
19088: LD_ADDR_VAR 0 3
19092: PUSH
19093: LD_VAR 0 3
19097: PUSH
19098: LD_EXP 46
19102: PUSH
19103: LD_VAR 0 9
19107: ARRAY
19108: DIFF
19109: ST_TO_ADDR
// case GetType ( IsInUnit ( ai_building_constructor [ base ] ) ) of unit_building :
19110: LD_EXP 46
19114: PUSH
19115: LD_VAR 0 9
19119: ARRAY
19120: PPUSH
19121: CALL_OW 310
19125: PPUSH
19126: CALL_OW 247
19130: PUSH
19131: LD_INT 3
19133: DOUBLE
19134: EQUAL
19135: IFTRUE 19139
19137: GO 19157
19139: POP
// ComExitBuilding ( ai_building_constructor [ base ] ) ; unit_vehicle :
19140: LD_EXP 46
19144: PUSH
19145: LD_VAR 0 9
19149: ARRAY
19150: PPUSH
19151: CALL_OW 122
19155: GO 21918
19157: LD_INT 2
19159: DOUBLE
19160: EQUAL
19161: IFTRUE 19165
19163: GO 19183
19165: POP
// ComExitVehicle ( ai_building_constructor [ base ] ) ; else
19166: LD_EXP 46
19170: PUSH
19171: LD_VAR 0 9
19175: ARRAY
19176: PPUSH
19177: CALL_OW 121
19181: GO 21918
19183: POP
// case GetBType ( HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ) of - 1 :
19184: LD_EXP 47
19188: PUSH
19189: LD_VAR 0 9
19193: ARRAY
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: PPUSH
19199: LD_EXP 47
19203: PUSH
19204: LD_VAR 0 9
19208: ARRAY
19209: PUSH
19210: LD_INT 2
19212: ARRAY
19213: PPUSH
19214: CALL_OW 428
19218: PPUSH
19219: CALL_OW 266
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: DOUBLE
19228: EQUAL
19229: IFTRUE 19233
19231: GO 21423
19233: POP
// begin case ai_upcoming_building_data [ base ] [ 4 ] of b_warehouse :
19234: LD_EXP 47
19238: PUSH
19239: LD_VAR 0 9
19243: ARRAY
19244: PUSH
19245: LD_INT 4
19247: ARRAY
19248: PUSH
19249: LD_INT 1
19251: DOUBLE
19252: EQUAL
19253: IFTRUE 19257
19255: GO 19268
19257: POP
// i = b_depot ; b_factory :
19258: LD_ADDR_VAR 0 2
19262: PUSH
19263: LD_INT 0
19265: ST_TO_ADDR
19266: GO 19352
19268: LD_INT 3
19270: DOUBLE
19271: EQUAL
19272: IFTRUE 19276
19274: GO 19287
19276: POP
// i = b_workshop ; b_lab_half , b_lab_full :
19277: LD_ADDR_VAR 0 2
19281: PUSH
19282: LD_INT 2
19284: ST_TO_ADDR
19285: GO 19352
19287: LD_INT 7
19289: DOUBLE
19290: EQUAL
19291: IFTRUE 19301
19293: LD_INT 8
19295: DOUBLE
19296: EQUAL
19297: IFTRUE 19301
19299: GO 19312
19301: POP
// i = b_lab ; b_barracks :
19302: LD_ADDR_VAR 0 2
19306: PUSH
19307: LD_INT 6
19309: ST_TO_ADDR
19310: GO 19352
19312: LD_INT 5
19314: DOUBLE
19315: EQUAL
19316: IFTRUE 19320
19318: GO 19331
19320: POP
// i = b_armoury ; else
19321: LD_ADDR_VAR 0 2
19325: PUSH
19326: LD_INT 4
19328: ST_TO_ADDR
19329: GO 19352
19331: POP
// i = ai_upcoming_building_data [ base ] [ 4 ] ; end ;
19332: LD_ADDR_VAR 0 2
19336: PUSH
19337: LD_EXP 47
19341: PUSH
19342: LD_VAR 0 9
19346: ARRAY
19347: PUSH
19348: LD_INT 4
19350: ARRAY
19351: ST_TO_ADDR
// case i of b_depot :
19352: LD_VAR 0 2
19356: PUSH
19357: LD_INT 0
19359: DOUBLE
19360: EQUAL
19361: IFTRUE 19365
19363: GO 19442
19365: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19366: LD_EXP 46
19370: PUSH
19371: LD_VAR 0 9
19375: ARRAY
19376: PPUSH
19377: CALL_OW 248
19381: PUSH
19382: LD_INT 3
19384: DOUBLE
19385: EQUAL
19386: IFTRUE 19390
19388: GO 19401
19390: POP
// b_value = 64 ; nation_american :
19391: LD_ADDR_VAR 0 13
19395: PUSH
19396: LD_INT 64
19398: ST_TO_ADDR
19399: GO 19440
19401: LD_INT 1
19403: DOUBLE
19404: EQUAL
19405: IFTRUE 19409
19407: GO 19420
19409: POP
// b_value = 1 ; nation_arabian :
19410: LD_ADDR_VAR 0 13
19414: PUSH
19415: LD_INT 1
19417: ST_TO_ADDR
19418: GO 19440
19420: LD_INT 2
19422: DOUBLE
19423: EQUAL
19424: IFTRUE 19428
19426: GO 19439
19428: POP
// b_value = 34 ; end ;
19429: LD_ADDR_VAR 0 13
19433: PUSH
19434: LD_INT 34
19436: ST_TO_ADDR
19437: GO 19440
19439: POP
// end ; b_workshop :
19440: GO 21335
19442: LD_INT 2
19444: DOUBLE
19445: EQUAL
19446: IFTRUE 19450
19448: GO 19527
19450: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19451: LD_EXP 46
19455: PUSH
19456: LD_VAR 0 9
19460: ARRAY
19461: PPUSH
19462: CALL_OW 248
19466: PUSH
19467: LD_INT 3
19469: DOUBLE
19470: EQUAL
19471: IFTRUE 19475
19473: GO 19486
19475: POP
// b_value = 68 ; nation_american :
19476: LD_ADDR_VAR 0 13
19480: PUSH
19481: LD_INT 68
19483: ST_TO_ADDR
19484: GO 19525
19486: LD_INT 1
19488: DOUBLE
19489: EQUAL
19490: IFTRUE 19494
19492: GO 19505
19494: POP
// b_value = 5 ; nation_arabian :
19495: LD_ADDR_VAR 0 13
19499: PUSH
19500: LD_INT 5
19502: ST_TO_ADDR
19503: GO 19525
19505: LD_INT 2
19507: DOUBLE
19508: EQUAL
19509: IFTRUE 19513
19511: GO 19524
19513: POP
// b_value = 38 ; end ;
19514: LD_ADDR_VAR 0 13
19518: PUSH
19519: LD_INT 38
19521: ST_TO_ADDR
19522: GO 19525
19524: POP
// end ; b_armoury :
19525: GO 21335
19527: LD_INT 4
19529: DOUBLE
19530: EQUAL
19531: IFTRUE 19535
19533: GO 19612
19535: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19536: LD_EXP 46
19540: PUSH
19541: LD_VAR 0 9
19545: ARRAY
19546: PPUSH
19547: CALL_OW 248
19551: PUSH
19552: LD_INT 3
19554: DOUBLE
19555: EQUAL
19556: IFTRUE 19560
19558: GO 19571
19560: POP
// b_value = 66 ; nation_american :
19561: LD_ADDR_VAR 0 13
19565: PUSH
19566: LD_INT 66
19568: ST_TO_ADDR
19569: GO 19610
19571: LD_INT 1
19573: DOUBLE
19574: EQUAL
19575: IFTRUE 19579
19577: GO 19590
19579: POP
// b_value = 3 ; nation_arabian :
19580: LD_ADDR_VAR 0 13
19584: PUSH
19585: LD_INT 3
19587: ST_TO_ADDR
19588: GO 19610
19590: LD_INT 2
19592: DOUBLE
19593: EQUAL
19594: IFTRUE 19598
19596: GO 19609
19598: POP
// b_value = 36 ; end ;
19599: LD_ADDR_VAR 0 13
19603: PUSH
19604: LD_INT 36
19606: ST_TO_ADDR
19607: GO 19610
19609: POP
// end ; b_lab :
19610: GO 21335
19612: LD_INT 6
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19697
19620: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19621: LD_EXP 46
19625: PUSH
19626: LD_VAR 0 9
19630: ARRAY
19631: PPUSH
19632: CALL_OW 248
19636: PUSH
19637: LD_INT 3
19639: DOUBLE
19640: EQUAL
19641: IFTRUE 19645
19643: GO 19656
19645: POP
// b_value = 77 ; nation_american :
19646: LD_ADDR_VAR 0 13
19650: PUSH
19651: LD_INT 77
19653: ST_TO_ADDR
19654: GO 19695
19656: LD_INT 1
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19675
19664: POP
// b_value = 17 ; nation_arabian :
19665: LD_ADDR_VAR 0 13
19669: PUSH
19670: LD_INT 17
19672: ST_TO_ADDR
19673: GO 19695
19675: LD_INT 2
19677: DOUBLE
19678: EQUAL
19679: IFTRUE 19683
19681: GO 19694
19683: POP
// b_value = 48 ; end ;
19684: LD_ADDR_VAR 0 13
19688: PUSH
19689: LD_INT 48
19691: ST_TO_ADDR
19692: GO 19695
19694: POP
// end ; b_oil_power :
19695: GO 21335
19697: LD_INT 26
19699: DOUBLE
19700: EQUAL
19701: IFTRUE 19705
19703: GO 19782
19705: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19706: LD_EXP 46
19710: PUSH
19711: LD_VAR 0 9
19715: ARRAY
19716: PPUSH
19717: CALL_OW 248
19721: PUSH
19722: LD_INT 3
19724: DOUBLE
19725: EQUAL
19726: IFTRUE 19730
19728: GO 19741
19730: POP
// b_value = 85 ; nation_american :
19731: LD_ADDR_VAR 0 13
19735: PUSH
19736: LD_INT 85
19738: ST_TO_ADDR
19739: GO 19780
19741: LD_INT 1
19743: DOUBLE
19744: EQUAL
19745: IFTRUE 19749
19747: GO 19760
19749: POP
// b_value = 25 ; nation_arabian :
19750: LD_ADDR_VAR 0 13
19754: PUSH
19755: LD_INT 25
19757: ST_TO_ADDR
19758: GO 19780
19760: LD_INT 2
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19779
19768: POP
// b_value = 56 ; end ;
19769: LD_ADDR_VAR 0 13
19773: PUSH
19774: LD_INT 56
19776: ST_TO_ADDR
19777: GO 19780
19779: POP
// end ; b_solar_power :
19780: GO 21335
19782: LD_INT 27
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19868
19790: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19791: LD_EXP 46
19795: PUSH
19796: LD_VAR 0 9
19800: ARRAY
19801: PPUSH
19802: CALL_OW 248
19806: PUSH
19807: LD_INT 3
19809: DOUBLE
19810: EQUAL
19811: IFTRUE 19815
19813: GO 19827
19815: POP
// b_value = - 7 ; nation_american :
19816: LD_ADDR_VAR 0 13
19820: PUSH
19821: LD_INT 7
19823: NEG
19824: ST_TO_ADDR
19825: GO 19866
19827: LD_INT 1
19829: DOUBLE
19830: EQUAL
19831: IFTRUE 19835
19833: GO 19846
19835: POP
// b_value = 26 ; nation_arabian :
19836: LD_ADDR_VAR 0 13
19840: PUSH
19841: LD_INT 26
19843: ST_TO_ADDR
19844: GO 19866
19846: LD_INT 2
19848: DOUBLE
19849: EQUAL
19850: IFTRUE 19854
19852: GO 19865
19854: POP
// b_value = 57 ; end ;
19855: LD_ADDR_VAR 0 13
19859: PUSH
19860: LD_INT 57
19862: ST_TO_ADDR
19863: GO 19866
19865: POP
// end ; b_siberite_power :
19866: GO 21335
19868: LD_INT 28
19870: DOUBLE
19871: EQUAL
19872: IFTRUE 19876
19874: GO 19953
19876: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19877: LD_EXP 46
19881: PUSH
19882: LD_VAR 0 9
19886: ARRAY
19887: PPUSH
19888: CALL_OW 248
19892: PUSH
19893: LD_INT 3
19895: DOUBLE
19896: EQUAL
19897: IFTRUE 19901
19899: GO 19912
19901: POP
// b_value = 86 ; nation_american :
19902: LD_ADDR_VAR 0 13
19906: PUSH
19907: LD_INT 86
19909: ST_TO_ADDR
19910: GO 19951
19912: LD_INT 1
19914: DOUBLE
19915: EQUAL
19916: IFTRUE 19920
19918: GO 19931
19920: POP
// b_value = 27 ; nation_arabian :
19921: LD_ADDR_VAR 0 13
19925: PUSH
19926: LD_INT 27
19928: ST_TO_ADDR
19929: GO 19951
19931: LD_INT 2
19933: DOUBLE
19934: EQUAL
19935: IFTRUE 19939
19937: GO 19950
19939: POP
// b_value = 58 ; end ;
19940: LD_ADDR_VAR 0 13
19944: PUSH
19945: LD_INT 58
19947: ST_TO_ADDR
19948: GO 19951
19950: POP
// end ; b_oil_mine :
19951: GO 21335
19953: LD_INT 29
19955: DOUBLE
19956: EQUAL
19957: IFTRUE 19961
19959: GO 20038
19961: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19962: LD_EXP 46
19966: PUSH
19967: LD_VAR 0 9
19971: ARRAY
19972: PPUSH
19973: CALL_OW 248
19977: PUSH
19978: LD_INT 3
19980: DOUBLE
19981: EQUAL
19982: IFTRUE 19986
19984: GO 19997
19986: POP
// b_value = 87 ; nation_american :
19987: LD_ADDR_VAR 0 13
19991: PUSH
19992: LD_INT 87
19994: ST_TO_ADDR
19995: GO 20036
19997: LD_INT 1
19999: DOUBLE
20000: EQUAL
20001: IFTRUE 20005
20003: GO 20016
20005: POP
// b_value = 28 ; nation_arabian :
20006: LD_ADDR_VAR 0 13
20010: PUSH
20011: LD_INT 28
20013: ST_TO_ADDR
20014: GO 20036
20016: LD_INT 2
20018: DOUBLE
20019: EQUAL
20020: IFTRUE 20024
20022: GO 20035
20024: POP
// b_value = 59 ; end ;
20025: LD_ADDR_VAR 0 13
20029: PUSH
20030: LD_INT 59
20032: ST_TO_ADDR
20033: GO 20036
20035: POP
// end ; b_siberite_mine :
20036: GO 21335
20038: LD_INT 30
20040: DOUBLE
20041: EQUAL
20042: IFTRUE 20046
20044: GO 20123
20046: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20047: LD_EXP 46
20051: PUSH
20052: LD_VAR 0 9
20056: ARRAY
20057: PPUSH
20058: CALL_OW 248
20062: PUSH
20063: LD_INT 3
20065: DOUBLE
20066: EQUAL
20067: IFTRUE 20071
20069: GO 20082
20071: POP
// b_value = 88 ; nation_american :
20072: LD_ADDR_VAR 0 13
20076: PUSH
20077: LD_INT 88
20079: ST_TO_ADDR
20080: GO 20121
20082: LD_INT 1
20084: DOUBLE
20085: EQUAL
20086: IFTRUE 20090
20088: GO 20101
20090: POP
// b_value = 29 ; nation_arabian :
20091: LD_ADDR_VAR 0 13
20095: PUSH
20096: LD_INT 29
20098: ST_TO_ADDR
20099: GO 20121
20101: LD_INT 2
20103: DOUBLE
20104: EQUAL
20105: IFTRUE 20109
20107: GO 20120
20109: POP
// b_value = 60 ; end ;
20110: LD_ADDR_VAR 0 13
20114: PUSH
20115: LD_INT 60
20117: ST_TO_ADDR
20118: GO 20121
20120: POP
// end ; b_breastwork :
20121: GO 21335
20123: LD_INT 31
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20208
20131: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20132: LD_EXP 46
20136: PUSH
20137: LD_VAR 0 9
20141: ARRAY
20142: PPUSH
20143: CALL_OW 248
20147: PUSH
20148: LD_INT 3
20150: DOUBLE
20151: EQUAL
20152: IFTRUE 20156
20154: GO 20167
20156: POP
// b_value = 89 ; nation_american :
20157: LD_ADDR_VAR 0 13
20161: PUSH
20162: LD_INT 89
20164: ST_TO_ADDR
20165: GO 20206
20167: LD_INT 1
20169: DOUBLE
20170: EQUAL
20171: IFTRUE 20175
20173: GO 20186
20175: POP
// b_value = 30 ; nation_arabian :
20176: LD_ADDR_VAR 0 13
20180: PUSH
20181: LD_INT 30
20183: ST_TO_ADDR
20184: GO 20206
20186: LD_INT 2
20188: DOUBLE
20189: EQUAL
20190: IFTRUE 20194
20192: GO 20205
20194: POP
// b_value = 61 ; end ;
20195: LD_ADDR_VAR 0 13
20199: PUSH
20200: LD_INT 61
20202: ST_TO_ADDR
20203: GO 20206
20205: POP
// end ; b_bunker :
20206: GO 21335
20208: LD_INT 32
20210: DOUBLE
20211: EQUAL
20212: IFTRUE 20216
20214: GO 20293
20216: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20217: LD_EXP 46
20221: PUSH
20222: LD_VAR 0 9
20226: ARRAY
20227: PPUSH
20228: CALL_OW 248
20232: PUSH
20233: LD_INT 3
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20252
20241: POP
// b_value = 90 ; nation_american :
20242: LD_ADDR_VAR 0 13
20246: PUSH
20247: LD_INT 90
20249: ST_TO_ADDR
20250: GO 20291
20252: LD_INT 1
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20271
20260: POP
// b_value = 31 ; nation_arabian :
20261: LD_ADDR_VAR 0 13
20265: PUSH
20266: LD_INT 31
20268: ST_TO_ADDR
20269: GO 20291
20271: LD_INT 2
20273: DOUBLE
20274: EQUAL
20275: IFTRUE 20279
20277: GO 20290
20279: POP
// b_value = 62 ; end ;
20280: LD_ADDR_VAR 0 13
20284: PUSH
20285: LD_INT 62
20287: ST_TO_ADDR
20288: GO 20291
20290: POP
// end ; b_turret :
20291: GO 21335
20293: LD_INT 33
20295: DOUBLE
20296: EQUAL
20297: IFTRUE 20301
20299: GO 20379
20301: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20302: LD_EXP 46
20306: PUSH
20307: LD_VAR 0 9
20311: ARRAY
20312: PPUSH
20313: CALL_OW 248
20317: PUSH
20318: LD_INT 3
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20337
20326: POP
// b_value = 91 ; nation_american :
20327: LD_ADDR_VAR 0 13
20331: PUSH
20332: LD_INT 91
20334: ST_TO_ADDR
20335: GO 20377
20337: LD_INT 1
20339: DOUBLE
20340: EQUAL
20341: IFTRUE 20345
20343: GO 20356
20345: POP
// b_value = 32 ; nation_arabian :
20346: LD_ADDR_VAR 0 13
20350: PUSH
20351: LD_INT 32
20353: ST_TO_ADDR
20354: GO 20377
20356: LD_INT 2
20358: DOUBLE
20359: EQUAL
20360: IFTRUE 20364
20362: GO 20376
20364: POP
// b_value = - 7 ; end ;
20365: LD_ADDR_VAR 0 13
20369: PUSH
20370: LD_INT 7
20372: NEG
20373: ST_TO_ADDR
20374: GO 20377
20376: POP
// end ; b_teleport :
20377: GO 21335
20379: LD_INT 34
20381: DOUBLE
20382: EQUAL
20383: IFTRUE 20387
20385: GO 20466
20387: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20388: LD_EXP 46
20392: PUSH
20393: LD_VAR 0 9
20397: ARRAY
20398: PPUSH
20399: CALL_OW 248
20403: PUSH
20404: LD_INT 3
20406: DOUBLE
20407: EQUAL
20408: IFTRUE 20412
20410: GO 20423
20412: POP
// b_value = 92 ; nation_american :
20413: LD_ADDR_VAR 0 13
20417: PUSH
20418: LD_INT 92
20420: ST_TO_ADDR
20421: GO 20464
20423: LD_INT 1
20425: DOUBLE
20426: EQUAL
20427: IFTRUE 20431
20429: GO 20443
20431: POP
// b_value = - 7 ; nation_arabian :
20432: LD_ADDR_VAR 0 13
20436: PUSH
20437: LD_INT 7
20439: NEG
20440: ST_TO_ADDR
20441: GO 20464
20443: LD_INT 2
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20463
20451: POP
// b_value = - 7 ; end ;
20452: LD_ADDR_VAR 0 13
20456: PUSH
20457: LD_INT 7
20459: NEG
20460: ST_TO_ADDR
20461: GO 20464
20463: POP
// end ; b_control_tower :
20464: GO 21335
20466: LD_INT 36
20468: DOUBLE
20469: EQUAL
20470: IFTRUE 20474
20472: GO 20553
20474: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20475: LD_EXP 46
20479: PUSH
20480: LD_VAR 0 9
20484: ARRAY
20485: PPUSH
20486: CALL_OW 248
20490: PUSH
20491: LD_INT 3
20493: DOUBLE
20494: EQUAL
20495: IFTRUE 20499
20497: GO 20511
20499: POP
// b_value = - 7 ; nation_american :
20500: LD_ADDR_VAR 0 13
20504: PUSH
20505: LD_INT 7
20507: NEG
20508: ST_TO_ADDR
20509: GO 20551
20511: LD_INT 1
20513: DOUBLE
20514: EQUAL
20515: IFTRUE 20519
20517: GO 20530
20519: POP
// b_value = 94 ; nation_arabian :
20520: LD_ADDR_VAR 0 13
20524: PUSH
20525: LD_INT 94
20527: ST_TO_ADDR
20528: GO 20551
20530: LD_INT 2
20532: DOUBLE
20533: EQUAL
20534: IFTRUE 20538
20536: GO 20550
20538: POP
// b_value = - 7 ; end ;
20539: LD_ADDR_VAR 0 13
20543: PUSH
20544: LD_INT 7
20546: NEG
20547: ST_TO_ADDR
20548: GO 20551
20550: POP
// end ; b_ext_track :
20551: GO 21335
20553: LD_INT 16
20555: DOUBLE
20556: EQUAL
20557: IFTRUE 20561
20559: GO 20638
20561: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20562: LD_EXP 46
20566: PUSH
20567: LD_VAR 0 9
20571: ARRAY
20572: PPUSH
20573: CALL_OW 248
20577: PUSH
20578: LD_INT 3
20580: DOUBLE
20581: EQUAL
20582: IFTRUE 20586
20584: GO 20597
20586: POP
// b_value = 70 ; nation_american :
20587: LD_ADDR_VAR 0 13
20591: PUSH
20592: LD_INT 70
20594: ST_TO_ADDR
20595: GO 20636
20597: LD_INT 1
20599: DOUBLE
20600: EQUAL
20601: IFTRUE 20605
20603: GO 20616
20605: POP
// b_value = 7 ; nation_arabian :
20606: LD_ADDR_VAR 0 13
20610: PUSH
20611: LD_INT 7
20613: ST_TO_ADDR
20614: GO 20636
20616: LD_INT 2
20618: DOUBLE
20619: EQUAL
20620: IFTRUE 20624
20622: GO 20635
20624: POP
// b_value = 40 ; end ;
20625: LD_ADDR_VAR 0 13
20629: PUSH
20630: LD_INT 40
20632: ST_TO_ADDR
20633: GO 20636
20635: POP
// end ; b_ext_gun :
20636: GO 21335
20638: LD_INT 17
20640: DOUBLE
20641: EQUAL
20642: IFTRUE 20646
20644: GO 20723
20646: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20647: LD_EXP 46
20651: PUSH
20652: LD_VAR 0 9
20656: ARRAY
20657: PPUSH
20658: CALL_OW 248
20662: PUSH
20663: LD_INT 3
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20682
20671: POP
// b_value = 71 ; nation_american :
20672: LD_ADDR_VAR 0 13
20676: PUSH
20677: LD_INT 71
20679: ST_TO_ADDR
20680: GO 20721
20682: LD_INT 1
20684: DOUBLE
20685: EQUAL
20686: IFTRUE 20690
20688: GO 20701
20690: POP
// b_value = 8 ; nation_arabian :
20691: LD_ADDR_VAR 0 13
20695: PUSH
20696: LD_INT 8
20698: ST_TO_ADDR
20699: GO 20721
20701: LD_INT 2
20703: DOUBLE
20704: EQUAL
20705: IFTRUE 20709
20707: GO 20720
20709: POP
// b_value = 41 ; end ;
20710: LD_ADDR_VAR 0 13
20714: PUSH
20715: LD_INT 41
20717: ST_TO_ADDR
20718: GO 20721
20720: POP
// end ; b_ext_rocket :
20721: GO 21335
20723: LD_INT 18
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20808
20731: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20732: LD_EXP 46
20736: PUSH
20737: LD_VAR 0 9
20741: ARRAY
20742: PPUSH
20743: CALL_OW 248
20747: PUSH
20748: LD_INT 3
20750: DOUBLE
20751: EQUAL
20752: IFTRUE 20756
20754: GO 20767
20756: POP
// b_value = 72 ; nation_american :
20757: LD_ADDR_VAR 0 13
20761: PUSH
20762: LD_INT 72
20764: ST_TO_ADDR
20765: GO 20806
20767: LD_INT 1
20769: DOUBLE
20770: EQUAL
20771: IFTRUE 20775
20773: GO 20786
20775: POP
// b_value = 9 ; nation_arabian :
20776: LD_ADDR_VAR 0 13
20780: PUSH
20781: LD_INT 9
20783: ST_TO_ADDR
20784: GO 20806
20786: LD_INT 2
20788: DOUBLE
20789: EQUAL
20790: IFTRUE 20794
20792: GO 20805
20794: POP
// b_value = 42 ; end ;
20795: LD_ADDR_VAR 0 13
20799: PUSH
20800: LD_INT 42
20802: ST_TO_ADDR
20803: GO 20806
20805: POP
// end ; b_ext_noncombat :
20806: GO 21335
20808: LD_INT 19
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20894
20816: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20817: LD_EXP 46
20821: PUSH
20822: LD_VAR 0 9
20826: ARRAY
20827: PPUSH
20828: CALL_OW 248
20832: PUSH
20833: LD_INT 3
20835: DOUBLE
20836: EQUAL
20837: IFTRUE 20841
20839: GO 20852
20841: POP
// b_value = 73 ; nation_american :
20842: LD_ADDR_VAR 0 13
20846: PUSH
20847: LD_INT 73
20849: ST_TO_ADDR
20850: GO 20892
20852: LD_INT 1
20854: DOUBLE
20855: EQUAL
20856: IFTRUE 20860
20858: GO 20871
20860: POP
// b_value = 10 ; nation_arabian :
20861: LD_ADDR_VAR 0 13
20865: PUSH
20866: LD_INT 10
20868: ST_TO_ADDR
20869: GO 20892
20871: LD_INT 2
20873: DOUBLE
20874: EQUAL
20875: IFTRUE 20879
20877: GO 20891
20879: POP
// b_value = - 7 ; end ;
20880: LD_ADDR_VAR 0 13
20884: PUSH
20885: LD_INT 7
20887: NEG
20888: ST_TO_ADDR
20889: GO 20892
20891: POP
// end ; b_ext_radar :
20892: GO 21335
20894: LD_INT 20
20896: DOUBLE
20897: EQUAL
20898: IFTRUE 20902
20900: GO 20980
20902: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20903: LD_EXP 46
20907: PUSH
20908: LD_VAR 0 9
20912: ARRAY
20913: PPUSH
20914: CALL_OW 248
20918: PUSH
20919: LD_INT 3
20921: DOUBLE
20922: EQUAL
20923: IFTRUE 20927
20925: GO 20939
20927: POP
// b_value = - 7 ; nation_american :
20928: LD_ADDR_VAR 0 13
20932: PUSH
20933: LD_INT 7
20935: NEG
20936: ST_TO_ADDR
20937: GO 20978
20939: LD_INT 1
20941: DOUBLE
20942: EQUAL
20943: IFTRUE 20947
20945: GO 20958
20947: POP
// b_value = 11 ; nation_arabian :
20948: LD_ADDR_VAR 0 13
20952: PUSH
20953: LD_INT 11
20955: ST_TO_ADDR
20956: GO 20978
20958: LD_INT 2
20960: DOUBLE
20961: EQUAL
20962: IFTRUE 20966
20964: GO 20977
20966: POP
// b_value = 44 ; end ;
20967: LD_ADDR_VAR 0 13
20971: PUSH
20972: LD_INT 44
20974: ST_TO_ADDR
20975: GO 20978
20977: POP
// end ; b_ext_siberium :
20978: GO 21335
20980: LD_INT 21
20982: DOUBLE
20983: EQUAL
20984: IFTRUE 20988
20986: GO 21065
20988: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20989: LD_EXP 46
20993: PUSH
20994: LD_VAR 0 9
20998: ARRAY
20999: PPUSH
21000: CALL_OW 248
21004: PUSH
21005: LD_INT 3
21007: DOUBLE
21008: EQUAL
21009: IFTRUE 21013
21011: GO 21024
21013: POP
// b_value = 75 ; nation_american :
21014: LD_ADDR_VAR 0 13
21018: PUSH
21019: LD_INT 75
21021: ST_TO_ADDR
21022: GO 21063
21024: LD_INT 1
21026: DOUBLE
21027: EQUAL
21028: IFTRUE 21032
21030: GO 21043
21032: POP
// b_value = 12 ; nation_arabian :
21033: LD_ADDR_VAR 0 13
21037: PUSH
21038: LD_INT 12
21040: ST_TO_ADDR
21041: GO 21063
21043: LD_INT 2
21045: DOUBLE
21046: EQUAL
21047: IFTRUE 21051
21049: GO 21062
21051: POP
// b_value = 45 ; end ;
21052: LD_ADDR_VAR 0 13
21056: PUSH
21057: LD_INT 45
21059: ST_TO_ADDR
21060: GO 21063
21062: POP
// end ; b_ext_stitch :
21063: GO 21335
21065: LD_INT 23
21067: DOUBLE
21068: EQUAL
21069: IFTRUE 21073
21071: GO 21152
21073: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
21074: LD_EXP 46
21078: PUSH
21079: LD_VAR 0 9
21083: ARRAY
21084: PPUSH
21085: CALL_OW 248
21089: PUSH
21090: LD_INT 3
21092: DOUBLE
21093: EQUAL
21094: IFTRUE 21098
21096: GO 21110
21098: POP
// b_value = - 7 ; nation_american :
21099: LD_ADDR_VAR 0 13
21103: PUSH
21104: LD_INT 7
21106: NEG
21107: ST_TO_ADDR
21108: GO 21150
21110: LD_INT 1
21112: DOUBLE
21113: EQUAL
21114: IFTRUE 21118
21116: GO 21130
21118: POP
// b_value = - 7 ; nation_arabian :
21119: LD_ADDR_VAR 0 13
21123: PUSH
21124: LD_INT 7
21126: NEG
21127: ST_TO_ADDR
21128: GO 21150
21130: LD_INT 2
21132: DOUBLE
21133: EQUAL
21134: IFTRUE 21138
21136: GO 21149
21138: POP
// b_value = 43 ; end ;
21139: LD_ADDR_VAR 0 13
21143: PUSH
21144: LD_INT 43
21146: ST_TO_ADDR
21147: GO 21150
21149: POP
// end ; b_ext_computer :
21150: GO 21335
21152: LD_INT 24
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21238
21160: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
21161: LD_EXP 46
21165: PUSH
21166: LD_VAR 0 9
21170: ARRAY
21171: PPUSH
21172: CALL_OW 248
21176: PUSH
21177: LD_INT 3
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21196
21185: POP
// b_value = 76 ; nation_american :
21186: LD_ADDR_VAR 0 13
21190: PUSH
21191: LD_INT 76
21193: ST_TO_ADDR
21194: GO 21236
21196: LD_INT 1
21198: DOUBLE
21199: EQUAL
21200: IFTRUE 21204
21202: GO 21215
21204: POP
// b_value = 15 ; nation_arabian :
21205: LD_ADDR_VAR 0 13
21209: PUSH
21210: LD_INT 15
21212: ST_TO_ADDR
21213: GO 21236
21215: LD_INT 2
21217: DOUBLE
21218: EQUAL
21219: IFTRUE 21223
21221: GO 21235
21223: POP
// b_value = - 7 ; end ;
21224: LD_ADDR_VAR 0 13
21228: PUSH
21229: LD_INT 7
21231: NEG
21232: ST_TO_ADDR
21233: GO 21236
21235: POP
// end ; b_ext_laser :
21236: GO 21335
21238: LD_INT 25
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21325
21246: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
21247: LD_EXP 46
21251: PUSH
21252: LD_VAR 0 9
21256: ARRAY
21257: PPUSH
21258: CALL_OW 248
21262: PUSH
21263: LD_INT 3
21265: DOUBLE
21266: EQUAL
21267: IFTRUE 21271
21269: GO 21283
21271: POP
// b_value = - 7 ; nation_american :
21272: LD_ADDR_VAR 0 13
21276: PUSH
21277: LD_INT 7
21279: NEG
21280: ST_TO_ADDR
21281: GO 21323
21283: LD_INT 1
21285: DOUBLE
21286: EQUAL
21287: IFTRUE 21291
21289: GO 21302
21291: POP
// b_value = 16 ; nation_arabian :
21292: LD_ADDR_VAR 0 13
21296: PUSH
21297: LD_INT 16
21299: ST_TO_ADDR
21300: GO 21323
21302: LD_INT 2
21304: DOUBLE
21305: EQUAL
21306: IFTRUE 21310
21308: GO 21322
21310: POP
// b_value = - 7 ; end ;
21311: LD_ADDR_VAR 0 13
21315: PUSH
21316: LD_INT 7
21318: NEG
21319: ST_TO_ADDR
21320: GO 21323
21322: POP
// end ; else
21323: GO 21335
21325: POP
// b_value = - 42 ; end ;
21326: LD_ADDR_VAR 0 13
21330: PUSH
21331: LD_INT 42
21333: NEG
21334: ST_TO_ADDR
// SetTaskList ( ai_building_constructor [ base ] , [ [ B , ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] , 0 , b_value , ai_upcoming_building_data [ base ] [ 3 ] , 0 ] ] ) ;
21335: LD_EXP 46
21339: PUSH
21340: LD_VAR 0 9
21344: ARRAY
21345: PPUSH
21346: LD_STRING B
21348: PUSH
21349: LD_EXP 47
21353: PUSH
21354: LD_VAR 0 9
21358: ARRAY
21359: PUSH
21360: LD_INT 1
21362: ARRAY
21363: PUSH
21364: LD_EXP 47
21368: PUSH
21369: LD_VAR 0 9
21373: ARRAY
21374: PUSH
21375: LD_INT 2
21377: ARRAY
21378: PUSH
21379: LD_INT 0
21381: PUSH
21382: LD_VAR 0 13
21386: PUSH
21387: LD_EXP 47
21391: PUSH
21392: LD_VAR 0 9
21396: ARRAY
21397: PUSH
21398: LD_INT 3
21400: ARRAY
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: PUSH
21414: EMPTY
21415: LIST
21416: PPUSH
21417: CALL_OW 446
// end ; b_depot :
21421: GO 21918
21423: LD_INT 0
21425: DOUBLE
21426: EQUAL
21427: IFTRUE 21431
21429: GO 21480
21431: POP
// begin ComUpgrade ( ai_depot [ base ] ) ;
21432: LD_EXP 35
21436: PUSH
21437: LD_VAR 0 9
21441: ARRAY
21442: PPUSH
21443: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , ai_depot [ base ] ) ;
21447: LD_ADDR_EXP 43
21451: PUSH
21452: LD_EXP 43
21456: PPUSH
21457: LD_VAR 0 9
21461: PPUSH
21462: LD_EXP 35
21466: PUSH
21467: LD_VAR 0 9
21471: ARRAY
21472: PPUSH
21473: CALL_OW 1
21477: ST_TO_ADDR
// end ; b_workshop :
21478: GO 21918
21480: LD_INT 2
21482: DOUBLE
21483: EQUAL
21484: IFTRUE 21488
21486: GO 21565
21488: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21489: LD_ADDR_VAR 0 6
21493: PUSH
21494: LD_EXP 47
21498: PUSH
21499: LD_VAR 0 9
21503: ARRAY
21504: PUSH
21505: LD_INT 1
21507: ARRAY
21508: PPUSH
21509: LD_EXP 47
21513: PUSH
21514: LD_VAR 0 9
21518: ARRAY
21519: PUSH
21520: LD_INT 2
21522: ARRAY
21523: PPUSH
21524: CALL_OW 428
21528: ST_TO_ADDR
// ComUpgrade ( temp_unit ) ;
21529: LD_VAR 0 6
21533: PPUSH
21534: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21538: LD_ADDR_EXP 43
21542: PUSH
21543: LD_EXP 43
21547: PPUSH
21548: LD_VAR 0 9
21552: PPUSH
21553: LD_VAR 0 6
21557: PPUSH
21558: CALL_OW 1
21562: ST_TO_ADDR
// end ; b_lab , b_lab_half :
21563: GO 21918
21565: LD_INT 6
21567: DOUBLE
21568: EQUAL
21569: IFTRUE 21579
21571: LD_INT 7
21573: DOUBLE
21574: EQUAL
21575: IFTRUE 21579
21577: GO 21832
21579: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21580: LD_ADDR_VAR 0 6
21584: PUSH
21585: LD_EXP 47
21589: PUSH
21590: LD_VAR 0 9
21594: ARRAY
21595: PUSH
21596: LD_INT 1
21598: ARRAY
21599: PPUSH
21600: LD_EXP 47
21604: PUSH
21605: LD_VAR 0 9
21609: ARRAY
21610: PUSH
21611: LD_INT 2
21613: ARRAY
21614: PPUSH
21615: CALL_OW 428
21619: ST_TO_ADDR
// if ai_upcoming_building_data [ base ] [ 5 ] <> b_lab_basic and not ai_upcoming_building_data [ base ] [ 5 ] in [ GetLabKind ( temp_unit , 1 ) , GetLabKind ( temp_unit , 2 ) ] then
21620: LD_EXP 47
21624: PUSH
21625: LD_VAR 0 9
21629: ARRAY
21630: PUSH
21631: LD_INT 5
21633: ARRAY
21634: PUSH
21635: LD_INT 9
21637: NONEQUAL
21638: PUSH
21639: LD_EXP 47
21643: PUSH
21644: LD_VAR 0 9
21648: ARRAY
21649: PUSH
21650: LD_INT 5
21652: ARRAY
21653: PUSH
21654: LD_VAR 0 6
21658: PPUSH
21659: LD_INT 1
21661: PPUSH
21662: CALL_OW 268
21666: PUSH
21667: LD_VAR 0 6
21671: PPUSH
21672: LD_INT 2
21674: PPUSH
21675: CALL_OW 268
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: IN
21684: NOT
21685: AND
21686: IFFALSE 21714
// ComUpgradeLab ( temp_unit , ai_upcoming_building_data [ base ] [ 5 ] ) else
21688: LD_VAR 0 6
21692: PPUSH
21693: LD_EXP 47
21697: PUSH
21698: LD_VAR 0 9
21702: ARRAY
21703: PUSH
21704: LD_INT 5
21706: ARRAY
21707: PPUSH
21708: CALL_OW 147
21712: GO 21805
// if ai_upcoming_building_data [ base ] [ 6 ] <> b_lab_basic then
21714: LD_EXP 47
21718: PUSH
21719: LD_VAR 0 9
21723: ARRAY
21724: PUSH
21725: LD_INT 6
21727: ARRAY
21728: PUSH
21729: LD_INT 9
21731: NONEQUAL
21732: IFFALSE 21760
// ComUpgradeLab ( temp_unit , ai_upcoming_building_data [ base ] [ 6 ] ) else
21734: LD_VAR 0 6
21738: PPUSH
21739: LD_EXP 47
21743: PUSH
21744: LD_VAR 0 9
21748: ARRAY
21749: PUSH
21750: LD_INT 6
21752: ARRAY
21753: PPUSH
21754: CALL_OW 147
21758: GO 21805
// begin ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
21760: LD_ADDR_EXP 46
21764: PUSH
21765: LD_EXP 46
21769: PPUSH
21770: LD_VAR 0 9
21774: PPUSH
21775: LD_INT 0
21777: PPUSH
21778: CALL_OW 1
21782: ST_TO_ADDR
// ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , [ ] ) ;
21783: LD_ADDR_EXP 47
21787: PUSH
21788: LD_EXP 47
21792: PPUSH
21793: LD_VAR 0 9
21797: PPUSH
21798: EMPTY
21799: PPUSH
21800: CALL_OW 1
21804: ST_TO_ADDR
// end ; ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21805: LD_ADDR_EXP 43
21809: PUSH
21810: LD_EXP 43
21814: PPUSH
21815: LD_VAR 0 9
21819: PPUSH
21820: LD_VAR 0 6
21824: PPUSH
21825: CALL_OW 1
21829: ST_TO_ADDR
// end ; b_armoury :
21830: GO 21918
21832: LD_INT 4
21834: DOUBLE
21835: EQUAL
21836: IFTRUE 21840
21838: GO 21917
21840: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21841: LD_ADDR_VAR 0 6
21845: PUSH
21846: LD_EXP 47
21850: PUSH
21851: LD_VAR 0 9
21855: ARRAY
21856: PUSH
21857: LD_INT 1
21859: ARRAY
21860: PPUSH
21861: LD_EXP 47
21865: PUSH
21866: LD_VAR 0 9
21870: ARRAY
21871: PUSH
21872: LD_INT 2
21874: ARRAY
21875: PPUSH
21876: CALL_OW 428
21880: ST_TO_ADDR
// ComUpgrade ( temp_unit ) ;
21881: LD_VAR 0 6
21885: PPUSH
21886: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21890: LD_ADDR_EXP 43
21894: PUSH
21895: LD_EXP 43
21899: PPUSH
21900: LD_VAR 0 9
21904: PPUSH
21905: LD_VAR 0 6
21909: PPUSH
21910: CALL_OW 1
21914: ST_TO_ADDR
// end ; end ; end ;
21915: GO 21918
21917: POP
// end ; end ; end ; if ( engineers_list ^ apemen_engineers_list ) > 0 and ai_depot [ base ] > 0 then
21918: LD_VAR 0 3
21922: PUSH
21923: LD_VAR 0 10
21927: ADD
21928: PUSH
21929: LD_INT 0
21931: GREATER
21932: PUSH
21933: LD_EXP 35
21937: PUSH
21938: LD_VAR 0 9
21942: ARRAY
21943: PUSH
21944: LD_INT 0
21946: GREATER
21947: AND
21948: IFFALSE 22032
// begin temp_list = GetListOfCratesInArea ( GetBaseArea ( base ) ) ;
21950: LD_ADDR_VAR 0 4
21954: PUSH
21955: LD_VAR 0 9
21959: PPUSH
21960: CALL 12664 0 1
21964: PPUSH
21965: CALL_OW 435
21969: ST_TO_ADDR
// if temp_list > 0 then
21970: LD_VAR 0 4
21974: PUSH
21975: LD_INT 0
21977: GREATER
21978: IFFALSE 22032
// begin ComCollect ( GetHumansOutOfUnits ( engineers_list ^ apemen_engineers_list ) , temp_list [ 1 ] , temp_list [ 2 ] ) ;
21980: LD_VAR 0 3
21984: PUSH
21985: LD_VAR 0 10
21989: ADD
21990: PPUSH
21991: CALL 23550 0 1
21995: PPUSH
21996: LD_VAR 0 4
22000: PUSH
22001: LD_INT 1
22003: ARRAY
22004: PPUSH
22005: LD_VAR 0 4
22009: PUSH
22010: LD_INT 2
22012: ARRAY
22013: PPUSH
22014: CALL_OW 117
// engineers_list = [ ] ;
22018: LD_ADDR_VAR 0 3
22022: PUSH
22023: EMPTY
22024: ST_TO_ADDR
// apemen_engineers_list = [ ] ;
22025: LD_ADDR_VAR 0 10
22029: PUSH
22030: EMPTY
22031: ST_TO_ADDR
// end ; end ; end ; DistributeHumansToBuildings ( base , engineers_list ^ apemen_engineers_list , UnitFilter ( ai_depot [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_engineer , 6 , false , false ) ;
22032: LD_VAR 0 9
22036: PPUSH
22037: LD_VAR 0 3
22041: PUSH
22042: LD_VAR 0 10
22046: ADD
22047: PPUSH
22048: LD_EXP 35
22052: PUSH
22053: LD_VAR 0 9
22057: ARRAY
22058: PPUSH
22059: LD_INT 50
22061: PUSH
22062: EMPTY
22063: LIST
22064: PUSH
22065: LD_INT 3
22067: PUSH
22068: LD_INT 57
22070: PUSH
22071: EMPTY
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PPUSH
22082: CALL_OW 72
22086: PPUSH
22087: LD_INT 2
22089: PPUSH
22090: LD_INT 6
22092: PPUSH
22093: LD_INT 0
22095: PPUSH
22096: LD_INT 0
22098: PPUSH
22099: CALL 15621 0 7
// if crane_usable and ai_crane [ base ] <> ai_building_constructor [ base ] then
22103: LD_VAR 0 12
22107: PUSH
22108: LD_EXP 71
22112: PUSH
22113: LD_VAR 0 9
22117: ARRAY
22118: PUSH
22119: LD_EXP 46
22123: PUSH
22124: LD_VAR 0 9
22128: ARRAY
22129: NONEQUAL
22130: AND
22131: IFFALSE 22206
// if not IsInArea ( ai_crane [ base ] , GetBaseArea ( base ) ) then
22133: LD_EXP 71
22137: PUSH
22138: LD_VAR 0 9
22142: ARRAY
22143: PPUSH
22144: LD_VAR 0 9
22148: PPUSH
22149: CALL 12664 0 1
22153: PPUSH
22154: CALL_OW 308
22158: NOT
22159: IFFALSE 22206
// ComMoveXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
22161: LD_EXP 71
22165: PUSH
22166: LD_VAR 0 9
22170: ARRAY
22171: PPUSH
22172: LD_EXP 42
22176: PUSH
22177: LD_VAR 0 9
22181: ARRAY
22182: PUSH
22183: LD_INT 1
22185: ARRAY
22186: PPUSH
22187: LD_EXP 42
22191: PUSH
22192: LD_VAR 0 9
22196: ARRAY
22197: PUSH
22198: LD_INT 2
22200: ARRAY
22201: PPUSH
22202: CALL_OW 111
// end ;
22206: GO 16973
22208: POP
22209: POP
// until false ;
22210: LD_INT 0
22212: IFFALSE 16956
// end ;
22214: PPOPN 15
22216: END
// on BuildingStarted ( building , builder ) do var side , temp_list , base , i ;
22217: LD_INT 0
22219: PPUSH
22220: PPUSH
22221: PPUSH
22222: PPUSH
// begin side = GetSide ( building ) ;
22223: LD_ADDR_VAR 0 3
22227: PUSH
22228: LD_VAR 0 1
22232: PPUSH
22233: CALL_OW 255
22237: ST_TO_ADDR
// if side = you then
22238: LD_VAR 0 3
22242: PUSH
22243: LD_EXP 3
22247: EQUAL
22248: IFFALSE 22252
// exit ;
22250: GO 22327
// base = FindBase ( building ) ;
22252: LD_ADDR_VAR 0 5
22256: PUSH
22257: LD_VAR 0 1
22261: PPUSH
22262: CALL 12883 0 1
22266: ST_TO_ADDR
// if base = 0 then
22267: LD_VAR 0 5
22271: PUSH
22272: LD_INT 0
22274: EQUAL
22275: IFFALSE 22279
// exit ;
22277: GO 22327
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
22279: LD_ADDR_EXP 46
22283: PUSH
22284: LD_EXP 46
22288: PPUSH
22289: LD_VAR 0 5
22293: PPUSH
22294: LD_INT 0
22296: PPUSH
22297: CALL_OW 1
22301: ST_TO_ADDR
// ai_building_under_construction = Replace ( ai_building_under_construction , base , building ) ;
22302: LD_ADDR_EXP 43
22306: PUSH
22307: LD_EXP 43
22311: PPUSH
22312: LD_VAR 0 5
22316: PPUSH
22317: LD_VAR 0 1
22321: PPUSH
22322: CALL_OW 1
22326: ST_TO_ADDR
// end ;
22327: PPOPN 6
22329: END
// on BuildingComplete ( building ) do var side , temp_list , temp_unit , base , i ;
22330: LD_INT 0
22332: PPUSH
22333: PPUSH
22334: PPUSH
22335: PPUSH
22336: PPUSH
// begin side = GetSide ( building ) ;
22337: LD_ADDR_VAR 0 2
22341: PUSH
22342: LD_VAR 0 1
22346: PPUSH
22347: CALL_OW 255
22351: ST_TO_ADDR
// if side = you then
22352: LD_VAR 0 2
22356: PUSH
22357: LD_EXP 3
22361: EQUAL
22362: IFFALSE 22366
// exit ;
22364: GO 22471
// base = FindBase ( building ) ;
22366: LD_ADDR_VAR 0 5
22370: PUSH
22371: LD_VAR 0 1
22375: PPUSH
22376: CALL 12883 0 1
22380: ST_TO_ADDR
// if base = 0 then
22381: LD_VAR 0 5
22385: PUSH
22386: LD_INT 0
22388: EQUAL
22389: IFFALSE 22393
// exit ;
22391: GO 22471
// BuildUpgradeCommon ( base , building ) ;
22393: LD_VAR 0 5
22397: PPUSH
22398: LD_VAR 0 1
22402: PPUSH
22403: CALL 22552 0 2
// temp_list = ai_all_buildings [ base ] ^ building ;
22407: LD_ADDR_VAR 0 3
22411: PUSH
22412: LD_EXP 45
22416: PUSH
22417: LD_VAR 0 5
22421: ARRAY
22422: PUSH
22423: LD_VAR 0 1
22427: ADD
22428: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
22429: LD_ADDR_EXP 45
22433: PUSH
22434: LD_EXP 45
22438: PPUSH
22439: LD_VAR 0 5
22443: PPUSH
22444: LD_VAR 0 3
22448: PPUSH
22449: CALL_OW 1
22453: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , building , true ) ;
22454: LD_VAR 0 5
22458: PPUSH
22459: LD_VAR 0 1
22463: PPUSH
22464: LD_INT 1
22466: PPUSH
22467: CALL 7134 0 3
// end ;
22471: PPOPN 6
22473: END
// on UpgradeComplete ( building ) do var side , temp_list , base ;
22474: LD_INT 0
22476: PPUSH
22477: PPUSH
22478: PPUSH
// begin side = GetSide ( building ) ;
22479: LD_ADDR_VAR 0 2
22483: PUSH
22484: LD_VAR 0 1
22488: PPUSH
22489: CALL_OW 255
22493: ST_TO_ADDR
// if side = you then
22494: LD_VAR 0 2
22498: PUSH
22499: LD_EXP 3
22503: EQUAL
22504: IFFALSE 22508
// exit ;
22506: GO 22549
// base = FindBase ( building ) ;
22508: LD_ADDR_VAR 0 4
22512: PUSH
22513: LD_VAR 0 1
22517: PPUSH
22518: CALL 12883 0 1
22522: ST_TO_ADDR
// if base = 0 then
22523: LD_VAR 0 4
22527: PUSH
22528: LD_INT 0
22530: EQUAL
22531: IFFALSE 22535
// exit ;
22533: GO 22549
// BuildUpgradeCommon ( base , building ) ;
22535: LD_VAR 0 4
22539: PPUSH
22540: LD_VAR 0 1
22544: PPUSH
22545: CALL 22552 0 2
// end ;
22549: PPOPN 4
22551: END
// function BuildUpgradeCommon ( base , building ) ; begin
22552: LD_INT 0
22554: PPUSH
// if GetBType ( building ) = ai_upcoming_building_data [ base ] [ 4 ] then
22555: LD_VAR 0 2
22559: PPUSH
22560: CALL_OW 266
22564: PUSH
22565: LD_EXP 47
22569: PUSH
22570: LD_VAR 0 1
22574: ARRAY
22575: PUSH
22576: LD_INT 4
22578: ARRAY
22579: EQUAL
22580: IFFALSE 22604
// ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , [ ] ) ;
22582: LD_ADDR_EXP 47
22586: PUSH
22587: LD_EXP 47
22591: PPUSH
22592: LD_VAR 0 1
22596: PPUSH
22597: EMPTY
22598: PPUSH
22599: CALL_OW 1
22603: ST_TO_ADDR
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
22604: LD_ADDR_EXP 43
22608: PUSH
22609: LD_EXP 43
22613: PPUSH
22614: LD_VAR 0 1
22618: PPUSH
22619: LD_INT 0
22621: PPUSH
22622: CALL_OW 1
22626: ST_TO_ADDR
// end ;
22627: LD_VAR 0 3
22631: RET
// on BuildingCaptured ( captured_building , building_former_side , capturing_unit ) do var temp_list , base ;
22632: LD_INT 0
22634: PPUSH
22635: PPUSH
// begin if captured_building in ai_depot then
22636: LD_VAR 0 1
22640: PUSH
22641: LD_EXP 35
22645: IN
22646: IFFALSE 22961
// begin case captured_building of ai_depot [ 1 ] :
22648: LD_VAR 0 1
22652: PUSH
22653: LD_EXP 35
22657: PUSH
22658: LD_INT 1
22660: ARRAY
22661: DOUBLE
22662: EQUAL
22663: IFTRUE 22667
22665: GO 22762
22667: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22668: LD_VAR 0 1
22672: PPUSH
22673: CALL_OW 274
22677: PPUSH
22678: LD_INT 1
22680: PPUSH
22681: LD_INT 200
22683: PUSH
22684: LD_INT 0
22686: PPUSH
22687: LD_INT 7
22689: PPUSH
22690: CALL_OW 12
22694: PUSH
22695: LD_INT 10
22697: MUL
22698: PLUS
22699: PPUSH
22700: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 0 ) ;
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 274
22713: PPUSH
22714: LD_INT 2
22716: PPUSH
22717: LD_INT 0
22719: PPUSH
22720: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22724: LD_VAR 0 1
22728: PPUSH
22729: CALL_OW 274
22733: PPUSH
22734: LD_INT 3
22736: PPUSH
22737: LD_INT 80
22739: PUSH
22740: LD_INT 0
22742: PPUSH
22743: LD_INT 10
22745: PPUSH
22746: CALL_OW 12
22750: PUSH
22751: LD_INT 5
22753: MUL
22754: PLUS
22755: PPUSH
22756: CALL_OW 277
// end ; ai_depot [ 2 ] :
22760: GO 22961
22762: LD_EXP 35
22766: PUSH
22767: LD_INT 2
22769: ARRAY
22770: DOUBLE
22771: EQUAL
22772: IFTRUE 22776
22774: GO 22839
22776: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 100 ) ;
22777: LD_VAR 0 1
22781: PPUSH
22782: CALL_OW 274
22786: PPUSH
22787: LD_INT 1
22789: PPUSH
22790: LD_INT 100
22792: PPUSH
22793: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 55 ) ;
22797: LD_VAR 0 1
22801: PPUSH
22802: CALL_OW 274
22806: PPUSH
22807: LD_INT 2
22809: PPUSH
22810: LD_INT 55
22812: PPUSH
22813: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 20 ) ;
22817: LD_VAR 0 1
22821: PPUSH
22822: CALL_OW 274
22826: PPUSH
22827: LD_INT 3
22829: PPUSH
22830: LD_INT 20
22832: PPUSH
22833: CALL_OW 277
// end ; ai_depot [ 3 ] :
22837: GO 22961
22839: LD_EXP 35
22843: PUSH
22844: LD_INT 3
22846: ARRAY
22847: DOUBLE
22848: EQUAL
22849: IFTRUE 22853
22851: GO 22960
22853: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22854: LD_VAR 0 1
22858: PPUSH
22859: CALL_OW 274
22863: PPUSH
22864: LD_INT 1
22866: PPUSH
22867: LD_INT 200
22869: PUSH
22870: LD_INT 0
22872: PPUSH
22873: LD_INT 7
22875: PPUSH
22876: CALL_OW 12
22880: PUSH
22881: LD_INT 10
22883: MUL
22884: PLUS
22885: PPUSH
22886: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 400 + Rand ( 0 , 100 ) ) ;
22890: LD_VAR 0 1
22894: PPUSH
22895: CALL_OW 274
22899: PPUSH
22900: LD_INT 2
22902: PPUSH
22903: LD_INT 400
22905: PUSH
22906: LD_INT 0
22908: PPUSH
22909: LD_INT 100
22911: PPUSH
22912: CALL_OW 12
22916: PLUS
22917: PPUSH
22918: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22922: LD_VAR 0 1
22926: PPUSH
22927: CALL_OW 274
22931: PPUSH
22932: LD_INT 3
22934: PPUSH
22935: LD_INT 80
22937: PUSH
22938: LD_INT 0
22940: PPUSH
22941: LD_INT 10
22943: PPUSH
22944: CALL_OW 12
22948: PUSH
22949: LD_INT 5
22951: MUL
22952: PLUS
22953: PPUSH
22954: CALL_OW 277
// end ; end ;
22958: GO 22961
22960: POP
// end ; base = FindBase ( captured_building ) ;
22961: LD_ADDR_VAR 0 5
22965: PUSH
22966: LD_VAR 0 1
22970: PPUSH
22971: CALL 12883 0 1
22975: ST_TO_ADDR
// if base = 0 then
22976: LD_VAR 0 5
22980: PUSH
22981: LD_INT 0
22983: EQUAL
22984: IFFALSE 22988
// exit ;
22986: GO 23219
// if building_former_side = GetBaseSide ( base ) then
22988: LD_VAR 0 2
22992: PUSH
22993: LD_VAR 0 5
22997: PPUSH
22998: CALL 12735 0 1
23002: EQUAL
23003: IFFALSE 23086
// begin if captured_building in ai_all_buildings [ base ] then
23005: LD_VAR 0 1
23009: PUSH
23010: LD_EXP 45
23014: PUSH
23015: LD_VAR 0 5
23019: ARRAY
23020: IN
23021: IFFALSE 23084
// begin RemoveBuildingFromVariables ( base , captured_building ) ;
23023: LD_VAR 0 5
23027: PPUSH
23028: LD_VAR 0 1
23032: PPUSH
23033: CALL 11362 0 2
// temp_list = ai_captured_buildings [ base ] ^ captured_building ;
23037: LD_ADDR_VAR 0 4
23041: PUSH
23042: LD_EXP 79
23046: PUSH
23047: LD_VAR 0 5
23051: ARRAY
23052: PUSH
23053: LD_VAR 0 1
23057: ADD
23058: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
23059: LD_ADDR_EXP 79
23063: PUSH
23064: LD_EXP 79
23068: PPUSH
23069: LD_VAR 0 5
23073: PPUSH
23074: LD_VAR 0 4
23078: PPUSH
23079: CALL_OW 1
23083: ST_TO_ADDR
// end ; end else
23084: GO 23219
// begin if GetSide ( captured_building ) = GetBaseSide ( base ) then
23086: LD_VAR 0 1
23090: PPUSH
23091: CALL_OW 255
23095: PUSH
23096: LD_VAR 0 5
23100: PPUSH
23101: CALL 12735 0 1
23105: EQUAL
23106: IFFALSE 23219
// begin temp_list = ai_all_buildings [ base ] ^ captured_building ;
23108: LD_ADDR_VAR 0 4
23112: PUSH
23113: LD_EXP 45
23117: PUSH
23118: LD_VAR 0 5
23122: ARRAY
23123: PUSH
23124: LD_VAR 0 1
23128: ADD
23129: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
23130: LD_ADDR_EXP 45
23134: PUSH
23135: LD_EXP 45
23139: PPUSH
23140: LD_VAR 0 5
23144: PPUSH
23145: LD_VAR 0 4
23149: PPUSH
23150: CALL_OW 1
23154: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , captured_building , true ) ;
23155: LD_VAR 0 5
23159: PPUSH
23160: LD_VAR 0 1
23164: PPUSH
23165: LD_INT 1
23167: PPUSH
23168: CALL 7134 0 3
// temp_list = ai_captured_buildings [ base ] diff captured_building ;
23172: LD_ADDR_VAR 0 4
23176: PUSH
23177: LD_EXP 79
23181: PUSH
23182: LD_VAR 0 5
23186: ARRAY
23187: PUSH
23188: LD_VAR 0 1
23192: DIFF
23193: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
23194: LD_ADDR_EXP 79
23198: PUSH
23199: LD_EXP 79
23203: PPUSH
23204: LD_VAR 0 5
23208: PPUSH
23209: LD_VAR 0 4
23213: PPUSH
23214: CALL_OW 1
23218: ST_TO_ADDR
// end ; end ; end ;
23219: PPOPN 5
23221: END
// on UnitGoesToRed ( un ) do begin if un in ai_depot then
23222: LD_VAR 0 1
23226: PUSH
23227: LD_EXP 35
23231: IN
23232: IFFALSE 23547
// begin case un of ai_depot [ 1 ] :
23234: LD_VAR 0 1
23238: PUSH
23239: LD_EXP 35
23243: PUSH
23244: LD_INT 1
23246: ARRAY
23247: DOUBLE
23248: EQUAL
23249: IFTRUE 23253
23251: GO 23348
23253: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
23254: LD_VAR 0 1
23258: PPUSH
23259: CALL_OW 274
23263: PPUSH
23264: LD_INT 1
23266: PPUSH
23267: LD_INT 200
23269: PUSH
23270: LD_INT 0
23272: PPUSH
23273: LD_INT 7
23275: PPUSH
23276: CALL_OW 12
23280: PUSH
23281: LD_INT 10
23283: MUL
23284: PLUS
23285: PPUSH
23286: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 0 ) ;
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 274
23299: PPUSH
23300: LD_INT 2
23302: PPUSH
23303: LD_INT 0
23305: PPUSH
23306: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
23310: LD_VAR 0 1
23314: PPUSH
23315: CALL_OW 274
23319: PPUSH
23320: LD_INT 3
23322: PPUSH
23323: LD_INT 80
23325: PUSH
23326: LD_INT 0
23328: PPUSH
23329: LD_INT 10
23331: PPUSH
23332: CALL_OW 12
23336: PUSH
23337: LD_INT 5
23339: MUL
23340: PLUS
23341: PPUSH
23342: CALL_OW 277
// end ; ai_depot [ 2 ] :
23346: GO 23547
23348: LD_EXP 35
23352: PUSH
23353: LD_INT 2
23355: ARRAY
23356: DOUBLE
23357: EQUAL
23358: IFTRUE 23362
23360: GO 23425
23362: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 100 ) ;
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL_OW 274
23372: PPUSH
23373: LD_INT 1
23375: PPUSH
23376: LD_INT 100
23378: PPUSH
23379: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 55 ) ;
23383: LD_VAR 0 1
23387: PPUSH
23388: CALL_OW 274
23392: PPUSH
23393: LD_INT 2
23395: PPUSH
23396: LD_INT 55
23398: PPUSH
23399: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 20 ) ;
23403: LD_VAR 0 1
23407: PPUSH
23408: CALL_OW 274
23412: PPUSH
23413: LD_INT 3
23415: PPUSH
23416: LD_INT 20
23418: PPUSH
23419: CALL_OW 277
// end ; ai_depot [ 3 ] :
23423: GO 23547
23425: LD_EXP 35
23429: PUSH
23430: LD_INT 3
23432: ARRAY
23433: DOUBLE
23434: EQUAL
23435: IFTRUE 23439
23437: GO 23546
23439: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
23440: LD_VAR 0 1
23444: PPUSH
23445: CALL_OW 274
23449: PPUSH
23450: LD_INT 1
23452: PPUSH
23453: LD_INT 200
23455: PUSH
23456: LD_INT 0
23458: PPUSH
23459: LD_INT 7
23461: PPUSH
23462: CALL_OW 12
23466: PUSH
23467: LD_INT 10
23469: MUL
23470: PLUS
23471: PPUSH
23472: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 400 + Rand ( 0 , 100 ) ) ;
23476: LD_VAR 0 1
23480: PPUSH
23481: CALL_OW 274
23485: PPUSH
23486: LD_INT 2
23488: PPUSH
23489: LD_INT 400
23491: PUSH
23492: LD_INT 0
23494: PPUSH
23495: LD_INT 100
23497: PPUSH
23498: CALL_OW 12
23502: PLUS
23503: PPUSH
23504: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
23508: LD_VAR 0 1
23512: PPUSH
23513: CALL_OW 274
23517: PPUSH
23518: LD_INT 3
23520: PPUSH
23521: LD_INT 80
23523: PUSH
23524: LD_INT 0
23526: PPUSH
23527: LD_INT 10
23529: PPUSH
23530: CALL_OW 12
23534: PUSH
23535: LD_INT 5
23537: MUL
23538: PLUS
23539: PPUSH
23540: CALL_OW 277
// end ; end ;
23544: GO 23547
23546: POP
// end ; end ;
23547: PPOPN 1
23549: END
// export function GetHumansOutOfUnits ( un_list ) ; var i ; begin
23550: LD_INT 0
23552: PPUSH
23553: PPUSH
// result = [ ] ;
23554: LD_ADDR_VAR 0 2
23558: PUSH
23559: EMPTY
23560: ST_TO_ADDR
// for i in un_list do
23561: LD_ADDR_VAR 0 3
23565: PUSH
23566: LD_VAR 0 1
23570: PUSH
23571: FOR_IN
23572: IFFALSE 23648
// case GetType ( IsInUnit ( i ) ) of unit_building :
23574: LD_VAR 0 3
23578: PPUSH
23579: CALL_OW 310
23583: PPUSH
23584: CALL_OW 247
23588: PUSH
23589: LD_INT 3
23591: DOUBLE
23592: EQUAL
23593: IFTRUE 23597
23595: GO 23609
23597: POP
// ComExitBuilding ( i ) ; unit_vehicle :
23598: LD_VAR 0 3
23602: PPUSH
23603: CALL_OW 122
23607: GO 23646
23609: LD_INT 2
23611: DOUBLE
23612: EQUAL
23613: IFTRUE 23617
23615: GO 23629
23617: POP
// ComExitVehicle ( i ) ; else
23618: LD_VAR 0 3
23622: PPUSH
23623: CALL_OW 121
23627: GO 23646
23629: POP
// result = result ^ i ; end ;
23630: LD_ADDR_VAR 0 2
23634: PUSH
23635: LD_VAR 0 2
23639: PUSH
23640: LD_VAR 0 3
23644: ADD
23645: ST_TO_ADDR
23646: GO 23571
23648: POP
23649: POP
// end ;
23650: LD_VAR 0 2
23654: RET
// export function BaseUnderAttack ( base , attack_side ) ; var area , i , val , def_side , temp_list ; begin
23655: LD_INT 0
23657: PPUSH
23658: PPUSH
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
// result = false ;
23663: LD_ADDR_VAR 0 3
23667: PUSH
23668: LD_INT 0
23670: ST_TO_ADDR
// def_side = GetBaseSide ( base ) ;
23671: LD_ADDR_VAR 0 7
23675: PUSH
23676: LD_VAR 0 1
23680: PPUSH
23681: CALL 12735 0 1
23685: ST_TO_ADDR
// area = GetBaseArea ( base ) ;
23686: LD_ADDR_VAR 0 4
23690: PUSH
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL 12664 0 1
23700: ST_TO_ADDR
// if attack_side = def_side then
23701: LD_VAR 0 2
23705: PUSH
23706: LD_VAR 0 7
23710: EQUAL
23711: IFFALSE 23715
// exit ;
23713: GO 24234
// if attack_side = - 1 then
23715: LD_VAR 0 2
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: EQUAL
23724: IFFALSE 23990
// begin if FilterAllUnits ( [ [ f_enemy , def_side ] , [ f_inarea , area ] ] ) > 0 then
23726: LD_INT 81
23728: PUSH
23729: LD_VAR 0 7
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 95
23740: PUSH
23741: LD_VAR 0 4
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PPUSH
23754: CALL_OW 69
23758: PUSH
23759: LD_INT 0
23761: GREATER
23762: IFFALSE 23774
// begin result = true ;
23764: LD_ADDR_VAR 0 3
23768: PUSH
23769: LD_INT 1
23771: ST_TO_ADDR
// exit ;
23772: GO 24234
// end ; val = true ;
23774: LD_ADDR_VAR 0 6
23778: PUSH
23779: LD_INT 1
23781: ST_TO_ADDR
// for i in ai_contact_time [ def_side ] do
23782: LD_ADDR_VAR 0 5
23786: PUSH
23787: LD_EXP 76
23791: PUSH
23792: LD_VAR 0 7
23796: ARRAY
23797: PUSH
23798: FOR_IN
23799: IFFALSE 23823
// if i < 0 0$10 then
23801: LD_VAR 0 5
23805: PUSH
23806: LD_INT 350
23808: LESS
23809: IFFALSE 23821
// begin val = false ;
23811: LD_ADDR_VAR 0 6
23815: PUSH
23816: LD_INT 0
23818: ST_TO_ADDR
// break ;
23819: GO 23823
// end ;
23821: GO 23798
23823: POP
23824: POP
// if ContactTime ( def_side ) >= 0 0$10 and val then
23825: LD_VAR 0 7
23829: PPUSH
23830: CALL_OW 462
23834: PUSH
23835: LD_INT 350
23837: GREATEREQUAL
23838: PUSH
23839: LD_VAR 0 6
23843: AND
23844: IFFALSE 23848
// exit ;
23846: GO 24234
// temp_list = [ ] ;
23848: LD_ADDR_VAR 0 8
23852: PUSH
23853: EMPTY
23854: ST_TO_ADDR
// for i in ( ai_bases diff base ) do
23855: LD_ADDR_VAR 0 5
23859: PUSH
23860: LD_EXP 59
23864: PUSH
23865: LD_VAR 0 1
23869: DIFF
23870: PUSH
23871: FOR_IN
23872: IFFALSE 23918
// temp_list = Insert ( temp_list , 1 , [ f_not , [ f_inarea , GetBaseArea ( i ) ] ] ) ;
23874: LD_ADDR_VAR 0 8
23878: PUSH
23879: LD_VAR 0 8
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: LD_INT 3
23889: PUSH
23890: LD_INT 95
23892: PUSH
23893: LD_VAR 0 5
23897: PPUSH
23898: CALL 12664 0 1
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PPUSH
23911: CALL_OW 2
23915: ST_TO_ADDR
23916: GO 23871
23918: POP
23919: POP
// temp_list = FilterAllUnits ( [ [ f_enemy , def_side ] , [ f_not , [ f_type , unit_building ] ] ] ^ temp_list ) ;
23920: LD_ADDR_VAR 0 8
23924: PUSH
23925: LD_INT 81
23927: PUSH
23928: LD_VAR 0 7
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 3
23939: PUSH
23940: LD_INT 21
23942: PUSH
23943: LD_INT 3
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_VAR 0 8
23962: ADD
23963: PPUSH
23964: CALL_OW 69
23968: ST_TO_ADDR
// if not AnyNearBaseArea ( temp_list , base ) then
23969: LD_VAR 0 8
23973: PPUSH
23974: LD_VAR 0 1
23978: PPUSH
23979: CALL 24310 0 2
23983: NOT
23984: IFFALSE 23988
// exit ;
23986: GO 24234
// end else
23988: GO 24226
// begin if FilterAllUnits ( [ [ f_side , attack_side ] , [ f_inarea , area ] ] ) > 0 then
23990: LD_INT 22
23992: PUSH
23993: LD_VAR 0 2
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 95
24004: PUSH
24005: LD_VAR 0 4
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PPUSH
24018: CALL_OW 69
24022: PUSH
24023: LD_INT 0
24025: GREATER
24026: IFFALSE 24038
// begin result = true ;
24028: LD_ADDR_VAR 0 3
24032: PUSH
24033: LD_INT 1
24035: ST_TO_ADDR
// exit ;
24036: GO 24234
// end ; if ContactTime ( [ def_side , attack_side ] ) >= 0 0$10 and ai_contact_time [ def_side ] [ attack_side ] >= 0 0$10 then
24038: LD_VAR 0 7
24042: PUSH
24043: LD_VAR 0 2
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PPUSH
24052: CALL_OW 462
24056: PUSH
24057: LD_INT 350
24059: GREATEREQUAL
24060: PUSH
24061: LD_EXP 76
24065: PUSH
24066: LD_VAR 0 7
24070: ARRAY
24071: PUSH
24072: LD_VAR 0 2
24076: ARRAY
24077: PUSH
24078: LD_INT 350
24080: GREATEREQUAL
24081: AND
24082: IFFALSE 24086
// exit ;
24084: GO 24234
// temp_list = [ ] ;
24086: LD_ADDR_VAR 0 8
24090: PUSH
24091: EMPTY
24092: ST_TO_ADDR
// for i in ( ai_bases diff base ) do
24093: LD_ADDR_VAR 0 5
24097: PUSH
24098: LD_EXP 59
24102: PUSH
24103: LD_VAR 0 1
24107: DIFF
24108: PUSH
24109: FOR_IN
24110: IFFALSE 24156
// temp_list = Insert ( temp_list , 1 , [ f_not , [ f_inarea , GetBaseArea ( i ) ] ] ) ;
24112: LD_ADDR_VAR 0 8
24116: PUSH
24117: LD_VAR 0 8
24121: PPUSH
24122: LD_INT 1
24124: PPUSH
24125: LD_INT 3
24127: PUSH
24128: LD_INT 95
24130: PUSH
24131: LD_VAR 0 5
24135: PPUSH
24136: CALL 12664 0 1
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PPUSH
24149: CALL_OW 2
24153: ST_TO_ADDR
24154: GO 24109
24156: POP
24157: POP
// temp_list = FilterAllUnits ( [ [ f_side , attack_side ] , [ f_not , [ f_type , unit_building ] ] ] ^ temp_list ) ;
24158: LD_ADDR_VAR 0 8
24162: PUSH
24163: LD_INT 22
24165: PUSH
24166: LD_VAR 0 2
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 3
24177: PUSH
24178: LD_INT 21
24180: PUSH
24181: LD_INT 3
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_VAR 0 8
24200: ADD
24201: PPUSH
24202: CALL_OW 69
24206: ST_TO_ADDR
// if not AnyNearBaseArea ( temp_list , base ) then
24207: LD_VAR 0 8
24211: PPUSH
24212: LD_VAR 0 1
24216: PPUSH
24217: CALL 24310 0 2
24221: NOT
24222: IFFALSE 24226
// exit ;
24224: GO 24234
// end ; result = true ;
24226: LD_ADDR_VAR 0 3
24230: PUSH
24231: LD_INT 1
24233: ST_TO_ADDR
// end ;
24234: LD_VAR 0 3
24238: RET
// export function ListFilterNearArea ( list , area ) ; var i ; begin
24239: LD_INT 0
24241: PPUSH
24242: PPUSH
// result = [ ] ;
24243: LD_ADDR_VAR 0 3
24247: PUSH
24248: EMPTY
24249: ST_TO_ADDR
// for i in list do
24250: LD_ADDR_VAR 0 4
24254: PUSH
24255: LD_VAR 0 1
24259: PUSH
24260: FOR_IN
24261: IFFALSE 24303
// if GetDistUnitArea ( i , area ) <= ai_near_base_dist then
24263: LD_VAR 0 4
24267: PPUSH
24268: LD_VAR 0 2
24272: PPUSH
24273: CALL_OW 299
24277: PUSH
24278: LD_EXP 53
24282: LESSEQUAL
24283: IFFALSE 24301
// result = result ^ i ;
24285: LD_ADDR_VAR 0 3
24289: PUSH
24290: LD_VAR 0 3
24294: PUSH
24295: LD_VAR 0 4
24299: ADD
24300: ST_TO_ADDR
24301: GO 24260
24303: POP
24304: POP
// end ;
24305: LD_VAR 0 3
24309: RET
// function AnyNearBaseArea ( list , base ) ; var i , area ; begin
24310: LD_INT 0
24312: PPUSH
24313: PPUSH
24314: PPUSH
// result = false ;
24315: LD_ADDR_VAR 0 3
24319: PUSH
24320: LD_INT 0
24322: ST_TO_ADDR
// area = GetBaseArea ( base ) ;
24323: LD_ADDR_VAR 0 5
24327: PUSH
24328: LD_VAR 0 2
24332: PPUSH
24333: CALL 12664 0 1
24337: ST_TO_ADDR
// for i in list do
24338: LD_ADDR_VAR 0 4
24342: PUSH
24343: LD_VAR 0 1
24347: PUSH
24348: FOR_IN
24349: IFFALSE 24385
// if GetDistUnitArea ( i , area ) <= ai_near_base_dist then
24351: LD_VAR 0 4
24355: PPUSH
24356: LD_VAR 0 5
24360: PPUSH
24361: CALL_OW 299
24365: PUSH
24366: LD_EXP 53
24370: LESSEQUAL
24371: IFFALSE 24383
// begin result = true ;
24373: LD_ADDR_VAR 0 3
24377: PUSH
24378: LD_INT 1
24380: ST_TO_ADDR
// break ;
24381: GO 24385
// end ;
24383: GO 24348
24385: POP
24386: POP
// end ;
24387: LD_VAR 0 3
24391: RET
// on Command ( com ) do var i , temp_list , hex_list , un , k , target_hex ;
24392: LD_INT 0
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
24398: PPUSH
24399: PPUSH
// begin CheckCamerasOnCommand ( com ) ;
24400: LD_VAR 0 1
24404: PPUSH
24405: CALL 45572 0 1
// if com = 124 then
24409: LD_VAR 0 1
24413: PUSH
24414: LD_INT 124
24416: EQUAL
24417: IFFALSE 24828
// begin for i in FilterAllUnits ( [ f_side , you ] ) do
24419: LD_ADDR_VAR 0 2
24423: PUSH
24424: LD_INT 22
24426: PUSH
24427: LD_EXP 3
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PPUSH
24436: CALL_OW 69
24440: PUSH
24441: FOR_IN
24442: IFFALSE 24826
// if IsSelected ( i ) and HasTask ( i ) then
24444: LD_VAR 0 2
24448: PPUSH
24449: CALL_OW 306
24453: PUSH
24454: LD_VAR 0 2
24458: PPUSH
24459: CALL_OW 314
24463: AND
24464: IFFALSE 24824
// begin target_hex = [ ] ;
24466: LD_ADDR_VAR 0 7
24470: PUSH
24471: EMPTY
24472: ST_TO_ADDR
// for k in GetTaskList ( i ) do
24473: LD_ADDR_VAR 0 6
24477: PUSH
24478: LD_VAR 0 2
24482: PPUSH
24483: CALL_OW 437
24487: PUSH
24488: FOR_IN
24489: IFFALSE 24536
// if k [ 1 ] = | then
24491: LD_VAR 0 6
24495: PUSH
24496: LD_INT 1
24498: ARRAY
24499: PUSH
24500: LD_STRING |
24502: EQUAL
24503: IFFALSE 24534
// begin target_hex = [ k [ 2 ] , k [ 3 ] ] ;
24505: LD_ADDR_VAR 0 7
24509: PUSH
24510: LD_VAR 0 6
24514: PUSH
24515: LD_INT 2
24517: ARRAY
24518: PUSH
24519: LD_VAR 0 6
24523: PUSH
24524: LD_INT 3
24526: ARRAY
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: ST_TO_ADDR
// break ;
24532: GO 24536
// end ;
24534: GO 24488
24536: POP
24537: POP
// if target_hex > 0 then
24538: LD_VAR 0 7
24542: PUSH
24543: LD_INT 0
24545: GREATER
24546: IFFALSE 24824
// begin hex_list = target_hex ;
24548: LD_ADDR_VAR 0 4
24552: PUSH
24553: LD_VAR 0 7
24557: ST_TO_ADDR
// temp_list = [ ] ;
24558: LD_ADDR_VAR 0 3
24562: PUSH
24563: EMPTY
24564: ST_TO_ADDR
// for k = 0 to 5 do
24565: LD_ADDR_VAR 0 6
24569: PUSH
24570: DOUBLE
24571: LD_INT 0
24573: DEC
24574: ST_TO_ADDR
24575: LD_INT 5
24577: PUSH
24578: FOR_TO
24579: IFFALSE 24649
// temp_list = Insert ( temp_list , 1 , [ ShiftX ( hex_list [ 1 ] , k , 1 ) , ShiftY ( hex_list [ 2 ] , k , 1 ) ] ) ;
24581: LD_ADDR_VAR 0 3
24585: PUSH
24586: LD_VAR 0 3
24590: PPUSH
24591: LD_INT 1
24593: PPUSH
24594: LD_VAR 0 4
24598: PUSH
24599: LD_INT 1
24601: ARRAY
24602: PPUSH
24603: LD_VAR 0 6
24607: PPUSH
24608: LD_INT 1
24610: PPUSH
24611: CALL_OW 272
24615: PUSH
24616: LD_VAR 0 4
24620: PUSH
24621: LD_INT 2
24623: ARRAY
24624: PPUSH
24625: LD_VAR 0 6
24629: PPUSH
24630: LD_INT 1
24632: PPUSH
24633: CALL_OW 273
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PPUSH
24642: CALL_OW 2
24646: ST_TO_ADDR
24647: GO 24578
24649: POP
24650: POP
// hex_list = [ hex_list ] ^ temp_list ;
24651: LD_ADDR_VAR 0 4
24655: PUSH
24656: LD_VAR 0 4
24660: PUSH
24661: EMPTY
24662: LIST
24663: PUSH
24664: LD_VAR 0 3
24668: ADD
24669: ST_TO_ADDR
// temp_list = [ ] ;
24670: LD_ADDR_VAR 0 3
24674: PUSH
24675: EMPTY
24676: ST_TO_ADDR
// for k in hex_list do
24677: LD_ADDR_VAR 0 6
24681: PUSH
24682: LD_VAR 0 4
24686: PUSH
24687: FOR_IN
24688: IFFALSE 24822
// begin un = HexInfo ( k [ 1 ] , k [ 2 ] ) ;
24690: LD_ADDR_VAR 0 5
24694: PUSH
24695: LD_VAR 0 6
24699: PUSH
24700: LD_INT 1
24702: ARRAY
24703: PPUSH
24704: LD_VAR 0 6
24708: PUSH
24709: LD_INT 2
24711: ARRAY
24712: PPUSH
24713: CALL_OW 428
24717: ST_TO_ADDR
// if un > 0 and not un in temp_list then
24718: LD_VAR 0 5
24722: PUSH
24723: LD_INT 0
24725: GREATER
24726: PUSH
24727: LD_VAR 0 5
24731: PUSH
24732: LD_VAR 0 3
24736: IN
24737: NOT
24738: AND
24739: IFFALSE 24820
// begin ai_attack_ground_info_initial = Insert ( ai_attack_ground_info_initial , 1 , [ i , un , GetSide ( un ) , target_hex [ 1 ] , target_hex [ 2 ] ] ) ;
24741: LD_ADDR_EXP 77
24745: PUSH
24746: LD_EXP 77
24750: PPUSH
24751: LD_INT 1
24753: PPUSH
24754: LD_VAR 0 2
24758: PUSH
24759: LD_VAR 0 5
24763: PUSH
24764: LD_VAR 0 5
24768: PPUSH
24769: CALL_OW 255
24773: PUSH
24774: LD_VAR 0 7
24778: PUSH
24779: LD_INT 1
24781: ARRAY
24782: PUSH
24783: LD_VAR 0 7
24787: PUSH
24788: LD_INT 2
24790: ARRAY
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: PPUSH
24799: CALL_OW 2
24803: ST_TO_ADDR
// temp_list = temp_list ^ un ;
24804: LD_ADDR_VAR 0 3
24808: PUSH
24809: LD_VAR 0 3
24813: PUSH
24814: LD_VAR 0 5
24818: ADD
24819: ST_TO_ADDR
// end ; end ;
24820: GO 24687
24822: POP
24823: POP
// end ; end ;
24824: GO 24441
24826: POP
24827: POP
// end ; end ;
24828: PPOPN 7
24830: END
// every 0 0$1 + 0 0$0.1 do var a , b , temp_list , temp_list_2 , yup , i , t ;
24831: GO 24833
24833: DISABLE
24834: LD_INT 0
24836: PPUSH
24837: PPUSH
24838: PPUSH
24839: PPUSH
24840: PPUSH
24841: PPUSH
24842: PPUSH
// begin repeat wait ( 0 0$0.5 ) ;
24843: LD_INT 18
24845: PPUSH
24846: CALL_OW 67
// i = 1 ;
24850: LD_ADDR_VAR 0 6
24854: PUSH
24855: LD_INT 1
24857: ST_TO_ADDR
// while i <= ai_attack_ground_info_initial do
24858: LD_VAR 0 6
24862: PUSH
24863: LD_EXP 77
24867: LESSEQUAL
24868: IFFALSE 25031
// begin yup = false ;
24870: LD_ADDR_VAR 0 5
24874: PUSH
24875: LD_INT 0
24877: ST_TO_ADDR
// for t in GetTaskList ( ai_attack_ground_info_initial [ i ] [ 1 ] ) do
24878: LD_ADDR_VAR 0 7
24882: PUSH
24883: LD_EXP 77
24887: PUSH
24888: LD_VAR 0 6
24892: ARRAY
24893: PUSH
24894: LD_INT 1
24896: ARRAY
24897: PPUSH
24898: CALL_OW 437
24902: PUSH
24903: FOR_IN
24904: IFFALSE 24984
// if t [ 1 ] = | then
24906: LD_VAR 0 7
24910: PUSH
24911: LD_INT 1
24913: ARRAY
24914: PUSH
24915: LD_STRING |
24917: EQUAL
24918: IFFALSE 24982
// if t [ 2 ] = ai_attack_ground_info_initial [ i ] [ 4 ] and t [ 3 ] = ai_attack_ground_info_initial [ i ] [ 5 ] then
24920: LD_VAR 0 7
24924: PUSH
24925: LD_INT 2
24927: ARRAY
24928: PUSH
24929: LD_EXP 77
24933: PUSH
24934: LD_VAR 0 6
24938: ARRAY
24939: PUSH
24940: LD_INT 4
24942: ARRAY
24943: EQUAL
24944: PUSH
24945: LD_VAR 0 7
24949: PUSH
24950: LD_INT 3
24952: ARRAY
24953: PUSH
24954: LD_EXP 77
24958: PUSH
24959: LD_VAR 0 6
24963: ARRAY
24964: PUSH
24965: LD_INT 5
24967: ARRAY
24968: EQUAL
24969: AND
24970: IFFALSE 24982
// begin yup = true ;
24972: LD_ADDR_VAR 0 5
24976: PUSH
24977: LD_INT 1
24979: ST_TO_ADDR
// break ;
24980: GO 24984
// end ;
24982: GO 24903
24984: POP
24985: POP
// if not yup then
24986: LD_VAR 0 5
24990: NOT
24991: IFFALSE 25015
// begin ai_attack_ground_info_initial = Delete ( ai_attack_ground_info_initial , i ) ;
24993: LD_ADDR_EXP 77
24997: PUSH
24998: LD_EXP 77
25002: PPUSH
25003: LD_VAR 0 6
25007: PPUSH
25008: CALL_OW 3
25012: ST_TO_ADDR
// continue ;
25013: GO 24858
// end ; i = i + 1 ;
25015: LD_ADDR_VAR 0 6
25019: PUSH
25020: LD_VAR 0 6
25024: PUSH
25025: LD_INT 1
25027: PLUS
25028: ST_TO_ADDR
// end ;
25029: GO 24858
// i = 1 ;
25031: LD_ADDR_VAR 0 6
25035: PUSH
25036: LD_INT 1
25038: ST_TO_ADDR
// while i <= ai_attack_ground_info_sustain do
25039: LD_VAR 0 6
25043: PUSH
25044: LD_EXP 78
25048: LESSEQUAL
25049: IFFALSE 25212
// begin yup = false ;
25051: LD_ADDR_VAR 0 5
25055: PUSH
25056: LD_INT 0
25058: ST_TO_ADDR
// for t in GetTaskList ( ai_attack_ground_info_sustain [ i ] [ 1 ] ) do
25059: LD_ADDR_VAR 0 7
25063: PUSH
25064: LD_EXP 78
25068: PUSH
25069: LD_VAR 0 6
25073: ARRAY
25074: PUSH
25075: LD_INT 1
25077: ARRAY
25078: PPUSH
25079: CALL_OW 437
25083: PUSH
25084: FOR_IN
25085: IFFALSE 25165
// if t [ 1 ] = | then
25087: LD_VAR 0 7
25091: PUSH
25092: LD_INT 1
25094: ARRAY
25095: PUSH
25096: LD_STRING |
25098: EQUAL
25099: IFFALSE 25163
// if t [ 2 ] = ai_attack_ground_info_sustain [ i ] [ 4 ] and t [ 3 ] = ai_attack_ground_info_sustain [ i ] [ 5 ] then
25101: LD_VAR 0 7
25105: PUSH
25106: LD_INT 2
25108: ARRAY
25109: PUSH
25110: LD_EXP 78
25114: PUSH
25115: LD_VAR 0 6
25119: ARRAY
25120: PUSH
25121: LD_INT 4
25123: ARRAY
25124: EQUAL
25125: PUSH
25126: LD_VAR 0 7
25130: PUSH
25131: LD_INT 3
25133: ARRAY
25134: PUSH
25135: LD_EXP 78
25139: PUSH
25140: LD_VAR 0 6
25144: ARRAY
25145: PUSH
25146: LD_INT 5
25148: ARRAY
25149: EQUAL
25150: AND
25151: IFFALSE 25163
// begin yup = true ;
25153: LD_ADDR_VAR 0 5
25157: PUSH
25158: LD_INT 1
25160: ST_TO_ADDR
// break ;
25161: GO 25165
// end ;
25163: GO 25084
25165: POP
25166: POP
// if not yup then
25167: LD_VAR 0 5
25171: NOT
25172: IFFALSE 25196
// begin ai_attack_ground_info_sustain = Delete ( ai_attack_ground_info_sustain , i ) ;
25174: LD_ADDR_EXP 78
25178: PUSH
25179: LD_EXP 78
25183: PPUSH
25184: LD_VAR 0 6
25188: PPUSH
25189: CALL_OW 3
25193: ST_TO_ADDR
// continue ;
25194: GO 25039
// end ; i = i + 1 ;
25196: LD_ADDR_VAR 0 6
25200: PUSH
25201: LD_VAR 0 6
25205: PUSH
25206: LD_INT 1
25208: PLUS
25209: ST_TO_ADDR
// end ;
25210: GO 25039
// temp_list = ai_contact_time ;
25212: LD_ADDR_VAR 0 3
25216: PUSH
25217: LD_EXP 76
25221: ST_TO_ADDR
// for a = 1 to temp_list do
25222: LD_ADDR_VAR 0 1
25226: PUSH
25227: DOUBLE
25228: LD_INT 1
25230: DEC
25231: ST_TO_ADDR
25232: LD_VAR 0 3
25236: PUSH
25237: FOR_TO
25238: IFFALSE 25364
// for b = 1 to temp_list [ a ] do
25240: LD_ADDR_VAR 0 2
25244: PUSH
25245: DOUBLE
25246: LD_INT 1
25248: DEC
25249: ST_TO_ADDR
25250: LD_VAR 0 3
25254: PUSH
25255: LD_VAR 0 1
25259: ARRAY
25260: PUSH
25261: FOR_TO
25262: IFFALSE 25360
// if temp_list [ a ] [ b ] < 100000 then
25264: LD_VAR 0 3
25268: PUSH
25269: LD_VAR 0 1
25273: ARRAY
25274: PUSH
25275: LD_VAR 0 2
25279: ARRAY
25280: PUSH
25281: LD_INT 100000
25283: LESS
25284: IFFALSE 25358
// begin temp_list_2 = Replace ( ai_contact_time [ a ] , b , temp_list [ a ] [ b ] + 0 0$0.5 ) ;
25286: LD_ADDR_VAR 0 4
25290: PUSH
25291: LD_EXP 76
25295: PUSH
25296: LD_VAR 0 1
25300: ARRAY
25301: PPUSH
25302: LD_VAR 0 2
25306: PPUSH
25307: LD_VAR 0 3
25311: PUSH
25312: LD_VAR 0 1
25316: ARRAY
25317: PUSH
25318: LD_VAR 0 2
25322: ARRAY
25323: PUSH
25324: LD_INT 18
25326: PLUS
25327: PPUSH
25328: CALL_OW 1
25332: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a , temp_list_2 ) ;
25333: LD_ADDR_EXP 76
25337: PUSH
25338: LD_EXP 76
25342: PPUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: LD_VAR 0 4
25352: PPUSH
25353: CALL_OW 1
25357: ST_TO_ADDR
// end ;
25358: GO 25261
25360: POP
25361: POP
25362: GO 25237
25364: POP
25365: POP
// for a in ai_attack_ground_info_initial do
25366: LD_ADDR_VAR 0 1
25370: PUSH
25371: LD_EXP 77
25375: PUSH
25376: FOR_IN
25377: IFFALSE 25583
// begin if IsDead ( a [ 2 ] ) or UnitShoot ( a [ 2 ] ) = a [ 1 ] then
25379: LD_VAR 0 1
25383: PUSH
25384: LD_INT 2
25386: ARRAY
25387: PPUSH
25388: CALL_OW 301
25392: PUSH
25393: LD_VAR 0 1
25397: PUSH
25398: LD_INT 2
25400: ARRAY
25401: PPUSH
25402: CALL_OW 504
25406: PUSH
25407: LD_VAR 0 1
25411: PUSH
25412: LD_INT 1
25414: ARRAY
25415: EQUAL
25416: OR
25417: IFFALSE 25581
// begin temp_list = Replace ( ai_contact_time [ you ] , a [ 3 ] , 0 ) ;
25419: LD_ADDR_VAR 0 3
25423: PUSH
25424: LD_EXP 76
25428: PUSH
25429: LD_EXP 3
25433: ARRAY
25434: PPUSH
25435: LD_VAR 0 1
25439: PUSH
25440: LD_INT 3
25442: ARRAY
25443: PPUSH
25444: LD_INT 0
25446: PPUSH
25447: CALL_OW 1
25451: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , you , temp_list ) ;
25452: LD_ADDR_EXP 76
25456: PUSH
25457: LD_EXP 76
25461: PPUSH
25462: LD_EXP 3
25466: PPUSH
25467: LD_VAR 0 3
25471: PPUSH
25472: CALL_OW 1
25476: ST_TO_ADDR
// temp_list = Replace ( ai_contact_time [ a [ 3 ] ] , you , 0 ) ;
25477: LD_ADDR_VAR 0 3
25481: PUSH
25482: LD_EXP 76
25486: PUSH
25487: LD_VAR 0 1
25491: PUSH
25492: LD_INT 3
25494: ARRAY
25495: ARRAY
25496: PPUSH
25497: LD_EXP 3
25501: PPUSH
25502: LD_INT 0
25504: PPUSH
25505: CALL_OW 1
25509: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a [ 3 ] , temp_list ) ;
25510: LD_ADDR_EXP 76
25514: PUSH
25515: LD_EXP 76
25519: PPUSH
25520: LD_VAR 0 1
25524: PUSH
25525: LD_INT 3
25527: ARRAY
25528: PPUSH
25529: LD_VAR 0 3
25533: PPUSH
25534: CALL_OW 1
25538: ST_TO_ADDR
// ai_attack_ground_info_initial = ai_attack_ground_info_initial diff [ a ] ;
25539: LD_ADDR_EXP 77
25543: PUSH
25544: LD_EXP 77
25548: PUSH
25549: LD_VAR 0 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: DIFF
25557: ST_TO_ADDR
// ai_attack_ground_info_sustain = Insert ( ai_attack_ground_info_sustain , 1 , a ) ;
25558: LD_ADDR_EXP 78
25562: PUSH
25563: LD_EXP 78
25567: PPUSH
25568: LD_INT 1
25570: PPUSH
25571: LD_VAR 0 1
25575: PPUSH
25576: CALL_OW 2
25580: ST_TO_ADDR
// end ; end ;
25581: GO 25376
25583: POP
25584: POP
// for a in ai_attack_ground_info_sustain do
25585: LD_ADDR_VAR 0 1
25589: PUSH
25590: LD_EXP 78
25594: PUSH
25595: FOR_IN
25596: IFFALSE 25720
// begin temp_list = Replace ( ai_contact_time [ you ] , a [ 3 ] , 0 ) ;
25598: LD_ADDR_VAR 0 3
25602: PUSH
25603: LD_EXP 76
25607: PUSH
25608: LD_EXP 3
25612: ARRAY
25613: PPUSH
25614: LD_VAR 0 1
25618: PUSH
25619: LD_INT 3
25621: ARRAY
25622: PPUSH
25623: LD_INT 0
25625: PPUSH
25626: CALL_OW 1
25630: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , you , temp_list ) ;
25631: LD_ADDR_EXP 76
25635: PUSH
25636: LD_EXP 76
25640: PPUSH
25641: LD_EXP 3
25645: PPUSH
25646: LD_VAR 0 3
25650: PPUSH
25651: CALL_OW 1
25655: ST_TO_ADDR
// temp_list = Replace ( ai_contact_time [ a [ 3 ] ] , you , 0 ) ;
25656: LD_ADDR_VAR 0 3
25660: PUSH
25661: LD_EXP 76
25665: PUSH
25666: LD_VAR 0 1
25670: PUSH
25671: LD_INT 3
25673: ARRAY
25674: ARRAY
25675: PPUSH
25676: LD_EXP 3
25680: PPUSH
25681: LD_INT 0
25683: PPUSH
25684: CALL_OW 1
25688: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a [ 3 ] , temp_list ) ;
25689: LD_ADDR_EXP 76
25693: PUSH
25694: LD_EXP 76
25698: PPUSH
25699: LD_VAR 0 1
25703: PUSH
25704: LD_INT 3
25706: ARRAY
25707: PPUSH
25708: LD_VAR 0 3
25712: PPUSH
25713: CALL_OW 1
25717: ST_TO_ADDR
// end ;
25718: GO 25595
25720: POP
25721: POP
// until false ;
25722: LD_INT 0
25724: IFFALSE 24843
// end ;
25726: PPOPN 7
25728: END
// every 0 0$1 do var side , i , mechanics_list , temp_list , taken_vehicles , temp_list_3 , temp_unit , vehicles_list , allowed_to_repair_vehicles ; var under_attack , free_parking_spots , k , ready_to_attack , base , area , free_spaces , temp_list_2 , remote_mechanics ; var destroy_gensher_base , temp_list_4 , temp_list_5 , n , a ; var remote_driver_vehicles ;
25729: GO 25731
25731: DISABLE
25732: LD_INT 0
25734: PPUSH
25735: PPUSH
25736: PPUSH
25737: PPUSH
25738: PPUSH
25739: PPUSH
25740: PPUSH
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
25745: PPUSH
25746: PPUSH
25747: PPUSH
25748: PPUSH
25749: PPUSH
25750: PPUSH
25751: PPUSH
25752: PPUSH
25753: PPUSH
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
// begin remote_driver_vehicles = [ [ ] , [ ] , [ ] ] ;
25758: LD_ADDR_VAR 0 24
25762: PUSH
25763: EMPTY
25764: PUSH
25765: EMPTY
25766: PUSH
25767: EMPTY
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25774: LD_INT 35
25776: PPUSH
25777: CALL_OW 67
// for base in ai_bases do
25781: LD_ADDR_VAR 0 14
25785: PUSH
25786: LD_EXP 59
25790: PUSH
25791: FOR_IN
25792: IFFALSE 30406
// begin side = GetBaseSide ( base ) ;
25794: LD_ADDR_VAR 0 1
25798: PUSH
25799: LD_VAR 0 14
25803: PPUSH
25804: CALL 12735 0 1
25808: ST_TO_ADDR
// under_attack = BaseUnderAttack ( base , - 1 ) ;
25809: LD_ADDR_VAR 0 10
25813: PUSH
25814: LD_VAR 0 14
25818: PPUSH
25819: LD_INT 1
25821: NEG
25822: PPUSH
25823: CALL 23655 0 2
25827: ST_TO_ADDR
// ready_to_attack = not under_attack ;
25828: LD_ADDR_VAR 0 13
25832: PUSH
25833: LD_VAR 0 10
25837: NOT
25838: ST_TO_ADDR
// if base = 1 and GetAttitude ( americans , you_alt ) = att_enemy and FilterAllUnits ( [ [ f_inarea , Gensher_base ] , [ f_type , unit_building ] ] ) > 0 then
25839: LD_VAR 0 14
25843: PUSH
25844: LD_INT 1
25846: EQUAL
25847: PUSH
25848: LD_EXP 7
25852: PPUSH
25853: LD_EXP 6
25857: PPUSH
25858: CALL_OW 81
25862: PUSH
25863: LD_INT 2
25865: EQUAL
25866: AND
25867: PUSH
25868: LD_INT 95
25870: PUSH
25871: LD_INT 7
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 21
25880: PUSH
25881: LD_INT 3
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PPUSH
25892: CALL_OW 69
25896: PUSH
25897: LD_INT 0
25899: GREATER
25900: AND
25901: IFFALSE 25913
// destroy_gensher_base = true else
25903: LD_ADDR_VAR 0 19
25907: PUSH
25908: LD_INT 1
25910: ST_TO_ADDR
25911: GO 25921
// destroy_gensher_base = false ;
25913: LD_ADDR_VAR 0 19
25917: PUSH
25918: LD_INT 0
25920: ST_TO_ADDR
// mechanics_list = ai_mechanics_defend [ base ] diff ai_heal_these_humans [ base ] ;
25921: LD_ADDR_VAR 0 3
25925: PUSH
25926: LD_EXP 32
25930: PUSH
25931: LD_VAR 0 14
25935: ARRAY
25936: PUSH
25937: LD_EXP 44
25941: PUSH
25942: LD_VAR 0 14
25946: ARRAY
25947: DIFF
25948: ST_TO_ADDR
// remote_mechanics = [ ] ;
25949: LD_ADDR_VAR 0 18
25953: PUSH
25954: EMPTY
25955: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
25956: LD_ADDR_VAR 0 4
25960: PUSH
25961: LD_EXP 44
25965: PUSH
25966: LD_VAR 0 14
25970: ARRAY
25971: ST_TO_ADDR
// i = 1 ;
25972: LD_ADDR_VAR 0 2
25976: PUSH
25977: LD_INT 1
25979: ST_TO_ADDR
// while i <= mechanics_list do
25980: LD_VAR 0 2
25984: PUSH
25985: LD_VAR 0 3
25989: LESSEQUAL
25990: IFFALSE 26073
// begin if GetLives ( mechanics_list [ i ] ) <= 900 then
25992: LD_VAR 0 3
25996: PUSH
25997: LD_VAR 0 2
26001: ARRAY
26002: PPUSH
26003: CALL_OW 256
26007: PUSH
26008: LD_INT 900
26010: LESSEQUAL
26011: IFFALSE 26057
// begin temp_list = temp_list ^ mechanics_list [ i ] ;
26013: LD_ADDR_VAR 0 4
26017: PUSH
26018: LD_VAR 0 4
26022: PUSH
26023: LD_VAR 0 3
26027: PUSH
26028: LD_VAR 0 2
26032: ARRAY
26033: ADD
26034: ST_TO_ADDR
// mechanics_list = Delete ( mechanics_list , i ) ;
26035: LD_ADDR_VAR 0 3
26039: PUSH
26040: LD_VAR 0 3
26044: PPUSH
26045: LD_VAR 0 2
26049: PPUSH
26050: CALL_OW 3
26054: ST_TO_ADDR
// continue ;
26055: GO 25980
// end ; i = i + 1 ;
26057: LD_ADDR_VAR 0 2
26061: PUSH
26062: LD_VAR 0 2
26066: PUSH
26067: LD_INT 1
26069: PLUS
26070: ST_TO_ADDR
// end ;
26071: GO 25980
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
26073: LD_ADDR_EXP 44
26077: PUSH
26078: LD_EXP 44
26082: PPUSH
26083: LD_VAR 0 14
26087: PPUSH
26088: LD_VAR 0 4
26092: PPUSH
26093: CALL_OW 1
26097: ST_TO_ADDR
// if ai_control_tower [ base ] > 0 then
26098: LD_EXP 57
26102: PUSH
26103: LD_VAR 0 14
26107: ARRAY
26108: PUSH
26109: LD_INT 0
26111: GREATER
26112: IFFALSE 27050
// begin temp_list = remote_driver_vehicles [ base ] ;
26114: LD_ADDR_VAR 0 4
26118: PUSH
26119: LD_VAR 0 24
26123: PUSH
26124: LD_VAR 0 14
26128: ARRAY
26129: ST_TO_ADDR
// vehicles_list = [ ] ;
26130: LD_ADDR_VAR 0 8
26134: PUSH
26135: EMPTY
26136: ST_TO_ADDR
// i = 1 ;
26137: LD_ADDR_VAR 0 2
26141: PUSH
26142: LD_INT 1
26144: ST_TO_ADDR
// while i <= temp_list do
26145: LD_VAR 0 2
26149: PUSH
26150: LD_VAR 0 4
26154: LESSEQUAL
26155: IFFALSE 26427
// begin if IsDead ( temp_list [ i ] [ 1 ] ) then
26157: LD_VAR 0 4
26161: PUSH
26162: LD_VAR 0 2
26166: ARRAY
26167: PUSH
26168: LD_INT 1
26170: ARRAY
26171: PPUSH
26172: CALL_OW 301
26176: IFFALSE 26202
// begin temp_list = Delete ( temp_list , i ) ;
26178: LD_ADDR_VAR 0 4
26182: PUSH
26183: LD_VAR 0 4
26187: PPUSH
26188: LD_VAR 0 2
26192: PPUSH
26193: CALL_OW 3
26197: ST_TO_ADDR
// continue ;
26198: GO 26145
// end else
26200: GO 26385
// begin temp_list_3 = temp_list [ i ] [ 2 ] ;
26202: LD_ADDR_VAR 0 6
26206: PUSH
26207: LD_VAR 0 4
26211: PUSH
26212: LD_VAR 0 2
26216: ARRAY
26217: PUSH
26218: LD_INT 2
26220: ARRAY
26221: ST_TO_ADDR
// k = 1 ;
26222: LD_ADDR_VAR 0 12
26226: PUSH
26227: LD_INT 1
26229: ST_TO_ADDR
// while k <= temp_list_3 do
26230: LD_VAR 0 12
26234: PUSH
26235: LD_VAR 0 6
26239: LESSEQUAL
26240: IFFALSE 26297
// begin if IsDead ( temp_list_3 [ k ] ) then
26242: LD_VAR 0 6
26246: PUSH
26247: LD_VAR 0 12
26251: ARRAY
26252: PPUSH
26253: CALL_OW 301
26257: IFFALSE 26281
// begin temp_list_3 = Delete ( temp_list_3 , k ) ;
26259: LD_ADDR_VAR 0 6
26263: PUSH
26264: LD_VAR 0 6
26268: PPUSH
26269: LD_VAR 0 12
26273: PPUSH
26274: CALL_OW 3
26278: ST_TO_ADDR
// continue ;
26279: GO 26230
// end ; k = k + 1 ;
26281: LD_ADDR_VAR 0 12
26285: PUSH
26286: LD_VAR 0 12
26290: PUSH
26291: LD_INT 1
26293: PLUS
26294: ST_TO_ADDR
// end ;
26295: GO 26230
// if temp_list_3 > 0 then
26297: LD_VAR 0 6
26301: PUSH
26302: LD_INT 0
26304: GREATER
26305: IFFALSE 26363
// begin temp_list_2 = Replace ( temp_list [ i ] , 2 , temp_list_3 ) ;
26307: LD_ADDR_VAR 0 17
26311: PUSH
26312: LD_VAR 0 4
26316: PUSH
26317: LD_VAR 0 2
26321: ARRAY
26322: PPUSH
26323: LD_INT 2
26325: PPUSH
26326: LD_VAR 0 6
26330: PPUSH
26331: CALL_OW 1
26335: ST_TO_ADDR
// temp_list = Replace ( temp_list , i , temp_list_2 ) ;
26336: LD_ADDR_VAR 0 4
26340: PUSH
26341: LD_VAR 0 4
26345: PPUSH
26346: LD_VAR 0 2
26350: PPUSH
26351: LD_VAR 0 17
26355: PPUSH
26356: CALL_OW 1
26360: ST_TO_ADDR
// end else
26361: GO 26385
// begin temp_list = Delete ( temp_list , i ) ;
26363: LD_ADDR_VAR 0 4
26367: PUSH
26368: LD_VAR 0 4
26372: PPUSH
26373: LD_VAR 0 2
26377: PPUSH
26378: CALL_OW 3
26382: ST_TO_ADDR
// continue ;
26383: GO 26145
// end ; end ; vehicles_list = vehicles_list ^ temp_list [ i ] [ 2 ] ;
26385: LD_ADDR_VAR 0 8
26389: PUSH
26390: LD_VAR 0 8
26394: PUSH
26395: LD_VAR 0 4
26399: PUSH
26400: LD_VAR 0 2
26404: ARRAY
26405: PUSH
26406: LD_INT 2
26408: ARRAY
26409: ADD
26410: ST_TO_ADDR
// i = i + 1 ;
26411: LD_ADDR_VAR 0 2
26415: PUSH
26416: LD_VAR 0 2
26420: PUSH
26421: LD_INT 1
26423: PLUS
26424: ST_TO_ADDR
// end ;
26425: GO 26145
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list ) ;
26427: LD_ADDR_VAR 0 24
26431: PUSH
26432: LD_VAR 0 24
26436: PPUSH
26437: LD_VAR 0 14
26441: PPUSH
26442: LD_VAR 0 4
26446: PPUSH
26447: CALL_OW 1
26451: ST_TO_ADDR
// temp_list = ai_vehicles_defend [ base ] diff vehicles_list ;
26452: LD_ADDR_VAR 0 4
26456: PUSH
26457: LD_EXP 40
26461: PUSH
26462: LD_VAR 0 14
26466: ARRAY
26467: PUSH
26468: LD_VAR 0 8
26472: DIFF
26473: ST_TO_ADDR
// if temp_list > 0 then
26474: LD_VAR 0 4
26478: PUSH
26479: LD_INT 0
26481: GREATER
26482: IFFALSE 26706
// begin temp_list_3 = ai_mechanics_defend [ base ] ;
26484: LD_ADDR_VAR 0 6
26488: PUSH
26489: LD_EXP 32
26493: PUSH
26494: LD_VAR 0 14
26498: ARRAY
26499: ST_TO_ADDR
// for i in remote_driver_vehicles [ base ] do
26500: LD_ADDR_VAR 0 2
26504: PUSH
26505: LD_VAR 0 24
26509: PUSH
26510: LD_VAR 0 14
26514: ARRAY
26515: PUSH
26516: FOR_IN
26517: IFFALSE 26541
// temp_list_3 = temp_list_3 diff i [ 1 ] ;
26519: LD_ADDR_VAR 0 6
26523: PUSH
26524: LD_VAR 0 6
26528: PUSH
26529: LD_VAR 0 2
26533: PUSH
26534: LD_INT 1
26536: ARRAY
26537: DIFF
26538: ST_TO_ADDR
26539: GO 26516
26541: POP
26542: POP
// if temp_list_3 > 0 then
26543: LD_VAR 0 6
26547: PUSH
26548: LD_INT 0
26550: GREATER
26551: IFFALSE 26577
// temp_list_3 = temp_list_3 diff FindMinSkill ( temp_list_3 , skill_mechanical ) ;
26553: LD_ADDR_VAR 0 6
26557: PUSH
26558: LD_VAR 0 6
26562: PUSH
26563: LD_VAR 0 6
26567: PPUSH
26568: LD_INT 3
26570: PPUSH
26571: CALL_OW 443
26575: DIFF
26576: ST_TO_ADDR
// for i in temp_list do
26577: LD_ADDR_VAR 0 2
26581: PUSH
26582: LD_VAR 0 4
26586: PUSH
26587: FOR_IN
26588: IFFALSE 26704
// begin if temp_list_3 = 0 then
26590: LD_VAR 0 6
26594: PUSH
26595: LD_INT 0
26597: EQUAL
26598: IFFALSE 26602
// break ;
26600: GO 26704
// temp_unit = FindMaxSkill ( temp_list_3 , skill_mechanical ) ;
26602: LD_ADDR_VAR 0 7
26606: PUSH
26607: LD_VAR 0 6
26611: PPUSH
26612: LD_INT 3
26614: PPUSH
26615: CALL_OW 433
26619: ST_TO_ADDR
// temp_list_3 = temp_list_3 diff temp_unit ;
26620: LD_ADDR_VAR 0 6
26624: PUSH
26625: LD_VAR 0 6
26629: PUSH
26630: LD_VAR 0 7
26634: DIFF
26635: ST_TO_ADDR
// temp_list_2 = Insert ( remote_driver_vehicles [ base ] , 1 , [ temp_unit , [ i ] ] ) ;
26636: LD_ADDR_VAR 0 17
26640: PUSH
26641: LD_VAR 0 24
26645: PUSH
26646: LD_VAR 0 14
26650: ARRAY
26651: PPUSH
26652: LD_INT 1
26654: PPUSH
26655: LD_VAR 0 7
26659: PUSH
26660: LD_VAR 0 2
26664: PUSH
26665: EMPTY
26666: LIST
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PPUSH
26672: CALL_OW 2
26676: ST_TO_ADDR
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list_2 ) ;
26677: LD_ADDR_VAR 0 24
26681: PUSH
26682: LD_VAR 0 24
26686: PPUSH
26687: LD_VAR 0 14
26691: PPUSH
26692: LD_VAR 0 17
26696: PPUSH
26697: CALL_OW 1
26701: ST_TO_ADDR
// end ;
26702: GO 26587
26704: POP
26705: POP
// end ; for i in remote_driver_vehicles [ base ] do
26706: LD_ADDR_VAR 0 2
26710: PUSH
26711: LD_VAR 0 24
26715: PUSH
26716: LD_VAR 0 14
26720: ARRAY
26721: PUSH
26722: FOR_IN
26723: IFFALSE 26747
// remote_mechanics = remote_mechanics ^ i [ 1 ] ;
26725: LD_ADDR_VAR 0 18
26729: PUSH
26730: LD_VAR 0 18
26734: PUSH
26735: LD_VAR 0 2
26739: PUSH
26740: LD_INT 1
26742: ARRAY
26743: ADD
26744: ST_TO_ADDR
26745: GO 26722
26747: POP
26748: POP
// mechanics_list = mechanics_list diff remote_mechanics ;
26749: LD_ADDR_VAR 0 3
26753: PUSH
26754: LD_VAR 0 3
26758: PUSH
26759: LD_VAR 0 18
26763: DIFF
26764: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff ai_heal_these_humans [ base ] ;
26765: LD_ADDR_VAR 0 18
26769: PUSH
26770: LD_VAR 0 18
26774: PUSH
26775: LD_EXP 44
26779: PUSH
26780: LD_VAR 0 14
26784: ARRAY
26785: DIFF
26786: ST_TO_ADDR
// if mechanics_list = 0 and remote_driver_vehicles [ base ] > 0 then
26787: LD_VAR 0 3
26791: PUSH
26792: LD_INT 0
26794: EQUAL
26795: PUSH
26796: LD_VAR 0 24
26800: PUSH
26801: LD_VAR 0 14
26805: ARRAY
26806: PUSH
26807: LD_INT 0
26809: GREATER
26810: AND
26811: IFFALSE 27048
// begin n = 0 ;
26813: LD_ADDR_VAR 0 22
26817: PUSH
26818: LD_INT 0
26820: ST_TO_ADDR
// a = 9999 ;
26821: LD_ADDR_VAR 0 23
26825: PUSH
26826: LD_INT 9999
26828: ST_TO_ADDR
// for i = 1 to ( remote_driver_vehicles [ base ] + 0 ) do
26829: LD_ADDR_VAR 0 2
26833: PUSH
26834: DOUBLE
26835: LD_INT 1
26837: DEC
26838: ST_TO_ADDR
26839: LD_VAR 0 24
26843: PUSH
26844: LD_VAR 0 14
26848: ARRAY
26849: PUSH
26850: LD_INT 0
26852: PLUS
26853: PUSH
26854: FOR_TO
26855: IFFALSE 26931
// begin if remote_driver_vehicles [ base ] [ i ] [ 2 ] + 0 < a then
26857: LD_VAR 0 24
26861: PUSH
26862: LD_VAR 0 14
26866: ARRAY
26867: PUSH
26868: LD_VAR 0 2
26872: ARRAY
26873: PUSH
26874: LD_INT 2
26876: ARRAY
26877: PUSH
26878: LD_INT 0
26880: PLUS
26881: PUSH
26882: LD_VAR 0 23
26886: LESS
26887: IFFALSE 26929
// begin a = remote_driver_vehicles [ base ] [ i ] [ 2 ] + 0 ;
26889: LD_ADDR_VAR 0 23
26893: PUSH
26894: LD_VAR 0 24
26898: PUSH
26899: LD_VAR 0 14
26903: ARRAY
26904: PUSH
26905: LD_VAR 0 2
26909: ARRAY
26910: PUSH
26911: LD_INT 2
26913: ARRAY
26914: PUSH
26915: LD_INT 0
26917: PLUS
26918: ST_TO_ADDR
// n = i ;
26919: LD_ADDR_VAR 0 22
26923: PUSH
26924: LD_VAR 0 2
26928: ST_TO_ADDR
// end ; end ;
26929: GO 26854
26931: POP
26932: POP
// mechanics_list = mechanics_list ^ remote_driver_vehicles [ base ] [ n ] [ 1 ] ;
26933: LD_ADDR_VAR 0 3
26937: PUSH
26938: LD_VAR 0 3
26942: PUSH
26943: LD_VAR 0 24
26947: PUSH
26948: LD_VAR 0 14
26952: ARRAY
26953: PUSH
26954: LD_VAR 0 22
26958: ARRAY
26959: PUSH
26960: LD_INT 1
26962: ARRAY
26963: ADD
26964: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff remote_driver_vehicles [ base ] [ n ] [ 1 ] ;
26965: LD_ADDR_VAR 0 18
26969: PUSH
26970: LD_VAR 0 18
26974: PUSH
26975: LD_VAR 0 24
26979: PUSH
26980: LD_VAR 0 14
26984: ARRAY
26985: PUSH
26986: LD_VAR 0 22
26990: ARRAY
26991: PUSH
26992: LD_INT 1
26994: ARRAY
26995: DIFF
26996: ST_TO_ADDR
// temp_list_2 = Delete ( remote_driver_vehicles [ base ] , n ) ;
26997: LD_ADDR_VAR 0 17
27001: PUSH
27002: LD_VAR 0 24
27006: PUSH
27007: LD_VAR 0 14
27011: ARRAY
27012: PPUSH
27013: LD_VAR 0 22
27017: PPUSH
27018: CALL_OW 3
27022: ST_TO_ADDR
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list_2 ) ;
27023: LD_ADDR_VAR 0 24
27027: PUSH
27028: LD_VAR 0 24
27032: PPUSH
27033: LD_VAR 0 14
27037: PPUSH
27038: LD_VAR 0 17
27042: PPUSH
27043: CALL_OW 1
27047: ST_TO_ADDR
// end ; end else
27048: GO 27072
// begin remote_driver_vehicles = Replace ( remote_driver_vehicles , base , [ ] ) ;
27050: LD_ADDR_VAR 0 24
27054: PUSH
27055: LD_VAR 0 24
27059: PPUSH
27060: LD_VAR 0 14
27064: PPUSH
27065: EMPTY
27066: PPUSH
27067: CALL_OW 1
27071: ST_TO_ADDR
// end ; temp_list = [ ] ;
27072: LD_ADDR_VAR 0 4
27076: PUSH
27077: EMPTY
27078: ST_TO_ADDR
// for i in ai_vehicles_being_repaired [ base ] do
27079: LD_ADDR_VAR 0 2
27083: PUSH
27084: LD_EXP 80
27088: PUSH
27089: LD_VAR 0 14
27093: ARRAY
27094: PUSH
27095: FOR_IN
27096: IFFALSE 27131
// if GetLives ( i ) < 1000 then
27098: LD_VAR 0 2
27102: PPUSH
27103: CALL_OW 256
27107: PUSH
27108: LD_INT 1000
27110: LESS
27111: IFFALSE 27129
// temp_list = temp_list ^ i ;
27113: LD_ADDR_VAR 0 4
27117: PUSH
27118: LD_VAR 0 4
27122: PUSH
27123: LD_VAR 0 2
27127: ADD
27128: ST_TO_ADDR
27129: GO 27095
27131: POP
27132: POP
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
27133: LD_ADDR_EXP 80
27137: PUSH
27138: LD_EXP 80
27142: PPUSH
27143: LD_VAR 0 14
27147: PPUSH
27148: LD_VAR 0 4
27152: PPUSH
27153: CALL_OW 1
27157: ST_TO_ADDR
// temp_list = [ ] ;
27158: LD_ADDR_VAR 0 4
27162: PUSH
27163: EMPTY
27164: ST_TO_ADDR
// for i in ai_refuel_vehicles_list [ base ] diff ai_vehicles_being_repaired [ base ] do
27165: LD_ADDR_VAR 0 2
27169: PUSH
27170: LD_EXP 55
27174: PUSH
27175: LD_VAR 0 14
27179: ARRAY
27180: PUSH
27181: LD_EXP 80
27185: PUSH
27186: LD_VAR 0 14
27190: ARRAY
27191: DIFF
27192: PUSH
27193: FOR_IN
27194: IFFALSE 27229
// if GetFuel ( i ) < 95 then
27196: LD_VAR 0 2
27200: PPUSH
27201: CALL_OW 261
27205: PUSH
27206: LD_INT 95
27208: LESS
27209: IFFALSE 27227
// temp_list = temp_list ^ i ;
27211: LD_ADDR_VAR 0 4
27215: PUSH
27216: LD_VAR 0 4
27220: PUSH
27221: LD_VAR 0 2
27225: ADD
27226: ST_TO_ADDR
27227: GO 27193
27229: POP
27230: POP
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
27231: LD_ADDR_EXP 55
27235: PUSH
27236: LD_EXP 55
27240: PPUSH
27241: LD_VAR 0 14
27245: PPUSH
27246: LD_VAR 0 4
27250: PPUSH
27251: CALL_OW 1
27255: ST_TO_ADDR
// if under_attack or destroy_gensher_base then
27256: LD_VAR 0 10
27260: PUSH
27261: LD_VAR 0 19
27265: OR
27266: IFFALSE 28669
// begin vehicles_list = ai_vehicles_defend [ base ] diff ai_vehicles_being_repaired [ base ] ;
27268: LD_ADDR_VAR 0 8
27272: PUSH
27273: LD_EXP 40
27277: PUSH
27278: LD_VAR 0 14
27282: ARRAY
27283: PUSH
27284: LD_EXP 80
27288: PUSH
27289: LD_VAR 0 14
27293: ARRAY
27294: DIFF
27295: ST_TO_ADDR
// case base of 1 :
27296: LD_VAR 0 14
27300: PUSH
27301: LD_INT 1
27303: DOUBLE
27304: EQUAL
27305: IFTRUE 27309
27307: GO 27951
27309: POP
// begin repeat if game_phase = 1 then
27310: LD_EXP 89
27314: PUSH
27315: LD_INT 1
27317: EQUAL
27318: IFFALSE 27322
// break ;
27320: GO 27949
// temp_list = [ ] ;
27322: LD_ADDR_VAR 0 4
27326: PUSH
27327: EMPTY
27328: ST_TO_ADDR
// if destroy_gensher_base then
27329: LD_VAR 0 19
27333: IFFALSE 27400
// for i in original_gensher_people ^ Gensher do
27335: LD_ADDR_VAR 0 2
27339: PUSH
27340: LD_EXP 83
27344: PUSH
27345: LD_EXP 24
27349: ADD
27350: PUSH
27351: FOR_IN
27352: IFFALSE 27398
// if IsPlaced ( i ) and GetY ( i ) <= 70 then
27354: LD_VAR 0 2
27358: PPUSH
27359: CALL_OW 305
27363: PUSH
27364: LD_VAR 0 2
27368: PPUSH
27369: CALL_OW 251
27373: PUSH
27374: LD_INT 70
27376: LESSEQUAL
27377: AND
27378: IFFALSE 27396
// temp_list = temp_list ^ i ;
27380: LD_ADDR_VAR 0 4
27384: PUSH
27385: LD_VAR 0 4
27389: PUSH
27390: LD_VAR 0 2
27394: ADD
27395: ST_TO_ADDR
27396: GO 27351
27398: POP
27399: POP
// if temp_list > 0 then
27400: LD_VAR 0 4
27404: PUSH
27405: LD_INT 0
27407: GREATER
27408: IFFALSE 27620
// begin temp_list_3 = [ [ 105 , 40 ] , [ 98 , 44 ] , [ 90 , 44 ] , [ 82 , 46 ] , [ 78 , 52 ] , [ 79 , 61 ] ] ;
27410: LD_ADDR_VAR 0 6
27414: PUSH
27415: LD_INT 105
27417: PUSH
27418: LD_INT 40
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 98
27427: PUSH
27428: LD_INT 44
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 90
27437: PUSH
27438: LD_INT 44
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 82
27447: PUSH
27448: LD_INT 46
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 78
27457: PUSH
27458: LD_INT 52
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 79
27467: PUSH
27468: LD_INT 61
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: ST_TO_ADDR
// for i in vehicles_list do
27483: LD_ADDR_VAR 0 2
27487: PUSH
27488: LD_VAR 0 8
27492: PUSH
27493: FOR_IN
27494: IFFALSE 27616
// begin temp_unit = AllNearestUnitToUnit ( temp_list , i ) ;
27496: LD_ADDR_VAR 0 7
27500: PUSH
27501: LD_VAR 0 4
27505: PPUSH
27506: LD_VAR 0 2
27510: PPUSH
27511: CALL_OW 75
27515: ST_TO_ADDR
// if GetDistUnits ( i , temp_unit ) <= 6 then
27516: LD_VAR 0 2
27520: PPUSH
27521: LD_VAR 0 7
27525: PPUSH
27526: CALL_OW 296
27530: PUSH
27531: LD_INT 6
27533: LESSEQUAL
27534: IFFALSE 27567
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) else
27536: LD_VAR 0 2
27540: PPUSH
27541: LD_VAR 0 7
27545: PPUSH
27546: CALL_OW 250
27550: PPUSH
27551: LD_VAR 0 7
27555: PPUSH
27556: CALL_OW 251
27560: PPUSH
27561: CALL_OW 114
27565: GO 27614
// begin temp_list = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
27567: LD_ADDR_VAR 0 4
27571: PUSH
27572: LD_VAR 0 6
27576: PPUSH
27577: LD_VAR 0 2
27581: PPUSH
27582: CALL 30549 0 2
27586: ST_TO_ADDR
// ComMoveXY ( i , temp_list [ 1 ] , temp_list [ 2 ] ) ;
27587: LD_VAR 0 2
27591: PPUSH
27592: LD_VAR 0 4
27596: PUSH
27597: LD_INT 1
27599: ARRAY
27600: PPUSH
27601: LD_VAR 0 4
27605: PUSH
27606: LD_INT 2
27608: ARRAY
27609: PPUSH
27610: CALL_OW 111
// end ; end ;
27614: GO 27493
27616: POP
27617: POP
// end else
27618: GO 27945
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , am_vehicle_defend_area ] ] ) ;
27620: LD_ADDR_VAR 0 4
27624: PUSH
27625: LD_INT 81
27627: PUSH
27628: LD_VAR 0 1
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 95
27639: PUSH
27640: LD_INT 11
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PPUSH
27651: CALL_OW 69
27655: ST_TO_ADDR
// temp_list = DangerousUnits ( temp_list ) ;
27656: LD_ADDR_VAR 0 4
27660: PUSH
27661: LD_VAR 0 4
27665: PPUSH
27666: CALL 41003 0 1
27670: ST_TO_ADDR
// if temp_list > 0 then
27671: LD_VAR 0 4
27675: PUSH
27676: LD_INT 0
27678: GREATER
27679: IFFALSE 27749
// begin for i in vehicles_list do
27681: LD_ADDR_VAR 0 2
27685: PUSH
27686: LD_VAR 0 8
27690: PUSH
27691: FOR_IN
27692: IFFALSE 27745
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
27694: LD_ADDR_VAR 0 7
27698: PUSH
27699: LD_VAR 0 4
27703: PPUSH
27704: LD_VAR 0 2
27708: PPUSH
27709: CALL_OW 74
27713: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27714: LD_VAR 0 2
27718: PPUSH
27719: LD_VAR 0 7
27723: PPUSH
27724: CALL_OW 250
27728: PPUSH
27729: LD_VAR 0 7
27733: PPUSH
27734: CALL_OW 251
27738: PPUSH
27739: CALL_OW 114
// end ;
27743: GO 27691
27745: POP
27746: POP
// end else
27747: GO 27945
// if destroy_gensher_base then
27749: LD_VAR 0 19
27753: IFFALSE 27945
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , gensher_base ] ] ) ;
27755: LD_ADDR_VAR 0 4
27759: PUSH
27760: LD_INT 81
27762: PUSH
27763: LD_VAR 0 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 95
27774: PUSH
27775: LD_INT 7
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PPUSH
27786: CALL_OW 69
27790: ST_TO_ADDR
// temp_list_2 = DangerousUnits ( temp_list ) ;
27791: LD_ADDR_VAR 0 17
27795: PUSH
27796: LD_VAR 0 4
27800: PPUSH
27801: CALL 41003 0 1
27805: ST_TO_ADDR
// if temp_list_2 > 0 then
27806: LD_VAR 0 17
27810: PUSH
27811: LD_INT 0
27813: GREATER
27814: IFFALSE 27884
// begin for i in vehicles_list do
27816: LD_ADDR_VAR 0 2
27820: PUSH
27821: LD_VAR 0 8
27825: PUSH
27826: FOR_IN
27827: IFFALSE 27880
// begin temp_unit = NearestUnitToUnit ( temp_list_2 , i ) ;
27829: LD_ADDR_VAR 0 7
27833: PUSH
27834: LD_VAR 0 17
27838: PPUSH
27839: LD_VAR 0 2
27843: PPUSH
27844: CALL_OW 74
27848: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27849: LD_VAR 0 2
27853: PPUSH
27854: LD_VAR 0 7
27858: PPUSH
27859: CALL_OW 250
27863: PPUSH
27864: LD_VAR 0 7
27868: PPUSH
27869: CALL_OW 251
27873: PPUSH
27874: CALL_OW 114
// end ;
27878: GO 27826
27880: POP
27881: POP
// end else
27882: GO 27945
// if temp_list > 0 then
27884: LD_VAR 0 4
27888: PUSH
27889: LD_INT 0
27891: GREATER
27892: IFFALSE 27945
// begin for i in vehicles_list do
27894: LD_ADDR_VAR 0 2
27898: PUSH
27899: LD_VAR 0 8
27903: PUSH
27904: FOR_IN
27905: IFFALSE 27943
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
27907: LD_ADDR_VAR 0 7
27911: PUSH
27912: LD_VAR 0 4
27916: PPUSH
27917: LD_VAR 0 2
27921: PPUSH
27922: CALL_OW 74
27926: ST_TO_ADDR
// ComAttackUnit ( i , temp_unit ) ;
27927: LD_VAR 0 2
27931: PPUSH
27932: LD_VAR 0 7
27936: PPUSH
27937: CALL_OW 115
// end ;
27941: GO 27904
27943: POP
27944: POP
// end ; end ; end ; until true ;
27945: LD_INT 1
27947: IFFALSE 27310
// end ; 2 :
27949: GO 28667
27951: LD_INT 2
27953: DOUBLE
27954: EQUAL
27955: IFTRUE 27959
27957: GO 27962
27959: POP
// begin end ; 3 :
27960: GO 28667
27962: LD_INT 3
27964: DOUBLE
27965: EQUAL
27966: IFTRUE 27970
27968: GO 28666
27970: POP
// begin temp_list = FilterAllUnits ( [ f_enemy , side ] ) ;
27971: LD_ADDR_VAR 0 4
27975: PUSH
27976: LD_INT 81
27978: PUSH
27979: LD_VAR 0 1
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PPUSH
27988: CALL_OW 69
27992: ST_TO_ADDR
// temp_list = ListFilterNearArea ( temp_list , GetBaseArea ( base ) ) ;
27993: LD_ADDR_VAR 0 4
27997: PUSH
27998: LD_VAR 0 4
28002: PPUSH
28003: LD_VAR 0 14
28007: PPUSH
28008: CALL 12664 0 1
28012: PPUSH
28013: CALL 24239 0 2
28017: ST_TO_ADDR
// temp_list = DangerousUnits ( temp_list ) ;
28018: LD_ADDR_VAR 0 4
28022: PUSH
28023: LD_VAR 0 4
28027: PPUSH
28028: CALL 41003 0 1
28032: ST_TO_ADDR
// temp_list_2 = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , Ru_backdoor_area ] ] ) ;
28033: LD_ADDR_VAR 0 17
28037: PUSH
28038: LD_INT 81
28040: PUSH
28041: LD_VAR 0 1
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 95
28052: PUSH
28053: LD_INT 13
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PPUSH
28064: CALL_OW 69
28068: ST_TO_ADDR
// temp_list_2 = DangerousUnits ( temp_list_2 ) ;
28069: LD_ADDR_VAR 0 17
28073: PUSH
28074: LD_VAR 0 17
28078: PPUSH
28079: CALL 41003 0 1
28083: ST_TO_ADDR
// temp_list_3 = [ [ 53 , 80 ] , [ 61 , 80 ] , [ 63 , 73 ] , [ 67 , 66 ] , [ 67 , 59 ] ] ;
28084: LD_ADDR_VAR 0 6
28088: PUSH
28089: LD_INT 53
28091: PUSH
28092: LD_INT 80
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 61
28101: PUSH
28102: LD_INT 80
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 63
28111: PUSH
28112: LD_INT 73
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 67
28121: PUSH
28122: LD_INT 66
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 67
28131: PUSH
28132: LD_INT 59
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
// temp_list_4 = [ [ 53 , 80 ] , [ 61 , 91 ] , [ 70 , 97 ] , [ 78 , 99 ] , [ 88 , 98 ] ] ;
28146: LD_ADDR_VAR 0 20
28150: PUSH
28151: LD_INT 53
28153: PUSH
28154: LD_INT 80
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 61
28163: PUSH
28164: LD_INT 91
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 70
28173: PUSH
28174: LD_INT 97
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 78
28183: PUSH
28184: LD_INT 99
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 88
28193: PUSH
28194: LD_INT 98
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: ST_TO_ADDR
// if temp_list_2 >= temp_list then
28208: LD_VAR 0 17
28212: PUSH
28213: LD_VAR 0 4
28217: GREATEREQUAL
28218: IFFALSE 28361
// begin if temp_list_2 > 0 then
28220: LD_VAR 0 17
28224: PUSH
28225: LD_INT 0
28227: GREATER
28228: IFFALSE 28359
// begin for i in vehicles_list do
28230: LD_ADDR_VAR 0 2
28234: PUSH
28235: LD_VAR 0 8
28239: PUSH
28240: FOR_IN
28241: IFFALSE 28357
// if IsInArea ( i , Ru_base ) then
28243: LD_VAR 0 2
28247: PPUSH
28248: LD_INT 3
28250: PPUSH
28251: CALL_OW 308
28255: IFFALSE 28306
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
28257: LD_ADDR_VAR 0 21
28261: PUSH
28262: LD_VAR 0 6
28266: PPUSH
28267: LD_VAR 0 2
28271: PPUSH
28272: CALL 30549 0 2
28276: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28277: LD_VAR 0 2
28281: PPUSH
28282: LD_VAR 0 21
28286: PUSH
28287: LD_INT 1
28289: ARRAY
28290: PPUSH
28291: LD_VAR 0 21
28295: PUSH
28296: LD_INT 2
28298: ARRAY
28299: PPUSH
28300: CALL_OW 114
// end else
28304: GO 28355
// begin temp_unit = NearestUnitToUnit ( temp_list_2 , i ) ;
28306: LD_ADDR_VAR 0 7
28310: PUSH
28311: LD_VAR 0 17
28315: PPUSH
28316: LD_VAR 0 2
28320: PPUSH
28321: CALL_OW 74
28325: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28326: LD_VAR 0 2
28330: PPUSH
28331: LD_VAR 0 7
28335: PPUSH
28336: CALL_OW 250
28340: PPUSH
28341: LD_VAR 0 7
28345: PPUSH
28346: CALL_OW 251
28350: PPUSH
28351: CALL_OW 114
// end ;
28355: GO 28240
28357: POP
28358: POP
// end ; end else
28359: GO 28664
// begin if temp_list > 0 then
28361: LD_VAR 0 4
28365: PUSH
28366: LD_INT 0
28368: GREATER
28369: IFFALSE 28664
// begin k = 0 ;
28371: LD_ADDR_VAR 0 12
28375: PUSH
28376: LD_INT 0
28378: ST_TO_ADDR
// for i in vehicles_list do
28379: LD_ADDR_VAR 0 2
28383: PUSH
28384: LD_VAR 0 8
28388: PUSH
28389: FOR_IN
28390: IFFALSE 28662
// begin k = k + 1 ;
28392: LD_ADDR_VAR 0 12
28396: PUSH
28397: LD_VAR 0 12
28401: PUSH
28402: LD_INT 1
28404: PLUS
28405: ST_TO_ADDR
// if k mod 2 = 0 then
28406: LD_VAR 0 12
28410: PUSH
28411: LD_INT 2
28413: MOD
28414: PUSH
28415: LD_INT 0
28417: EQUAL
28418: IFFALSE 28534
// begin if IsInArea ( i , Ru_base ) then
28420: LD_VAR 0 2
28424: PPUSH
28425: LD_INT 3
28427: PPUSH
28428: CALL_OW 308
28432: IFFALSE 28483
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
28434: LD_ADDR_VAR 0 21
28438: PUSH
28439: LD_VAR 0 6
28443: PPUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL 30549 0 2
28453: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28454: LD_VAR 0 2
28458: PPUSH
28459: LD_VAR 0 21
28463: PUSH
28464: LD_INT 1
28466: ARRAY
28467: PPUSH
28468: LD_VAR 0 21
28472: PUSH
28473: LD_INT 2
28475: ARRAY
28476: PPUSH
28477: CALL_OW 114
// end else
28481: GO 28532
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
28483: LD_ADDR_VAR 0 7
28487: PUSH
28488: LD_VAR 0 4
28492: PPUSH
28493: LD_VAR 0 2
28497: PPUSH
28498: CALL_OW 74
28502: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28503: LD_VAR 0 2
28507: PPUSH
28508: LD_VAR 0 7
28512: PPUSH
28513: CALL_OW 250
28517: PPUSH
28518: LD_VAR 0 7
28522: PPUSH
28523: CALL_OW 251
28527: PPUSH
28528: CALL_OW 114
// end ; end else
28532: GO 28660
// begin if IsInArea ( i , Ru_base ) or IsInArea ( i , Ru_base_south ) then
28534: LD_VAR 0 2
28538: PPUSH
28539: LD_INT 3
28541: PPUSH
28542: CALL_OW 308
28546: PUSH
28547: LD_VAR 0 2
28551: PPUSH
28552: LD_INT 19
28554: PPUSH
28555: CALL_OW 308
28559: OR
28560: IFFALSE 28611
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_4 , i ) ;
28562: LD_ADDR_VAR 0 21
28566: PUSH
28567: LD_VAR 0 20
28571: PPUSH
28572: LD_VAR 0 2
28576: PPUSH
28577: CALL 30549 0 2
28581: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28582: LD_VAR 0 2
28586: PPUSH
28587: LD_VAR 0 21
28591: PUSH
28592: LD_INT 1
28594: ARRAY
28595: PPUSH
28596: LD_VAR 0 21
28600: PUSH
28601: LD_INT 2
28603: ARRAY
28604: PPUSH
28605: CALL_OW 114
// end else
28609: GO 28660
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
28611: LD_ADDR_VAR 0 7
28615: PUSH
28616: LD_VAR 0 4
28620: PPUSH
28621: LD_VAR 0 2
28625: PPUSH
28626: CALL_OW 74
28630: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28631: LD_VAR 0 2
28635: PPUSH
28636: LD_VAR 0 7
28640: PPUSH
28641: CALL_OW 250
28645: PPUSH
28646: LD_VAR 0 7
28650: PPUSH
28651: CALL_OW 251
28655: PPUSH
28656: CALL_OW 114
// end ; end ; end ;
28660: GO 28389
28662: POP
28663: POP
// end ; end ; end ; end ;
28664: GO 28667
28666: POP
// end else
28667: GO 29056
// begin area = GetBaseArea ( base ) ;
28669: LD_ADDR_VAR 0 15
28673: PUSH
28674: LD_VAR 0 14
28678: PPUSH
28679: CALL 12664 0 1
28683: ST_TO_ADDR
// if IsOk ( ai_depot [ base ] ) then
28684: LD_EXP 35
28688: PUSH
28689: LD_VAR 0 14
28693: ARRAY
28694: PPUSH
28695: CALL_OW 302
28699: IFFALSE 28965
// begin temp_list = ai_refuel_vehicles_list [ base ] ;
28701: LD_ADDR_VAR 0 4
28705: PUSH
28706: LD_EXP 55
28710: PUSH
28711: LD_VAR 0 14
28715: ARRAY
28716: ST_TO_ADDR
// for i in ai_vehicles_defend [ base ] diff ai_refuel_vehicles_list [ base ] do
28717: LD_ADDR_VAR 0 2
28721: PUSH
28722: LD_EXP 40
28726: PUSH
28727: LD_VAR 0 14
28731: ARRAY
28732: PUSH
28733: LD_EXP 55
28737: PUSH
28738: LD_VAR 0 14
28742: ARRAY
28743: DIFF
28744: PUSH
28745: FOR_IN
28746: IFFALSE 28796
// if GetFuel ( i ) < 70 and GetEngine ( i ) = engine_combustion then
28748: LD_VAR 0 2
28752: PPUSH
28753: CALL_OW 261
28757: PUSH
28758: LD_INT 70
28760: LESS
28761: PUSH
28762: LD_VAR 0 2
28766: PPUSH
28767: CALL_OW 262
28771: PUSH
28772: LD_INT 1
28774: EQUAL
28775: AND
28776: IFFALSE 28794
// temp_list = temp_list ^ i ;
28778: LD_ADDR_VAR 0 4
28782: PUSH
28783: LD_VAR 0 4
28787: PUSH
28788: LD_VAR 0 2
28792: ADD
28793: ST_TO_ADDR
28794: GO 28745
28796: POP
28797: POP
// temp_list = temp_list diff ai_vehicles_being_repaired [ base ] ;
28798: LD_ADDR_VAR 0 4
28802: PUSH
28803: LD_VAR 0 4
28807: PUSH
28808: LD_EXP 80
28812: PUSH
28813: LD_VAR 0 14
28817: ARRAY
28818: DIFF
28819: ST_TO_ADDR
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
28820: LD_ADDR_EXP 55
28824: PUSH
28825: LD_EXP 55
28829: PPUSH
28830: LD_VAR 0 14
28834: PPUSH
28835: LD_VAR 0 4
28839: PPUSH
28840: CALL_OW 1
28844: ST_TO_ADDR
// for i in ai_refuel_vehicles_list [ base ] do
28845: LD_ADDR_VAR 0 2
28849: PUSH
28850: LD_EXP 55
28854: PUSH
28855: LD_VAR 0 14
28859: ARRAY
28860: PUSH
28861: FOR_IN
28862: IFFALSE 28963
// begin if IsInArea ( i , area ) then
28864: LD_VAR 0 2
28868: PPUSH
28869: LD_VAR 0 15
28873: PPUSH
28874: CALL_OW 308
28878: IFFALSE 28922
// begin ComMoveUnit ( i , ai_depot [ base ] ) ;
28880: LD_VAR 0 2
28884: PPUSH
28885: LD_EXP 35
28889: PUSH
28890: LD_VAR 0 14
28894: ARRAY
28895: PPUSH
28896: CALL_OW 112
// AddComRefuel ( i , ai_depot [ base ] ) ;
28900: LD_VAR 0 2
28904: PPUSH
28905: LD_EXP 35
28909: PUSH
28910: LD_VAR 0 14
28914: ARRAY
28915: PPUSH
28916: CALL_OW 210
// end else
28920: GO 28961
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
28922: LD_VAR 0 2
28926: PPUSH
28927: LD_EXP 42
28931: PUSH
28932: LD_VAR 0 14
28936: ARRAY
28937: PUSH
28938: LD_INT 1
28940: ARRAY
28941: PPUSH
28942: LD_EXP 42
28946: PUSH
28947: LD_VAR 0 14
28951: ARRAY
28952: PUSH
28953: LD_INT 2
28955: ARRAY
28956: PPUSH
28957: CALL_OW 114
// end ;
28961: GO 28861
28963: POP
28964: POP
// end ; for i in ai_vehicles_defend [ base ] diff ai_refuel_vehicles_list [ base ] do
28965: LD_ADDR_VAR 0 2
28969: PUSH
28970: LD_EXP 40
28974: PUSH
28975: LD_VAR 0 14
28979: ARRAY
28980: PUSH
28981: LD_EXP 55
28985: PUSH
28986: LD_VAR 0 14
28990: ARRAY
28991: DIFF
28992: PUSH
28993: FOR_IN
28994: IFFALSE 29054
// if not IsInArea ( i , area ) then
28996: LD_VAR 0 2
29000: PPUSH
29001: LD_VAR 0 15
29005: PPUSH
29006: CALL_OW 308
29010: NOT
29011: IFFALSE 29052
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
29013: LD_VAR 0 2
29017: PPUSH
29018: LD_EXP 42
29022: PUSH
29023: LD_VAR 0 14
29027: ARRAY
29028: PUSH
29029: LD_INT 1
29031: ARRAY
29032: PPUSH
29033: LD_EXP 42
29037: PUSH
29038: LD_VAR 0 14
29042: ARRAY
29043: PUSH
29044: LD_INT 2
29046: ARRAY
29047: PPUSH
29048: CALL_OW 114
29052: GO 28993
29054: POP
29055: POP
// end ; if mechanics_list = 0 and remote_mechanics = 0 then
29056: LD_VAR 0 3
29060: PUSH
29061: LD_INT 0
29063: EQUAL
29064: PUSH
29065: LD_VAR 0 18
29069: PUSH
29070: LD_INT 0
29072: EQUAL
29073: AND
29074: IFFALSE 29078
// continue ;
29076: GO 25791
// allowed_to_repair_vehicles = UnitFilter ( ai_vehicles_defend [ base ] ^ ( ai_crane [ base ] diff 0 ) , [ [ f_not , [ f_lives , 1000 ] ] , [ f_inarea , GetBaseArea ( base ) ] ] ) ;
29078: LD_ADDR_VAR 0 9
29082: PUSH
29083: LD_EXP 40
29087: PUSH
29088: LD_VAR 0 14
29092: ARRAY
29093: PUSH
29094: LD_EXP 71
29098: PUSH
29099: LD_VAR 0 14
29103: ARRAY
29104: PUSH
29105: LD_INT 0
29107: DIFF
29108: ADD
29109: PPUSH
29110: LD_INT 3
29112: PUSH
29113: LD_INT 24
29115: PUSH
29116: LD_INT 1000
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 95
29129: PUSH
29130: LD_VAR 0 14
29134: PPUSH
29135: CALL 12664 0 1
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PPUSH
29148: CALL_OW 72
29152: ST_TO_ADDR
// if not under_attack then
29153: LD_VAR 0 10
29157: NOT
29158: IFFALSE 29229
// allowed_to_repair_vehicles = allowed_to_repair_vehicles ^ UnitFilter ( ai_cargo_bay [ base ] diff 0 , [ [ f_not , [ f_lives , 1000 ] ] , [ f_inarea , GetBaseArea ( base ) ] ] ) ;
29160: LD_ADDR_VAR 0 9
29164: PUSH
29165: LD_VAR 0 9
29169: PUSH
29170: LD_EXP 61
29174: PUSH
29175: LD_VAR 0 14
29179: ARRAY
29180: PUSH
29181: LD_INT 0
29183: DIFF
29184: PPUSH
29185: LD_INT 3
29187: PUSH
29188: LD_INT 24
29190: PUSH
29191: LD_INT 1000
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 95
29204: PUSH
29205: LD_VAR 0 14
29209: PPUSH
29210: CALL 12664 0 1
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PPUSH
29223: CALL_OW 72
29227: ADD
29228: ST_TO_ADDR
// allowed_to_repair_vehicles = allowed_to_repair_vehicles diff ( ai_refuel_vehicles_list [ base ] ^ ai_vehicles_being_repaired [ base ] ) ;
29229: LD_ADDR_VAR 0 9
29233: PUSH
29234: LD_VAR 0 9
29238: PUSH
29239: LD_EXP 55
29243: PUSH
29244: LD_VAR 0 14
29248: ARRAY
29249: PUSH
29250: LD_EXP 80
29254: PUSH
29255: LD_VAR 0 14
29259: ARRAY
29260: ADD
29261: DIFF
29262: ST_TO_ADDR
// if allowed_to_repair_vehicles > 0 or ai_vehicles_being_repaired [ base ] > 0 then
29263: LD_VAR 0 9
29267: PUSH
29268: LD_INT 0
29270: GREATER
29271: PUSH
29272: LD_EXP 80
29276: PUSH
29277: LD_VAR 0 14
29281: ARRAY
29282: PUSH
29283: LD_INT 0
29285: GREATER
29286: OR
29287: IFFALSE 29789
// begin if remote_mechanics > 0 then
29289: LD_VAR 0 18
29293: PUSH
29294: LD_INT 0
29296: GREATER
29297: IFFALSE 29533
// begin if under_attack then
29299: LD_VAR 0 10
29303: IFFALSE 29411
// begin for i in remote_driver_vehicles [ base ] do
29305: LD_ADDR_VAR 0 2
29309: PUSH
29310: LD_VAR 0 24
29314: PUSH
29315: LD_VAR 0 14
29319: ARRAY
29320: PUSH
29321: FOR_IN
29322: IFFALSE 29407
// if UnitFilter ( i [ 2 ] , [ f_ok ] ) = 0 and i [ 1 ] in remote_mechanics then
29324: LD_VAR 0 2
29328: PUSH
29329: LD_INT 2
29331: ARRAY
29332: PPUSH
29333: LD_INT 50
29335: PUSH
29336: EMPTY
29337: LIST
29338: PPUSH
29339: CALL_OW 72
29343: PUSH
29344: LD_INT 0
29346: EQUAL
29347: PUSH
29348: LD_VAR 0 2
29352: PUSH
29353: LD_INT 1
29355: ARRAY
29356: PUSH
29357: LD_VAR 0 18
29361: IN
29362: AND
29363: IFFALSE 29405
// begin mechanics_list = mechanics_list ^ i [ 1 ] ;
29365: LD_ADDR_VAR 0 3
29369: PUSH
29370: LD_VAR 0 3
29374: PUSH
29375: LD_VAR 0 2
29379: PUSH
29380: LD_INT 1
29382: ARRAY
29383: ADD
29384: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff i [ 1 ] ;
29385: LD_ADDR_VAR 0 18
29389: PUSH
29390: LD_VAR 0 18
29394: PUSH
29395: LD_VAR 0 2
29399: PUSH
29400: LD_INT 1
29402: ARRAY
29403: DIFF
29404: ST_TO_ADDR
// end ;
29405: GO 29321
29407: POP
29408: POP
// end else
29409: GO 29533
// begin temp_unit = true ;
29411: LD_ADDR_VAR 0 7
29415: PUSH
29416: LD_INT 1
29418: ST_TO_ADDR
// for i in remote_driver_vehicles [ base ] do
29419: LD_ADDR_VAR 0 2
29423: PUSH
29424: LD_VAR 0 24
29428: PUSH
29429: LD_VAR 0 14
29433: ARRAY
29434: PUSH
29435: FOR_IN
29436: IFFALSE 29502
// begin for k in i [ 2 ] do
29438: LD_ADDR_VAR 0 12
29442: PUSH
29443: LD_VAR 0 2
29447: PUSH
29448: LD_INT 2
29450: ARRAY
29451: PUSH
29452: FOR_IN
29453: IFFALSE 29489
// if not IsInArea ( k , GetBaseArea ( base ) ) then
29455: LD_VAR 0 12
29459: PPUSH
29460: LD_VAR 0 14
29464: PPUSH
29465: CALL 12664 0 1
29469: PPUSH
29470: CALL_OW 308
29474: NOT
29475: IFFALSE 29487
// begin temp_unit = false ;
29477: LD_ADDR_VAR 0 7
29481: PUSH
29482: LD_INT 0
29484: ST_TO_ADDR
// break ;
29485: GO 29489
// end ;
29487: GO 29452
29489: POP
29490: POP
// if not temp_unit then
29491: LD_VAR 0 7
29495: NOT
29496: IFFALSE 29500
// break ;
29498: GO 29502
// end ;
29500: GO 29435
29502: POP
29503: POP
// if temp_unit then
29504: LD_VAR 0 7
29508: IFFALSE 29533
// begin mechanics_list = mechanics_list ^ remote_mechanics ;
29510: LD_ADDR_VAR 0 3
29514: PUSH
29515: LD_VAR 0 3
29519: PUSH
29520: LD_VAR 0 18
29524: ADD
29525: ST_TO_ADDR
// remote_mechanics = [ ] ;
29526: LD_ADDR_VAR 0 18
29530: PUSH
29531: EMPTY
29532: ST_TO_ADDR
// end ; end ; end ; if allowed_to_repair_vehicles > 0 then
29533: LD_VAR 0 9
29537: PUSH
29538: LD_INT 0
29540: GREATER
29541: IFFALSE 29758
// begin k = false ;
29543: LD_ADDR_VAR 0 12
29547: PUSH
29548: LD_INT 0
29550: ST_TO_ADDR
// if ai_vehicles_being_repaired [ base ] = 0 then
29551: LD_EXP 80
29555: PUSH
29556: LD_VAR 0 14
29560: ARRAY
29561: PUSH
29562: LD_INT 0
29564: EQUAL
29565: IFFALSE 29577
// k = true else
29567: LD_ADDR_VAR 0 12
29571: PUSH
29572: LD_INT 1
29574: ST_TO_ADDR
29575: GO 29640
// if IsOk ( ai_vehicles_being_repaired [ base ] [ 1 ] ) then
29577: LD_EXP 80
29581: PUSH
29582: LD_VAR 0 14
29586: ARRAY
29587: PUSH
29588: LD_INT 1
29590: ARRAY
29591: PPUSH
29592: CALL_OW 302
29596: IFFALSE 29640
// begin allowed_to_repair_vehicles = UnitFilter ( allowed_to_repair_vehicles , [ f_not , [ f_ok ] ] ) ;
29598: LD_ADDR_VAR 0 9
29602: PUSH
29603: LD_VAR 0 9
29607: PPUSH
29608: LD_INT 3
29610: PUSH
29611: LD_INT 50
29613: PUSH
29614: EMPTY
29615: LIST
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PPUSH
29621: CALL_OW 72
29625: ST_TO_ADDR
// k := allowed_to_repair_vehicles > 0 ;
29626: LD_ADDR_VAR 0 12
29630: PUSH
29631: LD_VAR 0 9
29635: PUSH
29636: LD_INT 0
29638: GREATER
29639: ST_TO_ADDR
// end ; if k then
29640: LD_VAR 0 12
29644: IFFALSE 29758
// begin temp_list = [ ] ;
29646: LD_ADDR_VAR 0 4
29650: PUSH
29651: EMPTY
29652: ST_TO_ADDR
// for i in allowed_to_repair_vehicles do
29653: LD_ADDR_VAR 0 2
29657: PUSH
29658: LD_VAR 0 9
29662: PUSH
29663: FOR_IN
29664: IFFALSE 29689
// temp_list = temp_list ^ GetLives ( i ) ;
29666: LD_ADDR_VAR 0 4
29670: PUSH
29671: LD_VAR 0 4
29675: PUSH
29676: LD_VAR 0 2
29680: PPUSH
29681: CALL_OW 256
29685: ADD
29686: ST_TO_ADDR
29687: GO 29663
29689: POP
29690: POP
// temp_unit = WorstFromListByList ( allowed_to_repair_vehicles , temp_list ) ;
29691: LD_ADDR_VAR 0 7
29695: PUSH
29696: LD_VAR 0 9
29700: PPUSH
29701: LD_VAR 0 4
29705: PPUSH
29706: CALL_OW 78
29710: ST_TO_ADDR
// temp_list = temp_unit ^ ai_vehicles_being_repaired [ base ] ;
29711: LD_ADDR_VAR 0 4
29715: PUSH
29716: LD_VAR 0 7
29720: PUSH
29721: LD_EXP 80
29725: PUSH
29726: LD_VAR 0 14
29730: ARRAY
29731: ADD
29732: ST_TO_ADDR
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
29733: LD_ADDR_EXP 80
29737: PUSH
29738: LD_EXP 80
29742: PPUSH
29743: LD_VAR 0 14
29747: PPUSH
29748: LD_VAR 0 4
29752: PPUSH
29753: CALL_OW 1
29757: ST_TO_ADDR
// end ; end ; ComRepairVehicle ( GetHumansOutOfUnits ( mechanics_list ) , ai_vehicles_being_repaired [ base ] [ 1 ] ) ;
29758: LD_VAR 0 3
29762: PPUSH
29763: CALL 23550 0 1
29767: PPUSH
29768: LD_EXP 80
29772: PUSH
29773: LD_VAR 0 14
29777: ARRAY
29778: PUSH
29779: LD_INT 1
29781: ARRAY
29782: PPUSH
29783: CALL_OW 129
// end else
29787: GO 29854
// begin DistributeHumansToBuildings ( base , mechanics_list , UnitFilter ( ai_facts [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_mechanic , 6 , true , false ) ;
29789: LD_VAR 0 14
29793: PPUSH
29794: LD_VAR 0 3
29798: PPUSH
29799: LD_EXP 48
29803: PUSH
29804: LD_VAR 0 14
29808: ARRAY
29809: PPUSH
29810: LD_INT 50
29812: PUSH
29813: EMPTY
29814: LIST
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: LD_INT 57
29821: PUSH
29822: EMPTY
29823: LIST
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PPUSH
29833: CALL_OW 72
29837: PPUSH
29838: LD_INT 3
29840: PPUSH
29841: LD_INT 6
29843: PPUSH
29844: LD_INT 1
29846: PPUSH
29847: LD_INT 0
29849: PPUSH
29850: CALL 15621 0 7
// end ; if remote_driver_vehicles [ base ] > 0 then
29854: LD_VAR 0 24
29858: PUSH
29859: LD_VAR 0 14
29863: ARRAY
29864: PUSH
29865: LD_INT 0
29867: GREATER
29868: IFFALSE 30404
// begin if not IsOk ( ai_control_tower [ base ] ) then
29870: LD_EXP 57
29874: PUSH
29875: LD_VAR 0 14
29879: ARRAY
29880: PPUSH
29881: CALL_OW 302
29885: NOT
29886: IFFALSE 29955
// begin DistributeHumansToBuildings ( base , remote_mechanics , UnitFilter ( ai_facts [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_mechanic , 6 , true , false ) ;
29888: LD_VAR 0 14
29892: PPUSH
29893: LD_VAR 0 18
29897: PPUSH
29898: LD_EXP 48
29902: PUSH
29903: LD_VAR 0 14
29907: ARRAY
29908: PPUSH
29909: LD_INT 50
29911: PUSH
29912: EMPTY
29913: LIST
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: LD_INT 57
29920: PUSH
29921: EMPTY
29922: LIST
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PPUSH
29932: CALL_OW 72
29936: PPUSH
29937: LD_INT 3
29939: PPUSH
29940: LD_INT 6
29942: PPUSH
29943: LD_INT 1
29945: PPUSH
29946: LD_INT 0
29948: PPUSH
29949: CALL 15621 0 7
// end else
29953: GO 30404
// begin for i in remote_driver_vehicles [ base ] do
29955: LD_ADDR_VAR 0 2
29959: PUSH
29960: LD_VAR 0 24
29964: PUSH
29965: LD_VAR 0 14
29969: ARRAY
29970: PUSH
29971: FOR_IN
29972: IFFALSE 30402
// begin if not i [ 1 ] in remote_mechanics then
29974: LD_VAR 0 2
29978: PUSH
29979: LD_INT 1
29981: ARRAY
29982: PUSH
29983: LD_VAR 0 18
29987: IN
29988: NOT
29989: IFFALSE 29993
// continue ;
29991: GO 29971
// if GetClass ( i [ 1 ] ) <> class_mechanic then
29993: LD_VAR 0 2
29997: PUSH
29998: LD_INT 1
30000: ARRAY
30001: PPUSH
30002: CALL_OW 257
30006: PUSH
30007: LD_INT 3
30009: NONEQUAL
30010: IFFALSE 30218
// begin temp_unit = 0 ;
30012: LD_ADDR_VAR 0 7
30016: PUSH
30017: LD_INT 0
30019: ST_TO_ADDR
// for k in ai_facts [ base ] do
30020: LD_ADDR_VAR 0 12
30024: PUSH
30025: LD_EXP 48
30029: PUSH
30030: LD_VAR 0 14
30034: ARRAY
30035: PUSH
30036: FOR_IN
30037: IFFALSE 30079
// if IsOk ( k ) and UnitsInside ( k ) < 6 then
30039: LD_VAR 0 12
30043: PPUSH
30044: CALL_OW 302
30048: PUSH
30049: LD_VAR 0 12
30053: PPUSH
30054: CALL_OW 313
30058: PUSH
30059: LD_INT 6
30061: LESS
30062: AND
30063: IFFALSE 30077
// begin temp_unit = k ;
30065: LD_ADDR_VAR 0 7
30069: PUSH
30070: LD_VAR 0 12
30074: ST_TO_ADDR
// break ;
30075: GO 30079
// end ;
30077: GO 30036
30079: POP
30080: POP
// if temp_unit > 0 then
30081: LD_VAR 0 7
30085: PUSH
30086: LD_INT 0
30088: GREATER
30089: IFFALSE 30216
// begin if IsInUnit ( i [ 1 ] ) = temp_unit then
30091: LD_VAR 0 2
30095: PUSH
30096: LD_INT 1
30098: ARRAY
30099: PPUSH
30100: CALL_OW 310
30104: PUSH
30105: LD_VAR 0 7
30109: EQUAL
30110: IFFALSE 30130
// ComChangeProfession ( i [ 1 ] , class_mechanic ) else
30112: LD_VAR 0 2
30116: PUSH
30117: LD_INT 1
30119: ARRAY
30120: PPUSH
30121: LD_INT 3
30123: PPUSH
30124: CALL_OW 123
30128: GO 30216
// begin case GetType ( IsInUnit ( i [ 1 ] ) ) of unit_building :
30130: LD_VAR 0 2
30134: PUSH
30135: LD_INT 1
30137: ARRAY
30138: PPUSH
30139: CALL_OW 310
30143: PPUSH
30144: CALL_OW 247
30148: PUSH
30149: LD_INT 3
30151: DOUBLE
30152: EQUAL
30153: IFTRUE 30157
30155: GO 30173
30157: POP
// ComExitBuilding ( i [ 1 ] ) ; unit_vehicle :
30158: LD_VAR 0 2
30162: PUSH
30163: LD_INT 1
30165: ARRAY
30166: PPUSH
30167: CALL_OW 122
30171: GO 30216
30173: LD_INT 2
30175: DOUBLE
30176: EQUAL
30177: IFTRUE 30181
30179: GO 30197
30181: POP
// ComExitVehicle ( i [ 1 ] ) ; else
30182: LD_VAR 0 2
30186: PUSH
30187: LD_INT 1
30189: ARRAY
30190: PPUSH
30191: CALL_OW 121
30195: GO 30216
30197: POP
// ComEnterUnit ( i [ 1 ] , temp_unit ) ; end ;
30198: LD_VAR 0 2
30202: PUSH
30203: LD_INT 1
30205: ARRAY
30206: PPUSH
30207: LD_VAR 0 7
30211: PPUSH
30212: CALL_OW 120
// end ; end ; end else
30216: GO 30400
// begin temp_unit = IsInUnit ( i [ 1 ] ) ;
30218: LD_ADDR_VAR 0 7
30222: PUSH
30223: LD_VAR 0 2
30227: PUSH
30228: LD_INT 1
30230: ARRAY
30231: PPUSH
30232: CALL_OW 310
30236: ST_TO_ADDR
// if temp_unit <> ai_control_tower [ base ] then
30237: LD_VAR 0 7
30241: PUSH
30242: LD_EXP 57
30246: PUSH
30247: LD_VAR 0 14
30251: ARRAY
30252: NONEQUAL
30253: IFFALSE 30340
// begin case GetType ( temp_unit ) of unit_building :
30255: LD_VAR 0 7
30259: PPUSH
30260: CALL_OW 247
30264: PUSH
30265: LD_INT 3
30267: DOUBLE
30268: EQUAL
30269: IFTRUE 30273
30271: GO 30289
30273: POP
// ComExitBuilding ( i [ 1 ] ) ; unit_vehicle :
30274: LD_VAR 0 2
30278: PUSH
30279: LD_INT 1
30281: ARRAY
30282: PPUSH
30283: CALL_OW 122
30287: GO 30338
30289: LD_INT 2
30291: DOUBLE
30292: EQUAL
30293: IFTRUE 30297
30295: GO 30313
30297: POP
// ComExitVehicle ( i [ 1 ] ) ; else
30298: LD_VAR 0 2
30302: PUSH
30303: LD_INT 1
30305: ARRAY
30306: PPUSH
30307: CALL_OW 121
30311: GO 30338
30313: POP
// ComEnterUnit ( i [ 1 ] , ai_control_tower [ base ] ) ; end ;
30314: LD_VAR 0 2
30318: PUSH
30319: LD_INT 1
30321: ARRAY
30322: PPUSH
30323: LD_EXP 57
30327: PUSH
30328: LD_VAR 0 14
30332: ARRAY
30333: PPUSH
30334: CALL_OW 120
// end else
30338: GO 30400
// for k in i [ 2 ] do
30340: LD_ADDR_VAR 0 12
30344: PUSH
30345: LD_VAR 0 2
30349: PUSH
30350: LD_INT 2
30352: ARRAY
30353: PUSH
30354: FOR_IN
30355: IFFALSE 30398
// if IsControledBy ( k ) <> i [ 1 ] then
30357: LD_VAR 0 12
30361: PPUSH
30362: CALL_OW 312
30366: PUSH
30367: LD_VAR 0 2
30371: PUSH
30372: LD_INT 1
30374: ARRAY
30375: NONEQUAL
30376: IFFALSE 30396
// ComLinkTo ( k , i [ 1 ] ) ;
30378: LD_VAR 0 12
30382: PPUSH
30383: LD_VAR 0 2
30387: PUSH
30388: LD_INT 1
30390: ARRAY
30391: PPUSH
30392: CALL_OW 135
30396: GO 30354
30398: POP
30399: POP
// end ; end ;
30400: GO 29971
30402: POP
30403: POP
// end ; end ; end ;
30404: GO 25791
30406: POP
30407: POP
// until false ;
30408: LD_INT 0
30410: IFFALSE 25774
// end ;
30412: PPOPN 24
30414: END
// function MaxNumWarVehicles ( base ) ; begin
30415: LD_INT 0
30417: PPUSH
// case base of 1 :
30418: LD_VAR 0 1
30422: PUSH
30423: LD_INT 1
30425: DOUBLE
30426: EQUAL
30427: IFTRUE 30431
30429: GO 30488
30431: POP
// result = WorstFromListByList ( [ ai_mechanics_defend [ base ] + 0 , 3 ] , [ ai_mechanics_defend [ base ] + 0 , 3 ] ) ; 2 :
30432: LD_ADDR_VAR 0 2
30436: PUSH
30437: LD_EXP 32
30441: PUSH
30442: LD_VAR 0 1
30446: ARRAY
30447: PUSH
30448: LD_INT 0
30450: PLUS
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PPUSH
30459: LD_EXP 32
30463: PUSH
30464: LD_VAR 0 1
30468: ARRAY
30469: PUSH
30470: LD_INT 0
30472: PLUS
30473: PUSH
30474: LD_INT 3
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PPUSH
30481: CALL_OW 78
30485: ST_TO_ADDR
30486: GO 30544
30488: LD_INT 2
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30507
30496: POP
// result = 0 ; 3 :
30497: LD_ADDR_VAR 0 2
30501: PUSH
30502: LD_INT 0
30504: ST_TO_ADDR
30505: GO 30544
30507: LD_INT 3
30509: DOUBLE
30510: EQUAL
30511: IFTRUE 30515
30513: GO 30543
30515: POP
// result = [ 3 , 4 , 5 ] [ difficulty ] ; end ;
30516: LD_ADDR_VAR 0 2
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: LD_INT 4
30526: PUSH
30527: LD_INT 5
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: PUSH
30535: LD_OWVAR 67
30539: ARRAY
30540: ST_TO_ADDR
30541: GO 30544
30543: POP
// end ;
30544: LD_VAR 0 2
30548: RET
// function FindNextHexOldWaypointSystem ( waypoints , un ) ; var dist , k , num , temp ; begin
30549: LD_INT 0
30551: PPUSH
30552: PPUSH
30553: PPUSH
30554: PPUSH
30555: PPUSH
// dist = GetDistUnitXY ( un , waypoints [ 1 ] [ 1 ] , waypoints [ 1 ] [ 2 ] ) ;
30556: LD_ADDR_VAR 0 4
30560: PUSH
30561: LD_VAR 0 2
30565: PPUSH
30566: LD_VAR 0 1
30570: PUSH
30571: LD_INT 1
30573: ARRAY
30574: PUSH
30575: LD_INT 1
30577: ARRAY
30578: PPUSH
30579: LD_VAR 0 1
30583: PUSH
30584: LD_INT 1
30586: ARRAY
30587: PUSH
30588: LD_INT 2
30590: ARRAY
30591: PPUSH
30592: CALL_OW 297
30596: ST_TO_ADDR
// num = 1 ;
30597: LD_ADDR_VAR 0 6
30601: PUSH
30602: LD_INT 1
30604: ST_TO_ADDR
// for k = 2 to waypoints do
30605: LD_ADDR_VAR 0 5
30609: PUSH
30610: DOUBLE
30611: LD_INT 2
30613: DEC
30614: ST_TO_ADDR
30615: LD_VAR 0 1
30619: PUSH
30620: FOR_TO
30621: IFFALSE 30702
// begin temp = GetDistUnitXY ( un , waypoints [ k ] [ 1 ] , waypoints [ k ] [ 2 ] ) ;
30623: LD_ADDR_VAR 0 7
30627: PUSH
30628: LD_VAR 0 2
30632: PPUSH
30633: LD_VAR 0 1
30637: PUSH
30638: LD_VAR 0 5
30642: ARRAY
30643: PUSH
30644: LD_INT 1
30646: ARRAY
30647: PPUSH
30648: LD_VAR 0 1
30652: PUSH
30653: LD_VAR 0 5
30657: ARRAY
30658: PUSH
30659: LD_INT 2
30661: ARRAY
30662: PPUSH
30663: CALL_OW 297
30667: ST_TO_ADDR
// if temp < dist then
30668: LD_VAR 0 7
30672: PUSH
30673: LD_VAR 0 4
30677: LESS
30678: IFFALSE 30700
// begin dist = temp ;
30680: LD_ADDR_VAR 0 4
30684: PUSH
30685: LD_VAR 0 7
30689: ST_TO_ADDR
// num = k ;
30690: LD_ADDR_VAR 0 6
30694: PUSH
30695: LD_VAR 0 5
30699: ST_TO_ADDR
// end ; end ;
30700: GO 30620
30702: POP
30703: POP
// if num < waypoints + 0 then
30704: LD_VAR 0 6
30708: PUSH
30709: LD_VAR 0 1
30713: PUSH
30714: LD_INT 0
30716: PLUS
30717: LESS
30718: IFFALSE 30734
// num = num + 1 ;
30720: LD_ADDR_VAR 0 6
30724: PUSH
30725: LD_VAR 0 6
30729: PUSH
30730: LD_INT 1
30732: PLUS
30733: ST_TO_ADDR
// result = waypoints [ num ] ;
30734: LD_ADDR_VAR 0 3
30738: PUSH
30739: LD_VAR 0 1
30743: PUSH
30744: LD_VAR 0 6
30748: ARRAY
30749: ST_TO_ADDR
// end ;
30750: LD_VAR 0 3
30754: RET
// every 0 0$1 + 0 0$0.1 do var i , temp_value , temp_unit , temp_list , base , idle_factories , fact ; var vehicle_prod_delay ;
30755: GO 30757
30757: DISABLE
30758: LD_INT 0
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
30765: PPUSH
30766: PPUSH
30767: PPUSH
// begin vehicle_prod_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
30768: LD_ADDR_VAR 0 8
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30787: LD_INT 35
30789: PPUSH
30790: CALL_OW 67
// for base in ai_bases do
30794: LD_ADDR_VAR 0 5
30798: PUSH
30799: LD_EXP 59
30803: PUSH
30804: FOR_IN
30805: IFFALSE 31631
// begin if ContactTime ( GetBaseSide ( base ) ) <= 0 0$10 and ai_vehicles_defend [ base ] >= [ 0 , 1 , 2 ] [ difficulty ] then
30807: LD_VAR 0 5
30811: PPUSH
30812: CALL 12735 0 1
30816: PPUSH
30817: CALL_OW 462
30821: PUSH
30822: LD_INT 350
30824: LESSEQUAL
30825: PUSH
30826: LD_EXP 40
30830: PUSH
30831: LD_VAR 0 5
30835: ARRAY
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: PUSH
30851: LD_OWVAR 67
30855: ARRAY
30856: GREATEREQUAL
30857: AND
30858: IFFALSE 30900
// begin vehicle_prod_delay = Replace ( vehicle_prod_delay , base , [ 1 1$15 , 0 0$45 , 0 0$30 ] [ difficulty ] ) ;
30860: LD_ADDR_VAR 0 8
30864: PUSH
30865: LD_VAR 0 8
30869: PPUSH
30870: LD_VAR 0 5
30874: PPUSH
30875: LD_INT 2625
30877: PUSH
30878: LD_INT 1575
30880: PUSH
30881: LD_INT 1050
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: LIST
30888: PUSH
30889: LD_OWVAR 67
30893: ARRAY
30894: PPUSH
30895: CALL_OW 1
30899: ST_TO_ADDR
// end ; idle_factories = [ ] ;
30900: LD_ADDR_VAR 0 6
30904: PUSH
30905: EMPTY
30906: ST_TO_ADDR
// for i in ai_facts [ base ] do
30907: LD_ADDR_VAR 0 1
30911: PUSH
30912: LD_EXP 48
30916: PUSH
30917: LD_VAR 0 5
30921: ARRAY
30922: PUSH
30923: FOR_IN
30924: IFFALSE 30985
// if BuildingStatus ( i ) = bs_idle and IsOk ( i ) and GetBType ( i ) = b_factory then
30926: LD_VAR 0 1
30930: PPUSH
30931: CALL_OW 461
30935: PUSH
30936: LD_INT 2
30938: EQUAL
30939: PUSH
30940: LD_VAR 0 1
30944: PPUSH
30945: CALL_OW 302
30949: AND
30950: PUSH
30951: LD_VAR 0 1
30955: PPUSH
30956: CALL_OW 266
30960: PUSH
30961: LD_INT 3
30963: EQUAL
30964: AND
30965: IFFALSE 30983
// idle_factories = idle_factories ^ i ;
30967: LD_ADDR_VAR 0 6
30971: PUSH
30972: LD_VAR 0 6
30976: PUSH
30977: LD_VAR 0 1
30981: ADD
30982: ST_TO_ADDR
30983: GO 30923
30985: POP
30986: POP
// if idle_factories = 0 then
30987: LD_VAR 0 6
30991: PUSH
30992: LD_INT 0
30994: EQUAL
30995: IFFALSE 30999
// continue ;
30997: GO 30804
// temp_value = false ;
30999: LD_ADDR_VAR 0 2
31003: PUSH
31004: LD_INT 0
31006: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
31007: LD_ADDR_VAR 0 1
31011: PUSH
31012: LD_EXP 39
31016: PUSH
31017: LD_VAR 0 5
31021: ARRAY
31022: PUSH
31023: FOR_IN
31024: IFFALSE 31196
// if i [ 4 ] in [ b_bunker , b_turret ] then
31026: LD_VAR 0 1
31030: PUSH
31031: LD_INT 4
31033: ARRAY
31034: PUSH
31035: LD_INT 32
31037: PUSH
31038: LD_INT 33
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: IN
31045: IFFALSE 31194
// begin temp_unit = HexInfo ( i [ 1 ] , i [ 2 ] ) ;
31047: LD_ADDR_VAR 0 3
31051: PUSH
31052: LD_VAR 0 1
31056: PUSH
31057: LD_INT 1
31059: ARRAY
31060: PPUSH
31061: LD_VAR 0 1
31065: PUSH
31066: LD_INT 2
31068: ARRAY
31069: PPUSH
31070: CALL_OW 428
31074: ST_TO_ADDR
// if GetBType ( temp_unit ) in [ b_bunker , b_turret ] and not IsConstructed ( temp_unit ) and GetBWeapon ( temp_unit ) <> i [ 7 ] then
31075: LD_VAR 0 3
31079: PPUSH
31080: CALL_OW 266
31084: PUSH
31085: LD_INT 32
31087: PUSH
31088: LD_INT 33
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: IN
31095: PUSH
31096: LD_VAR 0 3
31100: PPUSH
31101: CALL_OW 304
31105: NOT
31106: AND
31107: PUSH
31108: LD_VAR 0 3
31112: PPUSH
31113: CALL_OW 269
31117: PUSH
31118: LD_VAR 0 1
31122: PUSH
31123: LD_INT 7
31125: ARRAY
31126: NONEQUAL
31127: AND
31128: IFFALSE 31186
// for fact in idle_factories do
31130: LD_ADDR_VAR 0 7
31134: PUSH
31135: LD_VAR 0 6
31139: PUSH
31140: FOR_IN
31141: IFFALSE 31184
// if IsWeaponFactory ( fact ) then
31143: LD_VAR 0 7
31147: PPUSH
31148: CALL 31640 0 1
31152: IFFALSE 31182
// begin ComPlaceWeapon ( temp_unit , i [ 7 ] ) ;
31154: LD_VAR 0 3
31158: PPUSH
31159: LD_VAR 0 1
31163: PUSH
31164: LD_INT 7
31166: ARRAY
31167: PPUSH
31168: CALL_OW 148
// temp_value = true ;
31172: LD_ADDR_VAR 0 2
31176: PUSH
31177: LD_INT 1
31179: ST_TO_ADDR
// break ;
31180: GO 31184
// end ;
31182: GO 31140
31184: POP
31185: POP
// if temp_value then
31186: LD_VAR 0 2
31190: IFFALSE 31194
// break ;
31192: GO 31196
// end ;
31194: GO 31023
31196: POP
31197: POP
// if temp_value then
31198: LD_VAR 0 2
31202: IFFALSE 31206
// continue ;
31204: GO 30804
// if vehicle_prod_delay [ base ] > 0 0$0 or game_phase = 2 then
31206: LD_VAR 0 8
31210: PUSH
31211: LD_VAR 0 5
31215: ARRAY
31216: PUSH
31217: LD_INT 0
31219: GREATER
31220: PUSH
31221: LD_EXP 89
31225: PUSH
31226: LD_INT 2
31228: EQUAL
31229: OR
31230: IFFALSE 31269
// begin vehicle_prod_delay = Replace ( vehicle_prod_delay , base , vehicle_prod_delay [ base ] - 0 0$1 ) ;
31232: LD_ADDR_VAR 0 8
31236: PUSH
31237: LD_VAR 0 8
31241: PPUSH
31242: LD_VAR 0 5
31246: PPUSH
31247: LD_VAR 0 8
31251: PUSH
31252: LD_VAR 0 5
31256: ARRAY
31257: PUSH
31258: LD_INT 35
31260: MINUS
31261: PPUSH
31262: CALL_OW 1
31266: ST_TO_ADDR
// continue ;
31267: GO 30804
// end ; if ai_vehicles_defend [ base ] < MaxNumWarVehicles ( base ) then
31269: LD_EXP 40
31273: PUSH
31274: LD_VAR 0 5
31278: ARRAY
31279: PUSH
31280: LD_VAR 0 5
31284: PPUSH
31285: CALL 30415 0 1
31289: LESS
31290: IFFALSE 31629
// begin case base of 1 :
31292: LD_VAR 0 5
31296: PUSH
31297: LD_INT 1
31299: DOUBLE
31300: EQUAL
31301: IFTRUE 31305
31303: GO 31423
31305: POP
// begin case Rand ( 1 , 4 ) of 1 :
31306: LD_INT 1
31308: PPUSH
31309: LD_INT 4
31311: PPUSH
31312: CALL_OW 12
31316: PUSH
31317: LD_INT 1
31319: DOUBLE
31320: EQUAL
31321: IFTRUE 31325
31323: GO 31336
31325: POP
// temp_value = us_gatling_gun ; 2 :
31326: LD_ADDR_VAR 0 2
31330: PUSH
31331: LD_INT 4
31333: ST_TO_ADDR
31334: GO 31394
31336: LD_INT 2
31338: DOUBLE
31339: EQUAL
31340: IFTRUE 31344
31342: GO 31355
31344: POP
// temp_value = us_laser ; 3 :
31345: LD_ADDR_VAR 0 2
31349: PUSH
31350: LD_INT 9
31352: ST_TO_ADDR
31353: GO 31394
31355: LD_INT 3
31357: DOUBLE
31358: EQUAL
31359: IFTRUE 31363
31361: GO 31374
31363: POP
// temp_value = us_double_gun ; 4 :
31364: LD_ADDR_VAR 0 2
31368: PUSH
31369: LD_INT 5
31371: ST_TO_ADDR
31372: GO 31394
31374: LD_INT 4
31376: DOUBLE
31377: EQUAL
31378: IFTRUE 31382
31380: GO 31393
31382: POP
// temp_value = us_rocket_launcher ; end ;
31383: LD_ADDR_VAR 0 2
31387: PUSH
31388: LD_INT 7
31390: ST_TO_ADDR
31391: GO 31394
31393: POP
// ComConstruct ( idle_factories [ 1 ] , us_medium_wheeled , engine_siberite , control_remote , temp_value ) ;
31394: LD_VAR 0 6
31398: PUSH
31399: LD_INT 1
31401: ARRAY
31402: PPUSH
31403: LD_INT 2
31405: PPUSH
31406: LD_INT 3
31408: PPUSH
31409: LD_INT 2
31411: PPUSH
31412: LD_VAR 0 2
31416: PPUSH
31417: CALL_OW 125
// end ; 2 :
31421: GO 31629
31423: LD_INT 2
31425: DOUBLE
31426: EQUAL
31427: IFTRUE 31431
31429: GO 31434
31431: POP
// begin end ; 3 :
31432: GO 31629
31434: LD_INT 3
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31628
31442: POP
// begin if PlayerAtEasternBorder then
31443: CALL 31946 0 0
31447: IFFALSE 31470
// temp_list = [ ru_heavy_machine_gun , ru_gun , ru_rocket_launcher ] else
31449: LD_ADDR_VAR 0 4
31453: PUSH
31454: LD_INT 42
31456: PUSH
31457: LD_INT 44
31459: PUSH
31460: LD_INT 45
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: LIST
31467: ST_TO_ADDR
31468: GO 31489
// temp_list = [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
31470: LD_ADDR_VAR 0 4
31474: PUSH
31475: LD_INT 43
31477: PUSH
31478: LD_INT 46
31480: PUSH
31481: LD_INT 45
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// temp_value = temp_list [ Rand ( 1 , temp_list + 0 ) ] ;
31489: LD_ADDR_VAR 0 2
31493: PUSH
31494: LD_VAR 0 4
31498: PUSH
31499: LD_INT 1
31501: PPUSH
31502: LD_VAR 0 4
31506: PUSH
31507: LD_INT 0
31509: PLUS
31510: PPUSH
31511: CALL_OW 12
31515: ARRAY
31516: ST_TO_ADDR
// if not IsWeaponFactory ( idle_factories [ 1 ] ) then
31517: LD_VAR 0 6
31521: PUSH
31522: LD_INT 1
31524: ARRAY
31525: PPUSH
31526: CALL 31640 0 1
31530: NOT
31531: IFFALSE 31541
// temp_value = ru_heavy_machine_gun ;
31533: LD_ADDR_VAR 0 2
31537: PUSH
31538: LD_INT 42
31540: ST_TO_ADDR
// if temp_value = ru_heavy_gun then
31541: LD_VAR 0 2
31545: PUSH
31546: LD_INT 46
31548: EQUAL
31549: IFFALSE 31561
// i = ru_heavy_tracked else
31551: LD_ADDR_VAR 0 1
31555: PUSH
31556: LD_INT 24
31558: ST_TO_ADDR
31559: GO 31597
// if Rand ( difficulty , 4 ) = 4 then
31561: LD_OWVAR 67
31565: PPUSH
31566: LD_INT 4
31568: PPUSH
31569: CALL_OW 12
31573: PUSH
31574: LD_INT 4
31576: EQUAL
31577: IFFALSE 31589
// i = ru_heavy_tracked else
31579: LD_ADDR_VAR 0 1
31583: PUSH
31584: LD_INT 24
31586: ST_TO_ADDR
31587: GO 31597
// i = ru_medium_tracked ;
31589: LD_ADDR_VAR 0 1
31593: PUSH
31594: LD_INT 22
31596: ST_TO_ADDR
// ComConstruct ( idle_factories [ 1 ] , i , engine_siberite , control_computer , temp_value ) ;
31597: LD_VAR 0 6
31601: PUSH
31602: LD_INT 1
31604: ARRAY
31605: PPUSH
31606: LD_VAR 0 1
31610: PPUSH
31611: LD_INT 3
31613: PPUSH
31614: LD_INT 3
31616: PPUSH
31617: LD_VAR 0 2
31621: PPUSH
31622: CALL_OW 125
// end ; end ;
31626: GO 31629
31628: POP
// end ; end ;
31629: GO 30804
31631: POP
31632: POP
// until false ;
31633: LD_INT 0
31635: IFFALSE 30787
// end ;
31637: PPOPN 8
31639: END
// function IsWeaponFactory ( factory ) ; begin
31640: LD_INT 0
31642: PPUSH
// if FilterAllUnits ( [ [ f_dist , factory , 4 ] , [ f_btype , b_ext_gun ] ] ) > 0 then
31643: LD_INT 91
31645: PUSH
31646: LD_VAR 0 1
31650: PUSH
31651: LD_INT 4
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 30
31661: PUSH
31662: LD_INT 17
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PPUSH
31673: CALL_OW 69
31677: PUSH
31678: LD_INT 0
31680: GREATER
31681: IFFALSE 31693
// result = true else
31683: LD_ADDR_VAR 0 2
31687: PUSH
31688: LD_INT 1
31690: ST_TO_ADDR
31691: GO 31701
// result = false ;
31693: LD_ADDR_VAR 0 2
31697: PUSH
31698: LD_INT 0
31700: ST_TO_ADDR
// end ;
31701: LD_VAR 0 2
31705: RET
// on VehicleCaptured ( new_identifier , old_identifier , old_side , capturing_unit ) do var temp_list , base ;
31706: LD_INT 0
31708: PPUSH
31709: PPUSH
// begin if old_side = you then
31710: LD_VAR 0 3
31714: PUSH
31715: LD_EXP 3
31719: EQUAL
31720: IFFALSE 31724
// exit ;
31722: GO 31755
// for base in ai_bases do
31724: LD_ADDR_VAR 0 6
31728: PUSH
31729: LD_EXP 59
31733: PUSH
31734: FOR_IN
31735: IFFALSE 31753
// RemoveVehicleFromVariables ( base , old_identifier ) ;
31737: LD_VAR 0 6
31741: PPUSH
31742: LD_VAR 0 2
31746: PPUSH
31747: CALL 11523 0 2
31751: GO 31734
31753: POP
31754: POP
// end ;
31755: PPOPN 6
31757: END
// on VehicleConstructed ( vehicle , factory ) do var side , temp_list , base ;
31758: LD_INT 0
31760: PPUSH
31761: PPUSH
31762: PPUSH
// begin side = GetSide ( vehicle ) ;
31763: LD_ADDR_VAR 0 3
31767: PUSH
31768: LD_VAR 0 1
31772: PPUSH
31773: CALL_OW 255
31777: ST_TO_ADDR
// if side = you then
31778: LD_VAR 0 3
31782: PUSH
31783: LD_EXP 3
31787: EQUAL
31788: IFFALSE 31792
// exit ;
31790: GO 31943
// base = FindBase ( vehicle ) ;
31792: LD_ADDR_VAR 0 5
31796: PUSH
31797: LD_VAR 0 1
31801: PPUSH
31802: CALL 12883 0 1
31806: ST_TO_ADDR
// if base = 0 then
31807: LD_VAR 0 5
31811: PUSH
31812: LD_INT 0
31814: EQUAL
31815: IFFALSE 31819
// exit ;
31817: GO 31943
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] then
31819: LD_VAR 0 1
31823: PPUSH
31824: CALL_OW 264
31828: PUSH
31829: LD_INT 12
31831: PUSH
31832: LD_INT 32
31834: PUSH
31835: LD_INT 51
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: IN
31843: NOT
31844: IFFALSE 31895
// begin temp_list = ai_vehicles_defend [ base ] ^ vehicle ;
31846: LD_ADDR_VAR 0 4
31850: PUSH
31851: LD_EXP 40
31855: PUSH
31856: LD_VAR 0 5
31860: ARRAY
31861: PUSH
31862: LD_VAR 0 1
31866: ADD
31867: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list ) ;
31868: LD_ADDR_EXP 40
31872: PUSH
31873: LD_EXP 40
31877: PPUSH
31878: LD_VAR 0 5
31882: PPUSH
31883: LD_VAR 0 4
31887: PPUSH
31888: CALL_OW 1
31892: ST_TO_ADDR
// end else
31893: GO 31943
// begin ai_cargo_bay = Replace ( ai_cargo_bay , base , vehicle ) ;
31895: LD_ADDR_EXP 61
31899: PUSH
31900: LD_EXP 61
31904: PPUSH
31905: LD_VAR 0 5
31909: PPUSH
31910: LD_VAR 0 1
31914: PPUSH
31915: CALL_OW 1
31919: ST_TO_ADDR
// ai_cargo_bay_under_construction = Replace ( ai_cargo_bay_under_construction , base , false ) ;
31920: LD_ADDR_EXP 62
31924: PUSH
31925: LD_EXP 62
31929: PPUSH
31930: LD_VAR 0 5
31934: PPUSH
31935: LD_INT 0
31937: PPUSH
31938: CALL_OW 1
31942: ST_TO_ADDR
// end ; end ;
31943: PPOPN 5
31945: END
// export function PlayerAtEasternBorder ; var temp_list ; begin
31946: LD_INT 0
31948: PPUSH
31949: PPUSH
// result = false ;
31950: LD_ADDR_VAR 0 1
31954: PUSH
31955: LD_INT 0
31957: ST_TO_ADDR
// temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31958: LD_ADDR_VAR 0 2
31962: PUSH
31963: LD_INT 22
31965: PUSH
31966: LD_EXP 3
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: LD_INT 30
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 30
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PPUSH
32007: CALL_OW 69
32011: ST_TO_ADDR
// if temp_list = 0 then
32012: LD_VAR 0 2
32016: PUSH
32017: LD_INT 0
32019: EQUAL
32020: IFFALSE 32032
// result = true else
32022: LD_ADDR_VAR 0 1
32026: PUSH
32027: LD_INT 1
32029: ST_TO_ADDR
32030: GO 32065
// if UnitFilter ( temp_list , [ f_inarea , player_base_outer ] ) > 0 then
32032: LD_VAR 0 2
32036: PPUSH
32037: LD_INT 95
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PPUSH
32047: CALL_OW 72
32051: PUSH
32052: LD_INT 0
32054: GREATER
32055: IFFALSE 32065
// result = true ;
32057: LD_ADDR_VAR 0 1
32061: PUSH
32062: LD_INT 1
32064: ST_TO_ADDR
// end ;
32065: LD_VAR 0 1
32069: RET
// every 0 0$1 + 0 0$0.3 do var i , temp_list , human_list , num_sol , num_baz , num_sci , temp_list_2 , temp_list_3 , k ; var base , side , attack_strat_history , first_time_attack_gensher ; var spawnedSci , spawnedSol , spawnedBaz ;
32070: GO 32072
32072: DISABLE
32073: LD_INT 0
32075: PPUSH
32076: PPUSH
32077: PPUSH
32078: PPUSH
32079: PPUSH
32080: PPUSH
32081: PPUSH
32082: PPUSH
32083: PPUSH
32084: PPUSH
32085: PPUSH
32086: PPUSH
32087: PPUSH
32088: PPUSH
32089: PPUSH
32090: PPUSH
// begin base = 3 ;
32091: LD_ADDR_VAR 0 10
32095: PUSH
32096: LD_INT 3
32098: ST_TO_ADDR
// side = russians ;
32099: LD_ADDR_VAR 0 11
32103: PUSH
32104: LD_EXP 4
32108: ST_TO_ADDR
// attack_strat_history = [ ] ;
32109: LD_ADDR_VAR 0 12
32113: PUSH
32114: EMPTY
32115: ST_TO_ADDR
// first_time_attack_gensher = true ;
32116: LD_ADDR_VAR 0 13
32120: PUSH
32121: LD_INT 1
32123: ST_TO_ADDR
// while not scout_event_over do
32124: LD_EXP 93
32128: NOT
32129: IFFALSE 32140
// wait ( 0 0$1 ) ;
32131: LD_INT 35
32133: PPUSH
32134: CALL_OW 67
32138: GO 32124
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , ai_vehicle_attack_delay [ base ] - 2 2$0 ) ;
32140: LD_ADDR_EXP 58
32144: PUSH
32145: LD_EXP 58
32149: PPUSH
32150: LD_VAR 0 10
32154: PPUSH
32155: LD_EXP 58
32159: PUSH
32160: LD_VAR 0 10
32164: ARRAY
32165: PUSH
32166: LD_INT 4200
32168: MINUS
32169: PPUSH
32170: CALL_OW 1
32174: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32175: LD_INT 35
32177: PPUSH
32178: CALL_OW 67
// if UnitFilter ( ai_attacking_soldiers [ base ] , [ f_ok ] ) > 0 or UnitFilter ( ai_attacking_scientists [ base ] , [ f_ok ] ) > 0 or UnitFilter ( ai_vehicles_attack [ base ] , [ f_ok ] ) > 0 then
32182: LD_EXP 64
32186: PUSH
32187: LD_VAR 0 10
32191: ARRAY
32192: PPUSH
32193: LD_INT 50
32195: PUSH
32196: EMPTY
32197: LIST
32198: PPUSH
32199: CALL_OW 72
32203: PUSH
32204: LD_INT 0
32206: GREATER
32207: PUSH
32208: LD_EXP 65
32212: PUSH
32213: LD_VAR 0 10
32217: ARRAY
32218: PPUSH
32219: LD_INT 50
32221: PUSH
32222: EMPTY
32223: LIST
32224: PPUSH
32225: CALL_OW 72
32229: PUSH
32230: LD_INT 0
32232: GREATER
32233: OR
32234: PUSH
32235: LD_EXP 41
32239: PUSH
32240: LD_VAR 0 10
32244: ARRAY
32245: PPUSH
32246: LD_INT 50
32248: PUSH
32249: EMPTY
32250: LIST
32251: PPUSH
32252: CALL_OW 72
32256: PUSH
32257: LD_INT 0
32259: GREATER
32260: OR
32261: IFFALSE 32265
// continue ;
32263: GO 32175
// if IsPlaced ( Cornell ) and not IsDead ( Cornell ) then
32265: LD_EXP 26
32269: PPUSH
32270: CALL_OW 305
32274: PUSH
32275: LD_EXP 26
32279: PPUSH
32280: CALL_OW 301
32284: NOT
32285: AND
32286: IFFALSE 32290
// continue ;
32288: GO 32175
// if IsPlaced ( Khattam ) and not ( IsDead ( Khattam ) or GetSide ( Khattam ) = you ) then
32290: LD_EXP 27
32294: PPUSH
32295: CALL_OW 305
32299: PUSH
32300: LD_EXP 27
32304: PPUSH
32305: CALL_OW 301
32309: PUSH
32310: LD_EXP 27
32314: PPUSH
32315: CALL_OW 255
32319: PUSH
32320: LD_EXP 3
32324: EQUAL
32325: OR
32326: NOT
32327: AND
32328: IFFALSE 32332
// continue ;
32330: GO 32175
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , ai_vehicle_attack_delay [ base ] - 0 0$1 ) ;
32332: LD_ADDR_EXP 58
32336: PUSH
32337: LD_EXP 58
32341: PPUSH
32342: LD_VAR 0 10
32346: PPUSH
32347: LD_EXP 58
32351: PUSH
32352: LD_VAR 0 10
32356: ARRAY
32357: PUSH
32358: LD_INT 35
32360: MINUS
32361: PPUSH
32362: CALL_OW 1
32366: ST_TO_ADDR
// if ai_vehicle_attack_delay [ base ] > 0 0$0 then
32367: LD_EXP 58
32371: PUSH
32372: LD_VAR 0 10
32376: ARRAY
32377: PUSH
32378: LD_INT 0
32380: GREATER
32381: IFFALSE 32385
// continue ;
32383: GO 32175
// if BaseUnderAttack ( base , - 1 ) then
32385: LD_VAR 0 10
32389: PPUSH
32390: LD_INT 1
32392: NEG
32393: PPUSH
32394: CALL 23655 0 2
32398: IFFALSE 32402
// continue ;
32400: GO 32175
// if ai_vehicles_defend [ base ] < MaxNumWarVehiclesForAttack ( base ) then
32402: LD_EXP 40
32406: PUSH
32407: LD_VAR 0 10
32411: ARRAY
32412: PUSH
32413: LD_VAR 0 10
32417: PPUSH
32418: CALL 34395 0 1
32422: LESS
32423: IFFALSE 32427
// continue ;
32425: GO 32175
// temp_list = [ ] ;
32427: LD_ADDR_VAR 0 2
32431: PUSH
32432: EMPTY
32433: ST_TO_ADDR
// temp_list_2 = ai_vehicles_defend [ base ] ;
32434: LD_ADDR_VAR 0 7
32438: PUSH
32439: LD_EXP 40
32443: PUSH
32444: LD_VAR 0 10
32448: ARRAY
32449: ST_TO_ADDR
// for i = 1 to MaxNumWarVehiclesForAttack ( base ) do
32450: LD_ADDR_VAR 0 1
32454: PUSH
32455: DOUBLE
32456: LD_INT 1
32458: DEC
32459: ST_TO_ADDR
32460: LD_VAR 0 10
32464: PPUSH
32465: CALL 34395 0 1
32469: PUSH
32470: FOR_TO
32471: IFFALSE 32517
// begin temp_list = temp_list ^ temp_list_2 [ i ] ;
32473: LD_ADDR_VAR 0 2
32477: PUSH
32478: LD_VAR 0 2
32482: PUSH
32483: LD_VAR 0 7
32487: PUSH
32488: LD_VAR 0 1
32492: ARRAY
32493: ADD
32494: ST_TO_ADDR
// RemoveVehicleFromVariables ( base , temp_list_2 [ i ] ) ;
32495: LD_VAR 0 10
32499: PPUSH
32500: LD_VAR 0 7
32504: PUSH
32505: LD_VAR 0 1
32509: ARRAY
32510: PPUSH
32511: CALL 11523 0 2
// end ;
32515: GO 32470
32517: POP
32518: POP
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , temp_list ) ;
32519: LD_ADDR_EXP 41
32523: PUSH
32524: LD_EXP 41
32528: PPUSH
32529: LD_VAR 0 10
32533: PPUSH
32534: LD_VAR 0 2
32538: PPUSH
32539: CALL_OW 1
32543: ST_TO_ADDR
// human_list = [ ] ;
32544: LD_ADDR_VAR 0 3
32548: PUSH
32549: EMPTY
32550: ST_TO_ADDR
// num_sci = difficulty + Rand ( 0 , 1 ) ;
32551: LD_ADDR_VAR 0 6
32555: PUSH
32556: LD_OWVAR 67
32560: PUSH
32561: LD_INT 0
32563: PPUSH
32564: LD_INT 1
32566: PPUSH
32567: CALL_OW 12
32571: PLUS
32572: ST_TO_ADDR
// num_sol = difficulty + 1 + Rand ( 0 , 1 ) ;
32573: LD_ADDR_VAR 0 4
32577: PUSH
32578: LD_OWVAR 67
32582: PUSH
32583: LD_INT 1
32585: PLUS
32586: PUSH
32587: LD_INT 0
32589: PPUSH
32590: LD_INT 1
32592: PPUSH
32593: CALL_OW 12
32597: PLUS
32598: ST_TO_ADDR
// num_baz = difficulty + Rand ( 0 , 1 ) ;
32599: LD_ADDR_VAR 0 5
32603: PUSH
32604: LD_OWVAR 67
32608: PUSH
32609: LD_INT 0
32611: PPUSH
32612: LD_INT 1
32614: PPUSH
32615: CALL_OW 12
32619: PLUS
32620: ST_TO_ADDR
// case num_russian_attacks of 0 :
32621: LD_EXP 87
32625: PUSH
32626: LD_INT 0
32628: DOUBLE
32629: EQUAL
32630: IFTRUE 32634
32632: GO 32687
32634: POP
// begin if num_sci > 1 then
32635: LD_VAR 0 6
32639: PUSH
32640: LD_INT 1
32642: GREATER
32643: IFFALSE 32653
// num_sci = 1 ;
32645: LD_ADDR_VAR 0 6
32649: PUSH
32650: LD_INT 1
32652: ST_TO_ADDR
// if num_sol > 2 then
32653: LD_VAR 0 4
32657: PUSH
32658: LD_INT 2
32660: GREATER
32661: IFFALSE 32671
// num_sol = 2 ;
32663: LD_ADDR_VAR 0 4
32667: PUSH
32668: LD_INT 2
32670: ST_TO_ADDR
// num_baz = num_baz - 1 ;
32671: LD_ADDR_VAR 0 5
32675: PUSH
32676: LD_VAR 0 5
32680: PUSH
32681: LD_INT 1
32683: MINUS
32684: ST_TO_ADDR
// end ; 1 :
32685: GO 32774
32687: LD_INT 1
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 32740
32695: POP
// begin if num_sol > 3 then
32696: LD_VAR 0 4
32700: PUSH
32701: LD_INT 3
32703: GREATER
32704: IFFALSE 32714
// num_sol = 3 ;
32706: LD_ADDR_VAR 0 4
32710: PUSH
32711: LD_INT 3
32713: ST_TO_ADDR
// if num_baz > 1 then
32714: LD_VAR 0 5
32718: PUSH
32719: LD_INT 1
32721: GREATER
32722: IFFALSE 32738
// num_baz = num_baz - 1 ;
32724: LD_ADDR_VAR 0 5
32728: PUSH
32729: LD_VAR 0 5
32733: PUSH
32734: LD_INT 1
32736: MINUS
32737: ST_TO_ADDR
// end ; 2 :
32738: GO 32774
32740: LD_INT 2
32742: DOUBLE
32743: EQUAL
32744: IFTRUE 32748
32746: GO 32751
32748: POP
// begin end ; else
32749: GO 32774
32751: POP
// begin num_baz = num_baz + Rand ( 0 , 1 ) ;
32752: LD_ADDR_VAR 0 5
32756: PUSH
32757: LD_VAR 0 5
32761: PUSH
32762: LD_INT 0
32764: PPUSH
32765: LD_INT 1
32767: PPUSH
32768: CALL_OW 12
32772: PLUS
32773: ST_TO_ADDR
// end ; end ; if yashin_alive then
32774: LD_EXP 86
32778: IFFALSE 32812
// begin num_baz = num_baz + num_sol ;
32780: LD_ADDR_VAR 0 5
32784: PUSH
32785: LD_VAR 0 5
32789: PUSH
32790: LD_VAR 0 4
32794: PLUS
32795: ST_TO_ADDR
// num_sol = Rand ( 1 , 2 ) ;
32796: LD_ADDR_VAR 0 4
32800: PUSH
32801: LD_INT 1
32803: PPUSH
32804: LD_INT 2
32806: PPUSH
32807: CALL_OW 12
32811: ST_TO_ADDR
// end ; if russian_reserve_troops > 0 then
32812: LD_EXP 102
32816: PUSH
32817: LD_INT 0
32819: GREATER
32820: IFFALSE 32952
// begin if logsenabled then
32822: LD_EXP 2
32826: IFFALSE 32839
// display_strings = [ Spawning russian scrientists!  ] ;
32828: LD_ADDR_OWVAR 47
32832: PUSH
32833: LD_STRING Spawning russian scrientists! 
32835: PUSH
32836: EMPTY
32837: LIST
32838: ST_TO_ADDR
// temp_list = CreateUnitsWithClassLimited ( num_sci , class_scientistic , side , russian_reserve_troops ) ;
32839: LD_ADDR_VAR 0 2
32843: PUSH
32844: LD_VAR 0 6
32848: PPUSH
32849: LD_INT 4
32851: PPUSH
32852: LD_VAR 0 11
32856: PPUSH
32857: LD_EXP 102
32861: PPUSH
32862: CALL 9925 0 4
32866: ST_TO_ADDR
// russian_reserve_troops = russian_reserve_troops - sizeof ( temp_list ) ;
32867: LD_ADDR_EXP 102
32871: PUSH
32872: LD_EXP 102
32876: PUSH
32877: LD_VAR 0 2
32881: PPUSH
32882: CALL 10434 0 1
32886: MINUS
32887: ST_TO_ADDR
// human_list = human_list ^ temp_list ;
32888: LD_ADDR_VAR 0 3
32892: PUSH
32893: LD_VAR 0 3
32897: PUSH
32898: LD_VAR 0 2
32902: ADD
32903: ST_TO_ADDR
// ai_attacking_scientists = Replace ( ai_attacking_scientists , base , temp_list ) ;
32904: LD_ADDR_EXP 65
32908: PUSH
32909: LD_EXP 65
32913: PPUSH
32914: LD_VAR 0 10
32918: PPUSH
32919: LD_VAR 0 2
32923: PPUSH
32924: CALL_OW 1
32928: ST_TO_ADDR
// if logsenabled then
32929: LD_EXP 2
32933: IFFALSE 32952
// display_strings = [ Remaining russian reserves  , russian_reserve_troops ] ;
32935: LD_ADDR_OWVAR 47
32939: PUSH
32940: LD_STRING Remaining russian reserves 
32942: PUSH
32943: LD_EXP 102
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: ST_TO_ADDR
// end ; if russian_reserve_troops > 0 then
32952: LD_EXP 102
32956: PUSH
32957: LD_INT 0
32959: GREATER
32960: IFFALSE 33157
// begin if logsenabled then
32962: LD_EXP 2
32966: IFFALSE 32979
// display_strings = [ Spawning russian soldiers!  ] ;
32968: LD_ADDR_OWVAR 47
32972: PUSH
32973: LD_STRING Spawning russian soldiers! 
32975: PUSH
32976: EMPTY
32977: LIST
32978: ST_TO_ADDR
// temp_list = CreateUnitsWithClassLimited ( num_sol , class_soldier , side , russian_reserve_troops ) ;
32979: LD_ADDR_VAR 0 2
32983: PUSH
32984: LD_VAR 0 4
32988: PPUSH
32989: LD_INT 1
32991: PPUSH
32992: LD_VAR 0 11
32996: PPUSH
32997: LD_EXP 102
33001: PPUSH
33002: CALL 9925 0 4
33006: ST_TO_ADDR
// russian_reserve_troops = russian_reserve_troops - sizeof ( temp_list ) ;
33007: LD_ADDR_EXP 102
33011: PUSH
33012: LD_EXP 102
33016: PUSH
33017: LD_VAR 0 2
33021: PPUSH
33022: CALL 10434 0 1
33026: MINUS
33027: ST_TO_ADDR
// temp_list_2 = CreateUnitsWithClassLimited ( num_baz , class_bazooker , side , russian_reserve_troops ) ;
33028: LD_ADDR_VAR 0 7
33032: PUSH
33033: LD_VAR 0 5
33037: PPUSH
33038: LD_INT 9
33040: PPUSH
33041: LD_VAR 0 11
33045: PPUSH
33046: LD_EXP 102
33050: PPUSH
33051: CALL 9925 0 4
33055: ST_TO_ADDR
// russian_reserve_troops = russian_reserve_troops - sizeof ( temp_list_2 ) ;
33056: LD_ADDR_EXP 102
33060: PUSH
33061: LD_EXP 102
33065: PUSH
33066: LD_VAR 0 7
33070: PPUSH
33071: CALL 10434 0 1
33075: MINUS
33076: ST_TO_ADDR
// temp_list = temp_list ^ temp_list_2 ;
33077: LD_ADDR_VAR 0 2
33081: PUSH
33082: LD_VAR 0 2
33086: PUSH
33087: LD_VAR 0 7
33091: ADD
33092: ST_TO_ADDR
// human_list = human_list ^ temp_list ;
33093: LD_ADDR_VAR 0 3
33097: PUSH
33098: LD_VAR 0 3
33102: PUSH
33103: LD_VAR 0 2
33107: ADD
33108: ST_TO_ADDR
// ai_attacking_soldiers = Replace ( ai_attacking_soldiers , base , temp_list ) ;
33109: LD_ADDR_EXP 64
33113: PUSH
33114: LD_EXP 64
33118: PPUSH
33119: LD_VAR 0 10
33123: PPUSH
33124: LD_VAR 0 2
33128: PPUSH
33129: CALL_OW 1
33133: ST_TO_ADDR
// if logsenabled then
33134: LD_EXP 2
33138: IFFALSE 33157
// display_strings = [ Remaining russian reserves  , russian_reserve_troops ] ;
33140: LD_ADDR_OWVAR 47
33144: PUSH
33145: LD_STRING Remaining russian reserves 
33147: PUSH
33148: LD_EXP 102
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: ST_TO_ADDR
// end ; for i in human_list do
33157: LD_ADDR_VAR 0 1
33161: PUSH
33162: LD_VAR 0 3
33166: PUSH
33167: FOR_IN
33168: IFFALSE 33187
// PlaceUnitArea ( i , russian_reinforcements_area , false ) ;
33170: LD_VAR 0 1
33174: PPUSH
33175: LD_INT 14
33177: PPUSH
33178: LD_INT 0
33180: PPUSH
33181: CALL_OW 49
33185: GO 33167
33187: POP
33188: POP
// if MayAttackGensherBase and Rand ( 1 , 2 ) = 1 then
33189: CALL 34344 0 0
33193: PUSH
33194: LD_INT 1
33196: PPUSH
33197: LD_INT 2
33199: PPUSH
33200: CALL_OW 12
33204: PUSH
33205: LD_INT 1
33207: EQUAL
33208: AND
33209: IFFALSE 33221
// russian_attack_strategy = 1 else
33211: LD_ADDR_EXP 84
33215: PUSH
33216: LD_INT 1
33218: ST_TO_ADDR
33219: GO 33245
// if PlayerAtEasternBorder then
33221: CALL 31946 0 0
33225: IFFALSE 33237
// russian_attack_strategy = 2 else
33227: LD_ADDR_EXP 84
33231: PUSH
33232: LD_INT 2
33234: ST_TO_ADDR
33235: GO 33245
// russian_attack_strategy = 3 ;
33237: LD_ADDR_EXP 84
33241: PUSH
33242: LD_INT 3
33244: ST_TO_ADDR
// if russian_attack_strategy <> 1 and not 1 in attack_strat_history then
33245: LD_EXP 84
33249: PUSH
33250: LD_INT 1
33252: NONEQUAL
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_VAR 0 12
33261: IN
33262: NOT
33263: AND
33264: IFFALSE 33307
// if attack_strat_history >= [ 5 , 4 , 3 ] [ difficulty ] and MayAttackGensherBase then
33266: LD_VAR 0 12
33270: PUSH
33271: LD_INT 5
33273: PUSH
33274: LD_INT 4
33276: PUSH
33277: LD_INT 3
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: PUSH
33285: LD_OWVAR 67
33289: ARRAY
33290: GREATEREQUAL
33291: PUSH
33292: CALL 34344 0 0
33296: AND
33297: IFFALSE 33307
// russian_attack_strategy = 1 ;
33299: LD_ADDR_EXP 84
33303: PUSH
33304: LD_INT 1
33306: ST_TO_ADDR
// attack_strat_history = attack_strat_history ^ russian_attack_strategy ;
33307: LD_ADDR_VAR 0 12
33311: PUSH
33312: LD_VAR 0 12
33316: PUSH
33317: LD_EXP 84
33321: ADD
33322: ST_TO_ADDR
// if russian_attack_strategy = 1 then
33323: LD_EXP 84
33327: PUSH
33328: LD_INT 1
33330: EQUAL
33331: IFFALSE 34180
// begin if first_time_attack_gensher or difficulty = 1 then
33333: LD_VAR 0 13
33337: PUSH
33338: LD_OWVAR 67
33342: PUSH
33343: LD_INT 1
33345: EQUAL
33346: OR
33347: IFFALSE 33741
// begin first_time_attack_gensher = false ;
33349: LD_ADDR_VAR 0 13
33353: PUSH
33354: LD_INT 0
33356: ST_TO_ADDR
// temp_list = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_class , class_bazooker ] ) ;
33357: LD_ADDR_VAR 0 2
33361: PUSH
33362: LD_EXP 64
33366: PUSH
33367: LD_VAR 0 10
33371: ARRAY
33372: PPUSH
33373: LD_INT 25
33375: PUSH
33376: LD_INT 9
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PPUSH
33383: CALL_OW 72
33387: ST_TO_ADDR
// for i in temp_list do
33388: LD_ADDR_VAR 0 1
33392: PUSH
33393: LD_VAR 0 2
33397: PUSH
33398: FOR_IN
33399: IFFALSE 33429
// begin RemoveHumanFromVariables ( base , i , false ) ;
33401: LD_VAR 0 10
33405: PPUSH
33406: LD_VAR 0 1
33410: PPUSH
33411: LD_INT 0
33413: PPUSH
33414: CALL 11915 0 3
// DestroyUnit ( i ) ;
33418: LD_VAR 0 1
33422: PPUSH
33423: CALL_OW 65
// end ;
33427: GO 33398
33429: POP
33430: POP
// temp_list = UnitFilter ( ai_vehicles_attack [ base ] , [ f_weapon , ru_rocket_launcher ] ) ;
33431: LD_ADDR_VAR 0 2
33435: PUSH
33436: LD_EXP 41
33440: PUSH
33441: LD_VAR 0 10
33445: ARRAY
33446: PPUSH
33447: LD_INT 34
33449: PUSH
33450: LD_INT 45
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PPUSH
33457: CALL_OW 72
33461: ST_TO_ADDR
// temp_list_2 = [ ] ;
33462: LD_ADDR_VAR 0 7
33466: PUSH
33467: EMPTY
33468: ST_TO_ADDR
// InitUc ;
33469: CALL_OW 18
// InitVc ;
33473: CALL_OW 20
// uc_side = side ;
33477: LD_ADDR_OWVAR 20
33481: PUSH
33482: LD_VAR 0 11
33486: ST_TO_ADDR
// uc_nation = nation_russian ;
33487: LD_ADDR_OWVAR 21
33491: PUSH
33492: LD_INT 3
33494: ST_TO_ADDR
// for i in temp_list do
33495: LD_ADDR_VAR 0 1
33499: PUSH
33500: LD_VAR 0 2
33504: PUSH
33505: FOR_IN
33506: IFFALSE 33700
// begin RemoveVehicleFromVariables ( base , i ) ;
33508: LD_VAR 0 10
33512: PPUSH
33513: LD_VAR 0 1
33517: PPUSH
33518: CALL 11523 0 2
// vc_chassis = GetChassis ( i ) ;
33522: LD_ADDR_OWVAR 37
33526: PUSH
33527: LD_VAR 0 1
33531: PPUSH
33532: CALL_OW 265
33536: ST_TO_ADDR
// vc_control = GetControl ( i ) ;
33537: LD_ADDR_OWVAR 38
33541: PUSH
33542: LD_VAR 0 1
33546: PPUSH
33547: CALL_OW 263
33551: ST_TO_ADDR
// vc_engine = GetEngine ( i ) ;
33552: LD_ADDR_OWVAR 39
33556: PUSH
33557: LD_VAR 0 1
33561: PPUSH
33562: CALL_OW 262
33566: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
33567: LD_ADDR_OWVAR 40
33571: PUSH
33572: LD_INT 42
33574: ST_TO_ADDR
// temp_list_3 = [ GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ;
33575: LD_ADDR_VAR 0 8
33579: PUSH
33580: LD_VAR 0 1
33584: PPUSH
33585: CALL_OW 250
33589: PUSH
33590: LD_VAR 0 1
33594: PPUSH
33595: CALL_OW 251
33599: PUSH
33600: LD_VAR 0 1
33604: PPUSH
33605: CALL_OW 254
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: ST_TO_ADDR
// DestroyUnit ( i ) ;
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL_OW 65
// i = CreateVehicle ;
33624: LD_ADDR_VAR 0 1
33628: PUSH
33629: CALL_OW 45
33633: ST_TO_ADDR
// SetDir ( i , temp_list_3 [ 3 ] ) ;
33634: LD_VAR 0 1
33638: PPUSH
33639: LD_VAR 0 8
33643: PUSH
33644: LD_INT 3
33646: ARRAY
33647: PPUSH
33648: CALL_OW 233
// PlaceUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] , false ) ;
33652: LD_VAR 0 1
33656: PPUSH
33657: LD_VAR 0 8
33661: PUSH
33662: LD_INT 1
33664: ARRAY
33665: PPUSH
33666: LD_VAR 0 8
33670: PUSH
33671: LD_INT 2
33673: ARRAY
33674: PPUSH
33675: LD_INT 0
33677: PPUSH
33678: CALL_OW 48
// temp_list_2 = temp_list_2 ^ i ;
33682: LD_ADDR_VAR 0 7
33686: PUSH
33687: LD_VAR 0 7
33691: PUSH
33692: LD_VAR 0 1
33696: ADD
33697: ST_TO_ADDR
// end ;
33698: GO 33505
33700: POP
33701: POP
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , ai_vehicles_attack [ base ] ^ temp_list_2 ) ;
33702: LD_ADDR_EXP 41
33706: PUSH
33707: LD_EXP 41
33711: PPUSH
33712: LD_VAR 0 10
33716: PPUSH
33717: LD_EXP 41
33721: PUSH
33722: LD_VAR 0 10
33726: ARRAY
33727: PUSH
33728: LD_VAR 0 7
33732: ADD
33733: PPUSH
33734: CALL_OW 1
33738: ST_TO_ADDR
// end else
33739: GO 33970
// begin temp_list = [ ] ;
33741: LD_ADDR_VAR 0 2
33745: PUSH
33746: EMPTY
33747: ST_TO_ADDR
// temp_list_2 = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_class , class_bazooker ] ) ;
33748: LD_ADDR_VAR 0 7
33752: PUSH
33753: LD_EXP 64
33757: PUSH
33758: LD_VAR 0 10
33762: ARRAY
33763: PPUSH
33764: LD_INT 25
33766: PUSH
33767: LD_INT 9
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PPUSH
33774: CALL_OW 72
33778: ST_TO_ADDR
// temp_list_3 = ai_attacking_soldiers [ base ] diff temp_list_2 ;
33779: LD_ADDR_VAR 0 8
33783: PUSH
33784: LD_EXP 64
33788: PUSH
33789: LD_VAR 0 10
33793: ARRAY
33794: PUSH
33795: LD_VAR 0 7
33799: DIFF
33800: ST_TO_ADDR
// if temp_list_2 > 0 then
33801: LD_VAR 0 7
33805: PUSH
33806: LD_INT 0
33808: GREATER
33809: IFFALSE 33841
// temp_list = temp_list ^ temp_list_2 [ Rand ( 1 , temp_list_2 ) ] ;
33811: LD_ADDR_VAR 0 2
33815: PUSH
33816: LD_VAR 0 2
33820: PUSH
33821: LD_VAR 0 7
33825: PUSH
33826: LD_INT 1
33828: PPUSH
33829: LD_VAR 0 7
33833: PPUSH
33834: CALL_OW 12
33838: ARRAY
33839: ADD
33840: ST_TO_ADDR
// if temp_list_3 > 0 then
33841: LD_VAR 0 8
33845: PUSH
33846: LD_INT 0
33848: GREATER
33849: IFFALSE 33881
// temp_list = temp_list ^ temp_list_3 [ Rand ( 1 , temp_list_3 ) ] ;
33851: LD_ADDR_VAR 0 2
33855: PUSH
33856: LD_VAR 0 2
33860: PUSH
33861: LD_VAR 0 8
33865: PUSH
33866: LD_INT 1
33868: PPUSH
33869: LD_VAR 0 8
33873: PPUSH
33874: CALL_OW 12
33878: ARRAY
33879: ADD
33880: ST_TO_ADDR
// temp_list_2 = ai_attacking_scientists [ base ] ;
33881: LD_ADDR_VAR 0 7
33885: PUSH
33886: LD_EXP 65
33890: PUSH
33891: LD_VAR 0 10
33895: ARRAY
33896: ST_TO_ADDR
// temp_list = temp_list ^ temp_list_2 [ Rand ( 1 , temp_list_2 ) ] ;
33897: LD_ADDR_VAR 0 2
33901: PUSH
33902: LD_VAR 0 2
33906: PUSH
33907: LD_VAR 0 7
33911: PUSH
33912: LD_INT 1
33914: PPUSH
33915: LD_VAR 0 7
33919: PPUSH
33920: CALL_OW 12
33924: ARRAY
33925: ADD
33926: ST_TO_ADDR
// for i in temp_list do
33927: LD_ADDR_VAR 0 1
33931: PUSH
33932: LD_VAR 0 2
33936: PUSH
33937: FOR_IN
33938: IFFALSE 33968
// begin RemoveHumanFromVariables ( base , i , false ) ;
33940: LD_VAR 0 10
33944: PPUSH
33945: LD_VAR 0 1
33949: PPUSH
33950: LD_INT 0
33952: PPUSH
33953: CALL 11915 0 3
// DestroyUnit ( i ) ;
33957: LD_VAR 0 1
33961: PPUSH
33962: CALL_OW 65
// end ;
33966: GO 33937
33968: POP
33969: POP
// end ; temp_list_2 = ai_vehicles_attack [ base ] ;
33970: LD_ADDR_VAR 0 7
33974: PUSH
33975: LD_EXP 41
33979: PUSH
33980: LD_VAR 0 10
33984: ARRAY
33985: ST_TO_ADDR
// temp_list = [ ] ;
33986: LD_ADDR_VAR 0 2
33990: PUSH
33991: EMPTY
33992: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 1 ] [ difficulty ] do
33993: LD_ADDR_VAR 0 1
33997: PUSH
33998: DOUBLE
33999: LD_INT 1
34001: DEC
34002: ST_TO_ADDR
34003: LD_INT 2
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: LIST
34016: PUSH
34017: LD_OWVAR 67
34021: ARRAY
34022: PUSH
34023: FOR_TO
34024: IFFALSE 34100
// begin if temp_list_2 = 0 then
34026: LD_VAR 0 7
34030: PUSH
34031: LD_INT 0
34033: EQUAL
34034: IFFALSE 34038
// break ;
34036: GO 34100
// k = temp_list_2 [ Rand ( 1 , temp_list_2 + 0 ) ] ;
34038: LD_ADDR_VAR 0 9
34042: PUSH
34043: LD_VAR 0 7
34047: PUSH
34048: LD_INT 1
34050: PPUSH
34051: LD_VAR 0 7
34055: PUSH
34056: LD_INT 0
34058: PLUS
34059: PPUSH
34060: CALL_OW 12
34064: ARRAY
34065: ST_TO_ADDR
// temp_list = temp_list ^ k ;
34066: LD_ADDR_VAR 0 2
34070: PUSH
34071: LD_VAR 0 2
34075: PUSH
34076: LD_VAR 0 9
34080: ADD
34081: ST_TO_ADDR
// temp_list_2 = temp_list_2 diff k ;
34082: LD_ADDR_VAR 0 7
34086: PUSH
34087: LD_VAR 0 7
34091: PUSH
34092: LD_VAR 0 9
34096: DIFF
34097: ST_TO_ADDR
// end ;
34098: GO 34023
34100: POP
34101: POP
// for i in temp_list do
34102: LD_ADDR_VAR 0 1
34106: PUSH
34107: LD_VAR 0 2
34111: PUSH
34112: FOR_IN
34113: IFFALSE 34178
// begin RemoveVehicleFromVariables ( base , i ) ;
34115: LD_VAR 0 10
34119: PPUSH
34120: LD_VAR 0 1
34124: PPUSH
34125: CALL 11523 0 2
// temp_list_2 = ai_vehicles_defend [ base ] ^ i ;
34129: LD_ADDR_VAR 0 7
34133: PUSH
34134: LD_EXP 40
34138: PUSH
34139: LD_VAR 0 10
34143: ARRAY
34144: PUSH
34145: LD_VAR 0 1
34149: ADD
34150: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list_2 ) ;
34151: LD_ADDR_EXP 40
34155: PUSH
34156: LD_EXP 40
34160: PPUSH
34161: LD_VAR 0 10
34165: PPUSH
34166: LD_VAR 0 7
34170: PPUSH
34171: CALL_OW 1
34175: ST_TO_ADDR
// end ;
34176: GO 34112
34178: POP
34179: POP
// end ; temp_list = ai_attacking_unit_hex_index [ base ] ;
34180: LD_ADDR_VAR 0 2
34184: PUSH
34185: LD_EXP 75
34189: PUSH
34190: LD_VAR 0 10
34194: ARRAY
34195: ST_TO_ADDR
// for i in ai_vehicles_attack [ base ] ^ ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
34196: LD_ADDR_VAR 0 1
34200: PUSH
34201: LD_EXP 41
34205: PUSH
34206: LD_VAR 0 10
34210: ARRAY
34211: PUSH
34212: LD_EXP 64
34216: PUSH
34217: LD_VAR 0 10
34221: ARRAY
34222: ADD
34223: PUSH
34224: LD_EXP 65
34228: PUSH
34229: LD_VAR 0 10
34233: ARRAY
34234: ADD
34235: PUSH
34236: FOR_IN
34237: IFFALSE 34264
// temp_list = Replace ( temp_list , i , 1 ) ;
34239: LD_ADDR_VAR 0 2
34243: PUSH
34244: LD_VAR 0 2
34248: PPUSH
34249: LD_VAR 0 1
34253: PPUSH
34254: LD_INT 1
34256: PPUSH
34257: CALL_OW 1
34261: ST_TO_ADDR
34262: GO 34236
34264: POP
34265: POP
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
34266: LD_ADDR_EXP 75
34270: PUSH
34271: LD_EXP 75
34275: PPUSH
34276: LD_VAR 0 10
34280: PPUSH
34281: LD_VAR 0 2
34285: PPUSH
34286: CALL_OW 1
34290: ST_TO_ADDR
// num_russian_attacks = num_russian_attacks + 1 ;
34291: LD_ADDR_EXP 87
34295: PUSH
34296: LD_EXP 87
34300: PUSH
34301: LD_INT 1
34303: PLUS
34304: ST_TO_ADDR
// ai_new_attack_commencing = Replace ( ai_new_attack_commencing , base , true ) ;
34305: LD_ADDR_EXP 70
34309: PUSH
34310: LD_EXP 70
34314: PPUSH
34315: LD_VAR 0 10
34319: PPUSH
34320: LD_INT 1
34322: PPUSH
34323: CALL_OW 1
34327: ST_TO_ADDR
// ResetVehicleAttackDelay ( base ) ;
34328: LD_VAR 0 10
34332: PPUSH
34333: CALL 10336 0 1
// until false ;
34337: LD_INT 0
34339: IFFALSE 32175
// end ;
34341: PPOPN 16
34343: END
// function MayAttackGensherBase ; begin
34344: LD_INT 0
34346: PPUSH
// if not scout_event_over or game_phase > 1 then
34347: LD_EXP 93
34351: NOT
34352: PUSH
34353: LD_EXP 89
34357: PUSH
34358: LD_INT 1
34360: GREATER
34361: OR
34362: IFFALSE 34374
// result = false else
34364: LD_ADDR_VAR 0 1
34368: PUSH
34369: LD_INT 0
34371: ST_TO_ADDR
34372: GO 34390
// result := tick >= russians_allowed_to_attack_gensher_time ;
34374: LD_ADDR_VAR 0 1
34378: PUSH
34379: LD_OWVAR 1
34383: PUSH
34384: LD_EXP 94
34388: GREATEREQUAL
34389: ST_TO_ADDR
// end ;
34390: LD_VAR 0 1
34394: RET
// function MaxNumWarVehiclesForAttack ( base ) ; begin
34395: LD_INT 0
34397: PPUSH
// case base of 1 , 2 :
34398: LD_VAR 0 1
34402: PUSH
34403: LD_INT 1
34405: DOUBLE
34406: EQUAL
34407: IFTRUE 34417
34409: LD_INT 2
34411: DOUBLE
34412: EQUAL
34413: IFTRUE 34417
34415: GO 34435
34417: POP
// result = MaxNumWarVehicles ( base ) ; 3 :
34418: LD_ADDR_VAR 0 2
34422: PUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL 30415 0 1
34432: ST_TO_ADDR
34433: GO 34585
34435: LD_INT 3
34437: DOUBLE
34438: EQUAL
34439: IFTRUE 34443
34441: GO 34584
34443: POP
// begin result = [ 0 , 1 , 2 ] [ difficulty ] ;
34444: LD_ADDR_VAR 0 2
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: LD_INT 2
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: LIST
34462: PUSH
34463: LD_OWVAR 67
34467: ARRAY
34468: ST_TO_ADDR
// case num_russian_attacks of 0 :
34469: LD_EXP 87
34473: PUSH
34474: LD_INT 0
34476: DOUBLE
34477: EQUAL
34478: IFTRUE 34482
34480: GO 34485
34482: POP
// begin end ; 1 :
34483: GO 34550
34485: LD_INT 1
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34493
34491: GO 34510
34493: POP
// result = result + 1 ; 2 :
34494: LD_ADDR_VAR 0 2
34498: PUSH
34499: LD_VAR 0 2
34503: PUSH
34504: LD_INT 1
34506: PLUS
34507: ST_TO_ADDR
34508: GO 34550
34510: LD_INT 2
34512: DOUBLE
34513: EQUAL
34514: IFTRUE 34518
34516: GO 34535
34518: POP
// result = result + 2 ; else
34519: LD_ADDR_VAR 0 2
34523: PUSH
34524: LD_VAR 0 2
34528: PUSH
34529: LD_INT 2
34531: PLUS
34532: ST_TO_ADDR
34533: GO 34550
34535: POP
// result = result + 3 ; end ;
34536: LD_ADDR_VAR 0 2
34540: PUSH
34541: LD_VAR 0 2
34545: PUSH
34546: LD_INT 3
34548: PLUS
34549: ST_TO_ADDR
// if result > MaxNumWarVehicles ( base ) then
34550: LD_VAR 0 2
34554: PUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL 30415 0 1
34564: GREATER
34565: IFFALSE 34582
// result = MaxNumWarVehicles ( base ) ;
34567: LD_ADDR_VAR 0 2
34571: PUSH
34572: LD_VAR 0 1
34576: PPUSH
34577: CALL 30415 0 1
34581: ST_TO_ADDR
// end ; end ;
34582: GO 34585
34584: POP
// end ;
34585: LD_VAR 0 2
34589: RET
// every 0 0$1 + 0 0$0.2 do var i , temp_list ; var base , side ;
34590: GO 34592
34592: DISABLE
34593: LD_INT 0
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
// begin base = 3 ;
34599: LD_ADDR_VAR 0 3
34603: PUSH
34604: LD_INT 3
34606: ST_TO_ADDR
// side = russians ;
34607: LD_ADDR_VAR 0 4
34611: PUSH
34612: LD_EXP 4
34616: ST_TO_ADDR
// while not scout_event_over do
34617: LD_EXP 93
34621: NOT
34622: IFFALSE 34633
// wait ( 0 0$1 ) ;
34624: LD_INT 35
34626: PPUSH
34627: CALL_OW 67
34631: GO 34617
// repeat wait ( 0 0$1 ) ;
34633: LD_INT 35
34635: PPUSH
34636: CALL_OW 67
// if game_phase > 1 then
34640: LD_EXP 89
34644: PUSH
34645: LD_INT 1
34647: GREATER
34648: IFFALSE 34652
// exit ;
34650: GO 34955
// if special_russian_attackers > 0 or not MayAttackGensherBase then
34652: LD_EXP 85
34656: PUSH
34657: LD_INT 0
34659: GREATER
34660: PUSH
34661: CALL 34344 0 0
34665: NOT
34666: OR
34667: IFFALSE 34671
// continue ;
34669: GO 34633
// ai_human_attack_delay = Replace ( ai_human_attack_delay , base , ai_human_attack_delay [ base ] - 0 0$1 ) ;
34671: LD_ADDR_EXP 68
34675: PUSH
34676: LD_EXP 68
34680: PPUSH
34681: LD_VAR 0 3
34685: PPUSH
34686: LD_EXP 68
34690: PUSH
34691: LD_VAR 0 3
34695: ARRAY
34696: PUSH
34697: LD_INT 35
34699: MINUS
34700: PPUSH
34701: CALL_OW 1
34705: ST_TO_ADDR
// if ai_human_attack_delay [ base ] > 0 0$0 then
34706: LD_EXP 68
34710: PUSH
34711: LD_VAR 0 3
34715: ARRAY
34716: PUSH
34717: LD_INT 0
34719: GREATER
34720: IFFALSE 34724
// continue ;
34722: GO 34633
// if BaseUnderAttack ( base , - 1 ) then
34724: LD_VAR 0 3
34728: PPUSH
34729: LD_INT 1
34731: NEG
34732: PPUSH
34733: CALL 23655 0 2
34737: IFFALSE 34741
// continue ;
34739: GO 34633
// if russian_reserve_troops > 0 then
34741: LD_EXP 102
34745: PUSH
34746: LD_INT 0
34748: GREATER
34749: IFFALSE 34951
// begin if logsenabled then
34751: LD_EXP 2
34755: IFFALSE 34768
// display_strings = [ Spawning russian special troops that attack Gensher!  ] ;
34757: LD_ADDR_OWVAR 47
34761: PUSH
34762: LD_STRING Spawning russian special troops that attack Gensher! 
34764: PUSH
34765: EMPTY
34766: LIST
34767: ST_TO_ADDR
// special_russian_attackers = CreateUnitsWithClassLimited ( difficulty + yashin_alive , class_bazooker , side , russian_reserve_troops ) ;
34768: LD_ADDR_EXP 85
34772: PUSH
34773: LD_OWVAR 67
34777: PUSH
34778: LD_EXP 86
34782: PLUS
34783: PPUSH
34784: LD_INT 9
34786: PPUSH
34787: LD_VAR 0 4
34791: PPUSH
34792: LD_EXP 102
34796: PPUSH
34797: CALL 9925 0 4
34801: ST_TO_ADDR
// russian_reserve_troops = russian_reserve_troops - sizeof ( special_russian_attackers ) ;
34802: LD_ADDR_EXP 102
34806: PUSH
34807: LD_EXP 102
34811: PUSH
34812: LD_EXP 85
34816: PPUSH
34817: CALL 10434 0 1
34821: MINUS
34822: ST_TO_ADDR
// if logsenabled then
34823: LD_EXP 2
34827: IFFALSE 34846
// display_strings = [ Remaining russian reserves !  , russian_reserve_troops ] ;
34829: LD_ADDR_OWVAR 47
34833: PUSH
34834: LD_STRING Remaining russian reserves ! 
34836: PUSH
34837: LD_EXP 102
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: ST_TO_ADDR
// temp_list = ai_attacking_unit_hex_index [ base ] ;
34846: LD_ADDR_VAR 0 2
34850: PUSH
34851: LD_EXP 75
34855: PUSH
34856: LD_VAR 0 3
34860: ARRAY
34861: ST_TO_ADDR
// for i in special_russian_attackers do
34862: LD_ADDR_VAR 0 1
34866: PUSH
34867: LD_EXP 85
34871: PUSH
34872: FOR_IN
34873: IFFALSE 34915
// begin PlaceUnitArea ( i , russian_reinforcements_area , false ) ;
34875: LD_VAR 0 1
34879: PPUSH
34880: LD_INT 14
34882: PPUSH
34883: LD_INT 0
34885: PPUSH
34886: CALL_OW 49
// temp_list = Replace ( temp_list , i , 1 ) ;
34890: LD_ADDR_VAR 0 2
34894: PUSH
34895: LD_VAR 0 2
34899: PPUSH
34900: LD_VAR 0 1
34904: PPUSH
34905: LD_INT 1
34907: PPUSH
34908: CALL_OW 1
34912: ST_TO_ADDR
// end ;
34913: GO 34872
34915: POP
34916: POP
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
34917: LD_ADDR_EXP 75
34921: PUSH
34922: LD_EXP 75
34926: PPUSH
34927: LD_VAR 0 3
34931: PPUSH
34932: LD_VAR 0 2
34936: PPUSH
34937: CALL_OW 1
34941: ST_TO_ADDR
// ResetHumanAttackDelay ( base ) ;
34942: LD_VAR 0 3
34946: PPUSH
34947: CALL 10385 0 1
// end ; until false ;
34951: LD_INT 0
34953: IFFALSE 34633
// end ;
34955: PPOPN 4
34957: END
// every 0 0$1 do var side , i , temp_value , base , temp_list , temp_unit , temp_list_2 , k , human_attack_hexes , vehicle_attack_hexes , temp_list_3 ; var center_hex , center_dist , attacking_humans , area , x , y , all_done , un1 , val , attacking_vehicles ; var human_prepare_hexes , vehicle_prepare_hexes ; var human_dist , vehicle_dist , all_are_ready , strat_2_attack_permitted , vehs_to_move_to_start_pos , prepare_veh_movement ; var wait_indexes , wait_indexes_pos ;
34958: GO 34960
34960: DISABLE
34961: LD_INT 0
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
34992: PPUSH
34993: PPUSH
// begin side = russians ;
34994: LD_ADDR_VAR 0 1
34998: PUSH
34999: LD_EXP 4
35003: ST_TO_ADDR
// human_dist = 3 ;
35004: LD_ADDR_VAR 0 24
35008: PUSH
35009: LD_INT 3
35011: ST_TO_ADDR
// vehicle_dist = 6 ;
35012: LD_ADDR_VAR 0 25
35016: PUSH
35017: LD_INT 6
35019: ST_TO_ADDR
// vehs_to_move_to_start_pos = [ ] ;
35020: LD_ADDR_VAR 0 28
35024: PUSH
35025: EMPTY
35026: ST_TO_ADDR
// all_are_ready = false ;
35027: LD_ADDR_VAR 0 26
35031: PUSH
35032: LD_INT 0
35034: ST_TO_ADDR
// strat_2_attack_permitted = false ;
35035: LD_ADDR_VAR 0 27
35039: PUSH
35040: LD_INT 0
35042: ST_TO_ADDR
// prepare_veh_movement = true ;
35043: LD_ADDR_VAR 0 29
35047: PUSH
35048: LD_INT 1
35050: ST_TO_ADDR
// wait_indexes_pos = 1 ;
35051: LD_ADDR_VAR 0 31
35055: PUSH
35056: LD_INT 1
35058: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35059: LD_INT 35
35061: PPUSH
35062: CALL_OW 67
// for base in ai_bases do
35066: LD_ADDR_VAR 0 4
35070: PUSH
35071: LD_EXP 59
35075: PUSH
35076: FOR_IN
35077: IFFALSE 40872
// begin if base in [ 1 , 2 ] then
35079: LD_VAR 0 4
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: LD_INT 2
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: IN
35094: IFFALSE 35098
// continue ;
35096: GO 35076
// if ai_vehicles_attack [ base ] = 0 and ai_attacking_soldiers [ base ] = 0 and ai_attacking_scientists [ base ] = 0 then
35098: LD_EXP 41
35102: PUSH
35103: LD_VAR 0 4
35107: ARRAY
35108: PUSH
35109: LD_INT 0
35111: EQUAL
35112: PUSH
35113: LD_EXP 64
35117: PUSH
35118: LD_VAR 0 4
35122: ARRAY
35123: PUSH
35124: LD_INT 0
35126: EQUAL
35127: AND
35128: PUSH
35129: LD_EXP 65
35133: PUSH
35134: LD_VAR 0 4
35138: ARRAY
35139: PUSH
35140: LD_INT 0
35142: EQUAL
35143: AND
35144: IFFALSE 35148
// continue ;
35146: GO 35076
// if ai_new_attack_commencing [ base ] then
35148: LD_EXP 70
35152: PUSH
35153: LD_VAR 0 4
35157: ARRAY
35158: IFFALSE 35215
// begin all_are_ready = false ;
35160: LD_ADDR_VAR 0 26
35164: PUSH
35165: LD_INT 0
35167: ST_TO_ADDR
// strat_2_attack_permitted = false ;
35168: LD_ADDR_VAR 0 27
35172: PUSH
35173: LD_INT 0
35175: ST_TO_ADDR
// prepare_veh_movement = true ;
35176: LD_ADDR_VAR 0 29
35180: PUSH
35181: LD_INT 1
35183: ST_TO_ADDR
// wait_indexes_pos = 1 ;
35184: LD_ADDR_VAR 0 31
35188: PUSH
35189: LD_INT 1
35191: ST_TO_ADDR
// ai_new_attack_commencing = Replace ( ai_new_attack_commencing , base , false ) ;
35192: LD_ADDR_EXP 70
35196: PUSH
35197: LD_EXP 70
35201: PPUSH
35202: LD_VAR 0 4
35206: PPUSH
35207: LD_INT 0
35209: PPUSH
35210: CALL_OW 1
35214: ST_TO_ADDR
// end ; case russian_attack_strategy of 1 :
35215: LD_EXP 84
35219: PUSH
35220: LD_INT 1
35222: DOUBLE
35223: EQUAL
35224: IFTRUE 35228
35226: GO 35442
35228: POP
// begin vehicle_prepare_hexes = [ [ 64 , 51 ] ] ;
35229: LD_ADDR_VAR 0 23
35233: PUSH
35234: LD_INT 64
35236: PUSH
35237: LD_INT 51
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: EMPTY
35245: LIST
35246: ST_TO_ADDR
// human_prepare_hexes = [ [ 72 , 55 ] ] ;
35247: LD_ADDR_VAR 0 22
35251: PUSH
35252: LD_INT 72
35254: PUSH
35255: LD_INT 55
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: EMPTY
35263: LIST
35264: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 75 , 46 ] , [ 75 , 30 ] , [ 70 , 20 ] , [ 84 , 20 ] , [ 99 , 29 ] , [ 108 , 42 ] , [ 112 , 33 ] ] ;
35265: LD_ADDR_VAR 0 10
35269: PUSH
35270: LD_INT 75
35272: PUSH
35273: LD_INT 46
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 75
35282: PUSH
35283: LD_INT 30
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 70
35292: PUSH
35293: LD_INT 20
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 84
35302: PUSH
35303: LD_INT 20
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 99
35312: PUSH
35313: LD_INT 29
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 108
35322: PUSH
35323: LD_INT 42
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 112
35332: PUSH
35333: LD_INT 33
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: ST_TO_ADDR
// human_attack_hexes = [ [ 75 , 46 ] , [ 75 , 30 ] , [ 70 , 20 ] , [ 84 , 20 ] , [ 99 , 29 ] , [ 108 , 42 ] , [ 112 , 33 ] ] ;
35349: LD_ADDR_VAR 0 9
35353: PUSH
35354: LD_INT 75
35356: PUSH
35357: LD_INT 46
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 75
35366: PUSH
35367: LD_INT 30
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 70
35376: PUSH
35377: LD_INT 20
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 84
35386: PUSH
35387: LD_INT 20
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 99
35396: PUSH
35397: LD_INT 29
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 108
35406: PUSH
35407: LD_INT 42
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 112
35416: PUSH
35417: LD_INT 33
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: ST_TO_ADDR
// wait_indexes = [ ] ;
35433: LD_ADDR_VAR 0 30
35437: PUSH
35438: EMPTY
35439: ST_TO_ADDR
// end ; 2 :
35440: GO 36261
35442: LD_INT 2
35444: DOUBLE
35445: EQUAL
35446: IFTRUE 35450
35448: GO 35994
35450: POP
// begin vehicle_prepare_hexes = [ [ 70 , 100 ] ] ;
35451: LD_ADDR_VAR 0 23
35455: PUSH
35456: LD_INT 70
35458: PUSH
35459: LD_INT 100
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: EMPTY
35467: LIST
35468: ST_TO_ADDR
// human_prepare_hexes = [ [ 60 , 82 ] ] ;
35469: LD_ADDR_VAR 0 22
35473: PUSH
35474: LD_INT 60
35476: PUSH
35477: LD_INT 82
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: EMPTY
35485: LIST
35486: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 105 , 95 ] , [ 121 , 93 ] , [ 123 , 79 ] , [ 143 , 78 ] , [ 143 , 71 ] , [ 144 , 64 ] , [ 149 , 74 ] , [ 158 , 88 ] , [ 141 , 85 ] , [ 124 , 79 ] , [ 121 , 93 ] , [ 105 , 95 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35487: LD_ADDR_VAR 0 10
35491: PUSH
35492: LD_INT 105
35494: PUSH
35495: LD_INT 95
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 121
35504: PUSH
35505: LD_INT 93
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 123
35514: PUSH
35515: LD_INT 79
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 143
35524: PUSH
35525: LD_INT 78
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 143
35534: PUSH
35535: LD_INT 71
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 144
35544: PUSH
35545: LD_INT 64
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 149
35554: PUSH
35555: LD_INT 74
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 158
35564: PUSH
35565: LD_INT 88
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 141
35574: PUSH
35575: LD_INT 85
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 124
35584: PUSH
35585: LD_INT 79
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 121
35594: PUSH
35595: LD_INT 93
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 105
35604: PUSH
35605: LD_INT 95
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 88
35614: PUSH
35615: LD_INT 81
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 80
35624: PUSH
35625: LD_INT 63
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 78
35634: PUSH
35635: LD_INT 48
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 89
35644: PUSH
35645: LD_INT 43
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 108
35654: PUSH
35655: LD_INT 40
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 100
35664: PUSH
35665: LD_INT 28
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: ST_TO_ADDR
// human_attack_hexes = [ [ 73 , 95 ] , [ 84 , 101 ] , [ 95 , 102 ] , [ 104 , 100 ] , [ 114 , 97 ] , [ 124 , 99 ] , [ 132 , 100 ] , [ 137 , 94 ] , [ 149 , 99 ] , [ 161 , 104 ] , [ 158 , 88 ] , [ 149 , 74 ] , [ 144 , 64 ] , [ 143 , 71 ] , [ 141 , 85 ] , [ 124 , 79 ] , [ 121 , 93 ] , [ 105 , 95 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35692: LD_ADDR_VAR 0 9
35696: PUSH
35697: LD_INT 73
35699: PUSH
35700: LD_INT 95
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 84
35709: PUSH
35710: LD_INT 101
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 95
35719: PUSH
35720: LD_INT 102
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 104
35729: PUSH
35730: LD_INT 100
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 114
35739: PUSH
35740: LD_INT 97
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 124
35749: PUSH
35750: LD_INT 99
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 132
35759: PUSH
35760: LD_INT 100
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 137
35769: PUSH
35770: LD_INT 94
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 149
35779: PUSH
35780: LD_INT 99
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 161
35789: PUSH
35790: LD_INT 104
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 158
35799: PUSH
35800: LD_INT 88
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 149
35809: PUSH
35810: LD_INT 74
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 144
35819: PUSH
35820: LD_INT 64
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 143
35829: PUSH
35830: LD_INT 71
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 141
35839: PUSH
35840: LD_INT 85
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 124
35849: PUSH
35850: LD_INT 79
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 121
35859: PUSH
35860: LD_INT 93
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 105
35869: PUSH
35870: LD_INT 95
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 88
35879: PUSH
35880: LD_INT 81
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 80
35889: PUSH
35890: LD_INT 63
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 78
35899: PUSH
35900: LD_INT 48
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 89
35909: PUSH
35910: LD_INT 43
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 108
35919: PUSH
35920: LD_INT 40
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 100
35929: PUSH
35930: LD_INT 28
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: ST_TO_ADDR
// wait_indexes = [ [ 1 , 5 ] , [ 3 , 8 ] ] ;
35963: LD_ADDR_VAR 0 30
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: LD_INT 5
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 3
35980: PUSH
35981: LD_INT 8
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: ST_TO_ADDR
// end ; 3 :
35992: GO 36261
35994: LD_INT 3
35996: DOUBLE
35997: EQUAL
35998: IFTRUE 36002
36000: GO 36260
36002: POP
// begin vehicle_prepare_hexes = [ [ 71 , 100 ] ] ;
36003: LD_ADDR_VAR 0 23
36007: PUSH
36008: LD_INT 71
36010: PUSH
36011: LD_INT 100
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: EMPTY
36019: LIST
36020: ST_TO_ADDR
// human_prepare_hexes = [ [ 69 , 76 ] ] ;
36021: LD_ADDR_VAR 0 22
36025: PUSH
36026: LD_INT 69
36028: PUSH
36029: LD_INT 76
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: EMPTY
36037: LIST
36038: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 94 , 97 ] , [ 99 , 109 ] , [ 103 , 94 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
36039: LD_ADDR_VAR 0 10
36043: PUSH
36044: LD_INT 94
36046: PUSH
36047: LD_INT 97
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 99
36056: PUSH
36057: LD_INT 109
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 103
36066: PUSH
36067: LD_INT 94
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 88
36076: PUSH
36077: LD_INT 81
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 80
36086: PUSH
36087: LD_INT 63
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 78
36096: PUSH
36097: LD_INT 48
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 89
36106: PUSH
36107: LD_INT 43
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 108
36116: PUSH
36117: LD_INT 40
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 100
36126: PUSH
36127: LD_INT 28
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
// human_attack_hexes = [ [ 94 , 97 ] , [ 99 , 109 ] , [ 103 , 94 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
36145: LD_ADDR_VAR 0 9
36149: PUSH
36150: LD_INT 94
36152: PUSH
36153: LD_INT 97
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 99
36162: PUSH
36163: LD_INT 109
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 103
36172: PUSH
36173: LD_INT 94
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 88
36182: PUSH
36183: LD_INT 81
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 80
36192: PUSH
36193: LD_INT 63
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 78
36202: PUSH
36203: LD_INT 48
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 89
36212: PUSH
36213: LD_INT 43
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 108
36222: PUSH
36223: LD_INT 40
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 100
36232: PUSH
36233: LD_INT 28
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: ST_TO_ADDR
// wait_indexes = [ ] ;
36251: LD_ADDR_VAR 0 30
36255: PUSH
36256: EMPTY
36257: ST_TO_ADDR
// end ; end ;
36258: GO 36261
36260: POP
// area = GetBaseArea ( base ) ;
36261: LD_ADDR_VAR 0 15
36265: PUSH
36266: LD_VAR 0 4
36270: PPUSH
36271: CALL 12664 0 1
36275: ST_TO_ADDR
// attacking_humans = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_ok ] ) ;
36276: LD_ADDR_VAR 0 14
36280: PUSH
36281: LD_EXP 64
36285: PUSH
36286: LD_VAR 0 4
36290: ARRAY
36291: PPUSH
36292: LD_INT 50
36294: PUSH
36295: EMPTY
36296: LIST
36297: PPUSH
36298: CALL_OW 72
36302: ST_TO_ADDR
// attacking_vehicles = UnitFilter ( ai_vehicles_attack [ base ] , [ f_ok ] ) ;
36303: LD_ADDR_VAR 0 21
36307: PUSH
36308: LD_EXP 41
36312: PUSH
36313: LD_VAR 0 4
36317: ARRAY
36318: PPUSH
36319: LD_INT 50
36321: PUSH
36322: EMPTY
36323: LIST
36324: PPUSH
36325: CALL_OW 72
36329: ST_TO_ADDR
// if ai_attacking_scientists [ base ] > 0 then
36330: LD_EXP 65
36334: PUSH
36335: LD_VAR 0 4
36339: ARRAY
36340: PUSH
36341: LD_INT 0
36343: GREATER
36344: IFFALSE 36714
// if ai_attacking_soldiers [ base ] = 0 then
36346: LD_EXP 64
36350: PUSH
36351: LD_VAR 0 4
36355: ARRAY
36356: PUSH
36357: LD_INT 0
36359: EQUAL
36360: IFFALSE 36386
// begin attacking_humans = attacking_humans ^ ai_attacking_scientists [ base ] ;
36362: LD_ADDR_VAR 0 14
36366: PUSH
36367: LD_VAR 0 14
36371: PUSH
36372: LD_EXP 65
36376: PUSH
36377: LD_VAR 0 4
36381: ARRAY
36382: ADD
36383: ST_TO_ADDR
// end else
36384: GO 36714
// begin x = 0 ;
36386: LD_ADDR_VAR 0 16
36390: PUSH
36391: LD_INT 0
36393: ST_TO_ADDR
// y = 0 ;
36394: LD_ADDR_VAR 0 17
36398: PUSH
36399: LD_INT 0
36401: ST_TO_ADDR
// for i in ai_attacking_soldiers [ base ] do
36402: LD_ADDR_VAR 0 2
36406: PUSH
36407: LD_EXP 64
36411: PUSH
36412: LD_VAR 0 4
36416: ARRAY
36417: PUSH
36418: FOR_IN
36419: IFFALSE 36465
// begin x = x + GetX ( i ) ;
36421: LD_ADDR_VAR 0 16
36425: PUSH
36426: LD_VAR 0 16
36430: PUSH
36431: LD_VAR 0 2
36435: PPUSH
36436: CALL_OW 250
36440: PLUS
36441: ST_TO_ADDR
// y = y + GetY ( i ) ;
36442: LD_ADDR_VAR 0 17
36446: PUSH
36447: LD_VAR 0 17
36451: PUSH
36452: LD_VAR 0 2
36456: PPUSH
36457: CALL_OW 251
36461: PLUS
36462: ST_TO_ADDR
// end ;
36463: GO 36418
36465: POP
36466: POP
// x = x div ai_attacking_soldiers [ base ] ;
36467: LD_ADDR_VAR 0 16
36471: PUSH
36472: LD_VAR 0 16
36476: PUSH
36477: LD_EXP 64
36481: PUSH
36482: LD_VAR 0 4
36486: ARRAY
36487: DIV
36488: ST_TO_ADDR
// y = y div ai_attacking_soldiers [ base ] ;
36489: LD_ADDR_VAR 0 17
36493: PUSH
36494: LD_VAR 0 17
36498: PUSH
36499: LD_EXP 64
36503: PUSH
36504: LD_VAR 0 4
36508: ARRAY
36509: DIV
36510: ST_TO_ADDR
// temp_value = 0 ;
36511: LD_ADDR_VAR 0 3
36515: PUSH
36516: LD_INT 0
36518: ST_TO_ADDR
// for i in ai_attacking_soldiers [ base ] do
36519: LD_ADDR_VAR 0 2
36523: PUSH
36524: LD_EXP 64
36528: PUSH
36529: LD_VAR 0 4
36533: ARRAY
36534: PUSH
36535: FOR_IN
36536: IFFALSE 36587
// begin k = GetDistUnitXY ( i , x , y ) ;
36538: LD_ADDR_VAR 0 8
36542: PUSH
36543: LD_VAR 0 2
36547: PPUSH
36548: LD_VAR 0 16
36552: PPUSH
36553: LD_VAR 0 17
36557: PPUSH
36558: CALL_OW 297
36562: ST_TO_ADDR
// if k > temp_value then
36563: LD_VAR 0 8
36567: PUSH
36568: LD_VAR 0 3
36572: GREATER
36573: IFFALSE 36585
// temp_value = k ;
36575: LD_ADDR_VAR 0 3
36579: PUSH
36580: LD_VAR 0 8
36584: ST_TO_ADDR
// end ;
36585: GO 36535
36587: POP
36588: POP
// for i in ai_attacking_scientists [ base ] do
36589: LD_ADDR_VAR 0 2
36593: PUSH
36594: LD_EXP 65
36598: PUSH
36599: LD_VAR 0 4
36603: ARRAY
36604: PUSH
36605: FOR_IN
36606: IFFALSE 36712
// if GetDistUnitXY ( i , x , y ) > temp_value then
36608: LD_VAR 0 2
36612: PPUSH
36613: LD_VAR 0 16
36617: PPUSH
36618: LD_VAR 0 17
36622: PPUSH
36623: CALL_OW 297
36627: PUSH
36628: LD_VAR 0 3
36632: GREATER
36633: IFFALSE 36710
// case GetType ( IsInUnit ( i ) ) of unit_building :
36635: LD_VAR 0 2
36639: PPUSH
36640: CALL_OW 310
36644: PPUSH
36645: CALL_OW 247
36649: PUSH
36650: LD_INT 3
36652: DOUBLE
36653: EQUAL
36654: IFTRUE 36658
36656: GO 36670
36658: POP
// ComExitBuilding ( i ) ; unit_vehicle :
36659: LD_VAR 0 2
36663: PPUSH
36664: CALL_OW 122
36668: GO 36710
36670: LD_INT 2
36672: DOUBLE
36673: EQUAL
36674: IFTRUE 36678
36676: GO 36690
36678: POP
// ComExitVehicle ( i ) ; else
36679: LD_VAR 0 2
36683: PPUSH
36684: CALL_OW 121
36688: GO 36710
36690: POP
// ComMoveXY ( i , x , y ) ; end ;
36691: LD_VAR 0 2
36695: PPUSH
36696: LD_VAR 0 16
36700: PPUSH
36701: LD_VAR 0 17
36705: PPUSH
36706: CALL_OW 111
36710: GO 36605
36712: POP
36713: POP
// end ; if not all_are_ready then
36714: LD_VAR 0 26
36718: NOT
36719: IFFALSE 37443
// begin all_done = true ;
36721: LD_ADDR_VAR 0 18
36725: PUSH
36726: LD_INT 1
36728: ST_TO_ADDR
// for k = 1 to 2 do
36729: LD_ADDR_VAR 0 8
36733: PUSH
36734: DOUBLE
36735: LD_INT 1
36737: DEC
36738: ST_TO_ADDR
36739: LD_INT 2
36741: PUSH
36742: FOR_TO
36743: IFFALSE 37330
// begin case k of 1 :
36745: LD_VAR 0 8
36749: PUSH
36750: LD_INT 1
36752: DOUBLE
36753: EQUAL
36754: IFTRUE 36758
36756: GO 36907
36758: POP
// begin temp_list = attacking_vehicles ;
36759: LD_ADDR_VAR 0 5
36763: PUSH
36764: LD_VAR 0 21
36768: ST_TO_ADDR
// temp_list_2 = vehicle_prepare_hexes ;
36769: LD_ADDR_VAR 0 7
36773: PUSH
36774: LD_VAR 0 23
36778: ST_TO_ADDR
// if russian_attack_strategy = 2 then
36779: LD_EXP 84
36783: PUSH
36784: LD_INT 2
36786: EQUAL
36787: IFFALSE 36905
// begin if prepare_veh_movement then
36789: LD_VAR 0 29
36793: IFFALSE 36847
// begin prepare_veh_movement = false ;
36795: LD_ADDR_VAR 0 29
36799: PUSH
36800: LD_INT 0
36802: ST_TO_ADDR
// for i in temp_list do
36803: LD_ADDR_VAR 0 2
36807: PUSH
36808: LD_VAR 0 5
36812: PUSH
36813: FOR_IN
36814: IFFALSE 36845
// if not IsInArea ( i , area ) then
36816: LD_VAR 0 2
36820: PPUSH
36821: LD_VAR 0 15
36825: PPUSH
36826: CALL_OW 308
36830: NOT
36831: IFFALSE 36843
// begin prepare_veh_movement = true ;
36833: LD_ADDR_VAR 0 29
36837: PUSH
36838: LD_INT 1
36840: ST_TO_ADDR
// break ;
36841: GO 36845
// end ;
36843: GO 36813
36845: POP
36846: POP
// end ; vehs_to_move_to_start_pos = [ ] ;
36847: LD_ADDR_VAR 0 28
36851: PUSH
36852: EMPTY
36853: ST_TO_ADDR
// for i in temp_list do
36854: LD_ADDR_VAR 0 2
36858: PUSH
36859: LD_VAR 0 5
36863: PUSH
36864: FOR_IN
36865: IFFALSE 36903
// begin vehs_to_move_to_start_pos = vehs_to_move_to_start_pos ^ i ;
36867: LD_ADDR_VAR 0 28
36871: PUSH
36872: LD_VAR 0 28
36876: PUSH
36877: LD_VAR 0 2
36881: ADD
36882: ST_TO_ADDR
// if IsInArea ( i , area ) then
36883: LD_VAR 0 2
36887: PPUSH
36888: LD_VAR 0 15
36892: PPUSH
36893: CALL_OW 308
36897: IFFALSE 36901
// break ;
36899: GO 36903
// end ;
36901: GO 36864
36903: POP
36904: POP
// end ; end ; 2 :
36905: GO 36939
36907: LD_INT 2
36909: DOUBLE
36910: EQUAL
36911: IFTRUE 36915
36913: GO 36938
36915: POP
// begin temp_list = attacking_humans ;
36916: LD_ADDR_VAR 0 5
36920: PUSH
36921: LD_VAR 0 14
36925: ST_TO_ADDR
// temp_list_2 = human_prepare_hexes ;
36926: LD_ADDR_VAR 0 7
36930: PUSH
36931: LD_VAR 0 22
36935: ST_TO_ADDR
// end ; end ;
36936: GO 36939
36938: POP
// temp_value = true ;
36939: LD_ADDR_VAR 0 3
36943: PUSH
36944: LD_INT 1
36946: ST_TO_ADDR
// for i in temp_list do
36947: LD_ADDR_VAR 0 2
36951: PUSH
36952: LD_VAR 0 5
36956: PUSH
36957: FOR_IN
36958: IFFALSE 37199
// begin if ai_attacking_unit_hex_index [ base ] [ i ] = temp_list_2 + 0 then
36960: LD_EXP 75
36964: PUSH
36965: LD_VAR 0 4
36969: ARRAY
36970: PUSH
36971: LD_VAR 0 2
36975: ARRAY
36976: PUSH
36977: LD_VAR 0 7
36981: PUSH
36982: LD_INT 0
36984: PLUS
36985: EQUAL
36986: IFFALSE 36998
// temp_value = false else
36988: LD_ADDR_VAR 0 3
36992: PUSH
36993: LD_INT 0
36995: ST_TO_ADDR
36996: GO 37006
// all_done = false ;
36998: LD_ADDR_VAR 0 18
37002: PUSH
37003: LD_INT 0
37005: ST_TO_ADDR
// temp_list_3 = temp_list_2 [ ai_attacking_unit_hex_index [ base ] [ i ] ] ;
37006: LD_ADDR_VAR 0 11
37010: PUSH
37011: LD_VAR 0 7
37015: PUSH
37016: LD_EXP 75
37020: PUSH
37021: LD_VAR 0 4
37025: ARRAY
37026: PUSH
37027: LD_VAR 0 2
37031: ARRAY
37032: ARRAY
37033: ST_TO_ADDR
// if k = 1 and russian_attack_strategy = 2 then
37034: LD_VAR 0 8
37038: PUSH
37039: LD_INT 1
37041: EQUAL
37042: PUSH
37043: LD_EXP 84
37047: PUSH
37048: LD_INT 2
37050: EQUAL
37051: AND
37052: IFFALSE 37079
// begin temp_list_3 = CalculateVehicleNotReadyHex ( temp_list_3 , i , attacking_vehicles ) ;
37054: LD_ADDR_VAR 0 11
37058: PUSH
37059: LD_VAR 0 11
37063: PPUSH
37064: LD_VAR 0 2
37068: PPUSH
37069: LD_VAR 0 21
37073: PPUSH
37074: CALL 41866 0 3
37078: ST_TO_ADDR
// end ; if GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) > [ vehicle_dist , human_dist + 1 ] [ k ] and not ( GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) <= 10 and not HasTask ( i ) ) then
37079: LD_VAR 0 2
37083: PPUSH
37084: LD_VAR 0 11
37088: PUSH
37089: LD_INT 1
37091: ARRAY
37092: PPUSH
37093: LD_VAR 0 11
37097: PUSH
37098: LD_INT 2
37100: ARRAY
37101: PPUSH
37102: CALL_OW 297
37106: PUSH
37107: LD_VAR 0 25
37111: PUSH
37112: LD_VAR 0 24
37116: PUSH
37117: LD_INT 1
37119: PLUS
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_VAR 0 8
37129: ARRAY
37130: GREATER
37131: PUSH
37132: LD_VAR 0 2
37136: PPUSH
37137: LD_VAR 0 11
37141: PUSH
37142: LD_INT 1
37144: ARRAY
37145: PPUSH
37146: LD_VAR 0 11
37150: PUSH
37151: LD_INT 2
37153: ARRAY
37154: PPUSH
37155: CALL_OW 297
37159: PUSH
37160: LD_INT 10
37162: LESSEQUAL
37163: PUSH
37164: LD_VAR 0 2
37168: PPUSH
37169: CALL_OW 314
37173: NOT
37174: AND
37175: NOT
37176: AND
37177: IFFALSE 37197
// begin temp_value = false ;
37179: LD_ADDR_VAR 0 3
37183: PUSH
37184: LD_INT 0
37186: ST_TO_ADDR
// all_done = false ;
37187: LD_ADDR_VAR 0 18
37191: PUSH
37192: LD_INT 0
37194: ST_TO_ADDR
// break ;
37195: GO 37199
// end ; end ;
37197: GO 36957
37199: POP
37200: POP
// if temp_value then
37201: LD_VAR 0 3
37205: IFFALSE 37328
// begin if k = 2 then
37207: LD_VAR 0 8
37211: PUSH
37212: LD_INT 2
37214: EQUAL
37215: IFFALSE 37239
// temp_list = temp_list union ai_attacking_scientists [ base ] ;
37217: LD_ADDR_VAR 0 5
37221: PUSH
37222: LD_VAR 0 5
37226: PUSH
37227: LD_EXP 65
37231: PUSH
37232: LD_VAR 0 4
37236: ARRAY
37237: UNION
37238: ST_TO_ADDR
// for i in temp_list do
37239: LD_ADDR_VAR 0 2
37243: PUSH
37244: LD_VAR 0 5
37248: PUSH
37249: FOR_IN
37250: IFFALSE 37326
// begin temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37252: LD_ADDR_VAR 0 7
37256: PUSH
37257: LD_EXP 75
37261: PUSH
37262: LD_VAR 0 4
37266: ARRAY
37267: PPUSH
37268: LD_VAR 0 2
37272: PPUSH
37273: LD_EXP 75
37277: PUSH
37278: LD_VAR 0 4
37282: ARRAY
37283: PUSH
37284: LD_VAR 0 2
37288: ARRAY
37289: PUSH
37290: LD_INT 1
37292: PLUS
37293: PPUSH
37294: CALL_OW 1
37298: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37299: LD_ADDR_EXP 75
37303: PUSH
37304: LD_EXP 75
37308: PPUSH
37309: LD_VAR 0 4
37313: PPUSH
37314: LD_VAR 0 7
37318: PPUSH
37319: CALL_OW 1
37323: ST_TO_ADDR
// end ;
37324: GO 37249
37326: POP
37327: POP
// end ; end ;
37328: GO 36742
37330: POP
37331: POP
// if all_done then
37332: LD_VAR 0 18
37336: IFFALSE 37441
// begin all_are_ready = true ;
37338: LD_ADDR_VAR 0 26
37342: PUSH
37343: LD_INT 1
37345: ST_TO_ADDR
// for i in attacking_vehicles ^ ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
37346: LD_ADDR_VAR 0 2
37350: PUSH
37351: LD_VAR 0 21
37355: PUSH
37356: LD_EXP 64
37360: PUSH
37361: LD_VAR 0 4
37365: ARRAY
37366: ADD
37367: PUSH
37368: LD_EXP 65
37372: PUSH
37373: LD_VAR 0 4
37377: ARRAY
37378: ADD
37379: PUSH
37380: FOR_IN
37381: IFFALSE 37439
// begin temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , 1 ) ;
37383: LD_ADDR_VAR 0 7
37387: PUSH
37388: LD_EXP 75
37392: PUSH
37393: LD_VAR 0 4
37397: ARRAY
37398: PPUSH
37399: LD_VAR 0 2
37403: PPUSH
37404: LD_INT 1
37406: PPUSH
37407: CALL_OW 1
37411: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37412: LD_ADDR_EXP 75
37416: PUSH
37417: LD_EXP 75
37421: PPUSH
37422: LD_VAR 0 4
37426: PPUSH
37427: LD_VAR 0 7
37431: PPUSH
37432: CALL_OW 1
37436: ST_TO_ADDR
// end ;
37437: GO 37380
37439: POP
37440: POP
// end ; end else
37441: GO 38095
// begin temp_list_3 = [ false , false ] ;
37443: LD_ADDR_VAR 0 11
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: ST_TO_ADDR
// for i in attacking_vehicles do
37458: LD_ADDR_VAR 0 2
37462: PUSH
37463: LD_VAR 0 21
37467: PUSH
37468: FOR_IN
37469: IFFALSE 37717
// if ai_attacking_unit_hex_index [ base ] [ i ] < vehicle_attack_hexes + 0 then
37471: LD_EXP 75
37475: PUSH
37476: LD_VAR 0 4
37480: ARRAY
37481: PUSH
37482: LD_VAR 0 2
37486: ARRAY
37487: PUSH
37488: LD_VAR 0 10
37492: PUSH
37493: LD_INT 0
37495: PLUS
37496: LESS
37497: IFFALSE 37715
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) <= vehicle_dist then
37499: LD_VAR 0 2
37503: PPUSH
37504: LD_VAR 0 10
37508: PUSH
37509: LD_EXP 75
37513: PUSH
37514: LD_VAR 0 4
37518: ARRAY
37519: PUSH
37520: LD_VAR 0 2
37524: ARRAY
37525: ARRAY
37526: PUSH
37527: LD_INT 1
37529: ARRAY
37530: PPUSH
37531: LD_VAR 0 10
37535: PUSH
37536: LD_EXP 75
37540: PUSH
37541: LD_VAR 0 4
37545: ARRAY
37546: PUSH
37547: LD_VAR 0 2
37551: ARRAY
37552: ARRAY
37553: PUSH
37554: LD_INT 2
37556: ARRAY
37557: PPUSH
37558: CALL_OW 297
37562: PUSH
37563: LD_VAR 0 25
37567: LESSEQUAL
37568: IFFALSE 37715
// begin if wait_indexes_pos <= wait_indexes + 0 then
37570: LD_VAR 0 31
37574: PUSH
37575: LD_VAR 0 30
37579: PUSH
37580: LD_INT 0
37582: PLUS
37583: LESSEQUAL
37584: IFFALSE 37643
// if ai_attacking_unit_hex_index [ base ] [ i ] = wait_indexes [ wait_indexes_pos ] [ 1 ] then
37586: LD_EXP 75
37590: PUSH
37591: LD_VAR 0 4
37595: ARRAY
37596: PUSH
37597: LD_VAR 0 2
37601: ARRAY
37602: PUSH
37603: LD_VAR 0 30
37607: PUSH
37608: LD_VAR 0 31
37612: ARRAY
37613: PUSH
37614: LD_INT 1
37616: ARRAY
37617: EQUAL
37618: IFFALSE 37643
// begin temp_list_3 = Replace ( temp_list_3 , 1 , true ) ;
37620: LD_ADDR_VAR 0 11
37624: PUSH
37625: LD_VAR 0 11
37629: PPUSH
37630: LD_INT 1
37632: PPUSH
37633: LD_INT 1
37635: PPUSH
37636: CALL_OW 1
37640: ST_TO_ADDR
// continue ;
37641: GO 37468
// end ; temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37643: LD_ADDR_VAR 0 7
37647: PUSH
37648: LD_EXP 75
37652: PUSH
37653: LD_VAR 0 4
37657: ARRAY
37658: PPUSH
37659: LD_VAR 0 2
37663: PPUSH
37664: LD_EXP 75
37668: PUSH
37669: LD_VAR 0 4
37673: ARRAY
37674: PUSH
37675: LD_VAR 0 2
37679: ARRAY
37680: PUSH
37681: LD_INT 1
37683: PLUS
37684: PPUSH
37685: CALL_OW 1
37689: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37690: LD_ADDR_EXP 75
37694: PUSH
37695: LD_EXP 75
37699: PPUSH
37700: LD_VAR 0 4
37704: PPUSH
37705: LD_VAR 0 7
37709: PPUSH
37710: CALL_OW 1
37714: ST_TO_ADDR
// end ; end ;
37715: GO 37468
37717: POP
37718: POP
// temp_value = true ;
37719: LD_ADDR_VAR 0 3
37723: PUSH
37724: LD_INT 1
37726: ST_TO_ADDR
// for i in attacking_humans do
37727: LD_ADDR_VAR 0 2
37731: PUSH
37732: LD_VAR 0 14
37736: PUSH
37737: FOR_IN
37738: IFFALSE 37851
// if ai_attacking_unit_hex_index [ base ] [ i ] <= human_attack_hexes + 0 then
37740: LD_EXP 75
37744: PUSH
37745: LD_VAR 0 4
37749: ARRAY
37750: PUSH
37751: LD_VAR 0 2
37755: ARRAY
37756: PUSH
37757: LD_VAR 0 9
37761: PUSH
37762: LD_INT 0
37764: PLUS
37765: LESSEQUAL
37766: IFFALSE 37849
// begin if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
37768: LD_VAR 0 2
37772: PPUSH
37773: LD_VAR 0 9
37777: PUSH
37778: LD_EXP 75
37782: PUSH
37783: LD_VAR 0 4
37787: ARRAY
37788: PUSH
37789: LD_VAR 0 2
37793: ARRAY
37794: ARRAY
37795: PUSH
37796: LD_INT 1
37798: ARRAY
37799: PPUSH
37800: LD_VAR 0 9
37804: PUSH
37805: LD_EXP 75
37809: PUSH
37810: LD_VAR 0 4
37814: ARRAY
37815: PUSH
37816: LD_VAR 0 2
37820: ARRAY
37821: ARRAY
37822: PUSH
37823: LD_INT 2
37825: ARRAY
37826: PPUSH
37827: CALL_OW 297
37831: PUSH
37832: LD_VAR 0 24
37836: GREATER
37837: IFFALSE 37849
// begin temp_value = false ;
37839: LD_ADDR_VAR 0 3
37843: PUSH
37844: LD_INT 0
37846: ST_TO_ADDR
// break ;
37847: GO 37851
// end ; end ;
37849: GO 37737
37851: POP
37852: POP
// if temp_value then
37853: LD_VAR 0 3
37857: IFFALSE 38067
// for i in ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
37859: LD_ADDR_VAR 0 2
37863: PUSH
37864: LD_EXP 64
37868: PUSH
37869: LD_VAR 0 4
37873: ARRAY
37874: PUSH
37875: LD_EXP 65
37879: PUSH
37880: LD_VAR 0 4
37884: ARRAY
37885: ADD
37886: PUSH
37887: FOR_IN
37888: IFFALSE 38065
// if ai_attacking_unit_hex_index [ base ] [ i ] < human_attack_hexes + 0 then
37890: LD_EXP 75
37894: PUSH
37895: LD_VAR 0 4
37899: ARRAY
37900: PUSH
37901: LD_VAR 0 2
37905: ARRAY
37906: PUSH
37907: LD_VAR 0 9
37911: PUSH
37912: LD_INT 0
37914: PLUS
37915: LESS
37916: IFFALSE 38063
// begin if wait_indexes_pos <= wait_indexes + 0 then
37918: LD_VAR 0 31
37922: PUSH
37923: LD_VAR 0 30
37927: PUSH
37928: LD_INT 0
37930: PLUS
37931: LESSEQUAL
37932: IFFALSE 37991
// if ai_attacking_unit_hex_index [ base ] [ i ] = wait_indexes [ wait_indexes_pos ] [ 2 ] then
37934: LD_EXP 75
37938: PUSH
37939: LD_VAR 0 4
37943: ARRAY
37944: PUSH
37945: LD_VAR 0 2
37949: ARRAY
37950: PUSH
37951: LD_VAR 0 30
37955: PUSH
37956: LD_VAR 0 31
37960: ARRAY
37961: PUSH
37962: LD_INT 2
37964: ARRAY
37965: EQUAL
37966: IFFALSE 37991
// begin temp_list_3 = Replace ( temp_list_3 , 2 , true ) ;
37968: LD_ADDR_VAR 0 11
37972: PUSH
37973: LD_VAR 0 11
37977: PPUSH
37978: LD_INT 2
37980: PPUSH
37981: LD_INT 1
37983: PPUSH
37984: CALL_OW 1
37988: ST_TO_ADDR
// break ;
37989: GO 38065
// end ; temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37991: LD_ADDR_VAR 0 7
37995: PUSH
37996: LD_EXP 75
38000: PUSH
38001: LD_VAR 0 4
38005: ARRAY
38006: PPUSH
38007: LD_VAR 0 2
38011: PPUSH
38012: LD_EXP 75
38016: PUSH
38017: LD_VAR 0 4
38021: ARRAY
38022: PUSH
38023: LD_VAR 0 2
38027: ARRAY
38028: PUSH
38029: LD_INT 1
38031: PLUS
38032: PPUSH
38033: CALL_OW 1
38037: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
38038: LD_ADDR_EXP 75
38042: PUSH
38043: LD_EXP 75
38047: PPUSH
38048: LD_VAR 0 4
38052: PPUSH
38053: LD_VAR 0 7
38057: PPUSH
38058: CALL_OW 1
38062: ST_TO_ADDR
// end ;
38063: GO 37887
38065: POP
38066: POP
// if ( temp_list_3 diff true ) = 0 then
38067: LD_VAR 0 11
38071: PUSH
38072: LD_INT 1
38074: DIFF
38075: PUSH
38076: LD_INT 0
38078: EQUAL
38079: IFFALSE 38095
// wait_indexes_pos = wait_indexes_pos + 1 ;
38081: LD_ADDR_VAR 0 31
38085: PUSH
38086: LD_VAR 0 31
38090: PUSH
38091: LD_INT 1
38093: PLUS
38094: ST_TO_ADDR
// end ; if russian_attack_strategy = 2 and not strat_2_attack_permitted then
38095: LD_EXP 84
38099: PUSH
38100: LD_INT 2
38102: EQUAL
38103: PUSH
38104: LD_VAR 0 27
38108: NOT
38109: AND
38110: IFFALSE 38245
// begin temp_list = UnitFilter ( attacking_vehicles , [ f_inarea , player_base_1 ] ) ;
38112: LD_ADDR_VAR 0 5
38116: PUSH
38117: LD_VAR 0 21
38121: PPUSH
38122: LD_INT 95
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PPUSH
38132: CALL_OW 72
38136: ST_TO_ADDR
// if temp_list + 0 >= attacking_vehicles + 0 or temp_list + 0 >= 3 then
38137: LD_VAR 0 5
38141: PUSH
38142: LD_INT 0
38144: PLUS
38145: PUSH
38146: LD_VAR 0 21
38150: PUSH
38151: LD_INT 0
38153: PLUS
38154: GREATEREQUAL
38155: PUSH
38156: LD_VAR 0 5
38160: PUSH
38161: LD_INT 0
38163: PLUS
38164: PUSH
38165: LD_INT 3
38167: GREATEREQUAL
38168: OR
38169: IFFALSE 38181
// strat_2_attack_permitted = true else
38171: LD_ADDR_VAR 0 27
38175: PUSH
38176: LD_INT 1
38178: ST_TO_ADDR
38179: GO 38245
// begin temp_value = true ;
38181: LD_ADDR_VAR 0 3
38185: PUSH
38186: LD_INT 1
38188: ST_TO_ADDR
// for i in attacking_vehicles do
38189: LD_ADDR_VAR 0 2
38193: PUSH
38194: LD_VAR 0 21
38198: PUSH
38199: FOR_IN
38200: IFFALSE 38229
// if Attacks ( i ) = 0 then
38202: LD_VAR 0 2
38206: PPUSH
38207: CALL_OW 320
38211: PUSH
38212: LD_INT 0
38214: EQUAL
38215: IFFALSE 38227
// begin temp_value = false ;
38217: LD_ADDR_VAR 0 3
38221: PUSH
38222: LD_INT 0
38224: ST_TO_ADDR
// break ;
38225: GO 38229
// end ;
38227: GO 38199
38229: POP
38230: POP
// if temp_value then
38231: LD_VAR 0 3
38235: IFFALSE 38245
// strat_2_attack_permitted = true ;
38237: LD_ADDR_VAR 0 27
38241: PUSH
38242: LD_INT 1
38244: ST_TO_ADDR
// end ; end ; for i in attacking_vehicles ^ attacking_humans do
38245: LD_ADDR_VAR 0 2
38249: PUSH
38250: LD_VAR 0 21
38254: PUSH
38255: LD_VAR 0 14
38259: ADD
38260: PUSH
38261: FOR_IN
38262: IFFALSE 40868
// begin if GetClass ( i ) = class_bazooker then
38264: LD_VAR 0 2
38268: PPUSH
38269: CALL_OW 257
38273: PUSH
38274: LD_INT 9
38276: EQUAL
38277: IFFALSE 38644
// begin temp_list = GetTaskList ( i ) ;
38279: LD_ADDR_VAR 0 5
38283: PUSH
38284: LD_VAR 0 2
38288: PPUSH
38289: CALL_OW 437
38293: ST_TO_ADDR
// if temp_list > 0 then
38294: LD_VAR 0 5
38298: PUSH
38299: LD_INT 0
38301: GREATER
38302: IFFALSE 38342
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
38304: LD_VAR 0 5
38308: PUSH
38309: LD_INT 1
38311: ARRAY
38312: PUSH
38313: LD_INT 1
38315: ARRAY
38316: PUSH
38317: LD_STRING &
38319: EQUAL
38320: PUSH
38321: LD_VAR 0 5
38325: PUSH
38326: LD_INT 1
38328: ARRAY
38329: PUSH
38330: LD_INT 1
38332: ARRAY
38333: PUSH
38334: LD_STRING %
38336: EQUAL
38337: OR
38338: IFFALSE 38342
// continue ;
38340: GO 38261
// un1 = Attacks ( i ) ;
38342: LD_ADDR_VAR 0 19
38346: PUSH
38347: LD_VAR 0 2
38351: PPUSH
38352: CALL_OW 320
38356: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
38357: LD_VAR 0 19
38361: PUSH
38362: LD_INT 0
38364: GREATER
38365: PUSH
38366: LD_VAR 0 19
38370: PUSH
38371: EMPTY
38372: LIST
38373: PPUSH
38374: CALL 41003 0 1
38378: PUSH
38379: LD_INT 0
38381: GREATER
38382: AND
38383: IFFALSE 38644
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
38385: LD_ADDR_VAR 0 7
38389: PUSH
38390: LD_VAR 0 19
38394: PPUSH
38395: CALL_OW 250
38399: PUSH
38400: LD_VAR 0 19
38404: PPUSH
38405: CALL_OW 251
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: ST_TO_ADDR
// temp_value = false ;
38414: LD_ADDR_VAR 0 3
38418: PUSH
38419: LD_INT 0
38421: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
38422: LD_ADDR_VAR 0 20
38426: PUSH
38427: LD_EXP 73
38431: PUSH
38432: LD_VAR 0 4
38436: ARRAY
38437: PUSH
38438: LD_EXP 74
38442: PUSH
38443: LD_VAR 0 4
38447: ARRAY
38448: ADD
38449: PUSH
38450: FOR_IN
38451: IFFALSE 38523
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
38453: LD_VAR 0 7
38457: PUSH
38458: LD_INT 1
38460: ARRAY
38461: PPUSH
38462: LD_VAR 0 7
38466: PUSH
38467: LD_INT 2
38469: ARRAY
38470: PPUSH
38471: LD_VAR 0 20
38475: PUSH
38476: LD_INT 1
38478: ARRAY
38479: PPUSH
38480: LD_VAR 0 20
38484: PUSH
38485: LD_INT 2
38487: ARRAY
38488: PPUSH
38489: CALL_OW 298
38493: PUSH
38494: LD_EXP 72
38498: PUSH
38499: LD_VAR 0 1
38503: ARRAY
38504: PUSH
38505: LD_INT 2
38507: ARRAY
38508: LESSEQUAL
38509: IFFALSE 38521
// begin temp_value = true ;
38511: LD_ADDR_VAR 0 3
38515: PUSH
38516: LD_INT 1
38518: ST_TO_ADDR
// break ;
38519: GO 38523
// end ;
38521: GO 38450
38523: POP
38524: POP
// if not temp_value then
38525: LD_VAR 0 3
38529: NOT
38530: IFFALSE 38644
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
38532: LD_VAR 0 2
38536: PPUSH
38537: LD_VAR 0 7
38541: PUSH
38542: LD_INT 1
38544: ARRAY
38545: PPUSH
38546: LD_VAR 0 7
38550: PUSH
38551: LD_INT 2
38553: ARRAY
38554: PPUSH
38555: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
38559: LD_ADDR_VAR 0 5
38563: PUSH
38564: LD_EXP 74
38568: PUSH
38569: LD_VAR 0 4
38573: ARRAY
38574: PPUSH
38575: LD_INT 1
38577: PPUSH
38578: LD_VAR 0 7
38582: PUSH
38583: LD_INT 1
38585: ARRAY
38586: PUSH
38587: LD_VAR 0 7
38591: PUSH
38592: LD_INT 2
38594: ARRAY
38595: PUSH
38596: LD_VAR 0 2
38600: PUSH
38601: LD_OWVAR 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: PPUSH
38612: CALL_OW 2
38616: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
38617: LD_ADDR_EXP 74
38621: PUSH
38622: LD_EXP 74
38626: PPUSH
38627: LD_VAR 0 4
38631: PPUSH
38632: LD_VAR 0 5
38636: PPUSH
38637: CALL_OW 1
38641: ST_TO_ADDR
// continue ;
38642: GO 38261
// end ; end ; end ; if not all_are_ready then
38644: LD_VAR 0 26
38648: NOT
38649: IFFALSE 39013
// begin if i in attacking_vehicles then
38651: LD_VAR 0 2
38655: PUSH
38656: LD_VAR 0 21
38660: IN
38661: IFFALSE 38774
// begin if russian_attack_strategy = 2 then
38663: LD_EXP 84
38667: PUSH
38668: LD_INT 2
38670: EQUAL
38671: IFFALSE 38752
// begin if prepare_veh_movement then
38673: LD_VAR 0 29
38677: IFFALSE 38737
// begin if not IsInArea ( i , area ) then
38679: LD_VAR 0 2
38683: PPUSH
38684: LD_VAR 0 15
38688: PPUSH
38689: CALL_OW 308
38693: NOT
38694: IFFALSE 38735
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
38696: LD_VAR 0 2
38700: PPUSH
38701: LD_EXP 42
38705: PUSH
38706: LD_VAR 0 4
38710: ARRAY
38711: PUSH
38712: LD_INT 1
38714: ARRAY
38715: PPUSH
38716: LD_EXP 42
38720: PUSH
38721: LD_VAR 0 4
38725: ARRAY
38726: PUSH
38727: LD_INT 2
38729: ARRAY
38730: PPUSH
38731: CALL_OW 111
// continue ;
38735: GO 38261
// end ; if not i in vehs_to_move_to_start_pos then
38737: LD_VAR 0 2
38741: PUSH
38742: LD_VAR 0 28
38746: IN
38747: NOT
38748: IFFALSE 38752
// continue ;
38750: GO 38261
// end ; temp_list = vehicle_prepare_hexes ;
38752: LD_ADDR_VAR 0 5
38756: PUSH
38757: LD_VAR 0 23
38761: ST_TO_ADDR
// k = vehicle_dist ;
38762: LD_ADDR_VAR 0 8
38766: PUSH
38767: LD_VAR 0 25
38771: ST_TO_ADDR
// end else
38772: GO 38794
// begin temp_list = human_prepare_hexes ;
38774: LD_ADDR_VAR 0 5
38778: PUSH
38779: LD_VAR 0 22
38783: ST_TO_ADDR
// k = human_dist ;
38784: LD_ADDR_VAR 0 8
38788: PUSH
38789: LD_VAR 0 24
38793: ST_TO_ADDR
// end ; if ai_attacking_unit_hex_index [ base ] [ i ] <= temp_list then
38794: LD_EXP 75
38798: PUSH
38799: LD_VAR 0 4
38803: ARRAY
38804: PUSH
38805: LD_VAR 0 2
38809: ARRAY
38810: PUSH
38811: LD_VAR 0 5
38815: LESSEQUAL
38816: IFFALSE 39011
// begin temp_list_3 = temp_list [ ai_attacking_unit_hex_index [ base ] [ i ] ] ;
38818: LD_ADDR_VAR 0 11
38822: PUSH
38823: LD_VAR 0 5
38827: PUSH
38828: LD_EXP 75
38832: PUSH
38833: LD_VAR 0 4
38837: ARRAY
38838: PUSH
38839: LD_VAR 0 2
38843: ARRAY
38844: ARRAY
38845: ST_TO_ADDR
// if i in attacking_vehicles and russian_attack_strategy = 2 then
38846: LD_VAR 0 2
38850: PUSH
38851: LD_VAR 0 21
38855: IN
38856: PUSH
38857: LD_EXP 84
38861: PUSH
38862: LD_INT 2
38864: EQUAL
38865: AND
38866: IFFALSE 38893
// begin temp_list_3 = CalculateVehicleNotReadyHex ( temp_list_3 , i , attacking_vehicles ) ;
38868: LD_ADDR_VAR 0 11
38872: PUSH
38873: LD_VAR 0 11
38877: PPUSH
38878: LD_VAR 0 2
38882: PPUSH
38883: LD_VAR 0 21
38887: PPUSH
38888: CALL 41866 0 3
38892: ST_TO_ADDR
// end ; if GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) > k then
38893: LD_VAR 0 2
38897: PPUSH
38898: LD_VAR 0 11
38902: PUSH
38903: LD_INT 1
38905: ARRAY
38906: PPUSH
38907: LD_VAR 0 11
38911: PUSH
38912: LD_INT 2
38914: ARRAY
38915: PPUSH
38916: CALL_OW 297
38920: PUSH
38921: LD_VAR 0 8
38925: GREATER
38926: IFFALSE 39011
// begin case GetType ( IsInUnit ( i ) ) of unit_building :
38928: LD_VAR 0 2
38932: PPUSH
38933: CALL_OW 310
38937: PPUSH
38938: CALL_OW 247
38942: PUSH
38943: LD_INT 3
38945: DOUBLE
38946: EQUAL
38947: IFTRUE 38951
38949: GO 38963
38951: POP
// ComExitBuilding ( i ) ; unit_vehicle :
38952: LD_VAR 0 2
38956: PPUSH
38957: CALL_OW 122
38961: GO 39011
38963: LD_INT 2
38965: DOUBLE
38966: EQUAL
38967: IFTRUE 38971
38969: GO 38983
38971: POP
// ComExitVehicle ( i ) ; else
38972: LD_VAR 0 2
38976: PPUSH
38977: CALL_OW 121
38981: GO 39011
38983: POP
// ComMoveXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) ; end ;
38984: LD_VAR 0 2
38988: PPUSH
38989: LD_VAR 0 11
38993: PUSH
38994: LD_INT 1
38996: ARRAY
38997: PPUSH
38998: LD_VAR 0 11
39002: PUSH
39003: LD_INT 2
39005: ARRAY
39006: PPUSH
39007: CALL_OW 111
// end ; end ; end else
39011: GO 40866
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_human ] , [ f_dist , i , 20 ] , [ f_see , side ] ] ) ;
39013: LD_ADDR_VAR 0 5
39017: PUSH
39018: LD_INT 81
39020: PUSH
39021: LD_VAR 0 1
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 21
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 91
39042: PUSH
39043: LD_VAR 0 2
39047: PUSH
39048: LD_INT 20
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 101
39058: PUSH
39059: LD_VAR 0 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: PPUSH
39074: CALL_OW 69
39078: ST_TO_ADDR
// if russian_attack_strategy = 2 and GetY ( i ) >= 59 then
39079: LD_EXP 84
39083: PUSH
39084: LD_INT 2
39086: EQUAL
39087: PUSH
39088: LD_VAR 0 2
39092: PPUSH
39093: CALL_OW 251
39097: PUSH
39098: LD_INT 59
39100: GREATEREQUAL
39101: AND
39102: IFFALSE 39187
// begin k = 1 ;
39104: LD_ADDR_VAR 0 8
39108: PUSH
39109: LD_INT 1
39111: ST_TO_ADDR
// while k <= temp_list + 0 do
39112: LD_VAR 0 8
39116: PUSH
39117: LD_VAR 0 5
39121: PUSH
39122: LD_INT 0
39124: PLUS
39125: LESSEQUAL
39126: IFFALSE 39187
// begin if GetY ( temp_list [ k ] ) >= 59 then
39128: LD_VAR 0 5
39132: PUSH
39133: LD_VAR 0 8
39137: ARRAY
39138: PPUSH
39139: CALL_OW 251
39143: PUSH
39144: LD_INT 59
39146: GREATEREQUAL
39147: IFFALSE 39171
// begin temp_list = Delete ( temp_list , k ) ;
39149: LD_ADDR_VAR 0 5
39153: PUSH
39154: LD_VAR 0 5
39158: PPUSH
39159: LD_VAR 0 8
39163: PPUSH
39164: CALL_OW 3
39168: ST_TO_ADDR
// continue ;
39169: GO 39112
// end ; k = k + 1 ;
39171: LD_ADDR_VAR 0 8
39175: PUSH
39176: LD_VAR 0 8
39180: PUSH
39181: LD_INT 1
39183: PLUS
39184: ST_TO_ADDR
// end ;
39185: GO 39112
// end ; temp_value := russian_attack_strategy = 2 and i in attacking_vehicles and not strat_2_attack_permitted ;
39187: LD_ADDR_VAR 0 3
39191: PUSH
39192: LD_EXP 84
39196: PUSH
39197: LD_INT 2
39199: EQUAL
39200: PUSH
39201: LD_VAR 0 2
39205: PUSH
39206: LD_VAR 0 21
39210: IN
39211: AND
39212: PUSH
39213: LD_VAR 0 27
39217: NOT
39218: AND
39219: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
39220: LD_VAR 0 5
39224: PUSH
39225: LD_INT 0
39227: GREATER
39228: PUSH
39229: LD_VAR 0 3
39233: NOT
39234: AND
39235: IFFALSE 39371
// begin temp_list_2 = UnitFilter ( temp_list , [ f_not , [ f_lives , 250 ] ] ) ;
39237: LD_ADDR_VAR 0 7
39241: PUSH
39242: LD_VAR 0 5
39246: PPUSH
39247: LD_INT 3
39249: PUSH
39250: LD_INT 24
39252: PUSH
39253: LD_INT 250
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PPUSH
39264: CALL_OW 72
39268: ST_TO_ADDR
// if temp_list_2 > 0 then
39269: LD_VAR 0 7
39273: PUSH
39274: LD_INT 0
39276: GREATER
39277: IFFALSE 39289
// temp_list = temp_list_2 ;
39279: LD_ADDR_VAR 0 5
39283: PUSH
39284: LD_VAR 0 7
39288: ST_TO_ADDR
// temp_unit = AllNearestUnitToUnit ( temp_list , i ) ;
39289: LD_ADDR_VAR 0 6
39293: PUSH
39294: LD_VAR 0 5
39298: PPUSH
39299: LD_VAR 0 2
39303: PPUSH
39304: CALL_OW 75
39308: ST_TO_ADDR
// if GetLives ( temp_unit ) > 250 then
39309: LD_VAR 0 6
39313: PPUSH
39314: CALL_OW 256
39318: PUSH
39319: LD_INT 250
39321: GREATER
39322: IFFALSE 39355
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) else
39324: LD_VAR 0 2
39328: PPUSH
39329: LD_VAR 0 6
39333: PPUSH
39334: CALL_OW 250
39338: PPUSH
39339: LD_VAR 0 6
39343: PPUSH
39344: CALL_OW 251
39348: PPUSH
39349: CALL_OW 114
39353: GO 39369
// ComAttackUnit ( i , temp_unit ) ;
39355: LD_VAR 0 2
39359: PPUSH
39360: LD_VAR 0 6
39364: PPUSH
39365: CALL_OW 115
// end else
39369: GO 40866
// begin temp_list = FindNonhumansNearUnit ( side , i , 20 , true ) ;
39371: LD_ADDR_VAR 0 5
39375: PUSH
39376: LD_VAR 0 1
39380: PPUSH
39381: LD_VAR 0 2
39385: PPUSH
39386: LD_INT 20
39388: PPUSH
39389: LD_INT 1
39391: PPUSH
39392: CALL 40881 0 4
39396: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
39397: LD_VAR 0 5
39401: PUSH
39402: LD_INT 0
39404: GREATER
39405: PUSH
39406: LD_VAR 0 3
39410: NOT
39411: AND
39412: IFFALSE 39698
// begin if i in attacking_vehicles then
39414: LD_VAR 0 2
39418: PUSH
39419: LD_VAR 0 21
39423: IN
39424: IFFALSE 39562
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
39426: LD_VAR 0 2
39430: PPUSH
39431: LD_VAR 0 10
39435: PUSH
39436: LD_EXP 75
39440: PUSH
39441: LD_VAR 0 4
39445: ARRAY
39446: PUSH
39447: LD_VAR 0 2
39451: ARRAY
39452: ARRAY
39453: PUSH
39454: LD_INT 1
39456: ARRAY
39457: PPUSH
39458: LD_VAR 0 10
39462: PUSH
39463: LD_EXP 75
39467: PUSH
39468: LD_VAR 0 4
39472: ARRAY
39473: PUSH
39474: LD_VAR 0 2
39478: ARRAY
39479: ARRAY
39480: PUSH
39481: LD_INT 2
39483: ARRAY
39484: PPUSH
39485: CALL_OW 297
39489: PUSH
39490: LD_VAR 0 25
39494: GREATER
39495: IFFALSE 39560
// ComAgressiveMove ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39497: LD_VAR 0 2
39501: PPUSH
39502: LD_VAR 0 10
39506: PUSH
39507: LD_EXP 75
39511: PUSH
39512: LD_VAR 0 4
39516: ARRAY
39517: PUSH
39518: LD_VAR 0 2
39522: ARRAY
39523: ARRAY
39524: PUSH
39525: LD_INT 1
39527: ARRAY
39528: PPUSH
39529: LD_VAR 0 10
39533: PUSH
39534: LD_EXP 75
39538: PUSH
39539: LD_VAR 0 4
39543: ARRAY
39544: PUSH
39545: LD_VAR 0 2
39549: ARRAY
39550: ARRAY
39551: PUSH
39552: LD_INT 2
39554: ARRAY
39555: PPUSH
39556: CALL_OW 114
// end else
39560: GO 39696
// if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
39562: LD_VAR 0 2
39566: PPUSH
39567: LD_VAR 0 9
39571: PUSH
39572: LD_EXP 75
39576: PUSH
39577: LD_VAR 0 4
39581: ARRAY
39582: PUSH
39583: LD_VAR 0 2
39587: ARRAY
39588: ARRAY
39589: PUSH
39590: LD_INT 1
39592: ARRAY
39593: PPUSH
39594: LD_VAR 0 9
39598: PUSH
39599: LD_EXP 75
39603: PUSH
39604: LD_VAR 0 4
39608: ARRAY
39609: PUSH
39610: LD_VAR 0 2
39614: ARRAY
39615: ARRAY
39616: PUSH
39617: LD_INT 2
39619: ARRAY
39620: PPUSH
39621: CALL_OW 297
39625: PUSH
39626: LD_VAR 0 24
39630: GREATER
39631: IFFALSE 39696
// ComAgressiveMove ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39633: LD_VAR 0 2
39637: PPUSH
39638: LD_VAR 0 9
39642: PUSH
39643: LD_EXP 75
39647: PUSH
39648: LD_VAR 0 4
39652: ARRAY
39653: PUSH
39654: LD_VAR 0 2
39658: ARRAY
39659: ARRAY
39660: PUSH
39661: LD_INT 1
39663: ARRAY
39664: PPUSH
39665: LD_VAR 0 9
39669: PUSH
39670: LD_EXP 75
39674: PUSH
39675: LD_VAR 0 4
39679: ARRAY
39680: PUSH
39681: LD_VAR 0 2
39685: ARRAY
39686: ARRAY
39687: PUSH
39688: LD_INT 2
39690: ARRAY
39691: PPUSH
39692: CALL_OW 114
// end else
39696: GO 40866
// begin temp_list = FindNonhumansNearUnit ( side , i , 20 , false ) ;
39698: LD_ADDR_VAR 0 5
39702: PUSH
39703: LD_VAR 0 1
39707: PPUSH
39708: LD_VAR 0 2
39712: PPUSH
39713: LD_INT 20
39715: PPUSH
39716: LD_INT 0
39718: PPUSH
39719: CALL 40881 0 4
39723: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
39724: LD_VAR 0 5
39728: PUSH
39729: LD_INT 0
39731: GREATER
39732: PUSH
39733: LD_VAR 0 3
39737: NOT
39738: AND
39739: IFFALSE 39777
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
39741: LD_ADDR_VAR 0 6
39745: PUSH
39746: LD_VAR 0 5
39750: PPUSH
39751: LD_VAR 0 2
39755: PPUSH
39756: CALL_OW 74
39760: ST_TO_ADDR
// ComAttackUnit ( i , temp_unit ) ;
39761: LD_VAR 0 2
39765: PPUSH
39766: LD_VAR 0 6
39770: PPUSH
39771: CALL_OW 115
// end else
39775: GO 40866
// if i in attacking_vehicles and russian_attack_strategy = 2 and not strat_2_attack_permitted then
39777: LD_VAR 0 2
39781: PUSH
39782: LD_VAR 0 21
39786: IN
39787: PUSH
39788: LD_EXP 84
39792: PUSH
39793: LD_INT 2
39795: EQUAL
39796: AND
39797: PUSH
39798: LD_VAR 0 27
39802: NOT
39803: AND
39804: IFFALSE 40584
// begin if i = attacking_vehicles [ 1 ] then
39806: LD_VAR 0 2
39810: PUSH
39811: LD_VAR 0 21
39815: PUSH
39816: LD_INT 1
39818: ARRAY
39819: EQUAL
39820: IFFALSE 40064
// begin if ai_attacking_unit_hex_index [ base ] [ i ] <= vehicle_attack_hexes then
39822: LD_EXP 75
39826: PUSH
39827: LD_VAR 0 4
39831: ARRAY
39832: PUSH
39833: LD_VAR 0 2
39837: ARRAY
39838: PUSH
39839: LD_VAR 0 10
39843: LESSEQUAL
39844: IFFALSE 40062
// if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
39846: LD_VAR 0 2
39850: PPUSH
39851: LD_VAR 0 10
39855: PUSH
39856: LD_EXP 75
39860: PUSH
39861: LD_VAR 0 4
39865: ARRAY
39866: PUSH
39867: LD_VAR 0 2
39871: ARRAY
39872: ARRAY
39873: PUSH
39874: LD_INT 1
39876: ARRAY
39877: PPUSH
39878: LD_VAR 0 10
39882: PUSH
39883: LD_EXP 75
39887: PUSH
39888: LD_VAR 0 4
39892: ARRAY
39893: PUSH
39894: LD_VAR 0 2
39898: ARRAY
39899: ARRAY
39900: PUSH
39901: LD_INT 2
39903: ARRAY
39904: PPUSH
39905: CALL_OW 297
39909: PUSH
39910: LD_VAR 0 25
39914: GREATER
39915: IFFALSE 40062
// begin temp_value = true ;
39917: LD_ADDR_VAR 0 3
39921: PUSH
39922: LD_INT 1
39924: ST_TO_ADDR
// for k = 2 to attacking_vehicles do
39925: LD_ADDR_VAR 0 8
39929: PUSH
39930: DOUBLE
39931: LD_INT 2
39933: DEC
39934: ST_TO_ADDR
39935: LD_VAR 0 21
39939: PUSH
39940: FOR_TO
39941: IFFALSE 39991
// if GetDistUnits ( attacking_vehicles [ k ] , attacking_vehicles [ k - 1 ] ) > 7 then
39943: LD_VAR 0 21
39947: PUSH
39948: LD_VAR 0 8
39952: ARRAY
39953: PPUSH
39954: LD_VAR 0 21
39958: PUSH
39959: LD_VAR 0 8
39963: PUSH
39964: LD_INT 1
39966: MINUS
39967: ARRAY
39968: PPUSH
39969: CALL_OW 296
39973: PUSH
39974: LD_INT 7
39976: GREATER
39977: IFFALSE 39989
// begin temp_value = false ;
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_INT 0
39986: ST_TO_ADDR
// break ;
39987: GO 39991
// end ;
39989: GO 39940
39991: POP
39992: POP
// if temp_value then
39993: LD_VAR 0 3
39997: IFFALSE 40062
// ComMoveXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39999: LD_VAR 0 2
40003: PPUSH
40004: LD_VAR 0 10
40008: PUSH
40009: LD_EXP 75
40013: PUSH
40014: LD_VAR 0 4
40018: ARRAY
40019: PUSH
40020: LD_VAR 0 2
40024: ARRAY
40025: ARRAY
40026: PUSH
40027: LD_INT 1
40029: ARRAY
40030: PPUSH
40031: LD_VAR 0 10
40035: PUSH
40036: LD_EXP 75
40040: PUSH
40041: LD_VAR 0 4
40045: ARRAY
40046: PUSH
40047: LD_VAR 0 2
40051: ARRAY
40052: ARRAY
40053: PUSH
40054: LD_INT 2
40056: ARRAY
40057: PPUSH
40058: CALL_OW 111
// end ; end else
40062: GO 40582
// begin temp_value = 2 ;
40064: LD_ADDR_VAR 0 3
40068: PUSH
40069: LD_INT 2
40071: ST_TO_ADDR
// for k = 2 to attacking_vehicles do
40072: LD_ADDR_VAR 0 8
40076: PUSH
40077: DOUBLE
40078: LD_INT 2
40080: DEC
40081: ST_TO_ADDR
40082: LD_VAR 0 21
40086: PUSH
40087: FOR_TO
40088: IFFALSE 40122
// if i = attacking_vehicles [ k ] then
40090: LD_VAR 0 2
40094: PUSH
40095: LD_VAR 0 21
40099: PUSH
40100: LD_VAR 0 8
40104: ARRAY
40105: EQUAL
40106: IFFALSE 40120
// begin temp_value = k ;
40108: LD_ADDR_VAR 0 3
40112: PUSH
40113: LD_VAR 0 8
40117: ST_TO_ADDR
// break ;
40118: GO 40122
// end ;
40120: GO 40087
40122: POP
40123: POP
// temp_value = temp_value - 1 ;
40124: LD_ADDR_VAR 0 3
40128: PUSH
40129: LD_VAR 0 3
40133: PUSH
40134: LD_INT 1
40136: MINUS
40137: ST_TO_ADDR
// x = GetX ( attacking_vehicles [ temp_value ] ) ;
40138: LD_ADDR_VAR 0 16
40142: PUSH
40143: LD_VAR 0 21
40147: PUSH
40148: LD_VAR 0 3
40152: ARRAY
40153: PPUSH
40154: CALL_OW 250
40158: ST_TO_ADDR
// y = GetY ( attacking_vehicles [ temp_value ] ) ;
40159: LD_ADDR_VAR 0 17
40163: PUSH
40164: LD_VAR 0 21
40168: PUSH
40169: LD_VAR 0 3
40173: ARRAY
40174: PPUSH
40175: CALL_OW 251
40179: ST_TO_ADDR
// if temp_value > 1 then
40180: LD_VAR 0 3
40184: PUSH
40185: LD_INT 1
40187: GREATER
40188: IFFALSE 40252
// begin k = AI_GetTurnDirection ( GetX ( attacking_vehicles [ temp_value - 1 ] ) , GetY ( attacking_vehicles [ temp_value - 1 ] ) , x , y ) ;
40190: LD_ADDR_VAR 0 8
40194: PUSH
40195: LD_VAR 0 21
40199: PUSH
40200: LD_VAR 0 3
40204: PUSH
40205: LD_INT 1
40207: MINUS
40208: ARRAY
40209: PPUSH
40210: CALL_OW 250
40214: PPUSH
40215: LD_VAR 0 21
40219: PUSH
40220: LD_VAR 0 3
40224: PUSH
40225: LD_INT 1
40227: MINUS
40228: ARRAY
40229: PPUSH
40230: CALL_OW 251
40234: PPUSH
40235: LD_VAR 0 16
40239: PPUSH
40240: LD_VAR 0 17
40244: PPUSH
40245: CALL 15403 0 4
40249: ST_TO_ADDR
// end else
40250: GO 40278
// k = AI_InvertDirection ( GetDir ( attacking_vehicles [ temp_value ] ) ) ;
40252: LD_ADDR_VAR 0 8
40256: PUSH
40257: LD_VAR 0 21
40261: PUSH
40262: LD_VAR 0 3
40266: ARRAY
40267: PPUSH
40268: CALL_OW 254
40272: PPUSH
40273: CALL 41591 0 1
40277: ST_TO_ADDR
// k = k - 1 ;
40278: LD_ADDR_VAR 0 8
40282: PUSH
40283: LD_VAR 0 8
40287: PUSH
40288: LD_INT 1
40290: MINUS
40291: ST_TO_ADDR
// if k = - 1 then
40292: LD_VAR 0 8
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: EQUAL
40301: IFFALSE 40311
// k = 5 ;
40303: LD_ADDR_VAR 0 8
40307: PUSH
40308: LD_INT 5
40310: ST_TO_ADDR
// temp_list_3 = [ ] ;
40311: LD_ADDR_VAR 0 11
40315: PUSH
40316: EMPTY
40317: ST_TO_ADDR
// for val = 1 to 3 do
40318: LD_ADDR_VAR 0 20
40322: PUSH
40323: DOUBLE
40324: LD_INT 1
40326: DEC
40327: ST_TO_ADDR
40328: LD_INT 3
40330: PUSH
40331: FOR_TO
40332: IFFALSE 40470
// begin temp_list_2 = [ ] ;
40334: LD_ADDR_VAR 0 7
40338: PUSH
40339: EMPTY
40340: ST_TO_ADDR
// temp_list_2 = Insert ( temp_list_2 , 1 , ShiftX ( x , k , 4 ) ) ;
40341: LD_ADDR_VAR 0 7
40345: PUSH
40346: LD_VAR 0 7
40350: PPUSH
40351: LD_INT 1
40353: PPUSH
40354: LD_VAR 0 16
40358: PPUSH
40359: LD_VAR 0 8
40363: PPUSH
40364: LD_INT 4
40366: PPUSH
40367: CALL_OW 272
40371: PPUSH
40372: CALL_OW 2
40376: ST_TO_ADDR
// temp_list_2 = Insert ( temp_list_2 , 2 , ShiftY ( y , k , 4 ) ) ;
40377: LD_ADDR_VAR 0 7
40381: PUSH
40382: LD_VAR 0 7
40386: PPUSH
40387: LD_INT 2
40389: PPUSH
40390: LD_VAR 0 17
40394: PPUSH
40395: LD_VAR 0 8
40399: PPUSH
40400: LD_INT 4
40402: PPUSH
40403: CALL_OW 273
40407: PPUSH
40408: CALL_OW 2
40412: ST_TO_ADDR
// temp_list_3 = Insert ( temp_list_3 , 1 , temp_list_2 ) ;
40413: LD_ADDR_VAR 0 11
40417: PUSH
40418: LD_VAR 0 11
40422: PPUSH
40423: LD_INT 1
40425: PPUSH
40426: LD_VAR 0 7
40430: PPUSH
40431: CALL_OW 2
40435: ST_TO_ADDR
// k = k + 1 ;
40436: LD_ADDR_VAR 0 8
40440: PUSH
40441: LD_VAR 0 8
40445: PUSH
40446: LD_INT 1
40448: PLUS
40449: ST_TO_ADDR
// if k = 6 then
40450: LD_VAR 0 8
40454: PUSH
40455: LD_INT 6
40457: EQUAL
40458: IFFALSE 40468
// k = 0 ;
40460: LD_ADDR_VAR 0 8
40464: PUSH
40465: LD_INT 0
40467: ST_TO_ADDR
// end ;
40468: GO 40331
40470: POP
40471: POP
// temp_list_2 = [ ] ;
40472: LD_ADDR_VAR 0 7
40476: PUSH
40477: EMPTY
40478: ST_TO_ADDR
// for val in temp_list_3 do
40479: LD_ADDR_VAR 0 20
40483: PUSH
40484: LD_VAR 0 11
40488: PUSH
40489: FOR_IN
40490: IFFALSE 40533
// temp_list_2 = temp_list_2 ^ GetDistUnitXY ( i , val [ 1 ] , val [ 2 ] ) ;
40492: LD_ADDR_VAR 0 7
40496: PUSH
40497: LD_VAR 0 7
40501: PUSH
40502: LD_VAR 0 2
40506: PPUSH
40507: LD_VAR 0 20
40511: PUSH
40512: LD_INT 1
40514: ARRAY
40515: PPUSH
40516: LD_VAR 0 20
40520: PUSH
40521: LD_INT 2
40523: ARRAY
40524: PPUSH
40525: CALL_OW 297
40529: ADD
40530: ST_TO_ADDR
40531: GO 40489
40533: POP
40534: POP
// temp_list_3 = WorstFromListByList ( temp_list_3 , temp_list_2 ) ;
40535: LD_ADDR_VAR 0 11
40539: PUSH
40540: LD_VAR 0 11
40544: PPUSH
40545: LD_VAR 0 7
40549: PPUSH
40550: CALL_OW 78
40554: ST_TO_ADDR
// ComMoveXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) ;
40555: LD_VAR 0 2
40559: PPUSH
40560: LD_VAR 0 11
40564: PUSH
40565: LD_INT 1
40567: ARRAY
40568: PPUSH
40569: LD_VAR 0 11
40573: PUSH
40574: LD_INT 2
40576: ARRAY
40577: PPUSH
40578: CALL_OW 111
// end ; end else
40582: GO 40866
// begin if i in attacking_vehicles then
40584: LD_VAR 0 2
40588: PUSH
40589: LD_VAR 0 21
40593: IN
40594: IFFALSE 40732
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
40596: LD_VAR 0 2
40600: PPUSH
40601: LD_VAR 0 10
40605: PUSH
40606: LD_EXP 75
40610: PUSH
40611: LD_VAR 0 4
40615: ARRAY
40616: PUSH
40617: LD_VAR 0 2
40621: ARRAY
40622: ARRAY
40623: PUSH
40624: LD_INT 1
40626: ARRAY
40627: PPUSH
40628: LD_VAR 0 10
40632: PUSH
40633: LD_EXP 75
40637: PUSH
40638: LD_VAR 0 4
40642: ARRAY
40643: PUSH
40644: LD_VAR 0 2
40648: ARRAY
40649: ARRAY
40650: PUSH
40651: LD_INT 2
40653: ARRAY
40654: PPUSH
40655: CALL_OW 297
40659: PUSH
40660: LD_VAR 0 25
40664: GREATER
40665: IFFALSE 40730
// ComAgressiveMove ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
40667: LD_VAR 0 2
40671: PPUSH
40672: LD_VAR 0 10
40676: PUSH
40677: LD_EXP 75
40681: PUSH
40682: LD_VAR 0 4
40686: ARRAY
40687: PUSH
40688: LD_VAR 0 2
40692: ARRAY
40693: ARRAY
40694: PUSH
40695: LD_INT 1
40697: ARRAY
40698: PPUSH
40699: LD_VAR 0 10
40703: PUSH
40704: LD_EXP 75
40708: PUSH
40709: LD_VAR 0 4
40713: ARRAY
40714: PUSH
40715: LD_VAR 0 2
40719: ARRAY
40720: ARRAY
40721: PUSH
40722: LD_INT 2
40724: ARRAY
40725: PPUSH
40726: CALL_OW 114
// end else
40730: GO 40866
// if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
40732: LD_VAR 0 2
40736: PPUSH
40737: LD_VAR 0 9
40741: PUSH
40742: LD_EXP 75
40746: PUSH
40747: LD_VAR 0 4
40751: ARRAY
40752: PUSH
40753: LD_VAR 0 2
40757: ARRAY
40758: ARRAY
40759: PUSH
40760: LD_INT 1
40762: ARRAY
40763: PPUSH
40764: LD_VAR 0 9
40768: PUSH
40769: LD_EXP 75
40773: PUSH
40774: LD_VAR 0 4
40778: ARRAY
40779: PUSH
40780: LD_VAR 0 2
40784: ARRAY
40785: ARRAY
40786: PUSH
40787: LD_INT 2
40789: ARRAY
40790: PPUSH
40791: CALL_OW 297
40795: PUSH
40796: LD_VAR 0 24
40800: GREATER
40801: IFFALSE 40866
// ComAgressiveMove ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
40803: LD_VAR 0 2
40807: PPUSH
40808: LD_VAR 0 9
40812: PUSH
40813: LD_EXP 75
40817: PUSH
40818: LD_VAR 0 4
40822: ARRAY
40823: PUSH
40824: LD_VAR 0 2
40828: ARRAY
40829: ARRAY
40830: PUSH
40831: LD_INT 1
40833: ARRAY
40834: PPUSH
40835: LD_VAR 0 9
40839: PUSH
40840: LD_EXP 75
40844: PUSH
40845: LD_VAR 0 4
40849: ARRAY
40850: PUSH
40851: LD_VAR 0 2
40855: ARRAY
40856: ARRAY
40857: PUSH
40858: LD_INT 2
40860: ARRAY
40861: PPUSH
40862: CALL_OW 114
// end ; end ; end ; end ; end ;
40866: GO 38261
40868: POP
40869: POP
// end ;
40870: GO 35076
40872: POP
40873: POP
// until false ;
40874: LD_INT 0
40876: IFFALSE 35059
// end ;
40878: PPOPN 31
40880: END
// function FindNonhumansNearUnit ( side , un , dist , only_dangerous ) ; var weapon_list , temp_list , i , btype , b , val ; begin
40881: LD_INT 0
40883: PPUSH
40884: PPUSH
40885: PPUSH
40886: PPUSH
40887: PPUSH
40888: PPUSH
40889: PPUSH
// temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_human ] ] , [ f_dist , un , dist ] , [ f_see , side ] ] ) ;
40890: LD_ADDR_VAR 0 7
40894: PUSH
40895: LD_INT 81
40897: PUSH
40898: LD_VAR 0 1
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 3
40909: PUSH
40910: LD_INT 21
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 91
40926: PUSH
40927: LD_VAR 0 2
40931: PUSH
40932: LD_VAR 0 3
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 101
40944: PUSH
40945: LD_VAR 0 1
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: PPUSH
40960: CALL_OW 69
40964: ST_TO_ADDR
// if only_dangerous then
40965: LD_VAR 0 4
40969: IFFALSE 40988
// begin result = DangerousUnits ( temp_list ) ;
40971: LD_ADDR_VAR 0 5
40975: PUSH
40976: LD_VAR 0 7
40980: PPUSH
40981: CALL 41003 0 1
40985: ST_TO_ADDR
// end else
40986: GO 40998
// result = temp_list end ;
40988: LD_ADDR_VAR 0 5
40992: PUSH
40993: LD_VAR 0 7
40997: ST_TO_ADDR
40998: LD_VAR 0 5
41002: RET
// function DangerousUnits ( list ) ; var weapon_list , i , btype , b , val ; begin
41003: LD_INT 0
41005: PPUSH
41006: PPUSH
41007: PPUSH
41008: PPUSH
41009: PPUSH
41010: PPUSH
// weapon_list = [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , ar_multimissile_ballista , ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_siberium_rocket , ru_time_lapser ] ;
41011: LD_ADDR_VAR 0 3
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 3
41021: PUSH
41022: LD_INT 4
41024: PUSH
41025: LD_INT 5
41027: PUSH
41028: LD_INT 6
41030: PUSH
41031: LD_INT 7
41033: PUSH
41034: LD_INT 8
41036: PUSH
41037: LD_INT 9
41039: PUSH
41040: LD_INT 10
41042: PUSH
41043: LD_INT 22
41045: PUSH
41046: LD_INT 23
41048: PUSH
41049: LD_INT 24
41051: PUSH
41052: LD_INT 25
41054: PUSH
41055: LD_INT 26
41057: PUSH
41058: LD_INT 27
41060: PUSH
41061: LD_INT 28
41063: PUSH
41064: LD_INT 29
41066: PUSH
41067: LD_INT 42
41069: PUSH
41070: LD_INT 43
41072: PUSH
41073: LD_INT 44
41075: PUSH
41076: LD_INT 45
41078: PUSH
41079: LD_INT 46
41081: PUSH
41082: LD_INT 47
41084: PUSH
41085: LD_INT 48
41087: PUSH
41088: LD_INT 49
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: ST_TO_ADDR
// result = [ ] ;
41118: LD_ADDR_VAR 0 2
41122: PUSH
41123: EMPTY
41124: ST_TO_ADDR
// for i in list do
41125: LD_ADDR_VAR 0 4
41129: PUSH
41130: LD_VAR 0 1
41134: PUSH
41135: FOR_IN
41136: IFFALSE 41584
// case GetType ( i ) of unit_human :
41138: LD_VAR 0 4
41142: PPUSH
41143: CALL_OW 247
41147: PUSH
41148: LD_INT 1
41150: DOUBLE
41151: EQUAL
41152: IFTRUE 41156
41154: GO 41189
41156: POP
// begin if not IsOk ( i ) then
41157: LD_VAR 0 4
41161: PPUSH
41162: CALL_OW 302
41166: NOT
41167: IFFALSE 41171
// continue ;
41169: GO 41135
// result = result ^ i ;
41171: LD_ADDR_VAR 0 2
41175: PUSH
41176: LD_VAR 0 2
41180: PUSH
41181: LD_VAR 0 4
41185: ADD
41186: ST_TO_ADDR
// end ; unit_vehicle :
41187: GO 41582
41189: LD_INT 2
41191: DOUBLE
41192: EQUAL
41193: IFTRUE 41197
41195: GO 41337
41197: POP
// begin if not IsOk ( i ) then
41198: LD_VAR 0 4
41202: PPUSH
41203: CALL_OW 302
41207: NOT
41208: IFFALSE 41212
// continue ;
41210: GO 41135
// case GetControl ( i ) of control_manual , control_rider :
41212: LD_VAR 0 4
41216: PPUSH
41217: CALL_OW 263
41221: PUSH
41222: LD_INT 1
41224: DOUBLE
41225: EQUAL
41226: IFTRUE 41236
41228: LD_INT 4
41230: DOUBLE
41231: EQUAL
41232: IFTRUE 41236
41234: GO 41256
41236: POP
// begin if UnitsInside ( i ) = 0 then
41237: LD_VAR 0 4
41241: PPUSH
41242: CALL_OW 313
41246: PUSH
41247: LD_INT 0
41249: EQUAL
41250: IFFALSE 41254
// continue ;
41252: GO 41135
// end ; control_remote :
41254: GO 41302
41256: LD_INT 2
41258: DOUBLE
41259: EQUAL
41260: IFTRUE 41264
41262: GO 41284
41264: POP
// begin if IsControledBy ( i ) = 0 then
41265: LD_VAR 0 4
41269: PPUSH
41270: CALL_OW 312
41274: PUSH
41275: LD_INT 0
41277: EQUAL
41278: IFFALSE 41282
// continue ;
41280: GO 41135
// end ; control_computer , control_apeman :
41282: GO 41302
41284: LD_INT 3
41286: DOUBLE
41287: EQUAL
41288: IFTRUE 41298
41290: LD_INT 5
41292: DOUBLE
41293: EQUAL
41294: IFTRUE 41298
41296: GO 41301
41298: POP
// begin end ; end ;
41299: GO 41302
41301: POP
// if GetWeapon ( i ) in weapon_list then
41302: LD_VAR 0 4
41306: PPUSH
41307: CALL_OW 264
41311: PUSH
41312: LD_VAR 0 3
41316: IN
41317: IFFALSE 41335
// result = result ^ i ;
41319: LD_ADDR_VAR 0 2
41323: PUSH
41324: LD_VAR 0 2
41328: PUSH
41329: LD_VAR 0 4
41333: ADD
41334: ST_TO_ADDR
// end ; unit_building :
41335: GO 41582
41337: LD_INT 3
41339: DOUBLE
41340: EQUAL
41341: IFTRUE 41345
41343: GO 41581
41345: POP
// begin if not IsOk ( i ) then
41346: LD_VAR 0 4
41350: PPUSH
41351: CALL_OW 302
41355: NOT
41356: IFFALSE 41360
// continue ;
41358: GO 41135
// btype = GetBType ( i ) ;
41360: LD_ADDR_VAR 0 5
41364: PUSH
41365: LD_VAR 0 4
41369: PPUSH
41370: CALL_OW 266
41374: ST_TO_ADDR
// case btype of b_turret :
41375: LD_VAR 0 5
41379: PUSH
41380: LD_INT 33
41382: DOUBLE
41383: EQUAL
41384: IFTRUE 41388
41386: GO 41391
41388: POP
// begin end ; b_bunker , b_breastwork , b_armoury , b_barracks , b_fort :
41389: GO 41446
41391: LD_INT 32
41393: DOUBLE
41394: EQUAL
41395: IFTRUE 41423
41397: LD_INT 31
41399: DOUBLE
41400: EQUAL
41401: IFTRUE 41423
41403: LD_INT 4
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41423
41409: LD_INT 5
41411: DOUBLE
41412: EQUAL
41413: IFTRUE 41423
41415: LD_INT 35
41417: DOUBLE
41418: EQUAL
41419: IFTRUE 41423
41421: GO 41443
41423: POP
// begin if UnitsInside ( i ) = 0 then
41424: LD_VAR 0 4
41428: PPUSH
41429: CALL_OW 313
41433: PUSH
41434: LD_INT 0
41436: EQUAL
41437: IFFALSE 41441
// continue ;
41439: GO 41135
// end ; else
41441: GO 41446
41443: POP
// continue ; end ;
41444: GO 41135
// if btype in [ b_bunker , b_turret ] then
41446: LD_VAR 0 5
41450: PUSH
41451: LD_INT 32
41453: PUSH
41454: LD_INT 33
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: IN
41461: IFFALSE 41563
// if not GetBWeapon ( i ) in weapon_list then
41463: LD_VAR 0 4
41467: PPUSH
41468: CALL_OW 269
41472: PUSH
41473: LD_VAR 0 3
41477: IN
41478: NOT
41479: IFFALSE 41485
// continue else
41481: GO 41135
41483: GO 41563
// begin b = GetBase ( i ) ;
41485: LD_ADDR_VAR 0 6
41489: PUSH
41490: LD_VAR 0 4
41494: PPUSH
41495: CALL_OW 274
41499: ST_TO_ADDR
// val = false ;
41500: LD_ADDR_VAR 0 7
41504: PUSH
41505: LD_INT 0
41507: ST_TO_ADDR
// if b = 0 then
41508: LD_VAR 0 6
41512: PUSH
41513: LD_INT 0
41515: EQUAL
41516: IFFALSE 41528
// val = true else
41518: LD_ADDR_VAR 0 7
41522: PUSH
41523: LD_INT 1
41525: ST_TO_ADDR
41526: GO 41555
// if GetEnergy ( b ) [ 4 ] = 0 then
41528: LD_VAR 0 6
41532: PPUSH
41533: CALL_OW 278
41537: PUSH
41538: LD_INT 4
41540: ARRAY
41541: PUSH
41542: LD_INT 0
41544: EQUAL
41545: IFFALSE 41555
// val = true ;
41547: LD_ADDR_VAR 0 7
41551: PUSH
41552: LD_INT 1
41554: ST_TO_ADDR
// if val then
41555: LD_VAR 0 7
41559: IFFALSE 41563
// continue ;
41561: GO 41135
// end ; result = result ^ i ;
41563: LD_ADDR_VAR 0 2
41567: PUSH
41568: LD_VAR 0 2
41572: PUSH
41573: LD_VAR 0 4
41577: ADD
41578: ST_TO_ADDR
// end ; end ;
41579: GO 41582
41581: POP
41582: GO 41135
41584: POP
41585: POP
// end ;
41586: LD_VAR 0 2
41590: RET
// function AI_InvertDirection ( direction ) ; var dir ; begin
41591: LD_INT 0
41593: PPUSH
41594: PPUSH
// dir = direction - 3 ;
41595: LD_ADDR_VAR 0 3
41599: PUSH
41600: LD_VAR 0 1
41604: PUSH
41605: LD_INT 3
41607: MINUS
41608: ST_TO_ADDR
// if dir < 0 then
41609: LD_VAR 0 3
41613: PUSH
41614: LD_INT 0
41616: LESS
41617: IFFALSE 41633
// dir = dir + 6 ;
41619: LD_ADDR_VAR 0 3
41623: PUSH
41624: LD_VAR 0 3
41628: PUSH
41629: LD_INT 6
41631: PLUS
41632: ST_TO_ADDR
// result = dir ;
41633: LD_ADDR_VAR 0 2
41637: PUSH
41638: LD_VAR 0 3
41642: ST_TO_ADDR
// end ;
41643: LD_VAR 0 2
41647: RET
// export function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
41648: LD_INT 0
41650: PPUSH
41651: PPUSH
41652: PPUSH
41653: PPUSH
41654: PPUSH
41655: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
41656: LD_VAR 0 1
41660: PPUSH
41661: LD_VAR 0 2
41665: PPUSH
41666: CALL_OW 488
41670: NOT
41671: PUSH
41672: LD_VAR 0 3
41676: PPUSH
41677: LD_VAR 0 4
41681: PPUSH
41682: CALL_OW 488
41686: NOT
41687: OR
41688: IFFALSE 41701
// begin result = - 1 ;
41690: LD_ADDR_VAR 0 5
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: ST_TO_ADDR
// exit ;
41699: GO 41861
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
41701: LD_ADDR_VAR 0 6
41705: PUSH
41706: LD_VAR 0 1
41710: PPUSH
41711: LD_VAR 0 2
41715: PPUSH
41716: LD_VAR 0 3
41720: PPUSH
41721: LD_VAR 0 4
41725: PPUSH
41726: CALL_OW 298
41730: ST_TO_ADDR
// dist_2 = 99999 ;
41731: LD_ADDR_VAR 0 7
41735: PUSH
41736: LD_INT 99999
41738: ST_TO_ADDR
// for b = 0 to 5 do
41739: LD_ADDR_VAR 0 8
41743: PUSH
41744: DOUBLE
41745: LD_INT 0
41747: DEC
41748: ST_TO_ADDR
41749: LD_INT 5
41751: PUSH
41752: FOR_TO
41753: IFFALSE 41849
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
41755: LD_ADDR_VAR 0 9
41759: PUSH
41760: LD_VAR 0 1
41764: PPUSH
41765: LD_VAR 0 8
41769: PPUSH
41770: LD_VAR 0 6
41774: PPUSH
41775: CALL_OW 272
41779: PPUSH
41780: LD_VAR 0 2
41784: PPUSH
41785: LD_VAR 0 8
41789: PPUSH
41790: LD_VAR 0 6
41794: PPUSH
41795: CALL_OW 273
41799: PPUSH
41800: LD_VAR 0 3
41804: PPUSH
41805: LD_VAR 0 4
41809: PPUSH
41810: CALL_OW 298
41814: ST_TO_ADDR
// if temp_dist < dist_2 then
41815: LD_VAR 0 9
41819: PUSH
41820: LD_VAR 0 7
41824: LESS
41825: IFFALSE 41847
// begin dist_2 = temp_dist ;
41827: LD_ADDR_VAR 0 7
41831: PUSH
41832: LD_VAR 0 9
41836: ST_TO_ADDR
// dir = b ;
41837: LD_ADDR_VAR 0 10
41841: PUSH
41842: LD_VAR 0 8
41846: ST_TO_ADDR
// end ; end ;
41847: GO 41752
41849: POP
41850: POP
// result = dir ;
41851: LD_ADDR_VAR 0 5
41855: PUSH
41856: LD_VAR 0 10
41860: ST_TO_ADDR
// end ;
41861: LD_VAR 0 5
41865: RET
// function CalculateVehicleNotReadyHex ( hex , veh , attacking_vehicles ) ; var x , num ; begin
41866: LD_INT 0
41868: PPUSH
41869: PPUSH
41870: PPUSH
// for num = 1 to attacking_vehicles do
41871: LD_ADDR_VAR 0 6
41875: PUSH
41876: DOUBLE
41877: LD_INT 1
41879: DEC
41880: ST_TO_ADDR
41881: LD_VAR 0 3
41885: PUSH
41886: FOR_TO
41887: IFFALSE 41911
// if attacking_vehicles [ num ] = veh then
41889: LD_VAR 0 3
41893: PUSH
41894: LD_VAR 0 6
41898: ARRAY
41899: PUSH
41900: LD_VAR 0 2
41904: EQUAL
41905: IFFALSE 41909
// break ;
41907: GO 41911
41909: GO 41886
41911: POP
41912: POP
// x = ShiftX ( hex [ 1 ] , 1 , 5 * ( attacking_vehicles - num ) ) ;
41913: LD_ADDR_VAR 0 5
41917: PUSH
41918: LD_VAR 0 1
41922: PUSH
41923: LD_INT 1
41925: ARRAY
41926: PPUSH
41927: LD_INT 1
41929: PPUSH
41930: LD_INT 5
41932: PUSH
41933: LD_VAR 0 3
41937: PUSH
41938: LD_VAR 0 6
41942: MINUS
41943: MUL
41944: PPUSH
41945: CALL_OW 272
41949: ST_TO_ADDR
// result = Replace ( hex , 1 , x ) ;
41950: LD_ADDR_VAR 0 4
41954: PUSH
41955: LD_VAR 0 1
41959: PPUSH
41960: LD_INT 1
41962: PPUSH
41963: LD_VAR 0 5
41967: PPUSH
41968: CALL_OW 1
41972: ST_TO_ADDR
// end ;
41973: LD_VAR 0 4
41977: RET
// every 0 0$1 + 0 0$0.1 do var i , k , temp_list , un1 , temp_list_2 , temp_value , val ; var side , base , attack_hexes ;
41978: GO 41980
41980: DISABLE
41981: LD_INT 0
41983: PPUSH
41984: PPUSH
41985: PPUSH
41986: PPUSH
41987: PPUSH
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
41992: PPUSH
// begin side = russians ;
41993: LD_ADDR_VAR 0 8
41997: PUSH
41998: LD_EXP 4
42002: ST_TO_ADDR
// base = 3 ;
42003: LD_ADDR_VAR 0 9
42007: PUSH
42008: LD_INT 3
42010: ST_TO_ADDR
// attack_hexes = [ [ 41 , 65 ] , [ 25 , 46 ] , [ 26 , 24 ] , [ 41 , 21 ] , [ 53 , 17 ] , [ 60 , 27 ] , [ 53 , 17 ] ] ;
42011: LD_ADDR_VAR 0 10
42015: PUSH
42016: LD_INT 41
42018: PUSH
42019: LD_INT 65
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 25
42028: PUSH
42029: LD_INT 46
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 26
42038: PUSH
42039: LD_INT 24
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 41
42048: PUSH
42049: LD_INT 21
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 53
42058: PUSH
42059: LD_INT 17
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 60
42068: PUSH
42069: LD_INT 27
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 53
42078: PUSH
42079: LD_INT 17
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42095: LD_INT 35
42097: PPUSH
42098: CALL_OW 67
// special_russian_attackers = UnitFilter ( special_russian_attackers , [ f_alive ] ) ;
42102: LD_ADDR_EXP 85
42106: PUSH
42107: LD_EXP 85
42111: PPUSH
42112: LD_INT 51
42114: PUSH
42115: EMPTY
42116: LIST
42117: PPUSH
42118: CALL_OW 72
42122: ST_TO_ADDR
// for i in special_russian_attackers do
42123: LD_ADDR_VAR 0 1
42127: PUSH
42128: LD_EXP 85
42132: PUSH
42133: FOR_IN
42134: IFFALSE 42804
// begin if GetClass ( i ) = class_bazooker then
42136: LD_VAR 0 1
42140: PPUSH
42141: CALL_OW 257
42145: PUSH
42146: LD_INT 9
42148: EQUAL
42149: IFFALSE 42498
// begin temp_list = GetTaskList ( i ) ;
42151: LD_ADDR_VAR 0 3
42155: PUSH
42156: LD_VAR 0 1
42160: PPUSH
42161: CALL_OW 437
42165: ST_TO_ADDR
// if temp_list > 0 then
42166: LD_VAR 0 3
42170: PUSH
42171: LD_INT 0
42173: GREATER
42174: IFFALSE 42196
// if temp_list [ 1 ] [ 1 ] = & then
42176: LD_VAR 0 3
42180: PUSH
42181: LD_INT 1
42183: ARRAY
42184: PUSH
42185: LD_INT 1
42187: ARRAY
42188: PUSH
42189: LD_STRING &
42191: EQUAL
42192: IFFALSE 42196
// continue ;
42194: GO 42133
// un1 = Attacks ( i ) ;
42196: LD_ADDR_VAR 0 4
42200: PUSH
42201: LD_VAR 0 1
42205: PPUSH
42206: CALL_OW 320
42210: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
42211: LD_VAR 0 4
42215: PUSH
42216: LD_INT 0
42218: GREATER
42219: PUSH
42220: LD_VAR 0 4
42224: PUSH
42225: EMPTY
42226: LIST
42227: PPUSH
42228: CALL 41003 0 1
42232: PUSH
42233: LD_INT 0
42235: GREATER
42236: AND
42237: IFFALSE 42498
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
42239: LD_ADDR_VAR 0 5
42243: PUSH
42244: LD_VAR 0 4
42248: PPUSH
42249: CALL_OW 250
42253: PUSH
42254: LD_VAR 0 4
42258: PPUSH
42259: CALL_OW 251
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: ST_TO_ADDR
// temp_value = false ;
42268: LD_ADDR_VAR 0 6
42272: PUSH
42273: LD_INT 0
42275: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
42276: LD_ADDR_VAR 0 7
42280: PUSH
42281: LD_EXP 73
42285: PUSH
42286: LD_VAR 0 9
42290: ARRAY
42291: PUSH
42292: LD_EXP 74
42296: PUSH
42297: LD_VAR 0 9
42301: ARRAY
42302: ADD
42303: PUSH
42304: FOR_IN
42305: IFFALSE 42377
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
42307: LD_VAR 0 5
42311: PUSH
42312: LD_INT 1
42314: ARRAY
42315: PPUSH
42316: LD_VAR 0 5
42320: PUSH
42321: LD_INT 2
42323: ARRAY
42324: PPUSH
42325: LD_VAR 0 7
42329: PUSH
42330: LD_INT 1
42332: ARRAY
42333: PPUSH
42334: LD_VAR 0 7
42338: PUSH
42339: LD_INT 2
42341: ARRAY
42342: PPUSH
42343: CALL_OW 298
42347: PUSH
42348: LD_EXP 72
42352: PUSH
42353: LD_VAR 0 8
42357: ARRAY
42358: PUSH
42359: LD_INT 2
42361: ARRAY
42362: LESSEQUAL
42363: IFFALSE 42375
// begin temp_value = true ;
42365: LD_ADDR_VAR 0 6
42369: PUSH
42370: LD_INT 1
42372: ST_TO_ADDR
// break ;
42373: GO 42377
// end ;
42375: GO 42304
42377: POP
42378: POP
// if not temp_value then
42379: LD_VAR 0 6
42383: NOT
42384: IFFALSE 42498
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
42386: LD_VAR 0 1
42390: PPUSH
42391: LD_VAR 0 5
42395: PUSH
42396: LD_INT 1
42398: ARRAY
42399: PPUSH
42400: LD_VAR 0 5
42404: PUSH
42405: LD_INT 2
42407: ARRAY
42408: PPUSH
42409: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
42413: LD_ADDR_VAR 0 3
42417: PUSH
42418: LD_EXP 74
42422: PUSH
42423: LD_VAR 0 9
42427: ARRAY
42428: PPUSH
42429: LD_INT 1
42431: PPUSH
42432: LD_VAR 0 5
42436: PUSH
42437: LD_INT 1
42439: ARRAY
42440: PUSH
42441: LD_VAR 0 5
42445: PUSH
42446: LD_INT 2
42448: ARRAY
42449: PUSH
42450: LD_VAR 0 1
42454: PUSH
42455: LD_OWVAR 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: PPUSH
42466: CALL_OW 2
42470: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
42471: LD_ADDR_EXP 74
42475: PUSH
42476: LD_EXP 74
42480: PPUSH
42481: LD_VAR 0 9
42485: PPUSH
42486: LD_VAR 0 3
42490: PPUSH
42491: CALL_OW 1
42495: ST_TO_ADDR
// continue ;
42496: GO 42133
// end ; end ; end ; k = ai_attacking_unit_hex_index [ base ] [ i ] ;
42498: LD_ADDR_VAR 0 2
42502: PUSH
42503: LD_EXP 75
42507: PUSH
42508: LD_VAR 0 9
42512: ARRAY
42513: PUSH
42514: LD_VAR 0 1
42518: ARRAY
42519: ST_TO_ADDR
// if GetDistUnitXY ( i , attack_hexes [ k ] [ 1 ] , attack_hexes [ k ] [ 2 ] ) > 1 then
42520: LD_VAR 0 1
42524: PPUSH
42525: LD_VAR 0 10
42529: PUSH
42530: LD_VAR 0 2
42534: ARRAY
42535: PUSH
42536: LD_INT 1
42538: ARRAY
42539: PPUSH
42540: LD_VAR 0 10
42544: PUSH
42545: LD_VAR 0 2
42549: ARRAY
42550: PUSH
42551: LD_INT 2
42553: ARRAY
42554: PPUSH
42555: CALL_OW 297
42559: PUSH
42560: LD_INT 1
42562: GREATER
42563: IFFALSE 42606
// ComAgressiveMove ( i , attack_hexes [ k ] [ 1 ] , attack_hexes [ k ] [ 2 ] ) else
42565: LD_VAR 0 1
42569: PPUSH
42570: LD_VAR 0 10
42574: PUSH
42575: LD_VAR 0 2
42579: ARRAY
42580: PUSH
42581: LD_INT 1
42583: ARRAY
42584: PPUSH
42585: LD_VAR 0 10
42589: PUSH
42590: LD_VAR 0 2
42594: ARRAY
42595: PUSH
42596: LD_INT 2
42598: ARRAY
42599: PPUSH
42600: CALL_OW 114
42604: GO 42802
// begin if k < attack_hexes - 1 then
42606: LD_VAR 0 2
42610: PUSH
42611: LD_VAR 0 10
42615: PUSH
42616: LD_INT 1
42618: MINUS
42619: LESS
42620: IFFALSE 42684
// begin temp_list = Replace ( ai_attacking_unit_hex_index [ base ] , i , k + 1 ) ;
42622: LD_ADDR_VAR 0 3
42626: PUSH
42627: LD_EXP 75
42631: PUSH
42632: LD_VAR 0 9
42636: ARRAY
42637: PPUSH
42638: LD_VAR 0 1
42642: PPUSH
42643: LD_VAR 0 2
42647: PUSH
42648: LD_INT 1
42650: PLUS
42651: PPUSH
42652: CALL_OW 1
42656: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
42657: LD_ADDR_EXP 75
42661: PUSH
42662: LD_EXP 75
42666: PPUSH
42667: LD_VAR 0 9
42671: PPUSH
42672: LD_VAR 0 3
42676: PPUSH
42677: CALL_OW 1
42681: ST_TO_ADDR
// end else
42682: GO 42802
// begin if Rand ( 1 , 6 ) = 1 then
42684: LD_INT 1
42686: PPUSH
42687: LD_INT 6
42689: PPUSH
42690: CALL_OW 12
42694: PUSH
42695: LD_INT 1
42697: EQUAL
42698: IFFALSE 42802
// begin if k = attack_hexes - 1 then
42700: LD_VAR 0 2
42704: PUSH
42705: LD_VAR 0 10
42709: PUSH
42710: LD_INT 1
42712: MINUS
42713: EQUAL
42714: IFFALSE 42732
// k = attack_hexes + 0 else
42716: LD_ADDR_VAR 0 2
42720: PUSH
42721: LD_VAR 0 10
42725: PUSH
42726: LD_INT 0
42728: PLUS
42729: ST_TO_ADDR
42730: GO 42746
// k = attack_hexes - 1 ;
42732: LD_ADDR_VAR 0 2
42736: PUSH
42737: LD_VAR 0 10
42741: PUSH
42742: LD_INT 1
42744: MINUS
42745: ST_TO_ADDR
// temp_list = Replace ( ai_attacking_unit_hex_index [ base ] , i , k ) ;
42746: LD_ADDR_VAR 0 3
42750: PUSH
42751: LD_EXP 75
42755: PUSH
42756: LD_VAR 0 9
42760: ARRAY
42761: PPUSH
42762: LD_VAR 0 1
42766: PPUSH
42767: LD_VAR 0 2
42771: PPUSH
42772: CALL_OW 1
42776: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
42777: LD_ADDR_EXP 75
42781: PUSH
42782: LD_EXP 75
42786: PPUSH
42787: LD_VAR 0 9
42791: PPUSH
42792: LD_VAR 0 3
42796: PPUSH
42797: CALL_OW 1
42801: ST_TO_ADDR
// end ; end ; end ; end ;
42802: GO 42133
42804: POP
42805: POP
// until false ;
42806: LD_INT 0
42808: IFFALSE 42095
// end ;
42810: PPOPN 10
42812: END
// every 0 0$1 do var base , side , val , temp_value , temp_list ;
42813: GO 42815
42815: DISABLE
42816: LD_INT 0
42818: PPUSH
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
// begin repeat wait ( 1 ) ;
42823: LD_INT 1
42825: PPUSH
42826: CALL_OW 67
// for base in ai_bases do
42830: LD_ADDR_VAR 0 1
42834: PUSH
42835: LD_EXP 59
42839: PUSH
42840: FOR_IN
42841: IFFALSE 43303
// begin if base in [ 1 , 2 ] then
42843: LD_VAR 0 1
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: IN
42858: IFFALSE 42862
// continue ;
42860: GO 42840
// side = GetBaseSide ( base ) ;
42862: LD_ADDR_VAR 0 2
42866: PUSH
42867: LD_VAR 0 1
42871: PPUSH
42872: CALL 12735 0 1
42876: ST_TO_ADDR
// val = 1 ;
42877: LD_ADDR_VAR 0 3
42881: PUSH
42882: LD_INT 1
42884: ST_TO_ADDR
// while val <= ai_time_shift_hexes_underway [ base ] do
42885: LD_VAR 0 3
42889: PUSH
42890: LD_EXP 74
42894: PUSH
42895: LD_VAR 0 1
42899: ARRAY
42900: LESSEQUAL
42901: IFFALSE 43301
// begin if tick = ai_time_shift_hexes_underway [ base ] [ val ] [ 4 ] then
42903: LD_OWVAR 1
42907: PUSH
42908: LD_EXP 74
42912: PUSH
42913: LD_VAR 0 1
42917: ARRAY
42918: PUSH
42919: LD_VAR 0 3
42923: ARRAY
42924: PUSH
42925: LD_INT 4
42927: ARRAY
42928: EQUAL
42929: IFFALSE 42947
// begin val = val + 1 ;
42931: LD_ADDR_VAR 0 3
42935: PUSH
42936: LD_VAR 0 3
42940: PUSH
42941: LD_INT 1
42943: PLUS
42944: ST_TO_ADDR
// continue ;
42945: GO 42885
// end ; temp_value = false ;
42947: LD_ADDR_VAR 0 4
42951: PUSH
42952: LD_INT 0
42954: ST_TO_ADDR
// temp_list = GetTaskList ( ai_time_shift_hexes_underway [ base ] [ val ] [ 3 ] ) ;
42955: LD_ADDR_VAR 0 5
42959: PUSH
42960: LD_EXP 74
42964: PUSH
42965: LD_VAR 0 1
42969: ARRAY
42970: PUSH
42971: LD_VAR 0 3
42975: ARRAY
42976: PUSH
42977: LD_INT 3
42979: ARRAY
42980: PPUSH
42981: CALL_OW 437
42985: ST_TO_ADDR
// if IsOk ( ai_time_shift_hexes_underway [ base ] [ val ] [ 3 ] ) then
42986: LD_EXP 74
42990: PUSH
42991: LD_VAR 0 1
42995: ARRAY
42996: PUSH
42997: LD_VAR 0 3
43001: ARRAY
43002: PUSH
43003: LD_INT 3
43005: ARRAY
43006: PPUSH
43007: CALL_OW 302
43011: IFFALSE 43062
// begin if temp_list = 0 then
43013: LD_VAR 0 5
43017: PUSH
43018: LD_INT 0
43020: EQUAL
43021: IFFALSE 43033
// temp_value = true else
43023: LD_ADDR_VAR 0 4
43027: PUSH
43028: LD_INT 1
43030: ST_TO_ADDR
43031: GO 43060
// if not temp_list [ 1 ] [ 1 ] = & then
43033: LD_VAR 0 5
43037: PUSH
43038: LD_INT 1
43040: ARRAY
43041: PUSH
43042: LD_INT 1
43044: ARRAY
43045: PUSH
43046: LD_STRING &
43048: EQUAL
43049: NOT
43050: IFFALSE 43060
// temp_value = true ;
43052: LD_ADDR_VAR 0 4
43056: PUSH
43057: LD_INT 1
43059: ST_TO_ADDR
// end else
43060: GO 43115
// begin temp_list = Delete ( ai_time_shift_hexes_underway [ base ] , val ) ;
43062: LD_ADDR_VAR 0 5
43066: PUSH
43067: LD_EXP 74
43071: PUSH
43072: LD_VAR 0 1
43076: ARRAY
43077: PPUSH
43078: LD_VAR 0 3
43082: PPUSH
43083: CALL_OW 3
43087: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
43088: LD_ADDR_EXP 74
43092: PUSH
43093: LD_EXP 74
43097: PPUSH
43098: LD_VAR 0 1
43102: PPUSH
43103: LD_VAR 0 5
43107: PPUSH
43108: CALL_OW 1
43112: ST_TO_ADDR
// continue ;
43113: GO 42885
// end ; if temp_value then
43115: LD_VAR 0 4
43119: IFFALSE 43285
// begin temp_list = Insert ( ai_time_shift_hexes [ base ] , 1 , [ ai_time_shift_hexes_underway [ base ] [ val ] [ 1 ] , ai_time_shift_hexes_underway [ base ] [ val ] [ 2 ] , ai_time_shift_data [ side ] [ 1 ] ] ) ;
43121: LD_ADDR_VAR 0 5
43125: PUSH
43126: LD_EXP 73
43130: PUSH
43131: LD_VAR 0 1
43135: ARRAY
43136: PPUSH
43137: LD_INT 1
43139: PPUSH
43140: LD_EXP 74
43144: PUSH
43145: LD_VAR 0 1
43149: ARRAY
43150: PUSH
43151: LD_VAR 0 3
43155: ARRAY
43156: PUSH
43157: LD_INT 1
43159: ARRAY
43160: PUSH
43161: LD_EXP 74
43165: PUSH
43166: LD_VAR 0 1
43170: ARRAY
43171: PUSH
43172: LD_VAR 0 3
43176: ARRAY
43177: PUSH
43178: LD_INT 2
43180: ARRAY
43181: PUSH
43182: LD_EXP 72
43186: PUSH
43187: LD_VAR 0 2
43191: ARRAY
43192: PUSH
43193: LD_INT 1
43195: ARRAY
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: LIST
43201: PPUSH
43202: CALL_OW 2
43206: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
43207: LD_ADDR_EXP 73
43211: PUSH
43212: LD_EXP 73
43216: PPUSH
43217: LD_VAR 0 1
43221: PPUSH
43222: LD_VAR 0 5
43226: PPUSH
43227: CALL_OW 1
43231: ST_TO_ADDR
// temp_list = Delete ( ai_time_shift_hexes_underway [ base ] , val ) ;
43232: LD_ADDR_VAR 0 5
43236: PUSH
43237: LD_EXP 74
43241: PUSH
43242: LD_VAR 0 1
43246: ARRAY
43247: PPUSH
43248: LD_VAR 0 3
43252: PPUSH
43253: CALL_OW 3
43257: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
43258: LD_ADDR_EXP 74
43262: PUSH
43263: LD_EXP 74
43267: PPUSH
43268: LD_VAR 0 1
43272: PPUSH
43273: LD_VAR 0 5
43277: PPUSH
43278: CALL_OW 1
43282: ST_TO_ADDR
// continue ;
43283: GO 42885
// end ; val = val + 1 ;
43285: LD_ADDR_VAR 0 3
43289: PUSH
43290: LD_VAR 0 3
43294: PUSH
43295: LD_INT 1
43297: PLUS
43298: ST_TO_ADDR
// end ;
43299: GO 42885
// end ;
43301: GO 42840
43303: POP
43304: POP
// until false ;
43305: LD_INT 0
43307: IFFALSE 42823
// end ;
43309: PPOPN 5
43311: END
// every 0 0$1 + 0 0$0.3 do var base , val , temp_list , time ;
43312: GO 43314
43314: DISABLE
43315: LD_INT 0
43317: PPUSH
43318: PPUSH
43319: PPUSH
43320: PPUSH
// begin repeat wait ( 0 0$1 ) ;
43321: LD_INT 35
43323: PPUSH
43324: CALL_OW 67
// for base in ai_bases do
43328: LD_ADDR_VAR 0 1
43332: PUSH
43333: LD_EXP 59
43337: PUSH
43338: FOR_IN
43339: IFFALSE 43590
// begin if base in [ 1 , 2 ] then
43341: LD_VAR 0 1
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: IN
43356: IFFALSE 43360
// continue ;
43358: GO 43338
// val = 1 ;
43360: LD_ADDR_VAR 0 2
43364: PUSH
43365: LD_INT 1
43367: ST_TO_ADDR
// while val <= ai_time_shift_hexes [ base ] do
43368: LD_VAR 0 2
43372: PUSH
43373: LD_EXP 73
43377: PUSH
43378: LD_VAR 0 1
43382: ARRAY
43383: LESSEQUAL
43384: IFFALSE 43588
// begin time = ai_time_shift_hexes [ base ] [ val ] [ 3 ] - 0 0$1 ;
43386: LD_ADDR_VAR 0 4
43390: PUSH
43391: LD_EXP 73
43395: PUSH
43396: LD_VAR 0 1
43400: ARRAY
43401: PUSH
43402: LD_VAR 0 2
43406: ARRAY
43407: PUSH
43408: LD_INT 3
43410: ARRAY
43411: PUSH
43412: LD_INT 35
43414: MINUS
43415: ST_TO_ADDR
// if time <= 0 0$0 then
43416: LD_VAR 0 4
43420: PUSH
43421: LD_INT 0
43423: LESSEQUAL
43424: IFFALSE 43481
// begin temp_list = Delete ( ai_time_shift_hexes [ base ] , val ) ;
43426: LD_ADDR_VAR 0 3
43430: PUSH
43431: LD_EXP 73
43435: PUSH
43436: LD_VAR 0 1
43440: ARRAY
43441: PPUSH
43442: LD_VAR 0 2
43446: PPUSH
43447: CALL_OW 3
43451: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
43452: LD_ADDR_EXP 73
43456: PUSH
43457: LD_EXP 73
43461: PPUSH
43462: LD_VAR 0 1
43466: PPUSH
43467: LD_VAR 0 3
43471: PPUSH
43472: CALL_OW 1
43476: ST_TO_ADDR
// continue ;
43477: GO 43368
// end else
43479: GO 43572
// begin temp_list = Replace ( ai_time_shift_hexes [ base ] [ val ] , 3 , time ) ;
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_EXP 73
43490: PUSH
43491: LD_VAR 0 1
43495: ARRAY
43496: PUSH
43497: LD_VAR 0 2
43501: ARRAY
43502: PPUSH
43503: LD_INT 3
43505: PPUSH
43506: LD_VAR 0 4
43510: PPUSH
43511: CALL_OW 1
43515: ST_TO_ADDR
// temp_list = Replace ( ai_time_shift_hexes [ base ] , val , temp_list ) ;
43516: LD_ADDR_VAR 0 3
43520: PUSH
43521: LD_EXP 73
43525: PUSH
43526: LD_VAR 0 1
43530: ARRAY
43531: PPUSH
43532: LD_VAR 0 2
43536: PPUSH
43537: LD_VAR 0 3
43541: PPUSH
43542: CALL_OW 1
43546: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
43547: LD_ADDR_EXP 73
43551: PUSH
43552: LD_EXP 73
43556: PPUSH
43557: LD_VAR 0 1
43561: PPUSH
43562: LD_VAR 0 3
43566: PPUSH
43567: CALL_OW 1
43571: ST_TO_ADDR
// end ; val = val + 1 ;
43572: LD_ADDR_VAR 0 2
43576: PUSH
43577: LD_VAR 0 2
43581: PUSH
43582: LD_INT 1
43584: PLUS
43585: ST_TO_ADDR
// end ;
43586: GO 43368
// end ;
43588: GO 43338
43590: POP
43591: POP
// until false ;
43592: LD_INT 0
43594: IFFALSE 43321
// end ;
43596: PPOPN 4
43598: END
// every 0 0$5 do var base , i ;
43599: GO 43601
43601: DISABLE
43602: LD_INT 0
43604: PPUSH
43605: PPUSH
// begin for base in ai_bases do
43606: LD_ADDR_VAR 0 1
43610: PUSH
43611: LD_EXP 59
43615: PUSH
43616: FOR_IN
43617: IFFALSE 43714
// for i in ( ai_vehicles_attack [ base ] ^ ai_vehicles_defend [ base ] ^ ai_cargo_bay [ base ] ) diff 0 do
43619: LD_ADDR_VAR 0 2
43623: PUSH
43624: LD_EXP 41
43628: PUSH
43629: LD_VAR 0 1
43633: ARRAY
43634: PUSH
43635: LD_EXP 40
43639: PUSH
43640: LD_VAR 0 1
43644: ARRAY
43645: ADD
43646: PUSH
43647: LD_EXP 61
43651: PUSH
43652: LD_VAR 0 1
43656: ARRAY
43657: ADD
43658: PUSH
43659: LD_INT 0
43661: DIFF
43662: PUSH
43663: FOR_IN
43664: IFFALSE 43710
// if GetFuel ( i ) < 10 and GetEngine ( i ) = engine_combustion then
43666: LD_VAR 0 2
43670: PPUSH
43671: CALL_OW 261
43675: PUSH
43676: LD_INT 10
43678: LESS
43679: PUSH
43680: LD_VAR 0 2
43684: PPUSH
43685: CALL_OW 262
43689: PUSH
43690: LD_INT 1
43692: EQUAL
43693: AND
43694: IFFALSE 43708
// SetFuel ( i , 10 ) ;
43696: LD_VAR 0 2
43700: PPUSH
43701: LD_INT 10
43703: PPUSH
43704: CALL_OW 240
43708: GO 43663
43710: POP
43711: POP
43712: GO 43616
43714: POP
43715: POP
// enable ;
43716: ENABLE
// end ;
43717: PPOPN 2
43719: END
// every 0 0$1 do var side , i , scientists_list , temp_list , temp_unit , base , k , temp_list_3 , free_spaces , area ;
43720: GO 43722
43722: DISABLE
43723: LD_INT 0
43725: PPUSH
43726: PPUSH
43727: PPUSH
43728: PPUSH
43729: PPUSH
43730: PPUSH
43731: PPUSH
43732: PPUSH
43733: PPUSH
43734: PPUSH
// begin for base in ai_bases do
43735: LD_ADDR_VAR 0 6
43739: PUSH
43740: LD_EXP 59
43744: PUSH
43745: FOR_IN
43746: IFFALSE 44441
// begin side = GetBaseSide ( base ) ;
43748: LD_ADDR_VAR 0 1
43752: PUSH
43753: LD_VAR 0 6
43757: PPUSH
43758: CALL 12735 0 1
43762: ST_TO_ADDR
// scientists_list = ai_scientists [ base ] diff ai_heal_these_humans [ base ] ;
43763: LD_ADDR_VAR 0 3
43767: PUSH
43768: LD_EXP 33
43772: PUSH
43773: LD_VAR 0 6
43777: ARRAY
43778: PUSH
43779: LD_EXP 44
43783: PUSH
43784: LD_VAR 0 6
43788: ARRAY
43789: DIFF
43790: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
43791: LD_ADDR_VAR 0 4
43795: PUSH
43796: LD_EXP 44
43800: PUSH
43801: LD_VAR 0 6
43805: ARRAY
43806: ST_TO_ADDR
// i = 1 ;
43807: LD_ADDR_VAR 0 2
43811: PUSH
43812: LD_INT 1
43814: ST_TO_ADDR
// while i <= scientists_list do
43815: LD_VAR 0 2
43819: PUSH
43820: LD_VAR 0 3
43824: LESSEQUAL
43825: IFFALSE 43920
// begin if GetLives ( scientists_list [ i ] ) <= 700 then
43827: LD_VAR 0 3
43831: PUSH
43832: LD_VAR 0 2
43836: ARRAY
43837: PPUSH
43838: CALL_OW 256
43842: PUSH
43843: LD_INT 700
43845: LESSEQUAL
43846: IFFALSE 43904
// begin temp_list = temp_list ^ scientists_list [ i ] ;
43848: LD_ADDR_VAR 0 4
43852: PUSH
43853: LD_VAR 0 4
43857: PUSH
43858: LD_VAR 0 3
43862: PUSH
43863: LD_VAR 0 2
43867: ARRAY
43868: ADD
43869: ST_TO_ADDR
// scientists_list = Delete ( scientists_list , i ) ;
43870: LD_ADDR_VAR 0 3
43874: PUSH
43875: LD_VAR 0 3
43879: PPUSH
43880: LD_VAR 0 2
43884: PPUSH
43885: CALL_OW 3
43889: ST_TO_ADDR
// i = i - 1 ;
43890: LD_ADDR_VAR 0 2
43894: PUSH
43895: LD_VAR 0 2
43899: PUSH
43900: LD_INT 1
43902: MINUS
43903: ST_TO_ADDR
// end ; i = i + 1 ;
43904: LD_ADDR_VAR 0 2
43908: PUSH
43909: LD_VAR 0 2
43913: PUSH
43914: LD_INT 1
43916: PLUS
43917: ST_TO_ADDR
// end ;
43918: GO 43815
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
43920: LD_ADDR_EXP 44
43924: PUSH
43925: LD_EXP 44
43929: PPUSH
43930: LD_VAR 0 6
43934: PPUSH
43935: LD_VAR 0 4
43939: PPUSH
43940: CALL_OW 1
43944: ST_TO_ADDR
// temp_list = [ ] ;
43945: LD_ADDR_VAR 0 4
43949: PUSH
43950: EMPTY
43951: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
43952: LD_ADDR_VAR 0 2
43956: PUSH
43957: LD_EXP 44
43961: PUSH
43962: LD_VAR 0 6
43966: ARRAY
43967: PUSH
43968: FOR_IN
43969: IFFALSE 44019
// if GetLives ( i ) < 1000 and IsInUnit ( i ) = 0 then
43971: LD_VAR 0 2
43975: PPUSH
43976: CALL_OW 256
43980: PUSH
43981: LD_INT 1000
43983: LESS
43984: PUSH
43985: LD_VAR 0 2
43989: PPUSH
43990: CALL_OW 310
43994: PUSH
43995: LD_INT 0
43997: EQUAL
43998: AND
43999: IFFALSE 44017
// temp_list = temp_list ^ i ;
44001: LD_ADDR_VAR 0 4
44005: PUSH
44006: LD_VAR 0 4
44010: PUSH
44011: LD_VAR 0 2
44015: ADD
44016: ST_TO_ADDR
44017: GO 43968
44019: POP
44020: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
44021: LD_ADDR_EXP 44
44025: PUSH
44026: LD_EXP 44
44030: PPUSH
44031: LD_VAR 0 6
44035: PPUSH
44036: LD_VAR 0 4
44040: PPUSH
44041: CALL_OW 1
44045: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
44046: LD_ADDR_VAR 0 2
44050: PUSH
44051: LD_EXP 44
44055: PUSH
44056: LD_VAR 0 6
44060: ARRAY
44061: PUSH
44062: FOR_IN
44063: IFFALSE 44151
// if GetDistUnitXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 4 then
44065: LD_VAR 0 2
44069: PPUSH
44070: LD_EXP 42
44074: PUSH
44075: LD_VAR 0 6
44079: ARRAY
44080: PUSH
44081: LD_INT 1
44083: ARRAY
44084: PPUSH
44085: LD_EXP 42
44089: PUSH
44090: LD_VAR 0 6
44094: ARRAY
44095: PUSH
44096: LD_INT 2
44098: ARRAY
44099: PPUSH
44100: CALL_OW 297
44104: PUSH
44105: LD_INT 4
44107: GREATER
44108: IFFALSE 44149
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
44110: LD_VAR 0 2
44114: PPUSH
44115: LD_EXP 42
44119: PUSH
44120: LD_VAR 0 6
44124: ARRAY
44125: PUSH
44126: LD_INT 1
44128: ARRAY
44129: PPUSH
44130: LD_EXP 42
44134: PUSH
44135: LD_VAR 0 6
44139: ARRAY
44140: PUSH
44141: LD_INT 2
44143: ARRAY
44144: PPUSH
44145: CALL_OW 111
44149: GO 44062
44151: POP
44152: POP
// if scientists_list = 0 then
44153: LD_VAR 0 3
44157: PUSH
44158: LD_INT 0
44160: EQUAL
44161: IFFALSE 44165
// continue ;
44163: GO 43745
// if ai_heal_these_humans [ base ] > 0 then
44165: LD_EXP 44
44169: PUSH
44170: LD_VAR 0 6
44174: ARRAY
44175: PUSH
44176: LD_INT 0
44178: GREATER
44179: IFFALSE 44374
// begin area = GetBaseArea ( base ) ;
44181: LD_ADDR_VAR 0 10
44185: PUSH
44186: LD_VAR 0 6
44190: PPUSH
44191: CALL 12664 0 1
44195: ST_TO_ADDR
// temp_list = UnitFilter ( ai_heal_these_humans [ base ] , [ f_inarea , area ] ) ;
44196: LD_ADDR_VAR 0 4
44200: PUSH
44201: LD_EXP 44
44205: PUSH
44206: LD_VAR 0 6
44210: ARRAY
44211: PPUSH
44212: LD_INT 95
44214: PUSH
44215: LD_VAR 0 10
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PPUSH
44224: CALL_OW 72
44228: ST_TO_ADDR
// if temp_list > 0 then
44229: LD_VAR 0 4
44233: PUSH
44234: LD_INT 0
44236: GREATER
44237: IFFALSE 44374
// begin scientists_list = GetHumansOutOfUnits ( scientists_list ) ;
44239: LD_ADDR_VAR 0 3
44243: PUSH
44244: LD_VAR 0 3
44248: PPUSH
44249: CALL 23550 0 1
44253: ST_TO_ADDR
// repeat i = 1 ;
44254: LD_ADDR_VAR 0 2
44258: PUSH
44259: LD_INT 1
44261: ST_TO_ADDR
// while i <= temp_list do
44262: LD_VAR 0 2
44266: PUSH
44267: LD_VAR 0 4
44271: LESSEQUAL
44272: IFFALSE 44364
// begin if scientists_list = 0 then
44274: LD_VAR 0 3
44278: PUSH
44279: LD_INT 0
44281: EQUAL
44282: IFFALSE 44286
// break ;
44284: GO 44364
// temp_unit = NearestUnitToUnit ( scientists_list , temp_list [ i ] ) ;
44286: LD_ADDR_VAR 0 5
44290: PUSH
44291: LD_VAR 0 3
44295: PPUSH
44296: LD_VAR 0 4
44300: PUSH
44301: LD_VAR 0 2
44305: ARRAY
44306: PPUSH
44307: CALL_OW 74
44311: ST_TO_ADDR
// ComHeal ( temp_unit , temp_list [ i ] ) ;
44312: LD_VAR 0 5
44316: PPUSH
44317: LD_VAR 0 4
44321: PUSH
44322: LD_VAR 0 2
44326: ARRAY
44327: PPUSH
44328: CALL_OW 128
// scientists_list = scientists_list diff temp_unit ;
44332: LD_ADDR_VAR 0 3
44336: PUSH
44337: LD_VAR 0 3
44341: PUSH
44342: LD_VAR 0 5
44346: DIFF
44347: ST_TO_ADDR
// i = i + 1 ;
44348: LD_ADDR_VAR 0 2
44352: PUSH
44353: LD_VAR 0 2
44357: PUSH
44358: LD_INT 1
44360: PLUS
44361: ST_TO_ADDR
// end ;
44362: GO 44262
// until scientists_list = 0 ;
44364: LD_VAR 0 3
44368: PUSH
44369: LD_INT 0
44371: EQUAL
44372: IFFALSE 44254
// end ; end ; DistributeHumansToBuildings ( base , scientists_list , UnitFilter ( ai_labs [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_scientistic , 6 , true , false ) ;
44374: LD_VAR 0 6
44378: PPUSH
44379: LD_VAR 0 3
44383: PPUSH
44384: LD_EXP 36
44388: PUSH
44389: LD_VAR 0 6
44393: ARRAY
44394: PPUSH
44395: LD_INT 50
44397: PUSH
44398: EMPTY
44399: LIST
44400: PUSH
44401: LD_INT 3
44403: PUSH
44404: LD_INT 57
44406: PUSH
44407: EMPTY
44408: LIST
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PPUSH
44418: CALL_OW 72
44422: PPUSH
44423: LD_INT 4
44425: PPUSH
44426: LD_INT 6
44428: PPUSH
44429: LD_INT 1
44431: PPUSH
44432: LD_INT 0
44434: PPUSH
44435: CALL 15621 0 7
// end ;
44439: GO 43745
44441: POP
44442: POP
// enable ;
44443: ENABLE
// end ; end_of_file
44444: PPOPN 10
44446: END
// export function GetApes ( side ) ; begin
44447: LD_INT 0
44449: PPUSH
// result = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ;
44450: LD_ADDR_VAR 0 2
44454: PUSH
44455: LD_INT 22
44457: PUSH
44458: LD_VAR 0 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: LD_INT 25
44472: PUSH
44473: LD_INT 12
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 25
44482: PUSH
44483: LD_INT 15
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 25
44492: PUSH
44493: LD_INT 16
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 25
44502: PUSH
44503: LD_INT 17
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PPUSH
44521: CALL_OW 69
44525: ST_TO_ADDR
// end ;
44526: LD_VAR 0 2
44530: RET
// on ResearchComplete ( tech , lab ) do var temp_list , temp_unit , i , un_list ;
44531: LD_INT 0
44533: PPUSH
44534: PPUSH
44535: PPUSH
44536: PPUSH
// begin if GetSide ( lab ) = you then
44537: LD_VAR 0 2
44541: PPUSH
44542: CALL_OW 255
44546: PUSH
44547: LD_EXP 3
44551: EQUAL
44552: IFFALSE 45569
// begin SetTech ( tech , you_alt , state_researched ) ;
44554: LD_VAR 0 1
44558: PPUSH
44559: LD_EXP 6
44563: PPUSH
44564: LD_INT 2
44566: PPUSH
44567: CALL_OW 322
// if tech = tech_HidCam then
44571: LD_VAR 0 1
44575: PUSH
44576: LD_INT 17
44578: EQUAL
44579: IFFALSE 45569
// begin un_list = [ Sonya , MarkB , Aviradze ] diff 0 ;
44581: LD_ADDR_VAR 0 6
44585: PUSH
44586: LD_EXP 11
44590: PUSH
44591: LD_EXP 20
44595: PUSH
44596: LD_EXP 21
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: DIFF
44609: ST_TO_ADDR
// temp_list = [ ] ;
44610: LD_ADDR_VAR 0 3
44614: PUSH
44615: EMPTY
44616: ST_TO_ADDR
// for i in un_list do
44617: LD_ADDR_VAR 0 5
44621: PUSH
44622: LD_VAR 0 6
44626: PUSH
44627: FOR_IN
44628: IFFALSE 44665
// if IsInUnit ( i ) = lab then
44630: LD_VAR 0 5
44634: PPUSH
44635: CALL_OW 310
44639: PUSH
44640: LD_VAR 0 2
44644: EQUAL
44645: IFFALSE 44663
// temp_list = temp_list ^ i ;
44647: LD_ADDR_VAR 0 3
44651: PUSH
44652: LD_VAR 0 3
44656: PUSH
44657: LD_VAR 0 5
44661: ADD
44662: ST_TO_ADDR
44663: GO 44627
44665: POP
44666: POP
// if temp_list = 0 then
44667: LD_VAR 0 3
44671: PUSH
44672: LD_INT 0
44674: EQUAL
44675: IFFALSE 44784
// begin temp_list = UnitsInside ( lab ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
44677: LD_ADDR_VAR 0 3
44681: PUSH
44682: LD_VAR 0 2
44686: PPUSH
44687: CALL_OW 313
44691: PUSH
44692: LD_EXP 3
44696: PPUSH
44697: CALL 44447 0 1
44701: PUSH
44702: LD_EXP 10
44706: PUSH
44707: LD_EXP 11
44711: PUSH
44712: LD_EXP 12
44716: PUSH
44717: LD_EXP 13
44721: PUSH
44722: LD_EXP 14
44726: PUSH
44727: LD_EXP 15
44731: PUSH
44732: LD_EXP 16
44736: PUSH
44737: LD_EXP 17
44741: PUSH
44742: LD_EXP 18
44746: PUSH
44747: LD_EXP 19
44751: PUSH
44752: LD_EXP 20
44756: PUSH
44757: LD_EXP 21
44761: PUSH
44762: LD_EXP 22
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: ADD
44782: DIFF
44783: ST_TO_ADDR
// end ; if temp_list = 0 then
44784: LD_VAR 0 3
44788: PUSH
44789: LD_INT 0
44791: EQUAL
44792: IFFALSE 44819
// begin temp_list = UnitFilter ( un_list , [ f_class , class_scientistic ] ) ;
44794: LD_ADDR_VAR 0 3
44798: PUSH
44799: LD_VAR 0 6
44803: PPUSH
44804: LD_INT 25
44806: PUSH
44807: LD_INT 4
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PPUSH
44814: CALL_OW 72
44818: ST_TO_ADDR
// end ; if temp_list = 0 then
44819: LD_VAR 0 3
44823: PUSH
44824: LD_INT 0
44826: EQUAL
44827: IFFALSE 44946
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_class , class_scientistic ] ] ) diff [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ;
44829: LD_ADDR_VAR 0 3
44833: PUSH
44834: LD_INT 22
44836: PUSH
44837: LD_EXP 3
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 25
44848: PUSH
44849: LD_INT 4
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PPUSH
44860: CALL_OW 69
44864: PUSH
44865: LD_EXP 10
44869: PUSH
44870: LD_EXP 11
44874: PUSH
44875: LD_EXP 12
44879: PUSH
44880: LD_EXP 13
44884: PUSH
44885: LD_EXP 14
44889: PUSH
44890: LD_EXP 15
44894: PUSH
44895: LD_EXP 16
44899: PUSH
44900: LD_EXP 17
44904: PUSH
44905: LD_EXP 18
44909: PUSH
44910: LD_EXP 19
44914: PUSH
44915: LD_EXP 20
44919: PUSH
44920: LD_EXP 21
44924: PUSH
44925: LD_EXP 22
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: DIFF
44945: ST_TO_ADDR
// end ; if temp_list = 0 then
44946: LD_VAR 0 3
44950: PUSH
44951: LD_INT 0
44953: EQUAL
44954: IFFALSE 45084
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
44956: LD_ADDR_VAR 0 3
44960: PUSH
44961: LD_INT 22
44963: PUSH
44964: LD_EXP 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 21
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PPUSH
44987: CALL_OW 69
44991: PUSH
44992: LD_EXP 3
44996: PPUSH
44997: CALL 44447 0 1
45001: PUSH
45002: LD_EXP 10
45006: PUSH
45007: LD_EXP 11
45011: PUSH
45012: LD_EXP 12
45016: PUSH
45017: LD_EXP 13
45021: PUSH
45022: LD_EXP 14
45026: PUSH
45027: LD_EXP 15
45031: PUSH
45032: LD_EXP 16
45036: PUSH
45037: LD_EXP 17
45041: PUSH
45042: LD_EXP 18
45046: PUSH
45047: LD_EXP 19
45051: PUSH
45052: LD_EXP 20
45056: PUSH
45057: LD_EXP 21
45061: PUSH
45062: LD_EXP 22
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: ADD
45082: DIFF
45083: ST_TO_ADDR
// end ; if temp_list > 0 then
45084: LD_VAR 0 3
45088: PUSH
45089: LD_INT 0
45091: GREATER
45092: IFFALSE 45478
// begin DialogueOn ;
45094: CALL_OW 6
// temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
45098: LD_ADDR_VAR 0 4
45102: PUSH
45103: LD_VAR 0 3
45107: PUSH
45108: LD_INT 1
45110: PPUSH
45111: LD_VAR 0 3
45115: PPUSH
45116: CALL_OW 12
45120: ARRAY
45121: ST_TO_ADDR
// case temp_unit of Sonya :
45122: LD_VAR 0 4
45126: PUSH
45127: LD_EXP 11
45131: DOUBLE
45132: EQUAL
45133: IFTRUE 45137
45135: GO 45152
45137: POP
// Say ( temp_unit , D7-So-1 ) ; MarkB :
45138: LD_VAR 0 4
45142: PPUSH
45143: LD_STRING D7-So-1
45145: PPUSH
45146: CALL_OW 88
45150: GO 45340
45152: LD_EXP 20
45156: DOUBLE
45157: EQUAL
45158: IFTRUE 45162
45160: GO 45201
45162: POP
// begin Say ( temp_unit , D7-Ma-1 ) ;
45163: LD_VAR 0 4
45167: PPUSH
45168: LD_STRING D7-Ma-1
45170: PPUSH
45171: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
45175: LD_EXP 10
45179: PPUSH
45180: LD_STRING D7-H-1
45182: PPUSH
45183: CALL_OW 88
// Say ( temp_unit , D7-Ma-2 ) ;
45187: LD_VAR 0 4
45191: PPUSH
45192: LD_STRING D7-Ma-2
45194: PPUSH
45195: CALL_OW 88
// end ; Aviradze :
45199: GO 45340
45201: LD_EXP 21
45205: DOUBLE
45206: EQUAL
45207: IFTRUE 45211
45209: GO 45250
45211: POP
// begin Say ( temp_unit , D7-Av-1 ) ;
45212: LD_VAR 0 4
45216: PPUSH
45217: LD_STRING D7-Av-1
45219: PPUSH
45220: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
45224: LD_EXP 10
45228: PPUSH
45229: LD_STRING D7-H-1
45231: PPUSH
45232: CALL_OW 88
// Say ( temp_unit , D7-Av-2 ) ;
45236: LD_VAR 0 4
45240: PPUSH
45241: LD_STRING D7-Av-2
45243: PPUSH
45244: CALL_OW 88
// end ; else
45248: GO 45340
45250: POP
// if GetSex ( temp_unit ) = sex_male then
45251: LD_VAR 0 4
45255: PPUSH
45256: CALL_OW 258
45260: PUSH
45261: LD_INT 1
45263: EQUAL
45264: IFFALSE 45304
// begin Say ( temp_unit , D7-SciM-1 ) ;
45266: LD_VAR 0 4
45270: PPUSH
45271: LD_STRING D7-SciM-1
45273: PPUSH
45274: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
45278: LD_EXP 10
45282: PPUSH
45283: LD_STRING D7-H-1
45285: PPUSH
45286: CALL_OW 88
// Say ( temp_unit , D7-SciM-2 ) ;
45290: LD_VAR 0 4
45294: PPUSH
45295: LD_STRING D7-SciM-2
45297: PPUSH
45298: CALL_OW 88
// end else
45302: GO 45340
// begin Say ( temp_unit , D7-SciF-1 ) ;
45304: LD_VAR 0 4
45308: PPUSH
45309: LD_STRING D7-SciF-1
45311: PPUSH
45312: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
45316: LD_EXP 10
45320: PPUSH
45321: LD_STRING D7-H-1
45323: PPUSH
45324: CALL_OW 88
// Say ( temp_unit , D7-SciF-2 ) ;
45328: LD_VAR 0 4
45332: PPUSH
45333: LD_STRING D7-SciF-2
45335: PPUSH
45336: CALL_OW 88
// end ; end ; Say ( Heike , D7-H-2 ) ;
45340: LD_EXP 10
45344: PPUSH
45345: LD_STRING D7-H-2
45347: PPUSH
45348: CALL_OW 88
// case temp_unit of Sonya :
45352: LD_VAR 0 4
45356: PUSH
45357: LD_EXP 11
45361: DOUBLE
45362: EQUAL
45363: IFTRUE 45367
45365: GO 45382
45367: POP
// Say ( temp_unit , D7-So-2 ) ; MarkB :
45368: LD_VAR 0 4
45372: PPUSH
45373: LD_STRING D7-So-2
45375: PPUSH
45376: CALL_OW 88
45380: GO 45474
45382: LD_EXP 20
45386: DOUBLE
45387: EQUAL
45388: IFTRUE 45392
45390: GO 45407
45392: POP
// Say ( temp_unit , D7-Ma-3 ) ; Aviradze :
45393: LD_VAR 0 4
45397: PPUSH
45398: LD_STRING D7-Ma-3
45400: PPUSH
45401: CALL_OW 88
45405: GO 45474
45407: LD_EXP 21
45411: DOUBLE
45412: EQUAL
45413: IFTRUE 45417
45415: GO 45432
45417: POP
// Say ( temp_unit , D7-Av-3 ) ; else
45418: LD_VAR 0 4
45422: PPUSH
45423: LD_STRING D7-Av-3
45425: PPUSH
45426: CALL_OW 88
45430: GO 45474
45432: POP
// if GetSex ( temp_unit ) = sex_male then
45433: LD_VAR 0 4
45437: PPUSH
45438: CALL_OW 258
45442: PUSH
45443: LD_INT 1
45445: EQUAL
45446: IFFALSE 45462
// Say ( temp_unit , D7-SciM-3 ) else
45448: LD_VAR 0 4
45452: PPUSH
45453: LD_STRING D7-SciM-3
45455: PPUSH
45456: CALL_OW 88
45460: GO 45474
// Say ( temp_unit , D7-SciF-3 ) ; end ;
45462: LD_VAR 0 4
45466: PPUSH
45467: LD_STRING D7-SciF-3
45469: PPUSH
45470: CALL_OW 88
// DialogueOff ;
45474: CALL_OW 7
// end ; Wait ( 0 0$0.2 ) ;
45478: LD_INT 7
45480: PPUSH
45481: CALL_OW 67
// ChangeMissionObjectives ( MAddCameras ) ;
45485: LD_STRING MAddCameras
45487: PPUSH
45488: CALL_OW 337
// wait ( 0 0$0.2 ) ;
45492: LD_INT 7
45494: PPUSH
45495: CALL_OW 67
// SetAreaMapShow ( camera_area_2 , 1 ) ;
45499: LD_INT 15
45501: PPUSH
45502: LD_INT 1
45504: PPUSH
45505: CALL_OW 424
// SetAreaMapShow ( camera_area_3 , 1 ) ;
45509: LD_INT 16
45511: PPUSH
45512: LD_INT 1
45514: PPUSH
45515: CALL_OW 424
// SetAreaMapShow ( camera_area_4 , 1 ) ;
45519: LD_INT 17
45521: PPUSH
45522: LD_INT 1
45524: PPUSH
45525: CALL_OW 424
// SetAreaMapShow ( camera_area_5 , 1 ) ;
45529: LD_INT 18
45531: PPUSH
45532: LD_INT 1
45534: PPUSH
45535: CALL_OW 424
// SetAreaMapShow ( camera_area_6 , 1 ) ;
45539: LD_INT 20
45541: PPUSH
45542: LD_INT 1
45544: PPUSH
45545: CALL_OW 424
// SetAreaMapShow ( camera_area_7 , 1 ) ;
45549: LD_INT 21
45551: PPUSH
45552: LD_INT 1
45554: PPUSH
45555: CALL_OW 424
// SetAreaMapShow ( camera_area_8 , 1 ) ;
45559: LD_INT 22
45561: PPUSH
45562: LD_INT 1
45564: PPUSH
45565: CALL_OW 424
// end ; end ; end ;
45569: PPOPN 6
45571: END
// export function CheckCamerasOnCommand ( comm ) ; var i , task_list , x , y , k , temp_list ; begin
45572: LD_INT 0
45574: PPUSH
45575: PPUSH
45576: PPUSH
45577: PPUSH
45578: PPUSH
45579: PPUSH
45580: PPUSH
// if cameras_placed then
45581: LD_EXP 92
45585: IFFALSE 45589
// exit ;
45587: GO 45882
// case comm of 103 :
45589: LD_VAR 0 1
45593: PUSH
45594: LD_INT 103
45596: DOUBLE
45597: EQUAL
45598: IFTRUE 45602
45600: GO 45881
45602: POP
// begin for i in FilterAllUnits ( [ [ f_side , you ] , [ f_class , class_engineer ] ] ) do
45603: LD_ADDR_VAR 0 3
45607: PUSH
45608: LD_INT 22
45610: PUSH
45611: LD_EXP 3
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 25
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PPUSH
45634: CALL_OW 69
45638: PUSH
45639: FOR_IN
45640: IFFALSE 45877
// if IsSelected ( i ) then
45642: LD_VAR 0 3
45646: PPUSH
45647: CALL_OW 306
45651: IFFALSE 45875
// begin task_list = GetTaskList ( i ) ;
45653: LD_ADDR_VAR 0 4
45657: PUSH
45658: LD_VAR 0 3
45662: PPUSH
45663: CALL_OW 437
45667: ST_TO_ADDR
// if task_list > 0 then
45668: LD_VAR 0 4
45672: PUSH
45673: LD_INT 0
45675: GREATER
45676: IFFALSE 45875
// begin x = task_list [ task_list + 0 ] [ 2 ] ;
45678: LD_ADDR_VAR 0 5
45682: PUSH
45683: LD_VAR 0 4
45687: PUSH
45688: LD_VAR 0 4
45692: PUSH
45693: LD_INT 0
45695: PLUS
45696: ARRAY
45697: PUSH
45698: LD_INT 2
45700: ARRAY
45701: ST_TO_ADDR
// y = task_list [ task_list + 0 ] [ 3 ] ;
45702: LD_ADDR_VAR 0 6
45706: PUSH
45707: LD_VAR 0 4
45711: PUSH
45712: LD_VAR 0 4
45716: PUSH
45717: LD_INT 0
45719: PLUS
45720: ARRAY
45721: PUSH
45722: LD_INT 3
45724: ARRAY
45725: ST_TO_ADDR
// if InArea ( x , y , camera_area_2 ) or InArea ( x , y , camera_area_3 ) or InArea ( x , y , camera_area_4 ) or InArea ( x , y , camera_area_5 ) or InArea ( x , y , camera_area_6 ) or InArea ( x , y , camera_area_7 ) or InArea ( x , y , camera_area_8 ) then
45726: LD_VAR 0 5
45730: PPUSH
45731: LD_VAR 0 6
45735: PPUSH
45736: LD_INT 15
45738: PPUSH
45739: CALL_OW 309
45743: PUSH
45744: LD_VAR 0 5
45748: PPUSH
45749: LD_VAR 0 6
45753: PPUSH
45754: LD_INT 16
45756: PPUSH
45757: CALL_OW 309
45761: OR
45762: PUSH
45763: LD_VAR 0 5
45767: PPUSH
45768: LD_VAR 0 6
45772: PPUSH
45773: LD_INT 17
45775: PPUSH
45776: CALL_OW 309
45780: OR
45781: PUSH
45782: LD_VAR 0 5
45786: PPUSH
45787: LD_VAR 0 6
45791: PPUSH
45792: LD_INT 18
45794: PPUSH
45795: CALL_OW 309
45799: OR
45800: PUSH
45801: LD_VAR 0 5
45805: PPUSH
45806: LD_VAR 0 6
45810: PPUSH
45811: LD_INT 20
45813: PPUSH
45814: CALL_OW 309
45818: OR
45819: PUSH
45820: LD_VAR 0 5
45824: PPUSH
45825: LD_VAR 0 6
45829: PPUSH
45830: LD_INT 21
45832: PPUSH
45833: CALL_OW 309
45837: OR
45838: PUSH
45839: LD_VAR 0 5
45843: PPUSH
45844: LD_VAR 0 6
45848: PPUSH
45849: LD_INT 22
45851: PPUSH
45852: CALL_OW 309
45856: OR
45857: IFFALSE 45875
// begin camera_engineers = camera_engineers union i ;
45859: LD_ADDR_EXP 91
45863: PUSH
45864: LD_EXP 91
45868: PUSH
45869: LD_VAR 0 3
45873: UNION
45874: ST_TO_ADDR
// end ; end ; end ;
45875: GO 45639
45877: POP
45878: POP
// end ; end ;
45879: GO 45882
45881: POP
// end ;
45882: LD_VAR 0 2
45886: RET
// every 0 0$1 + 0 0$0.4 do var i , k , temp_list , x , y , task_list ; var need_area_list ;
45887: GO 45889
45889: DISABLE
45890: LD_INT 0
45892: PPUSH
45893: PPUSH
45894: PPUSH
45895: PPUSH
45896: PPUSH
45897: PPUSH
45898: PPUSH
// begin need_area_list = [ 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
45899: LD_ADDR_VAR 0 7
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 3
45909: PUSH
45910: LD_INT 4
45912: PUSH
45913: LD_INT 5
45915: PUSH
45916: LD_INT 6
45918: PUSH
45919: LD_INT 7
45921: PUSH
45922: LD_INT 8
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// repeat wait ( 0 0$0.1 ) ;
45934: LD_INT 4
45936: PPUSH
45937: CALL_OW 67
// temp_list = [ ] ;
45941: LD_ADDR_VAR 0 3
45945: PUSH
45946: EMPTY
45947: ST_TO_ADDR
// for i in camera_engineers do
45948: LD_ADDR_VAR 0 1
45952: PUSH
45953: LD_EXP 91
45957: PUSH
45958: FOR_IN
45959: IFFALSE 45990
// if HasTask ( i ) then
45961: LD_VAR 0 1
45965: PPUSH
45966: CALL_OW 314
45970: IFFALSE 45988
// temp_list = temp_list ^ i ;
45972: LD_ADDR_VAR 0 3
45976: PUSH
45977: LD_VAR 0 3
45981: PUSH
45982: LD_VAR 0 1
45986: ADD
45987: ST_TO_ADDR
45988: GO 45958
45990: POP
45991: POP
// camera_engineers = temp_list ;
45992: LD_ADDR_EXP 91
45996: PUSH
45997: LD_VAR 0 3
46001: ST_TO_ADDR
// for i in camera_engineers do
46002: LD_ADDR_VAR 0 1
46006: PUSH
46007: LD_EXP 91
46011: PUSH
46012: FOR_IN
46013: IFFALSE 46588
// begin task_list = GetTaskList ( i ) ;
46015: LD_ADDR_VAR 0 6
46019: PUSH
46020: LD_VAR 0 1
46024: PPUSH
46025: CALL_OW 437
46029: ST_TO_ADDR
// if task_list [ 1 ] [ 1 ] = g then
46030: LD_VAR 0 6
46034: PUSH
46035: LD_INT 1
46037: ARRAY
46038: PUSH
46039: LD_INT 1
46041: ARRAY
46042: PUSH
46043: LD_STRING g
46045: EQUAL
46046: IFFALSE 46586
// begin x = task_list [ 1 ] [ 2 ] ;
46048: LD_ADDR_VAR 0 4
46052: PUSH
46053: LD_VAR 0 6
46057: PUSH
46058: LD_INT 1
46060: ARRAY
46061: PUSH
46062: LD_INT 2
46064: ARRAY
46065: ST_TO_ADDR
// y = task_list [ 1 ] [ 3 ] ;
46066: LD_ADDR_VAR 0 5
46070: PUSH
46071: LD_VAR 0 6
46075: PUSH
46076: LD_INT 1
46078: ARRAY
46079: PUSH
46080: LD_INT 3
46082: ARRAY
46083: ST_TO_ADDR
// if GetDistUnitXY ( i , x , y ) > 2 then
46084: LD_VAR 0 1
46088: PPUSH
46089: LD_VAR 0 4
46093: PPUSH
46094: LD_VAR 0 5
46098: PPUSH
46099: CALL_OW 297
46103: PUSH
46104: LD_INT 2
46106: GREATER
46107: IFFALSE 46111
// continue ;
46109: GO 46012
// if InArea ( x , y , camera_area_2 ) then
46111: LD_VAR 0 4
46115: PPUSH
46116: LD_VAR 0 5
46120: PPUSH
46121: LD_INT 15
46123: PPUSH
46124: CALL_OW 309
46128: IFFALSE 46175
// begin HiddenCamera ( x , y , you ) ;
46130: LD_VAR 0 4
46134: PPUSH
46135: LD_VAR 0 5
46139: PPUSH
46140: LD_EXP 3
46144: PPUSH
46145: CALL_OW 244
// need_area_list = need_area_list diff 2 ;
46149: LD_ADDR_VAR 0 7
46153: PUSH
46154: LD_VAR 0 7
46158: PUSH
46159: LD_INT 2
46161: DIFF
46162: ST_TO_ADDR
// SetAreaMapShow ( camera_area_2 , 0 ) ;
46163: LD_INT 15
46165: PPUSH
46166: LD_INT 0
46168: PPUSH
46169: CALL_OW 424
// end else
46173: GO 46557
// if InArea ( x , y , camera_area_3 ) then
46175: LD_VAR 0 4
46179: PPUSH
46180: LD_VAR 0 5
46184: PPUSH
46185: LD_INT 16
46187: PPUSH
46188: CALL_OW 309
46192: IFFALSE 46239
// begin HiddenCamera ( x , y , you ) ;
46194: LD_VAR 0 4
46198: PPUSH
46199: LD_VAR 0 5
46203: PPUSH
46204: LD_EXP 3
46208: PPUSH
46209: CALL_OW 244
// need_area_list = need_area_list diff 3 ;
46213: LD_ADDR_VAR 0 7
46217: PUSH
46218: LD_VAR 0 7
46222: PUSH
46223: LD_INT 3
46225: DIFF
46226: ST_TO_ADDR
// SetAreaMapShow ( camera_area_3 , 0 ) ;
46227: LD_INT 16
46229: PPUSH
46230: LD_INT 0
46232: PPUSH
46233: CALL_OW 424
// end else
46237: GO 46557
// if InArea ( x , y , camera_area_4 ) then
46239: LD_VAR 0 4
46243: PPUSH
46244: LD_VAR 0 5
46248: PPUSH
46249: LD_INT 17
46251: PPUSH
46252: CALL_OW 309
46256: IFFALSE 46303
// begin HiddenCamera ( x , y , you ) ;
46258: LD_VAR 0 4
46262: PPUSH
46263: LD_VAR 0 5
46267: PPUSH
46268: LD_EXP 3
46272: PPUSH
46273: CALL_OW 244
// need_area_list = need_area_list diff 4 ;
46277: LD_ADDR_VAR 0 7
46281: PUSH
46282: LD_VAR 0 7
46286: PUSH
46287: LD_INT 4
46289: DIFF
46290: ST_TO_ADDR
// SetAreaMapShow ( camera_area_4 , 0 ) ;
46291: LD_INT 17
46293: PPUSH
46294: LD_INT 0
46296: PPUSH
46297: CALL_OW 424
// end else
46301: GO 46557
// if InArea ( x , y , camera_area_5 ) then
46303: LD_VAR 0 4
46307: PPUSH
46308: LD_VAR 0 5
46312: PPUSH
46313: LD_INT 18
46315: PPUSH
46316: CALL_OW 309
46320: IFFALSE 46367
// begin HiddenCamera ( x , y , you ) ;
46322: LD_VAR 0 4
46326: PPUSH
46327: LD_VAR 0 5
46331: PPUSH
46332: LD_EXP 3
46336: PPUSH
46337: CALL_OW 244
// need_area_list = need_area_list diff 5 ;
46341: LD_ADDR_VAR 0 7
46345: PUSH
46346: LD_VAR 0 7
46350: PUSH
46351: LD_INT 5
46353: DIFF
46354: ST_TO_ADDR
// SetAreaMapShow ( camera_area_5 , 0 ) ;
46355: LD_INT 18
46357: PPUSH
46358: LD_INT 0
46360: PPUSH
46361: CALL_OW 424
// end else
46365: GO 46557
// if InArea ( x , y , camera_area_6 ) then
46367: LD_VAR 0 4
46371: PPUSH
46372: LD_VAR 0 5
46376: PPUSH
46377: LD_INT 20
46379: PPUSH
46380: CALL_OW 309
46384: IFFALSE 46431
// begin HiddenCamera ( x , y , you ) ;
46386: LD_VAR 0 4
46390: PPUSH
46391: LD_VAR 0 5
46395: PPUSH
46396: LD_EXP 3
46400: PPUSH
46401: CALL_OW 244
// need_area_list = need_area_list diff 6 ;
46405: LD_ADDR_VAR 0 7
46409: PUSH
46410: LD_VAR 0 7
46414: PUSH
46415: LD_INT 6
46417: DIFF
46418: ST_TO_ADDR
// SetAreaMapShow ( camera_area_6 , 0 ) ;
46419: LD_INT 20
46421: PPUSH
46422: LD_INT 0
46424: PPUSH
46425: CALL_OW 424
// end else
46429: GO 46557
// if InArea ( x , y , camera_area_7 ) then
46431: LD_VAR 0 4
46435: PPUSH
46436: LD_VAR 0 5
46440: PPUSH
46441: LD_INT 21
46443: PPUSH
46444: CALL_OW 309
46448: IFFALSE 46495
// begin HiddenCamera ( x , y , you ) ;
46450: LD_VAR 0 4
46454: PPUSH
46455: LD_VAR 0 5
46459: PPUSH
46460: LD_EXP 3
46464: PPUSH
46465: CALL_OW 244
// need_area_list = need_area_list diff 7 ;
46469: LD_ADDR_VAR 0 7
46473: PUSH
46474: LD_VAR 0 7
46478: PUSH
46479: LD_INT 7
46481: DIFF
46482: ST_TO_ADDR
// SetAreaMapShow ( camera_area_7 , 0 ) ;
46483: LD_INT 21
46485: PPUSH
46486: LD_INT 0
46488: PPUSH
46489: CALL_OW 424
// end else
46493: GO 46557
// if InArea ( x , y , camera_area_8 ) then
46495: LD_VAR 0 4
46499: PPUSH
46500: LD_VAR 0 5
46504: PPUSH
46505: LD_INT 22
46507: PPUSH
46508: CALL_OW 309
46512: IFFALSE 46557
// begin HiddenCamera ( x , y , you ) ;
46514: LD_VAR 0 4
46518: PPUSH
46519: LD_VAR 0 5
46523: PPUSH
46524: LD_EXP 3
46528: PPUSH
46529: CALL_OW 244
// need_area_list = need_area_list diff 8 ;
46533: LD_ADDR_VAR 0 7
46537: PUSH
46538: LD_VAR 0 7
46542: PUSH
46543: LD_INT 8
46545: DIFF
46546: ST_TO_ADDR
// SetAreaMapShow ( camera_area_8 , 0 ) ;
46547: LD_INT 22
46549: PPUSH
46550: LD_INT 0
46552: PPUSH
46553: CALL_OW 424
// end ; if need_area_list = 0 then
46557: LD_VAR 0 7
46561: PUSH
46562: LD_INT 0
46564: EQUAL
46565: IFFALSE 46586
// begin ChangeMissionObjectives ( MOutCameras ) ;
46567: LD_STRING MOutCameras
46569: PPUSH
46570: CALL_OW 337
// cameras_placed = true ;
46574: LD_ADDR_EXP 92
46578: PUSH
46579: LD_INT 1
46581: ST_TO_ADDR
// exit ;
46582: POP
46583: POP
46584: GO 46594
// end ; end ; end ;
46586: GO 46012
46588: POP
46589: POP
// until false ;
46590: LD_INT 0
46592: IFFALSE 45934
// end ;
46594: PPOPN 7
46596: END
// on SpontaneousTeleported ( un ) do begin if first_teleport then
46597: LD_EXP 90
46601: IFFALSE 46731
// if See ( you , un ) then
46603: LD_EXP 3
46607: PPUSH
46608: LD_VAR 0 1
46612: PPUSH
46613: CALL_OW 292
46617: IFFALSE 46731
// begin CenterNowOnUnits ( un ) ;
46619: LD_VAR 0 1
46623: PPUSH
46624: CALL_OW 87
// first_teleport = false ;
46628: LD_ADDR_EXP 90
46632: PUSH
46633: LD_INT 0
46635: ST_TO_ADDR
// wait ( 0 0$1.8 ) ;
46636: LD_INT 63
46638: PPUSH
46639: CALL_OW 67
// DialogueOn ;
46643: CALL_OW 6
// ForceSay ( Heike , D6-H-1 ) ;
46647: LD_EXP 10
46651: PPUSH
46652: LD_STRING D6-H-1
46654: PPUSH
46655: CALL_OW 91
// if IsLive ( Ralph ) then
46659: LD_EXP 13
46663: PPUSH
46664: CALL_OW 300
46668: IFFALSE 46684
// ForceSay ( Ralph , D6-Ra-1 ) else
46670: LD_EXP 13
46674: PPUSH
46675: LD_STRING D6-Ra-1
46677: PPUSH
46678: CALL_OW 91
46682: GO 46727
// if IsLive ( Oswald ) then
46684: LD_EXP 12
46688: PPUSH
46689: CALL_OW 300
46693: IFFALSE 46727
// begin if oswald_is_substitute then
46695: LD_EXP 81
46699: IFFALSE 46715
// ForceSay ( Oswald , D6-Os_alt-1 ) else
46701: LD_EXP 12
46705: PPUSH
46706: LD_STRING D6-Os_alt-1
46708: PPUSH
46709: CALL_OW 91
46713: GO 46727
// ForceSay ( Oswald , D6-Os-1 ) ;
46715: LD_EXP 12
46719: PPUSH
46720: LD_STRING D6-Os-1
46722: PPUSH
46723: CALL_OW 91
// end ; DialogueOff ;
46727: CALL_OW 7
// end ; end ;
46731: PPOPN 1
46733: END
// every 0 0$1.6 do
46734: GO 46736
46736: DISABLE
// begin repeat wait ( 0 0$0.5 ) ;
46737: LD_INT 18
46739: PPUSH
46740: CALL_OW 67
// if game_phase = 3 then
46744: LD_EXP 89
46748: PUSH
46749: LD_INT 3
46751: EQUAL
46752: IFFALSE 46756
// exit ;
46754: GO 46842
// if ContactTime ( [ you , you_alt ] ) <= 0 0$1 or ai_contact_time [ you ] [ you_alt ] <= 0 0$1 then
46756: LD_EXP 3
46760: PUSH
46761: LD_EXP 6
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PPUSH
46770: CALL_OW 462
46774: PUSH
46775: LD_INT 35
46777: LESSEQUAL
46778: PUSH
46779: LD_EXP 76
46783: PUSH
46784: LD_EXP 3
46788: ARRAY
46789: PUSH
46790: LD_EXP 6
46794: ARRAY
46795: PUSH
46796: LD_INT 35
46798: LESSEQUAL
46799: OR
46800: IFFALSE 46838
// begin DialogueOn ;
46802: CALL_OW 6
// Say ( Gensher , D11-Ge-1 ) ;
46806: LD_EXP 24
46810: PPUSH
46811: LD_STRING D11-Ge-1
46813: PPUSH
46814: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
46818: LD_INT 18
46820: PPUSH
46821: CALL_OW 68
// YouLost ( AttackedGensher ) ;
46825: LD_STRING AttackedGensher
46827: PPUSH
46828: CALL_OW 104
// DialogueOff ;
46832: CALL_OW 7
// exit ;
46836: GO 46842
// end ; until false ;
46838: LD_INT 0
46840: IFFALSE 46737
// end ;
46842: END
// every 0 0$1 + 0 0$0.2 do var temp_list , i ;
46843: GO 46845
46845: DISABLE
46846: LD_INT 0
46848: PPUSH
46849: PPUSH
// begin repeat wait ( 0 0$1 ) ;
46850: LD_INT 35
46852: PPUSH
46853: CALL_OW 67
// if game_phase > 1 then
46857: LD_EXP 89
46861: PUSH
46862: LD_INT 1
46864: GREATER
46865: IFFALSE 46869
// exit ;
46867: GO 47313
// if ContactTime ( [ you , americans ] ) <= 0 0$2 or ai_contact_time [ americans ] [ you ] <= 0 0$2 then
46869: LD_EXP 3
46873: PUSH
46874: LD_EXP 7
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PPUSH
46883: CALL_OW 462
46887: PUSH
46888: LD_INT 70
46890: LESSEQUAL
46891: PUSH
46892: LD_EXP 76
46896: PUSH
46897: LD_EXP 7
46901: ARRAY
46902: PUSH
46903: LD_EXP 3
46907: ARRAY
46908: PUSH
46909: LD_INT 70
46911: LESSEQUAL
46912: OR
46913: IFFALSE 47309
// begin temp_list = [ ] ;
46915: LD_ADDR_VAR 0 1
46919: PUSH
46920: EMPTY
46921: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , americans ] ) do
46922: LD_ADDR_VAR 0 2
46926: PUSH
46927: LD_INT 22
46929: PUSH
46930: LD_EXP 7
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PPUSH
46939: CALL_OW 69
46943: PUSH
46944: FOR_IN
46945: IFFALSE 46983
// if GetSide ( Attacks ( i ) ) = you then
46947: LD_VAR 0 2
46951: PPUSH
46952: CALL_OW 320
46956: PPUSH
46957: CALL_OW 255
46961: PUSH
46962: LD_EXP 3
46966: EQUAL
46967: IFFALSE 46981
// begin temp_list = i ;
46969: LD_ADDR_VAR 0 1
46973: PUSH
46974: LD_VAR 0 2
46978: ST_TO_ADDR
// break ;
46979: GO 46983
// end ;
46981: GO 46944
46983: POP
46984: POP
// if temp_list = 0 then
46985: LD_VAR 0 1
46989: PUSH
46990: LD_INT 0
46992: EQUAL
46993: IFFALSE 47058
// for i in FilterAllUnits ( [ f_side , you ] ) do
46995: LD_ADDR_VAR 0 2
46999: PUSH
47000: LD_INT 22
47002: PUSH
47003: LD_EXP 3
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PPUSH
47012: CALL_OW 69
47016: PUSH
47017: FOR_IN
47018: IFFALSE 47056
// if GetSide ( Attacks ( i ) ) = americans then
47020: LD_VAR 0 2
47024: PPUSH
47025: CALL_OW 320
47029: PPUSH
47030: CALL_OW 255
47034: PUSH
47035: LD_EXP 7
47039: EQUAL
47040: IFFALSE 47054
// begin temp_list = i ;
47042: LD_ADDR_VAR 0 1
47046: PUSH
47047: LD_VAR 0 2
47051: ST_TO_ADDR
// break ;
47052: GO 47056
// end ;
47054: GO 47017
47056: POP
47057: POP
// if temp_list > 0 then
47058: LD_VAR 0 1
47062: PUSH
47063: LD_INT 0
47065: GREATER
47066: IFFALSE 47077
// CenterOnUnits ( temp_list ) ;
47068: LD_VAR 0 1
47072: PPUSH
47073: CALL_OW 85
// DialogueOn ;
47077: CALL_OW 6
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_class , class_soldier ] ] ) diff [ Simms , Cornell , Khattam ] ;
47081: LD_ADDR_VAR 0 1
47085: PUSH
47086: LD_INT 22
47088: PUSH
47089: LD_EXP 7
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 25
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PPUSH
47112: CALL_OW 69
47116: PUSH
47117: LD_EXP 25
47121: PUSH
47122: LD_EXP 26
47126: PUSH
47127: LD_EXP 27
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: DIFF
47137: ST_TO_ADDR
// if temp_list = 0 then
47138: LD_VAR 0 1
47142: PUSH
47143: LD_INT 0
47145: EQUAL
47146: IFFALSE 47216
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) diff ( GetApes ( americans ) ^ [ Simms , Cornell , Khattam ] ) ;
47148: LD_ADDR_VAR 0 1
47152: PUSH
47153: LD_INT 22
47155: PUSH
47156: LD_EXP 7
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 21
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PPUSH
47179: CALL_OW 69
47183: PUSH
47184: LD_EXP 7
47188: PPUSH
47189: CALL 44447 0 1
47193: PUSH
47194: LD_EXP 25
47198: PUSH
47199: LD_EXP 26
47203: PUSH
47204: LD_EXP 27
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: ADD
47214: DIFF
47215: ST_TO_ADDR
// if temp_list > 0 then
47216: LD_VAR 0 1
47220: PUSH
47221: LD_INT 0
47223: GREATER
47224: IFFALSE 47279
// if GetSex ( temp_list [ 1 ] ) = sex_male then
47226: LD_VAR 0 1
47230: PUSH
47231: LD_INT 1
47233: ARRAY
47234: PPUSH
47235: CALL_OW 258
47239: PUSH
47240: LD_INT 1
47242: EQUAL
47243: IFFALSE 47263
// SayRadio ( temp_list [ 1 ] , D4-SomeM-1 ) else
47245: LD_VAR 0 1
47249: PUSH
47250: LD_INT 1
47252: ARRAY
47253: PPUSH
47254: LD_STRING D4-SomeM-1
47256: PPUSH
47257: CALL_OW 94
47261: GO 47279
// SayRadio ( temp_list [ 1 ] , D4-SomeF-1 ) ;
47263: LD_VAR 0 1
47267: PUSH
47268: LD_INT 1
47270: ARRAY
47271: PPUSH
47272: LD_STRING D4-SomeF-1
47274: PPUSH
47275: CALL_OW 94
// SayRadio ( Simms , D4-Sim-1 ) ;
47279: LD_EXP 25
47283: PPUSH
47284: LD_STRING D4-Sim-1
47286: PPUSH
47287: CALL_OW 94
// dwait ( 0 0$0.5 ) ;
47291: LD_INT 18
47293: PPUSH
47294: CALL_OW 68
// YouLost ( PlayerSeen ) ;
47298: LD_STRING PlayerSeen
47300: PPUSH
47301: CALL_OW 104
// DialogueOff ;
47305: CALL_OW 7
// end ; until false ;
47309: LD_INT 0
47311: IFFALSE 46850
// end ;
47313: PPOPN 2
47315: END
// every 0 0$1 + 0 0$0.9 do var vehicle ;
47316: GO 47318
47318: DISABLE
47319: LD_INT 0
47321: PPUSH
// begin InitUc ;
47322: CALL_OW 18
// InitVc ;
47326: CALL_OW 20
// uc_side = americans ;
47330: LD_ADDR_OWVAR 20
47334: PUSH
47335: LD_EXP 7
47339: ST_TO_ADDR
// uc_nation = nation_american ;
47340: LD_ADDR_OWVAR 21
47344: PUSH
47345: LD_INT 1
47347: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
47348: LD_ADDR_OWVAR 37
47352: PUSH
47353: LD_INT 2
47355: ST_TO_ADDR
// vc_control = control_manual ;
47356: LD_ADDR_OWVAR 38
47360: PUSH
47361: LD_INT 1
47363: ST_TO_ADDR
// vc_engine = engine_siberite ;
47364: LD_ADDR_OWVAR 39
47368: PUSH
47369: LD_INT 3
47371: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
47372: LD_ADDR_OWVAR 40
47376: PUSH
47377: LD_INT 2
47379: ST_TO_ADDR
// vehicle = CreateVehicle ;
47380: LD_ADDR_VAR 0 1
47384: PUSH
47385: CALL_OW 45
47389: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , vehicle ) ;
47390: LD_EXP 28
47394: PPUSH
47395: LD_VAR 0 1
47399: PPUSH
47400: CALL_OW 52
// wait ( Rand ( 0 0$20 , 0 0$30 ) ) ;
47404: LD_INT 700
47406: PPUSH
47407: LD_INT 1050
47409: PPUSH
47410: CALL_OW 12
47414: PPUSH
47415: CALL_OW 67
// while not PlaceUnitXYR ( vehicle , 98 , 30 , 2 , false ) do
47419: LD_VAR 0 1
47423: PPUSH
47424: LD_INT 98
47426: PPUSH
47427: LD_INT 30
47429: PPUSH
47430: LD_INT 2
47432: PPUSH
47433: LD_INT 0
47435: PPUSH
47436: CALL_OW 50
47440: NOT
47441: IFFALSE 47452
// wait ( 0 0$2 ) ;
47443: LD_INT 70
47445: PPUSH
47446: CALL_OW 67
47450: GO 47419
// while IsPlaced ( Joan ) do
47452: LD_EXP 28
47456: PPUSH
47457: CALL_OW 305
47461: IFFALSE 47528
// begin wait ( 0 0$1 ) ;
47463: LD_INT 35
47465: PPUSH
47466: CALL_OW 67
// if GetDistUnitXY ( Joan , 56 , 3 ) > 1 then
47470: LD_EXP 28
47474: PPUSH
47475: LD_INT 56
47477: PPUSH
47478: LD_INT 3
47480: PPUSH
47481: CALL_OW 297
47485: PUSH
47486: LD_INT 1
47488: GREATER
47489: IFFALSE 47508
// ComMoveXY ( Joan , 56 , 3 ) else
47491: LD_EXP 28
47495: PPUSH
47496: LD_INT 56
47498: PPUSH
47499: LD_INT 3
47501: PPUSH
47502: CALL_OW 111
47506: GO 47526
// begin DestroyUnit ( Joan ) ;
47508: LD_EXP 28
47512: PPUSH
47513: CALL_OW 65
// DestroyUnit ( vehicle ) ;
47517: LD_VAR 0 1
47521: PPUSH
47522: CALL_OW 65
// end ; end ;
47526: GO 47452
// end ;
47528: PPOPN 1
47530: END
// every 0 0$1 + 0 0$0.1 do var i , temp_unit , temp_list , temp_list_2 ; var cargo_bay , special_player_units , scout , crate_hex ;
47531: GO 47533
47533: DISABLE
47534: LD_INT 0
47536: PPUSH
47537: PPUSH
47538: PPUSH
47539: PPUSH
47540: PPUSH
47541: PPUSH
47542: PPUSH
47543: PPUSH
// begin special_player_units = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ;
47544: LD_ADDR_VAR 0 6
47548: PUSH
47549: LD_EXP 10
47553: PUSH
47554: LD_EXP 11
47558: PUSH
47559: LD_EXP 12
47563: PUSH
47564: LD_EXP 13
47568: PUSH
47569: LD_EXP 14
47573: PUSH
47574: LD_EXP 15
47578: PUSH
47579: LD_EXP 16
47583: PUSH
47584: LD_EXP 17
47588: PUSH
47589: LD_EXP 18
47593: PUSH
47594: LD_EXP 19
47598: PUSH
47599: LD_EXP 20
47603: PUSH
47604: LD_EXP 21
47608: PUSH
47609: LD_EXP 22
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: ST_TO_ADDR
// InitUc ;
47629: CALL_OW 18
// InitVc ;
47633: CALL_OW 20
// uc_side = russians ;
47637: LD_ADDR_OWVAR 20
47641: PUSH
47642: LD_EXP 4
47646: ST_TO_ADDR
// uc_nation = nation_russian ;
47647: LD_ADDR_OWVAR 21
47651: PUSH
47652: LD_INT 3
47654: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
47655: LD_ADDR_OWVAR 37
47659: PUSH
47660: LD_INT 22
47662: ST_TO_ADDR
// vc_engine = engine_siberite ;
47663: LD_ADDR_OWVAR 39
47667: PUSH
47668: LD_INT 3
47670: ST_TO_ADDR
// vc_control = control_computer ;
47671: LD_ADDR_OWVAR 38
47675: PUSH
47676: LD_INT 3
47678: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
47679: LD_ADDR_OWVAR 40
47683: PUSH
47684: LD_INT 51
47686: ST_TO_ADDR
// cargo_bay = CreateVehicle ;
47687: LD_ADDR_VAR 0 5
47691: PUSH
47692: CALL_OW 45
47696: ST_TO_ADDR
// SetCargo ( cargo_bay , mat_cans , Rand ( 2 , 5 ) * 10 ) ;
47697: LD_VAR 0 5
47701: PPUSH
47702: LD_INT 1
47704: PPUSH
47705: LD_INT 2
47707: PPUSH
47708: LD_INT 5
47710: PPUSH
47711: CALL_OW 12
47715: PUSH
47716: LD_INT 10
47718: MUL
47719: PPUSH
47720: CALL_OW 290
// SetDir ( cargo_bay , 0 ) ;
47724: LD_VAR 0 5
47728: PPUSH
47729: LD_INT 0
47731: PPUSH
47732: CALL_OW 233
// PlaceUnitXY ( cargo_bay , 103 , 116 , false ) ;
47736: LD_VAR 0 5
47740: PPUSH
47741: LD_INT 103
47743: PPUSH
47744: LD_INT 116
47746: PPUSH
47747: LD_INT 0
47749: PPUSH
47750: CALL_OW 48
// crate_hex = RandHexXYR ( 122 , 93 , 4 , false ) ;
47754: LD_ADDR_VAR 0 8
47758: PUSH
47759: LD_INT 122
47761: PPUSH
47762: LD_INT 93
47764: PPUSH
47765: LD_INT 4
47767: PPUSH
47768: LD_INT 0
47770: PPUSH
47771: CALL_OW 17
47775: ST_TO_ADDR
// CreateCratesXY ( Rand ( 3 , 5 ) , crate_hex [ 1 ] , crate_hex [ 2 ] , false ) ;
47776: LD_INT 3
47778: PPUSH
47779: LD_INT 5
47781: PPUSH
47782: CALL_OW 12
47786: PPUSH
47787: LD_VAR 0 8
47791: PUSH
47792: LD_INT 1
47794: ARRAY
47795: PPUSH
47796: LD_VAR 0 8
47800: PUSH
47801: LD_INT 2
47803: ARRAY
47804: PPUSH
47805: LD_INT 0
47807: PPUSH
47808: CALL_OW 54
// ComMoveXY ( cargo_bay , 122 , 93 ) ;
47812: LD_VAR 0 5
47816: PPUSH
47817: LD_INT 122
47819: PPUSH
47820: LD_INT 93
47822: PPUSH
47823: CALL_OW 111
// AddComStand ( cargo_bay ) ;
47827: LD_VAR 0 5
47831: PPUSH
47832: CALL_OW 225
// i = Rand ( 1 1$30 , 2 2$0 ) ;
47836: LD_ADDR_VAR 0 1
47840: PUSH
47841: LD_INT 3150
47843: PPUSH
47844: LD_INT 4200
47846: PPUSH
47847: CALL_OW 12
47851: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
47852: LD_INT 18
47854: PPUSH
47855: CALL_OW 67
// i = i - 0 0$0.5 ;
47859: LD_ADDR_VAR 0 1
47863: PUSH
47864: LD_VAR 0 1
47868: PUSH
47869: LD_INT 18
47871: MINUS
47872: ST_TO_ADDR
// until i <= 0 0$0 or See ( you , cargo_bay ) ;
47873: LD_VAR 0 1
47877: PUSH
47878: LD_INT 0
47880: LESSEQUAL
47881: PUSH
47882: LD_EXP 3
47886: PPUSH
47887: LD_VAR 0 5
47891: PPUSH
47892: CALL_OW 292
47896: OR
47897: IFFALSE 47852
// while not See ( you , cargo_bay ) do
47899: LD_EXP 3
47903: PPUSH
47904: LD_VAR 0 5
47908: PPUSH
47909: CALL_OW 292
47913: NOT
47914: IFFALSE 47986
// begin wait ( 0 0$0.5 ) ;
47916: LD_INT 18
47918: PPUSH
47919: CALL_OW 67
// temp_unit = NearestUnitToUnit ( FilterAllUnits ( [ f_side , you ] ) , cargo_bay ) ;
47923: LD_ADDR_VAR 0 2
47927: PUSH
47928: LD_INT 22
47930: PUSH
47931: LD_EXP 3
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PPUSH
47940: CALL_OW 69
47944: PPUSH
47945: LD_VAR 0 5
47949: PPUSH
47950: CALL_OW 74
47954: ST_TO_ADDR
// ComMoveXY ( cargo_bay , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
47955: LD_VAR 0 5
47959: PPUSH
47960: LD_VAR 0 2
47964: PPUSH
47965: CALL_OW 250
47969: PPUSH
47970: LD_VAR 0 2
47974: PPUSH
47975: CALL_OW 251
47979: PPUSH
47980: CALL_OW 111
// end ;
47984: GO 47899
// CenterOnUnits ( cargo_bay ) ;
47986: LD_VAR 0 5
47990: PPUSH
47991: CALL_OW 85
// DialogueOn ;
47995: CALL_OW 6
// if IsOk ( Oswald ) then
47999: LD_EXP 12
48003: PPUSH
48004: CALL_OW 302
48008: IFFALSE 48044
// begin if oswald_is_substitute then
48010: LD_EXP 81
48014: IFFALSE 48030
// Say ( Oswald , D2-Os_alt-1 ) else
48016: LD_EXP 12
48020: PPUSH
48021: LD_STRING D2-Os_alt-1
48023: PPUSH
48024: CALL_OW 88
48028: GO 48042
// Say ( Oswald , D2-Os-1 ) ;
48030: LD_EXP 12
48034: PPUSH
48035: LD_STRING D2-Os-1
48037: PPUSH
48038: CALL_OW 88
// end else
48042: GO 48276
// if IsOk ( Olaf ) then
48044: LD_EXP 17
48048: PPUSH
48049: CALL_OW 302
48053: IFFALSE 48069
// Say ( Olaf , D2-Olaf-1 ) else
48055: LD_EXP 17
48059: PPUSH
48060: LD_STRING D2-Olaf-1
48062: PPUSH
48063: CALL_OW 88
48067: GO 48276
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ special_player_units ) ;
48069: LD_ADDR_VAR 0 3
48073: PUSH
48074: LD_INT 22
48076: PUSH
48077: LD_EXP 3
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 21
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PPUSH
48100: CALL_OW 69
48104: PUSH
48105: LD_EXP 3
48109: PPUSH
48110: CALL 44447 0 1
48114: PUSH
48115: LD_VAR 0 6
48119: ADD
48120: DIFF
48121: ST_TO_ADDR
// if temp_list > 0 then
48122: LD_VAR 0 3
48126: PUSH
48127: LD_INT 0
48129: GREATER
48130: IFFALSE 48148
// temp_unit = temp_list [ 1 ] else
48132: LD_ADDR_VAR 0 2
48136: PUSH
48137: LD_VAR 0 3
48141: PUSH
48142: LD_INT 1
48144: ARRAY
48145: ST_TO_ADDR
48146: GO 48235
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ Heike ) ;
48148: LD_ADDR_VAR 0 3
48152: PUSH
48153: LD_INT 22
48155: PUSH
48156: LD_EXP 3
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 21
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PPUSH
48179: CALL_OW 69
48183: PUSH
48184: LD_EXP 3
48188: PPUSH
48189: CALL 44447 0 1
48193: PUSH
48194: LD_EXP 10
48198: ADD
48199: DIFF
48200: ST_TO_ADDR
// if temp_list > 0 then
48201: LD_VAR 0 3
48205: PUSH
48206: LD_INT 0
48208: GREATER
48209: IFFALSE 48227
// temp_unit = temp_list [ 1 ] else
48211: LD_ADDR_VAR 0 2
48215: PUSH
48216: LD_VAR 0 3
48220: PUSH
48221: LD_INT 1
48223: ARRAY
48224: ST_TO_ADDR
48225: GO 48235
// temp_unit = 0 ;
48227: LD_ADDR_VAR 0 2
48231: PUSH
48232: LD_INT 0
48234: ST_TO_ADDR
// end ; if GetSex ( temp_unit ) = sex_male then
48235: LD_VAR 0 2
48239: PPUSH
48240: CALL_OW 258
48244: PUSH
48245: LD_INT 1
48247: EQUAL
48248: IFFALSE 48264
// Say ( temp_unit , D2-SomeM-1 ) else
48250: LD_VAR 0 2
48254: PPUSH
48255: LD_STRING D2-SomeM-1
48257: PPUSH
48258: CALL_OW 88
48262: GO 48276
// Say ( temp_unit , D2-SomeF-1 ) ;
48264: LD_VAR 0 2
48268: PPUSH
48269: LD_STRING D2-SomeF-1
48271: PPUSH
48272: CALL_OW 88
// end ; Say ( Heike , D2-H-1 ) ;
48276: LD_EXP 10
48280: PPUSH
48281: LD_STRING D2-H-1
48283: PPUSH
48284: CALL_OW 88
// if IsOk ( Kowalski ) then
48288: LD_EXP 14
48292: PPUSH
48293: CALL_OW 302
48297: IFFALSE 48325
// begin Say ( Kowalski , D2-Ko-a-1 ) ;
48299: LD_EXP 14
48303: PPUSH
48304: LD_STRING D2-Ko-a-1
48306: PPUSH
48307: CALL_OW 88
// Say ( Heike , D2-H-a-2 ) ;
48311: LD_EXP 10
48315: PPUSH
48316: LD_STRING D2-H-a-2
48318: PPUSH
48319: CALL_OW 88
// end else
48323: GO 48337
// begin Say ( Heike , D2-H-b-2 ) ;
48325: LD_EXP 10
48329: PPUSH
48330: LD_STRING D2-H-b-2
48332: PPUSH
48333: CALL_OW 88
// end ; dwait ( 0 0$0.2 ) ;
48337: LD_INT 7
48339: PPUSH
48340: CALL_OW 68
// temp_list_2 = FilterAllUnits ( [ f_side , you ] ) diff ( GetApes ( you ) ^ Heike ) ;
48344: LD_ADDR_VAR 0 4
48348: PUSH
48349: LD_INT 22
48351: PUSH
48352: LD_EXP 3
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PPUSH
48361: CALL_OW 69
48365: PUSH
48366: LD_EXP 3
48370: PPUSH
48371: CALL 44447 0 1
48375: PUSH
48376: LD_EXP 10
48380: ADD
48381: DIFF
48382: ST_TO_ADDR
// if UnitFilter ( temp_list_2 , [ f_class , class_soldier ] ) = 0 then
48383: LD_VAR 0 4
48387: PPUSH
48388: LD_INT 25
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PPUSH
48398: CALL_OW 72
48402: PUSH
48403: LD_INT 0
48405: EQUAL
48406: IFFALSE 48421
// temp_list = [ sel_change_class ] else
48408: LD_ADDR_VAR 0 3
48412: PUSH
48413: LD_INT -5
48415: PUSH
48416: EMPTY
48417: LIST
48418: ST_TO_ADDR
48419: GO 48432
// temp_list = [ sel_dont_change_class ] ;
48421: LD_ADDR_VAR 0 3
48425: PUSH
48426: LD_INT -6
48428: PUSH
48429: EMPTY
48430: LIST
48431: ST_TO_ADDR
// temp_list = CharacterSelection (  , 1 , 1 , [ sel_dont_change_class , sel_not_hired , sel_not_changeable , Heike , sel_changeable ] ^ temp_list ^ temp_list_2 , [ [ class_soldier , 1 ] ] ) ;
48432: LD_ADDR_VAR 0 3
48436: PUSH
48437: LD_STRING 
48439: PPUSH
48440: LD_INT 1
48442: PPUSH
48443: LD_INT 1
48445: PPUSH
48446: LD_INT -6
48448: PUSH
48449: LD_INT -2
48451: PUSH
48452: LD_INT -4
48454: PUSH
48455: LD_EXP 10
48459: PUSH
48460: LD_INT -3
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: PUSH
48470: LD_VAR 0 3
48474: ADD
48475: PUSH
48476: LD_VAR 0 4
48480: ADD
48481: PPUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: EMPTY
48493: LIST
48494: PPUSH
48495: CALL_OW 42
48499: ST_TO_ADDR
// temp_unit = temp_list [ 1 ] ;
48500: LD_ADDR_VAR 0 2
48504: PUSH
48505: LD_VAR 0 3
48509: PUSH
48510: LD_INT 1
48512: ARRAY
48513: ST_TO_ADDR
// scout = temp_unit ;
48514: LD_ADDR_VAR 0 7
48518: PUSH
48519: LD_VAR 0 2
48523: ST_TO_ADDR
// dwait ( 0 0$0.2 ) ;
48524: LD_INT 7
48526: PPUSH
48527: CALL_OW 68
// case temp_unit of Sonya :
48531: LD_VAR 0 2
48535: PUSH
48536: LD_EXP 11
48540: DOUBLE
48541: EQUAL
48542: IFTRUE 48546
48544: GO 48561
48546: POP
// Say ( temp_unit , D2-So-1 ) ; Oswald :
48547: LD_VAR 0 2
48551: PPUSH
48552: LD_STRING D2-So-1
48554: PPUSH
48555: CALL_OW 88
48559: GO 48930
48561: LD_EXP 12
48565: DOUBLE
48566: EQUAL
48567: IFTRUE 48571
48569: GO 48606
48571: POP
// begin if oswald_is_substitute then
48572: LD_EXP 81
48576: IFFALSE 48592
// Say ( temp_unit , D2-Os_alt-2 ) else
48578: LD_VAR 0 2
48582: PPUSH
48583: LD_STRING D2-Os_alt-2
48585: PPUSH
48586: CALL_OW 88
48590: GO 48604
// Say ( temp_unit , D2-Os-2 ) ;
48592: LD_VAR 0 2
48596: PPUSH
48597: LD_STRING D2-Os-2
48599: PPUSH
48600: CALL_OW 88
// end ; Ralph :
48604: GO 48930
48606: LD_EXP 13
48610: DOUBLE
48611: EQUAL
48612: IFTRUE 48616
48614: GO 48631
48616: POP
// Say ( temp_unit , D2-Ra-1 ) ; Kowalski :
48617: LD_VAR 0 2
48621: PPUSH
48622: LD_STRING D2-Ra-1
48624: PPUSH
48625: CALL_OW 88
48629: GO 48930
48631: LD_EXP 14
48635: DOUBLE
48636: EQUAL
48637: IFTRUE 48641
48639: GO 48656
48641: POP
// Say ( temp_unit , D2-Ko-1 ) ; Evelyn :
48642: LD_VAR 0 2
48646: PPUSH
48647: LD_STRING D2-Ko-1
48649: PPUSH
48650: CALL_OW 88
48654: GO 48930
48656: LD_EXP 15
48660: DOUBLE
48661: EQUAL
48662: IFTRUE 48666
48664: GO 48681
48666: POP
// Say ( temp_unit , D2-Ev-1 ) ; Suze :
48667: LD_VAR 0 2
48671: PPUSH
48672: LD_STRING D2-Ev-1
48674: PPUSH
48675: CALL_OW 88
48679: GO 48930
48681: LD_EXP 16
48685: DOUBLE
48686: EQUAL
48687: IFTRUE 48691
48689: GO 48706
48691: POP
// Say ( temp_unit , D2-Su-1 ) ; Olaf :
48692: LD_VAR 0 2
48696: PPUSH
48697: LD_STRING D2-Su-1
48699: PPUSH
48700: CALL_OW 88
48704: GO 48930
48706: LD_EXP 17
48710: DOUBLE
48711: EQUAL
48712: IFTRUE 48716
48714: GO 48731
48716: POP
// Say ( temp_unit , D2-Olaf-2 ) ; Kurt :
48717: LD_VAR 0 2
48721: PPUSH
48722: LD_STRING D2-Olaf-2
48724: PPUSH
48725: CALL_OW 88
48729: GO 48930
48731: LD_EXP 18
48735: DOUBLE
48736: EQUAL
48737: IFTRUE 48741
48739: GO 48776
48741: POP
// begin if kurt_is_substitute then
48742: LD_EXP 82
48746: IFFALSE 48762
// Say ( temp_unit , D2-Ku_alt-1 ) else
48748: LD_VAR 0 2
48752: PPUSH
48753: LD_STRING D2-Ku_alt-1
48755: PPUSH
48756: CALL_OW 88
48760: GO 48774
// Say ( temp_unit , D2-Ku-1 ) ;
48762: LD_VAR 0 2
48766: PPUSH
48767: LD_STRING D2-Ku-1
48769: PPUSH
48770: CALL_OW 88
// end ; Dwayne :
48774: GO 48930
48776: LD_EXP 19
48780: DOUBLE
48781: EQUAL
48782: IFTRUE 48786
48784: GO 48801
48786: POP
// Say ( temp_unit , D2-Dw-1 ) ; MarkB :
48787: LD_VAR 0 2
48791: PPUSH
48792: LD_STRING D2-Dw-1
48794: PPUSH
48795: CALL_OW 88
48799: GO 48930
48801: LD_EXP 20
48805: DOUBLE
48806: EQUAL
48807: IFTRUE 48811
48809: GO 48826
48811: POP
// Say ( temp_unit , D2-Ma-1 ) ; Aviradze :
48812: LD_VAR 0 2
48816: PPUSH
48817: LD_STRING D2-Ma-1
48819: PPUSH
48820: CALL_OW 88
48824: GO 48930
48826: LD_EXP 21
48830: DOUBLE
48831: EQUAL
48832: IFTRUE 48836
48834: GO 48863
48836: POP
// begin Say ( temp_unit , D2-Av-1 ) ;
48837: LD_VAR 0 2
48841: PPUSH
48842: LD_STRING D2-Av-1
48844: PPUSH
48845: CALL_OW 88
// Say ( Heike , D2-H-3 ) ;
48849: LD_EXP 10
48853: PPUSH
48854: LD_STRING D2-H-3
48856: PPUSH
48857: CALL_OW 88
// end ; Swansson :
48861: GO 48930
48863: LD_EXP 22
48867: DOUBLE
48868: EQUAL
48869: IFTRUE 48873
48871: GO 48888
48873: POP
// Say ( temp_unit , D2-Sw-1 ) ; else
48874: LD_VAR 0 2
48878: PPUSH
48879: LD_STRING D2-Sw-1
48881: PPUSH
48882: CALL_OW 88
48886: GO 48930
48888: POP
// begin if GetSex ( temp_unit ) = sex_male then
48889: LD_VAR 0 2
48893: PPUSH
48894: CALL_OW 258
48898: PUSH
48899: LD_INT 1
48901: EQUAL
48902: IFFALSE 48918
// Say ( temp_unit , D2-SomeM-2 ) else
48904: LD_VAR 0 2
48908: PPUSH
48909: LD_STRING D2-SomeM-2
48911: PPUSH
48912: CALL_OW 88
48916: GO 48930
// Say ( temp_unit , D2-SomeF-2 ) ;
48918: LD_VAR 0 2
48922: PPUSH
48923: LD_STRING D2-SomeF-2
48925: PPUSH
48926: CALL_OW 88
// end ; end ; DialogueOff ;
48930: CALL_OW 7
// SetSide ( scout , scout_side ) ;
48934: LD_VAR 0 7
48938: PPUSH
48939: LD_EXP 8
48943: PPUSH
48944: CALL_OW 235
// repeat wait ( 0 0$0.7 ) ;
48948: LD_INT 24
48950: PPUSH
48951: CALL_OW 67
// if IsPlaced ( scout ) then
48955: LD_VAR 0 7
48959: PPUSH
48960: CALL_OW 305
48964: IFFALSE 49069
// case GetType ( IsInUnit ( scout ) ) of unit_building :
48966: LD_VAR 0 7
48970: PPUSH
48971: CALL_OW 310
48975: PPUSH
48976: CALL_OW 247
48980: PUSH
48981: LD_INT 3
48983: DOUBLE
48984: EQUAL
48985: IFTRUE 48989
48987: GO 49001
48989: POP
// ComExitBuilding ( scout ) ; unit_vehicle :
48990: LD_VAR 0 7
48994: PPUSH
48995: CALL_OW 122
48999: GO 49069
49001: LD_INT 2
49003: DOUBLE
49004: EQUAL
49005: IFTRUE 49009
49007: GO 49021
49009: POP
// ComExitVehicle ( scout ) ; else
49010: LD_VAR 0 7
49014: PPUSH
49015: CALL_OW 121
49019: GO 49069
49021: POP
// begin if GetDistUnitXY ( scout , 143 , 117 ) > 1 then
49022: LD_VAR 0 7
49026: PPUSH
49027: LD_INT 143
49029: PPUSH
49030: LD_INT 117
49032: PPUSH
49033: CALL_OW 297
49037: PUSH
49038: LD_INT 1
49040: GREATER
49041: IFFALSE 49060
// ComMoveXY ( scout , 143 , 117 ) else
49043: LD_VAR 0 7
49047: PPUSH
49048: LD_INT 143
49050: PPUSH
49051: LD_INT 117
49053: PPUSH
49054: CALL_OW 111
49058: GO 49069
// RemoveUnit ( scout ) ;
49060: LD_VAR 0 7
49064: PPUSH
49065: CALL_OW 64
// end ; end ; if IsPlaced ( cargo_bay ) then
49069: LD_VAR 0 5
49073: PPUSH
49074: CALL_OW 305
49078: IFFALSE 49175
// if GetResourceAmountXY ( crate_hex [ 1 ] , crate_hex [ 2 ] ) > 0 then
49080: LD_VAR 0 8
49084: PUSH
49085: LD_INT 1
49087: ARRAY
49088: PPUSH
49089: LD_VAR 0 8
49093: PUSH
49094: LD_INT 2
49096: ARRAY
49097: PPUSH
49098: CALL_OW 284
49102: PUSH
49103: LD_INT 0
49105: GREATER
49106: IFFALSE 49137
// ComGet ( cargo_bay , crate_hex [ 1 ] , crate_hex [ 2 ] ) else
49108: LD_VAR 0 5
49112: PPUSH
49113: LD_VAR 0 8
49117: PUSH
49118: LD_INT 1
49120: ARRAY
49121: PPUSH
49122: LD_VAR 0 8
49126: PUSH
49127: LD_INT 2
49129: ARRAY
49130: PPUSH
49131: CALL_OW 160
49135: GO 49175
// if not IsInArea ( cargo_bay , ru_enter_area ) then
49137: LD_VAR 0 5
49141: PPUSH
49142: LD_INT 10
49144: PPUSH
49145: CALL_OW 308
49149: NOT
49150: IFFALSE 49166
// ComMoveToArea ( cargo_bay , ru_enter_area ) else
49152: LD_VAR 0 5
49156: PPUSH
49157: LD_INT 10
49159: PPUSH
49160: CALL_OW 113
49164: GO 49175
// DestroyUnit ( cargo_bay ) ;
49166: LD_VAR 0 5
49170: PPUSH
49171: CALL_OW 65
// until not IsPlaced ( scout ) and not IsPlaced ( cargo_bay ) ;
49175: LD_VAR 0 7
49179: PPUSH
49180: CALL_OW 305
49184: NOT
49185: PUSH
49186: LD_VAR 0 5
49190: PPUSH
49191: CALL_OW 305
49195: NOT
49196: AND
49197: IFFALSE 48948
// wait ( Rand ( 5 5$0 , 6 6$0 ) ) ;
49199: LD_INT 10500
49201: PPUSH
49202: LD_INT 12600
49204: PPUSH
49205: CALL_OW 12
49209: PPUSH
49210: CALL_OW 67
// SetDir ( scout , 5 ) ;
49214: LD_VAR 0 7
49218: PPUSH
49219: LD_INT 5
49221: PPUSH
49222: CALL_OW 233
// i = 1 ;
49226: LD_ADDR_VAR 0 1
49230: PUSH
49231: LD_INT 1
49233: ST_TO_ADDR
// while not IsPlaced ( scout ) do
49234: LD_VAR 0 7
49238: PPUSH
49239: CALL_OW 305
49243: NOT
49244: IFFALSE 49292
// begin PlaceUnitXYR ( scout , 143 , 117 , i , false ) ;
49246: LD_VAR 0 7
49250: PPUSH
49251: LD_INT 143
49253: PPUSH
49254: LD_INT 117
49256: PPUSH
49257: LD_VAR 0 1
49261: PPUSH
49262: LD_INT 0
49264: PPUSH
49265: CALL_OW 50
// i = i + 1 ;
49269: LD_ADDR_VAR 0 1
49273: PUSH
49274: LD_VAR 0 1
49278: PUSH
49279: LD_INT 1
49281: PLUS
49282: ST_TO_ADDR
// wait ( 0 0$2 ) ;
49283: LD_INT 70
49285: PPUSH
49286: CALL_OW 67
// end ;
49290: GO 49234
// while not See ( you , scout ) do
49292: LD_EXP 3
49296: PPUSH
49297: LD_VAR 0 7
49301: PPUSH
49302: CALL_OW 292
49306: NOT
49307: IFFALSE 49379
// begin wait ( 0 0$1 ) ;
49309: LD_INT 35
49311: PPUSH
49312: CALL_OW 67
// temp_unit = NearestUnitToUnit ( FilterAllUnits ( [ f_side , you ] ) , scout ) ;
49316: LD_ADDR_VAR 0 2
49320: PUSH
49321: LD_INT 22
49323: PUSH
49324: LD_EXP 3
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PPUSH
49333: CALL_OW 69
49337: PPUSH
49338: LD_VAR 0 7
49342: PPUSH
49343: CALL_OW 74
49347: ST_TO_ADDR
// ComMoveXY ( scout , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
49348: LD_VAR 0 7
49352: PPUSH
49353: LD_VAR 0 2
49357: PPUSH
49358: CALL_OW 250
49362: PPUSH
49363: LD_VAR 0 2
49367: PPUSH
49368: CALL_OW 251
49372: PPUSH
49373: CALL_OW 111
// end ;
49377: GO 49292
// CenterOnUnits ( scout ) ;
49379: LD_VAR 0 7
49383: PPUSH
49384: CALL_OW 85
// SetSide ( scout , you ) ;
49388: LD_VAR 0 7
49392: PPUSH
49393: LD_EXP 3
49397: PPUSH
49398: CALL_OW 235
// ComStop ( scout ) ;
49402: LD_VAR 0 7
49406: PPUSH
49407: CALL_OW 141
// DialogueOn ;
49411: CALL_OW 6
// Say ( Heike , D3-H-1 ) ;
49415: LD_EXP 10
49419: PPUSH
49420: LD_STRING D3-H-1
49422: PPUSH
49423: CALL_OW 88
// temp_unit = scout ;
49427: LD_ADDR_VAR 0 2
49431: PUSH
49432: LD_VAR 0 7
49436: ST_TO_ADDR
// case temp_unit of Sonya :
49437: LD_VAR 0 2
49441: PUSH
49442: LD_EXP 11
49446: DOUBLE
49447: EQUAL
49448: IFTRUE 49452
49450: GO 49467
49452: POP
// Say ( temp_unit , D3-So-1 ) ; Oswald :
49453: LD_VAR 0 2
49457: PPUSH
49458: LD_STRING D3-So-1
49460: PPUSH
49461: CALL_OW 88
49465: GO 49897
49467: LD_EXP 12
49471: DOUBLE
49472: EQUAL
49473: IFTRUE 49477
49475: GO 49512
49477: POP
// begin if oswald_is_substitute then
49478: LD_EXP 81
49482: IFFALSE 49498
// Say ( temp_unit , D3-Os_alt-1 ) else
49484: LD_VAR 0 2
49488: PPUSH
49489: LD_STRING D3-Os_alt-1
49491: PPUSH
49492: CALL_OW 88
49496: GO 49510
// Say ( temp_unit , D3-Os-1 ) ;
49498: LD_VAR 0 2
49502: PPUSH
49503: LD_STRING D3-Os-1
49505: PPUSH
49506: CALL_OW 88
// end ; Ralph :
49510: GO 49897
49512: LD_EXP 13
49516: DOUBLE
49517: EQUAL
49518: IFTRUE 49522
49520: GO 49586
49522: POP
// begin Say ( temp_unit , D3-Ra-1 ) ;
49523: LD_VAR 0 2
49527: PPUSH
49528: LD_STRING D3-Ra-1
49530: PPUSH
49531: CALL_OW 88
// if IsOk ( Sonya ) then
49535: LD_EXP 11
49539: PPUSH
49540: CALL_OW 302
49544: IFFALSE 49560
// Say ( Sonya , D3-So-2a ) else
49546: LD_EXP 11
49550: PPUSH
49551: LD_STRING D3-So-2a
49553: PPUSH
49554: CALL_OW 88
49558: GO 49572
// Say ( Heike , D3-H-2a ) ;
49560: LD_EXP 10
49564: PPUSH
49565: LD_STRING D3-H-2a
49567: PPUSH
49568: CALL_OW 88
// Say ( Ralph , D3-Ra-2 ) ;
49572: LD_EXP 13
49576: PPUSH
49577: LD_STRING D3-Ra-2
49579: PPUSH
49580: CALL_OW 88
// end ; Kowalski :
49584: GO 49897
49586: LD_EXP 14
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49596
49594: GO 49611
49596: POP
// Say ( temp_unit , D3-Ko-1 ) ; Evelyn :
49597: LD_VAR 0 2
49601: PPUSH
49602: LD_STRING D3-Ko-1
49604: PPUSH
49605: CALL_OW 88
49609: GO 49897
49611: LD_EXP 15
49615: DOUBLE
49616: EQUAL
49617: IFTRUE 49621
49619: GO 49636
49621: POP
// Say ( temp_unit , D3-Ev-1 ) ; Suze :
49622: LD_VAR 0 2
49626: PPUSH
49627: LD_STRING D3-Ev-1
49629: PPUSH
49630: CALL_OW 88
49634: GO 49897
49636: LD_EXP 16
49640: DOUBLE
49641: EQUAL
49642: IFTRUE 49646
49644: GO 49661
49646: POP
// Say ( temp_unit , D3-Su-1 ) ; Olaf :
49647: LD_VAR 0 2
49651: PPUSH
49652: LD_STRING D3-Su-1
49654: PPUSH
49655: CALL_OW 88
49659: GO 49897
49661: LD_EXP 17
49665: DOUBLE
49666: EQUAL
49667: IFTRUE 49671
49669: GO 49686
49671: POP
// Say ( temp_unit , D3-Olaf-1 ) ; Kurt :
49672: LD_VAR 0 2
49676: PPUSH
49677: LD_STRING D3-Olaf-1
49679: PPUSH
49680: CALL_OW 88
49684: GO 49897
49686: LD_EXP 18
49690: DOUBLE
49691: EQUAL
49692: IFTRUE 49696
49694: GO 49731
49696: POP
// begin if kurt_is_substitute then
49697: LD_EXP 82
49701: IFFALSE 49717
// Say ( temp_unit , D3-Ku_alt-1 ) else
49703: LD_VAR 0 2
49707: PPUSH
49708: LD_STRING D3-Ku_alt-1
49710: PPUSH
49711: CALL_OW 88
49715: GO 49729
// Say ( temp_unit , D3-Ku-1 ) ;
49717: LD_VAR 0 2
49721: PPUSH
49722: LD_STRING D3-Ku-1
49724: PPUSH
49725: CALL_OW 88
// end ; Dwayne :
49729: GO 49897
49731: LD_EXP 19
49735: DOUBLE
49736: EQUAL
49737: IFTRUE 49741
49739: GO 49756
49741: POP
// Say ( temp_unit , D3-Dw-1 ) ; MarkB :
49742: LD_VAR 0 2
49746: PPUSH
49747: LD_STRING D3-Dw-1
49749: PPUSH
49750: CALL_OW 88
49754: GO 49897
49756: LD_EXP 20
49760: DOUBLE
49761: EQUAL
49762: IFTRUE 49766
49764: GO 49781
49766: POP
// Say ( temp_unit , D3-Ma-1 ) ; Aviradze :
49767: LD_VAR 0 2
49771: PPUSH
49772: LD_STRING D3-Ma-1
49774: PPUSH
49775: CALL_OW 88
49779: GO 49897
49781: LD_EXP 21
49785: DOUBLE
49786: EQUAL
49787: IFTRUE 49791
49789: GO 49830
49791: POP
// begin Say ( temp_unit , D3-Av-1 ) ;
49792: LD_VAR 0 2
49796: PPUSH
49797: LD_STRING D3-Av-1
49799: PPUSH
49800: CALL_OW 88
// Say ( Heike , D3-H-2b ) ;
49804: LD_EXP 10
49808: PPUSH
49809: LD_STRING D3-H-2b
49811: PPUSH
49812: CALL_OW 88
// Say ( temp_unit , D3-Av-2 ) ;
49816: LD_VAR 0 2
49820: PPUSH
49821: LD_STRING D3-Av-2
49823: PPUSH
49824: CALL_OW 88
// end ; Swansson :
49828: GO 49897
49830: LD_EXP 22
49834: DOUBLE
49835: EQUAL
49836: IFTRUE 49840
49838: GO 49855
49840: POP
// Say ( temp_unit , D3-Sw-1 ) ; else
49841: LD_VAR 0 2
49845: PPUSH
49846: LD_STRING D3-Sw-1
49848: PPUSH
49849: CALL_OW 88
49853: GO 49897
49855: POP
// begin if GetSex ( temp_unit ) = sex_male then
49856: LD_VAR 0 2
49860: PPUSH
49861: CALL_OW 258
49865: PUSH
49866: LD_INT 1
49868: EQUAL
49869: IFFALSE 49885
// Say ( temp_unit , D3-SomeM-1 ) else
49871: LD_VAR 0 2
49875: PPUSH
49876: LD_STRING D3-SomeM-1
49878: PPUSH
49879: CALL_OW 88
49883: GO 49897
// Say ( temp_unit , D3-SomeF-1 ) ;
49885: LD_VAR 0 2
49889: PPUSH
49890: LD_STRING D3-SomeF-1
49892: PPUSH
49893: CALL_OW 88
// end ; end ; if SeeGreyArea ( you , Ru_base ) then
49897: LD_EXP 3
49901: PPUSH
49902: LD_INT 3
49904: PPUSH
49905: CALL_OW 452
49909: IFFALSE 49925
// begin Say ( Heike , D3-H-a-2 ) ;
49911: LD_EXP 10
49915: PPUSH
49916: LD_STRING D3-H-a-2
49918: PPUSH
49919: CALL_OW 88
// end else
49923: GO 49937
// begin Say ( Heike , D3-H-b-2 ) ;
49925: LD_EXP 10
49929: PPUSH
49930: LD_STRING D3-H-b-2
49932: PPUSH
49933: CALL_OW 88
// end ; case temp_unit of Sonya :
49937: LD_VAR 0 2
49941: PUSH
49942: LD_EXP 11
49946: DOUBLE
49947: EQUAL
49948: IFTRUE 49952
49950: GO 49967
49952: POP
// Say ( temp_unit , D3-So-2 ) ; Oswald :
49953: LD_VAR 0 2
49957: PPUSH
49958: LD_STRING D3-So-2
49960: PPUSH
49961: CALL_OW 88
49965: GO 50324
49967: LD_EXP 12
49971: DOUBLE
49972: EQUAL
49973: IFTRUE 49977
49975: GO 50012
49977: POP
// begin if oswald_is_substitute then
49978: LD_EXP 81
49982: IFFALSE 49998
// Say ( temp_unit , D3-Os_alt-2 ) else
49984: LD_VAR 0 2
49988: PPUSH
49989: LD_STRING D3-Os_alt-2
49991: PPUSH
49992: CALL_OW 88
49996: GO 50010
// Say ( temp_unit , D3-Os-2 ) ;
49998: LD_VAR 0 2
50002: PPUSH
50003: LD_STRING D3-Os-2
50005: PPUSH
50006: CALL_OW 88
// end ; Ralph :
50010: GO 50324
50012: LD_EXP 13
50016: DOUBLE
50017: EQUAL
50018: IFTRUE 50022
50020: GO 50037
50022: POP
// Say ( temp_unit , D3-Ra-3 ) ; Kowalski :
50023: LD_VAR 0 2
50027: PPUSH
50028: LD_STRING D3-Ra-3
50030: PPUSH
50031: CALL_OW 88
50035: GO 50324
50037: LD_EXP 14
50041: DOUBLE
50042: EQUAL
50043: IFTRUE 50047
50045: GO 50062
50047: POP
// Say ( temp_unit , D3-Ko-2 ) ; Evelyn :
50048: LD_VAR 0 2
50052: PPUSH
50053: LD_STRING D3-Ko-2
50055: PPUSH
50056: CALL_OW 88
50060: GO 50324
50062: LD_EXP 15
50066: DOUBLE
50067: EQUAL
50068: IFTRUE 50072
50070: GO 50087
50072: POP
// Say ( temp_unit , D3-Ev-2 ) ; Suze :
50073: LD_VAR 0 2
50077: PPUSH
50078: LD_STRING D3-Ev-2
50080: PPUSH
50081: CALL_OW 88
50085: GO 50324
50087: LD_EXP 16
50091: DOUBLE
50092: EQUAL
50093: IFTRUE 50097
50095: GO 50112
50097: POP
// Say ( temp_unit , D3-Su-2 ) ; Olaf :
50098: LD_VAR 0 2
50102: PPUSH
50103: LD_STRING D3-Su-2
50105: PPUSH
50106: CALL_OW 88
50110: GO 50324
50112: LD_EXP 17
50116: DOUBLE
50117: EQUAL
50118: IFTRUE 50122
50120: GO 50137
50122: POP
// Say ( temp_unit , D3-Olaf-2 ) ; Kurt :
50123: LD_VAR 0 2
50127: PPUSH
50128: LD_STRING D3-Olaf-2
50130: PPUSH
50131: CALL_OW 88
50135: GO 50324
50137: LD_EXP 18
50141: DOUBLE
50142: EQUAL
50143: IFTRUE 50147
50145: GO 50182
50147: POP
// begin if kurt_is_substitute then
50148: LD_EXP 82
50152: IFFALSE 50168
// Say ( temp_unit , D3-Ku_alt-2 ) else
50154: LD_VAR 0 2
50158: PPUSH
50159: LD_STRING D3-Ku_alt-2
50161: PPUSH
50162: CALL_OW 88
50166: GO 50180
// Say ( temp_unit , D3-Ku-2 ) ;
50168: LD_VAR 0 2
50172: PPUSH
50173: LD_STRING D3-Ku-2
50175: PPUSH
50176: CALL_OW 88
// end ; Dwayne :
50180: GO 50324
50182: LD_EXP 19
50186: DOUBLE
50187: EQUAL
50188: IFTRUE 50192
50190: GO 50207
50192: POP
// Say ( temp_unit , D3-Dw-2 ) ; MarkB :
50193: LD_VAR 0 2
50197: PPUSH
50198: LD_STRING D3-Dw-2
50200: PPUSH
50201: CALL_OW 88
50205: GO 50324
50207: LD_EXP 20
50211: DOUBLE
50212: EQUAL
50213: IFTRUE 50217
50215: GO 50232
50217: POP
// Say ( temp_unit , D3-Ma-2 ) ; Aviradze :
50218: LD_VAR 0 2
50222: PPUSH
50223: LD_STRING D3-Ma-2
50225: PPUSH
50226: CALL_OW 88
50230: GO 50324
50232: LD_EXP 21
50236: DOUBLE
50237: EQUAL
50238: IFTRUE 50242
50240: GO 50257
50242: POP
// Say ( temp_unit , D3-Av-3 ) ; Swansson :
50243: LD_VAR 0 2
50247: PPUSH
50248: LD_STRING D3-Av-3
50250: PPUSH
50251: CALL_OW 88
50255: GO 50324
50257: LD_EXP 22
50261: DOUBLE
50262: EQUAL
50263: IFTRUE 50267
50265: GO 50282
50267: POP
// Say ( temp_unit , D3-Sw-2 ) ; else
50268: LD_VAR 0 2
50272: PPUSH
50273: LD_STRING D3-Sw-2
50275: PPUSH
50276: CALL_OW 88
50280: GO 50324
50282: POP
// begin if GetSex ( temp_unit ) = sex_male then
50283: LD_VAR 0 2
50287: PPUSH
50288: CALL_OW 258
50292: PUSH
50293: LD_INT 1
50295: EQUAL
50296: IFFALSE 50312
// Say ( temp_unit , D3-SomeM-2 ) else
50298: LD_VAR 0 2
50302: PPUSH
50303: LD_STRING D3-SomeM-2
50305: PPUSH
50306: CALL_OW 88
50310: GO 50324
// Say ( temp_unit , D3-SomeF-2 ) ;
50312: LD_VAR 0 2
50316: PPUSH
50317: LD_STRING D3-SomeF-2
50319: PPUSH
50320: CALL_OW 88
// end ; end ; Say ( Heike , D3-H-3 ) ;
50324: LD_EXP 10
50328: PPUSH
50329: LD_STRING D3-H-3
50331: PPUSH
50332: CALL_OW 88
// temp_list = UnitFilter ( [ Sonya , Ralph , Kowalski , Suze , Olaf , Dwayne ] , [ f_ok ] ) ;
50336: LD_ADDR_VAR 0 3
50340: PUSH
50341: LD_EXP 11
50345: PUSH
50346: LD_EXP 13
50350: PUSH
50351: LD_EXP 14
50355: PUSH
50356: LD_EXP 16
50360: PUSH
50361: LD_EXP 17
50365: PUSH
50366: LD_EXP 19
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: PPUSH
50379: LD_INT 50
50381: PUSH
50382: EMPTY
50383: LIST
50384: PPUSH
50385: CALL_OW 72
50389: ST_TO_ADDR
// if temp_list > 0 then
50390: LD_VAR 0 3
50394: PUSH
50395: LD_INT 0
50397: GREATER
50398: IFFALSE 50629
// begin temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
50400: LD_ADDR_VAR 0 2
50404: PUSH
50405: LD_VAR 0 3
50409: PUSH
50410: LD_INT 1
50412: PPUSH
50413: LD_VAR 0 3
50417: PPUSH
50418: CALL_OW 12
50422: ARRAY
50423: ST_TO_ADDR
// case temp_unit of Sonya :
50424: LD_VAR 0 2
50428: PUSH
50429: LD_EXP 11
50433: DOUBLE
50434: EQUAL
50435: IFTRUE 50439
50437: GO 50454
50439: POP
// Say ( temp_unit , D3-So-3 ) ; Ralph :
50440: LD_VAR 0 2
50444: PPUSH
50445: LD_STRING D3-So-3
50447: PPUSH
50448: CALL_OW 88
50452: GO 50580
50454: LD_EXP 13
50458: DOUBLE
50459: EQUAL
50460: IFTRUE 50464
50462: GO 50479
50464: POP
// Say ( temp_unit , D3-Ra-4 ) ; Kowalski :
50465: LD_VAR 0 2
50469: PPUSH
50470: LD_STRING D3-Ra-4
50472: PPUSH
50473: CALL_OW 88
50477: GO 50580
50479: LD_EXP 14
50483: DOUBLE
50484: EQUAL
50485: IFTRUE 50489
50487: GO 50504
50489: POP
// Say ( temp_unit , D3-Ko-3 ) ; Suze :
50490: LD_VAR 0 2
50494: PPUSH
50495: LD_STRING D3-Ko-3
50497: PPUSH
50498: CALL_OW 88
50502: GO 50580
50504: LD_EXP 16
50508: DOUBLE
50509: EQUAL
50510: IFTRUE 50514
50512: GO 50529
50514: POP
// Say ( temp_unit , D3-Su-3 ) ; Olaf :
50515: LD_VAR 0 2
50519: PPUSH
50520: LD_STRING D3-Su-3
50522: PPUSH
50523: CALL_OW 88
50527: GO 50580
50529: LD_EXP 17
50533: DOUBLE
50534: EQUAL
50535: IFTRUE 50539
50537: GO 50554
50539: POP
// Say ( temp_unit , D3-Olaf-3 ) ; Dwayne :
50540: LD_VAR 0 2
50544: PPUSH
50545: LD_STRING D3-Olaf-3
50547: PPUSH
50548: CALL_OW 88
50552: GO 50580
50554: LD_EXP 19
50558: DOUBLE
50559: EQUAL
50560: IFTRUE 50564
50562: GO 50579
50564: POP
// Say ( temp_unit , D3-Dw-3 ) ; end ;
50565: LD_VAR 0 2
50569: PPUSH
50570: LD_STRING D3-Dw-3
50572: PPUSH
50573: CALL_OW 88
50577: GO 50580
50579: POP
// if temp_unit in [ Sonya , Olaf ] then
50580: LD_VAR 0 2
50584: PUSH
50585: LD_EXP 11
50589: PUSH
50590: LD_EXP 17
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: IN
50599: IFFALSE 50615
// Say ( Heike , D3-H-a-4 ) else
50601: LD_EXP 10
50605: PPUSH
50606: LD_STRING D3-H-a-4
50608: PPUSH
50609: CALL_OW 88
50613: GO 50627
// Say ( Heike , D3-H-b-4 ) ;
50615: LD_EXP 10
50619: PPUSH
50620: LD_STRING D3-H-b-4
50622: PPUSH
50623: CALL_OW 88
// end else
50627: GO 50641
// begin Say ( Heike , D3-H-c-4 ) ;
50629: LD_EXP 10
50633: PPUSH
50634: LD_STRING D3-H-c-4
50636: PPUSH
50637: CALL_OW 88
// end ; Say ( Heike , D3-H-5 ) ;
50641: LD_EXP 10
50645: PPUSH
50646: LD_STRING D3-H-5
50648: PPUSH
50649: CALL_OW 88
// if yashin_alive then
50653: LD_EXP 86
50657: IFFALSE 51058
// begin case temp_unit of Sonya :
50659: LD_VAR 0 2
50663: PUSH
50664: LD_EXP 11
50668: DOUBLE
50669: EQUAL
50670: IFTRUE 50674
50672: GO 50689
50674: POP
// Say ( temp_unit , D3-So-a-4 ) ; Oswald :
50675: LD_VAR 0 2
50679: PPUSH
50680: LD_STRING D3-So-a-4
50682: PPUSH
50683: CALL_OW 88
50687: GO 51046
50689: LD_EXP 12
50693: DOUBLE
50694: EQUAL
50695: IFTRUE 50699
50697: GO 50734
50699: POP
// begin if oswald_is_substitute then
50700: LD_EXP 81
50704: IFFALSE 50720
// Say ( temp_unit , D3-Os_alt-a-3 ) else
50706: LD_VAR 0 2
50710: PPUSH
50711: LD_STRING D3-Os_alt-a-3
50713: PPUSH
50714: CALL_OW 88
50718: GO 50732
// Say ( temp_unit , D3-Os-a-3 ) ;
50720: LD_VAR 0 2
50724: PPUSH
50725: LD_STRING D3-Os-a-3
50727: PPUSH
50728: CALL_OW 88
// end ; Ralph :
50732: GO 51046
50734: LD_EXP 13
50738: DOUBLE
50739: EQUAL
50740: IFTRUE 50744
50742: GO 50759
50744: POP
// Say ( temp_unit , D3-Ra-a-5 ) ; Kowalski :
50745: LD_VAR 0 2
50749: PPUSH
50750: LD_STRING D3-Ra-a-5
50752: PPUSH
50753: CALL_OW 88
50757: GO 51046
50759: LD_EXP 14
50763: DOUBLE
50764: EQUAL
50765: IFTRUE 50769
50767: GO 50784
50769: POP
// Say ( temp_unit , D3-Ko-a-4 ) ; Evelyn :
50770: LD_VAR 0 2
50774: PPUSH
50775: LD_STRING D3-Ko-a-4
50777: PPUSH
50778: CALL_OW 88
50782: GO 51046
50784: LD_EXP 15
50788: DOUBLE
50789: EQUAL
50790: IFTRUE 50794
50792: GO 50809
50794: POP
// Say ( temp_unit , D3-Ev-a-3 ) ; Suze :
50795: LD_VAR 0 2
50799: PPUSH
50800: LD_STRING D3-Ev-a-3
50802: PPUSH
50803: CALL_OW 88
50807: GO 51046
50809: LD_EXP 16
50813: DOUBLE
50814: EQUAL
50815: IFTRUE 50819
50817: GO 50834
50819: POP
// Say ( temp_unit , D3-Su-a-4 ) ; Olaf :
50820: LD_VAR 0 2
50824: PPUSH
50825: LD_STRING D3-Su-a-4
50827: PPUSH
50828: CALL_OW 88
50832: GO 51046
50834: LD_EXP 17
50838: DOUBLE
50839: EQUAL
50840: IFTRUE 50844
50842: GO 50859
50844: POP
// Say ( temp_unit , D3-Olaf-a-4 ) ; Kurt :
50845: LD_VAR 0 2
50849: PPUSH
50850: LD_STRING D3-Olaf-a-4
50852: PPUSH
50853: CALL_OW 88
50857: GO 51046
50859: LD_EXP 18
50863: DOUBLE
50864: EQUAL
50865: IFTRUE 50869
50867: GO 50904
50869: POP
// begin if kurt_is_substitute then
50870: LD_EXP 82
50874: IFFALSE 50890
// Say ( temp_unit , D3-Ku_alt-a-3 ) else
50876: LD_VAR 0 2
50880: PPUSH
50881: LD_STRING D3-Ku_alt-a-3
50883: PPUSH
50884: CALL_OW 88
50888: GO 50902
// Say ( temp_unit , D3-Ku-a-3 ) ;
50890: LD_VAR 0 2
50894: PPUSH
50895: LD_STRING D3-Ku-a-3
50897: PPUSH
50898: CALL_OW 88
// end ; Dwayne :
50902: GO 51046
50904: LD_EXP 19
50908: DOUBLE
50909: EQUAL
50910: IFTRUE 50914
50912: GO 50929
50914: POP
// Say ( temp_unit , D3-Dw-a-4 ) ; MarkB :
50915: LD_VAR 0 2
50919: PPUSH
50920: LD_STRING D3-Dw-a-4
50922: PPUSH
50923: CALL_OW 88
50927: GO 51046
50929: LD_EXP 20
50933: DOUBLE
50934: EQUAL
50935: IFTRUE 50939
50937: GO 50954
50939: POP
// Say ( temp_unit , D3-Ma-a-3 ) ; Aviradze :
50940: LD_VAR 0 2
50944: PPUSH
50945: LD_STRING D3-Ma-a-3
50947: PPUSH
50948: CALL_OW 88
50952: GO 51046
50954: LD_EXP 21
50958: DOUBLE
50959: EQUAL
50960: IFTRUE 50964
50962: GO 50979
50964: POP
// Say ( temp_unit , D3-Av-a-4 ) ; Swansson :
50965: LD_VAR 0 2
50969: PPUSH
50970: LD_STRING D3-Av-a-4
50972: PPUSH
50973: CALL_OW 88
50977: GO 51046
50979: LD_EXP 22
50983: DOUBLE
50984: EQUAL
50985: IFTRUE 50989
50987: GO 51004
50989: POP
// Say ( temp_unit , D3-Sw-a-3 ) ; else
50990: LD_VAR 0 2
50994: PPUSH
50995: LD_STRING D3-Sw-a-3
50997: PPUSH
50998: CALL_OW 88
51002: GO 51046
51004: POP
// begin if GetSex ( temp_unit ) = sex_male then
51005: LD_VAR 0 2
51009: PPUSH
51010: CALL_OW 258
51014: PUSH
51015: LD_INT 1
51017: EQUAL
51018: IFFALSE 51034
// Say ( temp_unit , D3-SomeM-a-3 ) else
51020: LD_VAR 0 2
51024: PPUSH
51025: LD_STRING D3-SomeM-a-3
51027: PPUSH
51028: CALL_OW 88
51032: GO 51046
// Say ( temp_unit , D3-SomeF-a-3 ) ;
51034: LD_VAR 0 2
51038: PPUSH
51039: LD_STRING D3-SomeF-a-3
51041: PPUSH
51042: CALL_OW 88
// end ; end ; Say ( Heike , D3-H-a-6 ) ;
51046: LD_EXP 10
51050: PPUSH
51051: LD_STRING D3-H-a-6
51053: PPUSH
51054: CALL_OW 88
// end ; DialogueOff ;
51058: CALL_OW 7
// wait ( 0 0$0.2 ) ;
51062: LD_INT 7
51064: PPUSH
51065: CALL_OW 67
// ChangeMissionObjectives ( M2 ) ;
51069: LD_STRING M2
51071: PPUSH
51072: CALL_OW 337
// scout_event_over = true ;
51076: LD_ADDR_EXP 93
51080: PUSH
51081: LD_INT 1
51083: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = russians_allowed_to_attack_gensher_time + tick ;
51084: LD_ADDR_EXP 94
51088: PUSH
51089: LD_EXP 94
51093: PUSH
51094: LD_OWVAR 1
51098: PLUS
51099: ST_TO_ADDR
// end ;
51100: PPOPN 8
51102: END
// every 0 0$1 + 0 0$0.6 do var i ; var ignore_yellow_list , ignore_red_list ;
51103: GO 51105
51105: DISABLE
51106: LD_INT 0
51108: PPUSH
51109: PPUSH
51110: PPUSH
// begin ignore_yellow_list = [ ] ;
51111: LD_ADDR_VAR 0 2
51115: PUSH
51116: EMPTY
51117: ST_TO_ADDR
// ignore_red_list = [ ] ;
51118: LD_ADDR_VAR 0 3
51122: PUSH
51123: EMPTY
51124: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51125: LD_INT 35
51127: PPUSH
51128: CALL_OW 67
// if game_phase > 1 then
51132: LD_EXP 89
51136: PUSH
51137: LD_INT 1
51139: GREATER
51140: IFFALSE 51144
// exit ;
51142: GO 51524
// if ContactTime ( [ you_alt , russians ] ) >= 0 0$8 then
51144: LD_EXP 6
51148: PUSH
51149: LD_EXP 4
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PPUSH
51158: CALL_OW 462
51162: PUSH
51163: LD_INT 280
51165: GREATEREQUAL
51166: IFFALSE 51184
// begin ignore_yellow_list = [ ] ;
51168: LD_ADDR_VAR 0 2
51172: PUSH
51173: EMPTY
51174: ST_TO_ADDR
// ignore_red_list = [ ] ;
51175: LD_ADDR_VAR 0 3
51179: PUSH
51180: EMPTY
51181: ST_TO_ADDR
// continue ;
51182: GO 51125
// end ; for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_human ] ] ) do
51184: LD_ADDR_VAR 0 1
51188: PUSH
51189: LD_INT 22
51191: PUSH
51192: LD_EXP 6
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 21
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PPUSH
51215: CALL_OW 69
51219: PUSH
51220: FOR_IN
51221: IFFALSE 51344
// if GetLives ( i ) <= 250 then
51223: LD_VAR 0 1
51227: PPUSH
51228: CALL_OW 256
51232: PUSH
51233: LD_INT 250
51235: LESSEQUAL
51236: IFFALSE 51283
// begin if not i in ignore_red_list then
51238: LD_VAR 0 1
51242: PUSH
51243: LD_VAR 0 3
51247: IN
51248: NOT
51249: IFFALSE 51281
// begin russian_interference_points = russian_interference_points + 1 ;
51251: LD_ADDR_EXP 97
51255: PUSH
51256: LD_EXP 97
51260: PUSH
51261: LD_INT 1
51263: PLUS
51264: ST_TO_ADDR
// ignore_red_list = ignore_red_list ^ i ;
51265: LD_ADDR_VAR 0 3
51269: PUSH
51270: LD_VAR 0 3
51274: PUSH
51275: LD_VAR 0 1
51279: ADD
51280: ST_TO_ADDR
// end ; end else
51281: GO 51342
// if i in ai_heal_these_humans [ 2 ] then
51283: LD_VAR 0 1
51287: PUSH
51288: LD_EXP 44
51292: PUSH
51293: LD_INT 2
51295: ARRAY
51296: IN
51297: IFFALSE 51342
// begin if not i in ignore_yellow_list then
51299: LD_VAR 0 1
51303: PUSH
51304: LD_VAR 0 2
51308: IN
51309: NOT
51310: IFFALSE 51342
// begin russian_interference_points = russian_interference_points + 1 ;
51312: LD_ADDR_EXP 97
51316: PUSH
51317: LD_EXP 97
51321: PUSH
51322: LD_INT 1
51324: PLUS
51325: ST_TO_ADDR
// ignore_yellow_list = ignore_yellow_list ^ i ;
51326: LD_ADDR_VAR 0 2
51330: PUSH
51331: LD_VAR 0 2
51335: PUSH
51336: LD_VAR 0 1
51340: ADD
51341: ST_TO_ADDR
// end ; end ;
51342: GO 51220
51344: POP
51345: POP
// for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_building ] ] ) do
51346: LD_ADDR_VAR 0 1
51350: PUSH
51351: LD_INT 22
51353: PUSH
51354: LD_EXP 6
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 21
51365: PUSH
51366: LD_INT 3
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PPUSH
51377: CALL_OW 69
51381: PUSH
51382: FOR_IN
51383: IFFALSE 51518
// case GetLives ( i ) of 1 .. 250 :
51385: LD_VAR 0 1
51389: PPUSH
51390: CALL_OW 256
51394: PUSH
51395: LD_INT 1
51397: DOUBLE
51398: GREATEREQUAL
51399: IFFALSE 51407
51401: LD_INT 250
51403: DOUBLE
51404: LESSEQUAL
51405: IFTRUE 51409
51407: GO 51455
51409: POP
// begin if not i in ignore_red_list then
51410: LD_VAR 0 1
51414: PUSH
51415: LD_VAR 0 3
51419: IN
51420: NOT
51421: IFFALSE 51453
// begin russian_interference_points = russian_interference_points + 1 ;
51423: LD_ADDR_EXP 97
51427: PUSH
51428: LD_EXP 97
51432: PUSH
51433: LD_INT 1
51435: PLUS
51436: ST_TO_ADDR
// ignore_red_list = ignore_red_list ^ i ;
51437: LD_ADDR_VAR 0 3
51441: PUSH
51442: LD_VAR 0 3
51446: PUSH
51447: LD_VAR 0 1
51451: ADD
51452: ST_TO_ADDR
// end ; end ; 1 .. 500 :
51453: GO 51516
51455: LD_INT 1
51457: DOUBLE
51458: GREATEREQUAL
51459: IFFALSE 51467
51461: LD_INT 500
51463: DOUBLE
51464: LESSEQUAL
51465: IFTRUE 51469
51467: GO 51515
51469: POP
// begin if not i in ignore_yellow_list then
51470: LD_VAR 0 1
51474: PUSH
51475: LD_VAR 0 2
51479: IN
51480: NOT
51481: IFFALSE 51513
// begin russian_interference_points = russian_interference_points + 1 ;
51483: LD_ADDR_EXP 97
51487: PUSH
51488: LD_EXP 97
51492: PUSH
51493: LD_INT 1
51495: PLUS
51496: ST_TO_ADDR
// ignore_yellow_list = ignore_yellow_list ^ i ;
51497: LD_ADDR_VAR 0 2
51501: PUSH
51502: LD_VAR 0 2
51506: PUSH
51507: LD_VAR 0 1
51511: ADD
51512: ST_TO_ADDR
// end ; end ; end ;
51513: GO 51516
51515: POP
51516: GO 51382
51518: POP
51519: POP
// until false ;
51520: LD_INT 0
51522: IFFALSE 51125
// end ;
51524: PPOPN 3
51526: END
// every 0 0$1 + 0 0$0.3 do var temp_list , hex , time , i ; var hex_list_before , hex_list_after ;
51527: GO 51529
51529: DISABLE
51530: LD_INT 0
51532: PPUSH
51533: PPUSH
51534: PPUSH
51535: PPUSH
51536: PPUSH
51537: PPUSH
// begin time = Rand ( 20 20$0 , 23 23$0 ) ;
51538: LD_ADDR_VAR 0 3
51542: PUSH
51543: LD_INT 42000
51545: PPUSH
51546: LD_INT 48300
51548: PPUSH
51549: CALL_OW 12
51553: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51554: LD_INT 35
51556: PPUSH
51557: CALL_OW 67
// time = time - 0 0$1 ;
51561: LD_ADDR_VAR 0 3
51565: PUSH
51566: LD_VAR 0 3
51570: PUSH
51571: LD_INT 35
51573: MINUS
51574: ST_TO_ADDR
// until time <= 0 0$0 or not 3 in ai_bases ;
51575: LD_VAR 0 3
51579: PUSH
51580: LD_INT 0
51582: LESSEQUAL
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: LD_EXP 59
51591: IN
51592: NOT
51593: OR
51594: IFFALSE 51554
// if difficulty <= 2 and 3 in ai_bases then
51596: LD_OWVAR 67
51600: PUSH
51601: LD_INT 2
51603: LESSEQUAL
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: LD_EXP 59
51612: IN
51613: AND
51614: IFFALSE 51623
// wait ( 4 4$0 ) ;
51616: LD_INT 8400
51618: PPUSH
51619: CALL_OW 67
// if difficulty = 1 and 3 in ai_bases then
51623: LD_OWVAR 67
51627: PUSH
51628: LD_INT 1
51630: EQUAL
51631: PUSH
51632: LD_INT 3
51634: PUSH
51635: LD_EXP 59
51639: IN
51640: AND
51641: IFFALSE 51650
// wait ( 4 4$0 ) ;
51643: LD_INT 8400
51645: PPUSH
51646: CALL_OW 67
// while ( ai_vehicles_attack [ 3 ] > 0 or ai_attacking_scientists [ 3 ] > 0 or ai_attacking_soldiers [ 3 ] > 0 ) and russian_attack_strategy <> 1 and 3 in ai_bases do
51650: LD_EXP 41
51654: PUSH
51655: LD_INT 3
51657: ARRAY
51658: PUSH
51659: LD_INT 0
51661: GREATER
51662: PUSH
51663: LD_EXP 65
51667: PUSH
51668: LD_INT 3
51670: ARRAY
51671: PUSH
51672: LD_INT 0
51674: GREATER
51675: OR
51676: PUSH
51677: LD_EXP 64
51681: PUSH
51682: LD_INT 3
51684: ARRAY
51685: PUSH
51686: LD_INT 0
51688: GREATER
51689: OR
51690: PUSH
51691: LD_EXP 84
51695: PUSH
51696: LD_INT 1
51698: NONEQUAL
51699: AND
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: LD_EXP 59
51708: IN
51709: AND
51710: IFFALSE 51721
// wait ( 0 0$2 ) ;
51712: LD_INT 70
51714: PPUSH
51715: CALL_OW 67
51719: GO 51650
// if PlayerAtEasternBorder then
51721: CALL 31946 0 0
51725: IFFALSE 51824
// begin hex_list_before = [ [ 148 , 99 ] , [ 153 , 99 ] ] ;
51727: LD_ADDR_VAR 0 5
51731: PUSH
51732: LD_INT 148
51734: PUSH
51735: LD_INT 99
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 153
51744: PUSH
51745: LD_INT 99
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: ST_TO_ADDR
// hex = [ 145 , 58 ] ;
51756: LD_ADDR_VAR 0 2
51760: PUSH
51761: LD_INT 145
51763: PUSH
51764: LD_INT 58
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: ST_TO_ADDR
// hex_list_after = [ [ 140 , 104 ] , [ 126 , 91 ] , [ 123 , 71 ] , [ 118 , 59 ] ] ;
51771: LD_ADDR_VAR 0 6
51775: PUSH
51776: LD_INT 140
51778: PUSH
51779: LD_INT 104
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 126
51788: PUSH
51789: LD_INT 91
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 123
51798: PUSH
51799: LD_INT 71
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 118
51808: PUSH
51809: LD_INT 59
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: ST_TO_ADDR
// end else
51822: GO 52074
// begin hex_list_before = [ [ 134 , 107 ] , [ 121 , 99 ] ] ;
51824: LD_ADDR_VAR 0 5
51828: PUSH
51829: LD_INT 134
51831: PUSH
51832: LD_INT 107
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 121
51841: PUSH
51842: LD_INT 99
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: ST_TO_ADDR
// hex = [ 99 , 108 ] ;
51853: LD_ADDR_VAR 0 2
51857: PUSH
51858: LD_INT 99
51860: PUSH
51861: LD_INT 108
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: ST_TO_ADDR
// hex_list_after = [ [ 122 , 80 ] ] ;
51868: LD_ADDR_VAR 0 6
51872: PUSH
51873: LD_INT 122
51875: PUSH
51876: LD_INT 80
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: EMPTY
51884: LIST
51885: ST_TO_ADDR
// case difficulty of 1 :
51886: LD_OWVAR 67
51890: PUSH
51891: LD_INT 1
51893: DOUBLE
51894: EQUAL
51895: IFTRUE 51899
51897: GO 51959
51899: POP
// hex_list_after = hex_list_after ^ [ [ 143 , 77 ] , [ 143 , 52 ] , [ 134 , 42 ] , [ 115 , 39 ] ] ; 2 :
51900: LD_ADDR_VAR 0 6
51904: PUSH
51905: LD_VAR 0 6
51909: PUSH
51910: LD_INT 143
51912: PUSH
51913: LD_INT 77
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 143
51922: PUSH
51923: LD_INT 52
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 134
51932: PUSH
51933: LD_INT 42
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 115
51942: PUSH
51943: LD_INT 39
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: ADD
51956: ST_TO_ADDR
51957: GO 52074
51959: LD_INT 2
51961: DOUBLE
51962: EQUAL
51963: IFTRUE 51967
51965: GO 52027
51967: POP
// hex_list_after = hex_list_after ^ [ [ 143 , 77 ] , [ 134 , 70 ] , [ 124 , 66 ] , [ 118 , 59 ] ] ; 3 :
51968: LD_ADDR_VAR 0 6
51972: PUSH
51973: LD_VAR 0 6
51977: PUSH
51978: LD_INT 143
51980: PUSH
51981: LD_INT 77
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 134
51990: PUSH
51991: LD_INT 70
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 124
52000: PUSH
52001: LD_INT 66
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 118
52010: PUSH
52011: LD_INT 59
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: ADD
52024: ST_TO_ADDR
52025: GO 52074
52027: LD_INT 3
52029: DOUBLE
52030: EQUAL
52031: IFTRUE 52035
52033: GO 52073
52035: POP
// hex_list_after = hex_list_after ^ [ [ 123 , 71 ] , [ 118 , 59 ] ] ; end ;
52036: LD_ADDR_VAR 0 6
52040: PUSH
52041: LD_VAR 0 6
52045: PUSH
52046: LD_INT 123
52048: PUSH
52049: LD_INT 71
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 118
52058: PUSH
52059: LD_INT 59
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: ADD
52070: ST_TO_ADDR
52071: GO 52074
52073: POP
// end ; temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52074: LD_ADDR_VAR 0 1
52078: PUSH
52079: LD_INT 22
52081: PUSH
52082: LD_EXP 3
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: LD_INT 30
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 30
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PPUSH
52123: CALL_OW 69
52127: ST_TO_ADDR
// if temp_list > 0 then
52128: LD_VAR 0 1
52132: PUSH
52133: LD_INT 0
52135: GREATER
52136: IFFALSE 52186
// hex_list_before = hex_list_before ^ [ [ GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ] ] else
52138: LD_ADDR_VAR 0 5
52142: PUSH
52143: LD_VAR 0 5
52147: PUSH
52148: LD_VAR 0 1
52152: PUSH
52153: LD_INT 1
52155: ARRAY
52156: PPUSH
52157: CALL_OW 250
52161: PUSH
52162: LD_VAR 0 1
52166: PUSH
52167: LD_INT 1
52169: ARRAY
52170: PPUSH
52171: CALL_OW 251
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: ADD
52183: ST_TO_ADDR
52184: GO 52205
// hex_list_before = hex_list_before ^ [ hex ] ;
52186: LD_ADDR_VAR 0 5
52190: PUSH
52191: LD_VAR 0 5
52195: PUSH
52196: LD_VAR 0 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: ADD
52204: ST_TO_ADDR
// SetDir ( Cornell , 5 ) ;
52205: LD_EXP 26
52209: PPUSH
52210: LD_INT 5
52212: PPUSH
52213: CALL_OW 233
// SetLives ( Cornell , [ 400 , 450 , 500 ] [ difficulty ] ) ;
52217: LD_EXP 26
52221: PPUSH
52222: LD_INT 400
52224: PUSH
52225: LD_INT 450
52227: PUSH
52228: LD_INT 500
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: PUSH
52236: LD_OWVAR 67
52240: ARRAY
52241: PPUSH
52242: CALL_OW 234
// while not PlaceUnitXYR ( Cornell , 146 , 117 , 1 , false ) do
52246: LD_EXP 26
52250: PPUSH
52251: LD_INT 146
52253: PPUSH
52254: LD_INT 117
52256: PPUSH
52257: LD_INT 1
52259: PPUSH
52260: LD_INT 0
52262: PPUSH
52263: CALL_OW 50
52267: NOT
52268: IFFALSE 52279
// wait ( 0 0$2 ) ;
52270: LD_INT 70
52272: PPUSH
52273: CALL_OW 67
52277: GO 52246
// hex = 1 ;
52279: LD_ADDR_VAR 0 2
52283: PUSH
52284: LD_INT 1
52286: ST_TO_ADDR
// time = 1 1$0 ;
52287: LD_ADDR_VAR 0 3
52291: PUSH
52292: LD_INT 2100
52294: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
52295: LD_INT 18
52297: PPUSH
52298: CALL_OW 67
// if GetDistUnitXY ( Cornell , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) > 2 then
52302: LD_EXP 26
52306: PPUSH
52307: LD_VAR 0 5
52311: PUSH
52312: LD_VAR 0 2
52316: ARRAY
52317: PUSH
52318: LD_INT 1
52320: ARRAY
52321: PPUSH
52322: LD_VAR 0 5
52326: PUSH
52327: LD_VAR 0 2
52331: ARRAY
52332: PUSH
52333: LD_INT 2
52335: ARRAY
52336: PPUSH
52337: CALL_OW 297
52341: PUSH
52342: LD_INT 2
52344: GREATER
52345: IFFALSE 52388
// ComMoveXY ( Cornell , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
52347: LD_EXP 26
52351: PPUSH
52352: LD_VAR 0 5
52356: PUSH
52357: LD_VAR 0 2
52361: ARRAY
52362: PUSH
52363: LD_INT 1
52365: ARRAY
52366: PPUSH
52367: LD_VAR 0 5
52371: PUSH
52372: LD_VAR 0 2
52376: ARRAY
52377: PUSH
52378: LD_INT 2
52380: ARRAY
52381: PPUSH
52382: CALL_OW 111
52386: GO 52449
// if hex < hex_list_before then
52388: LD_VAR 0 2
52392: PUSH
52393: LD_VAR 0 5
52397: LESS
52398: IFFALSE 52416
// hex = hex + 1 else
52400: LD_ADDR_VAR 0 2
52404: PUSH
52405: LD_VAR 0 2
52409: PUSH
52410: LD_INT 1
52412: PLUS
52413: ST_TO_ADDR
52414: GO 52449
// begin time = time - 0 0$0.5 ;
52416: LD_ADDR_VAR 0 3
52420: PUSH
52421: LD_VAR 0 3
52425: PUSH
52426: LD_INT 18
52428: MINUS
52429: ST_TO_ADDR
// if time <= 0 0$0 then
52430: LD_VAR 0 3
52434: PUSH
52435: LD_INT 0
52437: LESSEQUAL
52438: IFFALSE 52449
// KillUnit ( Cornell ) ;
52440: LD_EXP 26
52444: PPUSH
52445: CALL_OW 66
// end ; until ( See ( you , Cornell ) and FilterAllUnits ( [ [ f_side , you ] , [ f_see , americans_alt ] ] ) > 0 ) or IsDead ( Cornell ) ;
52449: LD_EXP 3
52453: PPUSH
52454: LD_EXP 26
52458: PPUSH
52459: CALL_OW 292
52463: PUSH
52464: LD_INT 22
52466: PUSH
52467: LD_EXP 3
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 101
52478: PUSH
52479: LD_EXP 9
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PPUSH
52492: CALL_OW 69
52496: PUSH
52497: LD_INT 0
52499: GREATER
52500: AND
52501: PUSH
52502: LD_EXP 26
52506: PPUSH
52507: CALL_OW 301
52511: OR
52512: IFFALSE 52295
// if See ( you , Cornell ) and FilterAllUnits ( [ [ f_side , you ] , [ f_see , americans_alt ] ] ) > 0 then
52514: LD_EXP 3
52518: PPUSH
52519: LD_EXP 26
52523: PPUSH
52524: CALL_OW 292
52528: PUSH
52529: LD_INT 22
52531: PUSH
52532: LD_EXP 3
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 101
52543: PUSH
52544: LD_EXP 9
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PPUSH
52557: CALL_OW 69
52561: PUSH
52562: LD_INT 0
52564: GREATER
52565: AND
52566: IFFALSE 52889
// begin CenterOnUnits ( Cornell ) ;
52568: LD_EXP 26
52572: PPUSH
52573: CALL_OW 85
// DialogueOn ;
52577: CALL_OW 6
// ForceSay ( Cornell , D5-Cor-1 ) ;
52581: LD_EXP 26
52585: PPUSH
52586: LD_STRING D5-Cor-1
52588: PPUSH
52589: CALL_OW 91
// ForceSay ( Heike , D5-H-1 ) ;
52593: LD_EXP 10
52597: PPUSH
52598: LD_STRING D5-H-1
52600: PPUSH
52601: CALL_OW 91
// DialogueOff ;
52605: CALL_OW 7
// hex = 1 ;
52609: LD_ADDR_VAR 0 2
52613: PUSH
52614: LD_INT 1
52616: ST_TO_ADDR
// repeat if GetDistUnitXY ( Cornell , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) > 3 then
52617: LD_EXP 26
52621: PPUSH
52622: LD_VAR 0 6
52626: PUSH
52627: LD_VAR 0 2
52631: ARRAY
52632: PUSH
52633: LD_INT 1
52635: ARRAY
52636: PPUSH
52637: LD_VAR 0 6
52641: PUSH
52642: LD_VAR 0 2
52646: ARRAY
52647: PUSH
52648: LD_INT 2
52650: ARRAY
52651: PPUSH
52652: CALL_OW 297
52656: PUSH
52657: LD_INT 3
52659: GREATER
52660: IFFALSE 52703
// ComMoveXY ( Cornell , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) else
52662: LD_EXP 26
52666: PPUSH
52667: LD_VAR 0 6
52671: PUSH
52672: LD_VAR 0 2
52676: ARRAY
52677: PUSH
52678: LD_INT 1
52680: ARRAY
52681: PPUSH
52682: LD_VAR 0 6
52686: PUSH
52687: LD_VAR 0 2
52691: ARRAY
52692: PUSH
52693: LD_INT 2
52695: ARRAY
52696: PPUSH
52697: CALL_OW 111
52701: GO 52729
// if hex < hex_list_after then
52703: LD_VAR 0 2
52707: PUSH
52708: LD_VAR 0 6
52712: LESS
52713: IFFALSE 52729
// hex = hex + 1 ;
52715: LD_ADDR_VAR 0 2
52719: PUSH
52720: LD_VAR 0 2
52724: PUSH
52725: LD_INT 1
52727: PLUS
52728: ST_TO_ADDR
// wait ( 0 0$0.5 ) ;
52729: LD_INT 18
52731: PPUSH
52732: CALL_OW 67
// until IsDead ( Cornell ) or ( See ( americans , Cornell ) and FilterAllUnits ( [ [ f_side , americans ] , [ f_see , americans_alt ] ] ) > 0 ) ;
52736: LD_EXP 26
52740: PPUSH
52741: CALL_OW 301
52745: PUSH
52746: LD_EXP 7
52750: PPUSH
52751: LD_EXP 26
52755: PPUSH
52756: CALL_OW 292
52760: PUSH
52761: LD_INT 22
52763: PUSH
52764: LD_EXP 7
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 101
52775: PUSH
52776: LD_EXP 9
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PPUSH
52789: CALL_OW 69
52793: PUSH
52794: LD_INT 0
52796: GREATER
52797: AND
52798: OR
52799: IFFALSE 52617
// if See ( americans , Cornell ) and FilterAllUnits ( [ [ f_side , americans ] , [ f_see , americans_alt ] ] ) > 0 then
52801: LD_EXP 7
52805: PPUSH
52806: LD_EXP 26
52810: PPUSH
52811: CALL_OW 292
52815: PUSH
52816: LD_INT 22
52818: PUSH
52819: LD_EXP 7
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 101
52830: PUSH
52831: LD_EXP 9
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PPUSH
52844: CALL_OW 69
52848: PUSH
52849: LD_INT 0
52851: GREATER
52852: AND
52853: IFFALSE 52889
// begin DialogueOn ;
52855: CALL_OW 6
// SayRadio ( Simms , D4-Sim-2 ) ;
52859: LD_EXP 25
52863: PPUSH
52864: LD_STRING D4-Sim-2
52866: PPUSH
52867: CALL_OW 94
// dwait ( 0 0$0.5 ) ;
52871: LD_INT 18
52873: PPUSH
52874: CALL_OW 68
// YouLost ( PlayerSeen ) ;
52878: LD_STRING PlayerSeen
52880: PPUSH
52881: CALL_OW 104
// DialogueOff ;
52885: CALL_OW 7
// end ; end ; time = Rand ( 22 22$0 , 24 24$0 ) ;
52889: LD_ADDR_VAR 0 3
52893: PUSH
52894: LD_INT 46200
52896: PPUSH
52897: LD_INT 50400
52899: PPUSH
52900: CALL_OW 12
52904: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52905: LD_INT 35
52907: PPUSH
52908: CALL_OW 67
// time = time - 0 0$1 ;
52912: LD_ADDR_VAR 0 3
52916: PUSH
52917: LD_VAR 0 3
52921: PUSH
52922: LD_INT 35
52924: MINUS
52925: ST_TO_ADDR
// until time <= 0 0$0 or not 3 in ai_bases ;
52926: LD_VAR 0 3
52930: PUSH
52931: LD_INT 0
52933: LESSEQUAL
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: LD_EXP 59
52942: IN
52943: NOT
52944: OR
52945: IFFALSE 52905
// DialogueOn ;
52947: CALL_OW 6
// SayRadio ( Gensher , D8-Ge-1 ) ;
52951: LD_EXP 24
52955: PPUSH
52956: LD_STRING D8-Ge-1
52958: PPUSH
52959: CALL_OW 94
// DialogueOff ;
52963: CALL_OW 7
// wait ( 0 0$0.2 ) ;
52967: LD_INT 7
52969: PPUSH
52970: CALL_OW 67
// time = 8 8$0 ;
52974: LD_ADDR_VAR 0 3
52978: PUSH
52979: LD_INT 16800
52981: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = tick + time + 1 1$0 ;
52982: LD_ADDR_EXP 94
52986: PUSH
52987: LD_OWVAR 1
52991: PUSH
52992: LD_VAR 0 3
52996: PLUS
52997: PUSH
52998: LD_INT 2100
53000: PLUS
53001: ST_TO_ADDR
// repeat display_strings = [ #Ar11-GensherCountdown , time ] ;
53002: LD_ADDR_OWVAR 47
53006: PUSH
53007: LD_STRING #Ar11-GensherCountdown
53009: PUSH
53010: LD_VAR 0 3
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: ST_TO_ADDR
// time = time - 0 0$1 ;
53019: LD_ADDR_VAR 0 3
53023: PUSH
53024: LD_VAR 0 3
53028: PUSH
53029: LD_INT 35
53031: MINUS
53032: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53033: LD_INT 35
53035: PPUSH
53036: CALL_OW 67
// until time <= 0 0$0 ;
53040: LD_VAR 0 3
53044: PUSH
53045: LD_INT 0
53047: LESSEQUAL
53048: IFFALSE 53002
// display_strings = [ ] ;
53050: LD_ADDR_OWVAR 47
53054: PUSH
53055: EMPTY
53056: ST_TO_ADDR
// game_phase = 2 ;
53057: LD_ADDR_EXP 89
53061: PUSH
53062: LD_INT 2
53064: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
53065: LD_STRING M3
53067: PPUSH
53068: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , americans ] ) do
53072: LD_ADDR_VAR 0 4
53076: PUSH
53077: LD_INT 22
53079: PUSH
53080: LD_EXP 7
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PPUSH
53089: CALL_OW 69
53093: PUSH
53094: FOR_IN
53095: IFFALSE 53113
// NormalAttack ( you , i ) ;
53097: LD_EXP 3
53101: PPUSH
53102: LD_VAR 0 4
53106: PPUSH
53107: CALL_OW 472
53111: GO 53094
53113: POP
53114: POP
// end ;
53115: PPOPN 6
53117: END
// every 0 0$1 do var i ;
53118: GO 53120
53120: DISABLE
53121: LD_INT 0
53123: PPUSH
// begin repeat wait ( 0 0$1 ) ;
53124: LD_INT 35
53126: PPUSH
53127: CALL_OW 67
// if game_phase > 1 then
53131: LD_EXP 89
53135: PUSH
53136: LD_INT 1
53138: GREATER
53139: IFFALSE 53143
// exit ;
53141: GO 53271
// for i in FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
53143: LD_ADDR_VAR 0 1
53147: PUSH
53148: LD_INT 22
53150: PUSH
53151: LD_EXP 3
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 21
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 21
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PPUSH
53192: CALL_OW 69
53196: PUSH
53197: FOR_IN
53198: IFFALSE 53265
// if GetDistUnitArea ( i , Gensher_base ) <= 9 then
53200: LD_VAR 0 1
53204: PPUSH
53205: LD_INT 7
53207: PPUSH
53208: CALL_OW 299
53212: PUSH
53213: LD_INT 9
53215: LESSEQUAL
53216: IFFALSE 53263
// begin CenterOnUnits ( i ) ;
53218: LD_VAR 0 1
53222: PPUSH
53223: CALL_OW 85
// DialogueOn ;
53227: CALL_OW 6
// Say ( Gensher , D12-Ge-1 ) ;
53231: LD_EXP 24
53235: PPUSH
53236: LD_STRING D12-Ge-1
53238: PPUSH
53239: CALL_OW 88
// ForceSay ( Heike , D12-H-1 ) ;
53243: LD_EXP 10
53247: PPUSH
53248: LD_STRING D12-H-1
53250: PPUSH
53251: CALL_OW 91
// DialogueOff ;
53255: CALL_OW 7
// exit ;
53259: POP
53260: POP
53261: GO 53271
// end ;
53263: GO 53197
53265: POP
53266: POP
// until false ;
53267: LD_INT 0
53269: IFFALSE 53124
// end ;
53271: PPOPN 1
53273: END
// every 0 0$1 + 0 0$0.8 trigger game_phase = 2 do var i , val , temp_list , k ; var un_list , scis_list , hex_list , hex , exit_hex , rand_hexes ; var attacking_units , american_base_hex ; var hex_status ;
53274: LD_EXP 89
53278: PUSH
53279: LD_INT 2
53281: EQUAL
53282: IFFALSE 54761
53284: GO 53286
53286: DISABLE
53287: LD_INT 0
53289: PPUSH
53290: PPUSH
53291: PPUSH
53292: PPUSH
53293: PPUSH
53294: PPUSH
53295: PPUSH
53296: PPUSH
53297: PPUSH
53298: PPUSH
53299: PPUSH
53300: PPUSH
53301: PPUSH
// begin ai_bases = ai_bases diff 2 ;
53302: LD_ADDR_EXP 59
53306: PUSH
53307: LD_EXP 59
53311: PUSH
53312: LD_INT 2
53314: DIFF
53315: ST_TO_ADDR
// hex = 1 ;
53316: LD_ADDR_VAR 0 8
53320: PUSH
53321: LD_INT 1
53323: ST_TO_ADDR
// hex_list = [ [ 75 , 23 ] , [ 76 , 36 ] , [ 78 , 43 ] , [ 79 , 51 ] , [ 81 , 61 ] , [ 84 , 71 ] , [ 90 , 81 ] , [ 97 , 88 ] , [ 105 , 93 ] , [ 113 , 95 ] , [ 119 , 92 ] , [ 122 , 87 ] , [ 123 , 79 ] , [ 132 , 82 ] , [ 141 , 88 ] , [ 160 , 104 ] , [ 168 , 109 ] ] ;
53324: LD_ADDR_VAR 0 7
53328: PUSH
53329: LD_INT 75
53331: PUSH
53332: LD_INT 23
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 76
53341: PUSH
53342: LD_INT 36
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 78
53351: PUSH
53352: LD_INT 43
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 79
53361: PUSH
53362: LD_INT 51
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 81
53371: PUSH
53372: LD_INT 61
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 84
53381: PUSH
53382: LD_INT 71
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 90
53391: PUSH
53392: LD_INT 81
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 97
53401: PUSH
53402: LD_INT 88
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 105
53411: PUSH
53412: LD_INT 93
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 113
53421: PUSH
53422: LD_INT 95
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 119
53431: PUSH
53432: LD_INT 92
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 122
53441: PUSH
53442: LD_INT 87
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 123
53451: PUSH
53452: LD_INT 79
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 132
53461: PUSH
53462: LD_INT 82
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 141
53471: PUSH
53472: LD_INT 88
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 160
53481: PUSH
53482: LD_INT 104
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 168
53491: PUSH
53492: LD_INT 109
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: ST_TO_ADDR
// exit_hex = [ 173 , 110 ] ;
53518: LD_ADDR_VAR 0 9
53522: PUSH
53523: LD_INT 173
53525: PUSH
53526: LD_INT 110
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: ST_TO_ADDR
// rand_hexes = [ ] ;
53533: LD_ADDR_VAR 0 10
53537: PUSH
53538: EMPTY
53539: ST_TO_ADDR
// american_base_hex = [ 113 , 36 ] ;
53540: LD_ADDR_VAR 0 12
53544: PUSH
53545: LD_INT 113
53547: PUSH
53548: LD_INT 36
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: ST_TO_ADDR
// attacking_units = [ ] ;
53555: LD_ADDR_VAR 0 11
53559: PUSH
53560: EMPTY
53561: ST_TO_ADDR
// attacking_units = FilterAllUnits ( [ [ f_placed ] , [ f_side , you_alt ] , [ f_type , unit_vehicle ] ] ) ;
53562: LD_ADDR_VAR 0 11
53566: PUSH
53567: LD_INT 52
53569: PUSH
53570: EMPTY
53571: LIST
53572: PUSH
53573: LD_INT 22
53575: PUSH
53576: LD_EXP 6
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 21
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: PPUSH
53600: CALL_OW 69
53604: ST_TO_ADDR
// attacking_units = attacking_units ^ gensher_mortars ;
53605: LD_ADDR_VAR 0 11
53609: PUSH
53610: LD_VAR 0 11
53614: PUSH
53615: LD_EXP 100
53619: ADD
53620: ST_TO_ADDR
// SetAttitude ( you_alt , americans , att_enemy , false ) ;
53621: LD_EXP 6
53625: PPUSH
53626: LD_EXP 7
53630: PPUSH
53631: LD_INT 2
53633: PPUSH
53634: LD_INT 0
53636: PPUSH
53637: CALL_OW 80
// ComAgressiveMove ( attacking_units , american_base_hex [ 1 ] , american_base_hex [ 2 ] ) ;
53641: LD_VAR 0 11
53645: PPUSH
53646: LD_VAR 0 12
53650: PUSH
53651: LD_INT 1
53653: ARRAY
53654: PPUSH
53655: LD_VAR 0 12
53659: PUSH
53660: LD_INT 2
53662: ARRAY
53663: PPUSH
53664: CALL_OW 114
// un_list = original_gensher_people ^ Gensher ;
53668: LD_ADDR_VAR 0 5
53672: PUSH
53673: LD_EXP 83
53677: PUSH
53678: LD_EXP 24
53682: ADD
53683: ST_TO_ADDR
// un_list = un_list ^ gensher_bunker_apes ;
53684: LD_ADDR_VAR 0 5
53688: PUSH
53689: LD_VAR 0 5
53693: PUSH
53694: LD_EXP 99
53698: ADD
53699: ST_TO_ADDR
// scis_list = UnitFilter ( un_list , [ f_class , class_scientistic ] ) ;
53700: LD_ADDR_VAR 0 6
53704: PUSH
53705: LD_VAR 0 5
53709: PPUSH
53710: LD_INT 25
53712: PUSH
53713: LD_INT 4
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PPUSH
53720: CALL_OW 72
53724: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53725: LD_INT 35
53727: PPUSH
53728: CALL_OW 67
// val = true ;
53732: LD_ADDR_VAR 0 2
53736: PUSH
53737: LD_INT 1
53739: ST_TO_ADDR
// for i in un_list do
53740: LD_ADDR_VAR 0 1
53744: PUSH
53745: LD_VAR 0 5
53749: PUSH
53750: FOR_IN
53751: IFFALSE 53827
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
53753: LD_VAR 0 1
53757: PPUSH
53758: CALL_OW 310
53762: PPUSH
53763: CALL_OW 247
53767: PUSH
53768: LD_INT 2
53770: DOUBLE
53771: EQUAL
53772: IFTRUE 53776
53774: GO 53796
53776: POP
// begin ComExitVehicle ( i ) ;
53777: LD_VAR 0 1
53781: PPUSH
53782: CALL_OW 121
// val = false ;
53786: LD_ADDR_VAR 0 2
53790: PUSH
53791: LD_INT 0
53793: ST_TO_ADDR
// end ; unit_building :
53794: GO 53825
53796: LD_INT 3
53798: DOUBLE
53799: EQUAL
53800: IFTRUE 53804
53802: GO 53824
53804: POP
// begin ComExitBuilding ( i ) ;
53805: LD_VAR 0 1
53809: PPUSH
53810: CALL_OW 122
// val = false ;
53814: LD_ADDR_VAR 0 2
53818: PUSH
53819: LD_INT 0
53821: ST_TO_ADDR
// end ; end ;
53822: GO 53825
53824: POP
53825: GO 53750
53827: POP
53828: POP
// until val ;
53829: LD_VAR 0 2
53833: IFFALSE 53725
// for i in un_list do
53835: LD_ADDR_VAR 0 1
53839: PUSH
53840: LD_VAR 0 5
53844: PUSH
53845: FOR_IN
53846: IFFALSE 53881
// rand_hexes = Replace ( rand_hexes , i , hex_list [ hex ] ) ;
53848: LD_ADDR_VAR 0 10
53852: PUSH
53853: LD_VAR 0 10
53857: PPUSH
53858: LD_VAR 0 1
53862: PPUSH
53863: LD_VAR 0 7
53867: PUSH
53868: LD_VAR 0 8
53872: ARRAY
53873: PPUSH
53874: CALL_OW 1
53878: ST_TO_ADDR
53879: GO 53845
53881: POP
53882: POP
// repeat wait ( 0 0$0.3 ) ;
53883: LD_INT 10
53885: PPUSH
53886: CALL_OW 67
// un_list = UnitFilter ( un_list , [ f_alive ] ) ;
53890: LD_ADDR_VAR 0 5
53894: PUSH
53895: LD_VAR 0 5
53899: PPUSH
53900: LD_INT 51
53902: PUSH
53903: EMPTY
53904: LIST
53905: PPUSH
53906: CALL_OW 72
53910: ST_TO_ADDR
// scis_list = UnitFilter ( scis_list , [ f_alive ] ) ;
53911: LD_ADDR_VAR 0 6
53915: PUSH
53916: LD_VAR 0 6
53920: PPUSH
53921: LD_INT 51
53923: PUSH
53924: EMPTY
53925: LIST
53926: PPUSH
53927: CALL_OW 72
53931: ST_TO_ADDR
// temp_list = [ ] ;
53932: LD_ADDR_VAR 0 3
53936: PUSH
53937: EMPTY
53938: ST_TO_ADDR
// for i in un_list do
53939: LD_ADDR_VAR 0 1
53943: PUSH
53944: LD_VAR 0 5
53948: PUSH
53949: FOR_IN
53950: IFFALSE 53985
// if GetLives ( i ) <= 250 then
53952: LD_VAR 0 1
53956: PPUSH
53957: CALL_OW 256
53961: PUSH
53962: LD_INT 250
53964: LESSEQUAL
53965: IFFALSE 53983
// temp_list = temp_list ^ i ;
53967: LD_ADDR_VAR 0 3
53971: PUSH
53972: LD_VAR 0 3
53976: PUSH
53977: LD_VAR 0 1
53981: ADD
53982: ST_TO_ADDR
53983: GO 53949
53985: POP
53986: POP
// if temp_list > 0 and scis_list > 0 and UnitFilter ( un_list , [ f_lives , 501 ] ) > ( original_gensher_people + 1 ) div 2 then
53987: LD_VAR 0 3
53991: PUSH
53992: LD_INT 0
53994: GREATER
53995: PUSH
53996: LD_VAR 0 6
54000: PUSH
54001: LD_INT 0
54003: GREATER
54004: AND
54005: PUSH
54006: LD_VAR 0 5
54010: PPUSH
54011: LD_INT 24
54013: PUSH
54014: LD_INT 501
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PPUSH
54021: CALL_OW 72
54025: PUSH
54026: LD_EXP 83
54030: PUSH
54031: LD_INT 1
54033: PLUS
54034: PUSH
54035: LD_INT 2
54037: DIV
54038: GREATER
54039: AND
54040: IFFALSE 54163
// begin for i in scis_list do
54042: LD_ADDR_VAR 0 1
54046: PUSH
54047: LD_VAR 0 6
54051: PUSH
54052: FOR_IN
54053: IFFALSE 54075
// ComHeal ( i , temp_list [ 1 ] ) ;
54055: LD_VAR 0 1
54059: PPUSH
54060: LD_VAR 0 3
54064: PUSH
54065: LD_INT 1
54067: ARRAY
54068: PPUSH
54069: CALL_OW 128
54073: GO 54052
54075: POP
54076: POP
// for i in un_list diff scis_list do
54077: LD_ADDR_VAR 0 1
54081: PUSH
54082: LD_VAR 0 5
54086: PUSH
54087: LD_VAR 0 6
54091: DIFF
54092: PUSH
54093: FOR_IN
54094: IFFALSE 54159
// if GetDistUnits ( i , temp_list [ 1 ] ) > 4 then
54096: LD_VAR 0 1
54100: PPUSH
54101: LD_VAR 0 3
54105: PUSH
54106: LD_INT 1
54108: ARRAY
54109: PPUSH
54110: CALL_OW 296
54114: PUSH
54115: LD_INT 4
54117: GREATER
54118: IFFALSE 54157
// ComMoveXY ( i , GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ) ;
54120: LD_VAR 0 1
54124: PPUSH
54125: LD_VAR 0 3
54129: PUSH
54130: LD_INT 1
54132: ARRAY
54133: PPUSH
54134: CALL_OW 250
54138: PPUSH
54139: LD_VAR 0 3
54143: PUSH
54144: LD_INT 1
54146: ARRAY
54147: PPUSH
54148: CALL_OW 251
54152: PPUSH
54153: CALL_OW 111
54157: GO 54093
54159: POP
54160: POP
// end else
54161: GO 54729
// begin val = true ;
54163: LD_ADDR_VAR 0 2
54167: PUSH
54168: LD_INT 1
54170: ST_TO_ADDR
// for i in un_list do
54171: LD_ADDR_VAR 0 1
54175: PUSH
54176: LD_VAR 0 5
54180: PUSH
54181: FOR_IN
54182: IFFALSE 54502
// if hex <= hex_list then
54184: LD_VAR 0 8
54188: PUSH
54189: LD_VAR 0 7
54193: LESSEQUAL
54194: IFFALSE 54369
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 5 then
54196: LD_VAR 0 1
54200: PPUSH
54201: LD_VAR 0 10
54205: PUSH
54206: LD_VAR 0 1
54210: ARRAY
54211: PUSH
54212: LD_INT 1
54214: ARRAY
54215: PPUSH
54216: LD_VAR 0 10
54220: PUSH
54221: LD_VAR 0 1
54225: ARRAY
54226: PUSH
54227: LD_INT 2
54229: ARRAY
54230: PPUSH
54231: CALL_OW 297
54235: PUSH
54236: LD_INT 5
54238: GREATER
54239: IFFALSE 54367
// begin if logsenabled then
54241: LD_EXP 2
54245: IFFALSE 54320
// begin hex_status = HexInfo ( rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
54247: LD_ADDR_VAR 0 13
54251: PUSH
54252: LD_VAR 0 10
54256: PUSH
54257: LD_VAR 0 1
54261: ARRAY
54262: PUSH
54263: LD_INT 1
54265: ARRAY
54266: PPUSH
54267: LD_VAR 0 10
54271: PUSH
54272: LD_VAR 0 1
54276: ARRAY
54277: PUSH
54278: LD_INT 2
54280: ARRAY
54281: PPUSH
54282: CALL_OW 428
54286: ST_TO_ADDR
// display_strings = [ Hex at  , rand_hexes [ i ] ,  has status  , hex_status ] ;
54287: LD_ADDR_OWVAR 47
54291: PUSH
54292: LD_STRING Hex at 
54294: PUSH
54295: LD_VAR 0 10
54299: PUSH
54300: LD_VAR 0 1
54304: ARRAY
54305: PUSH
54306: LD_STRING  has status 
54308: PUSH
54309: LD_VAR 0 13
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: ST_TO_ADDR
// end ; ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
54320: LD_VAR 0 1
54324: PPUSH
54325: LD_VAR 0 10
54329: PUSH
54330: LD_VAR 0 1
54334: ARRAY
54335: PUSH
54336: LD_INT 1
54338: ARRAY
54339: PPUSH
54340: LD_VAR 0 10
54344: PUSH
54345: LD_VAR 0 1
54349: ARRAY
54350: PUSH
54351: LD_INT 2
54353: ARRAY
54354: PPUSH
54355: CALL_OW 111
// val = false ;
54359: LD_ADDR_VAR 0 2
54363: PUSH
54364: LD_INT 0
54366: ST_TO_ADDR
// end ; end else
54367: GO 54500
// if GetDistUnitXY ( i , exit_hex [ 1 ] , exit_hex [ 2 ] ) > 2 then
54369: LD_VAR 0 1
54373: PPUSH
54374: LD_VAR 0 9
54378: PUSH
54379: LD_INT 1
54381: ARRAY
54382: PPUSH
54383: LD_VAR 0 9
54387: PUSH
54388: LD_INT 2
54390: ARRAY
54391: PPUSH
54392: CALL_OW 297
54396: PUSH
54397: LD_INT 2
54399: GREATER
54400: IFFALSE 54431
// ComMoveXY ( i , exit_hex [ 1 ] , exit_hex [ 2 ] ) else
54402: LD_VAR 0 1
54406: PPUSH
54407: LD_VAR 0 9
54411: PUSH
54412: LD_INT 1
54414: ARRAY
54415: PPUSH
54416: LD_VAR 0 9
54420: PUSH
54421: LD_INT 2
54423: ARRAY
54424: PPUSH
54425: CALL_OW 111
54429: GO 54500
// begin if i <> Gensher then
54431: LD_VAR 0 1
54435: PUSH
54436: LD_EXP 24
54440: NONEQUAL
54441: IFFALSE 54459
// saved_gensher_people = saved_gensher_people ^ i ;
54443: LD_ADDR_EXP 95
54447: PUSH
54448: LD_EXP 95
54452: PUSH
54453: LD_VAR 0 1
54457: ADD
54458: ST_TO_ADDR
// un_list = un_list diff i ;
54459: LD_ADDR_VAR 0 5
54463: PUSH
54464: LD_VAR 0 5
54468: PUSH
54469: LD_VAR 0 1
54473: DIFF
54474: ST_TO_ADDR
// scis_list = scis_list diff i ;
54475: LD_ADDR_VAR 0 6
54479: PUSH
54480: LD_VAR 0 6
54484: PUSH
54485: LD_VAR 0 1
54489: DIFF
54490: ST_TO_ADDR
// RemoveUnit ( i ) ;
54491: LD_VAR 0 1
54495: PPUSH
54496: CALL_OW 64
// end ;
54500: GO 54181
54502: POP
54503: POP
// if val then
54504: LD_VAR 0 2
54508: IFFALSE 54729
// begin hex = hex + 1 ;
54510: LD_ADDR_VAR 0 8
54514: PUSH
54515: LD_VAR 0 8
54519: PUSH
54520: LD_INT 1
54522: PLUS
54523: ST_TO_ADDR
// if hex <= hex_list then
54524: LD_VAR 0 8
54528: PUSH
54529: LD_VAR 0 7
54533: LESSEQUAL
54534: IFFALSE 54729
// begin temp_list = [ ] ;
54536: LD_ADDR_VAR 0 3
54540: PUSH
54541: EMPTY
54542: ST_TO_ADDR
// for i in un_list do
54543: LD_ADDR_VAR 0 1
54547: PUSH
54548: LD_VAR 0 5
54552: PUSH
54553: FOR_IN
54554: IFFALSE 54727
// begin k = 0 ;
54556: LD_ADDR_VAR 0 4
54560: PUSH
54561: LD_INT 0
54563: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list [ hex ] [ 1 ] , hex_list [ hex ] [ 2 ] , 2 , false ) ;
54564: LD_ADDR_VAR 0 2
54568: PUSH
54569: LD_VAR 0 7
54573: PUSH
54574: LD_VAR 0 8
54578: ARRAY
54579: PUSH
54580: LD_INT 1
54582: ARRAY
54583: PPUSH
54584: LD_VAR 0 7
54588: PUSH
54589: LD_VAR 0 8
54593: ARRAY
54594: PUSH
54595: LD_INT 2
54597: ARRAY
54598: PPUSH
54599: LD_INT 2
54601: PPUSH
54602: LD_INT 0
54604: PPUSH
54605: CALL_OW 17
54609: ST_TO_ADDR
// k = k + 1 ;
54610: LD_ADDR_VAR 0 4
54614: PUSH
54615: LD_VAR 0 4
54619: PUSH
54620: LD_INT 1
54622: PLUS
54623: ST_TO_ADDR
// if ( not val in temp_list and HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 ) or k >= 10 then
54624: LD_VAR 0 2
54628: PUSH
54629: LD_VAR 0 3
54633: IN
54634: NOT
54635: PUSH
54636: LD_VAR 0 2
54640: PUSH
54641: LD_INT 1
54643: ARRAY
54644: PPUSH
54645: LD_VAR 0 2
54649: PUSH
54650: LD_INT 2
54652: ARRAY
54653: PPUSH
54654: CALL_OW 428
54658: PUSH
54659: LD_INT 0
54661: GREATEREQUAL
54662: AND
54663: PUSH
54664: LD_VAR 0 4
54668: PUSH
54669: LD_INT 10
54671: GREATEREQUAL
54672: OR
54673: IFFALSE 54721
// begin temp_list = temp_list ^ [ val ] ;
54675: LD_ADDR_VAR 0 3
54679: PUSH
54680: LD_VAR 0 3
54684: PUSH
54685: LD_VAR 0 2
54689: PUSH
54690: EMPTY
54691: LIST
54692: ADD
54693: ST_TO_ADDR
// rand_hexes = Replace ( rand_hexes , i , val ) ;
54694: LD_ADDR_VAR 0 10
54698: PUSH
54699: LD_VAR 0 10
54703: PPUSH
54704: LD_VAR 0 1
54708: PPUSH
54709: LD_VAR 0 2
54713: PPUSH
54714: CALL_OW 1
54718: ST_TO_ADDR
// break ;
54719: GO 54725
// end ; until false ;
54721: LD_INT 0
54723: IFFALSE 54564
// end ;
54725: GO 54553
54727: POP
54728: POP
// end ; end ; end ; until un_list = 0 ;
54729: LD_VAR 0 5
54733: PUSH
54734: LD_INT 0
54736: EQUAL
54737: IFFALSE 53883
// wait ( 0 0$0.2 ) ;
54739: LD_INT 7
54741: PPUSH
54742: CALL_OW 67
// ChangeMissionObjectives ( M4 ) ;
54746: LD_STRING M4
54748: PPUSH
54749: CALL_OW 337
// game_phase = 3 ;
54753: LD_ADDR_EXP 89
54757: PUSH
54758: LD_INT 3
54760: ST_TO_ADDR
// end ;
54761: PPOPN 13
54763: END
// every 0 0$1 + 0 0$0.9 trigger game_phase = 2 do
54764: LD_EXP 89
54768: PUSH
54769: LD_INT 2
54771: EQUAL
54772: IFFALSE 54853
54774: GO 54776
54776: DISABLE
// begin wait ( [ 0 0$18 , 0 0$15 , 0 0$12 ] [ difficulty ] ) ;
54777: LD_INT 630
54779: PUSH
54780: LD_INT 525
54782: PUSH
54783: LD_INT 420
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: LIST
54790: PUSH
54791: LD_OWVAR 67
54795: ARRAY
54796: PPUSH
54797: CALL_OW 67
// DialogueOn ;
54801: CALL_OW 6
// SayRadio ( Simms , D8-Simm-1_v2 ) ;
54805: LD_EXP 25
54809: PPUSH
54810: LD_STRING D8-Simm-1_v2
54812: PPUSH
54813: CALL_OW 94
// SayRadio ( Powell , D8-Po-1 ) ;
54817: LD_EXP 29
54821: PPUSH
54822: LD_STRING D8-Po-1
54824: PPUSH
54825: CALL_OW 94
// DialogueOff ;
54829: CALL_OW 7
// SetAttitude ( americans , you_alt , att_enemy , true ) ;
54833: LD_EXP 7
54837: PPUSH
54838: LD_EXP 6
54842: PPUSH
54843: LD_INT 2
54845: PPUSH
54846: LD_INT 1
54848: PPUSH
54849: CALL_OW 80
// end ;
54853: END
// every 0 0$1 + 0 0$0.6 trigger GetAttitude ( americans , you_alt ) = att_enemy do var i , val ; var sniper_group_1 , sniper_group_2 , hex_list_1 , hex_list_2 , unit_hex , rand_hexes , k ;
54854: LD_EXP 7
54858: PPUSH
54859: LD_EXP 6
54863: PPUSH
54864: CALL_OW 81
54868: PUSH
54869: LD_INT 2
54871: EQUAL
54872: IFFALSE 56271
54874: GO 54876
54876: DISABLE
54877: LD_INT 0
54879: PPUSH
54880: PPUSH
54881: PPUSH
54882: PPUSH
54883: PPUSH
54884: PPUSH
54885: PPUSH
54886: PPUSH
54887: PPUSH
// begin sniper_group_1 = CreateUnitsWithClass ( difficulty , class_sniper , americans ) ;
54888: LD_ADDR_VAR 0 3
54892: PUSH
54893: LD_OWVAR 67
54897: PPUSH
54898: LD_INT 5
54900: PPUSH
54901: LD_EXP 7
54905: PPUSH
54906: CALL 9737 0 3
54910: ST_TO_ADDR
// sniper_group_2 = CreateUnitsWithClass ( difficulty , class_sniper , americans ) ;
54911: LD_ADDR_VAR 0 4
54915: PUSH
54916: LD_OWVAR 67
54920: PPUSH
54921: LD_INT 5
54923: PPUSH
54924: LD_EXP 7
54928: PPUSH
54929: CALL 9737 0 3
54933: ST_TO_ADDR
// for i in sniper_group_1 ^ sniper_group_2 do
54934: LD_ADDR_VAR 0 1
54938: PUSH
54939: LD_VAR 0 3
54943: PUSH
54944: LD_VAR 0 4
54948: ADD
54949: PUSH
54950: FOR_IN
54951: IFFALSE 54996
// PlaceUnitXYR ( i , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 7 , false ) ;
54953: LD_VAR 0 1
54957: PPUSH
54958: LD_EXP 42
54962: PUSH
54963: LD_INT 1
54965: ARRAY
54966: PUSH
54967: LD_INT 1
54969: ARRAY
54970: PPUSH
54971: LD_EXP 42
54975: PUSH
54976: LD_INT 1
54978: ARRAY
54979: PUSH
54980: LD_INT 2
54982: ARRAY
54983: PPUSH
54984: LD_INT 7
54986: PPUSH
54987: LD_INT 0
54989: PPUSH
54990: CALL_OW 50
54994: GO 54950
54996: POP
54997: POP
// unit_hex = [ ] ;
54998: LD_ADDR_VAR 0 7
55002: PUSH
55003: EMPTY
55004: ST_TO_ADDR
// for i in sniper_group_1 ^ sniper_group_2 do
55005: LD_ADDR_VAR 0 1
55009: PUSH
55010: LD_VAR 0 3
55014: PUSH
55015: LD_VAR 0 4
55019: ADD
55020: PUSH
55021: FOR_IN
55022: IFFALSE 55049
// unit_hex = Replace ( unit_hex , i , 1 ) ;
55024: LD_ADDR_VAR 0 7
55028: PUSH
55029: LD_VAR 0 7
55033: PPUSH
55034: LD_VAR 0 1
55038: PPUSH
55039: LD_INT 1
55041: PPUSH
55042: CALL_OW 1
55046: ST_TO_ADDR
55047: GO 55021
55049: POP
55050: POP
// if FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_inarea , player_base_1 ] ] ) > 0 then
55051: LD_INT 22
55053: PUSH
55054: LD_EXP 3
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 30
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 30
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 95
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: PPUSH
55106: CALL_OW 69
55110: PUSH
55111: LD_INT 0
55113: GREATER
55114: IFFALSE 55220
// begin hex_list_1 = [ [ 116 , 59 ] , [ 115 , 67 ] , [ 114 , 77 ] ] ;
55116: LD_ADDR_VAR 0 5
55120: PUSH
55121: LD_INT 116
55123: PUSH
55124: LD_INT 59
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 115
55133: PUSH
55134: LD_INT 67
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 114
55143: PUSH
55144: LD_INT 77
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: LIST
55155: ST_TO_ADDR
// hex_list_2 = [ [ 116 , 59 ] , [ 124 , 77 ] , [ 123 , 86 ] , [ 135 , 96 ] , [ 128 , 87 ] ] ;
55156: LD_ADDR_VAR 0 6
55160: PUSH
55161: LD_INT 116
55163: PUSH
55164: LD_INT 59
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 124
55173: PUSH
55174: LD_INT 77
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 123
55183: PUSH
55184: LD_INT 86
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 135
55193: PUSH
55194: LD_INT 96
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 128
55203: PUSH
55204: LD_INT 87
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: ST_TO_ADDR
// end else
55218: GO 55311
// begin hex_list_1 = [ [ 116 , 59 ] , [ 117 , 66 ] , [ 116 , 72 ] ] ;
55220: LD_ADDR_VAR 0 5
55224: PUSH
55225: LD_INT 116
55227: PUSH
55228: LD_INT 59
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 117
55237: PUSH
55238: LD_INT 66
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 116
55247: PUSH
55248: LD_INT 72
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: LIST
55259: ST_TO_ADDR
// hex_list_2 = [ [ 116 , 59 ] , [ 134 , 69 ] , [ 150 , 82 ] , [ 157 , 98 ] ] ;
55260: LD_ADDR_VAR 0 6
55264: PUSH
55265: LD_INT 116
55267: PUSH
55268: LD_INT 59
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 134
55277: PUSH
55278: LD_INT 69
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 150
55287: PUSH
55288: LD_INT 82
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 157
55297: PUSH
55298: LD_INT 98
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: ST_TO_ADDR
// end ; rand_hexes = [ ] ;
55311: LD_ADDR_VAR 0 8
55315: PUSH
55316: EMPTY
55317: ST_TO_ADDR
// for i in sniper_group_1 do
55318: LD_ADDR_VAR 0 1
55322: PUSH
55323: LD_VAR 0 3
55327: PUSH
55328: FOR_IN
55329: IFFALSE 55362
// rand_hexes = Replace ( rand_hexes , i , hex_list_1 [ 1 ] ) ;
55331: LD_ADDR_VAR 0 8
55335: PUSH
55336: LD_VAR 0 8
55340: PPUSH
55341: LD_VAR 0 1
55345: PPUSH
55346: LD_VAR 0 5
55350: PUSH
55351: LD_INT 1
55353: ARRAY
55354: PPUSH
55355: CALL_OW 1
55359: ST_TO_ADDR
55360: GO 55328
55362: POP
55363: POP
// for i in sniper_group_2 do
55364: LD_ADDR_VAR 0 1
55368: PUSH
55369: LD_VAR 0 4
55373: PUSH
55374: FOR_IN
55375: IFFALSE 55408
// rand_hexes = Replace ( rand_hexes , i , hex_list_2 [ 1 ] ) ;
55377: LD_ADDR_VAR 0 8
55381: PUSH
55382: LD_VAR 0 8
55386: PPUSH
55387: LD_VAR 0 1
55391: PPUSH
55392: LD_VAR 0 6
55396: PUSH
55397: LD_INT 1
55399: ARRAY
55400: PPUSH
55401: CALL_OW 1
55405: ST_TO_ADDR
55406: GO 55374
55408: POP
55409: POP
// repeat wait ( 0 0$1 ) ;
55410: LD_INT 35
55412: PPUSH
55413: CALL_OW 67
// sniper_group_1 = UnitFilter ( sniper_group_1 , [ f_ok ] ) ;
55417: LD_ADDR_VAR 0 3
55421: PUSH
55422: LD_VAR 0 3
55426: PPUSH
55427: LD_INT 50
55429: PUSH
55430: EMPTY
55431: LIST
55432: PPUSH
55433: CALL_OW 72
55437: ST_TO_ADDR
// sniper_group_2 = UnitFilter ( sniper_group_2 , [ f_ok ] ) ;
55438: LD_ADDR_VAR 0 4
55442: PUSH
55443: LD_VAR 0 4
55447: PPUSH
55448: LD_INT 50
55450: PUSH
55451: EMPTY
55452: LIST
55453: PPUSH
55454: CALL_OW 72
55458: ST_TO_ADDR
// if sniper_group_1 = 0 and sniper_group_2 = 0 then
55459: LD_VAR 0 3
55463: PUSH
55464: LD_INT 0
55466: EQUAL
55467: PUSH
55468: LD_VAR 0 4
55472: PUSH
55473: LD_INT 0
55475: EQUAL
55476: AND
55477: IFFALSE 55481
// exit ;
55479: GO 56271
// for i in sniper_group_1 do
55481: LD_ADDR_VAR 0 1
55485: PUSH
55486: LD_VAR 0 3
55490: PUSH
55491: FOR_IN
55492: IFFALSE 55872
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 2 then
55494: LD_VAR 0 1
55498: PPUSH
55499: LD_VAR 0 8
55503: PUSH
55504: LD_VAR 0 1
55508: ARRAY
55509: PUSH
55510: LD_INT 1
55512: ARRAY
55513: PPUSH
55514: LD_VAR 0 8
55518: PUSH
55519: LD_VAR 0 1
55523: ARRAY
55524: PUSH
55525: LD_INT 2
55527: ARRAY
55528: PPUSH
55529: CALL_OW 297
55533: PUSH
55534: LD_INT 2
55536: GREATER
55537: IFFALSE 55674
// begin if unit_hex [ i ] = hex_list_1 + 0 then
55539: LD_VAR 0 7
55543: PUSH
55544: LD_VAR 0 1
55548: ARRAY
55549: PUSH
55550: LD_VAR 0 5
55554: PUSH
55555: LD_INT 0
55557: PLUS
55558: EQUAL
55559: IFFALSE 55602
// ComAgressiveMove ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) else
55561: LD_VAR 0 1
55565: PPUSH
55566: LD_VAR 0 8
55570: PUSH
55571: LD_VAR 0 1
55575: ARRAY
55576: PUSH
55577: LD_INT 1
55579: ARRAY
55580: PPUSH
55581: LD_VAR 0 8
55585: PUSH
55586: LD_VAR 0 1
55590: ARRAY
55591: PUSH
55592: LD_INT 2
55594: ARRAY
55595: PPUSH
55596: CALL_OW 114
55600: GO 55641
// ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
55602: LD_VAR 0 1
55606: PPUSH
55607: LD_VAR 0 8
55611: PUSH
55612: LD_VAR 0 1
55616: ARRAY
55617: PUSH
55618: LD_INT 1
55620: ARRAY
55621: PPUSH
55622: LD_VAR 0 8
55626: PUSH
55627: LD_VAR 0 1
55631: ARRAY
55632: PUSH
55633: LD_INT 2
55635: ARRAY
55636: PPUSH
55637: CALL_OW 111
// if unit_hex [ i ] = hex_list_1 + 0 then
55641: LD_VAR 0 7
55645: PUSH
55646: LD_VAR 0 1
55650: ARRAY
55651: PUSH
55652: LD_VAR 0 5
55656: PUSH
55657: LD_INT 0
55659: PLUS
55660: EQUAL
55661: IFFALSE 55672
// AddComHold ( i ) ;
55663: LD_VAR 0 1
55667: PPUSH
55668: CALL_OW 200
// end else
55672: GO 55870
// if unit_hex [ i ] < hex_list_1 then
55674: LD_VAR 0 7
55678: PUSH
55679: LD_VAR 0 1
55683: ARRAY
55684: PUSH
55685: LD_VAR 0 5
55689: LESS
55690: IFFALSE 55870
// begin unit_hex = Replace ( unit_hex , i , unit_hex [ i ] + 1 ) ;
55692: LD_ADDR_VAR 0 7
55696: PUSH
55697: LD_VAR 0 7
55701: PPUSH
55702: LD_VAR 0 1
55706: PPUSH
55707: LD_VAR 0 7
55711: PUSH
55712: LD_VAR 0 1
55716: ARRAY
55717: PUSH
55718: LD_INT 1
55720: PLUS
55721: PPUSH
55722: CALL_OW 1
55726: ST_TO_ADDR
// k = 0 ;
55727: LD_ADDR_VAR 0 9
55731: PUSH
55732: LD_INT 0
55734: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list_1 [ unit_hex [ i ] ] [ 1 ] , hex_list_1 [ unit_hex [ i ] ] [ 2 ] , 1 , false ) ;
55735: LD_ADDR_VAR 0 2
55739: PUSH
55740: LD_VAR 0 5
55744: PUSH
55745: LD_VAR 0 7
55749: PUSH
55750: LD_VAR 0 1
55754: ARRAY
55755: ARRAY
55756: PUSH
55757: LD_INT 1
55759: ARRAY
55760: PPUSH
55761: LD_VAR 0 5
55765: PUSH
55766: LD_VAR 0 7
55770: PUSH
55771: LD_VAR 0 1
55775: ARRAY
55776: ARRAY
55777: PUSH
55778: LD_INT 2
55780: ARRAY
55781: PPUSH
55782: LD_INT 1
55784: PPUSH
55785: LD_INT 0
55787: PPUSH
55788: CALL_OW 17
55792: ST_TO_ADDR
// k = k + 1 ;
55793: LD_ADDR_VAR 0 9
55797: PUSH
55798: LD_VAR 0 9
55802: PUSH
55803: LD_INT 1
55805: PLUS
55806: ST_TO_ADDR
// until HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 or k >= 10 ;
55807: LD_VAR 0 2
55811: PUSH
55812: LD_INT 1
55814: ARRAY
55815: PPUSH
55816: LD_VAR 0 2
55820: PUSH
55821: LD_INT 2
55823: ARRAY
55824: PPUSH
55825: CALL_OW 428
55829: PUSH
55830: LD_INT 0
55832: GREATEREQUAL
55833: PUSH
55834: LD_VAR 0 9
55838: PUSH
55839: LD_INT 10
55841: GREATEREQUAL
55842: OR
55843: IFFALSE 55735
// rand_hexes = Replace ( rand_hexes , i , val ) ;
55845: LD_ADDR_VAR 0 8
55849: PUSH
55850: LD_VAR 0 8
55854: PPUSH
55855: LD_VAR 0 1
55859: PPUSH
55860: LD_VAR 0 2
55864: PPUSH
55865: CALL_OW 1
55869: ST_TO_ADDR
// end ; end ;
55870: GO 55491
55872: POP
55873: POP
// for i in sniper_group_2 do
55874: LD_ADDR_VAR 0 1
55878: PUSH
55879: LD_VAR 0 4
55883: PUSH
55884: FOR_IN
55885: IFFALSE 56265
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 2 then
55887: LD_VAR 0 1
55891: PPUSH
55892: LD_VAR 0 8
55896: PUSH
55897: LD_VAR 0 1
55901: ARRAY
55902: PUSH
55903: LD_INT 1
55905: ARRAY
55906: PPUSH
55907: LD_VAR 0 8
55911: PUSH
55912: LD_VAR 0 1
55916: ARRAY
55917: PUSH
55918: LD_INT 2
55920: ARRAY
55921: PPUSH
55922: CALL_OW 297
55926: PUSH
55927: LD_INT 2
55929: GREATER
55930: IFFALSE 56067
// begin if unit_hex [ i ] = hex_list_2 + 0 then
55932: LD_VAR 0 7
55936: PUSH
55937: LD_VAR 0 1
55941: ARRAY
55942: PUSH
55943: LD_VAR 0 6
55947: PUSH
55948: LD_INT 0
55950: PLUS
55951: EQUAL
55952: IFFALSE 55995
// ComAgressiveMove ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) else
55954: LD_VAR 0 1
55958: PPUSH
55959: LD_VAR 0 8
55963: PUSH
55964: LD_VAR 0 1
55968: ARRAY
55969: PUSH
55970: LD_INT 1
55972: ARRAY
55973: PPUSH
55974: LD_VAR 0 8
55978: PUSH
55979: LD_VAR 0 1
55983: ARRAY
55984: PUSH
55985: LD_INT 2
55987: ARRAY
55988: PPUSH
55989: CALL_OW 114
55993: GO 56034
// ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
55995: LD_VAR 0 1
55999: PPUSH
56000: LD_VAR 0 8
56004: PUSH
56005: LD_VAR 0 1
56009: ARRAY
56010: PUSH
56011: LD_INT 1
56013: ARRAY
56014: PPUSH
56015: LD_VAR 0 8
56019: PUSH
56020: LD_VAR 0 1
56024: ARRAY
56025: PUSH
56026: LD_INT 2
56028: ARRAY
56029: PPUSH
56030: CALL_OW 111
// if unit_hex [ i ] = hex_list_2 + 0 then
56034: LD_VAR 0 7
56038: PUSH
56039: LD_VAR 0 1
56043: ARRAY
56044: PUSH
56045: LD_VAR 0 6
56049: PUSH
56050: LD_INT 0
56052: PLUS
56053: EQUAL
56054: IFFALSE 56065
// AddComHold ( i ) ;
56056: LD_VAR 0 1
56060: PPUSH
56061: CALL_OW 200
// end else
56065: GO 56263
// if unit_hex [ i ] < hex_list_2 then
56067: LD_VAR 0 7
56071: PUSH
56072: LD_VAR 0 1
56076: ARRAY
56077: PUSH
56078: LD_VAR 0 6
56082: LESS
56083: IFFALSE 56263
// begin unit_hex = Replace ( unit_hex , i , unit_hex [ i ] + 1 ) ;
56085: LD_ADDR_VAR 0 7
56089: PUSH
56090: LD_VAR 0 7
56094: PPUSH
56095: LD_VAR 0 1
56099: PPUSH
56100: LD_VAR 0 7
56104: PUSH
56105: LD_VAR 0 1
56109: ARRAY
56110: PUSH
56111: LD_INT 1
56113: PLUS
56114: PPUSH
56115: CALL_OW 1
56119: ST_TO_ADDR
// k = 0 ;
56120: LD_ADDR_VAR 0 9
56124: PUSH
56125: LD_INT 0
56127: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list_2 [ unit_hex [ i ] ] [ 1 ] , hex_list_2 [ unit_hex [ i ] ] [ 2 ] , 1 , false ) ;
56128: LD_ADDR_VAR 0 2
56132: PUSH
56133: LD_VAR 0 6
56137: PUSH
56138: LD_VAR 0 7
56142: PUSH
56143: LD_VAR 0 1
56147: ARRAY
56148: ARRAY
56149: PUSH
56150: LD_INT 1
56152: ARRAY
56153: PPUSH
56154: LD_VAR 0 6
56158: PUSH
56159: LD_VAR 0 7
56163: PUSH
56164: LD_VAR 0 1
56168: ARRAY
56169: ARRAY
56170: PUSH
56171: LD_INT 2
56173: ARRAY
56174: PPUSH
56175: LD_INT 1
56177: PPUSH
56178: LD_INT 0
56180: PPUSH
56181: CALL_OW 17
56185: ST_TO_ADDR
// k = k + 1 ;
56186: LD_ADDR_VAR 0 9
56190: PUSH
56191: LD_VAR 0 9
56195: PUSH
56196: LD_INT 1
56198: PLUS
56199: ST_TO_ADDR
// until HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 or k >= 10 ;
56200: LD_VAR 0 2
56204: PUSH
56205: LD_INT 1
56207: ARRAY
56208: PPUSH
56209: LD_VAR 0 2
56213: PUSH
56214: LD_INT 2
56216: ARRAY
56217: PPUSH
56218: CALL_OW 428
56222: PUSH
56223: LD_INT 0
56225: GREATEREQUAL
56226: PUSH
56227: LD_VAR 0 9
56231: PUSH
56232: LD_INT 10
56234: GREATEREQUAL
56235: OR
56236: IFFALSE 56128
// rand_hexes = Replace ( rand_hexes , i , val ) ;
56238: LD_ADDR_VAR 0 8
56242: PUSH
56243: LD_VAR 0 8
56247: PPUSH
56248: LD_VAR 0 1
56252: PPUSH
56253: LD_VAR 0 2
56257: PPUSH
56258: CALL_OW 1
56262: ST_TO_ADDR
// end ; end ;
56263: GO 55884
56265: POP
56266: POP
// until false ;
56267: LD_INT 0
56269: IFFALSE 55410
// end ;
56271: PPOPN 9
56273: END
// every 0 0$1 + 0 0$0.9 trigger game_phase = 3 do var old_man , x , y , temp_list , dist ; var hex , hex_list_before , hex_list_after ;
56274: LD_EXP 89
56278: PUSH
56279: LD_INT 3
56281: EQUAL
56282: IFFALSE 57904
56284: GO 56286
56286: DISABLE
56287: LD_INT 0
56289: PPUSH
56290: PPUSH
56291: PPUSH
56292: PPUSH
56293: PPUSH
56294: PPUSH
56295: PPUSH
56296: PPUSH
// begin while ( ai_vehicles_attack [ 3 ] > 0 or ai_attacking_scientists [ 3 ] > 0 or ai_attacking_soldiers [ 3 ] > 0 ) and russian_attack_strategy <> 1 do
56297: LD_EXP 41
56301: PUSH
56302: LD_INT 3
56304: ARRAY
56305: PUSH
56306: LD_INT 0
56308: GREATER
56309: PUSH
56310: LD_EXP 65
56314: PUSH
56315: LD_INT 3
56317: ARRAY
56318: PUSH
56319: LD_INT 0
56321: GREATER
56322: OR
56323: PUSH
56324: LD_EXP 64
56328: PUSH
56329: LD_INT 3
56331: ARRAY
56332: PUSH
56333: LD_INT 0
56335: GREATER
56336: OR
56337: PUSH
56338: LD_EXP 84
56342: PUSH
56343: LD_INT 1
56345: NONEQUAL
56346: AND
56347: IFFALSE 56358
// wait ( 0 0$2 ) ;
56349: LD_INT 70
56351: PPUSH
56352: CALL_OW 67
56356: GO 56297
// if PlayerAtEasternBorder then
56358: CALL 31946 0 0
56362: IFFALSE 56424
// begin hex_list_before = [ [ 127 , 42 ] , [ 139 , 45 ] ] ;
56364: LD_ADDR_VAR 0 7
56368: PUSH
56369: LD_INT 127
56371: PUSH
56372: LD_INT 42
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 139
56381: PUSH
56382: LD_INT 45
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: ST_TO_ADDR
// hex_list_after = [ [ 139 , 45 ] , [ 138 , 39 ] ] ;
56393: LD_ADDR_VAR 0 8
56397: PUSH
56398: LD_INT 139
56400: PUSH
56401: LD_INT 45
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 138
56410: PUSH
56411: LD_INT 39
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: ST_TO_ADDR
// end else
56422: GO 56493
// begin hex_list_before = [ [ 119 , 55 ] , [ 124 , 73 ] , [ 121 , 86 ] ] ;
56424: LD_ADDR_VAR 0 7
56428: PUSH
56429: LD_INT 119
56431: PUSH
56432: LD_INT 55
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 124
56441: PUSH
56442: LD_INT 73
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 121
56451: PUSH
56452: LD_INT 86
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: ST_TO_ADDR
// hex_list_after = [ [ 121 , 99 ] , [ 141 , 118 ] ] ;
56464: LD_ADDR_VAR 0 8
56468: PUSH
56469: LD_INT 121
56471: PUSH
56472: LD_INT 99
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 141
56481: PUSH
56482: LD_INT 118
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// end ; temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56493: LD_ADDR_VAR 0 4
56497: PUSH
56498: LD_INT 22
56500: PUSH
56501: LD_EXP 3
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 30
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 30
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PPUSH
56542: CALL_OW 69
56546: ST_TO_ADDR
// if temp_list > 0 then
56547: LD_VAR 0 4
56551: PUSH
56552: LD_INT 0
56554: GREATER
56555: IFFALSE 56596
// hex = [ GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ] else
56557: LD_ADDR_VAR 0 6
56561: PUSH
56562: LD_VAR 0 4
56566: PUSH
56567: LD_INT 1
56569: ARRAY
56570: PPUSH
56571: CALL_OW 250
56575: PUSH
56576: LD_VAR 0 4
56580: PUSH
56581: LD_INT 1
56583: ARRAY
56584: PPUSH
56585: CALL_OW 251
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: ST_TO_ADDR
56594: GO 56634
// if PlayerAtEasternBorder then
56596: CALL 31946 0 0
56600: IFFALSE 56619
// hex = [ 144 , 65 ] else
56602: LD_ADDR_VAR 0 6
56606: PUSH
56607: LD_INT 144
56609: PUSH
56610: LD_INT 65
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: ST_TO_ADDR
56617: GO 56634
// hex = [ 99 , 110 ] ;
56619: LD_ADDR_VAR 0 6
56623: PUSH
56624: LD_INT 99
56626: PUSH
56627: LD_INT 110
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: ST_TO_ADDR
// hex_list_before = hex_list_before ^ [ hex ] ;
56634: LD_ADDR_VAR 0 7
56638: PUSH
56639: LD_VAR 0 7
56643: PUSH
56644: LD_VAR 0 6
56648: PUSH
56649: EMPTY
56650: LIST
56651: ADD
56652: ST_TO_ADDR
// SetDir ( Khattam , 5 ) ;
56653: LD_EXP 27
56657: PPUSH
56658: LD_INT 5
56660: PPUSH
56661: CALL_OW 233
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] , [ f_ok ] ] ) ;
56665: LD_ADDR_VAR 0 4
56669: PUSH
56670: LD_INT 22
56672: PUSH
56673: LD_EXP 7
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: LD_INT 30
56687: PUSH
56688: LD_INT 6
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 30
56697: PUSH
56698: LD_INT 7
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 30
56707: PUSH
56708: LD_INT 8
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 50
56723: PUSH
56724: EMPTY
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: PPUSH
56732: CALL_OW 69
56736: ST_TO_ADDR
// if temp_list > 0 then
56737: LD_VAR 0 4
56741: PUSH
56742: LD_INT 0
56744: GREATER
56745: IFFALSE 56873
// begin while not PlaceHumanInUnit ( Khattam , temp_list [ 1 ] ) do
56747: LD_EXP 27
56751: PPUSH
56752: LD_VAR 0 4
56756: PUSH
56757: LD_INT 1
56759: ARRAY
56760: PPUSH
56761: CALL_OW 52
56765: NOT
56766: IFFALSE 56871
// begin if not IsOk ( temp_list [ 1 ] ) or UnitsInside ( temp_list [ 1 ] ) + 0 = 6 then
56768: LD_VAR 0 4
56772: PUSH
56773: LD_INT 1
56775: ARRAY
56776: PPUSH
56777: CALL_OW 302
56781: NOT
56782: PUSH
56783: LD_VAR 0 4
56787: PUSH
56788: LD_INT 1
56790: ARRAY
56791: PPUSH
56792: CALL_OW 313
56796: PUSH
56797: LD_INT 0
56799: PLUS
56800: PUSH
56801: LD_INT 6
56803: EQUAL
56804: OR
56805: IFFALSE 56862
// begin while not PlaceUnitXYR ( Khattam , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 4 , false ) do
56807: LD_EXP 27
56811: PPUSH
56812: LD_EXP 42
56816: PUSH
56817: LD_INT 1
56819: ARRAY
56820: PUSH
56821: LD_INT 1
56823: ARRAY
56824: PPUSH
56825: LD_EXP 42
56829: PUSH
56830: LD_INT 1
56832: ARRAY
56833: PUSH
56834: LD_INT 2
56836: ARRAY
56837: PPUSH
56838: LD_INT 4
56840: PPUSH
56841: LD_INT 0
56843: PPUSH
56844: CALL_OW 50
56848: NOT
56849: IFFALSE 56860
// wait ( 0 0$2 ) ;
56851: LD_INT 70
56853: PPUSH
56854: CALL_OW 67
56858: GO 56807
// break ;
56860: GO 56871
// end ; wait ( 0 0$2 ) ;
56862: LD_INT 70
56864: PPUSH
56865: CALL_OW 67
// end ;
56869: GO 56747
// end else
56871: GO 56926
// begin while not PlaceUnitXYR ( Khattam , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 4 , false ) do
56873: LD_EXP 27
56877: PPUSH
56878: LD_EXP 42
56882: PUSH
56883: LD_INT 1
56885: ARRAY
56886: PUSH
56887: LD_INT 1
56889: ARRAY
56890: PPUSH
56891: LD_EXP 42
56895: PUSH
56896: LD_INT 1
56898: ARRAY
56899: PUSH
56900: LD_INT 2
56902: ARRAY
56903: PPUSH
56904: LD_INT 4
56906: PPUSH
56907: LD_INT 0
56909: PPUSH
56910: CALL_OW 50
56914: NOT
56915: IFFALSE 56926
// wait ( 0 0$2 ) ;
56917: LD_INT 70
56919: PPUSH
56920: CALL_OW 67
56924: GO 56873
// end ; SetAttitude ( you , americans_alt , att_neutral , true ) ;
56926: LD_EXP 3
56930: PPUSH
56931: LD_EXP 9
56935: PPUSH
56936: LD_INT 0
56938: PPUSH
56939: LD_INT 1
56941: PPUSH
56942: CALL_OW 80
// hex = 1 ;
56946: LD_ADDR_VAR 0 6
56950: PUSH
56951: LD_INT 1
56953: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56954: LD_INT 35
56956: PPUSH
56957: CALL_OW 67
// if GetDistUnitXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) > 3 then
56961: LD_EXP 27
56965: PPUSH
56966: LD_VAR 0 7
56970: PUSH
56971: LD_VAR 0 6
56975: ARRAY
56976: PUSH
56977: LD_INT 1
56979: ARRAY
56980: PPUSH
56981: LD_VAR 0 7
56985: PUSH
56986: LD_VAR 0 6
56990: ARRAY
56991: PUSH
56992: LD_INT 2
56994: ARRAY
56995: PPUSH
56996: CALL_OW 297
57000: PUSH
57001: LD_INT 3
57003: GREATER
57004: IFFALSE 57047
// ComMoveXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
57006: LD_EXP 27
57010: PPUSH
57011: LD_VAR 0 7
57015: PUSH
57016: LD_VAR 0 6
57020: ARRAY
57021: PUSH
57022: LD_INT 1
57024: ARRAY
57025: PPUSH
57026: LD_VAR 0 7
57030: PUSH
57031: LD_VAR 0 6
57035: ARRAY
57036: PUSH
57037: LD_INT 2
57039: ARRAY
57040: PPUSH
57041: CALL_OW 111
57045: GO 57073
// if hex < hex_list_before then
57047: LD_VAR 0 6
57051: PUSH
57052: LD_VAR 0 7
57056: LESS
57057: IFFALSE 57073
// hex = hex + 1 ;
57059: LD_ADDR_VAR 0 6
57063: PUSH
57064: LD_VAR 0 6
57068: PUSH
57069: LD_INT 1
57071: PLUS
57072: ST_TO_ADDR
// until See ( you , Khattam ) or IsDead ( Khattam ) ;
57073: LD_EXP 3
57077: PPUSH
57078: LD_EXP 27
57082: PPUSH
57083: CALL_OW 292
57087: PUSH
57088: LD_EXP 27
57092: PPUSH
57093: CALL_OW 301
57097: OR
57098: IFFALSE 56954
// if See ( you , Khattam ) then
57100: LD_EXP 3
57104: PPUSH
57105: LD_EXP 27
57109: PPUSH
57110: CALL_OW 292
57114: IFFALSE 57904
// begin CenterOnUnits ( Khattam ) ;
57116: LD_EXP 27
57120: PPUSH
57121: CALL_OW 85
// DialogueOn ;
57125: CALL_OW 6
// ForceSay ( Khattam , D9-Kh-1 ) ;
57129: LD_EXP 27
57133: PPUSH
57134: LD_STRING D9-Kh-1
57136: PPUSH
57137: CALL_OW 91
// if IsOk ( Oswald ) then
57141: LD_EXP 12
57145: PPUSH
57146: CALL_OW 302
57150: IFFALSE 57186
// begin if oswald_is_substitute then
57152: LD_EXP 81
57156: IFFALSE 57172
// Say ( Oswald , D9-Os_sub-1 ) else
57158: LD_EXP 12
57162: PPUSH
57163: LD_STRING D9-Os_sub-1
57165: PPUSH
57166: CALL_OW 88
57170: GO 57184
// Say ( Oswald , D9-Os-1 ) ;
57172: LD_EXP 12
57176: PPUSH
57177: LD_STRING D9-Os-1
57179: PPUSH
57180: CALL_OW 88
// end else
57184: GO 57198
// ForceSay ( Heike , D9-H-1 ) ;
57186: LD_EXP 10
57190: PPUSH
57191: LD_STRING D9-H-1
57193: PPUSH
57194: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-2 ) ;
57198: LD_EXP 27
57202: PPUSH
57203: LD_STRING D9-Kh-2
57205: PPUSH
57206: CALL_OW 91
// ForceSay ( Heike , D9-H-2 ) ;
57210: LD_EXP 10
57214: PPUSH
57215: LD_STRING D9-H-2
57217: PPUSH
57218: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-3 ) ;
57222: LD_EXP 27
57226: PPUSH
57227: LD_STRING D9-Kh-3
57229: PPUSH
57230: CALL_OW 91
// dwait ( 0 0$0.2 ) ;
57234: LD_INT 7
57236: PPUSH
57237: CALL_OW 68
// khattam_choice = Query ( QKhattamJoin ) ;
57241: LD_ADDR_EXP 96
57245: PUSH
57246: LD_STRING QKhattamJoin
57248: PPUSH
57249: CALL_OW 97
57253: ST_TO_ADDR
// case khattam_choice of 1 :
57254: LD_EXP 96
57258: PUSH
57259: LD_INT 1
57261: DOUBLE
57262: EQUAL
57263: IFTRUE 57267
57265: GO 57695
57267: POP
// begin ForceSay ( Heike , D9-H-1-1 ) ;
57268: LD_EXP 10
57272: PPUSH
57273: LD_STRING D9-H-1-1
57275: PPUSH
57276: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-1-1 ) ;
57280: LD_EXP 27
57284: PPUSH
57285: LD_STRING D9-Kh-1-1
57287: PPUSH
57288: CALL_OW 91
// DialogueOff ;
57292: CALL_OW 7
// SetAttitude ( you , americans_alt , att_friend , true ) ;
57296: LD_EXP 3
57300: PPUSH
57301: LD_EXP 9
57305: PPUSH
57306: LD_INT 1
57308: PPUSH
57309: LD_INT 1
57311: PPUSH
57312: CALL_OW 80
// while FilterAllUnits ( [ [ f_side , americans ] , [ f_ok ] , [ f_dist , Khattam , 17 ] ] ) > 0 do
57316: LD_INT 22
57318: PUSH
57319: LD_EXP 7
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 50
57330: PUSH
57331: EMPTY
57332: LIST
57333: PUSH
57334: LD_INT 91
57336: PUSH
57337: LD_EXP 27
57341: PUSH
57342: LD_INT 17
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: PPUSH
57355: CALL_OW 69
57359: PUSH
57360: LD_INT 0
57362: GREATER
57363: IFFALSE 57527
// begin dist = GetDistUnitXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) ;
57365: LD_ADDR_VAR 0 5
57369: PUSH
57370: LD_EXP 27
57374: PPUSH
57375: LD_VAR 0 7
57379: PUSH
57380: LD_VAR 0 6
57384: ARRAY
57385: PUSH
57386: LD_INT 1
57388: ARRAY
57389: PPUSH
57390: LD_VAR 0 7
57394: PUSH
57395: LD_VAR 0 6
57399: ARRAY
57400: PUSH
57401: LD_INT 2
57403: ARRAY
57404: PPUSH
57405: CALL_OW 297
57409: ST_TO_ADDR
// if not ( dist <= 3 or ( hex = hex_list_before + 0 and dist <= 7 ) ) then
57410: LD_VAR 0 5
57414: PUSH
57415: LD_INT 3
57417: LESSEQUAL
57418: PUSH
57419: LD_VAR 0 6
57423: PUSH
57424: LD_VAR 0 7
57428: PUSH
57429: LD_INT 0
57431: PLUS
57432: EQUAL
57433: PUSH
57434: LD_VAR 0 5
57438: PUSH
57439: LD_INT 7
57441: LESSEQUAL
57442: AND
57443: OR
57444: NOT
57445: IFFALSE 57488
// ComMoveXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
57447: LD_EXP 27
57451: PPUSH
57452: LD_VAR 0 7
57456: PUSH
57457: LD_VAR 0 6
57461: ARRAY
57462: PUSH
57463: LD_INT 1
57465: ARRAY
57466: PPUSH
57467: LD_VAR 0 7
57471: PUSH
57472: LD_VAR 0 6
57476: ARRAY
57477: PUSH
57478: LD_INT 2
57480: ARRAY
57481: PPUSH
57482: CALL_OW 111
57486: GO 57518
// if hex < hex_list_before then
57488: LD_VAR 0 6
57492: PUSH
57493: LD_VAR 0 7
57497: LESS
57498: IFFALSE 57516
// hex = hex + 1 else
57500: LD_ADDR_VAR 0 6
57504: PUSH
57505: LD_VAR 0 6
57509: PUSH
57510: LD_INT 1
57512: PLUS
57513: ST_TO_ADDR
57514: GO 57518
// break ;
57516: GO 57527
// wait ( 0 0$1 ) ;
57518: LD_INT 35
57520: PPUSH
57521: CALL_OW 67
// end ;
57525: GO 57316
// PrepareNewCharacter ( Khatam ) ;
57527: LD_STRING Khatam
57529: PPUSH
57530: CALL_OW 26
// uc_side = you ;
57534: LD_ADDR_OWVAR 20
57538: PUSH
57539: LD_EXP 3
57543: ST_TO_ADDR
// uc_nation = nation_american ;
57544: LD_ADDR_OWVAR 21
57548: PUSH
57549: LD_INT 1
57551: ST_TO_ADDR
// old_man = Khattam ;
57552: LD_ADDR_VAR 0 1
57556: PUSH
57557: LD_EXP 27
57561: ST_TO_ADDR
// Khattam = CreateHuman ;
57562: LD_ADDR_EXP 27
57566: PUSH
57567: CALL_OW 44
57571: ST_TO_ADDR
// hc_importance = 0 ;
57572: LD_ADDR_OWVAR 32
57576: PUSH
57577: LD_INT 0
57579: ST_TO_ADDR
// CopySkills ( old_man , Khattam ) ;
57580: LD_VAR 0 1
57584: PPUSH
57585: LD_EXP 27
57589: PPUSH
57590: CALL_OW 510
// x = GetX ( old_man ) ;
57594: LD_ADDR_VAR 0 2
57598: PUSH
57599: LD_VAR 0 1
57603: PPUSH
57604: CALL_OW 250
57608: ST_TO_ADDR
// y = GetY ( old_man ) ;
57609: LD_ADDR_VAR 0 3
57613: PUSH
57614: LD_VAR 0 1
57618: PPUSH
57619: CALL_OW 251
57623: ST_TO_ADDR
// SetDir ( Khattam , GetDir ( old_man ) ) ;
57624: LD_EXP 27
57628: PPUSH
57629: LD_VAR 0 1
57633: PPUSH
57634: CALL_OW 254
57638: PPUSH
57639: CALL_OW 233
// SetLives ( Khattam , GetLives ( old_man ) ) ;
57643: LD_EXP 27
57647: PPUSH
57648: LD_VAR 0 1
57652: PPUSH
57653: CALL_OW 256
57657: PPUSH
57658: CALL_OW 234
// RemoveUnit ( old_man ) ;
57662: LD_VAR 0 1
57666: PPUSH
57667: CALL_OW 64
// PlaceUnitXY ( Khattam , x , y , false ) ;
57671: LD_EXP 27
57675: PPUSH
57676: LD_VAR 0 2
57680: PPUSH
57681: LD_VAR 0 3
57685: PPUSH
57686: LD_INT 0
57688: PPUSH
57689: CALL_OW 48
// end ; 2 :
57693: GO 57735
57695: LD_INT 2
57697: DOUBLE
57698: EQUAL
57699: IFTRUE 57703
57701: GO 57734
57703: POP
// begin ForceSay ( Heike , D9-H-2-1 ) ;
57704: LD_EXP 10
57708: PPUSH
57709: LD_STRING D9-H-2-1
57711: PPUSH
57712: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-2-1 ) ;
57716: LD_EXP 27
57720: PPUSH
57721: LD_STRING D9-Kh-2-1
57723: PPUSH
57724: CALL_OW 91
// DialogueOff ;
57728: CALL_OW 7
// end ; end ;
57732: GO 57735
57734: POP
// ComStop ( Khattam ) ;
57735: LD_EXP 27
57739: PPUSH
57740: CALL_OW 141
// if khattam_choice = 2 then
57744: LD_EXP 96
57748: PUSH
57749: LD_INT 2
57751: EQUAL
57752: IFFALSE 57904
// begin hex = 1 ;
57754: LD_ADDR_VAR 0 6
57758: PUSH
57759: LD_INT 1
57761: ST_TO_ADDR
// repeat if GetDistUnitXY ( Khattam , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) > 3 then
57762: LD_EXP 27
57766: PPUSH
57767: LD_VAR 0 8
57771: PUSH
57772: LD_VAR 0 6
57776: ARRAY
57777: PUSH
57778: LD_INT 1
57780: ARRAY
57781: PPUSH
57782: LD_VAR 0 8
57786: PUSH
57787: LD_VAR 0 6
57791: ARRAY
57792: PUSH
57793: LD_INT 2
57795: ARRAY
57796: PPUSH
57797: CALL_OW 297
57801: PUSH
57802: LD_INT 3
57804: GREATER
57805: IFFALSE 57848
// ComMoveXY ( Khattam , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) else
57807: LD_EXP 27
57811: PPUSH
57812: LD_VAR 0 8
57816: PUSH
57817: LD_VAR 0 6
57821: ARRAY
57822: PUSH
57823: LD_INT 1
57825: ARRAY
57826: PPUSH
57827: LD_VAR 0 8
57831: PUSH
57832: LD_VAR 0 6
57836: ARRAY
57837: PUSH
57838: LD_INT 2
57840: ARRAY
57841: PPUSH
57842: CALL_OW 111
57846: GO 57885
// if hex < hex_list_after then
57848: LD_VAR 0 6
57852: PUSH
57853: LD_VAR 0 8
57857: LESS
57858: IFFALSE 57876
// hex = hex + 1 else
57860: LD_ADDR_VAR 0 6
57864: PUSH
57865: LD_VAR 0 6
57869: PUSH
57870: LD_INT 1
57872: PLUS
57873: ST_TO_ADDR
57874: GO 57885
// RemoveUnit ( Khattam ) ;
57876: LD_EXP 27
57880: PPUSH
57881: CALL_OW 64
// wait ( 0 0$1 ) ;
57885: LD_INT 35
57887: PPUSH
57888: CALL_OW 67
// until not IsPlaced ( Khattam ) ;
57892: LD_EXP 27
57896: PPUSH
57897: CALL_OW 305
57901: NOT
57902: IFFALSE 57762
// end ; end ; end ;
57904: PPOPN 8
57906: END
// every 0 0$1 + 0 0$0.8 trigger game_phase = 3 do var init_buildings , init_humans , temp_list , temp_unit ;
57907: LD_EXP 89
57911: PUSH
57912: LD_INT 3
57914: EQUAL
57915: IFFALSE 58488
57917: GO 57919
57919: DISABLE
57920: LD_INT 0
57922: PPUSH
57923: PPUSH
57924: PPUSH
57925: PPUSH
// begin init_buildings = GetAmBuildings ;
57926: LD_ADDR_VAR 0 1
57930: PUSH
57931: CALL 58491 0 0
57935: ST_TO_ADDR
// init_humans = GetAmHumans ;
57936: LD_ADDR_VAR 0 2
57940: PUSH
57941: CALL 58578 0 0
57945: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
57946: LD_INT 175
57948: PPUSH
57949: CALL_OW 67
// until init_buildings >= GetAmBuildings * 2 or init_humans >= GetAmHumans * 2 ;
57953: LD_VAR 0 1
57957: PUSH
57958: CALL 58491 0 0
57962: PUSH
57963: LD_INT 2
57965: MUL
57966: GREATEREQUAL
57967: PUSH
57968: LD_VAR 0 2
57972: PUSH
57973: CALL 58578 0 0
57977: PUSH
57978: LD_INT 2
57980: MUL
57981: GREATEREQUAL
57982: OR
57983: IFFALSE 57946
// DialogueOn ;
57985: CALL_OW 6
// SayRadio ( Simms , D10-Simm-1 ) ;
57989: LD_EXP 25
57993: PPUSH
57994: LD_STRING D10-Simm-1
57996: PPUSH
57997: CALL_OW 94
// ForceSay ( Heike , D10-H-1 ) ;
58001: LD_EXP 10
58005: PPUSH
58006: LD_STRING D10-H-1
58008: PPUSH
58009: CALL_OW 91
// SayRadio ( Simms , D10-Simm-2 ) ;
58013: LD_EXP 25
58017: PPUSH
58018: LD_STRING D10-Simm-2
58020: PPUSH
58021: CALL_OW 94
// ForceSay ( Heike , D10-H-2 ) ;
58025: LD_EXP 10
58029: PPUSH
58030: LD_STRING D10-H-2
58032: PPUSH
58033: CALL_OW 91
// SayRadio ( Simms , D10-Simm-3 ) ;
58037: LD_EXP 25
58041: PPUSH
58042: LD_STRING D10-Simm-3
58044: PPUSH
58045: CALL_OW 94
// ForceSay ( Heike , D10-H-3 ) ;
58049: LD_EXP 10
58053: PPUSH
58054: LD_STRING D10-H-3
58056: PPUSH
58057: CALL_OW 91
// SayRadio ( Simms , D10-Simm-4 ) ;
58061: LD_EXP 25
58065: PPUSH
58066: LD_STRING D10-Simm-4
58068: PPUSH
58069: CALL_OW 94
// temp_list = UnitFilter ( [ Kowalski , Suze , Kurt , Dwayne ] , [ f_alive ] ) ;
58073: LD_ADDR_VAR 0 3
58077: PUSH
58078: LD_EXP 14
58082: PUSH
58083: LD_EXP 16
58087: PUSH
58088: LD_EXP 18
58092: PUSH
58093: LD_EXP 19
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: PPUSH
58104: LD_INT 51
58106: PUSH
58107: EMPTY
58108: LIST
58109: PPUSH
58110: CALL_OW 72
58114: ST_TO_ADDR
// if temp_list = 0 then
58115: LD_VAR 0 3
58119: PUSH
58120: LD_INT 0
58122: EQUAL
58123: IFFALSE 58253
// temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
58125: LD_ADDR_VAR 0 3
58129: PUSH
58130: LD_INT 22
58132: PUSH
58133: LD_EXP 3
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 21
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PPUSH
58156: CALL_OW 69
58160: PUSH
58161: LD_EXP 3
58165: PPUSH
58166: CALL 44447 0 1
58170: PUSH
58171: LD_EXP 10
58175: PUSH
58176: LD_EXP 11
58180: PUSH
58181: LD_EXP 12
58185: PUSH
58186: LD_EXP 13
58190: PUSH
58191: LD_EXP 14
58195: PUSH
58196: LD_EXP 15
58200: PUSH
58201: LD_EXP 16
58205: PUSH
58206: LD_EXP 17
58210: PUSH
58211: LD_EXP 18
58215: PUSH
58216: LD_EXP 19
58220: PUSH
58221: LD_EXP 20
58225: PUSH
58226: LD_EXP 21
58230: PUSH
58231: LD_EXP 22
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: ADD
58251: DIFF
58252: ST_TO_ADDR
// if temp_list > 0 then
58253: LD_VAR 0 3
58257: PUSH
58258: LD_INT 0
58260: GREATER
58261: IFFALSE 58454
// begin temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
58263: LD_ADDR_VAR 0 4
58267: PUSH
58268: LD_VAR 0 3
58272: PUSH
58273: LD_INT 1
58275: PPUSH
58276: LD_VAR 0 3
58280: PPUSH
58281: CALL_OW 12
58285: ARRAY
58286: ST_TO_ADDR
// case temp_unit of Kowalski :
58287: LD_VAR 0 4
58291: PUSH
58292: LD_EXP 14
58296: DOUBLE
58297: EQUAL
58298: IFTRUE 58302
58300: GO 58317
58302: POP
// ForceSay ( temp_unit , D10-Ko-1 ) ; Suze :
58303: LD_VAR 0 4
58307: PPUSH
58308: LD_STRING D10-Ko-1
58310: PPUSH
58311: CALL_OW 91
58315: GO 58454
58317: LD_EXP 16
58321: DOUBLE
58322: EQUAL
58323: IFTRUE 58327
58325: GO 58342
58327: POP
// ForceSay ( temp_unit , D10-Su-1 ) ; Kurt :
58328: LD_VAR 0 4
58332: PPUSH
58333: LD_STRING D10-Su-1
58335: PPUSH
58336: CALL_OW 91
58340: GO 58454
58342: LD_EXP 18
58346: DOUBLE
58347: EQUAL
58348: IFTRUE 58352
58350: GO 58387
58352: POP
// begin if kurt_is_substitute then
58353: LD_EXP 82
58357: IFFALSE 58373
// ForceSay ( temp_unit , D10-Ku-1 ) else
58359: LD_VAR 0 4
58363: PPUSH
58364: LD_STRING D10-Ku-1
58366: PPUSH
58367: CALL_OW 91
58371: GO 58385
// ForceSay ( temp_unit , D10-Ku-1 ) ;
58373: LD_VAR 0 4
58377: PPUSH
58378: LD_STRING D10-Ku-1
58380: PPUSH
58381: CALL_OW 91
// end ; Dwayne :
58385: GO 58454
58387: LD_EXP 19
58391: DOUBLE
58392: EQUAL
58393: IFTRUE 58397
58395: GO 58412
58397: POP
// ForceSay ( temp_unit , D10-Dw-1 ) ; else
58398: LD_VAR 0 4
58402: PPUSH
58403: LD_STRING D10-Dw-1
58405: PPUSH
58406: CALL_OW 91
58410: GO 58454
58412: POP
// if GetSex ( temp_unit ) = sex_male then
58413: LD_VAR 0 4
58417: PPUSH
58418: CALL_OW 258
58422: PUSH
58423: LD_INT 1
58425: EQUAL
58426: IFFALSE 58442
// ForceSay ( temp_unit , D10-SomeM-1 ) else
58428: LD_VAR 0 4
58432: PPUSH
58433: LD_STRING D10-SomeM-1
58435: PPUSH
58436: CALL_OW 91
58440: GO 58454
// ForceSay ( temp_unit , D10-SomeF-1 ) ; end ;
58442: LD_VAR 0 4
58446: PPUSH
58447: LD_STRING D10-SomeF-1
58449: PPUSH
58450: CALL_OW 91
// end ; dwait ( 0 0$0.9 ) ;
58454: LD_INT 32
58456: PPUSH
58457: CALL_OW 68
// ForceSay ( Heike , D10-H-4 ) ;
58461: LD_EXP 10
58465: PPUSH
58466: LD_STRING D10-H-4
58468: PPUSH
58469: CALL_OW 91
// dwait ( 0 0$0.2 ) ;
58473: LD_INT 7
58475: PPUSH
58476: CALL_OW 68
// EndMission ;
58480: CALL 58622 0 0
// DialogueOff ;
58484: CALL_OW 7
// end ;
58488: PPOPN 4
58490: END
// function GetAmBuildings ; begin
58491: LD_INT 0
58493: PPUSH
// result = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_building ] ] ) diff [ b_ext_computer , b_ext_gun , b_ext_laser , b_ext_noncombat , b_ext_radar , b_ext_radio , b_ext_rocket , b_ext_siberium , b_ext_stitch , b_ext_track ] ;
58494: LD_ADDR_VAR 0 1
58498: PUSH
58499: LD_INT 22
58501: PUSH
58502: LD_EXP 7
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 21
58513: PUSH
58514: LD_INT 3
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PPUSH
58525: CALL_OW 69
58529: PUSH
58530: LD_INT 24
58532: PUSH
58533: LD_INT 17
58535: PUSH
58536: LD_INT 25
58538: PUSH
58539: LD_INT 19
58541: PUSH
58542: LD_INT 20
58544: PUSH
58545: LD_INT 22
58547: PUSH
58548: LD_INT 18
58550: PUSH
58551: LD_INT 21
58553: PUSH
58554: LD_INT 23
58556: PUSH
58557: LD_INT 16
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: DIFF
58572: ST_TO_ADDR
// end ;
58573: LD_VAR 0 1
58577: RET
// function GetAmHumans ; begin
58578: LD_INT 0
58580: PPUSH
// result = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
58581: LD_ADDR_VAR 0 1
58585: PUSH
58586: LD_INT 22
58588: PUSH
58589: LD_EXP 7
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 21
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PPUSH
58612: CALL_OW 69
58616: ST_TO_ADDR
// end ; end_of_file
58617: LD_VAR 0 1
58621: RET
// export function EndMission ; var val , all_list , un_list , name_list ; begin
58622: LD_INT 0
58624: PPUSH
58625: PPUSH
58626: PPUSH
58627: PPUSH
58628: PPUSH
// if original_gensher_people + 0 = saved_gensher_people + 0 then
58629: LD_EXP 83
58633: PUSH
58634: LD_INT 0
58636: PLUS
58637: PUSH
58638: LD_EXP 95
58642: PUSH
58643: LD_INT 0
58645: PLUS
58646: EQUAL
58647: IFFALSE 58659
// val = 1 else
58649: LD_ADDR_VAR 0 2
58653: PUSH
58654: LD_INT 1
58656: ST_TO_ADDR
58657: GO 58668
// val = - 1 ;
58659: LD_ADDR_VAR 0 2
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: ST_TO_ADDR
// AddMedal ( GensherPeople , val ) ;
58668: LD_STRING GensherPeople
58670: PPUSH
58671: LD_VAR 0 2
58675: PPUSH
58676: CALL_OW 101
// if val = 1 then
58680: LD_VAR 0 2
58684: PUSH
58685: LD_INT 1
58687: EQUAL
58688: IFFALSE 58702
// SaveVariable ( 1 , AllGensherPeopleSaved_11_cont ) else
58690: LD_INT 1
58692: PPUSH
58693: LD_STRING AllGensherPeopleSaved_11_cont
58695: PPUSH
58696: CALL_OW 39
58700: GO 58712
// SaveVariable ( 0 , AllGensherPeopleSaved_11_cont ) ;
58702: LD_INT 0
58704: PPUSH
58705: LD_STRING AllGensherPeopleSaved_11_cont
58707: PPUSH
58708: CALL_OW 39
// if cameras_placed then
58712: LD_EXP 92
58716: IFFALSE 58728
// val = 1 else
58718: LD_ADDR_VAR 0 2
58722: PUSH
58723: LD_INT 1
58725: ST_TO_ADDR
58726: GO 58762
// if Researched ( you , tech_HidCam ) then
58728: LD_EXP 3
58732: PPUSH
58733: LD_INT 17
58735: PPUSH
58736: CALL_OW 325
58740: IFFALSE 58753
// val = - 1 else
58742: LD_ADDR_VAR 0 2
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: ST_TO_ADDR
58751: GO 58762
// val = - 2 ;
58753: LD_ADDR_VAR 0 2
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: ST_TO_ADDR
// AddMedal ( HiddenCamera , val ) ;
58762: LD_STRING HiddenCamera
58764: PPUSH
58765: LD_VAR 0 2
58769: PPUSH
58770: CALL_OW 101
// if russian_interference_points <= gensher_interference_threshold then
58774: LD_EXP 97
58778: PUSH
58779: LD_EXP 103
58783: LESSEQUAL
58784: IFFALSE 58796
// val = 1 else
58786: LD_ADDR_VAR 0 2
58790: PUSH
58791: LD_INT 1
58793: ST_TO_ADDR
58794: GO 58805
// val = - 1 ;
58796: LD_ADDR_VAR 0 2
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: ST_TO_ADDR
// AddMedal ( RussianInterference , val ) ;
58805: LD_STRING RussianInterference
58807: PPUSH
58808: LD_VAR 0 2
58812: PPUSH
58813: CALL_OW 101
// GiveMedals ( Medals ) ;
58817: LD_STRING Medals
58819: PPUSH
58820: CALL_OW 102
// all_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff GetApes ( you ) ;
58824: LD_ADDR_VAR 0 3
58828: PUSH
58829: LD_INT 22
58831: PUSH
58832: LD_EXP 3
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 21
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PPUSH
58855: CALL_OW 69
58859: PUSH
58860: LD_EXP 3
58864: PPUSH
58865: CALL 44447 0 1
58869: DIFF
58870: ST_TO_ADDR
// if IsLive ( Gonzo ) then
58871: LD_EXP 23
58875: PPUSH
58876: CALL_OW 300
58880: IFFALSE 58898
// all_list = all_list ^ Gonzo ;
58882: LD_ADDR_VAR 0 3
58886: PUSH
58887: LD_VAR 0 3
58891: PUSH
58892: LD_EXP 23
58896: ADD
58897: ST_TO_ADDR
// RewardPeople ( all_list ) ;
58898: LD_VAR 0 3
58902: PPUSH
58903: CALL_OW 43
// SetLastMission ( all_list , 16 ) ;
58907: LD_VAR 0 3
58911: PPUSH
58912: LD_INT 16
58914: PPUSH
58915: CALL_OW 245
// SaveCharacters ( Heike , Heike_11_cont ) ;
58919: LD_EXP 10
58923: PPUSH
58924: LD_STRING Heike_11_cont
58926: PPUSH
58927: CALL_OW 38
// SaveCharacters ( Gensher , Gensher_11_cont ) ;
58931: LD_EXP 24
58935: PPUSH
58936: LD_STRING Gensher_11_cont
58938: PPUSH
58939: CALL_OW 38
// SaveVariable ( oswald_is_substitute , Oswald_is_substitute_11_generic ) ;
58943: LD_EXP 81
58947: PPUSH
58948: LD_STRING Oswald_is_substitute_11_generic
58950: PPUSH
58951: CALL_OW 39
// SaveVariable ( kurt_is_substitute , Kurt_is_substitute_11_generic ) ;
58955: LD_EXP 82
58959: PPUSH
58960: LD_STRING Kurt_is_substitute_11_generic
58962: PPUSH
58963: CALL_OW 39
// un_list = [ Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ] ;
58967: LD_ADDR_VAR 0 4
58971: PUSH
58972: LD_EXP 11
58976: PUSH
58977: LD_EXP 12
58981: PUSH
58982: LD_EXP 13
58986: PUSH
58987: LD_EXP 14
58991: PUSH
58992: LD_EXP 15
58996: PUSH
58997: LD_EXP 16
59001: PUSH
59002: LD_EXP 17
59006: PUSH
59007: LD_EXP 18
59011: PUSH
59012: LD_EXP 19
59016: PUSH
59017: LD_EXP 20
59021: PUSH
59022: LD_EXP 21
59026: PUSH
59027: LD_EXP 22
59031: PUSH
59032: LD_EXP 23
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: ST_TO_ADDR
// name_list = [ Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ] ;
59052: LD_ADDR_VAR 0 5
59056: PUSH
59057: LD_STRING Sonya
59059: PUSH
59060: LD_STRING Oswald
59062: PUSH
59063: LD_STRING Ralph
59065: PUSH
59066: LD_STRING Kowalski
59068: PUSH
59069: LD_STRING Evelyn
59071: PUSH
59072: LD_STRING Suze
59074: PUSH
59075: LD_STRING Olaf
59077: PUSH
59078: LD_STRING Kurt
59080: PUSH
59081: LD_STRING Dwayne
59083: PUSH
59084: LD_STRING MarkB
59086: PUSH
59087: LD_STRING Aviradze
59089: PUSH
59090: LD_STRING Swansson
59092: PUSH
59093: LD_STRING Gonzo
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: ST_TO_ADDR
// for val = 1 to un_list do
59111: LD_ADDR_VAR 0 2
59115: PUSH
59116: DOUBLE
59117: LD_INT 1
59119: DEC
59120: ST_TO_ADDR
59121: LD_VAR 0 4
59125: PUSH
59126: FOR_TO
59127: IFFALSE 59179
// if un_list [ val ] in all_list then
59129: LD_VAR 0 4
59133: PUSH
59134: LD_VAR 0 2
59138: ARRAY
59139: PUSH
59140: LD_VAR 0 3
59144: IN
59145: IFFALSE 59177
// SaveCharacters ( un_list [ val ] , name_list [ val ] & _11_cont ) ;
59147: LD_VAR 0 4
59151: PUSH
59152: LD_VAR 0 2
59156: ARRAY
59157: PPUSH
59158: LD_VAR 0 5
59162: PUSH
59163: LD_VAR 0 2
59167: ARRAY
59168: PUSH
59169: LD_STRING _11_cont
59171: STR
59172: PPUSH
59173: CALL_OW 38
59177: GO 59126
59179: POP
59180: POP
// SaveCharacters ( all_list diff ( Heike ^ Khattam ^ un_list ) , Others_11_cont ) ;
59181: LD_VAR 0 3
59185: PUSH
59186: LD_EXP 10
59190: PUSH
59191: LD_EXP 27
59195: ADD
59196: PUSH
59197: LD_VAR 0 4
59201: ADD
59202: DIFF
59203: PPUSH
59204: LD_STRING Others_11_cont
59206: PPUSH
59207: CALL_OW 38
// if GetLives ( Khattam ) > 0 then
59211: LD_EXP 27
59215: PPUSH
59216: CALL_OW 256
59220: PUSH
59221: LD_INT 0
59223: GREATER
59224: IFFALSE 59238
// SaveCharacters ( Khattam , Khattam_11_cont ) ;
59226: LD_EXP 27
59230: PPUSH
59231: LD_STRING Khattam_11_cont
59233: PPUSH
59234: CALL_OW 38
// SaveVariable ( khattam_choice = 1 , Khattam_accepted_11_cont ) ;
59238: LD_EXP 96
59242: PUSH
59243: LD_INT 1
59245: EQUAL
59246: PPUSH
59247: LD_STRING Khattam_accepted_11_cont
59249: PPUSH
59250: CALL_OW 39
// InGameOn ;
59254: CALL_OW 8
// for val in all_units do
59258: LD_ADDR_VAR 0 2
59262: PUSH
59263: LD_OWVAR 3
59267: PUSH
59268: FOR_IN
59269: IFFALSE 59282
// DestroyUnit ( val ) ;
59271: LD_VAR 0 2
59275: PPUSH
59276: CALL_OW 65
59280: GO 59268
59282: POP
59283: POP
// ResetFog ;
59284: CALL_OW 335
// wait ( 0 0$0.5 ) ;
59288: LD_INT 18
59290: PPUSH
59291: CALL_OW 67
// repeat Query ( QCutscene1 ) ;
59295: LD_STRING QCutscene1
59297: PPUSH
59298: CALL_OW 97
// val = Query ( QCutscene2 ) ;
59302: LD_ADDR_VAR 0 2
59306: PUSH
59307: LD_STRING QCutscene2
59309: PPUSH
59310: CALL_OW 97
59314: ST_TO_ADDR
// until val = 3 or val = 2 ;
59315: LD_VAR 0 2
59319: PUSH
59320: LD_INT 3
59322: EQUAL
59323: PUSH
59324: LD_VAR 0 2
59328: PUSH
59329: LD_INT 2
59331: EQUAL
59332: OR
59333: IFFALSE 59295
// wait ( 0 0$0.5 ) ;
59335: LD_INT 18
59337: PPUSH
59338: CALL_OW 67
// SetNextMission ( val - 1 ) ;
59342: LD_VAR 0 2
59346: PUSH
59347: LD_INT 1
59349: MINUS
59350: PPUSH
59351: CALL_OW 536
// InGameOff ;
59355: CALL_OW 9
// YouWin ;
59359: CALL_OW 103
// end ;
59363: LD_VAR 0 1
59367: RET
