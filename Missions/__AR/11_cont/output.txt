// export testing ; export you , russians , nature , you_alt , americans , scout_side , americans_alt ; export Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ; export Gensher ; export Simms , Cornell , Khattam , Joan , Powell ; export ai_soldiers , ai_engineers , ai_mechanics_defend , ai_scientists , ai_commander , ai_depot , ai_labs , ai_siberite_mines ; export ai_power_plants , ai_buildings_locations , ai_vehicles_defend , ai_vehicles_attack , ai_human_pullback_hex ; export ai_building_under_construction , ai_heal_these_humans , ai_all_buildings , ai_building_constructor ; export ai_upcoming_building_data , ai_facts , ai_armouries , ai_bunkers , ai_oil_mine , ai_fact_extensions ; export ai_near_base_dist , ai_going_to_attack_this_base , ai_refuel_vehicles_list , ai_turrets , ai_control_tower ; export ai_vehicle_attack_delay , ai_bases , ai_has_switched_base_target , ai_cargo_bay , ai_cargo_bay_under_construction , ai_apemen_engineers ; export ai_attacking_soldiers , ai_attacking_scientists , ai_humans_ready_to_attack , ai_retreating_attacking_humans , ai_human_attack_delay ; export ai_excepted_buildings , ai_new_attack_commencing ; export ai_crane , ai_time_shift_data , ai_time_shift_hexes , ai_time_shift_hexes_underway , ai_attacking_unit_hex_index ; export ai_contact_time , ai_attack_ground_info_initial , ai_attack_ground_info_sustain , ai_captured_buildings , ai_vehicles_being_repaired ; export oswald_is_substitute , kurt_is_substitute , original_gensher_people , russian_attack_strategy , special_russian_attackers ; export yashin_alive , num_russian_attacks , gensher_spec_research_progress , game_phase , first_teleport , camera_engineers ; export cameras_placed , scout_event_over , russians_allowed_to_attack_gensher_time , saved_gensher_people , khattam_choice ; export russian_interference_points , camera_engineers_task_map ; export gensher_bunker_apes , gensher_mortars ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// testing = false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// ai_bases = [ 1 , 2 , 3 ] ;
  16: LD_ADDR_EXP 58
  20: PUSH
  21: LD_INT 1
  23: PUSH
  24: LD_INT 2
  26: PUSH
  27: LD_INT 3
  29: PUSH
  30: EMPTY
  31: LIST
  32: LIST
  33: LIST
  34: ST_TO_ADDR
// ai_soldiers = [ [ ] , [ ] , [ ] ] ;
  35: LD_ADDR_EXP 29
  39: PUSH
  40: EMPTY
  41: PUSH
  42: EMPTY
  43: PUSH
  44: EMPTY
  45: PUSH
  46: EMPTY
  47: LIST
  48: LIST
  49: LIST
  50: ST_TO_ADDR
// ai_attacking_soldiers = [ [ ] , [ ] , [ ] ] ;
  51: LD_ADDR_EXP 63
  55: PUSH
  56: EMPTY
  57: PUSH
  58: EMPTY
  59: PUSH
  60: EMPTY
  61: PUSH
  62: EMPTY
  63: LIST
  64: LIST
  65: LIST
  66: ST_TO_ADDR
// ai_engineers = [ [ ] , [ ] , [ ] ] ;
  67: LD_ADDR_EXP 30
  71: PUSH
  72: EMPTY
  73: PUSH
  74: EMPTY
  75: PUSH
  76: EMPTY
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: LIST
  82: ST_TO_ADDR
// ai_mechanics_defend = [ [ ] , [ ] , [ ] ] ;
  83: LD_ADDR_EXP 31
  87: PUSH
  88: EMPTY
  89: PUSH
  90: EMPTY
  91: PUSH
  92: EMPTY
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: ST_TO_ADDR
// ai_scientists = [ [ ] , [ ] , [ ] ] ;
  99: LD_ADDR_EXP 32
 103: PUSH
 104: EMPTY
 105: PUSH
 106: EMPTY
 107: PUSH
 108: EMPTY
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: ST_TO_ADDR
// ai_attacking_scientists = [ [ ] , [ ] , [ ] ] ;
 115: LD_ADDR_EXP 64
 119: PUSH
 120: EMPTY
 121: PUSH
 122: EMPTY
 123: PUSH
 124: EMPTY
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: ST_TO_ADDR
// ai_apemen_engineers = [ [ ] , [ ] , [ ] ] ;
 131: LD_ADDR_EXP 62
 135: PUSH
 136: EMPTY
 137: PUSH
 138: EMPTY
 139: PUSH
 140: EMPTY
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: ST_TO_ADDR
// ai_depot = [ 0 , 0 , 0 ] ;
 147: LD_ADDR_EXP 34
 151: PUSH
 152: LD_INT 0
 154: PUSH
 155: LD_INT 0
 157: PUSH
 158: LD_INT 0
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// ai_labs = [ [ ] , [ ] , [ ] ] ;
 166: LD_ADDR_EXP 35
 170: PUSH
 171: EMPTY
 172: PUSH
 173: EMPTY
 174: PUSH
 175: EMPTY
 176: PUSH
 177: EMPTY
 178: LIST
 179: LIST
 180: LIST
 181: ST_TO_ADDR
// ai_facts = [ [ ] , [ ] , [ ] ] ;
 182: LD_ADDR_EXP 47
 186: PUSH
 187: EMPTY
 188: PUSH
 189: EMPTY
 190: PUSH
 191: EMPTY
 192: PUSH
 193: EMPTY
 194: LIST
 195: LIST
 196: LIST
 197: ST_TO_ADDR
// ai_armouries = [ [ ] , [ ] , [ ] ] ;
 198: LD_ADDR_EXP 48
 202: PUSH
 203: EMPTY
 204: PUSH
 205: EMPTY
 206: PUSH
 207: EMPTY
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: LIST
 213: ST_TO_ADDR
// ai_bunkers = [ [ ] , [ ] , [ ] ] ;
 214: LD_ADDR_EXP 49
 218: PUSH
 219: EMPTY
 220: PUSH
 221: EMPTY
 222: PUSH
 223: EMPTY
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: ST_TO_ADDR
// ai_turrets = [ [ ] , [ ] , [ ] ] ;
 230: LD_ADDR_EXP 55
 234: PUSH
 235: EMPTY
 236: PUSH
 237: EMPTY
 238: PUSH
 239: EMPTY
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: LIST
 245: ST_TO_ADDR
// ai_oil_mine = [ 0 , 0 , 0 ] ;
 246: LD_ADDR_EXP 50
 250: PUSH
 251: LD_INT 0
 253: PUSH
 254: LD_INT 0
 256: PUSH
 257: LD_INT 0
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: ST_TO_ADDR
// ai_siberite_mines = [ [ ] , [ ] , [ ] ] ;
 265: LD_ADDR_EXP 36
 269: PUSH
 270: EMPTY
 271: PUSH
 272: EMPTY
 273: PUSH
 274: EMPTY
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: LIST
 280: ST_TO_ADDR
// ai_fact_extensions = [ [ ] , [ ] , [ ] ] ;
 281: LD_ADDR_EXP 51
 285: PUSH
 286: EMPTY
 287: PUSH
 288: EMPTY
 289: PUSH
 290: EMPTY
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: ST_TO_ADDR
// ai_power_plants = [ [ ] , [ ] , [ ] ] ;
 297: LD_ADDR_EXP 37
 301: PUSH
 302: EMPTY
 303: PUSH
 304: EMPTY
 305: PUSH
 306: EMPTY
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: ST_TO_ADDR
// ai_control_tower = [ 0 , 0 , 0 ] ;
 313: LD_ADDR_EXP 56
 317: PUSH
 318: LD_INT 0
 320: PUSH
 321: LD_INT 0
 323: PUSH
 324: LD_INT 0
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// ai_buildings_locations = [ [ ] , [ ] , [ ] ] ;
 332: LD_ADDR_EXP 38
 336: PUSH
 337: EMPTY
 338: PUSH
 339: EMPTY
 340: PUSH
 341: EMPTY
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: LIST
 347: ST_TO_ADDR
// ai_captured_buildings = [ [ ] , [ ] , [ ] ] ;
 348: LD_ADDR_EXP 78
 352: PUSH
 353: EMPTY
 354: PUSH
 355: EMPTY
 356: PUSH
 357: EMPTY
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// ai_vehicles_defend = [ [ ] , [ ] , [ ] ] ;
 364: LD_ADDR_EXP 39
 368: PUSH
 369: EMPTY
 370: PUSH
 371: EMPTY
 372: PUSH
 373: EMPTY
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: ST_TO_ADDR
// ai_vehicles_attack = [ [ ] , [ ] , [ ] ] ;
 380: LD_ADDR_EXP 40
 384: PUSH
 385: EMPTY
 386: PUSH
 387: EMPTY
 388: PUSH
 389: EMPTY
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: ST_TO_ADDR
// ai_vehicles_being_repaired = [ [ ] , [ ] , [ ] ] ;
 396: LD_ADDR_EXP 79
 400: PUSH
 401: EMPTY
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: LIST
 411: ST_TO_ADDR
// ai_refuel_vehicles_list = [ [ ] , [ ] , [ ] ] ;
 412: LD_ADDR_EXP 54
 416: PUSH
 417: EMPTY
 418: PUSH
 419: EMPTY
 420: PUSH
 421: EMPTY
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: LIST
 427: ST_TO_ADDR
// ai_human_pullback_hex = [ [ 106 , 40 ] , [ 75 , 22 ] , [ 60 , 81 ] ] ;
 428: LD_ADDR_EXP 41
 432: PUSH
 433: LD_INT 106
 435: PUSH
 436: LD_INT 40
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PUSH
 443: LD_INT 75
 445: PUSH
 446: LD_INT 22
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 60
 455: PUSH
 456: LD_INT 81
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: ST_TO_ADDR
// ai_building_under_construction = [ 0 , 0 , 0 ] ;
 468: LD_ADDR_EXP 42
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 0
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// ai_heal_these_humans = [ [ ] , [ ] , [ ] ] ;
 487: LD_ADDR_EXP 43
 491: PUSH
 492: EMPTY
 493: PUSH
 494: EMPTY
 495: PUSH
 496: EMPTY
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: ST_TO_ADDR
// ai_all_buildings = [ [ ] , [ ] , [ ] ] ;
 503: LD_ADDR_EXP 44
 507: PUSH
 508: EMPTY
 509: PUSH
 510: EMPTY
 511: PUSH
 512: EMPTY
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: LIST
 518: ST_TO_ADDR
// ai_building_constructor = [ 0 , 0 , 0 ] ;
 519: LD_ADDR_EXP 45
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: LD_INT 0
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// ai_upcoming_building_data = [ [ ] , [ ] , [ ] ] ;
 538: LD_ADDR_EXP 46
 542: PUSH
 543: EMPTY
 544: PUSH
 545: EMPTY
 546: PUSH
 547: EMPTY
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: LIST
 553: ST_TO_ADDR
// ai_near_base_dist = 18 ;
 554: LD_ADDR_EXP 52
 558: PUSH
 559: LD_INT 18
 561: ST_TO_ADDR
// ai_vehicle_attack_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
 562: LD_ADDR_EXP 57
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: LD_INT 0
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// ai_human_attack_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
 581: LD_ADDR_EXP 67
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 0
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: LIST
 599: ST_TO_ADDR
// ai_cargo_bay = [ 0 , 0 , 0 ] ;
 600: LD_ADDR_EXP 60
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 0
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: LIST
 618: ST_TO_ADDR
// ai_cargo_bay_under_construction = [ false , false , false ] ;
 619: LD_ADDR_EXP 61
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: ST_TO_ADDR
// ai_crane = [ 0 , 0 , 0 ] ;
 638: LD_ADDR_EXP 70
 642: PUSH
 643: LD_INT 0
 645: PUSH
 646: LD_INT 0
 648: PUSH
 649: LD_INT 0
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: LIST
 656: ST_TO_ADDR
// ai_attacking_unit_hex_index = [ [ ] , [ ] , [ ] ] ;
 657: LD_ADDR_EXP 74
 661: PUSH
 662: EMPTY
 663: PUSH
 664: EMPTY
 665: PUSH
 666: EMPTY
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ai_retreating_attacking_humans = [ [ ] , [ ] , [ ] ] ;
 673: LD_ADDR_EXP 66
 677: PUSH
 678: EMPTY
 679: PUSH
 680: EMPTY
 681: PUSH
 682: EMPTY
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: ST_TO_ADDR
// ai_excepted_buildings = [ [ ] , [ ] , [ ] ] ;
 689: LD_ADDR_EXP 68
 693: PUSH
 694: EMPTY
 695: PUSH
 696: EMPTY
 697: PUSH
 698: EMPTY
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: ST_TO_ADDR
// ai_new_attack_commencing = [ false , false , false ] ;
 705: LD_ADDR_EXP 69
 709: PUSH
 710: LD_INT 0
 712: PUSH
 713: LD_INT 0
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: LIST
 723: ST_TO_ADDR
// ai_time_shift_data = [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 724: LD_ADDR_EXP 71
 728: PUSH
 729: EMPTY
 730: PUSH
 731: EMPTY
 732: PUSH
 733: EMPTY
 734: PUSH
 735: EMPTY
 736: PUSH
 737: EMPTY
 738: PUSH
 739: EMPTY
 740: PUSH
 741: EMPTY
 742: PUSH
 743: EMPTY
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// ai_time_shift_hexes = [ [ ] , [ ] , [ ] ] ;
 755: LD_ADDR_EXP 72
 759: PUSH
 760: EMPTY
 761: PUSH
 762: EMPTY
 763: PUSH
 764: EMPTY
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: LIST
 770: ST_TO_ADDR
// ai_time_shift_hexes_underway = [ [ ] , [ ] , [ ] ] ;
 771: LD_ADDR_EXP 73
 775: PUSH
 776: EMPTY
 777: PUSH
 778: EMPTY
 779: PUSH
 780: EMPTY
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: ST_TO_ADDR
// Initiate_ai_contact_time ;
 787: CALL 989 0 0
// ai_attack_ground_info_initial = [ ] ;
 791: LD_ADDR_EXP 76
 795: PUSH
 796: EMPTY
 797: ST_TO_ADDR
// ai_attack_ground_info_sustain = [ ] ;
 798: LD_ADDR_EXP 77
 802: PUSH
 803: EMPTY
 804: ST_TO_ADDR
// oswald_is_substitute = false ;
 805: LD_ADDR_EXP 80
 809: PUSH
 810: LD_INT 0
 812: ST_TO_ADDR
// kurt_is_substitute = false ;
 813: LD_ADDR_EXP 81
 817: PUSH
 818: LD_INT 0
 820: ST_TO_ADDR
// original_gensher_people = [ ] ;
 821: LD_ADDR_EXP 82
 825: PUSH
 826: EMPTY
 827: ST_TO_ADDR
// russian_attack_strategy = - 1 ;
 828: LD_ADDR_EXP 83
 832: PUSH
 833: LD_INT 1
 835: NEG
 836: ST_TO_ADDR
// special_russian_attackers = [ ] ;
 837: LD_ADDR_EXP 84
 841: PUSH
 842: EMPTY
 843: ST_TO_ADDR
// yashin_alive = TestCharacters ( Yashin_08 ) ;
 844: LD_ADDR_EXP 85
 848: PUSH
 849: LD_STRING Yashin_08
 851: PPUSH
 852: CALL_OW 28
 856: ST_TO_ADDR
// num_russian_attacks = 0 ;
 857: LD_ADDR_EXP 86
 861: PUSH
 862: LD_INT 0
 864: ST_TO_ADDR
// gensher_spec_research_progress = 0 ;
 865: LD_ADDR_EXP 87
 869: PUSH
 870: LD_INT 0
 872: ST_TO_ADDR
// game_phase = 1 ;
 873: LD_ADDR_EXP 88
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// first_teleport = true ;
 881: LD_ADDR_EXP 89
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// camera_engineers = [ ] ;
 889: LD_ADDR_EXP 90
 893: PUSH
 894: EMPTY
 895: ST_TO_ADDR
// cameras_placed = false ;
 896: LD_ADDR_EXP 91
 900: PUSH
 901: LD_INT 0
 903: ST_TO_ADDR
// scout_event_over = false ;
 904: LD_ADDR_EXP 92
 908: PUSH
 909: LD_INT 0
 911: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = [ 30 30$0 , 25 25$0 , 20 20$0 ] [ difficulty ] ;
 912: LD_ADDR_EXP 93
 916: PUSH
 917: LD_INT 63000
 919: PUSH
 920: LD_INT 52500
 922: PUSH
 923: LD_INT 42000
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_OWVAR 67
 935: ARRAY
 936: ST_TO_ADDR
// saved_gensher_people = [ ] ;
 937: LD_ADDR_EXP 94
 941: PUSH
 942: EMPTY
 943: ST_TO_ADDR
// khattam_choice = 0 ;
 944: LD_ADDR_EXP 95
 948: PUSH
 949: LD_INT 0
 951: ST_TO_ADDR
// russian_interference_points = 0 ;
 952: LD_ADDR_EXP 96
 956: PUSH
 957: LD_INT 0
 959: ST_TO_ADDR
// PrepareSides ;
 960: CALL 1270 0 0
// PrepareNature ;
 964: CALL 1723 0 0
// PrepareArabians ;
 968: CALL 2247 0 0
// ScanBuildings ;
 972: CALL 6086 0 0
// PrepareComputerSides ;
 976: CALL 8573 0 0
// InitiateTimeShiftData ;
 980: CALL 1073 0 0
// Action ;
 984: CALL 10102 0 0
// end ;
 988: END
// function Initiate_ai_contact_time ; var i ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
// ai_contact_time = [ ] ;
 993: LD_ADDR_EXP 75
 997: PUSH
 998: EMPTY
 999: ST_TO_ADDR
// for i = 1 to 8 do
1000: LD_ADDR_VAR 0 2
1004: PUSH
1005: DOUBLE
1006: LD_INT 1
1008: DEC
1009: ST_TO_ADDR
1010: LD_INT 8
1012: PUSH
1013: FOR_TO
1014: IFFALSE 1066
// ai_contact_time = ai_contact_time ^ [ [ 100000 , 100000 , 100000 , 100000 , 100000 , 100000 , 100000 , 100000 ] ] ;
1016: LD_ADDR_EXP 75
1020: PUSH
1021: LD_EXP 75
1025: PUSH
1026: LD_INT 100000
1028: PUSH
1029: LD_INT 100000
1031: PUSH
1032: LD_INT 100000
1034: PUSH
1035: LD_INT 100000
1037: PUSH
1038: LD_INT 100000
1040: PUSH
1041: LD_INT 100000
1043: PUSH
1044: LD_INT 100000
1046: PUSH
1047: LD_INT 100000
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: ADD
1063: ST_TO_ADDR
1064: GO 1013
1066: POP
1067: POP
// end ;
1068: LD_VAR 0 1
1072: RET
// function InitiateTimeShiftData ; var side ; begin
1073: LD_INT 0
1075: PPUSH
1076: PPUSH
// for side = 1 to 8 do
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: DOUBLE
1083: LD_INT 1
1085: DEC
1086: ST_TO_ADDR
1087: LD_INT 8
1089: PUSH
1090: FOR_TO
1091: IFFALSE 1263
// if Researched ( side , tech_st3 ) then
1093: LD_VAR 0 2
1097: PPUSH
1098: LD_INT 65
1100: PPUSH
1101: CALL_OW 325
1105: IFFALSE 1139
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 420 , 10 ] ) else
1107: LD_ADDR_EXP 71
1111: PUSH
1112: LD_EXP 71
1116: PPUSH
1117: LD_VAR 0 2
1121: PPUSH
1122: LD_INT 420
1124: PUSH
1125: LD_INT 10
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: PPUSH
1132: CALL_OW 1
1136: ST_TO_ADDR
1137: GO 1261
// if Researched ( side , tech_st2 ) then
1139: LD_VAR 0 2
1143: PPUSH
1144: LD_INT 64
1146: PPUSH
1147: CALL_OW 325
1151: IFFALSE 1185
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 420 , 10 ] ) else
1153: LD_ADDR_EXP 71
1157: PUSH
1158: LD_EXP 71
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_INT 420
1170: PUSH
1171: LD_INT 10
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 1
1182: ST_TO_ADDR
1183: GO 1261
// if Researched ( side , tech_st1 ) then
1185: LD_VAR 0 2
1189: PPUSH
1190: LD_INT 63
1192: PPUSH
1193: CALL_OW 325
1197: IFFALSE 1231
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 320 , 7 ] ) else
1199: LD_ADDR_EXP 71
1203: PUSH
1204: LD_EXP 71
1208: PPUSH
1209: LD_VAR 0 2
1213: PPUSH
1214: LD_INT 320
1216: PUSH
1217: LD_INT 7
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: PPUSH
1224: CALL_OW 1
1228: ST_TO_ADDR
1229: GO 1261
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 215 , 4 ] ) ;
1231: LD_ADDR_EXP 71
1235: PUSH
1236: LD_EXP 71
1240: PPUSH
1241: LD_VAR 0 2
1245: PPUSH
1246: LD_INT 215
1248: PUSH
1249: LD_INT 4
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 1
1260: ST_TO_ADDR
1261: GO 1090
1263: POP
1264: POP
// end ;
1265: LD_VAR 0 1
1269: RET
// function PrepareSides ; begin
1270: LD_INT 0
1272: PPUSH
// nature = 0 ;
1273: LD_ADDR_EXP 4
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// americans = 1 ;
1281: LD_ADDR_EXP 6
1285: PUSH
1286: LD_INT 1
1288: ST_TO_ADDR
// you = 2 ;
1289: LD_ADDR_EXP 2
1293: PUSH
1294: LD_INT 2
1296: ST_TO_ADDR
// russians = 3 ;
1297: LD_ADDR_EXP 3
1301: PUSH
1302: LD_INT 3
1304: ST_TO_ADDR
// americans_alt = 4 ;
1305: LD_ADDR_EXP 8
1309: PUSH
1310: LD_INT 4
1312: ST_TO_ADDR
// you_alt = 5 ;
1313: LD_ADDR_EXP 5
1317: PUSH
1318: LD_INT 5
1320: ST_TO_ADDR
// scout_side = 8 ;
1321: LD_ADDR_EXP 7
1325: PUSH
1326: LD_INT 8
1328: ST_TO_ADDR
// SetAttitude ( americans , you , att_enemy , true ) ;
1329: LD_EXP 6
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: LD_INT 2
1341: PPUSH
1342: LD_INT 1
1344: PPUSH
1345: CALL_OW 80
// SetAttitude ( americans , russians , att_enemy , true ) ;
1349: LD_EXP 6
1353: PPUSH
1354: LD_EXP 3
1358: PPUSH
1359: LD_INT 2
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: CALL_OW 80
// SetAttitude ( americans , americans_alt , att_friend , true ) ;
1369: LD_EXP 6
1373: PPUSH
1374: LD_EXP 8
1378: PPUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 1
1384: PPUSH
1385: CALL_OW 80
// SetAttitude ( americans , you_alt , att_friend , true ) ;
1389: LD_EXP 6
1393: PPUSH
1394: LD_EXP 5
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: CALL_OW 80
// SetAttitude ( americans , scout_side , att_friend , true ) ;
1409: LD_EXP 6
1413: PPUSH
1414: LD_EXP 7
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: LD_INT 1
1424: PPUSH
1425: CALL_OW 80
// SetAttitude ( you , russians , att_enemy , true ) ;
1429: LD_EXP 2
1433: PPUSH
1434: LD_EXP 3
1438: PPUSH
1439: LD_INT 2
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: CALL_OW 80
// SetAttitude ( you , americans_alt , att_enemy , true ) ;
1449: LD_EXP 2
1453: PPUSH
1454: LD_EXP 8
1458: PPUSH
1459: LD_INT 2
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: CALL_OW 80
// SetAttitude ( you , you_alt , att_friend , true ) ;
1469: LD_EXP 2
1473: PPUSH
1474: LD_EXP 5
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: CALL_OW 80
// SetAttitude ( you , scout_side , att_friend , true ) ;
1489: LD_EXP 2
1493: PPUSH
1494: LD_EXP 7
1498: PPUSH
1499: LD_INT 1
1501: PPUSH
1502: LD_INT 1
1504: PPUSH
1505: CALL_OW 80
// SetAttitude ( russians , americans_alt , att_enemy , true ) ;
1509: LD_EXP 3
1513: PPUSH
1514: LD_EXP 8
1518: PPUSH
1519: LD_INT 2
1521: PPUSH
1522: LD_INT 1
1524: PPUSH
1525: CALL_OW 80
// SetAttitude ( russians , you_alt , att_enemy , true ) ;
1529: LD_EXP 3
1533: PPUSH
1534: LD_EXP 5
1538: PPUSH
1539: LD_INT 2
1541: PPUSH
1542: LD_INT 1
1544: PPUSH
1545: CALL_OW 80
// SetAttitude ( russians , scout_side , att_friend , true ) ;
1549: LD_EXP 3
1553: PPUSH
1554: LD_EXP 7
1558: PPUSH
1559: LD_INT 1
1561: PPUSH
1562: LD_INT 1
1564: PPUSH
1565: CALL_OW 80
// SetAttitude ( americans_alt , you_alt , att_enemy , true ) ;
1569: LD_EXP 8
1573: PPUSH
1574: LD_EXP 5
1578: PPUSH
1579: LD_INT 2
1581: PPUSH
1582: LD_INT 1
1584: PPUSH
1585: CALL_OW 80
// SetAttitude ( americans_alt , scout_side , att_friend , true ) ;
1589: LD_EXP 8
1593: PPUSH
1594: LD_EXP 7
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL_OW 80
// SetAttitude ( you_alt , scout_side , att_friend , true ) ;
1609: LD_EXP 5
1613: PPUSH
1614: LD_EXP 7
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: LD_INT 1
1624: PPUSH
1625: CALL_OW 80
// ChangeSideFog ( you_alt , you ) ;
1629: LD_EXP 5
1633: PPUSH
1634: LD_EXP 2
1638: PPUSH
1639: CALL_OW 343
// if difficulty = 3 then
1643: LD_OWVAR 67
1647: PUSH
1648: LD_INT 3
1650: EQUAL
1651: IFFALSE 1668
// SetTech ( tech_opto1 , americans , state_researched ) ;
1653: LD_INT 60
1655: PPUSH
1656: LD_EXP 6
1660: PPUSH
1661: LD_INT 2
1663: PPUSH
1664: CALL_OW 322
// if difficulty = 3 then
1668: LD_OWVAR 67
1672: PUSH
1673: LD_INT 3
1675: EQUAL
1676: IFFALSE 1693
// SetTech ( tech_comp3 , russians , state_researched ) ;
1678: LD_INT 59
1680: PPUSH
1681: LD_EXP 3
1685: PPUSH
1686: LD_INT 2
1688: PPUSH
1689: CALL_OW 322
// if difficulty = 3 then
1693: LD_OWVAR 67
1697: PUSH
1698: LD_INT 3
1700: EQUAL
1701: IFFALSE 1718
// SetTech ( tech_st3 , russians , state_researched ) ;
1703: LD_INT 65
1705: PPUSH
1706: LD_EXP 3
1710: PPUSH
1711: LD_INT 2
1713: PPUSH
1714: CALL_OW 322
// end ;
1718: LD_VAR 0 1
1722: RET
// function PrepareNature ; var i , spots , num , agres , count , temp_unit ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
1727: PPUSH
1728: PPUSH
1729: PPUSH
1730: PPUSH
1731: PPUSH
// for i in FilterAllUnits ( [ f_side , nature ] ) do
1732: LD_ADDR_VAR 0 2
1736: PUSH
1737: LD_INT 22
1739: PUSH
1740: LD_EXP 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL_OW 69
1753: PUSH
1754: FOR_IN
1755: IFFALSE 1768
// DestroyUnit ( i ) ;
1757: LD_VAR 0 2
1761: PPUSH
1762: CALL_OW 65
1766: GO 1754
1768: POP
1769: POP
// spots = [ [ 158 , 91 ] , [ 140 , 107 ] , [ 37 , 27 ] , [ 22 , 4 ] , [ 38 , 10 ] , [ 50 , 23 ] , [ 40 , 20 ] , [ 158 , 110 ] , [ 159 , 118 ] , [ 146 , 115 ] , [ 135 , 100 ] , [ 155 , 115 ] ] ;
1770: LD_ADDR_VAR 0 3
1774: PUSH
1775: LD_INT 158
1777: PUSH
1778: LD_INT 91
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PUSH
1785: LD_INT 140
1787: PUSH
1788: LD_INT 107
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 37
1797: PUSH
1798: LD_INT 27
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 22
1807: PUSH
1808: LD_INT 4
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: LD_INT 38
1817: PUSH
1818: LD_INT 10
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 50
1827: PUSH
1828: LD_INT 23
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 40
1837: PUSH
1838: LD_INT 20
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 158
1847: PUSH
1848: LD_INT 110
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 159
1857: PUSH
1858: LD_INT 118
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 146
1867: PUSH
1868: LD_INT 115
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 135
1877: PUSH
1878: LD_INT 100
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 155
1887: PUSH
1888: LD_INT 115
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: ST_TO_ADDR
// InitUc ;
1909: CALL_OW 18
// InitHc ;
1913: CALL_OW 19
// uc_side = nature ;
1917: LD_ADDR_OWVAR 20
1921: PUSH
1922: LD_EXP 4
1926: ST_TO_ADDR
// uc_nation = nation_nature ;
1927: LD_ADDR_OWVAR 21
1931: PUSH
1932: LD_INT 0
1934: ST_TO_ADDR
// agres = - 10 + difficulty * 20 ;
1935: LD_ADDR_VAR 0 5
1939: PUSH
1940: LD_INT 10
1942: NEG
1943: PUSH
1944: LD_OWVAR 67
1948: PUSH
1949: LD_INT 20
1951: MUL
1952: PLUS
1953: ST_TO_ADDR
// count = [ 15 , 13 , 10 ] [ difficulty ] ;
1954: LD_ADDR_VAR 0 6
1958: PUSH
1959: LD_INT 15
1961: PUSH
1962: LD_INT 13
1964: PUSH
1965: LD_INT 10
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_OWVAR 67
1977: ARRAY
1978: ST_TO_ADDR
// hc_class = class_apeman ;
1979: LD_ADDR_OWVAR 28
1983: PUSH
1984: LD_INT 12
1986: ST_TO_ADDR
// for i = 1 to count do
1987: LD_ADDR_VAR 0 2
1991: PUSH
1992: DOUBLE
1993: LD_INT 1
1995: DEC
1996: ST_TO_ADDR
1997: LD_VAR 0 6
2001: PUSH
2002: FOR_TO
2003: IFFALSE 2240
// begin if spots = 0 then
2005: LD_VAR 0 3
2009: PUSH
2010: LD_INT 0
2012: EQUAL
2013: IFFALSE 2019
// exit ;
2015: POP
2016: POP
2017: GO 2242
// uc_direction = Rand ( 0 , 5 ) ;
2019: LD_ADDR_OWVAR 24
2023: PUSH
2024: LD_INT 0
2026: PPUSH
2027: LD_INT 5
2029: PPUSH
2030: CALL_OW 12
2034: ST_TO_ADDR
// hc_agressivity = Rand ( - 1 * agres , agres ) ;
2035: LD_ADDR_OWVAR 35
2039: PUSH
2040: LD_INT 1
2042: NEG
2043: PUSH
2044: LD_VAR 0 5
2048: MUL
2049: PPUSH
2050: LD_VAR 0 5
2054: PPUSH
2055: CALL_OW 12
2059: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
2060: LD_ADDR_OWVAR 29
2064: PUSH
2065: LD_INT 11
2067: PPUSH
2068: LD_INT 13
2070: PPUSH
2071: CALL_OW 12
2075: PUSH
2076: LD_INT 10
2078: PPUSH
2079: LD_INT 11
2081: PPUSH
2082: CALL_OW 12
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
2091: LD_ADDR_OWVAR 27
2095: PUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 12
2106: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , Rand ( 0 , 1 ) , 0 , 0 ] ;
2107: LD_ADDR_OWVAR 31
2111: PUSH
2112: LD_INT 0
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: CALL_OW 12
2122: PUSH
2123: LD_INT 0
2125: PPUSH
2126: LD_INT 1
2128: PPUSH
2129: CALL_OW 12
2133: PUSH
2134: LD_INT 0
2136: PUSH
2137: LD_INT 0
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: ST_TO_ADDR
// num = Rand ( 1 , spots ) ;
2146: LD_ADDR_VAR 0 4
2150: PUSH
2151: LD_INT 1
2153: PPUSH
2154: LD_VAR 0 3
2158: PPUSH
2159: CALL_OW 12
2163: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , spots [ num ] [ 1 ] , spots [ num ] [ 2 ] , 5 , false ) ;
2164: CALL_OW 44
2168: PPUSH
2169: LD_VAR 0 3
2173: PUSH
2174: LD_VAR 0 4
2178: ARRAY
2179: PUSH
2180: LD_INT 1
2182: ARRAY
2183: PPUSH
2184: LD_VAR 0 3
2188: PUSH
2189: LD_VAR 0 4
2193: ARRAY
2194: PUSH
2195: LD_INT 2
2197: ARRAY
2198: PPUSH
2199: LD_INT 5
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 50
// if Prob ( 50 ) then
2209: LD_INT 50
2211: PPUSH
2212: CALL_OW 13
2216: IFFALSE 2238
// spots = Delete ( spots , num ) ;
2218: LD_ADDR_VAR 0 3
2222: PUSH
2223: LD_VAR 0 3
2227: PPUSH
2228: LD_VAR 0 4
2232: PPUSH
2233: CALL_OW 3
2237: ST_TO_ADDR
// end ;
2238: GO 2002
2240: POP
2241: POP
// end ;
2242: LD_VAR 0 1
2246: RET
// function PrepareArabians ; var human_list , i , temp_unit , val , k , gensher_bunker_apes ; begin
2247: LD_INT 0
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
// InitHc ;
2256: CALL_OW 19
// InitUc ;
2260: CALL_OW 18
// uc_side = you ;
2264: LD_ADDR_OWVAR 20
2268: PUSH
2269: LD_EXP 2
2273: ST_TO_ADDR
// uc_nation = nation_arabian ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 2
2281: ST_TO_ADDR
// if not testing then
2282: LD_EXP 1
2286: NOT
2287: IFFALSE 2880
// begin Heike = CreateCharacter ( Heike_11_sel ) ;
2289: LD_ADDR_EXP 9
2293: PUSH
2294: LD_STRING Heike_11_sel
2296: PPUSH
2297: CALL_OW 34
2301: ST_TO_ADDR
// if TestCharacters ( Oswald_11_sel ) then
2302: LD_STRING Oswald_11_sel
2304: PPUSH
2305: CALL_OW 28
2309: IFFALSE 2326
// Oswald = CreateCharacter ( Oswald_11_sel ) else
2311: LD_ADDR_EXP 11
2315: PUSH
2316: LD_STRING Oswald_11_sel
2318: PPUSH
2319: CALL_OW 34
2323: ST_TO_ADDR
2324: GO 2334
// Oswald = 0 ;
2326: LD_ADDR_EXP 11
2330: PUSH
2331: LD_INT 0
2333: ST_TO_ADDR
// oswald_is_substitute = LoadVariable ( Oswald_is_substitute_10 , false ) ;
2334: LD_ADDR_EXP 80
2338: PUSH
2339: LD_STRING Oswald_is_substitute_10
2341: PPUSH
2342: LD_INT 0
2344: PPUSH
2345: CALL_OW 30
2349: ST_TO_ADDR
// if TestCharacters ( Kurt_11_sel ) then
2350: LD_STRING Kurt_11_sel
2352: PPUSH
2353: CALL_OW 28
2357: IFFALSE 2374
// Kurt = CreateCharacter ( Kurt_11_sel ) else
2359: LD_ADDR_EXP 17
2363: PUSH
2364: LD_STRING Kurt_11_sel
2366: PPUSH
2367: CALL_OW 34
2371: ST_TO_ADDR
2372: GO 2382
// Kurt = 0 ;
2374: LD_ADDR_EXP 17
2378: PUSH
2379: LD_INT 0
2381: ST_TO_ADDR
// kurt_is_substitute = LoadVariable ( Kurt_is_substitute_10 , false ) ;
2382: LD_ADDR_EXP 81
2386: PUSH
2387: LD_STRING Kurt_is_substitute_10
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 30
2397: ST_TO_ADDR
// if TestCharacters ( Sonya_11_sel ) then
2398: LD_STRING Sonya_11_sel
2400: PPUSH
2401: CALL_OW 28
2405: IFFALSE 2422
// Sonya = CreateCharacter ( Sonya_11_sel ) else
2407: LD_ADDR_EXP 10
2411: PUSH
2412: LD_STRING Sonya_11_sel
2414: PPUSH
2415: CALL_OW 34
2419: ST_TO_ADDR
2420: GO 2430
// Sonya = 0 ;
2422: LD_ADDR_EXP 10
2426: PUSH
2427: LD_INT 0
2429: ST_TO_ADDR
// if TestCharacters ( Ralph_11_sel ) then
2430: LD_STRING Ralph_11_sel
2432: PPUSH
2433: CALL_OW 28
2437: IFFALSE 2454
// Ralph = CreateCharacter ( Ralph_11_sel ) else
2439: LD_ADDR_EXP 12
2443: PUSH
2444: LD_STRING Ralph_11_sel
2446: PPUSH
2447: CALL_OW 34
2451: ST_TO_ADDR
2452: GO 2462
// Ralph = 0 ;
2454: LD_ADDR_EXP 12
2458: PUSH
2459: LD_INT 0
2461: ST_TO_ADDR
// if TestCharacters ( Kowalski_11_sel ) then
2462: LD_STRING Kowalski_11_sel
2464: PPUSH
2465: CALL_OW 28
2469: IFFALSE 2486
// Kowalski = CreateCharacter ( Kowalski_11_sel ) else
2471: LD_ADDR_EXP 13
2475: PUSH
2476: LD_STRING Kowalski_11_sel
2478: PPUSH
2479: CALL_OW 34
2483: ST_TO_ADDR
2484: GO 2494
// Kowalski = 0 ;
2486: LD_ADDR_EXP 13
2490: PUSH
2491: LD_INT 0
2493: ST_TO_ADDR
// if TestCharacters ( Evelyn_11_sel ) then
2494: LD_STRING Evelyn_11_sel
2496: PPUSH
2497: CALL_OW 28
2501: IFFALSE 2518
// Evelyn = CreateCharacter ( Evelyn_11_sel ) else
2503: LD_ADDR_EXP 14
2507: PUSH
2508: LD_STRING Evelyn_11_sel
2510: PPUSH
2511: CALL_OW 34
2515: ST_TO_ADDR
2516: GO 2526
// Evelyn = 0 ;
2518: LD_ADDR_EXP 14
2522: PUSH
2523: LD_INT 0
2525: ST_TO_ADDR
// if TestCharacters ( Suze_11_sel ) then
2526: LD_STRING Suze_11_sel
2528: PPUSH
2529: CALL_OW 28
2533: IFFALSE 2550
// Suze = CreateCharacter ( Suze_11_sel ) else
2535: LD_ADDR_EXP 15
2539: PUSH
2540: LD_STRING Suze_11_sel
2542: PPUSH
2543: CALL_OW 34
2547: ST_TO_ADDR
2548: GO 2558
// Suze = 0 ;
2550: LD_ADDR_EXP 15
2554: PUSH
2555: LD_INT 0
2557: ST_TO_ADDR
// if TestCharacters ( Olaf_11_sel ) then
2558: LD_STRING Olaf_11_sel
2560: PPUSH
2561: CALL_OW 28
2565: IFFALSE 2582
// Olaf = CreateCharacter ( Olaf_11_sel ) else
2567: LD_ADDR_EXP 16
2571: PUSH
2572: LD_STRING Olaf_11_sel
2574: PPUSH
2575: CALL_OW 34
2579: ST_TO_ADDR
2580: GO 2590
// Olaf = 0 ;
2582: LD_ADDR_EXP 16
2586: PUSH
2587: LD_INT 0
2589: ST_TO_ADDR
// if TestCharacters ( Dwayne_11_sel ) then
2590: LD_STRING Dwayne_11_sel
2592: PPUSH
2593: CALL_OW 28
2597: IFFALSE 2614
// Dwayne = CreateCharacter ( Dwayne_11_sel ) else
2599: LD_ADDR_EXP 18
2603: PUSH
2604: LD_STRING Dwayne_11_sel
2606: PPUSH
2607: CALL_OW 34
2611: ST_TO_ADDR
2612: GO 2622
// Dwayne = 0 ;
2614: LD_ADDR_EXP 18
2618: PUSH
2619: LD_INT 0
2621: ST_TO_ADDR
// if TestCharacters ( MarkB_11_sel ) then
2622: LD_STRING MarkB_11_sel
2624: PPUSH
2625: CALL_OW 28
2629: IFFALSE 2646
// MarkB = CreateCharacter ( MarkB_11_sel ) else
2631: LD_ADDR_EXP 19
2635: PUSH
2636: LD_STRING MarkB_11_sel
2638: PPUSH
2639: CALL_OW 34
2643: ST_TO_ADDR
2644: GO 2654
// MarkB = 0 ;
2646: LD_ADDR_EXP 19
2650: PUSH
2651: LD_INT 0
2653: ST_TO_ADDR
// if TestCharacters ( Aviradze_11_sel ) then
2654: LD_STRING Aviradze_11_sel
2656: PPUSH
2657: CALL_OW 28
2661: IFFALSE 2678
// Aviradze = CreateCharacter ( Aviradze_11_sel ) else
2663: LD_ADDR_EXP 20
2667: PUSH
2668: LD_STRING Aviradze_11_sel
2670: PPUSH
2671: CALL_OW 34
2675: ST_TO_ADDR
2676: GO 2686
// Aviradze = 0 ;
2678: LD_ADDR_EXP 20
2682: PUSH
2683: LD_INT 0
2685: ST_TO_ADDR
// if TestCharacters ( Swansson_11_sel ) then
2686: LD_STRING Swansson_11_sel
2688: PPUSH
2689: CALL_OW 28
2693: IFFALSE 2710
// Swansson = CreateCharacter ( Swansson_11_sel ) else
2695: LD_ADDR_EXP 21
2699: PUSH
2700: LD_STRING Swansson_11_sel
2702: PPUSH
2703: CALL_OW 34
2707: ST_TO_ADDR
2708: GO 2718
// Swansson = 0 ;
2710: LD_ADDR_EXP 21
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
// human_list = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] diff 0 ;
2718: LD_ADDR_VAR 0 2
2722: PUSH
2723: LD_EXP 9
2727: PUSH
2728: LD_EXP 10
2732: PUSH
2733: LD_EXP 11
2737: PUSH
2738: LD_EXP 12
2742: PUSH
2743: LD_EXP 13
2747: PUSH
2748: LD_EXP 14
2752: PUSH
2753: LD_EXP 15
2757: PUSH
2758: LD_EXP 16
2762: PUSH
2763: LD_EXP 17
2767: PUSH
2768: LD_EXP 18
2772: PUSH
2773: LD_EXP 19
2777: PUSH
2778: LD_EXP 20
2782: PUSH
2783: LD_EXP 21
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 0
2805: DIFF
2806: ST_TO_ADDR
// human_list = human_list ^ ( CreateCharacterSet ( Others_11_sel ) diff 0 ) ;
2807: LD_ADDR_VAR 0 2
2811: PUSH
2812: LD_VAR 0 2
2816: PUSH
2817: LD_STRING Others_11_sel
2819: PPUSH
2820: CALL_OW 31
2824: PUSH
2825: LD_INT 0
2827: DIFF
2828: ADD
2829: ST_TO_ADDR
// if TestCharacters ( Gonzo_10 ) then
2830: LD_STRING Gonzo_10
2832: PPUSH
2833: CALL_OW 28
2837: IFFALSE 2870
// begin Gonzo = CreateCharacter ( Gonzo_10 ) ;
2839: LD_ADDR_EXP 22
2843: PUSH
2844: LD_STRING Gonzo_10
2846: PPUSH
2847: CALL_OW 34
2851: ST_TO_ADDR
// human_list = human_list ^ Gonzo ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_VAR 0 2
2861: PUSH
2862: LD_EXP 22
2866: ADD
2867: ST_TO_ADDR
// end else
2868: GO 2878
// Gonzo = 0 ;
2870: LD_ADDR_EXP 22
2874: PUSH
2875: LD_INT 0
2877: ST_TO_ADDR
// end else
2878: GO 3413
// begin InitHc ;
2880: CALL_OW 19
// PrepareSoldier ( sex_female , 7 ) ;
2884: LD_INT 2
2886: PPUSH
2887: LD_INT 7
2889: PPUSH
2890: CALL_OW 381
// hc_name = Heike ;
2894: LD_ADDR_OWVAR 26
2898: PUSH
2899: LD_STRING Heike
2901: ST_TO_ADDR
// Heike = CreateHuman ;
2902: LD_ADDR_EXP 9
2906: PUSH
2907: CALL_OW 44
2911: ST_TO_ADDR
// PrepareScientist ( sex_female , 7 ) ;
2912: LD_INT 2
2914: PPUSH
2915: LD_INT 7
2917: PPUSH
2918: CALL_OW 384
// hc_name = Sonya ;
2922: LD_ADDR_OWVAR 26
2926: PUSH
2927: LD_STRING Sonya
2929: ST_TO_ADDR
// Sonya = CreateHuman ;
2930: LD_ADDR_EXP 10
2934: PUSH
2935: CALL_OW 44
2939: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 7
2945: PPUSH
2946: CALL_OW 381
// hc_name = Oswald ;
2950: LD_ADDR_OWVAR 26
2954: PUSH
2955: LD_STRING Oswald
2957: ST_TO_ADDR
// Oswald = CreateHuman ;
2958: LD_ADDR_EXP 11
2962: PUSH
2963: CALL_OW 44
2967: ST_TO_ADDR
// oswald_is_substitute = false ;
2968: LD_ADDR_EXP 80
2972: PUSH
2973: LD_INT 0
2975: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
2976: LD_INT 1
2978: PPUSH
2979: LD_INT 7
2981: PPUSH
2982: CALL_OW 381
// hc_name = Ralph ;
2986: LD_ADDR_OWVAR 26
2990: PUSH
2991: LD_STRING Ralph
2993: ST_TO_ADDR
// Ralph = CreateHuman ;
2994: LD_ADDR_EXP 12
2998: PUSH
2999: CALL_OW 44
3003: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3004: LD_INT 1
3006: PPUSH
3007: LD_INT 7
3009: PPUSH
3010: CALL_OW 381
// hc_name = Kowalski ;
3014: LD_ADDR_OWVAR 26
3018: PUSH
3019: LD_STRING Kowalski
3021: ST_TO_ADDR
// Kowalski = CreateHuman ;
3022: LD_ADDR_EXP 13
3026: PUSH
3027: CALL_OW 44
3031: ST_TO_ADDR
// PrepareEngineer ( sex_female , 7 ) ;
3032: LD_INT 2
3034: PPUSH
3035: LD_INT 7
3037: PPUSH
3038: CALL_OW 382
// hc_name = Evelyn ;
3042: LD_ADDR_OWVAR 26
3046: PUSH
3047: LD_STRING Evelyn
3049: ST_TO_ADDR
// Evelyn = CreateHuman ;
3050: LD_ADDR_EXP 14
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// PrepareSoldier ( sex_female , 7 ) ;
3060: LD_INT 2
3062: PPUSH
3063: LD_INT 7
3065: PPUSH
3066: CALL_OW 381
// hc_name = Suze ;
3070: LD_ADDR_OWVAR 26
3074: PUSH
3075: LD_STRING Suze
3077: ST_TO_ADDR
// Suze = CreateHuman ;
3078: LD_ADDR_EXP 15
3082: PUSH
3083: CALL_OW 44
3087: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
3088: LD_INT 1
3090: PPUSH
3091: LD_INT 7
3093: PPUSH
3094: CALL_OW 383
// hc_name = Olaf ;
3098: LD_ADDR_OWVAR 26
3102: PUSH
3103: LD_STRING Olaf
3105: ST_TO_ADDR
// Olaf = CreateHuman ;
3106: LD_ADDR_EXP 16
3110: PUSH
3111: CALL_OW 44
3115: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3116: LD_INT 1
3118: PPUSH
3119: LD_INT 7
3121: PPUSH
3122: CALL_OW 381
// hc_name = Kurt ;
3126: LD_ADDR_OWVAR 26
3130: PUSH
3131: LD_STRING Kurt
3133: ST_TO_ADDR
// Kurt = CreateHuman ;
3134: LD_ADDR_EXP 17
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// kurt_is_substitute = false ;
3144: LD_ADDR_EXP 81
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
3152: LD_INT 1
3154: PPUSH
3155: LD_INT 7
3157: PPUSH
3158: CALL_OW 383
// hc_name = Dwayne ;
3162: LD_ADDR_OWVAR 26
3166: PUSH
3167: LD_STRING Dwayne
3169: ST_TO_ADDR
// Dwayne = CreateHuman ;
3170: LD_ADDR_EXP 18
3174: PUSH
3175: CALL_OW 44
3179: ST_TO_ADDR
// PrepareScientist ( sex_male , 7 ) ;
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 7
3185: PPUSH
3186: CALL_OW 384
// hc_name = Mark ;
3190: LD_ADDR_OWVAR 26
3194: PUSH
3195: LD_STRING Mark
3197: ST_TO_ADDR
// MarkB = CreateHuman ;
3198: LD_ADDR_EXP 19
3202: PUSH
3203: CALL_OW 44
3207: ST_TO_ADDR
// Aviradze = 0 ;
3208: LD_ADDR_EXP 20
3212: PUSH
3213: LD_INT 0
3215: ST_TO_ADDR
// Swansson = 0 ;
3216: LD_ADDR_EXP 21
3220: PUSH
3221: LD_INT 0
3223: ST_TO_ADDR
// human_list = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] diff 0 ;
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: LD_EXP 9
3233: PUSH
3234: LD_EXP 10
3238: PUSH
3239: LD_EXP 11
3243: PUSH
3244: LD_EXP 12
3248: PUSH
3249: LD_EXP 13
3253: PUSH
3254: LD_EXP 14
3258: PUSH
3259: LD_EXP 15
3263: PUSH
3264: LD_EXP 16
3268: PUSH
3269: LD_EXP 17
3273: PUSH
3274: LD_EXP 18
3278: PUSH
3279: LD_EXP 19
3283: PUSH
3284: LD_EXP 20
3288: PUSH
3289: LD_EXP 21
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 0
3311: DIFF
3312: ST_TO_ADDR
// InitHc ;
3313: CALL_OW 19
// uc_nation = nation_nature ;
3317: LD_ADDR_OWVAR 21
3321: PUSH
3322: LD_INT 0
3324: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
3325: LD_ADDR_OWVAR 28
3329: PUSH
3330: LD_INT 15
3332: ST_TO_ADDR
// hc_name = Gonzo ;
3333: LD_ADDR_OWVAR 26
3337: PUSH
3338: LD_STRING Gonzo
3340: ST_TO_ADDR
// hc_skills = [ 3 , 1 , 0 , 0 ] ;
3341: LD_ADDR_OWVAR 31
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: LD_INT 0
3354: PUSH
3355: LD_INT 0
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: ST_TO_ADDR
// hc_attr = [ 13 , 12 ] ;
3364: LD_ADDR_OWVAR 29
3368: PUSH
3369: LD_INT 13
3371: PUSH
3372: LD_INT 12
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: ST_TO_ADDR
// hc_sex = sex_male ;
3379: LD_ADDR_OWVAR 27
3383: PUSH
3384: LD_INT 1
3386: ST_TO_ADDR
// Gonzo = CreateHuman ;
3387: LD_ADDR_EXP 22
3391: PUSH
3392: CALL_OW 44
3396: ST_TO_ADDR
// human_list = human_list ^ Gonzo ;
3397: LD_ADDR_VAR 0 2
3401: PUSH
3402: LD_VAR 0 2
3406: PUSH
3407: LD_EXP 22
3411: ADD
3412: ST_TO_ADDR
// end ; InitVc ;
3413: CALL_OW 20
// uc_direction = 5 ;
3417: LD_ADDR_OWVAR 24
3421: PUSH
3422: LD_INT 5
3424: ST_TO_ADDR
// uc_nation = nation_arabian ;
3425: LD_ADDR_OWVAR 21
3429: PUSH
3430: LD_INT 2
3432: ST_TO_ADDR
// vc_engine = engine_combustion ;
3433: LD_ADDR_OWVAR 39
3437: PUSH
3438: LD_INT 1
3440: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
3441: LD_ADDR_OWVAR 37
3445: PUSH
3446: LD_INT 14
3448: ST_TO_ADDR
// vc_control = control_manual ;
3449: LD_ADDR_OWVAR 38
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// vc_weapon = ar_cargo_bay ;
3457: LD_ADDR_OWVAR 40
3461: PUSH
3462: LD_INT 32
3464: ST_TO_ADDR
// for i = 1 to 2 do
3465: LD_ADDR_VAR 0 3
3469: PUSH
3470: DOUBLE
3471: LD_INT 1
3473: DEC
3474: ST_TO_ADDR
3475: LD_INT 2
3477: PUSH
3478: FOR_TO
3479: IFFALSE 3800
// begin temp_unit = CreateVehicle ;
3481: LD_ADDR_VAR 0 4
3485: PUSH
3486: CALL_OW 45
3490: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
3491: LD_VAR 0 4
3495: PPUSH
3496: LD_INT 50
3498: PPUSH
3499: LD_INT 70
3501: PPUSH
3502: CALL_OW 12
3506: PPUSH
3507: CALL_OW 240
// val = Rand ( 1 , human_list - 1 ) ;
3511: LD_ADDR_VAR 0 5
3515: PUSH
3516: LD_INT 1
3518: PPUSH
3519: LD_VAR 0 2
3523: PUSH
3524: LD_INT 1
3526: MINUS
3527: PPUSH
3528: CALL_OW 12
3532: ST_TO_ADDR
// PlaceHumanInUnit ( human_list [ val ] , temp_unit ) ;
3533: LD_VAR 0 2
3537: PUSH
3538: LD_VAR 0 5
3542: ARRAY
3543: PPUSH
3544: LD_VAR 0 4
3548: PPUSH
3549: CALL_OW 52
// human_list = Delete ( human_list , val ) ;
3553: LD_ADDR_VAR 0 2
3557: PUSH
3558: LD_VAR 0 2
3562: PPUSH
3563: LD_VAR 0 5
3567: PPUSH
3568: CALL_OW 3
3572: ST_TO_ADDR
// case i of 1 :
3573: LD_VAR 0 3
3577: PUSH
3578: LD_INT 1
3580: DOUBLE
3581: EQUAL
3582: IFTRUE 3586
3584: GO 3604
3586: POP
// begin SetCargo ( temp_unit , mat_cans , 100 ) ;
3587: LD_VAR 0 4
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 100
3597: PPUSH
3598: CALL_OW 290
// end ; 2 :
3602: GO 3783
3604: LD_INT 2
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3612
3610: GO 3782
3612: POP
// begin val = [ 90 , 70 , 50 ] [ difficulty ] ;
3613: LD_ADDR_VAR 0 5
3617: PUSH
3618: LD_INT 90
3620: PUSH
3621: LD_INT 70
3623: PUSH
3624: LD_INT 50
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: PUSH
3632: LD_OWVAR 67
3636: ARRAY
3637: ST_TO_ADDR
// if LoadVariable ( Abdul_doubt_07 , false ) then
3638: LD_STRING Abdul_doubt_07
3640: PPUSH
3641: LD_INT 0
3643: PPUSH
3644: CALL_OW 30
3648: IFFALSE 3664
// val = val - 50 ;
3650: LD_ADDR_VAR 0 5
3654: PUSH
3655: LD_VAR 0 5
3659: PUSH
3660: LD_INT 50
3662: MINUS
3663: ST_TO_ADDR
// if LoadVariable ( Siberite_gathered_on_time_07_cont , true ) then
3664: LD_STRING Siberite_gathered_on_time_07_cont
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 30
3674: IFFALSE 3710
// begin val = val + 20 ;
3676: LD_ADDR_VAR 0 5
3680: PUSH
3681: LD_VAR 0 5
3685: PUSH
3686: LD_INT 20
3688: PLUS
3689: ST_TO_ADDR
// if val > 100 then
3690: LD_VAR 0 5
3694: PUSH
3695: LD_INT 100
3697: GREATER
3698: IFFALSE 3708
// val = 100 ;
3700: LD_ADDR_VAR 0 5
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// end else
3708: GO 3724
// val = val - 50 ;
3710: LD_ADDR_VAR 0 5
3714: PUSH
3715: LD_VAR 0 5
3719: PUSH
3720: LD_INT 50
3722: MINUS
3723: ST_TO_ADDR
// if val < 0 then
3724: LD_VAR 0 5
3728: PUSH
3729: LD_INT 0
3731: LESS
3732: IFFALSE 3742
// val = 0 ;
3734: LD_ADDR_VAR 0 5
3738: PUSH
3739: LD_INT 0
3741: ST_TO_ADDR
// SetCargo ( temp_unit , mat_cans , val ) ;
3742: LD_VAR 0 4
3746: PPUSH
3747: LD_INT 1
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: CALL_OW 290
// AddCargo ( temp_unit , mat_oil , 100 - val ) ;
3759: LD_VAR 0 4
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: LD_INT 100
3769: PUSH
3770: LD_VAR 0 5
3774: MINUS
3775: PPUSH
3776: CALL_OW 291
// end ; end ;
3780: GO 3783
3782: POP
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_INT 8
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
// end ;
3798: GO 3478
3800: POP
3801: POP
// val = 0 ;
3802: LD_ADDR_VAR 0 5
3806: PUSH
3807: LD_INT 0
3809: ST_TO_ADDR
// for i = 1 to [ 3 , 2 , 1 ] [ difficulty ] - LoadVariable ( Abdul_doubt_07 , false ) do
3810: LD_ADDR_VAR 0 3
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_INT 3
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: LD_INT 1
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: LIST
3833: PUSH
3834: LD_OWVAR 67
3838: ARRAY
3839: PUSH
3840: LD_STRING Abdul_doubt_07
3842: PPUSH
3843: LD_INT 0
3845: PPUSH
3846: CALL_OW 30
3850: MINUS
3851: PUSH
3852: FOR_TO
3853: IFFALSE 4399
// begin vc_engine = engine_combustion ;
3855: LD_ADDR_OWVAR 39
3859: PUSH
3860: LD_INT 1
3862: ST_TO_ADDR
// if val = 0 then
3863: LD_VAR 0 5
3867: PUSH
3868: LD_INT 0
3870: EQUAL
3871: IFFALSE 3963
// begin case Rand ( 1 , 4 ) of 1 :
3873: LD_INT 1
3875: PPUSH
3876: LD_INT 4
3878: PPUSH
3879: CALL_OW 12
3883: PUSH
3884: LD_INT 1
3886: DOUBLE
3887: EQUAL
3888: IFTRUE 3892
3890: GO 3903
3892: POP
// vc_chassis = ar_hovercraft ; 2 :
3893: LD_ADDR_OWVAR 37
3897: PUSH
3898: LD_INT 11
3900: ST_TO_ADDR
3901: GO 3961
3903: LD_INT 2
3905: DOUBLE
3906: EQUAL
3907: IFTRUE 3911
3909: GO 3922
3911: POP
// vc_chassis = ar_light_trike ; 3 :
3912: LD_ADDR_OWVAR 37
3916: PUSH
3917: LD_INT 12
3919: ST_TO_ADDR
3920: GO 3961
3922: LD_INT 3
3924: DOUBLE
3925: EQUAL
3926: IFTRUE 3930
3928: GO 3941
3930: POP
// vc_chassis = ar_medium_trike ; 4 :
3931: LD_ADDR_OWVAR 37
3935: PUSH
3936: LD_INT 13
3938: ST_TO_ADDR
3939: GO 3961
3941: LD_INT 4
3943: DOUBLE
3944: EQUAL
3945: IFTRUE 3949
3947: GO 3960
3949: POP
// vc_chassis = ar_half_tracked ; end ;
3950: LD_ADDR_OWVAR 37
3954: PUSH
3955: LD_INT 14
3957: ST_TO_ADDR
3958: GO 3961
3960: POP
// end else
3961: GO 4013
// begin case Rand ( 1 , 2 ) of 1 :
3963: LD_INT 1
3965: PPUSH
3966: LD_INT 2
3968: PPUSH
3969: CALL_OW 12
3973: PUSH
3974: LD_INT 1
3976: DOUBLE
3977: EQUAL
3978: IFTRUE 3982
3980: GO 3993
3982: POP
// vc_chassis = ar_medium_trike ; 2 :
3983: LD_ADDR_OWVAR 37
3987: PUSH
3988: LD_INT 13
3990: ST_TO_ADDR
3991: GO 4013
3993: LD_INT 2
3995: DOUBLE
3996: EQUAL
3997: IFTRUE 4001
3999: GO 4012
4001: POP
// vc_chassis = ar_half_tracked ; end ;
4002: LD_ADDR_OWVAR 37
4006: PUSH
4007: LD_INT 14
4009: ST_TO_ADDR
4010: GO 4013
4012: POP
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
4013: LD_OWVAR 37
4017: PUSH
4018: LD_INT 11
4020: PUSH
4021: LD_INT 12
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: IN
4028: IFFALSE 4158
// begin val = val + 1 ;
4030: LD_ADDR_VAR 0 5
4034: PUSH
4035: LD_VAR 0 5
4039: PUSH
4040: LD_INT 1
4042: PLUS
4043: ST_TO_ADDR
// case Rand ( 1 , 4 ) of 1 :
4044: LD_INT 1
4046: PPUSH
4047: LD_INT 4
4049: PPUSH
4050: CALL_OW 12
4054: PUSH
4055: LD_INT 1
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4074
4063: POP
// vc_weapon = ar_multimissile_ballista ; 2 :
4064: LD_ADDR_OWVAR 40
4068: PUSH
4069: LD_INT 22
4071: ST_TO_ADDR
4072: GO 4132
4074: LD_INT 2
4076: DOUBLE
4077: EQUAL
4078: IFTRUE 4082
4080: GO 4093
4082: POP
// vc_weapon = ar_light_gun ; 3 :
4083: LD_ADDR_OWVAR 40
4087: PUSH
4088: LD_INT 23
4090: ST_TO_ADDR
4091: GO 4132
4093: LD_INT 3
4095: DOUBLE
4096: EQUAL
4097: IFTRUE 4101
4099: GO 4112
4101: POP
// vc_weapon = ar_double_machine_gun ; 4 :
4102: LD_ADDR_OWVAR 40
4106: PUSH
4107: LD_INT 24
4109: ST_TO_ADDR
4110: GO 4132
4112: LD_INT 4
4114: DOUBLE
4115: EQUAL
4116: IFTRUE 4120
4118: GO 4131
4120: POP
// vc_weapon = ar_radar ; end ;
4121: LD_ADDR_OWVAR 40
4125: PUSH
4126: LD_INT 30
4128: ST_TO_ADDR
4129: GO 4132
4131: POP
// if Rand ( 1 , 2 ) = 1 then
4132: LD_INT 1
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: CALL_OW 12
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4156
// vc_engine = engine_solar ;
4148: LD_ADDR_OWVAR 39
4152: PUSH
4153: LD_INT 2
4155: ST_TO_ADDR
// end else
4156: GO 4246
// begin case Rand ( 1 , 4 ) of 1 :
4158: LD_INT 1
4160: PPUSH
4161: LD_INT 4
4163: PPUSH
4164: CALL_OW 12
4168: PUSH
4169: LD_INT 1
4171: DOUBLE
4172: EQUAL
4173: IFTRUE 4177
4175: GO 4188
4177: POP
// vc_weapon = ar_gatling_gun ; 2 :
4178: LD_ADDR_OWVAR 40
4182: PUSH
4183: LD_INT 25
4185: ST_TO_ADDR
4186: GO 4246
4188: LD_INT 2
4190: DOUBLE
4191: EQUAL
4192: IFTRUE 4196
4194: GO 4207
4196: POP
// vc_weapon = ar_gun ; 3 :
4197: LD_ADDR_OWVAR 40
4201: PUSH
4202: LD_INT 27
4204: ST_TO_ADDR
4205: GO 4246
4207: LD_INT 3
4209: DOUBLE
4210: EQUAL
4211: IFTRUE 4215
4213: GO 4226
4215: POP
// vc_weapon = ar_flame_thrower ; 4 :
4216: LD_ADDR_OWVAR 40
4220: PUSH
4221: LD_INT 26
4223: ST_TO_ADDR
4224: GO 4246
4226: LD_INT 4
4228: DOUBLE
4229: EQUAL
4230: IFTRUE 4234
4232: GO 4245
4234: POP
// vc_weapon = ar_rocket_launcher ; end ;
4235: LD_ADDR_OWVAR 40
4239: PUSH
4240: LD_INT 28
4242: ST_TO_ADDR
4243: GO 4246
4245: POP
// end ; if Rand ( 1 , 5 ) <= 2 then
4246: LD_INT 1
4248: PPUSH
4249: LD_INT 5
4251: PPUSH
4252: CALL_OW 12
4256: PUSH
4257: LD_INT 2
4259: LESSEQUAL
4260: IFFALSE 4272
// vc_control = control_apeman else
4262: LD_ADDR_OWVAR 38
4266: PUSH
4267: LD_INT 5
4269: ST_TO_ADDR
4270: GO 4280
// vc_control = control_manual ;
4272: LD_ADDR_OWVAR 38
4276: PUSH
4277: LD_INT 1
4279: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4280: LD_ADDR_VAR 0 4
4284: PUSH
4285: CALL_OW 45
4289: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 50
4297: PPUSH
4298: LD_INT 70
4300: PPUSH
4301: CALL_OW 12
4305: PPUSH
4306: CALL_OW 240
// if vc_control = control_manual then
4310: LD_OWVAR 38
4314: PUSH
4315: LD_INT 1
4317: EQUAL
4318: IFFALSE 4382
// begin val = Rand ( 1 , human_list - 1 ) ;
4320: LD_ADDR_VAR 0 5
4324: PUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_VAR 0 2
4332: PUSH
4333: LD_INT 1
4335: MINUS
4336: PPUSH
4337: CALL_OW 12
4341: ST_TO_ADDR
// PlaceHumanInUnit ( human_list [ val ] , temp_unit ) ;
4342: LD_VAR 0 2
4346: PUSH
4347: LD_VAR 0 5
4351: ARRAY
4352: PPUSH
4353: LD_VAR 0 4
4357: PPUSH
4358: CALL_OW 52
// human_list = Delete ( human_list , val ) ;
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: LD_VAR 0 2
4371: PPUSH
4372: LD_VAR 0 5
4376: PPUSH
4377: CALL_OW 3
4381: ST_TO_ADDR
// end ; PlaceUnitArea ( temp_unit , enter_area , false ) ;
4382: LD_VAR 0 4
4386: PPUSH
4387: LD_INT 8
4389: PPUSH
4390: LD_INT 0
4392: PPUSH
4393: CALL_OW 49
// end ;
4397: GO 3852
4399: POP
4400: POP
// for i in human_list do
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: LD_VAR 0 2
4410: PUSH
4411: FOR_IN
4412: IFFALSE 4431
// PlaceUnitArea ( i , enter_area , false ) ;
4414: LD_VAR 0 3
4418: PPUSH
4419: LD_INT 8
4421: PPUSH
4422: LD_INT 0
4424: PPUSH
4425: CALL_OW 49
4429: GO 4411
4431: POP
4432: POP
// vc_engine = engine_solar ;
4433: LD_ADDR_OWVAR 39
4437: PUSH
4438: LD_INT 2
4440: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
4441: LD_ADDR_OWVAR 37
4445: PUSH
4446: LD_INT 11
4448: ST_TO_ADDR
// vc_control = control_apeman ;
4449: LD_ADDR_OWVAR 38
4453: PUSH
4454: LD_INT 5
4456: ST_TO_ADDR
// vc_weapon = ar_radar ;
4457: LD_ADDR_OWVAR 40
4461: PUSH
4462: LD_INT 30
4464: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4465: LD_ADDR_VAR 0 4
4469: PUSH
4470: CALL_OW 45
4474: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 50
4482: PPUSH
4483: LD_INT 70
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: CALL_OW 240
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
4495: LD_VAR 0 4
4499: PPUSH
4500: LD_INT 8
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 49
// vc_engine = engine_solar ;
4510: LD_ADDR_OWVAR 39
4514: PUSH
4515: LD_INT 2
4517: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
4518: LD_ADDR_OWVAR 37
4522: PUSH
4523: LD_INT 14
4525: ST_TO_ADDR
// vc_control = control_apeman ;
4526: LD_ADDR_OWVAR 38
4530: PUSH
4531: LD_INT 5
4533: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
4534: LD_ADDR_OWVAR 40
4538: PUSH
4539: LD_INT 28
4541: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4542: LD_ADDR_VAR 0 4
4546: PUSH
4547: CALL_OW 45
4551: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4552: LD_VAR 0 4
4556: PPUSH
4557: LD_INT 50
4559: PPUSH
4560: LD_INT 70
4562: PPUSH
4563: CALL_OW 12
4567: PPUSH
4568: CALL_OW 240
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
4572: LD_VAR 0 4
4576: PPUSH
4577: LD_INT 8
4579: PPUSH
4580: LD_INT 0
4582: PPUSH
4583: CALL_OW 49
// Gensher = NewCharacter ( Dietrich ) ;
4587: LD_ADDR_EXP 23
4591: PUSH
4592: LD_STRING Dietrich
4594: PPUSH
4595: CALL_OW 25
4599: ST_TO_ADDR
// SetSide ( Gensher , you_alt ) ;
4600: LD_EXP 23
4604: PPUSH
4605: LD_EXP 5
4609: PPUSH
4610: CALL_OW 235
// PlaceHumanInUnit ( Gensher , ar_bar ) ;
4614: LD_EXP 23
4618: PPUSH
4619: LD_INT 61
4621: PPUSH
4622: CALL_OW 52
// InitHc ;
4626: CALL_OW 19
// uc_side = you_alt ;
4630: LD_ADDR_OWVAR 20
4634: PUSH
4635: LD_EXP 5
4639: ST_TO_ADDR
// for i = 1 to 4 do
4640: LD_ADDR_VAR 0 3
4644: PUSH
4645: DOUBLE
4646: LD_INT 1
4648: DEC
4649: ST_TO_ADDR
4650: LD_INT 4
4652: PUSH
4653: FOR_TO
4654: IFFALSE 4706
// begin PrepareScientist ( false , 7 ) ;
4656: LD_INT 0
4658: PPUSH
4659: LD_INT 7
4661: PPUSH
4662: CALL_OW 384
// temp_unit = CreateHuman ;
4666: LD_ADDR_VAR 0 4
4670: PUSH
4671: CALL_OW 44
4675: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ temp_unit ;
4676: LD_ADDR_EXP 82
4680: PUSH
4681: LD_EXP 82
4685: PUSH
4686: LD_VAR 0 4
4690: ADD
4691: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lab ) ;
4692: LD_VAR 0 4
4696: PPUSH
4697: LD_INT 59
4699: PPUSH
4700: CALL_OW 52
// end ;
4704: GO 4653
4706: POP
4707: POP
// ai_scientists = Replace ( ai_scientists , 2 , original_gensher_people ) ;
4708: LD_ADDR_EXP 32
4712: PUSH
4713: LD_EXP 32
4717: PPUSH
4718: LD_INT 2
4720: PPUSH
4721: LD_EXP 82
4725: PPUSH
4726: CALL_OW 1
4730: ST_TO_ADDR
// PrepareEngineer ( false , [ 7 , 6 , 5 ] [ difficulty ] ) ;
4731: LD_INT 0
4733: PPUSH
4734: LD_INT 7
4736: PUSH
4737: LD_INT 6
4739: PUSH
4740: LD_INT 5
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: LD_OWVAR 67
4752: ARRAY
4753: PPUSH
4754: CALL_OW 382
// temp_unit = CreateHuman ;
4758: LD_ADDR_VAR 0 4
4762: PUSH
4763: CALL_OW 44
4767: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ temp_unit ;
4768: LD_ADDR_EXP 82
4772: PUSH
4773: LD_EXP 82
4777: PUSH
4778: LD_VAR 0 4
4782: ADD
4783: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_dep ) ;
4784: LD_VAR 0 4
4788: PPUSH
4789: LD_INT 58
4791: PPUSH
4792: CALL_OW 52
// ai_engineers = Replace ( ai_engineers , 2 , [ temp_unit ] ) ;
4796: LD_ADDR_EXP 30
4800: PUSH
4801: LD_EXP 30
4805: PPUSH
4806: LD_INT 2
4808: PPUSH
4809: LD_VAR 0 4
4813: PUSH
4814: EMPTY
4815: LIST
4816: PPUSH
4817: CALL_OW 1
4821: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ mech1 ;
4822: LD_ADDR_EXP 82
4826: PUSH
4827: LD_EXP 82
4831: PUSH
4832: LD_INT 495
4834: ADD
4835: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ mech2 ;
4836: LD_ADDR_EXP 82
4840: PUSH
4841: LD_EXP 82
4845: PUSH
4846: LD_INT 494
4848: ADD
4849: ST_TO_ADDR
// InitHc ;
4850: CALL_OW 19
// uc_nation = nation_nature ;
4854: LD_ADDR_OWVAR 21
4858: PUSH
4859: LD_INT 0
4861: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
4862: LD_ADDR_OWVAR 28
4866: PUSH
4867: LD_INT 15
4869: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 2 ) , Rand ( 0 , 1 ) , 0 , 0 ] ;
4870: LD_ADDR_OWVAR 31
4874: PUSH
4875: LD_INT 1
4877: PPUSH
4878: LD_INT 2
4880: PPUSH
4881: CALL_OW 12
4885: PUSH
4886: LD_INT 0
4888: PPUSH
4889: LD_INT 1
4891: PPUSH
4892: CALL_OW 12
4896: PUSH
4897: LD_INT 0
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 12 ) ] ;
4909: LD_ADDR_OWVAR 29
4913: PUSH
4914: LD_INT 11
4916: PPUSH
4917: LD_INT 13
4919: PPUSH
4920: CALL_OW 12
4924: PUSH
4925: LD_INT 10
4927: PPUSH
4928: LD_INT 12
4930: PPUSH
4931: CALL_OW 12
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4940: LD_ADDR_OWVAR 27
4944: PUSH
4945: LD_INT 1
4947: PPUSH
4948: LD_INT 2
4950: PPUSH
4951: CALL_OW 12
4955: ST_TO_ADDR
// temp_unit = CreateHuman ;
4956: LD_ADDR_VAR 0 4
4960: PUSH
4961: CALL_OW 44
4965: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_bu1 ) ;
4966: LD_VAR 0 4
4970: PPUSH
4971: LD_INT 73
4973: PPUSH
4974: CALL_OW 52
// human_list = [ temp_unit ] ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_VAR 0 4
4987: PUSH
4988: EMPTY
4989: LIST
4990: ST_TO_ADDR
// gensher_bunker_apes = [ temp_unit ] ;
4991: LD_ADDR_VAR 0 7
4995: PUSH
4996: LD_VAR 0 4
5000: PUSH
5001: EMPTY
5002: LIST
5003: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5004: LD_ADDR_OWVAR 27
5008: PUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 2
5014: PPUSH
5015: CALL_OW 12
5019: ST_TO_ADDR
// temp_unit = CreateHuman ;
5020: LD_ADDR_VAR 0 4
5024: PUSH
5025: CALL_OW 44
5029: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_bu2 ) ;
5030: LD_VAR 0 4
5034: PPUSH
5035: LD_INT 78
5037: PPUSH
5038: CALL_OW 52
// human_list = human_list ^ temp_unit ;
5042: LD_ADDR_VAR 0 2
5046: PUSH
5047: LD_VAR 0 2
5051: PUSH
5052: LD_VAR 0 4
5056: ADD
5057: ST_TO_ADDR
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5058: LD_ADDR_VAR 0 7
5062: PUSH
5063: LD_VAR 0 7
5067: PUSH
5068: LD_VAR 0 4
5072: ADD
5073: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5074: LD_ADDR_OWVAR 27
5078: PUSH
5079: LD_INT 1
5081: PPUSH
5082: LD_INT 2
5084: PPUSH
5085: CALL_OW 12
5089: ST_TO_ADDR
// temp_unit = CreateHuman ;
5090: LD_ADDR_VAR 0 4
5094: PUSH
5095: CALL_OW 44
5099: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill1 ) ;
5100: LD_VAR 0 4
5104: PPUSH
5105: LD_INT 298
5107: PPUSH
5108: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5112: LD_ADDR_VAR 0 7
5116: PUSH
5117: LD_VAR 0 7
5121: PUSH
5122: LD_VAR 0 4
5126: ADD
5127: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5128: LD_ADDR_OWVAR 27
5132: PUSH
5133: LD_INT 1
5135: PPUSH
5136: LD_INT 2
5138: PPUSH
5139: CALL_OW 12
5143: ST_TO_ADDR
// temp_unit = CreateHuman ;
5144: LD_ADDR_VAR 0 4
5148: PUSH
5149: CALL_OW 44
5153: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill2 ) ;
5154: LD_VAR 0 4
5158: PPUSH
5159: LD_INT 299
5161: PPUSH
5162: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5166: LD_ADDR_VAR 0 7
5170: PUSH
5171: LD_VAR 0 7
5175: PUSH
5176: LD_VAR 0 4
5180: ADD
5181: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5182: LD_ADDR_OWVAR 27
5186: PUSH
5187: LD_INT 1
5189: PPUSH
5190: LD_INT 2
5192: PPUSH
5193: CALL_OW 12
5197: ST_TO_ADDR
// temp_unit = CreateHuman ;
5198: LD_ADDR_VAR 0 4
5202: PUSH
5203: CALL_OW 44
5207: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill3 ) ;
5208: LD_VAR 0 4
5212: PPUSH
5213: LD_INT 300
5215: PPUSH
5216: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5220: LD_ADDR_VAR 0 7
5224: PUSH
5225: LD_VAR 0 7
5229: PUSH
5230: LD_VAR 0 4
5234: ADD
5235: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5236: LD_ADDR_OWVAR 27
5240: PUSH
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 2
5246: PPUSH
5247: CALL_OW 12
5251: ST_TO_ADDR
// temp_unit = CreateHuman ;
5252: LD_ADDR_VAR 0 4
5256: PUSH
5257: CALL_OW 44
5261: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill4 ) ;
5262: LD_VAR 0 4
5266: PPUSH
5267: LD_INT 343
5269: PPUSH
5270: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5274: LD_ADDR_VAR 0 7
5278: PUSH
5279: LD_VAR 0 7
5283: PUSH
5284: LD_VAR 0 4
5288: ADD
5289: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5290: LD_ADDR_OWVAR 27
5294: PUSH
5295: LD_INT 1
5297: PPUSH
5298: LD_INT 2
5300: PPUSH
5301: CALL_OW 12
5305: ST_TO_ADDR
// temp_unit = CreateHuman ;
5306: LD_ADDR_VAR 0 4
5310: PUSH
5311: CALL_OW 44
5315: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu1 ) ;
5316: LD_VAR 0 4
5320: PPUSH
5321: LD_INT 308
5323: PPUSH
5324: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5328: LD_ADDR_VAR 0 7
5332: PUSH
5333: LD_VAR 0 7
5337: PUSH
5338: LD_VAR 0 4
5342: ADD
5343: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5344: LD_ADDR_OWVAR 27
5348: PUSH
5349: LD_INT 1
5351: PPUSH
5352: LD_INT 2
5354: PPUSH
5355: CALL_OW 12
5359: ST_TO_ADDR
// temp_unit = CreateHuman ;
5360: LD_ADDR_VAR 0 4
5364: PUSH
5365: CALL_OW 44
5369: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu2 ) ;
5370: LD_VAR 0 4
5374: PPUSH
5375: LD_INT 347
5377: PPUSH
5378: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5382: LD_ADDR_VAR 0 7
5386: PUSH
5387: LD_VAR 0 7
5391: PUSH
5392: LD_VAR 0 4
5396: ADD
5397: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5398: LD_ADDR_OWVAR 27
5402: PUSH
5403: LD_INT 1
5405: PPUSH
5406: LD_INT 2
5408: PPUSH
5409: CALL_OW 12
5413: ST_TO_ADDR
// temp_unit = CreateHuman ;
5414: LD_ADDR_VAR 0 4
5418: PUSH
5419: CALL_OW 44
5423: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu3 ) ;
5424: LD_VAR 0 4
5428: PPUSH
5429: LD_INT 346
5431: PPUSH
5432: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5436: LD_ADDR_VAR 0 7
5440: PUSH
5441: LD_VAR 0 7
5445: PUSH
5446: LD_VAR 0 4
5450: ADD
5451: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5452: LD_ADDR_OWVAR 27
5456: PUSH
5457: LD_INT 1
5459: PPUSH
5460: LD_INT 2
5462: PPUSH
5463: CALL_OW 12
5467: ST_TO_ADDR
// temp_unit = CreateHuman ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 44
5477: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu4 ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_INT 345
5485: PPUSH
5486: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5490: LD_ADDR_VAR 0 7
5494: PUSH
5495: LD_VAR 0 7
5499: PUSH
5500: LD_VAR 0 4
5504: ADD
5505: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5506: LD_ADDR_OWVAR 27
5510: PUSH
5511: LD_INT 1
5513: PPUSH
5514: LD_INT 2
5516: PPUSH
5517: CALL_OW 12
5521: ST_TO_ADDR
// temp_unit = CreateHuman ;
5522: LD_ADDR_VAR 0 4
5526: PUSH
5527: CALL_OW 44
5531: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu1 ) ;
5532: LD_VAR 0 4
5536: PPUSH
5537: LD_INT 305
5539: PPUSH
5540: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5544: LD_ADDR_VAR 0 7
5548: PUSH
5549: LD_VAR 0 7
5553: PUSH
5554: LD_VAR 0 4
5558: ADD
5559: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5560: LD_ADDR_OWVAR 27
5564: PUSH
5565: LD_INT 1
5567: PPUSH
5568: LD_INT 2
5570: PPUSH
5571: CALL_OW 12
5575: ST_TO_ADDR
// temp_unit = CreateHuman ;
5576: LD_ADDR_VAR 0 4
5580: PUSH
5581: CALL_OW 44
5585: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu2 ) ;
5586: LD_VAR 0 4
5590: PPUSH
5591: LD_INT 304
5593: PPUSH
5594: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5598: LD_ADDR_VAR 0 7
5602: PUSH
5603: LD_VAR 0 7
5607: PUSH
5608: LD_VAR 0 4
5612: ADD
5613: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5614: LD_ADDR_OWVAR 27
5618: PUSH
5619: LD_INT 1
5621: PPUSH
5622: LD_INT 2
5624: PPUSH
5625: CALL_OW 12
5629: ST_TO_ADDR
// temp_unit = CreateHuman ;
5630: LD_ADDR_VAR 0 4
5634: PUSH
5635: CALL_OW 44
5639: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu3 ) ;
5640: LD_VAR 0 4
5644: PPUSH
5645: LD_INT 303
5647: PPUSH
5648: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5652: LD_ADDR_VAR 0 7
5656: PUSH
5657: LD_VAR 0 7
5661: PUSH
5662: LD_VAR 0 4
5666: ADD
5667: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5668: LD_ADDR_OWVAR 27
5672: PUSH
5673: LD_INT 1
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: CALL_OW 12
5683: ST_TO_ADDR
// temp_unit = CreateHuman ;
5684: LD_ADDR_VAR 0 4
5688: PUSH
5689: CALL_OW 44
5693: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu4 ) ;
5694: LD_VAR 0 4
5698: PPUSH
5699: LD_INT 302
5701: PPUSH
5702: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5706: LD_ADDR_VAR 0 7
5710: PUSH
5711: LD_VAR 0 7
5715: PUSH
5716: LD_VAR 0 4
5720: ADD
5721: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5722: LD_ADDR_OWVAR 27
5726: PUSH
5727: LD_INT 1
5729: PPUSH
5730: LD_INT 2
5732: PPUSH
5733: CALL_OW 12
5737: ST_TO_ADDR
// temp_unit = CreateHuman ;
5738: LD_ADDR_VAR 0 4
5742: PUSH
5743: CALL_OW 44
5747: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu5 ) ;
5748: LD_VAR 0 4
5752: PPUSH
5753: LD_INT 374
5755: PPUSH
5756: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5760: LD_ADDR_VAR 0 7
5764: PUSH
5765: LD_VAR 0 7
5769: PUSH
5770: LD_VAR 0 4
5774: ADD
5775: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5776: LD_ADDR_OWVAR 27
5780: PUSH
5781: LD_INT 1
5783: PPUSH
5784: LD_INT 2
5786: PPUSH
5787: CALL_OW 12
5791: ST_TO_ADDR
// temp_unit = CreateHuman ;
5792: LD_ADDR_VAR 0 4
5796: PUSH
5797: CALL_OW 44
5801: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu6 ) ;
5802: LD_VAR 0 4
5806: PPUSH
5807: LD_INT 397
5809: PPUSH
5810: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5814: LD_ADDR_VAR 0 7
5818: PUSH
5819: LD_VAR 0 7
5823: PUSH
5824: LD_VAR 0 4
5828: ADD
5829: ST_TO_ADDR
// gensher_mortars = [ mortar1 ] ;
5830: LD_ADDR_EXP 99
5834: PUSH
5835: LD_INT 336
5837: PUSH
5838: EMPTY
5839: LIST
5840: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar2 ;
5841: LD_ADDR_EXP 99
5845: PUSH
5846: LD_EXP 99
5850: PUSH
5851: LD_INT 493
5853: ADD
5854: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar3 ;
5855: LD_ADDR_EXP 99
5859: PUSH
5860: LD_EXP 99
5864: PUSH
5865: LD_INT 338
5867: ADD
5868: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar4 ;
5869: LD_ADDR_EXP 99
5873: PUSH
5874: LD_EXP 99
5878: PUSH
5879: LD_INT 339
5881: ADD
5882: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar5 ;
5883: LD_ADDR_EXP 99
5887: PUSH
5888: LD_EXP 99
5892: PUSH
5893: LD_INT 340
5895: ADD
5896: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar6 ;
5897: LD_ADDR_EXP 99
5901: PUSH
5902: LD_EXP 99
5906: PUSH
5907: LD_INT 341
5909: ADD
5910: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , 2 , human_list ^ Gensher ) ;
5911: LD_ADDR_EXP 29
5915: PUSH
5916: LD_EXP 29
5920: PPUSH
5921: LD_INT 2
5923: PPUSH
5924: LD_VAR 0 2
5928: PUSH
5929: LD_EXP 23
5933: ADD
5934: PPUSH
5935: CALL_OW 1
5939: ST_TO_ADDR
// val = GetSkill ( ai_engineers [ 2 ] [ 1 ] , skill_engineering ) ;
5940: LD_ADDR_VAR 0 5
5944: PUSH
5945: LD_EXP 30
5949: PUSH
5950: LD_INT 2
5952: ARRAY
5953: PUSH
5954: LD_INT 1
5956: ARRAY
5957: PPUSH
5958: LD_INT 2
5960: PPUSH
5961: CALL_OW 259
5965: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_building ] ] ) do
5966: LD_ADDR_VAR 0 3
5970: PUSH
5971: LD_INT 22
5973: PUSH
5974: LD_EXP 5
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: LD_INT 21
5985: PUSH
5986: LD_INT 3
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PPUSH
5997: CALL_OW 69
6001: PUSH
6002: FOR_IN
6003: IFFALSE 6021
// SetBLevel ( i , val ) ;
6005: LD_VAR 0 3
6009: PPUSH
6010: LD_VAR 0 5
6014: PPUSH
6015: CALL_OW 241
6019: GO 6002
6021: POP
6022: POP
// for i in ai_engineers [ 2 ] do
6023: LD_ADDR_VAR 0 3
6027: PUSH
6028: LD_EXP 30
6032: PUSH
6033: LD_INT 2
6035: ARRAY
6036: PUSH
6037: FOR_IN
6038: IFFALSE 6079
// if GetSkill ( i , skill_engineering ) > val then
6040: LD_VAR 0 3
6044: PPUSH
6045: LD_INT 2
6047: PPUSH
6048: CALL_OW 259
6052: PUSH
6053: LD_VAR 0 5
6057: GREATER
6058: IFFALSE 6077
// SetSkill ( i , skill_engineering , val ) ;
6060: LD_VAR 0 3
6064: PPUSH
6065: LD_INT 2
6067: PPUSH
6068: LD_VAR 0 5
6072: PPUSH
6073: CALL_OW 237
6077: GO 6037
6079: POP
6080: POP
// end ;
6081: LD_VAR 0 1
6085: RET
// function ScanBuildings ; var side , i , temp_list , base , area , temp_list_2 ; begin
6086: LD_INT 0
6088: PPUSH
6089: PPUSH
6090: PPUSH
6091: PPUSH
6092: PPUSH
6093: PPUSH
6094: PPUSH
// if difficulty <= 2 then
6095: LD_OWVAR 67
6099: PUSH
6100: LD_INT 2
6102: LESSEQUAL
6103: IFFALSE 6244
// begin temp_list = [ GetX ( rub3 ) , GetY ( rub3 ) , GetDir ( rub3 ) , GetBWeapon ( rub3 ) ] ;
6105: LD_ADDR_VAR 0 4
6109: PUSH
6110: LD_INT 269
6112: PPUSH
6113: CALL_OW 250
6117: PUSH
6118: LD_INT 269
6120: PPUSH
6121: CALL_OW 251
6125: PUSH
6126: LD_INT 269
6128: PPUSH
6129: CALL_OW 254
6133: PUSH
6134: LD_INT 269
6136: PPUSH
6137: CALL_OW 269
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: ST_TO_ADDR
// DestroyUnit ( rub3 ) ;
6148: LD_INT 269
6150: PPUSH
6151: CALL_OW 65
// InitUc ;
6155: CALL_OW 18
// InitBc ;
6159: CALL_OW 21
// uc_nation = nation_russian ;
6163: LD_ADDR_OWVAR 21
6167: PUSH
6168: LD_INT 3
6170: ST_TO_ADDR
// uc_side = russians ;
6171: LD_ADDR_OWVAR 20
6175: PUSH
6176: LD_EXP 3
6180: ST_TO_ADDR
// bc_type = b_turret ;
6181: LD_ADDR_OWVAR 42
6185: PUSH
6186: LD_INT 33
6188: ST_TO_ADDR
// i = CreateAndPlaceBuildingXYD ( temp_list [ 1 ] , temp_list [ 2 ] , temp_list [ 3 ] ) ;
6189: LD_ADDR_VAR 0 3
6193: PUSH
6194: LD_VAR 0 4
6198: PUSH
6199: LD_INT 1
6201: ARRAY
6202: PPUSH
6203: LD_VAR 0 4
6207: PUSH
6208: LD_INT 2
6210: ARRAY
6211: PPUSH
6212: LD_VAR 0 4
6216: PUSH
6217: LD_INT 3
6219: ARRAY
6220: PPUSH
6221: CALL_OW 47
6225: ST_TO_ADDR
// PlaceWeaponTurret ( i , temp_list [ 4 ] ) ;
6226: LD_VAR 0 3
6230: PPUSH
6231: LD_VAR 0 4
6235: PUSH
6236: LD_INT 4
6238: ARRAY
6239: PPUSH
6240: CALL_OW 431
// end ; if difficulty = 1 then
6244: LD_OWVAR 67
6248: PUSH
6249: LD_INT 1
6251: EQUAL
6252: IFFALSE 6393
// begin temp_list = [ GetX ( rub1 ) , GetY ( rub1 ) , GetDir ( rub1 ) , GetBWeapon ( rub1 ) ] ;
6254: LD_ADDR_VAR 0 4
6258: PUSH
6259: LD_INT 273
6261: PPUSH
6262: CALL_OW 250
6266: PUSH
6267: LD_INT 273
6269: PPUSH
6270: CALL_OW 251
6274: PUSH
6275: LD_INT 273
6277: PPUSH
6278: CALL_OW 254
6282: PUSH
6283: LD_INT 273
6285: PPUSH
6286: CALL_OW 269
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: ST_TO_ADDR
// DestroyUnit ( rub1 ) ;
6297: LD_INT 273
6299: PPUSH
6300: CALL_OW 65
// InitUc ;
6304: CALL_OW 18
// InitBc ;
6308: CALL_OW 21
// uc_nation = nation_russian ;
6312: LD_ADDR_OWVAR 21
6316: PUSH
6317: LD_INT 3
6319: ST_TO_ADDR
// uc_side = russians ;
6320: LD_ADDR_OWVAR 20
6324: PUSH
6325: LD_EXP 3
6329: ST_TO_ADDR
// bc_type = b_turret ;
6330: LD_ADDR_OWVAR 42
6334: PUSH
6335: LD_INT 33
6337: ST_TO_ADDR
// i = CreateAndPlaceBuildingXYD ( temp_list [ 1 ] , temp_list [ 2 ] , temp_list [ 3 ] ) ;
6338: LD_ADDR_VAR 0 3
6342: PUSH
6343: LD_VAR 0 4
6347: PUSH
6348: LD_INT 1
6350: ARRAY
6351: PPUSH
6352: LD_VAR 0 4
6356: PUSH
6357: LD_INT 2
6359: ARRAY
6360: PPUSH
6361: LD_VAR 0 4
6365: PUSH
6366: LD_INT 3
6368: ARRAY
6369: PPUSH
6370: CALL_OW 47
6374: ST_TO_ADDR
// PlaceWeaponTurret ( i , temp_list [ 4 ] ) ;
6375: LD_VAR 0 3
6379: PPUSH
6380: LD_VAR 0 4
6384: PUSH
6385: LD_INT 4
6387: ARRAY
6388: PPUSH
6389: CALL_OW 431
// end ; for base in ai_bases do
6393: LD_ADDR_VAR 0 5
6397: PUSH
6398: LD_EXP 58
6402: PUSH
6403: FOR_IN
6404: IFFALSE 7030
// begin case base of 1 :
6406: LD_VAR 0 5
6410: PUSH
6411: LD_INT 1
6413: DOUBLE
6414: EQUAL
6415: IFTRUE 6419
6417: GO 6440
6419: POP
// begin area = Am_base ;
6420: LD_ADDR_VAR 0 6
6424: PUSH
6425: LD_INT 4
6427: ST_TO_ADDR
// side = americans ;
6428: LD_ADDR_VAR 0 2
6432: PUSH
6433: LD_EXP 6
6437: ST_TO_ADDR
// end ; 2 :
6438: GO 6499
6440: LD_INT 2
6442: DOUBLE
6443: EQUAL
6444: IFTRUE 6448
6446: GO 6469
6448: POP
// begin area = Gensher_base ;
6449: LD_ADDR_VAR 0 6
6453: PUSH
6454: LD_INT 7
6456: ST_TO_ADDR
// side = you_alt ;
6457: LD_ADDR_VAR 0 2
6461: PUSH
6462: LD_EXP 5
6466: ST_TO_ADDR
// end ; 3 :
6467: GO 6499
6469: LD_INT 3
6471: DOUBLE
6472: EQUAL
6473: IFTRUE 6477
6475: GO 6498
6477: POP
// begin area = Ru_base ;
6478: LD_ADDR_VAR 0 6
6482: PUSH
6483: LD_INT 3
6485: ST_TO_ADDR
// side = russians ;
6486: LD_ADDR_VAR 0 2
6490: PUSH
6491: LD_EXP 3
6495: ST_TO_ADDR
// end ; end ;
6496: GO 6499
6498: POP
// ai_all_buildings = Replace ( ai_all_buildings , base , FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_inarea , area ] ] ) ) ;
6499: LD_ADDR_EXP 44
6503: PUSH
6504: LD_EXP 44
6508: PPUSH
6509: LD_VAR 0 5
6513: PPUSH
6514: LD_INT 22
6516: PUSH
6517: LD_VAR 0 2
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 21
6528: PUSH
6529: LD_INT 3
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: PUSH
6536: LD_INT 95
6538: PUSH
6539: LD_VAR 0 6
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: PPUSH
6558: CALL_OW 1
6562: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
6563: LD_ADDR_VAR 0 3
6567: PUSH
6568: LD_EXP 44
6572: PUSH
6573: LD_VAR 0 5
6577: ARRAY
6578: PUSH
6579: FOR_IN
6580: IFFALSE 6601
// UpdateBuildingBasicVariables ( base , i , true ) ;
6582: LD_VAR 0 5
6586: PPUSH
6587: LD_VAR 0 3
6591: PPUSH
6592: LD_INT 1
6594: PPUSH
6595: CALL 7037 0 3
6599: GO 6579
6601: POP
6602: POP
// if base = 1 then
6603: LD_VAR 0 5
6607: PUSH
6608: LD_INT 1
6610: EQUAL
6611: IFFALSE 6631
// SetBName ( ai_depot [ base ] , epsilon ) ;
6613: LD_EXP 34
6617: PUSH
6618: LD_VAR 0 5
6622: ARRAY
6623: PPUSH
6624: LD_STRING epsilon
6626: PPUSH
6627: CALL_OW 500
// temp_list = [ ] ;
6631: LD_ADDR_VAR 0 4
6635: PUSH
6636: EMPTY
6637: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
6638: LD_ADDR_VAR 0 3
6642: PUSH
6643: LD_EXP 44
6647: PUSH
6648: LD_VAR 0 5
6652: ARRAY
6653: PUSH
6654: FOR_IN
6655: IFFALSE 6928
// begin if base = 3 and i in [ rub1 , rub2 ] then
6657: LD_VAR 0 5
6661: PUSH
6662: LD_INT 3
6664: EQUAL
6665: PUSH
6666: LD_VAR 0 3
6670: PUSH
6671: LD_INT 273
6673: PUSH
6674: LD_INT 271
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: IN
6681: AND
6682: IFFALSE 6733
// begin temp_list_2 = ai_excepted_buildings [ base ] ^ i ;
6684: LD_ADDR_VAR 0 7
6688: PUSH
6689: LD_EXP 68
6693: PUSH
6694: LD_VAR 0 5
6698: ARRAY
6699: PUSH
6700: LD_VAR 0 3
6704: ADD
6705: ST_TO_ADDR
// ai_excepted_buildings = Replace ( ai_excepted_buildings , base , temp_list_2 ) ;
6706: LD_ADDR_EXP 68
6710: PUSH
6711: LD_EXP 68
6715: PPUSH
6716: LD_VAR 0 5
6720: PPUSH
6721: LD_VAR 0 7
6725: PPUSH
6726: CALL_OW 1
6730: ST_TO_ADDR
// continue ;
6731: GO 6654
// end ; temp_list = temp_list ^ [ [ GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBType ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6733: LD_ADDR_VAR 0 4
6737: PUSH
6738: LD_VAR 0 4
6742: PUSH
6743: LD_VAR 0 3
6747: PPUSH
6748: CALL_OW 250
6752: PUSH
6753: LD_VAR 0 3
6757: PPUSH
6758: CALL_OW 251
6762: PUSH
6763: LD_VAR 0 3
6767: PPUSH
6768: CALL_OW 254
6772: PUSH
6773: LD_VAR 0 3
6777: PPUSH
6778: CALL_OW 266
6782: PUSH
6783: LD_VAR 0 3
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: CALL_OW 268
6795: PUSH
6796: LD_VAR 0 3
6800: PPUSH
6801: LD_INT 2
6803: PPUSH
6804: CALL_OW 268
6808: PUSH
6809: LD_VAR 0 3
6813: PPUSH
6814: CALL_OW 269
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: PUSH
6828: EMPTY
6829: LIST
6830: ADD
6831: ST_TO_ADDR
// if base = 2 and temp_list [ temp_list + 0 ] [ 4 ] = b_bunker then
6832: LD_VAR 0 5
6836: PUSH
6837: LD_INT 2
6839: EQUAL
6840: PUSH
6841: LD_VAR 0 4
6845: PUSH
6846: LD_VAR 0 4
6850: PUSH
6851: LD_INT 0
6853: PLUS
6854: ARRAY
6855: PUSH
6856: LD_INT 4
6858: ARRAY
6859: PUSH
6860: LD_INT 32
6862: EQUAL
6863: AND
6864: IFFALSE 6926
// begin temp_list_2 = Replace ( temp_list [ temp_list + 0 ] , 4 , b_breastwork ) ;
6866: LD_ADDR_VAR 0 7
6870: PUSH
6871: LD_VAR 0 4
6875: PUSH
6876: LD_VAR 0 4
6880: PUSH
6881: LD_INT 0
6883: PLUS
6884: ARRAY
6885: PPUSH
6886: LD_INT 4
6888: PPUSH
6889: LD_INT 31
6891: PPUSH
6892: CALL_OW 1
6896: ST_TO_ADDR
// temp_list = Replace ( temp_list , temp_list + 0 , temp_list_2 ) ;
6897: LD_ADDR_VAR 0 4
6901: PUSH
6902: LD_VAR 0 4
6906: PPUSH
6907: LD_VAR 0 4
6911: PUSH
6912: LD_INT 0
6914: PLUS
6915: PPUSH
6916: LD_VAR 0 7
6920: PPUSH
6921: CALL_OW 1
6925: ST_TO_ADDR
// end ; end ;
6926: GO 6654
6928: POP
6929: POP
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list ) ;
6930: LD_ADDR_EXP 38
6934: PUSH
6935: LD_EXP 38
6939: PPUSH
6940: LD_VAR 0 5
6944: PPUSH
6945: LD_VAR 0 4
6949: PPUSH
6950: CALL_OW 1
6954: ST_TO_ADDR
// SortBuildingLocationsListInCorrectOrder ( base ) ;
6955: LD_VAR 0 5
6959: PPUSH
6960: CALL 8112 0 1
// for i in ai_siberite_mines [ base ] ^ ai_oil_mine [ base ] do
6964: LD_ADDR_VAR 0 3
6968: PUSH
6969: LD_EXP 36
6973: PUSH
6974: LD_VAR 0 5
6978: ARRAY
6979: PUSH
6980: LD_EXP 50
6984: PUSH
6985: LD_VAR 0 5
6989: ARRAY
6990: ADD
6991: PUSH
6992: FOR_IN
6993: IFFALSE 7026
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: CALL_OW 250
7004: PPUSH
7005: LD_VAR 0 3
7009: PPUSH
7010: CALL_OW 251
7014: PPUSH
7015: LD_VAR 0 2
7019: PPUSH
7020: CALL_OW 441
7024: GO 6992
7026: POP
7027: POP
// end ;
7028: GO 6403
7030: POP
7031: POP
// end ;
7032: LD_VAR 0 1
7036: RET
// export function UpdateBuildingBasicVariables ( base , un , add ) ; var temp_list ; begin
7037: LD_INT 0
7039: PPUSH
7040: PPUSH
// case GetBType ( un ) of b_depot , b_warehouse :
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 266
7050: PUSH
7051: LD_INT 0
7053: DOUBLE
7054: EQUAL
7055: IFTRUE 7065
7057: LD_INT 1
7059: DOUBLE
7060: EQUAL
7061: IFTRUE 7065
7063: GO 7142
7065: POP
// if add then
7066: LD_VAR 0 3
7070: IFFALSE 7099
// ai_depot = Replace ( ai_depot , base , un ) else
7072: LD_ADDR_EXP 34
7076: PUSH
7077: LD_EXP 34
7081: PPUSH
7082: LD_VAR 0 1
7086: PPUSH
7087: LD_VAR 0 2
7091: PPUSH
7092: CALL_OW 1
7096: ST_TO_ADDR
7097: GO 7140
// if un = ai_depot [ base ] then
7099: LD_VAR 0 2
7103: PUSH
7104: LD_EXP 34
7108: PUSH
7109: LD_VAR 0 1
7113: ARRAY
7114: EQUAL
7115: IFFALSE 7140
// ai_depot = Replace ( ai_depot , base , 0 ) ; b_lab , b_lab_half , b_lab_full :
7117: LD_ADDR_EXP 34
7121: PUSH
7122: LD_EXP 34
7126: PPUSH
7127: LD_VAR 0 1
7131: PPUSH
7132: LD_INT 0
7134: PPUSH
7135: CALL_OW 1
7139: ST_TO_ADDR
7140: GO 8107
7142: LD_INT 6
7144: DOUBLE
7145: EQUAL
7146: IFTRUE 7162
7148: LD_INT 7
7150: DOUBLE
7151: EQUAL
7152: IFTRUE 7162
7154: LD_INT 8
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7242
7162: POP
// begin if add then
7163: LD_VAR 0 3
7167: IFFALSE 7193
// temp_list = ai_labs [ base ] ^ un else
7169: LD_ADDR_VAR 0 5
7173: PUSH
7174: LD_EXP 35
7178: PUSH
7179: LD_VAR 0 1
7183: ARRAY
7184: PUSH
7185: LD_VAR 0 2
7189: ADD
7190: ST_TO_ADDR
7191: GO 7215
// temp_list = ai_labs [ base ] diff un ;
7193: LD_ADDR_VAR 0 5
7197: PUSH
7198: LD_EXP 35
7202: PUSH
7203: LD_VAR 0 1
7207: ARRAY
7208: PUSH
7209: LD_VAR 0 2
7213: DIFF
7214: ST_TO_ADDR
// ai_labs = Replace ( ai_labs , base , temp_list ) ;
7215: LD_ADDR_EXP 35
7219: PUSH
7220: LD_EXP 35
7224: PPUSH
7225: LD_VAR 0 1
7229: PPUSH
7230: LD_VAR 0 5
7234: PPUSH
7235: CALL_OW 1
7239: ST_TO_ADDR
// end ; b_factory , b_workshop :
7240: GO 8107
7242: LD_INT 3
7244: DOUBLE
7245: EQUAL
7246: IFTRUE 7256
7248: LD_INT 2
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7336
7256: POP
// begin if add then
7257: LD_VAR 0 3
7261: IFFALSE 7287
// temp_list = ai_facts [ base ] ^ un else
7263: LD_ADDR_VAR 0 5
7267: PUSH
7268: LD_EXP 47
7272: PUSH
7273: LD_VAR 0 1
7277: ARRAY
7278: PUSH
7279: LD_VAR 0 2
7283: ADD
7284: ST_TO_ADDR
7285: GO 7309
// temp_list = ai_facts [ base ] diff un ;
7287: LD_ADDR_VAR 0 5
7291: PUSH
7292: LD_EXP 47
7296: PUSH
7297: LD_VAR 0 1
7301: ARRAY
7302: PUSH
7303: LD_VAR 0 2
7307: DIFF
7308: ST_TO_ADDR
// ai_facts = Replace ( ai_facts , base , temp_list ) ;
7309: LD_ADDR_EXP 47
7313: PUSH
7314: LD_EXP 47
7318: PPUSH
7319: LD_VAR 0 1
7323: PPUSH
7324: LD_VAR 0 5
7328: PPUSH
7329: CALL_OW 1
7333: ST_TO_ADDR
// end ; b_armoury , b_barracks :
7334: GO 8107
7336: LD_INT 4
7338: DOUBLE
7339: EQUAL
7340: IFTRUE 7350
7342: LD_INT 5
7344: DOUBLE
7345: EQUAL
7346: IFTRUE 7350
7348: GO 7430
7350: POP
// begin if add then
7351: LD_VAR 0 3
7355: IFFALSE 7381
// temp_list = ai_armouries [ base ] ^ un else
7357: LD_ADDR_VAR 0 5
7361: PUSH
7362: LD_EXP 48
7366: PUSH
7367: LD_VAR 0 1
7371: ARRAY
7372: PUSH
7373: LD_VAR 0 2
7377: ADD
7378: ST_TO_ADDR
7379: GO 7403
// temp_list = ai_armouries [ base ] diff un ;
7381: LD_ADDR_VAR 0 5
7385: PUSH
7386: LD_EXP 48
7390: PUSH
7391: LD_VAR 0 1
7395: ARRAY
7396: PUSH
7397: LD_VAR 0 2
7401: DIFF
7402: ST_TO_ADDR
// ai_armouries = Replace ( ai_armouries , base , temp_list ) ;
7403: LD_ADDR_EXP 48
7407: PUSH
7408: LD_EXP 48
7412: PPUSH
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 5
7422: PPUSH
7423: CALL_OW 1
7427: ST_TO_ADDR
// end ; b_breastwork , b_bunker :
7428: GO 8107
7430: LD_INT 31
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7444
7436: LD_INT 32
7438: DOUBLE
7439: EQUAL
7440: IFTRUE 7444
7442: GO 7524
7444: POP
// begin if add then
7445: LD_VAR 0 3
7449: IFFALSE 7475
// temp_list = ai_bunkers [ base ] ^ un else
7451: LD_ADDR_VAR 0 5
7455: PUSH
7456: LD_EXP 49
7460: PUSH
7461: LD_VAR 0 1
7465: ARRAY
7466: PUSH
7467: LD_VAR 0 2
7471: ADD
7472: ST_TO_ADDR
7473: GO 7497
// temp_list = ai_bunkers [ base ] diff un ;
7475: LD_ADDR_VAR 0 5
7479: PUSH
7480: LD_EXP 49
7484: PUSH
7485: LD_VAR 0 1
7489: ARRAY
7490: PUSH
7491: LD_VAR 0 2
7495: DIFF
7496: ST_TO_ADDR
// ai_bunkers = Replace ( ai_bunkers , base , temp_list ) ;
7497: LD_ADDR_EXP 49
7501: PUSH
7502: LD_EXP 49
7506: PPUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: LD_VAR 0 5
7516: PPUSH
7517: CALL_OW 1
7521: ST_TO_ADDR
// end ; b_turret :
7522: GO 8107
7524: LD_INT 33
7526: DOUBLE
7527: EQUAL
7528: IFTRUE 7532
7530: GO 7612
7532: POP
// begin if add then
7533: LD_VAR 0 3
7537: IFFALSE 7563
// temp_list = ai_turrets [ base ] ^ un else
7539: LD_ADDR_VAR 0 5
7543: PUSH
7544: LD_EXP 55
7548: PUSH
7549: LD_VAR 0 1
7553: ARRAY
7554: PUSH
7555: LD_VAR 0 2
7559: ADD
7560: ST_TO_ADDR
7561: GO 7585
// temp_list = ai_turrets [ base ] diff un ;
7563: LD_ADDR_VAR 0 5
7567: PUSH
7568: LD_EXP 55
7572: PUSH
7573: LD_VAR 0 1
7577: ARRAY
7578: PUSH
7579: LD_VAR 0 2
7583: DIFF
7584: ST_TO_ADDR
// ai_turrets = Replace ( ai_turrets , base , temp_list ) ;
7585: LD_ADDR_EXP 55
7589: PUSH
7590: LD_EXP 55
7594: PPUSH
7595: LD_VAR 0 1
7599: PPUSH
7600: LD_VAR 0 5
7604: PPUSH
7605: CALL_OW 1
7609: ST_TO_ADDR
// end ; b_oil_mine :
7610: GO 8107
7612: LD_INT 29
7614: DOUBLE
7615: EQUAL
7616: IFTRUE 7620
7618: GO 7697
7620: POP
// if add then
7621: LD_VAR 0 3
7625: IFFALSE 7654
// ai_oil_mine = Replace ( ai_oil_mine , base , un ) else
7627: LD_ADDR_EXP 50
7631: PUSH
7632: LD_EXP 50
7636: PPUSH
7637: LD_VAR 0 1
7641: PPUSH
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 1
7651: ST_TO_ADDR
7652: GO 7695
// if un = ai_oil_mine [ base ] then
7654: LD_VAR 0 2
7658: PUSH
7659: LD_EXP 50
7663: PUSH
7664: LD_VAR 0 1
7668: ARRAY
7669: EQUAL
7670: IFFALSE 7695
// ai_oil_mine = Replace ( ai_oil_mine , base , 0 ) ; b_siberite_mine :
7672: LD_ADDR_EXP 50
7676: PUSH
7677: LD_EXP 50
7681: PPUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 0
7689: PPUSH
7690: CALL_OW 1
7694: ST_TO_ADDR
7695: GO 8107
7697: LD_INT 30
7699: DOUBLE
7700: EQUAL
7701: IFTRUE 7705
7703: GO 7785
7705: POP
// begin if add then
7706: LD_VAR 0 3
7710: IFFALSE 7736
// temp_list = ai_siberite_mines [ base ] ^ un else
7712: LD_ADDR_VAR 0 5
7716: PUSH
7717: LD_EXP 36
7721: PUSH
7722: LD_VAR 0 1
7726: ARRAY
7727: PUSH
7728: LD_VAR 0 2
7732: ADD
7733: ST_TO_ADDR
7734: GO 7758
// temp_list = ai_siberite_mines [ base ] diff un ;
7736: LD_ADDR_VAR 0 5
7740: PUSH
7741: LD_EXP 36
7745: PUSH
7746: LD_VAR 0 1
7750: ARRAY
7751: PUSH
7752: LD_VAR 0 2
7756: DIFF
7757: ST_TO_ADDR
// ai_siberite_mines = Replace ( ai_siberite_mines , base , temp_list ) ;
7758: LD_ADDR_EXP 36
7762: PUSH
7763: LD_EXP 36
7767: PPUSH
7768: LD_VAR 0 1
7772: PPUSH
7773: LD_VAR 0 5
7777: PPUSH
7778: CALL_OW 1
7782: ST_TO_ADDR
// end ; b_ext_gun , b_ext_noncombat , b_ext_laser , b_ext_computer , b_ext_radar , b_ext_rocket , b_ext_siberium , b_ext_track , b_ext_stitch :
7783: GO 8107
7785: LD_INT 17
7787: DOUBLE
7788: EQUAL
7789: IFTRUE 7841
7791: LD_INT 19
7793: DOUBLE
7794: EQUAL
7795: IFTRUE 7841
7797: LD_INT 25
7799: DOUBLE
7800: EQUAL
7801: IFTRUE 7841
7803: LD_INT 24
7805: DOUBLE
7806: EQUAL
7807: IFTRUE 7841
7809: LD_INT 20
7811: DOUBLE
7812: EQUAL
7813: IFTRUE 7841
7815: LD_INT 18
7817: DOUBLE
7818: EQUAL
7819: IFTRUE 7841
7821: LD_INT 21
7823: DOUBLE
7824: EQUAL
7825: IFTRUE 7841
7827: LD_INT 16
7829: DOUBLE
7830: EQUAL
7831: IFTRUE 7841
7833: LD_INT 23
7835: DOUBLE
7836: EQUAL
7837: IFTRUE 7841
7839: GO 7921
7841: POP
// begin if add then
7842: LD_VAR 0 3
7846: IFFALSE 7872
// temp_list = ai_fact_extensions [ base ] ^ un else
7848: LD_ADDR_VAR 0 5
7852: PUSH
7853: LD_EXP 51
7857: PUSH
7858: LD_VAR 0 1
7862: ARRAY
7863: PUSH
7864: LD_VAR 0 2
7868: ADD
7869: ST_TO_ADDR
7870: GO 7894
// temp_list = ai_fact_extensions [ base ] diff un ;
7872: LD_ADDR_VAR 0 5
7876: PUSH
7877: LD_EXP 51
7881: PUSH
7882: LD_VAR 0 1
7886: ARRAY
7887: PUSH
7888: LD_VAR 0 2
7892: DIFF
7893: ST_TO_ADDR
// ai_fact_extensions = Replace ( ai_fact_extensions , base , temp_list ) ;
7894: LD_ADDR_EXP 51
7898: PUSH
7899: LD_EXP 51
7903: PPUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: LD_VAR 0 5
7913: PPUSH
7914: CALL_OW 1
7918: ST_TO_ADDR
// end ; b_solar_power , b_oil_power , b_siberite_power :
7919: GO 8107
7921: LD_INT 27
7923: DOUBLE
7924: EQUAL
7925: IFTRUE 7941
7927: LD_INT 26
7929: DOUBLE
7930: EQUAL
7931: IFTRUE 7941
7933: LD_INT 28
7935: DOUBLE
7936: EQUAL
7937: IFTRUE 7941
7939: GO 8021
7941: POP
// begin if add then
7942: LD_VAR 0 3
7946: IFFALSE 7972
// temp_list = ai_power_plants [ base ] ^ un else
7948: LD_ADDR_VAR 0 5
7952: PUSH
7953: LD_EXP 37
7957: PUSH
7958: LD_VAR 0 1
7962: ARRAY
7963: PUSH
7964: LD_VAR 0 2
7968: ADD
7969: ST_TO_ADDR
7970: GO 7994
// temp_list = ai_power_plants [ base ] diff un ;
7972: LD_ADDR_VAR 0 5
7976: PUSH
7977: LD_EXP 37
7981: PUSH
7982: LD_VAR 0 1
7986: ARRAY
7987: PUSH
7988: LD_VAR 0 2
7992: DIFF
7993: ST_TO_ADDR
// ai_power_plants = Replace ( ai_power_plants , base , temp_list ) ;
7994: LD_ADDR_EXP 37
7998: PUSH
7999: LD_EXP 37
8003: PPUSH
8004: LD_VAR 0 1
8008: PPUSH
8009: LD_VAR 0 5
8013: PPUSH
8014: CALL_OW 1
8018: ST_TO_ADDR
// end ; b_control_tower :
8019: GO 8107
8021: LD_INT 36
8023: DOUBLE
8024: EQUAL
8025: IFTRUE 8029
8027: GO 8106
8029: POP
// begin if add then
8030: LD_VAR 0 3
8034: IFFALSE 8063
// ai_control_tower = Replace ( ai_control_tower , base , un ) else
8036: LD_ADDR_EXP 56
8040: PUSH
8041: LD_EXP 56
8045: PPUSH
8046: LD_VAR 0 1
8050: PPUSH
8051: LD_VAR 0 2
8055: PPUSH
8056: CALL_OW 1
8060: ST_TO_ADDR
8061: GO 8104
// if un = ai_control_tower [ base ] then
8063: LD_VAR 0 2
8067: PUSH
8068: LD_EXP 56
8072: PUSH
8073: LD_VAR 0 1
8077: ARRAY
8078: EQUAL
8079: IFFALSE 8104
// ai_control_tower = Replace ( ai_control_tower , base , 0 ) ;
8081: LD_ADDR_EXP 56
8085: PUSH
8086: LD_EXP 56
8090: PPUSH
8091: LD_VAR 0 1
8095: PPUSH
8096: LD_INT 0
8098: PPUSH
8099: CALL_OW 1
8103: ST_TO_ADDR
// end ; end ;
8104: GO 8107
8106: POP
// end ;
8107: LD_VAR 0 4
8111: RET
// function SortBuildingLocationsListInCorrectOrder ( base ) ; var i , temp_list , p ; begin
8112: LD_INT 0
8114: PPUSH
8115: PPUSH
8116: PPUSH
8117: PPUSH
// temp_list = [ ] ;
8118: LD_ADDR_VAR 0 4
8122: PUSH
8123: EMPTY
8124: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
8125: LD_ADDR_VAR 0 3
8129: PUSH
8130: LD_EXP 38
8134: PUSH
8135: LD_VAR 0 1
8139: ARRAY
8140: PUSH
8141: FOR_IN
8142: IFFALSE 8515
// begin case i [ 4 ] of b_depot , b_warehouse :
8144: LD_VAR 0 3
8148: PUSH
8149: LD_INT 4
8151: ARRAY
8152: PUSH
8153: LD_INT 0
8155: DOUBLE
8156: EQUAL
8157: IFTRUE 8167
8159: LD_INT 1
8161: DOUBLE
8162: EQUAL
8163: IFTRUE 8167
8165: GO 8178
8167: POP
// p = 100 ; b_armoury , b_barracks , b_fort :
8168: LD_ADDR_VAR 0 5
8172: PUSH
8173: LD_INT 100
8175: ST_TO_ADDR
8176: GO 8497
8178: LD_INT 4
8180: DOUBLE
8181: EQUAL
8182: IFTRUE 8198
8184: LD_INT 5
8186: DOUBLE
8187: EQUAL
8188: IFTRUE 8198
8190: LD_INT 35
8192: DOUBLE
8193: EQUAL
8194: IFTRUE 8198
8196: GO 8209
8198: POP
// p = 99 ; b_solar_power , b_oil_power , b_siberite_power :
8199: LD_ADDR_VAR 0 5
8203: PUSH
8204: LD_INT 99
8206: ST_TO_ADDR
8207: GO 8497
8209: LD_INT 27
8211: DOUBLE
8212: EQUAL
8213: IFTRUE 8229
8215: LD_INT 26
8217: DOUBLE
8218: EQUAL
8219: IFTRUE 8229
8221: LD_INT 28
8223: DOUBLE
8224: EQUAL
8225: IFTRUE 8229
8227: GO 8240
8229: POP
// p = 98 ; b_breastwork :
8230: LD_ADDR_VAR 0 5
8234: PUSH
8235: LD_INT 98
8237: ST_TO_ADDR
8238: GO 8497
8240: LD_INT 31
8242: DOUBLE
8243: EQUAL
8244: IFTRUE 8248
8246: GO 8259
8248: POP
// p = 97 ; b_factory , b_workshop :
8249: LD_ADDR_VAR 0 5
8253: PUSH
8254: LD_INT 97
8256: ST_TO_ADDR
8257: GO 8497
8259: LD_INT 3
8261: DOUBLE
8262: EQUAL
8263: IFTRUE 8273
8265: LD_INT 2
8267: DOUBLE
8268: EQUAL
8269: IFTRUE 8273
8271: GO 8284
8273: POP
// p = 96 ; b_ext_gun , b_ext_noncombat , b_ext_laser , b_ext_computer , b_ext_radar , b_ext_rocket , b_ext_siberium , b_ext_track , b_ext_stitch :
8274: LD_ADDR_VAR 0 5
8278: PUSH
8279: LD_INT 96
8281: ST_TO_ADDR
8282: GO 8497
8284: LD_INT 17
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8340
8290: LD_INT 19
8292: DOUBLE
8293: EQUAL
8294: IFTRUE 8340
8296: LD_INT 25
8298: DOUBLE
8299: EQUAL
8300: IFTRUE 8340
8302: LD_INT 24
8304: DOUBLE
8305: EQUAL
8306: IFTRUE 8340
8308: LD_INT 20
8310: DOUBLE
8311: EQUAL
8312: IFTRUE 8340
8314: LD_INT 18
8316: DOUBLE
8317: EQUAL
8318: IFTRUE 8340
8320: LD_INT 21
8322: DOUBLE
8323: EQUAL
8324: IFTRUE 8340
8326: LD_INT 16
8328: DOUBLE
8329: EQUAL
8330: IFTRUE 8340
8332: LD_INT 23
8334: DOUBLE
8335: EQUAL
8336: IFTRUE 8340
8338: GO 8351
8340: POP
// p = 95 ; b_bunker :
8341: LD_ADDR_VAR 0 5
8345: PUSH
8346: LD_INT 95
8348: ST_TO_ADDR
8349: GO 8497
8351: LD_INT 32
8353: DOUBLE
8354: EQUAL
8355: IFTRUE 8359
8357: GO 8370
8359: POP
// p = 94 ; b_control_tower :
8360: LD_ADDR_VAR 0 5
8364: PUSH
8365: LD_INT 94
8367: ST_TO_ADDR
8368: GO 8497
8370: LD_INT 36
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8389
8378: POP
// p = 93 ; b_turret :
8379: LD_ADDR_VAR 0 5
8383: PUSH
8384: LD_INT 93
8386: ST_TO_ADDR
8387: GO 8497
8389: LD_INT 33
8391: DOUBLE
8392: EQUAL
8393: IFTRUE 8397
8395: GO 8408
8397: POP
// p = 92 ; b_lab , b_lab_half , b_lab_full :
8398: LD_ADDR_VAR 0 5
8402: PUSH
8403: LD_INT 92
8405: ST_TO_ADDR
8406: GO 8497
8408: LD_INT 6
8410: DOUBLE
8411: EQUAL
8412: IFTRUE 8428
8414: LD_INT 7
8416: DOUBLE
8417: EQUAL
8418: IFTRUE 8428
8420: LD_INT 8
8422: DOUBLE
8423: EQUAL
8424: IFTRUE 8428
8426: GO 8439
8428: POP
// p = 91 ; b_teleport :
8429: LD_ADDR_VAR 0 5
8433: PUSH
8434: LD_INT 91
8436: ST_TO_ADDR
8437: GO 8497
8439: LD_INT 34
8441: DOUBLE
8442: EQUAL
8443: IFTRUE 8447
8445: GO 8458
8447: POP
// p = 90 ; b_siberite_mine :
8448: LD_ADDR_VAR 0 5
8452: PUSH
8453: LD_INT 90
8455: ST_TO_ADDR
8456: GO 8497
8458: LD_INT 30
8460: DOUBLE
8461: EQUAL
8462: IFTRUE 8466
8464: GO 8477
8466: POP
// p = 89 ; b_oil_mine :
8467: LD_ADDR_VAR 0 5
8471: PUSH
8472: LD_INT 89
8474: ST_TO_ADDR
8475: GO 8497
8477: LD_INT 29
8479: DOUBLE
8480: EQUAL
8481: IFTRUE 8485
8483: GO 8496
8485: POP
// p = 88 ; end ;
8486: LD_ADDR_VAR 0 5
8490: PUSH
8491: LD_INT 88
8493: ST_TO_ADDR
8494: GO 8497
8496: POP
// temp_list = temp_list ^ p ;
8497: LD_ADDR_VAR 0 4
8501: PUSH
8502: LD_VAR 0 4
8506: PUSH
8507: LD_VAR 0 5
8511: ADD
8512: ST_TO_ADDR
// end ;
8513: GO 8141
8515: POP
8516: POP
// temp_list = SortListByListDesc ( ai_buildings_locations [ base ] , temp_list ) ;
8517: LD_ADDR_VAR 0 4
8521: PUSH
8522: LD_EXP 38
8526: PUSH
8527: LD_VAR 0 1
8531: ARRAY
8532: PPUSH
8533: LD_VAR 0 4
8537: PPUSH
8538: CALL_OW 77
8542: ST_TO_ADDR
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list ) ;
8543: LD_ADDR_EXP 38
8547: PUSH
8548: LD_EXP 38
8552: PPUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: LD_VAR 0 4
8562: PPUSH
8563: CALL_OW 1
8567: ST_TO_ADDR
// end ;
8568: LD_VAR 0 2
8572: RET
// function PrepareComputerSides ; var i , temp_list , side , base , num ; begin
8573: LD_INT 0
8575: PPUSH
8576: PPUSH
8577: PPUSH
8578: PPUSH
8579: PPUSH
8580: PPUSH
// for base in ai_bases do
8581: LD_ADDR_VAR 0 5
8585: PUSH
8586: LD_EXP 58
8590: PUSH
8591: FOR_IN
8592: IFFALSE 9505
// begin case base of 1 :
8594: LD_VAR 0 5
8598: PUSH
8599: LD_INT 1
8601: DOUBLE
8602: EQUAL
8603: IFTRUE 8607
8605: GO 8620
8607: POP
// begin side = americans ;
8608: LD_ADDR_VAR 0 4
8612: PUSH
8613: LD_EXP 6
8617: ST_TO_ADDR
// end ; 2 :
8618: GO 8655
8620: LD_INT 2
8622: DOUBLE
8623: EQUAL
8624: IFTRUE 8628
8626: GO 8633
8628: POP
// begin continue ;
8629: GO 8591
// end ; 3 :
8631: GO 8655
8633: LD_INT 3
8635: DOUBLE
8636: EQUAL
8637: IFTRUE 8641
8639: GO 8654
8641: POP
// begin side = russians ;
8642: LD_ADDR_VAR 0 4
8646: PUSH
8647: LD_EXP 3
8651: ST_TO_ADDR
// end ; end ;
8652: GO 8655
8654: POP
// InitUc ;
8655: CALL_OW 18
// InitHc ;
8659: CALL_OW 19
// uc_side = side ;
8663: LD_ADDR_OWVAR 20
8667: PUSH
8668: LD_VAR 0 4
8672: ST_TO_ADDR
// case side of americans :
8673: LD_VAR 0 4
8677: PUSH
8678: LD_EXP 6
8682: DOUBLE
8683: EQUAL
8684: IFTRUE 8688
8686: GO 8699
8688: POP
// uc_nation = nation_american ; russians :
8689: LD_ADDR_OWVAR 21
8693: PUSH
8694: LD_INT 1
8696: ST_TO_ADDR
8697: GO 8721
8699: LD_EXP 3
8703: DOUBLE
8704: EQUAL
8705: IFTRUE 8709
8707: GO 8720
8709: POP
// uc_nation = nation_russian ; end ;
8710: LD_ADDR_OWVAR 21
8714: PUSH
8715: LD_INT 3
8717: ST_TO_ADDR
8718: GO 8721
8720: POP
// temp_list = CreateUnitsWithClass ( ai_bunkers [ base ] + ai_armouries [ base ] , class_soldier , side ) ;
8721: LD_ADDR_VAR 0 3
8725: PUSH
8726: LD_EXP 49
8730: PUSH
8731: LD_VAR 0 5
8735: ARRAY
8736: PUSH
8737: LD_EXP 48
8741: PUSH
8742: LD_VAR 0 5
8746: ARRAY
8747: PLUS
8748: PPUSH
8749: LD_INT 1
8751: PPUSH
8752: LD_VAR 0 4
8756: PPUSH
8757: CALL 9640 0 3
8761: ST_TO_ADDR
// temp_list = temp_list ^ CreateUnitsWithClass ( [ 3 , 4 , 5 ] [ difficulty ] * ai_armouries [ base ] , [ class_sniper , 0 , class_bazooker ] [ base ] , side ) ;
8762: LD_ADDR_VAR 0 3
8766: PUSH
8767: LD_VAR 0 3
8771: PUSH
8772: LD_INT 3
8774: PUSH
8775: LD_INT 4
8777: PUSH
8778: LD_INT 5
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: LIST
8785: PUSH
8786: LD_OWVAR 67
8790: ARRAY
8791: PUSH
8792: LD_EXP 48
8796: PUSH
8797: LD_VAR 0 5
8801: ARRAY
8802: MUL
8803: PPUSH
8804: LD_INT 5
8806: PUSH
8807: LD_INT 0
8809: PUSH
8810: LD_INT 9
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: LIST
8817: PUSH
8818: LD_VAR 0 5
8822: ARRAY
8823: PPUSH
8824: LD_VAR 0 4
8828: PPUSH
8829: CALL 9640 0 3
8833: ADD
8834: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , base , temp_list ) ;
8835: LD_ADDR_EXP 29
8839: PUSH
8840: LD_EXP 29
8844: PPUSH
8845: LD_VAR 0 5
8849: PPUSH
8850: LD_VAR 0 3
8854: PPUSH
8855: CALL_OW 1
8859: ST_TO_ADDR
// ai_engineers = Replace ( ai_engineers , base , CreateUnitsWithClass ( [ 2 , 3 , 4 ] [ difficulty ] , class_engineer , side ) ) ;
8860: LD_ADDR_EXP 30
8864: PUSH
8865: LD_EXP 30
8869: PPUSH
8870: LD_VAR 0 5
8874: PPUSH
8875: LD_INT 2
8877: PUSH
8878: LD_INT 3
8880: PUSH
8881: LD_INT 4
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: LD_OWVAR 67
8893: ARRAY
8894: PPUSH
8895: LD_INT 2
8897: PPUSH
8898: LD_VAR 0 4
8902: PPUSH
8903: CALL 9640 0 3
8907: PPUSH
8908: CALL_OW 1
8912: ST_TO_ADDR
// temp_list = [ ] ;
8913: LD_ADDR_VAR 0 3
8917: PUSH
8918: EMPTY
8919: ST_TO_ADDR
// for i in ai_engineers [ base ] do
8920: LD_ADDR_VAR 0 2
8924: PUSH
8925: LD_EXP 30
8929: PUSH
8930: LD_VAR 0 5
8934: ARRAY
8935: PUSH
8936: FOR_IN
8937: IFFALSE 8965
// temp_list = temp_list ^ GetSkill ( i , skill_engineering ) ;
8939: LD_ADDR_VAR 0 3
8943: PUSH
8944: LD_VAR 0 3
8948: PUSH
8949: LD_VAR 0 2
8953: PPUSH
8954: LD_INT 2
8956: PPUSH
8957: CALL_OW 259
8961: ADD
8962: ST_TO_ADDR
8963: GO 8936
8965: POP
8966: POP
// num = BestFromListByList ( temp_list , temp_list ) ;
8967: LD_ADDR_VAR 0 6
8971: PUSH
8972: LD_VAR 0 3
8976: PPUSH
8977: LD_VAR 0 3
8981: PPUSH
8982: CALL_OW 79
8986: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
8987: LD_ADDR_VAR 0 2
8991: PUSH
8992: LD_EXP 44
8996: PUSH
8997: LD_VAR 0 5
9001: ARRAY
9002: PUSH
9003: FOR_IN
9004: IFFALSE 9022
// SetBLevel ( i , num ) ;
9006: LD_VAR 0 2
9010: PPUSH
9011: LD_VAR 0 6
9015: PPUSH
9016: CALL_OW 241
9020: GO 9003
9022: POP
9023: POP
// ai_apemen_engineers = Replace ( ai_apemen_engineers , base , CreateApemenWithClass ( 2 , class_apeman_engineer , side ) ) ;
9024: LD_ADDR_EXP 62
9028: PUSH
9029: LD_EXP 62
9033: PPUSH
9034: LD_VAR 0 5
9038: PPUSH
9039: LD_INT 2
9041: PPUSH
9042: LD_INT 16
9044: PPUSH
9045: LD_VAR 0 4
9049: PPUSH
9050: CALL 9828 0 3
9054: PPUSH
9055: CALL_OW 1
9059: ST_TO_ADDR
// ai_mechanics_defend = Replace ( ai_mechanics_defend , base , CreateUnitsWithClass ( [ 4 + Rand ( 0 , 1 ) , 5 + Rand ( 0 , 1 ) , 6 ] [ difficulty ] , class_mechanic , side ) ) ;
9060: LD_ADDR_EXP 31
9064: PUSH
9065: LD_EXP 31
9069: PPUSH
9070: LD_VAR 0 5
9074: PPUSH
9075: LD_INT 4
9077: PUSH
9078: LD_INT 0
9080: PPUSH
9081: LD_INT 1
9083: PPUSH
9084: CALL_OW 12
9088: PLUS
9089: PUSH
9090: LD_INT 5
9092: PUSH
9093: LD_INT 0
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: CALL_OW 12
9103: PLUS
9104: PUSH
9105: LD_INT 6
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PUSH
9113: LD_OWVAR 67
9117: ARRAY
9118: PPUSH
9119: LD_INT 3
9121: PPUSH
9122: LD_VAR 0 4
9126: PPUSH
9127: CALL 9640 0 3
9131: PPUSH
9132: CALL_OW 1
9136: ST_TO_ADDR
// num = [ 3 , 4 , 5 ] [ difficulty ] ;
9137: LD_ADDR_VAR 0 6
9141: PUSH
9142: LD_INT 3
9144: PUSH
9145: LD_INT 4
9147: PUSH
9148: LD_INT 5
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: LD_OWVAR 67
9160: ARRAY
9161: ST_TO_ADDR
// for i = 1 to ai_labs [ base ] do
9162: LD_ADDR_VAR 0 2
9166: PUSH
9167: DOUBLE
9168: LD_INT 1
9170: DEC
9171: ST_TO_ADDR
9172: LD_EXP 35
9176: PUSH
9177: LD_VAR 0 5
9181: ARRAY
9182: PUSH
9183: FOR_TO
9184: IFFALSE 9210
// num = num + Rand ( 0 , 1 ) ;
9186: LD_ADDR_VAR 0 6
9190: PUSH
9191: LD_VAR 0 6
9195: PUSH
9196: LD_INT 0
9198: PPUSH
9199: LD_INT 1
9201: PPUSH
9202: CALL_OW 12
9206: PLUS
9207: ST_TO_ADDR
9208: GO 9183
9210: POP
9211: POP
// if base = 1 then
9212: LD_VAR 0 5
9216: PUSH
9217: LD_INT 1
9219: EQUAL
9220: IFFALSE 9253
// num = num + [ 3 , 4 , 5 ] [ difficulty ] ;
9222: LD_ADDR_VAR 0 6
9226: PUSH
9227: LD_VAR 0 6
9231: PUSH
9232: LD_INT 3
9234: PUSH
9235: LD_INT 4
9237: PUSH
9238: LD_INT 5
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: LD_OWVAR 67
9250: ARRAY
9251: PLUS
9252: ST_TO_ADDR
// ai_scientists = Replace ( ai_scientists , base , CreateUnitsWithClass ( num , class_scientistic , side ) ) ;
9253: LD_ADDR_EXP 32
9257: PUSH
9258: LD_EXP 32
9262: PPUSH
9263: LD_VAR 0 5
9267: PPUSH
9268: LD_VAR 0 6
9272: PPUSH
9273: LD_INT 4
9275: PPUSH
9276: LD_VAR 0 4
9280: PPUSH
9281: CALL 9640 0 3
9285: PPUSH
9286: CALL_OW 1
9290: ST_TO_ADDR
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_cans , 300 ) ;
9291: LD_EXP 34
9295: PUSH
9296: LD_VAR 0 5
9300: ARRAY
9301: PPUSH
9302: CALL_OW 274
9306: PPUSH
9307: LD_INT 1
9309: PPUSH
9310: LD_INT 300
9312: PPUSH
9313: CALL_OW 277
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_oil , 300 ) ;
9317: LD_EXP 34
9321: PUSH
9322: LD_VAR 0 5
9326: ARRAY
9327: PPUSH
9328: CALL_OW 274
9332: PPUSH
9333: LD_INT 2
9335: PPUSH
9336: LD_INT 300
9338: PPUSH
9339: CALL_OW 277
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_siberit , 300 ) ;
9343: LD_EXP 34
9347: PUSH
9348: LD_VAR 0 5
9352: ARRAY
9353: PPUSH
9354: CALL_OW 274
9358: PPUSH
9359: LD_INT 3
9361: PPUSH
9362: LD_INT 300
9364: PPUSH
9365: CALL_OW 277
// for i in ai_soldiers [ base ] ^ ai_engineers [ base ] ^ ai_mechanics_defend [ base ] ^ ai_scientists [ base ] ^ ai_apemen_engineers [ base ] do
9369: LD_ADDR_VAR 0 2
9373: PUSH
9374: LD_EXP 29
9378: PUSH
9379: LD_VAR 0 5
9383: ARRAY
9384: PUSH
9385: LD_EXP 30
9389: PUSH
9390: LD_VAR 0 5
9394: ARRAY
9395: ADD
9396: PUSH
9397: LD_EXP 31
9401: PUSH
9402: LD_VAR 0 5
9406: ARRAY
9407: ADD
9408: PUSH
9409: LD_EXP 32
9413: PUSH
9414: LD_VAR 0 5
9418: ARRAY
9419: ADD
9420: PUSH
9421: LD_EXP 62
9425: PUSH
9426: LD_VAR 0 5
9430: ARRAY
9431: ADD
9432: PUSH
9433: FOR_IN
9434: IFFALSE 9483
// PlaceUnitXYR ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] , 7 , false ) ;
9436: LD_VAR 0 2
9440: PPUSH
9441: LD_EXP 41
9445: PUSH
9446: LD_VAR 0 5
9450: ARRAY
9451: PUSH
9452: LD_INT 1
9454: ARRAY
9455: PPUSH
9456: LD_EXP 41
9460: PUSH
9461: LD_VAR 0 5
9465: ARRAY
9466: PUSH
9467: LD_INT 2
9469: ARRAY
9470: PPUSH
9471: LD_INT 7
9473: PPUSH
9474: LD_INT 0
9476: PPUSH
9477: CALL_OW 50
9481: GO 9433
9483: POP
9484: POP
// ResetVehicleAttackDelay ( base ) ;
9485: LD_VAR 0 5
9489: PPUSH
9490: CALL 10004 0 1
// ResetHumanAttackDelay ( base ) ;
9494: LD_VAR 0 5
9498: PPUSH
9499: CALL 10053 0 1
// end ;
9503: GO 8591
9505: POP
9506: POP
// uc_side = americans ;
9507: LD_ADDR_OWVAR 20
9511: PUSH
9512: LD_EXP 6
9516: ST_TO_ADDR
// Simms = NewCharacter ( Simms ) ;
9517: LD_ADDR_EXP 24
9521: PUSH
9522: LD_STRING Simms
9524: PPUSH
9525: CALL_OW 25
9529: ST_TO_ADDR
// Joan = NewCharacter ( Joan ) ;
9530: LD_ADDR_EXP 27
9534: PUSH
9535: LD_STRING Joan
9537: PPUSH
9538: CALL_OW 25
9542: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
9543: LD_ADDR_EXP 28
9547: PUSH
9548: LD_STRING Powell
9550: PPUSH
9551: CALL_OW 25
9555: ST_TO_ADDR
// uc_side = americans_alt ;
9556: LD_ADDR_OWVAR 20
9560: PUSH
9561: LD_EXP 8
9565: ST_TO_ADDR
// Cornell = NewCharacter ( Cornell ) ;
9566: LD_ADDR_EXP 25
9570: PUSH
9571: LD_STRING Cornell
9573: PPUSH
9574: CALL_OW 25
9578: ST_TO_ADDR
// Khattam = NewCharacter ( Khatam ) ;
9579: LD_ADDR_EXP 26
9583: PUSH
9584: LD_STRING Khatam
9586: PPUSH
9587: CALL_OW 25
9591: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , americans ] ) do
9592: LD_ADDR_VAR 0 2
9596: PUSH
9597: LD_INT 22
9599: PUSH
9600: LD_EXP 6
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PPUSH
9609: CALL_OW 69
9613: PUSH
9614: FOR_IN
9615: IFFALSE 9633
// DoNotAttack ( you , i ) ;
9617: LD_EXP 2
9621: PPUSH
9622: LD_VAR 0 2
9626: PPUSH
9627: CALL_OW 471
9631: GO 9614
9633: POP
9634: POP
// end ;
9635: LD_VAR 0 1
9639: RET
// export function CreateUnitsWithClass ( num_units , un_class , side ) ; var i , overskill ; begin
9640: LD_INT 0
9642: PPUSH
9643: PPUSH
9644: PPUSH
// result = [ ] ;
9645: LD_ADDR_VAR 0 4
9649: PUSH
9650: EMPTY
9651: ST_TO_ADDR
// InitUc ;
9652: CALL_OW 18
// InitHc ;
9656: CALL_OW 19
// case side of americans :
9660: LD_VAR 0 3
9664: PUSH
9665: LD_EXP 6
9669: DOUBLE
9670: EQUAL
9671: IFTRUE 9675
9673: GO 9686
9675: POP
// begin uc_nation = nation_american ;
9676: LD_ADDR_OWVAR 21
9680: PUSH
9681: LD_INT 1
9683: ST_TO_ADDR
// end ; russians :
9684: GO 9708
9686: LD_EXP 3
9690: DOUBLE
9691: EQUAL
9692: IFTRUE 9696
9694: GO 9707
9696: POP
// begin uc_nation = nation_russian ;
9697: LD_ADDR_OWVAR 21
9701: PUSH
9702: LD_INT 3
9704: ST_TO_ADDR
// end ; end ;
9705: GO 9708
9707: POP
// uc_side = side ;
9708: LD_ADDR_OWVAR 20
9712: PUSH
9713: LD_VAR 0 3
9717: ST_TO_ADDR
// overskill = difficulty + 4 ;
9718: LD_ADDR_VAR 0 6
9722: PUSH
9723: LD_OWVAR 67
9727: PUSH
9728: LD_INT 4
9730: PLUS
9731: ST_TO_ADDR
// for i = 1 to num_units do
9732: LD_ADDR_VAR 0 5
9736: PUSH
9737: DOUBLE
9738: LD_INT 1
9740: DEC
9741: ST_TO_ADDR
9742: LD_VAR 0 1
9746: PUSH
9747: FOR_TO
9748: IFFALSE 9821
// begin if Rand ( 1 , 3 ) = 1 then
9750: LD_INT 1
9752: PPUSH
9753: LD_INT 3
9755: PPUSH
9756: CALL_OW 12
9760: PUSH
9761: LD_INT 1
9763: EQUAL
9764: IFFALSE 9786
// PrepareHuman ( false , un_class , - overskill ) else
9766: LD_INT 0
9768: PPUSH
9769: LD_VAR 0 2
9773: PPUSH
9774: LD_VAR 0 6
9778: NEG
9779: PPUSH
9780: CALL_OW 380
9784: GO 9803
// PrepareHuman ( false , un_class , overskill ) ;
9786: LD_INT 0
9788: PPUSH
9789: LD_VAR 0 2
9793: PPUSH
9794: LD_VAR 0 6
9798: PPUSH
9799: CALL_OW 380
// result = result ^ CreateHuman ;
9803: LD_ADDR_VAR 0 4
9807: PUSH
9808: LD_VAR 0 4
9812: PUSH
9813: CALL_OW 44
9817: ADD
9818: ST_TO_ADDR
// end ;
9819: GO 9747
9821: POP
9822: POP
// end ;
9823: LD_VAR 0 4
9827: RET
// export function CreateApemenWithClass ( num_units , un_class , side ) ; var i ; begin
9828: LD_INT 0
9830: PPUSH
9831: PPUSH
// result = [ ] ;
9832: LD_ADDR_VAR 0 4
9836: PUSH
9837: EMPTY
9838: ST_TO_ADDR
// InitUc ;
9839: CALL_OW 18
// InitHc ;
9843: CALL_OW 19
// uc_side = side ;
9847: LD_ADDR_OWVAR 20
9851: PUSH
9852: LD_VAR 0 3
9856: ST_TO_ADDR
// uc_nation = nation_nature ;
9857: LD_ADDR_OWVAR 21
9861: PUSH
9862: LD_INT 0
9864: ST_TO_ADDR
// hc_class = un_class ;
9865: LD_ADDR_OWVAR 28
9869: PUSH
9870: LD_VAR 0 2
9874: ST_TO_ADDR
// for i = 1 to num_units do
9875: LD_ADDR_VAR 0 5
9879: PUSH
9880: DOUBLE
9881: LD_INT 1
9883: DEC
9884: ST_TO_ADDR
9885: LD_VAR 0 1
9889: PUSH
9890: FOR_TO
9891: IFFALSE 9997
// begin hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
9893: LD_ADDR_OWVAR 29
9897: PUSH
9898: LD_INT 11
9900: PPUSH
9901: LD_INT 13
9903: PPUSH
9904: CALL_OW 12
9908: PUSH
9909: LD_INT 10
9911: PPUSH
9912: LD_INT 11
9914: PPUSH
9915: CALL_OW 12
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
9924: LD_ADDR_OWVAR 27
9928: PUSH
9929: LD_INT 1
9931: PPUSH
9932: LD_INT 2
9934: PPUSH
9935: CALL_OW 12
9939: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , 0 , 0 ] ;
9940: LD_ADDR_OWVAR 31
9944: PUSH
9945: LD_INT 0
9947: PPUSH
9948: LD_INT 2
9950: PPUSH
9951: CALL_OW 12
9955: PUSH
9956: LD_INT 0
9958: PPUSH
9959: LD_INT 2
9961: PPUSH
9962: CALL_OW 12
9966: PUSH
9967: LD_INT 0
9969: PUSH
9970: LD_INT 0
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// result = result ^ CreateHuman ;
9979: LD_ADDR_VAR 0 4
9983: PUSH
9984: LD_VAR 0 4
9988: PUSH
9989: CALL_OW 44
9993: ADD
9994: ST_TO_ADDR
// end ;
9995: GO 9890
9997: POP
9998: POP
// end ;
9999: LD_VAR 0 4
10003: RET
// export function ResetVehicleAttackDelay ( base ) ; begin
10004: LD_INT 0
10006: PPUSH
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , Rand ( 5 5$30 , 7 7$30 ) - 1 1$0 * difficulty ) ;
10007: LD_ADDR_EXP 57
10011: PUSH
10012: LD_EXP 57
10016: PPUSH
10017: LD_VAR 0 1
10021: PPUSH
10022: LD_INT 11550
10024: PPUSH
10025: LD_INT 15750
10027: PPUSH
10028: CALL_OW 12
10032: PUSH
10033: LD_INT 2100
10035: PUSH
10036: LD_OWVAR 67
10040: MUL
10041: MINUS
10042: PPUSH
10043: CALL_OW 1
10047: ST_TO_ADDR
// end ;
10048: LD_VAR 0 2
10052: RET
// export function ResetHumanAttackDelay ( base ) ; begin
10053: LD_INT 0
10055: PPUSH
// ai_human_attack_delay = Replace ( ai_human_attack_delay , base , Rand ( 6 6$30 , 8 8$30 ) - 0 0$45 * difficulty ) ;
10056: LD_ADDR_EXP 67
10060: PUSH
10061: LD_EXP 67
10065: PPUSH
10066: LD_VAR 0 1
10070: PPUSH
10071: LD_INT 13650
10073: PPUSH
10074: LD_INT 17850
10076: PPUSH
10077: CALL_OW 12
10081: PUSH
10082: LD_INT 1575
10084: PUSH
10085: LD_OWVAR 67
10089: MUL
10090: MINUS
10091: PPUSH
10092: CALL_OW 1
10096: ST_TO_ADDR
// end ;
10097: LD_VAR 0 2
10101: RET
// function Action ; begin
10102: LD_INT 0
10104: PPUSH
// wait ( 2 ) ;
10105: LD_INT 2
10107: PPUSH
10108: CALL_OW 67
// CenterNowOnXY ( 168 , 109 ) ;
10112: LD_INT 168
10114: PPUSH
10115: LD_INT 109
10117: PPUSH
10118: CALL_OW 86
// RevealFogArea ( you , Am_base ) ;
10122: LD_EXP 2
10126: PPUSH
10127: LD_INT 4
10129: PPUSH
10130: CALL_OW 332
// wait ( 0 0$0.2 ) ;
10134: LD_INT 7
10136: PPUSH
10137: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10141: LD_STRING M1
10143: PPUSH
10144: CALL_OW 337
// wait ( 0 0$0.2 ) ;
10148: LD_INT 7
10150: PPUSH
10151: CALL_OW 67
// SaveForQuickRestart ;
10155: CALL_OW 22
// end ; end_of_file
10159: LD_VAR 0 1
10163: RET
// every 0 0$1 + 0 0$0.4 do
10164: GO 10166
10166: DISABLE
// begin repeat wait ( Rand ( 1 1$10 , 2 2$40 ) ) ;
10167: LD_INT 2450
10169: PPUSH
10170: LD_INT 5600
10172: PPUSH
10173: CALL_OW 12
10177: PPUSH
10178: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 3 , 5 ) , true ) ;
10182: LD_INT 3
10184: PPUSH
10185: LD_INT 5
10187: PPUSH
10188: CALL_OW 12
10192: PPUSH
10193: LD_INT 1
10195: PPUSH
10196: CALL_OW 57
// if Rand ( 1 , 4 ) = 1 then
10200: LD_INT 1
10202: PPUSH
10203: LD_INT 4
10205: PPUSH
10206: CALL_OW 12
10210: PUSH
10211: LD_INT 1
10213: EQUAL
10214: IFFALSE 10249
// begin wait ( Rand ( 0 0$5 , 0 0$20 ) ) ;
10216: LD_INT 175
10218: PPUSH
10219: LD_INT 700
10221: PPUSH
10222: CALL_OW 12
10226: PPUSH
10227: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 2 , 4 ) , true ) ;
10231: LD_INT 2
10233: PPUSH
10234: LD_INT 4
10236: PPUSH
10237: CALL_OW 12
10241: PPUSH
10242: LD_INT 1
10244: PPUSH
10245: CALL_OW 57
// end ; until false ;
10249: LD_INT 0
10251: IFFALSE 10167
// end ;
10253: END
// every 0 0$1 + 0 0$0.5 do var count , time ;
10254: GO 10256
10256: DISABLE
10257: LD_INT 0
10259: PPUSH
10260: PPUSH
// begin count = 0 ;
10261: LD_ADDR_VAR 0 1
10265: PUSH
10266: LD_INT 0
10268: ST_TO_ADDR
// repeat if game_phase < 3 then
10269: LD_EXP 88
10273: PUSH
10274: LD_INT 3
10276: LESS
10277: IFFALSE 10326
// time = [ 1 1$0 , 1 1$15 , 1 1$30 ] [ difficulty ] + ( 0 0$45 * count / ( count + 6 ) ) else
10279: LD_ADDR_VAR 0 2
10283: PUSH
10284: LD_INT 2100
10286: PUSH
10287: LD_INT 2625
10289: PUSH
10290: LD_INT 3150
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: PUSH
10298: LD_OWVAR 67
10302: ARRAY
10303: PUSH
10304: LD_INT 1575
10306: PUSH
10307: LD_VAR 0 1
10311: MUL
10312: PUSH
10313: LD_VAR 0 1
10317: PUSH
10318: LD_INT 6
10320: PLUS
10321: DIVREAL
10322: PLUS
10323: ST_TO_ADDR
10324: GO 10351
// time = [ 1 1$40 , 1 1$55 , 2 2$10 ] [ difficulty ] ;
10326: LD_ADDR_VAR 0 2
10330: PUSH
10331: LD_INT 3500
10333: PUSH
10334: LD_INT 4025
10336: PUSH
10337: LD_INT 4550
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: LIST
10344: PUSH
10345: LD_OWVAR 67
10349: ARRAY
10350: ST_TO_ADDR
// wait ( Rand ( time , time + 0 0$30 ) ) ;
10351: LD_VAR 0 2
10355: PPUSH
10356: LD_VAR 0 2
10360: PUSH
10361: LD_INT 1050
10363: PLUS
10364: PPUSH
10365: CALL_OW 12
10369: PPUSH
10370: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , player_crate_area , true ) ;
10374: LD_INT 3
10376: PPUSH
10377: LD_INT 5
10379: PPUSH
10380: CALL_OW 12
10384: PPUSH
10385: LD_INT 9
10387: PPUSH
10388: LD_INT 1
10390: PPUSH
10391: CALL_OW 55
// count = count + 1 ;
10395: LD_ADDR_VAR 0 1
10399: PUSH
10400: LD_VAR 0 1
10404: PUSH
10405: LD_INT 1
10407: PLUS
10408: ST_TO_ADDR
// until false ;
10409: LD_INT 0
10411: IFFALSE 10269
// end ; end_of_file
10413: PPOPN 2
10415: END
// every 0 0$10 do var i , base ;
10416: GO 10418
10418: DISABLE
10419: LD_INT 0
10421: PPUSH
10422: PPUSH
// begin for i = 1 to ai_depot do
10423: LD_ADDR_VAR 0 1
10427: PUSH
10428: DOUBLE
10429: LD_INT 1
10431: DEC
10432: ST_TO_ADDR
10433: LD_EXP 34
10437: PUSH
10438: FOR_TO
10439: IFFALSE 10549
// if IsOk ( ai_depot [ i ] ) and GetSide ( ai_depot [ i ] ) <> you then
10441: LD_EXP 34
10445: PUSH
10446: LD_VAR 0 1
10450: ARRAY
10451: PPUSH
10452: CALL_OW 302
10456: PUSH
10457: LD_EXP 34
10461: PUSH
10462: LD_VAR 0 1
10466: ARRAY
10467: PPUSH
10468: CALL_OW 255
10472: PUSH
10473: LD_EXP 2
10477: NONEQUAL
10478: AND
10479: IFFALSE 10547
// begin base = GetBase ( ai_depot [ i ] ) ;
10481: LD_ADDR_VAR 0 2
10485: PUSH
10486: LD_EXP 34
10490: PUSH
10491: LD_VAR 0 1
10495: ARRAY
10496: PPUSH
10497: CALL_OW 274
10501: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 300 ) ;
10502: LD_VAR 0 2
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: LD_INT 300
10512: PPUSH
10513: CALL_OW 277
// SetResourceType ( base , mat_oil , 300 ) ;
10517: LD_VAR 0 2
10521: PPUSH
10522: LD_INT 2
10524: PPUSH
10525: LD_INT 300
10527: PPUSH
10528: CALL_OW 277
// SetResourceType ( base , mat_siberit , 300 ) ;
10532: LD_VAR 0 2
10536: PPUSH
10537: LD_INT 3
10539: PPUSH
10540: LD_INT 300
10542: PPUSH
10543: CALL_OW 277
// end ;
10547: GO 10438
10549: POP
10550: POP
// enable ;
10551: ENABLE
// end ;
10552: PPOPN 2
10554: END
// on UnitDestroyed ( un ) do var side , temp_list , base ;
10555: LD_INT 0
10557: PPUSH
10558: PPUSH
10559: PPUSH
// begin if un = Heike then
10560: LD_VAR 0 1
10564: PUSH
10565: LD_EXP 9
10569: EQUAL
10570: IFFALSE 10594
// begin ExclusiveOn ;
10572: CALL_OW 4
// Wait ( 0 0$1 ) ;
10576: LD_INT 35
10578: PPUSH
10579: CALL_OW 67
// YouLost ( HeikeDead ) ;
10583: LD_STRING HeikeDead
10585: PPUSH
10586: CALL_OW 104
// ExclusiveOff ;
10590: CALL_OW 5
// end ; if un = Gensher then
10594: LD_VAR 0 1
10598: PUSH
10599: LD_EXP 23
10603: EQUAL
10604: IFFALSE 10628
// begin ExclusiveOn ;
10606: CALL_OW 4
// Wait ( 0 0$1 ) ;
10610: LD_INT 35
10612: PPUSH
10613: CALL_OW 67
// YouLost ( GensherDead ) ;
10617: LD_STRING GensherDead
10619: PPUSH
10620: CALL_OW 104
// ExclusiveOff ;
10624: CALL_OW 5
// end ; if UnitFilter ( original_gensher_people , [ [ f_class , class_scientistic ] , [ f_lives , 1 ] ] ) = 0 then
10628: LD_EXP 82
10632: PPUSH
10633: LD_INT 25
10635: PUSH
10636: LD_INT 4
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 24
10645: PUSH
10646: LD_INT 1
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PPUSH
10657: CALL_OW 72
10661: PUSH
10662: LD_INT 0
10664: EQUAL
10665: IFFALSE 10689
// begin ExclusiveOn ;
10667: CALL_OW 4
// wait ( 0 0$1 ) ;
10671: LD_INT 35
10673: PPUSH
10674: CALL_OW 67
// YouLost ( GensherScisDead ) ;
10678: LD_STRING GensherScisDead
10680: PPUSH
10681: CALL_OW 104
// ExclusiveOff ;
10685: CALL_OW 5
// end ; for base in ai_bases do
10689: LD_ADDR_VAR 0 4
10693: PUSH
10694: LD_EXP 58
10698: PUSH
10699: FOR_IN
10700: IFFALSE 10751
// begin temp_list = ai_captured_buildings [ base ] diff un ;
10702: LD_ADDR_VAR 0 3
10706: PUSH
10707: LD_EXP 78
10711: PUSH
10712: LD_VAR 0 4
10716: ARRAY
10717: PUSH
10718: LD_VAR 0 1
10722: DIFF
10723: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
10724: LD_ADDR_EXP 78
10728: PUSH
10729: LD_EXP 78
10733: PPUSH
10734: LD_VAR 0 4
10738: PPUSH
10739: LD_VAR 0 3
10743: PPUSH
10744: CALL_OW 1
10748: ST_TO_ADDR
// end ;
10749: GO 10699
10751: POP
10752: POP
// side = GetSide ( un ) ;
10753: LD_ADDR_VAR 0 2
10757: PUSH
10758: LD_VAR 0 1
10762: PPUSH
10763: CALL_OW 255
10767: ST_TO_ADDR
// if side = you then
10768: LD_VAR 0 2
10772: PUSH
10773: LD_EXP 2
10777: EQUAL
10778: IFFALSE 10782
// exit ;
10780: GO 11005
// if side = you_alt and game_phase = 1 then
10782: LD_VAR 0 2
10786: PUSH
10787: LD_EXP 5
10791: EQUAL
10792: PUSH
10793: LD_EXP 88
10797: PUSH
10798: LD_INT 1
10800: EQUAL
10801: AND
10802: IFFALSE 10865
// begin case GetType ( un ) of unit_human :
10804: LD_VAR 0 1
10808: PPUSH
10809: CALL_OW 247
10813: PUSH
10814: LD_INT 1
10816: DOUBLE
10817: EQUAL
10818: IFTRUE 10822
10820: GO 10839
10822: POP
// russian_interference_points = russian_interference_points + 3 ; unit_building :
10823: LD_ADDR_EXP 96
10827: PUSH
10828: LD_EXP 96
10832: PUSH
10833: LD_INT 3
10835: PLUS
10836: ST_TO_ADDR
10837: GO 10865
10839: LD_INT 3
10841: DOUBLE
10842: EQUAL
10843: IFTRUE 10847
10845: GO 10864
10847: POP
// russian_interference_points = russian_interference_points + 2 ; end ;
10848: LD_ADDR_EXP 96
10852: PUSH
10853: LD_EXP 96
10857: PUSH
10858: LD_INT 2
10860: PLUS
10861: ST_TO_ADDR
10862: GO 10865
10864: POP
// end ; case GetType ( un ) of unit_human :
10865: LD_VAR 0 1
10869: PPUSH
10870: CALL_OW 247
10874: PUSH
10875: LD_INT 1
10877: DOUBLE
10878: EQUAL
10879: IFTRUE 10883
10881: GO 10920
10883: POP
// for base in ai_bases do
10884: LD_ADDR_VAR 0 4
10888: PUSH
10889: LD_EXP 58
10893: PUSH
10894: FOR_IN
10895: IFFALSE 10916
// RemoveHumanFromVariables ( base , un , true ) ; unit_vehicle :
10897: LD_VAR 0 4
10901: PPUSH
10902: LD_VAR 0 1
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: CALL 11561 0 3
10914: GO 10894
10916: POP
10917: POP
10918: GO 11005
10920: LD_INT 2
10922: DOUBLE
10923: EQUAL
10924: IFTRUE 10928
10926: GO 10962
10928: POP
// for base in ai_bases do
10929: LD_ADDR_VAR 0 4
10933: PUSH
10934: LD_EXP 58
10938: PUSH
10939: FOR_IN
10940: IFFALSE 10958
// RemoveVehicleFromVariables ( base , un ) ; unit_building :
10942: LD_VAR 0 4
10946: PPUSH
10947: LD_VAR 0 1
10951: PPUSH
10952: CALL 11169 0 2
10956: GO 10939
10958: POP
10959: POP
10960: GO 11005
10962: LD_INT 3
10964: DOUBLE
10965: EQUAL
10966: IFTRUE 10970
10968: GO 11004
10970: POP
// for base in ai_bases do
10971: LD_ADDR_VAR 0 4
10975: PUSH
10976: LD_EXP 58
10980: PUSH
10981: FOR_IN
10982: IFFALSE 11000
// RemoveBuildingFromVariables ( base , un ) ; end ;
10984: LD_VAR 0 4
10988: PPUSH
10989: LD_VAR 0 1
10993: PPUSH
10994: CALL 11008 0 2
10998: GO 10981
11000: POP
11001: POP
11002: GO 11005
11004: POP
// end ;
11005: PPOPN 4
11007: END
// function RemoveBuildingFromVariables ( base , building ) ; var temp_list ; begin
11008: LD_INT 0
11010: PPUSH
11011: PPUSH
// temp_list = ai_all_buildings [ base ] diff building ;
11012: LD_ADDR_VAR 0 4
11016: PUSH
11017: LD_EXP 44
11021: PUSH
11022: LD_VAR 0 1
11026: ARRAY
11027: PUSH
11028: LD_VAR 0 2
11032: DIFF
11033: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
11034: LD_ADDR_EXP 44
11038: PUSH
11039: LD_EXP 44
11043: PPUSH
11044: LD_VAR 0 1
11048: PPUSH
11049: LD_VAR 0 4
11053: PPUSH
11054: CALL_OW 1
11058: ST_TO_ADDR
// temp_list = ai_excepted_buildings [ base ] diff building ;
11059: LD_ADDR_VAR 0 4
11063: PUSH
11064: LD_EXP 68
11068: PUSH
11069: LD_VAR 0 1
11073: ARRAY
11074: PUSH
11075: LD_VAR 0 2
11079: DIFF
11080: ST_TO_ADDR
// ai_excepted_buildings = Replace ( ai_excepted_buildings , base , temp_list ) ;
11081: LD_ADDR_EXP 68
11085: PUSH
11086: LD_EXP 68
11090: PPUSH
11091: LD_VAR 0 1
11095: PPUSH
11096: LD_VAR 0 4
11100: PPUSH
11101: CALL_OW 1
11105: ST_TO_ADDR
// if building = ai_building_under_construction [ base ] then
11106: LD_VAR 0 2
11110: PUSH
11111: LD_EXP 42
11115: PUSH
11116: LD_VAR 0 1
11120: ARRAY
11121: EQUAL
11122: IFFALSE 11147
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
11124: LD_ADDR_EXP 42
11128: PUSH
11129: LD_EXP 42
11133: PPUSH
11134: LD_VAR 0 1
11138: PPUSH
11139: LD_INT 0
11141: PPUSH
11142: CALL_OW 1
11146: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , building , false ) ;
11147: LD_VAR 0 1
11151: PPUSH
11152: LD_VAR 0 2
11156: PPUSH
11157: LD_INT 0
11159: PPUSH
11160: CALL 7037 0 3
// end ;
11164: LD_VAR 0 3
11168: RET
// function RemoveVehicleFromVariables ( base , vehicle ) ; var temp_list ; begin
11169: LD_INT 0
11171: PPUSH
11172: PPUSH
// if vehicle in ai_vehicles_defend [ base ] then
11173: LD_VAR 0 2
11177: PUSH
11178: LD_EXP 39
11182: PUSH
11183: LD_VAR 0 1
11187: ARRAY
11188: IN
11189: IFFALSE 11238
// begin temp_list = ai_vehicles_defend [ base ] diff vehicle ;
11191: LD_ADDR_VAR 0 4
11195: PUSH
11196: LD_EXP 39
11200: PUSH
11201: LD_VAR 0 1
11205: ARRAY
11206: PUSH
11207: LD_VAR 0 2
11211: DIFF
11212: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list ) ;
11213: LD_ADDR_EXP 39
11217: PUSH
11218: LD_EXP 39
11222: PPUSH
11223: LD_VAR 0 1
11227: PPUSH
11228: LD_VAR 0 4
11232: PPUSH
11233: CALL_OW 1
11237: ST_TO_ADDR
// end ; if vehicle in ai_vehicles_attack [ base ] then
11238: LD_VAR 0 2
11242: PUSH
11243: LD_EXP 40
11247: PUSH
11248: LD_VAR 0 1
11252: ARRAY
11253: IN
11254: IFFALSE 11303
// begin temp_list = ai_vehicles_attack [ base ] diff vehicle ;
11256: LD_ADDR_VAR 0 4
11260: PUSH
11261: LD_EXP 40
11265: PUSH
11266: LD_VAR 0 1
11270: ARRAY
11271: PUSH
11272: LD_VAR 0 2
11276: DIFF
11277: ST_TO_ADDR
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , temp_list ) ;
11278: LD_ADDR_EXP 40
11282: PUSH
11283: LD_EXP 40
11287: PPUSH
11288: LD_VAR 0 1
11292: PPUSH
11293: LD_VAR 0 4
11297: PPUSH
11298: CALL_OW 1
11302: ST_TO_ADDR
// end ; if vehicle = ai_cargo_bay [ base ] then
11303: LD_VAR 0 2
11307: PUSH
11308: LD_EXP 60
11312: PUSH
11313: LD_VAR 0 1
11317: ARRAY
11318: EQUAL
11319: IFFALSE 11344
// begin ai_cargo_bay = Replace ( ai_cargo_bay , base , 0 ) ;
11321: LD_ADDR_EXP 60
11325: PUSH
11326: LD_EXP 60
11330: PPUSH
11331: LD_VAR 0 1
11335: PPUSH
11336: LD_INT 0
11338: PPUSH
11339: CALL_OW 1
11343: ST_TO_ADDR
// end ; if vehicle = ai_crane [ base ] then
11344: LD_VAR 0 2
11348: PUSH
11349: LD_EXP 70
11353: PUSH
11354: LD_VAR 0 1
11358: ARRAY
11359: EQUAL
11360: IFFALSE 11426
// begin ai_crane = Replace ( ai_crane , base , 0 ) ;
11362: LD_ADDR_EXP 70
11366: PUSH
11367: LD_EXP 70
11371: PPUSH
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_INT 0
11379: PPUSH
11380: CALL_OW 1
11384: ST_TO_ADDR
// if vehicle = ai_building_constructor [ base ] then
11385: LD_VAR 0 2
11389: PUSH
11390: LD_EXP 45
11394: PUSH
11395: LD_VAR 0 1
11399: ARRAY
11400: EQUAL
11401: IFFALSE 11426
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
11403: LD_ADDR_EXP 45
11407: PUSH
11408: LD_EXP 45
11412: PPUSH
11413: LD_VAR 0 1
11417: PPUSH
11418: LD_INT 0
11420: PPUSH
11421: CALL_OW 1
11425: ST_TO_ADDR
// end ; if vehicle in ai_vehicles_being_repaired [ base ] then
11426: LD_VAR 0 2
11430: PUSH
11431: LD_EXP 79
11435: PUSH
11436: LD_VAR 0 1
11440: ARRAY
11441: IN
11442: IFFALSE 11491
// begin temp_list = ai_vehicles_being_repaired [ base ] diff vehicle ;
11444: LD_ADDR_VAR 0 4
11448: PUSH
11449: LD_EXP 79
11453: PUSH
11454: LD_VAR 0 1
11458: ARRAY
11459: PUSH
11460: LD_VAR 0 2
11464: DIFF
11465: ST_TO_ADDR
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
11466: LD_ADDR_EXP 79
11470: PUSH
11471: LD_EXP 79
11475: PPUSH
11476: LD_VAR 0 1
11480: PPUSH
11481: LD_VAR 0 4
11485: PPUSH
11486: CALL_OW 1
11490: ST_TO_ADDR
// end ; if vehicle in ai_refuel_vehicles_list [ base ] then
11491: LD_VAR 0 2
11495: PUSH
11496: LD_EXP 54
11500: PUSH
11501: LD_VAR 0 1
11505: ARRAY
11506: IN
11507: IFFALSE 11556
// begin temp_list = ai_refuel_vehicles_list [ base ] diff vehicle ;
11509: LD_ADDR_VAR 0 4
11513: PUSH
11514: LD_EXP 54
11518: PUSH
11519: LD_VAR 0 1
11523: ARRAY
11524: PUSH
11525: LD_VAR 0 2
11529: DIFF
11530: ST_TO_ADDR
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
11531: LD_ADDR_EXP 54
11535: PUSH
11536: LD_EXP 54
11540: PPUSH
11541: LD_VAR 0 1
11545: PPUSH
11546: LD_VAR 0 4
11550: PPUSH
11551: CALL_OW 1
11555: ST_TO_ADDR
// end ; end ;
11556: LD_VAR 0 3
11560: RET
// function RemoveHumanFromVariables ( base , human , check_if_base_is_dead ) ; var temp_list ; begin
11561: LD_INT 0
11563: PPUSH
11564: PPUSH
// if human in ai_soldiers [ base ] then
11565: LD_VAR 0 2
11569: PUSH
11570: LD_EXP 29
11574: PUSH
11575: LD_VAR 0 1
11579: ARRAY
11580: IN
11581: IFFALSE 11630
// begin temp_list = ai_soldiers [ base ] diff human ;
11583: LD_ADDR_VAR 0 5
11587: PUSH
11588: LD_EXP 29
11592: PUSH
11593: LD_VAR 0 1
11597: ARRAY
11598: PUSH
11599: LD_VAR 0 2
11603: DIFF
11604: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , base , temp_list ) ;
11605: LD_ADDR_EXP 29
11609: PUSH
11610: LD_EXP 29
11614: PPUSH
11615: LD_VAR 0 1
11619: PPUSH
11620: LD_VAR 0 5
11624: PPUSH
11625: CALL_OW 1
11629: ST_TO_ADDR
// end ; if human in ai_attacking_soldiers [ base ] then
11630: LD_VAR 0 2
11634: PUSH
11635: LD_EXP 63
11639: PUSH
11640: LD_VAR 0 1
11644: ARRAY
11645: IN
11646: IFFALSE 11695
// begin temp_list = ai_attacking_soldiers [ base ] diff human ;
11648: LD_ADDR_VAR 0 5
11652: PUSH
11653: LD_EXP 63
11657: PUSH
11658: LD_VAR 0 1
11662: ARRAY
11663: PUSH
11664: LD_VAR 0 2
11668: DIFF
11669: ST_TO_ADDR
// ai_attacking_soldiers = Replace ( ai_attacking_soldiers , base , temp_list ) ;
11670: LD_ADDR_EXP 63
11674: PUSH
11675: LD_EXP 63
11679: PPUSH
11680: LD_VAR 0 1
11684: PPUSH
11685: LD_VAR 0 5
11689: PPUSH
11690: CALL_OW 1
11694: ST_TO_ADDR
// end ; if human in ai_engineers [ base ] then
11695: LD_VAR 0 2
11699: PUSH
11700: LD_EXP 30
11704: PUSH
11705: LD_VAR 0 1
11709: ARRAY
11710: IN
11711: IFFALSE 11760
// begin temp_list = ai_engineers [ base ] diff human ;
11713: LD_ADDR_VAR 0 5
11717: PUSH
11718: LD_EXP 30
11722: PUSH
11723: LD_VAR 0 1
11727: ARRAY
11728: PUSH
11729: LD_VAR 0 2
11733: DIFF
11734: ST_TO_ADDR
// ai_engineers = Replace ( ai_engineers , base , temp_list ) ;
11735: LD_ADDR_EXP 30
11739: PUSH
11740: LD_EXP 30
11744: PPUSH
11745: LD_VAR 0 1
11749: PPUSH
11750: LD_VAR 0 5
11754: PPUSH
11755: CALL_OW 1
11759: ST_TO_ADDR
// end ; if human in ai_apemen_engineers [ base ] then
11760: LD_VAR 0 2
11764: PUSH
11765: LD_EXP 62
11769: PUSH
11770: LD_VAR 0 1
11774: ARRAY
11775: IN
11776: IFFALSE 11825
// begin temp_list = ai_apemen_engineers [ base ] diff human ;
11778: LD_ADDR_VAR 0 5
11782: PUSH
11783: LD_EXP 62
11787: PUSH
11788: LD_VAR 0 1
11792: ARRAY
11793: PUSH
11794: LD_VAR 0 2
11798: DIFF
11799: ST_TO_ADDR
// ai_apemen_engineers = Replace ( ai_apemen_engineers , base , temp_list ) ;
11800: LD_ADDR_EXP 62
11804: PUSH
11805: LD_EXP 62
11809: PPUSH
11810: LD_VAR 0 1
11814: PPUSH
11815: LD_VAR 0 5
11819: PPUSH
11820: CALL_OW 1
11824: ST_TO_ADDR
// end ; if human in ai_mechanics_defend [ base ] then
11825: LD_VAR 0 2
11829: PUSH
11830: LD_EXP 31
11834: PUSH
11835: LD_VAR 0 1
11839: ARRAY
11840: IN
11841: IFFALSE 11890
// begin temp_list = ai_mechanics_defend [ base ] diff human ;
11843: LD_ADDR_VAR 0 5
11847: PUSH
11848: LD_EXP 31
11852: PUSH
11853: LD_VAR 0 1
11857: ARRAY
11858: PUSH
11859: LD_VAR 0 2
11863: DIFF
11864: ST_TO_ADDR
// ai_mechanics_defend = Replace ( ai_mechanics_defend , base , temp_list ) ;
11865: LD_ADDR_EXP 31
11869: PUSH
11870: LD_EXP 31
11874: PPUSH
11875: LD_VAR 0 1
11879: PPUSH
11880: LD_VAR 0 5
11884: PPUSH
11885: CALL_OW 1
11889: ST_TO_ADDR
// end ; if human in ai_scientists [ base ] then
11890: LD_VAR 0 2
11894: PUSH
11895: LD_EXP 32
11899: PUSH
11900: LD_VAR 0 1
11904: ARRAY
11905: IN
11906: IFFALSE 11955
// begin temp_list = ai_scientists [ base ] diff human ;
11908: LD_ADDR_VAR 0 5
11912: PUSH
11913: LD_EXP 32
11917: PUSH
11918: LD_VAR 0 1
11922: ARRAY
11923: PUSH
11924: LD_VAR 0 2
11928: DIFF
11929: ST_TO_ADDR
// ai_scientists = Replace ( ai_scientists , base , temp_list ) ;
11930: LD_ADDR_EXP 32
11934: PUSH
11935: LD_EXP 32
11939: PPUSH
11940: LD_VAR 0 1
11944: PPUSH
11945: LD_VAR 0 5
11949: PPUSH
11950: CALL_OW 1
11954: ST_TO_ADDR
// end ; if human in ai_attacking_scientists [ base ] then
11955: LD_VAR 0 2
11959: PUSH
11960: LD_EXP 64
11964: PUSH
11965: LD_VAR 0 1
11969: ARRAY
11970: IN
11971: IFFALSE 12020
// begin temp_list = ai_attacking_scientists [ base ] diff human ;
11973: LD_ADDR_VAR 0 5
11977: PUSH
11978: LD_EXP 64
11982: PUSH
11983: LD_VAR 0 1
11987: ARRAY
11988: PUSH
11989: LD_VAR 0 2
11993: DIFF
11994: ST_TO_ADDR
// ai_attacking_scientists = Replace ( ai_attacking_scientists , base , temp_list ) ;
11995: LD_ADDR_EXP 64
11999: PUSH
12000: LD_EXP 64
12004: PPUSH
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_VAR 0 5
12014: PPUSH
12015: CALL_OW 1
12019: ST_TO_ADDR
// end ; if human in ai_heal_these_humans [ base ] then
12020: LD_VAR 0 2
12024: PUSH
12025: LD_EXP 43
12029: PUSH
12030: LD_VAR 0 1
12034: ARRAY
12035: IN
12036: IFFALSE 12085
// begin temp_list = ai_heal_these_humans [ base ] diff human ;
12038: LD_ADDR_VAR 0 5
12042: PUSH
12043: LD_EXP 43
12047: PUSH
12048: LD_VAR 0 1
12052: ARRAY
12053: PUSH
12054: LD_VAR 0 2
12058: DIFF
12059: ST_TO_ADDR
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12060: LD_ADDR_EXP 43
12064: PUSH
12065: LD_EXP 43
12069: PPUSH
12070: LD_VAR 0 1
12074: PPUSH
12075: LD_VAR 0 5
12079: PPUSH
12080: CALL_OW 1
12084: ST_TO_ADDR
// end ; if human = ai_building_constructor [ base ] then
12085: LD_VAR 0 2
12089: PUSH
12090: LD_EXP 45
12094: PUSH
12095: LD_VAR 0 1
12099: ARRAY
12100: EQUAL
12101: IFFALSE 12126
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
12103: LD_ADDR_EXP 45
12107: PUSH
12108: LD_EXP 45
12112: PPUSH
12113: LD_VAR 0 1
12117: PPUSH
12118: LD_INT 0
12120: PPUSH
12121: CALL_OW 1
12125: ST_TO_ADDR
// if human in ai_retreating_attacking_humans [ base ] then
12126: LD_VAR 0 2
12130: PUSH
12131: LD_EXP 66
12135: PUSH
12136: LD_VAR 0 1
12140: ARRAY
12141: IN
12142: IFFALSE 12191
// begin temp_list = ai_retreating_attacking_humans [ base ] diff human ;
12144: LD_ADDR_VAR 0 5
12148: PUSH
12149: LD_EXP 66
12153: PUSH
12154: LD_VAR 0 1
12158: ARRAY
12159: PUSH
12160: LD_VAR 0 2
12164: DIFF
12165: ST_TO_ADDR
// ai_retreating_attacking_humans = Replace ( ai_retreating_attacking_humans , base , temp_list ) ;
12166: LD_ADDR_EXP 66
12170: PUSH
12171: LD_EXP 66
12175: PPUSH
12176: LD_VAR 0 1
12180: PPUSH
12181: LD_VAR 0 5
12185: PPUSH
12186: CALL_OW 1
12190: ST_TO_ADDR
// end ; if check_if_base_is_dead then
12191: LD_VAR 0 3
12195: IFFALSE 12305
// if ( ( ai_soldiers [ base ] ^ ai_attacking_soldiers [ base ] ^ ai_engineers [ base ] ^ ai_apemen_engineers [ base ] ^ ai_mechanics_defend [ base ] ^ ai_scientists [ base ] ^ ai_attacking_scientists [ base ] ) diff 0 ) = 0 then
12197: LD_EXP 29
12201: PUSH
12202: LD_VAR 0 1
12206: ARRAY
12207: PUSH
12208: LD_EXP 63
12212: PUSH
12213: LD_VAR 0 1
12217: ARRAY
12218: ADD
12219: PUSH
12220: LD_EXP 30
12224: PUSH
12225: LD_VAR 0 1
12229: ARRAY
12230: ADD
12231: PUSH
12232: LD_EXP 62
12236: PUSH
12237: LD_VAR 0 1
12241: ARRAY
12242: ADD
12243: PUSH
12244: LD_EXP 31
12248: PUSH
12249: LD_VAR 0 1
12253: ARRAY
12254: ADD
12255: PUSH
12256: LD_EXP 32
12260: PUSH
12261: LD_VAR 0 1
12265: ARRAY
12266: ADD
12267: PUSH
12268: LD_EXP 64
12272: PUSH
12273: LD_VAR 0 1
12277: ARRAY
12278: ADD
12279: PUSH
12280: LD_INT 0
12282: DIFF
12283: PUSH
12284: LD_INT 0
12286: EQUAL
12287: IFFALSE 12305
// ai_bases = ai_bases diff base ;
12289: LD_ADDR_EXP 58
12293: PUSH
12294: LD_EXP 58
12298: PUSH
12299: LD_VAR 0 1
12303: DIFF
12304: ST_TO_ADDR
// end ;
12305: LD_VAR 0 4
12309: RET
// function GetBaseArea ( base ) ; begin
12310: LD_INT 0
12312: PPUSH
// case base of 1 :
12313: LD_VAR 0 1
12317: PUSH
12318: LD_INT 1
12320: DOUBLE
12321: EQUAL
12322: IFTRUE 12326
12324: GO 12337
12326: POP
// result = Am_base ; 2 :
12327: LD_ADDR_VAR 0 2
12331: PUSH
12332: LD_INT 4
12334: ST_TO_ADDR
12335: GO 12376
12337: LD_INT 2
12339: DOUBLE
12340: EQUAL
12341: IFTRUE 12345
12343: GO 12356
12345: POP
// result = Gensher_base ; 3 :
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: LD_INT 7
12353: ST_TO_ADDR
12354: GO 12376
12356: LD_INT 3
12358: DOUBLE
12359: EQUAL
12360: IFTRUE 12364
12362: GO 12375
12364: POP
// result = Ru_base ; end ;
12365: LD_ADDR_VAR 0 2
12369: PUSH
12370: LD_INT 3
12372: ST_TO_ADDR
12373: GO 12376
12375: POP
// end ;
12376: LD_VAR 0 2
12380: RET
// function GetBaseSide ( base ) ; begin
12381: LD_INT 0
12383: PPUSH
// case base of 1 :
12384: LD_VAR 0 1
12388: PUSH
12389: LD_INT 1
12391: DOUBLE
12392: EQUAL
12393: IFTRUE 12397
12395: GO 12410
12397: POP
// result = americans ; 2 :
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: LD_EXP 6
12407: ST_TO_ADDR
12408: GO 12453
12410: LD_INT 2
12412: DOUBLE
12413: EQUAL
12414: IFTRUE 12418
12416: GO 12431
12418: POP
// result = you_alt ; 3 :
12419: LD_ADDR_VAR 0 2
12423: PUSH
12424: LD_EXP 5
12428: ST_TO_ADDR
12429: GO 12453
12431: LD_INT 3
12433: DOUBLE
12434: EQUAL
12435: IFTRUE 12439
12437: GO 12452
12439: POP
// result = russians ; end ;
12440: LD_ADDR_VAR 0 2
12444: PUSH
12445: LD_EXP 3
12449: ST_TO_ADDR
12450: GO 12453
12452: POP
// end ;
12453: LD_VAR 0 2
12457: RET
// function GetBaseNation ( base ) ; begin
12458: LD_INT 0
12460: PPUSH
// case base of 1 :
12461: LD_VAR 0 1
12465: PUSH
12466: LD_INT 1
12468: DOUBLE
12469: EQUAL
12470: IFTRUE 12474
12472: GO 12485
12474: POP
// result = nation_american ; 2 :
12475: LD_ADDR_VAR 0 2
12479: PUSH
12480: LD_INT 1
12482: ST_TO_ADDR
12483: GO 12524
12485: LD_INT 2
12487: DOUBLE
12488: EQUAL
12489: IFTRUE 12493
12491: GO 12504
12493: POP
// result = nation_arabian ; 3 :
12494: LD_ADDR_VAR 0 2
12498: PUSH
12499: LD_INT 2
12501: ST_TO_ADDR
12502: GO 12524
12504: LD_INT 3
12506: DOUBLE
12507: EQUAL
12508: IFTRUE 12512
12510: GO 12523
12512: POP
// result = nation_russian ; end ;
12513: LD_ADDR_VAR 0 2
12517: PUSH
12518: LD_INT 3
12520: ST_TO_ADDR
12521: GO 12524
12523: POP
// end ;
12524: LD_VAR 0 2
12528: RET
// function FindBase ( un ) ; var base ; begin
12529: LD_INT 0
12531: PPUSH
12532: PPUSH
// for base in ai_bases do
12533: LD_ADDR_VAR 0 3
12537: PUSH
12538: LD_EXP 58
12542: PUSH
12543: FOR_IN
12544: IFFALSE 12583
// if IsInArea ( un , GetBaseArea ( base ) ) then
12546: LD_VAR 0 1
12550: PPUSH
12551: LD_VAR 0 3
12555: PPUSH
12556: CALL 12310 0 1
12560: PPUSH
12561: CALL_OW 308
12565: IFFALSE 12581
// begin result = base ;
12567: LD_ADDR_VAR 0 2
12571: PUSH
12572: LD_VAR 0 3
12576: ST_TO_ADDR
// exit ;
12577: POP
12578: POP
12579: GO 12594
// end ;
12581: GO 12543
12583: POP
12584: POP
// result = - 1 ;
12585: LD_ADDR_VAR 0 2
12589: PUSH
12590: LD_INT 1
12592: NEG
12593: ST_TO_ADDR
// end ;
12594: LD_VAR 0 2
12598: RET
// every 0 0$1 do var side , i , temp_list , buildings_list , soldiers_list , temp_unit , base , val , special_units , bunkers , under_attack , j ; var am_snipers , temp_list_2 ;
12599: GO 12601
12601: DISABLE
12602: LD_INT 0
12604: PPUSH
12605: PPUSH
12606: PPUSH
12607: PPUSH
12608: PPUSH
12609: PPUSH
12610: PPUSH
12611: PPUSH
12612: PPUSH
12613: PPUSH
12614: PPUSH
12615: PPUSH
12616: PPUSH
12617: PPUSH
// begin for base in ai_bases do
12618: LD_ADDR_VAR 0 7
12622: PUSH
12623: LD_EXP 58
12627: PUSH
12628: FOR_IN
12629: IFFALSE 14013
// begin side = GetBaseSide ( base ) ;
12631: LD_ADDR_VAR 0 1
12635: PUSH
12636: LD_VAR 0 7
12640: PPUSH
12641: CALL 12381 0 1
12645: ST_TO_ADDR
// soldiers_list = ai_soldiers [ base ] ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: LD_EXP 29
12655: PUSH
12656: LD_VAR 0 7
12660: ARRAY
12661: ST_TO_ADDR
// under_attack := BaseUnderAttack ( base , - 1 ) ;
12662: LD_ADDR_VAR 0 11
12666: PUSH
12667: LD_VAR 0 7
12671: PPUSH
12672: LD_INT 1
12674: NEG
12675: PPUSH
12676: CALL 23301 0 2
12680: ST_TO_ADDR
// if base = 1 and under_attack and game_phase > 1 then
12681: LD_VAR 0 7
12685: PUSH
12686: LD_INT 1
12688: EQUAL
12689: PUSH
12690: LD_VAR 0 11
12694: AND
12695: PUSH
12696: LD_EXP 88
12700: PUSH
12701: LD_INT 1
12703: GREATER
12704: AND
12705: IFFALSE 12740
// am_snipers = UnitFilter ( ai_soldiers [ base ] , [ f_class , class_sniper ] ) else
12707: LD_ADDR_VAR 0 13
12711: PUSH
12712: LD_EXP 29
12716: PUSH
12717: LD_VAR 0 7
12721: ARRAY
12722: PPUSH
12723: LD_INT 25
12725: PUSH
12726: LD_INT 5
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 72
12737: ST_TO_ADDR
12738: GO 12747
// am_snipers = [ ] ;
12740: LD_ADDR_VAR 0 13
12744: PUSH
12745: EMPTY
12746: ST_TO_ADDR
// if under_attack then
12747: LD_VAR 0 11
12751: IFFALSE 12808
// begin temp_list = ai_heal_these_humans [ base ] diff ( soldiers_list diff am_snipers ) ;
12753: LD_ADDR_VAR 0 3
12757: PUSH
12758: LD_EXP 43
12762: PUSH
12763: LD_VAR 0 7
12767: ARRAY
12768: PUSH
12769: LD_VAR 0 5
12773: PUSH
12774: LD_VAR 0 13
12778: DIFF
12779: DIFF
12780: ST_TO_ADDR
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12781: LD_ADDR_EXP 43
12785: PUSH
12786: LD_EXP 43
12790: PPUSH
12791: LD_VAR 0 7
12795: PPUSH
12796: LD_VAR 0 3
12800: PPUSH
12801: CALL_OW 1
12805: ST_TO_ADDR
// end else
12806: GO 13022
// begin temp_list = ai_heal_these_humans [ base ] ;
12808: LD_ADDR_VAR 0 3
12812: PUSH
12813: LD_EXP 43
12817: PUSH
12818: LD_VAR 0 7
12822: ARRAY
12823: ST_TO_ADDR
// for i in soldiers_list diff ai_heal_these_humans [ base ] do
12824: LD_ADDR_VAR 0 2
12828: PUSH
12829: LD_VAR 0 5
12833: PUSH
12834: LD_EXP 43
12838: PUSH
12839: LD_VAR 0 7
12843: ARRAY
12844: DIFF
12845: PUSH
12846: FOR_IN
12847: IFFALSE 12882
// if GetLives ( i ) < 800 then
12849: LD_VAR 0 2
12853: PPUSH
12854: CALL_OW 256
12858: PUSH
12859: LD_INT 800
12861: LESS
12862: IFFALSE 12880
// temp_list = temp_list ^ i ;
12864: LD_ADDR_VAR 0 3
12868: PUSH
12869: LD_VAR 0 3
12873: PUSH
12874: LD_VAR 0 2
12878: ADD
12879: ST_TO_ADDR
12880: GO 12846
12882: POP
12883: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12884: LD_ADDR_EXP 43
12888: PUSH
12889: LD_EXP 43
12893: PPUSH
12894: LD_VAR 0 7
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: CALL_OW 1
12908: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
12909: LD_ADDR_VAR 0 2
12913: PUSH
12914: LD_EXP 43
12918: PUSH
12919: LD_VAR 0 7
12923: ARRAY
12924: PUSH
12925: FOR_IN
12926: IFFALSE 12998
// if i in soldiers_list then
12928: LD_VAR 0 2
12932: PUSH
12933: LD_VAR 0 5
12937: IN
12938: IFFALSE 12996
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
12940: LD_VAR 0 2
12944: PPUSH
12945: CALL_OW 310
12949: PPUSH
12950: CALL_OW 247
12954: PUSH
12955: LD_INT 2
12957: DOUBLE
12958: EQUAL
12959: IFTRUE 12963
12961: GO 12975
12963: POP
// ComExitVehicle ( i ) ; unit_building :
12964: LD_VAR 0 2
12968: PPUSH
12969: CALL_OW 121
12973: GO 12996
12975: LD_INT 3
12977: DOUBLE
12978: EQUAL
12979: IFTRUE 12983
12981: GO 12995
12983: POP
// ComExitBuilding ( i ) ; end ;
12984: LD_VAR 0 2
12988: PPUSH
12989: CALL_OW 122
12993: GO 12996
12995: POP
12996: GO 12925
12998: POP
12999: POP
// soldiers_list = soldiers_list diff ai_heal_these_humans [ base ] ;
13000: LD_ADDR_VAR 0 5
13004: PUSH
13005: LD_VAR 0 5
13009: PUSH
13010: LD_EXP 43
13014: PUSH
13015: LD_VAR 0 7
13019: ARRAY
13020: DIFF
13021: ST_TO_ADDR
// end ; temp_list = ai_heal_these_humans [ base ] ;
13022: LD_ADDR_VAR 0 3
13026: PUSH
13027: LD_EXP 43
13031: PUSH
13032: LD_VAR 0 7
13036: ARRAY
13037: ST_TO_ADDR
// for i in am_snipers diff ai_heal_these_humans [ base ] do
13038: LD_ADDR_VAR 0 2
13042: PUSH
13043: LD_VAR 0 13
13047: PUSH
13048: LD_EXP 43
13052: PUSH
13053: LD_VAR 0 7
13057: ARRAY
13058: DIFF
13059: PUSH
13060: FOR_IN
13061: IFFALSE 13096
// if GetLives ( i ) <= 500 then
13063: LD_VAR 0 2
13067: PPUSH
13068: CALL_OW 256
13072: PUSH
13073: LD_INT 500
13075: LESSEQUAL
13076: IFFALSE 13094
// temp_list = temp_list ^ i ;
13078: LD_ADDR_VAR 0 3
13082: PUSH
13083: LD_VAR 0 3
13087: PUSH
13088: LD_VAR 0 2
13092: ADD
13093: ST_TO_ADDR
13094: GO 13060
13096: POP
13097: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
13098: LD_ADDR_EXP 43
13102: PUSH
13103: LD_EXP 43
13107: PPUSH
13108: LD_VAR 0 7
13112: PPUSH
13113: LD_VAR 0 3
13117: PPUSH
13118: CALL_OW 1
13122: ST_TO_ADDR
// am_snipers = am_snipers diff ai_heal_these_humans [ base ] ;
13123: LD_ADDR_VAR 0 13
13127: PUSH
13128: LD_VAR 0 13
13132: PUSH
13133: LD_EXP 43
13137: PUSH
13138: LD_VAR 0 7
13142: ARRAY
13143: DIFF
13144: ST_TO_ADDR
// if soldiers_list = 0 then
13145: LD_VAR 0 5
13149: PUSH
13150: LD_INT 0
13152: EQUAL
13153: IFFALSE 13157
// continue ;
13155: GO 12628
// if am_snipers > 0 then
13157: LD_VAR 0 13
13161: PUSH
13162: LD_INT 0
13164: GREATER
13165: IFFALSE 13282
// begin temp_list_2 = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_human ] , [ f_inarea , am_sniper_defend_area ] ] ) ;
13167: LD_ADDR_VAR 0 14
13171: PUSH
13172: LD_INT 81
13174: PUSH
13175: LD_VAR 0 1
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 21
13186: PUSH
13187: LD_INT 1
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 95
13196: PUSH
13197: LD_INT 12
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: PPUSH
13209: CALL_OW 69
13213: ST_TO_ADDR
// if temp_list_2 > 0 then
13214: LD_VAR 0 14
13218: PUSH
13219: LD_INT 0
13221: GREATER
13222: IFFALSE 13282
// begin soldiers_list = soldiers_list diff am_snipers ;
13224: LD_ADDR_VAR 0 5
13228: PUSH
13229: LD_VAR 0 5
13233: PUSH
13234: LD_VAR 0 13
13238: DIFF
13239: ST_TO_ADDR
// ComAgressiveMove ( GetHumansOutOfUnits ( am_snipers ) , GetX ( temp_list_2 [ 1 ] ) , GetY ( temp_list_2 [ 1 ] ) ) ;
13240: LD_VAR 0 13
13244: PPUSH
13245: CALL 23196 0 1
13249: PPUSH
13250: LD_VAR 0 14
13254: PUSH
13255: LD_INT 1
13257: ARRAY
13258: PPUSH
13259: CALL_OW 250
13263: PPUSH
13264: LD_VAR 0 14
13268: PUSH
13269: LD_INT 1
13271: ARRAY
13272: PPUSH
13273: CALL_OW 251
13277: PPUSH
13278: CALL_OW 114
// end ; end ; i = false ;
13282: LD_ADDR_VAR 0 2
13286: PUSH
13287: LD_INT 0
13289: ST_TO_ADDR
// if IsOk ( ai_depot [ base ] ) then
13290: LD_EXP 34
13294: PUSH
13295: LD_VAR 0 7
13299: ARRAY
13300: PPUSH
13301: CALL_OW 302
13305: IFFALSE 13345
// if GetEnergy ( GetBase ( ai_depot [ base ] ) ) [ 4 ] > 0 then
13307: LD_EXP 34
13311: PUSH
13312: LD_VAR 0 7
13316: ARRAY
13317: PPUSH
13318: CALL_OW 274
13322: PPUSH
13323: CALL_OW 278
13327: PUSH
13328: LD_INT 4
13330: ARRAY
13331: PUSH
13332: LD_INT 0
13334: GREATER
13335: IFFALSE 13345
// i = true ;
13337: LD_ADDR_VAR 0 2
13341: PUSH
13342: LD_INT 1
13344: ST_TO_ADDR
// if i then
13345: LD_VAR 0 2
13349: IFFALSE 13369
// bunkers = ai_bunkers [ base ] else
13351: LD_ADDR_VAR 0 10
13355: PUSH
13356: LD_EXP 49
13360: PUSH
13361: LD_VAR 0 7
13365: ARRAY
13366: ST_TO_ADDR
13367: GO 13430
// begin bunkers = [ ] ;
13369: LD_ADDR_VAR 0 10
13373: PUSH
13374: EMPTY
13375: ST_TO_ADDR
// for i in ai_bunkers [ base ] do
13376: LD_ADDR_VAR 0 2
13380: PUSH
13381: LD_EXP 49
13385: PUSH
13386: LD_VAR 0 7
13390: ARRAY
13391: PUSH
13392: FOR_IN
13393: IFFALSE 13428
// if GetBType ( i ) = b_breastwork then
13395: LD_VAR 0 2
13399: PPUSH
13400: CALL_OW 266
13404: PUSH
13405: LD_INT 31
13407: EQUAL
13408: IFFALSE 13426
// bunkers = bunkers ^ i ;
13410: LD_ADDR_VAR 0 10
13414: PUSH
13415: LD_VAR 0 10
13419: PUSH
13420: LD_VAR 0 2
13424: ADD
13425: ST_TO_ADDR
13426: GO 13392
13428: POP
13429: POP
// end ; buildings_list = [ ] ;
13430: LD_ADDR_VAR 0 4
13434: PUSH
13435: EMPTY
13436: ST_TO_ADDR
// for i in UnitFilter ( bunkers , [ f_ok ] ) do
13437: LD_ADDR_VAR 0 2
13441: PUSH
13442: LD_VAR 0 10
13446: PPUSH
13447: LD_INT 50
13449: PUSH
13450: EMPTY
13451: LIST
13452: PPUSH
13453: CALL_OW 72
13457: PUSH
13458: FOR_IN
13459: IFFALSE 13522
// begin temp_unit = UnitsInside ( i ) ;
13461: LD_ADDR_VAR 0 6
13465: PUSH
13466: LD_VAR 0 2
13470: PPUSH
13471: CALL_OW 313
13475: ST_TO_ADDR
// if temp_unit = 0 then
13476: LD_VAR 0 6
13480: PUSH
13481: LD_INT 0
13483: EQUAL
13484: IFFALSE 13504
// buildings_list = buildings_list ^ i else
13486: LD_ADDR_VAR 0 4
13490: PUSH
13491: LD_VAR 0 4
13495: PUSH
13496: LD_VAR 0 2
13500: ADD
13501: ST_TO_ADDR
13502: GO 13520
// soldiers_list = soldiers_list diff temp_unit ;
13504: LD_ADDR_VAR 0 5
13508: PUSH
13509: LD_VAR 0 5
13513: PUSH
13514: LD_VAR 0 6
13518: DIFF
13519: ST_TO_ADDR
// end ;
13520: GO 13458
13522: POP
13523: POP
// soldiers_list = soldiers_list diff Gensher ;
13524: LD_ADDR_VAR 0 5
13528: PUSH
13529: LD_VAR 0 5
13533: PUSH
13534: LD_EXP 23
13538: DIFF
13539: ST_TO_ADDR
// if buildings_list > 0 then
13540: LD_VAR 0 4
13544: PUSH
13545: LD_INT 0
13547: GREATER
13548: IFFALSE 13893
// begin if not under_attack then
13550: LD_VAR 0 11
13554: NOT
13555: IFFALSE 13625
// begin temp_list = [ ] ;
13557: LD_ADDR_VAR 0 3
13561: PUSH
13562: EMPTY
13563: ST_TO_ADDR
// for i in soldiers_list do
13564: LD_ADDR_VAR 0 2
13568: PUSH
13569: LD_VAR 0 5
13573: PUSH
13574: FOR_IN
13575: IFFALSE 13603
// temp_list = temp_list ^ GetSkill ( i , skill_combat ) ;
13577: LD_ADDR_VAR 0 3
13581: PUSH
13582: LD_VAR 0 3
13586: PUSH
13587: LD_VAR 0 2
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 259
13599: ADD
13600: ST_TO_ADDR
13601: GO 13574
13603: POP
13604: POP
// soldiers_list = SortListByListDesc ( soldiers_list , temp_list ) ;
13605: LD_ADDR_VAR 0 5
13609: PUSH
13610: LD_VAR 0 5
13614: PPUSH
13615: LD_VAR 0 3
13619: PPUSH
13620: CALL_OW 77
13624: ST_TO_ADDR
// end ; special_units = UnitFilter ( soldiers_list , [ f_or , [ f_class , class_bazooker ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] ) ;
13625: LD_ADDR_VAR 0 9
13629: PUSH
13630: LD_VAR 0 5
13634: PPUSH
13635: LD_INT 2
13637: PUSH
13638: LD_INT 25
13640: PUSH
13641: LD_INT 9
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 25
13650: PUSH
13651: LD_INT 5
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 25
13660: PUSH
13661: LD_INT 8
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 72
13678: ST_TO_ADDR
// soldiers_list = soldiers_list diff special_units ;
13679: LD_ADDR_VAR 0 5
13683: PUSH
13684: LD_VAR 0 5
13688: PUSH
13689: LD_VAR 0 9
13693: DIFF
13694: ST_TO_ADDR
// for i = 1 to buildings_list do
13695: LD_ADDR_VAR 0 2
13699: PUSH
13700: DOUBLE
13701: LD_INT 1
13703: DEC
13704: ST_TO_ADDR
13705: LD_VAR 0 4
13709: PUSH
13710: FOR_TO
13711: IFFALSE 13889
// begin if soldiers_list = 0 then
13713: LD_VAR 0 5
13717: PUSH
13718: LD_INT 0
13720: EQUAL
13721: IFFALSE 13752
// begin if special_units = 0 then
13723: LD_VAR 0 9
13727: PUSH
13728: LD_INT 0
13730: EQUAL
13731: IFFALSE 13735
// break ;
13733: GO 13889
// soldiers_list = special_units ;
13735: LD_ADDR_VAR 0 5
13739: PUSH
13740: LD_VAR 0 9
13744: ST_TO_ADDR
// special_units = [ ] ;
13745: LD_ADDR_VAR 0 9
13749: PUSH
13750: EMPTY
13751: ST_TO_ADDR
// end ; if not under_attack then
13752: LD_VAR 0 11
13756: NOT
13757: IFFALSE 13775
// temp_unit = soldiers_list [ 1 ] else
13759: LD_ADDR_VAR 0 6
13763: PUSH
13764: LD_VAR 0 5
13768: PUSH
13769: LD_INT 1
13771: ARRAY
13772: ST_TO_ADDR
13773: GO 13851
// begin temp_list = [ ] ;
13775: LD_ADDR_VAR 0 3
13779: PUSH
13780: EMPTY
13781: ST_TO_ADDR
// for j in soldiers_list do
13782: LD_ADDR_VAR 0 12
13786: PUSH
13787: LD_VAR 0 5
13791: PUSH
13792: FOR_IN
13793: IFFALSE 13829
// temp_list = temp_list ^ GetDistUnits ( j , buildings_list [ i ] ) ;
13795: LD_ADDR_VAR 0 3
13799: PUSH
13800: LD_VAR 0 3
13804: PUSH
13805: LD_VAR 0 12
13809: PPUSH
13810: LD_VAR 0 4
13814: PUSH
13815: LD_VAR 0 2
13819: ARRAY
13820: PPUSH
13821: CALL_OW 296
13825: ADD
13826: ST_TO_ADDR
13827: GO 13792
13829: POP
13830: POP
// temp_unit = WorstFromListByList ( soldiers_list , temp_list ) ;
13831: LD_ADDR_VAR 0 6
13835: PUSH
13836: LD_VAR 0 5
13840: PPUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: CALL_OW 78
13850: ST_TO_ADDR
// end ; ComEnterUnit ( temp_unit , buildings_list [ i ] ) ;
13851: LD_VAR 0 6
13855: PPUSH
13856: LD_VAR 0 4
13860: PUSH
13861: LD_VAR 0 2
13865: ARRAY
13866: PPUSH
13867: CALL_OW 120
// soldiers_list = soldiers_list diff temp_unit ;
13871: LD_ADDR_VAR 0 5
13875: PUSH
13876: LD_VAR 0 5
13880: PUSH
13881: LD_VAR 0 6
13885: DIFF
13886: ST_TO_ADDR
// end ;
13887: GO 13710
13889: POP
13890: POP
// end else
13891: GO 13900
// special_units = [ ] ;
13893: LD_ADDR_VAR 0 9
13897: PUSH
13898: EMPTY
13899: ST_TO_ADDR
// if base = 2 then
13900: LD_VAR 0 7
13904: PUSH
13905: LD_INT 2
13907: EQUAL
13908: IFFALSE 13940
// soldiers_list = soldiers_list ^ UnitFilter ( [ Gensher ] , [ f_alive ] ) ;
13910: LD_ADDR_VAR 0 5
13914: PUSH
13915: LD_VAR 0 5
13919: PUSH
13920: LD_EXP 23
13924: PUSH
13925: EMPTY
13926: LIST
13927: PPUSH
13928: LD_INT 51
13930: PUSH
13931: EMPTY
13932: LIST
13933: PPUSH
13934: CALL_OW 72
13938: ADD
13939: ST_TO_ADDR
// DistributeHumansToBuildings ( base , soldiers_list ^ special_units , UnitFilter ( ai_armouries [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , false , 6 , true , true ) ;
13940: LD_VAR 0 7
13944: PPUSH
13945: LD_VAR 0 5
13949: PUSH
13950: LD_VAR 0 9
13954: ADD
13955: PPUSH
13956: LD_EXP 48
13960: PUSH
13961: LD_VAR 0 7
13965: ARRAY
13966: PPUSH
13967: LD_INT 50
13969: PUSH
13970: EMPTY
13971: LIST
13972: PUSH
13973: LD_INT 3
13975: PUSH
13976: LD_INT 57
13978: PUSH
13979: EMPTY
13980: LIST
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: CALL_OW 72
13994: PPUSH
13995: LD_INT 0
13997: PPUSH
13998: LD_INT 6
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 1
14006: PPUSH
14007: CALL 15267 0 7
// end ;
14011: GO 12628
14013: POP
14014: POP
// enable ;
14015: ENABLE
// end ;
14016: PPOPN 14
14018: END
// every 0 0$1 + 0 0$0.1 do var side , base , i , temp_list , un1 , temp_list_2 , temp_value , val ;
14019: GO 14021
14021: DISABLE
14022: LD_INT 0
14024: PPUSH
14025: PPUSH
14026: PPUSH
14027: PPUSH
14028: PPUSH
14029: PPUSH
14030: PPUSH
14031: PPUSH
// begin repeat wait ( 0 0$1 ) ;
14032: LD_INT 35
14034: PPUSH
14035: CALL_OW 67
// for base in ai_bases do
14039: LD_ADDR_VAR 0 2
14043: PUSH
14044: LD_EXP 58
14048: PUSH
14049: FOR_IN
14050: IFFALSE 14501
// begin if base in [ 1 , 2 ] then
14052: LD_VAR 0 2
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: LD_INT 2
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: IN
14067: IFFALSE 14071
// continue ;
14069: GO 14049
// side = GetBaseSide ( base ) ;
14071: LD_ADDR_VAR 0 1
14075: PUSH
14076: LD_VAR 0 2
14080: PPUSH
14081: CALL 12381 0 1
14085: ST_TO_ADDR
// for i in ai_soldiers [ base ] diff ai_heal_these_humans [ base ] do
14086: LD_ADDR_VAR 0 3
14090: PUSH
14091: LD_EXP 29
14095: PUSH
14096: LD_VAR 0 2
14100: ARRAY
14101: PUSH
14102: LD_EXP 43
14106: PUSH
14107: LD_VAR 0 2
14111: ARRAY
14112: DIFF
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14497
// if GetClass ( i ) = class_bazooker then
14117: LD_VAR 0 3
14121: PPUSH
14122: CALL_OW 257
14126: PUSH
14127: LD_INT 9
14129: EQUAL
14130: IFFALSE 14495
// begin temp_list = GetTaskList ( i ) ;
14132: LD_ADDR_VAR 0 4
14136: PUSH
14137: LD_VAR 0 3
14141: PPUSH
14142: CALL_OW 437
14146: ST_TO_ADDR
// if temp_list > 0 then
14147: LD_VAR 0 4
14151: PUSH
14152: LD_INT 0
14154: GREATER
14155: IFFALSE 14195
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
14157: LD_VAR 0 4
14161: PUSH
14162: LD_INT 1
14164: ARRAY
14165: PUSH
14166: LD_INT 1
14168: ARRAY
14169: PUSH
14170: LD_STRING &
14172: EQUAL
14173: PUSH
14174: LD_VAR 0 4
14178: PUSH
14179: LD_INT 1
14181: ARRAY
14182: PUSH
14183: LD_INT 1
14185: ARRAY
14186: PUSH
14187: LD_STRING %
14189: EQUAL
14190: OR
14191: IFFALSE 14195
// continue ;
14193: GO 14114
// un1 = Attacks ( i ) ;
14195: LD_ADDR_VAR 0 5
14199: PUSH
14200: LD_VAR 0 3
14204: PPUSH
14205: CALL_OW 320
14209: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
14210: LD_VAR 0 5
14214: PUSH
14215: LD_INT 0
14217: GREATER
14218: PUSH
14219: LD_VAR 0 5
14223: PUSH
14224: EMPTY
14225: LIST
14226: PPUSH
14227: CALL 40372 0 1
14231: PUSH
14232: LD_INT 0
14234: GREATER
14235: AND
14236: IFFALSE 14495
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
14238: LD_ADDR_VAR 0 6
14242: PUSH
14243: LD_VAR 0 5
14247: PPUSH
14248: CALL_OW 250
14252: PUSH
14253: LD_VAR 0 5
14257: PPUSH
14258: CALL_OW 251
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: ST_TO_ADDR
// temp_value = false ;
14267: LD_ADDR_VAR 0 7
14271: PUSH
14272: LD_INT 0
14274: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
14275: LD_ADDR_VAR 0 8
14279: PUSH
14280: LD_EXP 72
14284: PUSH
14285: LD_VAR 0 2
14289: ARRAY
14290: PUSH
14291: LD_EXP 73
14295: PUSH
14296: LD_VAR 0 2
14300: ARRAY
14301: ADD
14302: PUSH
14303: FOR_IN
14304: IFFALSE 14376
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
14306: LD_VAR 0 6
14310: PUSH
14311: LD_INT 1
14313: ARRAY
14314: PPUSH
14315: LD_VAR 0 6
14319: PUSH
14320: LD_INT 2
14322: ARRAY
14323: PPUSH
14324: LD_VAR 0 8
14328: PUSH
14329: LD_INT 1
14331: ARRAY
14332: PPUSH
14333: LD_VAR 0 8
14337: PUSH
14338: LD_INT 2
14340: ARRAY
14341: PPUSH
14342: CALL_OW 298
14346: PUSH
14347: LD_EXP 71
14351: PUSH
14352: LD_VAR 0 1
14356: ARRAY
14357: PUSH
14358: LD_INT 2
14360: ARRAY
14361: LESSEQUAL
14362: IFFALSE 14374
// begin temp_value = true ;
14364: LD_ADDR_VAR 0 7
14368: PUSH
14369: LD_INT 1
14371: ST_TO_ADDR
// break ;
14372: GO 14376
// end ;
14374: GO 14303
14376: POP
14377: POP
// if not temp_value then
14378: LD_VAR 0 7
14382: NOT
14383: IFFALSE 14495
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
14385: LD_VAR 0 3
14389: PPUSH
14390: LD_VAR 0 6
14394: PUSH
14395: LD_INT 1
14397: ARRAY
14398: PPUSH
14399: LD_VAR 0 6
14403: PUSH
14404: LD_INT 2
14406: ARRAY
14407: PPUSH
14408: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
14412: LD_ADDR_VAR 0 4
14416: PUSH
14417: LD_EXP 73
14421: PUSH
14422: LD_VAR 0 2
14426: ARRAY
14427: PPUSH
14428: LD_INT 1
14430: PPUSH
14431: LD_VAR 0 6
14435: PUSH
14436: LD_INT 1
14438: ARRAY
14439: PUSH
14440: LD_VAR 0 6
14444: PUSH
14445: LD_INT 2
14447: ARRAY
14448: PUSH
14449: LD_VAR 0 3
14453: PUSH
14454: LD_OWVAR 1
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: PPUSH
14465: CALL_OW 2
14469: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
14470: LD_ADDR_EXP 73
14474: PUSH
14475: LD_EXP 73
14479: PPUSH
14480: LD_VAR 0 2
14484: PPUSH
14485: LD_VAR 0 4
14489: PPUSH
14490: CALL_OW 1
14494: ST_TO_ADDR
// end ; end ; end ;
14495: GO 14114
14497: POP
14498: POP
// end ;
14499: GO 14049
14501: POP
14502: POP
// until false ;
14503: LD_INT 0
14505: IFFALSE 14032
// end ;
14507: PPOPN 8
14509: END
// every 0 0$1 + 0 0$0.2 do var base , i , temp_list , un1 , temp_list_2 , temp_value ; var shooting_delay ;
14510: GO 14512
14512: DISABLE
14513: LD_INT 0
14515: PPUSH
14516: PPUSH
14517: PPUSH
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
// begin shooting_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
14522: LD_ADDR_VAR 0 7
14526: PUSH
14527: LD_INT 0
14529: PUSH
14530: LD_INT 0
14532: PUSH
14533: LD_INT 0
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: ST_TO_ADDR
// if not yashin_alive then
14541: LD_EXP 85
14545: NOT
14546: IFFALSE 14550
// exit ;
14548: GO 15046
// repeat wait ( 0 0$1 ) ;
14550: LD_INT 35
14552: PPUSH
14553: CALL_OW 67
// for base in ai_bases do
14557: LD_ADDR_VAR 0 1
14561: PUSH
14562: LD_EXP 58
14566: PUSH
14567: FOR_IN
14568: IFFALSE 15040
// begin if base in [ 1 , 2 ] then
14570: LD_VAR 0 1
14574: PUSH
14575: LD_INT 1
14577: PUSH
14578: LD_INT 2
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: IN
14585: IFFALSE 14589
// continue ;
14587: GO 14567
// if shooting_delay [ base ] > 0 0$0 then
14589: LD_VAR 0 7
14593: PUSH
14594: LD_VAR 0 1
14598: ARRAY
14599: PUSH
14600: LD_INT 0
14602: GREATER
14603: IFFALSE 14642
// begin shooting_delay = Replace ( shooting_delay , base , shooting_delay [ base ] - 0 0$1 ) ;
14605: LD_ADDR_VAR 0 7
14609: PUSH
14610: LD_VAR 0 7
14614: PPUSH
14615: LD_VAR 0 1
14619: PPUSH
14620: LD_VAR 0 7
14624: PUSH
14625: LD_VAR 0 1
14629: ARRAY
14630: PUSH
14631: LD_INT 35
14633: MINUS
14634: PPUSH
14635: CALL_OW 1
14639: ST_TO_ADDR
// continue ;
14640: GO 14567
// end ; if Rand ( 1 , 15 ) > 1 then
14642: LD_INT 1
14644: PPUSH
14645: LD_INT 15
14647: PPUSH
14648: CALL_OW 12
14652: PUSH
14653: LD_INT 1
14655: GREATER
14656: IFFALSE 14660
// continue ;
14658: GO 14567
// temp_list = [ ] ;
14660: LD_ADDR_VAR 0 3
14664: PUSH
14665: EMPTY
14666: ST_TO_ADDR
// for i in ai_soldiers [ base ] diff ai_heal_these_humans [ base ] do
14667: LD_ADDR_VAR 0 2
14671: PUSH
14672: LD_EXP 29
14676: PUSH
14677: LD_VAR 0 1
14681: ARRAY
14682: PUSH
14683: LD_EXP 43
14687: PUSH
14688: LD_VAR 0 1
14692: ARRAY
14693: DIFF
14694: PUSH
14695: FOR_IN
14696: IFFALSE 14739
// if IsInUnit ( i ) in ai_armouries [ base ] then
14698: LD_VAR 0 2
14702: PPUSH
14703: CALL_OW 310
14707: PUSH
14708: LD_EXP 48
14712: PUSH
14713: LD_VAR 0 1
14717: ARRAY
14718: IN
14719: IFFALSE 14737
// temp_list = temp_list ^ i ;
14721: LD_ADDR_VAR 0 3
14725: PUSH
14726: LD_VAR 0 3
14730: PUSH
14731: LD_VAR 0 2
14735: ADD
14736: ST_TO_ADDR
14737: GO 14695
14739: POP
14740: POP
// for i in temp_list do
14741: LD_ADDR_VAR 0 2
14745: PUSH
14746: LD_VAR 0 3
14750: PUSH
14751: FOR_IN
14752: IFFALSE 15036
// if GetClass ( i ) = class_bazooker then
14754: LD_VAR 0 2
14758: PPUSH
14759: CALL_OW 257
14763: PUSH
14764: LD_INT 9
14766: EQUAL
14767: IFFALSE 15034
// begin temp_list = GetTaskList ( i ) ;
14769: LD_ADDR_VAR 0 3
14773: PUSH
14774: LD_VAR 0 2
14778: PPUSH
14779: CALL_OW 437
14783: ST_TO_ADDR
// if temp_list > 0 then
14784: LD_VAR 0 3
14788: PUSH
14789: LD_INT 0
14791: GREATER
14792: IFFALSE 14832
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
14794: LD_VAR 0 3
14798: PUSH
14799: LD_INT 1
14801: ARRAY
14802: PUSH
14803: LD_INT 1
14805: ARRAY
14806: PUSH
14807: LD_STRING &
14809: EQUAL
14810: PUSH
14811: LD_VAR 0 3
14815: PUSH
14816: LD_INT 1
14818: ARRAY
14819: PUSH
14820: LD_INT 1
14822: ARRAY
14823: PUSH
14824: LD_STRING %
14826: EQUAL
14827: OR
14828: IFFALSE 14832
// continue ;
14830: GO 14751
// un1 = Attacks ( i ) ;
14832: LD_ADDR_VAR 0 4
14836: PUSH
14837: LD_VAR 0 2
14841: PPUSH
14842: CALL_OW 320
14846: ST_TO_ADDR
// if un1 > 0 and not IsInArea ( un1 , GetBaseArea ( base ) ) then
14847: LD_VAR 0 4
14851: PUSH
14852: LD_INT 0
14854: GREATER
14855: PUSH
14856: LD_VAR 0 4
14860: PPUSH
14861: LD_VAR 0 1
14865: PPUSH
14866: CALL 12310 0 1
14870: PPUSH
14871: CALL_OW 308
14875: NOT
14876: AND
14877: IFFALSE 15034
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
14879: LD_ADDR_VAR 0 5
14883: PUSH
14884: LD_VAR 0 4
14888: PPUSH
14889: CALL_OW 250
14893: PUSH
14894: LD_VAR 0 4
14898: PPUSH
14899: CALL_OW 251
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: ST_TO_ADDR
// temp_value = AI_GetTurnDirection ( GetX ( i ) , GetY ( i ) , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
14908: LD_ADDR_VAR 0 6
14912: PUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 250
14922: PPUSH
14923: LD_VAR 0 2
14927: PPUSH
14928: CALL_OW 251
14932: PPUSH
14933: LD_VAR 0 5
14937: PUSH
14938: LD_INT 1
14940: ARRAY
14941: PPUSH
14942: LD_VAR 0 5
14946: PUSH
14947: LD_INT 2
14949: ARRAY
14950: PPUSH
14951: CALL 15049 0 4
14955: ST_TO_ADDR
// ComSpaceShift ( i , ShiftX ( temp_list_2 [ 1 ] , temp_value , 1 ) , ShiftY ( temp_list_2 [ 2 ] , temp_value , 1 ) ) ;
14956: LD_VAR 0 2
14960: PPUSH
14961: LD_VAR 0 5
14965: PUSH
14966: LD_INT 1
14968: ARRAY
14969: PPUSH
14970: LD_VAR 0 6
14974: PPUSH
14975: LD_INT 1
14977: PPUSH
14978: CALL_OW 272
14982: PPUSH
14983: LD_VAR 0 5
14987: PUSH
14988: LD_INT 2
14990: ARRAY
14991: PPUSH
14992: LD_VAR 0 6
14996: PPUSH
14997: LD_INT 1
14999: PPUSH
15000: CALL_OW 273
15004: PPUSH
15005: CALL_OW 153
// shooting_delay = Replace ( shooting_delay , base , 0 0$5 ) ;
15009: LD_ADDR_VAR 0 7
15013: PUSH
15014: LD_VAR 0 7
15018: PPUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: LD_INT 175
15026: PPUSH
15027: CALL_OW 1
15031: ST_TO_ADDR
// break ;
15032: GO 15036
// end ; end ;
15034: GO 14751
15036: POP
15037: POP
// end ;
15038: GO 14567
15040: POP
15041: POP
// until false ;
15042: LD_INT 0
15044: IFFALSE 14550
// end ;
15046: PPOPN 7
15048: END
// function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
15049: LD_INT 0
15051: PPUSH
15052: PPUSH
15053: PPUSH
15054: PPUSH
15055: PPUSH
15056: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
15057: LD_VAR 0 1
15061: PPUSH
15062: LD_VAR 0 2
15066: PPUSH
15067: CALL_OW 488
15071: NOT
15072: PUSH
15073: LD_VAR 0 3
15077: PPUSH
15078: LD_VAR 0 4
15082: PPUSH
15083: CALL_OW 488
15087: NOT
15088: OR
15089: IFFALSE 15102
// begin result = - 1 ;
15091: LD_ADDR_VAR 0 5
15095: PUSH
15096: LD_INT 1
15098: NEG
15099: ST_TO_ADDR
// exit ;
15100: GO 15262
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
15102: LD_ADDR_VAR 0 6
15106: PUSH
15107: LD_VAR 0 1
15111: PPUSH
15112: LD_VAR 0 2
15116: PPUSH
15117: LD_VAR 0 3
15121: PPUSH
15122: LD_VAR 0 4
15126: PPUSH
15127: CALL_OW 298
15131: ST_TO_ADDR
// dist_2 = 99999 ;
15132: LD_ADDR_VAR 0 7
15136: PUSH
15137: LD_INT 99999
15139: ST_TO_ADDR
// for b = 0 to 5 do
15140: LD_ADDR_VAR 0 8
15144: PUSH
15145: DOUBLE
15146: LD_INT 0
15148: DEC
15149: ST_TO_ADDR
15150: LD_INT 5
15152: PUSH
15153: FOR_TO
15154: IFFALSE 15250
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
15156: LD_ADDR_VAR 0 9
15160: PUSH
15161: LD_VAR 0 1
15165: PPUSH
15166: LD_VAR 0 8
15170: PPUSH
15171: LD_VAR 0 6
15175: PPUSH
15176: CALL_OW 272
15180: PPUSH
15181: LD_VAR 0 2
15185: PPUSH
15186: LD_VAR 0 8
15190: PPUSH
15191: LD_VAR 0 6
15195: PPUSH
15196: CALL_OW 273
15200: PPUSH
15201: LD_VAR 0 3
15205: PPUSH
15206: LD_VAR 0 4
15210: PPUSH
15211: CALL_OW 298
15215: ST_TO_ADDR
// if temp_dist < dist_2 then
15216: LD_VAR 0 9
15220: PUSH
15221: LD_VAR 0 7
15225: LESS
15226: IFFALSE 15248
// begin dist_2 = temp_dist ;
15228: LD_ADDR_VAR 0 7
15232: PUSH
15233: LD_VAR 0 9
15237: ST_TO_ADDR
// dir = b ;
15238: LD_ADDR_VAR 0 10
15242: PUSH
15243: LD_VAR 0 8
15247: ST_TO_ADDR
// end ; end ;
15248: GO 15153
15250: POP
15251: POP
// result = dir ;
15252: LD_ADDR_VAR 0 5
15256: PUSH
15257: LD_VAR 0 10
15261: ST_TO_ADDR
// end ;
15262: LD_VAR 0 5
15266: RET
// function DistributeHumansToBuildings ( base , human_list , building_list , change_to_this_class , building_capacity , help_building , aggressive_pullback ) ; var i , temp_list , val , temp_unit , area , special_un_count , counter , k , under_attack ; begin
15267: LD_INT 0
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
// if human_list = 0 then
15279: LD_VAR 0 2
15283: PUSH
15284: LD_INT 0
15286: EQUAL
15287: IFFALSE 15291
// exit ;
15289: GO 16569
// area = GetBaseArea ( base ) ;
15291: LD_ADDR_VAR 0 13
15295: PUSH
15296: LD_VAR 0 1
15300: PPUSH
15301: CALL 12310 0 1
15305: ST_TO_ADDR
// under_attack = BaseUnderAttack ( base , - 1 ) ;
15306: LD_ADDR_VAR 0 17
15310: PUSH
15311: LD_VAR 0 1
15315: PPUSH
15316: LD_INT 1
15318: NEG
15319: PPUSH
15320: CALL 23301 0 2
15324: ST_TO_ADDR
// if not GetClass ( human_list [ 1 ] ) in [ class_engineer , class_apeman_engineer , class_mechanic , class_scientistic ] and building_list > 0 then
15325: LD_VAR 0 2
15329: PUSH
15330: LD_INT 1
15332: ARRAY
15333: PPUSH
15334: CALL_OW 257
15338: PUSH
15339: LD_INT 2
15341: PUSH
15342: LD_INT 16
15344: PUSH
15345: LD_INT 3
15347: PUSH
15348: LD_INT 4
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: IN
15357: NOT
15358: PUSH
15359: LD_VAR 0 3
15363: PUSH
15364: LD_INT 0
15366: GREATER
15367: AND
15368: IFFALSE 15457
// begin val = 0 ;
15370: LD_ADDR_VAR 0 11
15374: PUSH
15375: LD_INT 0
15377: ST_TO_ADDR
// for i in human_list do
15378: LD_ADDR_VAR 0 9
15382: PUSH
15383: LD_VAR 0 2
15387: PUSH
15388: FOR_IN
15389: IFFALSE 15433
// if GetClass ( i ) in [ class_sniper , class_mortar , class_bazooker ] then
15391: LD_VAR 0 9
15395: PPUSH
15396: CALL_OW 257
15400: PUSH
15401: LD_INT 5
15403: PUSH
15404: LD_INT 8
15406: PUSH
15407: LD_INT 9
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: IN
15415: IFFALSE 15431
// val = val + 1 ;
15417: LD_ADDR_VAR 0 11
15421: PUSH
15422: LD_VAR 0 11
15426: PUSH
15427: LD_INT 1
15429: PLUS
15430: ST_TO_ADDR
15431: GO 15388
15433: POP
15434: POP
// special_un_count = val div ( building_list + 0 ) ;
15435: LD_ADDR_VAR 0 14
15439: PUSH
15440: LD_VAR 0 11
15444: PUSH
15445: LD_VAR 0 3
15449: PUSH
15450: LD_INT 0
15452: PLUS
15453: DIV
15454: ST_TO_ADDR
// end else
15455: GO 15465
// special_un_count = 0 ;
15457: LD_ADDR_VAR 0 14
15461: PUSH
15462: LD_INT 0
15464: ST_TO_ADDR
// val = building_list + 0 ;
15465: LD_ADDR_VAR 0 11
15469: PUSH
15470: LD_VAR 0 3
15474: PUSH
15475: LD_INT 0
15477: PLUS
15478: ST_TO_ADDR
// while val > 0 and human_list > 0 do
15479: LD_VAR 0 11
15483: PUSH
15484: LD_INT 0
15486: GREATER
15487: PUSH
15488: LD_VAR 0 2
15492: PUSH
15493: LD_INT 0
15495: GREATER
15496: AND
15497: IFFALSE 16303
// begin temp_list = [ ] ;
15499: LD_ADDR_VAR 0 10
15503: PUSH
15504: EMPTY
15505: ST_TO_ADDR
// for i in human_list do
15506: LD_ADDR_VAR 0 9
15510: PUSH
15511: LD_VAR 0 2
15515: PUSH
15516: FOR_IN
15517: IFFALSE 15560
// if IsInUnit ( i ) = building_list [ val ] then
15519: LD_VAR 0 9
15523: PPUSH
15524: CALL_OW 310
15528: PUSH
15529: LD_VAR 0 3
15533: PUSH
15534: LD_VAR 0 11
15538: ARRAY
15539: EQUAL
15540: IFFALSE 15558
// temp_list = temp_list ^ i ;
15542: LD_ADDR_VAR 0 10
15546: PUSH
15547: LD_VAR 0 10
15551: PUSH
15552: LD_VAR 0 9
15556: ADD
15557: ST_TO_ADDR
15558: GO 15516
15560: POP
15561: POP
// human_list = temp_list ^ ( human_list diff temp_list ) ;
15562: LD_ADDR_VAR 0 2
15566: PUSH
15567: LD_VAR 0 10
15571: PUSH
15572: LD_VAR 0 2
15576: PUSH
15577: LD_VAR 0 10
15581: DIFF
15582: ADD
15583: ST_TO_ADDR
// counter = 0 ;
15584: LD_ADDR_VAR 0 15
15588: PUSH
15589: LD_INT 0
15591: ST_TO_ADDR
// temp_list = [ ] ;
15592: LD_ADDR_VAR 0 10
15596: PUSH
15597: EMPTY
15598: ST_TO_ADDR
// for i = 1 to human_list div val do
15599: LD_ADDR_VAR 0 9
15603: PUSH
15604: DOUBLE
15605: LD_INT 1
15607: DEC
15608: ST_TO_ADDR
15609: LD_VAR 0 2
15613: PUSH
15614: LD_VAR 0 11
15618: DIV
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15986
// begin if i > building_capacity then
15623: LD_VAR 0 9
15627: PUSH
15628: LD_VAR 0 5
15632: GREATER
15633: IFFALSE 15637
// break ;
15635: GO 15986
// if special_un_count = 0 then
15637: LD_VAR 0 14
15641: PUSH
15642: LD_INT 0
15644: EQUAL
15645: IFFALSE 15687
// begin temp_list = temp_list ^ human_list [ 1 ] ;
15647: LD_ADDR_VAR 0 10
15651: PUSH
15652: LD_VAR 0 10
15656: PUSH
15657: LD_VAR 0 2
15661: PUSH
15662: LD_INT 1
15664: ARRAY
15665: ADD
15666: ST_TO_ADDR
// human_list = Delete ( human_list , 1 ) ;
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: LD_VAR 0 2
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 3
15684: ST_TO_ADDR
// end else
15685: GO 15984
// if counter = special_un_count then
15687: LD_VAR 0 15
15691: PUSH
15692: LD_VAR 0 14
15696: EQUAL
15697: IFFALSE 15836
// begin temp_unit = 0 ;
15699: LD_ADDR_VAR 0 12
15703: PUSH
15704: LD_INT 0
15706: ST_TO_ADDR
// for k = 1 to human_list do
15707: LD_ADDR_VAR 0 16
15711: PUSH
15712: DOUBLE
15713: LD_INT 1
15715: DEC
15716: ST_TO_ADDR
15717: LD_VAR 0 2
15721: PUSH
15722: FOR_TO
15723: IFFALSE 15772
// if not GetClass ( human_list [ k ] ) in [ class_sniper , class_mortar , class_bazooker ] then
15725: LD_VAR 0 2
15729: PUSH
15730: LD_VAR 0 16
15734: ARRAY
15735: PPUSH
15736: CALL_OW 257
15740: PUSH
15741: LD_INT 5
15743: PUSH
15744: LD_INT 8
15746: PUSH
15747: LD_INT 9
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: IN
15755: NOT
15756: IFFALSE 15770
// begin temp_unit = k ;
15758: LD_ADDR_VAR 0 12
15762: PUSH
15763: LD_VAR 0 16
15767: ST_TO_ADDR
// break ;
15768: GO 15772
// end ;
15770: GO 15722
15772: POP
15773: POP
// if temp_unit = 0 then
15774: LD_VAR 0 12
15778: PUSH
15779: LD_INT 0
15781: EQUAL
15782: IFFALSE 15792
// temp_unit = 1 ;
15784: LD_ADDR_VAR 0 12
15788: PUSH
15789: LD_INT 1
15791: ST_TO_ADDR
// temp_list = temp_list ^ human_list [ temp_unit ] ;
15792: LD_ADDR_VAR 0 10
15796: PUSH
15797: LD_VAR 0 10
15801: PUSH
15802: LD_VAR 0 2
15806: PUSH
15807: LD_VAR 0 12
15811: ARRAY
15812: ADD
15813: ST_TO_ADDR
// human_list = Delete ( human_list , temp_unit ) ;
15814: LD_ADDR_VAR 0 2
15818: PUSH
15819: LD_VAR 0 2
15823: PPUSH
15824: LD_VAR 0 12
15828: PPUSH
15829: CALL_OW 3
15833: ST_TO_ADDR
// end else
15834: GO 15984
// begin counter = counter + 1 ;
15836: LD_ADDR_VAR 0 15
15840: PUSH
15841: LD_VAR 0 15
15845: PUSH
15846: LD_INT 1
15848: PLUS
15849: ST_TO_ADDR
// temp_unit = 0 ;
15850: LD_ADDR_VAR 0 12
15854: PUSH
15855: LD_INT 0
15857: ST_TO_ADDR
// for k = 1 to human_list do
15858: LD_ADDR_VAR 0 16
15862: PUSH
15863: DOUBLE
15864: LD_INT 1
15866: DEC
15867: ST_TO_ADDR
15868: LD_VAR 0 2
15872: PUSH
15873: FOR_TO
15874: IFFALSE 15922
// if GetClass ( human_list [ k ] ) in [ class_sniper , class_mortar , class_bazooker ] then
15876: LD_VAR 0 2
15880: PUSH
15881: LD_VAR 0 16
15885: ARRAY
15886: PPUSH
15887: CALL_OW 257
15891: PUSH
15892: LD_INT 5
15894: PUSH
15895: LD_INT 8
15897: PUSH
15898: LD_INT 9
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: LIST
15905: IN
15906: IFFALSE 15920
// begin temp_unit = k ;
15908: LD_ADDR_VAR 0 12
15912: PUSH
15913: LD_VAR 0 16
15917: ST_TO_ADDR
// break ;
15918: GO 15922
// end ;
15920: GO 15873
15922: POP
15923: POP
// if temp_unit = 0 then
15924: LD_VAR 0 12
15928: PUSH
15929: LD_INT 0
15931: EQUAL
15932: IFFALSE 15942
// temp_unit = 1 ;
15934: LD_ADDR_VAR 0 12
15938: PUSH
15939: LD_INT 1
15941: ST_TO_ADDR
// temp_list = temp_list ^ human_list [ temp_unit ] ;
15942: LD_ADDR_VAR 0 10
15946: PUSH
15947: LD_VAR 0 10
15951: PUSH
15952: LD_VAR 0 2
15956: PUSH
15957: LD_VAR 0 12
15961: ARRAY
15962: ADD
15963: ST_TO_ADDR
// human_list = Delete ( human_list , temp_unit ) ;
15964: LD_ADDR_VAR 0 2
15968: PUSH
15969: LD_VAR 0 2
15973: PPUSH
15974: LD_VAR 0 12
15978: PPUSH
15979: CALL_OW 3
15983: ST_TO_ADDR
// end ; end ;
15984: GO 15620
15986: POP
15987: POP
// for i in temp_list do
15988: LD_ADDR_VAR 0 9
15992: PUSH
15993: LD_VAR 0 10
15997: PUSH
15998: FOR_IN
15999: IFFALSE 16285
// begin temp_unit = IsInUnit ( i ) ;
16001: LD_ADDR_VAR 0 12
16005: PUSH
16006: LD_VAR 0 9
16010: PPUSH
16011: CALL_OW 310
16015: ST_TO_ADDR
// if temp_unit <> building_list [ val ] then
16016: LD_VAR 0 12
16020: PUSH
16021: LD_VAR 0 3
16025: PUSH
16026: LD_VAR 0 11
16030: ARRAY
16031: NONEQUAL
16032: IFFALSE 16283
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
16034: LD_VAR 0 9
16038: PPUSH
16039: CALL_OW 310
16043: PPUSH
16044: CALL_OW 247
16048: PUSH
16049: LD_INT 2
16051: DOUBLE
16052: EQUAL
16053: IFTRUE 16057
16055: GO 16069
16057: POP
// ComExitVehicle ( i ) ; unit_building :
16058: LD_VAR 0 9
16062: PPUSH
16063: CALL_OW 121
16067: GO 16283
16069: LD_INT 3
16071: DOUBLE
16072: EQUAL
16073: IFTRUE 16077
16075: GO 16089
16077: POP
// ComExitBuilding ( i ) ; else
16078: LD_VAR 0 9
16082: PPUSH
16083: CALL_OW 122
16087: GO 16283
16089: POP
// begin if IsInArea ( i , area ) or not aggressive_pullback then
16090: LD_VAR 0 9
16094: PPUSH
16095: LD_VAR 0 13
16099: PPUSH
16100: CALL_OW 308
16104: PUSH
16105: LD_VAR 0 7
16109: NOT
16110: OR
16111: IFFALSE 16135
// ComEnterUnit ( i , building_list [ val ] ) else
16113: LD_VAR 0 9
16117: PPUSH
16118: LD_VAR 0 3
16122: PUSH
16123: LD_VAR 0 11
16127: ARRAY
16128: PPUSH
16129: CALL_OW 120
16133: GO 16176
// ComAgressiveMove ( i , GetX ( building_list [ val ] ) , GetY ( building_list [ val ] ) ) ;
16135: LD_VAR 0 9
16139: PPUSH
16140: LD_VAR 0 3
16144: PUSH
16145: LD_VAR 0 11
16149: ARRAY
16150: PPUSH
16151: CALL_OW 250
16155: PPUSH
16156: LD_VAR 0 3
16160: PUSH
16161: LD_VAR 0 11
16165: ARRAY
16166: PPUSH
16167: CALL_OW 251
16171: PPUSH
16172: CALL_OW 114
// if change_to_this_class > 0 then
16176: LD_VAR 0 4
16180: PUSH
16181: LD_INT 0
16183: GREATER
16184: IFFALSE 16283
// begin if GetClass ( i ) <> change_to_this_class and GetNation ( i ) <> nation_nature then
16186: LD_VAR 0 9
16190: PPUSH
16191: CALL_OW 257
16195: PUSH
16196: LD_VAR 0 4
16200: NONEQUAL
16201: PUSH
16202: LD_VAR 0 9
16206: PPUSH
16207: CALL_OW 248
16211: PUSH
16212: LD_INT 0
16214: NONEQUAL
16215: AND
16216: IFFALSE 16283
// if not ( change_to_this_class in [ class_sniper , class_mortar , class_bazooker ] and not GetBType ( building_list [ val ] ) in [ b_barracks , b_fort ] ) then
16218: LD_VAR 0 4
16222: PUSH
16223: LD_INT 5
16225: PUSH
16226: LD_INT 8
16228: PUSH
16229: LD_INT 9
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: LIST
16236: IN
16237: PUSH
16238: LD_VAR 0 3
16242: PUSH
16243: LD_VAR 0 11
16247: ARRAY
16248: PPUSH
16249: CALL_OW 266
16253: PUSH
16254: LD_INT 5
16256: PUSH
16257: LD_INT 35
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: IN
16264: NOT
16265: AND
16266: NOT
16267: IFFALSE 16283
// AddComChangeProfession ( i , change_to_this_class ) ;
16269: LD_VAR 0 9
16273: PPUSH
16274: LD_VAR 0 4
16278: PPUSH
16279: CALL_OW 183
// end ; end ; end ; end ;
16283: GO 15998
16285: POP
16286: POP
// val = val - 1 ;
16287: LD_ADDR_VAR 0 11
16291: PUSH
16292: LD_VAR 0 11
16296: PUSH
16297: LD_INT 1
16299: MINUS
16300: ST_TO_ADDR
// end ;
16301: GO 15479
// if human_list > 0 then
16303: LD_VAR 0 2
16307: PUSH
16308: LD_INT 0
16310: GREATER
16311: IFFALSE 16569
// if ai_building_under_construction [ base ] > 0 and help_building and not under_attack then
16313: LD_EXP 42
16317: PUSH
16318: LD_VAR 0 1
16322: ARRAY
16323: PUSH
16324: LD_INT 0
16326: GREATER
16327: PUSH
16328: LD_VAR 0 6
16332: AND
16333: PUSH
16334: LD_VAR 0 17
16338: NOT
16339: AND
16340: IFFALSE 16416
// begin for i in GetHumansOutOfUnits ( human_list ) do
16342: LD_ADDR_VAR 0 9
16346: PUSH
16347: LD_VAR 0 2
16351: PPUSH
16352: CALL 23196 0 1
16356: PUSH
16357: FOR_IN
16358: IFFALSE 16412
// SetTaskList ( i , [ [ h , 0 , 0 , ai_building_under_construction [ base ] , 0 , 0 , 0 ] ] ) ;
16360: LD_VAR 0 9
16364: PPUSH
16365: LD_STRING h
16367: PUSH
16368: LD_INT 0
16370: PUSH
16371: LD_INT 0
16373: PUSH
16374: LD_EXP 42
16378: PUSH
16379: LD_VAR 0 1
16383: ARRAY
16384: PUSH
16385: LD_INT 0
16387: PUSH
16388: LD_INT 0
16390: PUSH
16391: LD_INT 0
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: PUSH
16403: EMPTY
16404: LIST
16405: PPUSH
16406: CALL_OW 446
16410: GO 16357
16412: POP
16413: POP
// end else
16414: GO 16569
// for i in GetHumansOutOfUnits ( human_list ) do
16416: LD_ADDR_VAR 0 9
16420: PUSH
16421: LD_VAR 0 2
16425: PPUSH
16426: CALL 23196 0 1
16430: PUSH
16431: FOR_IN
16432: IFFALSE 16567
// if GetDistUnitXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 4 then
16434: LD_VAR 0 9
16438: PPUSH
16439: LD_EXP 41
16443: PUSH
16444: LD_VAR 0 1
16448: ARRAY
16449: PUSH
16450: LD_INT 1
16452: ARRAY
16453: PPUSH
16454: LD_EXP 41
16458: PUSH
16459: LD_VAR 0 1
16463: ARRAY
16464: PUSH
16465: LD_INT 2
16467: ARRAY
16468: PPUSH
16469: CALL_OW 297
16473: PUSH
16474: LD_INT 4
16476: GREATER
16477: IFFALSE 16565
// if aggressive_pullback then
16479: LD_VAR 0 7
16483: IFFALSE 16526
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) else
16485: LD_VAR 0 9
16489: PPUSH
16490: LD_EXP 41
16494: PUSH
16495: LD_VAR 0 1
16499: ARRAY
16500: PUSH
16501: LD_INT 1
16503: ARRAY
16504: PPUSH
16505: LD_EXP 41
16509: PUSH
16510: LD_VAR 0 1
16514: ARRAY
16515: PUSH
16516: LD_INT 2
16518: ARRAY
16519: PPUSH
16520: CALL_OW 114
16524: GO 16565
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
16526: LD_VAR 0 9
16530: PPUSH
16531: LD_EXP 41
16535: PUSH
16536: LD_VAR 0 1
16540: ARRAY
16541: PUSH
16542: LD_INT 1
16544: ARRAY
16545: PPUSH
16546: LD_EXP 41
16550: PUSH
16551: LD_VAR 0 1
16555: ARRAY
16556: PUSH
16557: LD_INT 2
16559: ARRAY
16560: PPUSH
16561: CALL_OW 111
16565: GO 16431
16567: POP
16568: POP
// end ;
16569: LD_VAR 0 8
16573: RET
// every 0 0$1 do var side , i , engineers_list , temp_list , buildings_list , temp_unit , away_dist , temp_list_2 , base , apemen_engineers_list ; var humans_list , crane_usable , b_value , k ; var crane_being_repaired ;
16574: GO 16576
16576: DISABLE
16577: LD_INT 0
16579: PPUSH
16580: PPUSH
16581: PPUSH
16582: PPUSH
16583: PPUSH
16584: PPUSH
16585: PPUSH
16586: PPUSH
16587: PPUSH
16588: PPUSH
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
// begin crane_being_repaired = false ;
16594: LD_ADDR_VAR 0 15
16598: PUSH
16599: LD_INT 0
16601: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16602: LD_INT 35
16604: PPUSH
16605: CALL_OW 67
// for base in ai_bases do
16609: LD_ADDR_VAR 0 9
16613: PUSH
16614: LD_EXP 58
16618: PUSH
16619: FOR_IN
16620: IFFALSE 21854
// begin side = GetBaseSide ( base ) ;
16622: LD_ADDR_VAR 0 1
16626: PUSH
16627: LD_VAR 0 9
16631: PPUSH
16632: CALL 12381 0 1
16636: ST_TO_ADDR
// engineers_list = ai_engineers [ base ] diff ai_heal_these_humans [ base ] ;
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: LD_EXP 30
16646: PUSH
16647: LD_VAR 0 9
16651: ARRAY
16652: PUSH
16653: LD_EXP 43
16657: PUSH
16658: LD_VAR 0 9
16662: ARRAY
16663: DIFF
16664: ST_TO_ADDR
// apemen_engineers_list = ai_apemen_engineers [ base ] diff ai_heal_these_humans [ base ] ;
16665: LD_ADDR_VAR 0 10
16669: PUSH
16670: LD_EXP 62
16674: PUSH
16675: LD_VAR 0 9
16679: ARRAY
16680: PUSH
16681: LD_EXP 43
16685: PUSH
16686: LD_VAR 0 9
16690: ARRAY
16691: DIFF
16692: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
16693: LD_ADDR_VAR 0 4
16697: PUSH
16698: LD_EXP 43
16702: PUSH
16703: LD_VAR 0 9
16707: ARRAY
16708: ST_TO_ADDR
// humans_list = engineers_list ^ apemen_engineers_list ;
16709: LD_ADDR_VAR 0 11
16713: PUSH
16714: LD_VAR 0 3
16718: PUSH
16719: LD_VAR 0 10
16723: ADD
16724: ST_TO_ADDR
// i = 1 ;
16725: LD_ADDR_VAR 0 2
16729: PUSH
16730: LD_INT 1
16732: ST_TO_ADDR
// while i <= humans_list do
16733: LD_VAR 0 2
16737: PUSH
16738: LD_VAR 0 11
16742: LESSEQUAL
16743: IFFALSE 16882
// begin if GetLives ( humans_list [ i ] ) <= 700 then
16745: LD_VAR 0 11
16749: PUSH
16750: LD_VAR 0 2
16754: ARRAY
16755: PPUSH
16756: CALL_OW 256
16760: PUSH
16761: LD_INT 700
16763: LESSEQUAL
16764: IFFALSE 16866
// begin temp_list = temp_list ^ humans_list [ i ] ;
16766: LD_ADDR_VAR 0 4
16770: PUSH
16771: LD_VAR 0 4
16775: PUSH
16776: LD_VAR 0 11
16780: PUSH
16781: LD_VAR 0 2
16785: ARRAY
16786: ADD
16787: ST_TO_ADDR
// engineers_list = engineers_list diff humans_list [ i ] ;
16788: LD_ADDR_VAR 0 3
16792: PUSH
16793: LD_VAR 0 3
16797: PUSH
16798: LD_VAR 0 11
16802: PUSH
16803: LD_VAR 0 2
16807: ARRAY
16808: DIFF
16809: ST_TO_ADDR
// apemen_engineers_list = apemen_engineers_list diff humans_list [ i ] ;
16810: LD_ADDR_VAR 0 10
16814: PUSH
16815: LD_VAR 0 10
16819: PUSH
16820: LD_VAR 0 11
16824: PUSH
16825: LD_VAR 0 2
16829: ARRAY
16830: DIFF
16831: ST_TO_ADDR
// humans_list = Delete ( humans_list , i ) ;
16832: LD_ADDR_VAR 0 11
16836: PUSH
16837: LD_VAR 0 11
16841: PPUSH
16842: LD_VAR 0 2
16846: PPUSH
16847: CALL_OW 3
16851: ST_TO_ADDR
// i = i - 1 ;
16852: LD_ADDR_VAR 0 2
16856: PUSH
16857: LD_VAR 0 2
16861: PUSH
16862: LD_INT 1
16864: MINUS
16865: ST_TO_ADDR
// end ; i = i + 1 ;
16866: LD_ADDR_VAR 0 2
16870: PUSH
16871: LD_VAR 0 2
16875: PUSH
16876: LD_INT 1
16878: PLUS
16879: ST_TO_ADDR
// end ;
16880: GO 16733
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
16882: LD_ADDR_EXP 43
16886: PUSH
16887: LD_EXP 43
16891: PPUSH
16892: LD_VAR 0 9
16896: PPUSH
16897: LD_VAR 0 4
16901: PPUSH
16902: CALL_OW 1
16906: ST_TO_ADDR
// crane_usable = false ;
16907: LD_ADDR_VAR 0 12
16911: PUSH
16912: LD_INT 0
16914: ST_TO_ADDR
// if ai_crane [ base ] > 0 then
16915: LD_EXP 70
16919: PUSH
16920: LD_VAR 0 9
16924: ARRAY
16925: PUSH
16926: LD_INT 0
16928: GREATER
16929: IFFALSE 17101
// if GetLives ( ai_crane [ base ] ) <= 500 or ( crane_being_repaired and GetLives ( ai_crane [ base ] ) < 1000 ) then
16931: LD_EXP 70
16935: PUSH
16936: LD_VAR 0 9
16940: ARRAY
16941: PPUSH
16942: CALL_OW 256
16946: PUSH
16947: LD_INT 500
16949: LESSEQUAL
16950: PUSH
16951: LD_VAR 0 15
16955: PUSH
16956: LD_EXP 70
16960: PUSH
16961: LD_VAR 0 9
16965: ARRAY
16966: PPUSH
16967: CALL_OW 256
16971: PUSH
16972: LD_INT 1000
16974: LESS
16975: AND
16976: OR
16977: IFFALSE 17085
// begin crane_being_repaired = true ;
16979: LD_ADDR_VAR 0 15
16983: PUSH
16984: LD_INT 1
16986: ST_TO_ADDR
// if GetDistUnitXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 6 then
16987: LD_EXP 70
16991: PUSH
16992: LD_VAR 0 9
16996: ARRAY
16997: PPUSH
16998: LD_EXP 41
17002: PUSH
17003: LD_VAR 0 9
17007: ARRAY
17008: PUSH
17009: LD_INT 1
17011: ARRAY
17012: PPUSH
17013: LD_EXP 41
17017: PUSH
17018: LD_VAR 0 9
17022: ARRAY
17023: PUSH
17024: LD_INT 2
17026: ARRAY
17027: PPUSH
17028: CALL_OW 297
17032: PUSH
17033: LD_INT 6
17035: GREATER
17036: IFFALSE 17083
// ComMoveXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
17038: LD_EXP 70
17042: PUSH
17043: LD_VAR 0 9
17047: ARRAY
17048: PPUSH
17049: LD_EXP 41
17053: PUSH
17054: LD_VAR 0 9
17058: ARRAY
17059: PUSH
17060: LD_INT 1
17062: ARRAY
17063: PPUSH
17064: LD_EXP 41
17068: PUSH
17069: LD_VAR 0 9
17073: ARRAY
17074: PUSH
17075: LD_INT 2
17077: ARRAY
17078: PPUSH
17079: CALL_OW 111
// end else
17083: GO 17101
// begin crane_usable = true ;
17085: LD_ADDR_VAR 0 12
17089: PUSH
17090: LD_INT 1
17092: ST_TO_ADDR
// crane_being_repaired = false ;
17093: LD_ADDR_VAR 0 15
17097: PUSH
17098: LD_INT 0
17100: ST_TO_ADDR
// end ; if engineers_list = 0 and apemen_engineers_list = 0 and not crane_usable then
17101: LD_VAR 0 3
17105: PUSH
17106: LD_INT 0
17108: EQUAL
17109: PUSH
17110: LD_VAR 0 10
17114: PUSH
17115: LD_INT 0
17117: EQUAL
17118: AND
17119: PUSH
17120: LD_VAR 0 12
17124: NOT
17125: AND
17126: IFFALSE 17130
// continue ;
17128: GO 16619
// temp_list_2 = UnitFilter ( engineers_list , [ f_class , class_engineer ] ) ;
17130: LD_ADDR_VAR 0 8
17134: PUSH
17135: LD_VAR 0 3
17139: PPUSH
17140: LD_INT 25
17142: PUSH
17143: LD_INT 2
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 72
17154: ST_TO_ADDR
// if ai_captured_buildings [ base ] > 0 and temp_list_2 > 0 then
17155: LD_EXP 78
17159: PUSH
17160: LD_VAR 0 9
17164: ARRAY
17165: PUSH
17166: LD_INT 0
17168: GREATER
17169: PUSH
17170: LD_VAR 0 8
17174: PUSH
17175: LD_INT 0
17177: GREATER
17178: AND
17179: IFFALSE 17450
// begin temp_list = [ ] ;
17181: LD_ADDR_VAR 0 4
17185: PUSH
17186: EMPTY
17187: ST_TO_ADDR
// for i in ai_captured_buildings [ base ] do
17188: LD_ADDR_VAR 0 2
17192: PUSH
17193: LD_EXP 78
17197: PUSH
17198: LD_VAR 0 9
17202: ARRAY
17203: PUSH
17204: FOR_IN
17205: IFFALSE 17261
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
17207: LD_VAR 0 2
17211: PPUSH
17212: CALL_OW 266
17216: PUSH
17217: LD_INT 0
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: IN
17227: IFFALSE 17245
// temp_list = temp_list ^ 1 else
17229: LD_ADDR_VAR 0 4
17233: PUSH
17234: LD_VAR 0 4
17238: PUSH
17239: LD_INT 1
17241: ADD
17242: ST_TO_ADDR
17243: GO 17259
// temp_list = temp_list ^ 0 ;
17245: LD_ADDR_VAR 0 4
17249: PUSH
17250: LD_VAR 0 4
17254: PUSH
17255: LD_INT 0
17257: ADD
17258: ST_TO_ADDR
17259: GO 17204
17261: POP
17262: POP
// temp_list = SortListByListDesc ( ai_captured_buildings [ base ] , temp_list ) ;
17263: LD_ADDR_VAR 0 4
17267: PUSH
17268: LD_EXP 78
17272: PUSH
17273: LD_VAR 0 9
17277: ARRAY
17278: PPUSH
17279: LD_VAR 0 4
17283: PPUSH
17284: CALL_OW 77
17288: ST_TO_ADDR
// temp_list_2 = GetHumansOutOfUnits ( temp_list_2 ) ;
17289: LD_ADDR_VAR 0 8
17293: PUSH
17294: LD_VAR 0 8
17298: PPUSH
17299: CALL 23196 0 1
17303: ST_TO_ADDR
// if temp_list_2 > 0 then
17304: LD_VAR 0 8
17308: PUSH
17309: LD_INT 0
17311: GREATER
17312: IFFALSE 17428
// begin temp_list_2 = SortListByListDesc ( temp_list_2 , temp_list_2 ) ;
17314: LD_ADDR_VAR 0 8
17318: PUSH
17319: LD_VAR 0 8
17323: PPUSH
17324: LD_VAR 0 8
17328: PPUSH
17329: CALL_OW 77
17333: ST_TO_ADDR
// SetTaskList ( temp_list_2 [ 1 ] , [ [ e , GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) , temp_list [ 1 ] , 0 , 0 , 0 ] ] ) ;
17334: LD_VAR 0 8
17338: PUSH
17339: LD_INT 1
17341: ARRAY
17342: PPUSH
17343: LD_STRING e
17345: PUSH
17346: LD_VAR 0 4
17350: PUSH
17351: LD_INT 1
17353: ARRAY
17354: PPUSH
17355: CALL_OW 250
17359: PUSH
17360: LD_VAR 0 4
17364: PUSH
17365: LD_INT 1
17367: ARRAY
17368: PPUSH
17369: CALL_OW 251
17373: PUSH
17374: LD_VAR 0 4
17378: PUSH
17379: LD_INT 1
17381: ARRAY
17382: PUSH
17383: LD_INT 0
17385: PUSH
17386: LD_INT 0
17388: PUSH
17389: LD_INT 0
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: PUSH
17401: EMPTY
17402: LIST
17403: PPUSH
17404: CALL_OW 446
// engineers_list = engineers_list diff temp_list_2 [ 1 ] ;
17408: LD_ADDR_VAR 0 3
17412: PUSH
17413: LD_VAR 0 3
17417: PUSH
17418: LD_VAR 0 8
17422: PUSH
17423: LD_INT 1
17425: ARRAY
17426: DIFF
17427: ST_TO_ADDR
// end ; if engineers_list = 0 and apemen_engineers_list = 0 then
17428: LD_VAR 0 3
17432: PUSH
17433: LD_INT 0
17435: EQUAL
17436: PUSH
17437: LD_VAR 0 10
17441: PUSH
17442: LD_INT 0
17444: EQUAL
17445: AND
17446: IFFALSE 17450
// continue ;
17448: GO 16619
// end ; i = 1 ;
17450: LD_ADDR_VAR 0 2
17454: PUSH
17455: LD_INT 1
17457: ST_TO_ADDR
// buildings_list = [ ] ;
17458: LD_ADDR_VAR 0 5
17462: PUSH
17463: EMPTY
17464: ST_TO_ADDR
// repeat case i of 1 :
17465: LD_VAR 0 2
17469: PUSH
17470: LD_INT 1
17472: DOUBLE
17473: EQUAL
17474: IFTRUE 17478
17476: GO 17515
17478: POP
// buildings_list = UnitFilter ( ai_all_buildings [ base ] , [ f_not , [ f_ok ] ] ) ; 2 :
17479: LD_ADDR_VAR 0 5
17483: PUSH
17484: LD_EXP 44
17488: PUSH
17489: LD_VAR 0 9
17493: ARRAY
17494: PPUSH
17495: LD_INT 3
17497: PUSH
17498: LD_INT 50
17500: PUSH
17501: EMPTY
17502: LIST
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PPUSH
17508: CALL_OW 72
17512: ST_TO_ADDR
17513: GO 17565
17515: LD_INT 2
17517: DOUBLE
17518: EQUAL
17519: IFTRUE 17523
17521: GO 17564
17523: POP
// buildings_list = UnitFilter ( ai_all_buildings [ base ] , [ f_not , [ f_lives , 1000 ] ] ) ; end ;
17524: LD_ADDR_VAR 0 5
17528: PUSH
17529: LD_EXP 44
17533: PUSH
17534: LD_VAR 0 9
17538: ARRAY
17539: PPUSH
17540: LD_INT 3
17542: PUSH
17543: LD_INT 24
17545: PUSH
17546: LD_INT 1000
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 72
17561: ST_TO_ADDR
17562: GO 17565
17564: POP
// i = i + 1 ;
17565: LD_ADDR_VAR 0 2
17569: PUSH
17570: LD_VAR 0 2
17574: PUSH
17575: LD_INT 1
17577: PLUS
17578: ST_TO_ADDR
// until buildings_list > 0 or i > 2 ;
17579: LD_VAR 0 5
17583: PUSH
17584: LD_INT 0
17586: GREATER
17587: PUSH
17588: LD_VAR 0 2
17592: PUSH
17593: LD_INT 2
17595: GREATER
17596: OR
17597: IFFALSE 17465
// if buildings_list > 0 then
17599: LD_VAR 0 5
17603: PUSH
17604: LD_INT 0
17606: GREATER
17607: IFFALSE 17830
// begin humans_list = engineers_list ^ apemen_engineers_list ;
17609: LD_ADDR_VAR 0 11
17613: PUSH
17614: LD_VAR 0 3
17618: PUSH
17619: LD_VAR 0 10
17623: ADD
17624: ST_TO_ADDR
// humans_list = GetHumansOutOfUnits ( humans_list ) ;
17625: LD_ADDR_VAR 0 11
17629: PUSH
17630: LD_VAR 0 11
17634: PPUSH
17635: CALL 23196 0 1
17639: ST_TO_ADDR
// if crane_usable then
17640: LD_VAR 0 12
17644: IFFALSE 17676
// begin humans_list = humans_list ^ ai_crane [ base ] ;
17646: LD_ADDR_VAR 0 11
17650: PUSH
17651: LD_VAR 0 11
17655: PUSH
17656: LD_EXP 70
17660: PUSH
17661: LD_VAR 0 9
17665: ARRAY
17666: ADD
17667: ST_TO_ADDR
// crane_usable = false ;
17668: LD_ADDR_VAR 0 12
17672: PUSH
17673: LD_INT 0
17675: ST_TO_ADDR
// end ; repeat i = 1 ;
17676: LD_ADDR_VAR 0 2
17680: PUSH
17681: LD_INT 1
17683: ST_TO_ADDR
// while i <= buildings_list do
17684: LD_VAR 0 2
17688: PUSH
17689: LD_VAR 0 5
17693: LESSEQUAL
17694: IFFALSE 17818
// begin if humans_list = 0 then
17696: LD_VAR 0 11
17700: PUSH
17701: LD_INT 0
17703: EQUAL
17704: IFFALSE 17708
// break ;
17706: GO 17818
// temp_unit = NearestUnitToUnit ( humans_list , buildings_list [ i ] ) ;
17708: LD_ADDR_VAR 0 6
17712: PUSH
17713: LD_VAR 0 11
17717: PPUSH
17718: LD_VAR 0 5
17722: PUSH
17723: LD_VAR 0 2
17727: ARRAY
17728: PPUSH
17729: CALL_OW 74
17733: ST_TO_ADDR
// ComRepairBuilding ( temp_unit , buildings_list [ i ] ) ;
17734: LD_VAR 0 6
17738: PPUSH
17739: LD_VAR 0 5
17743: PUSH
17744: LD_VAR 0 2
17748: ARRAY
17749: PPUSH
17750: CALL_OW 130
// humans_list = humans_list diff temp_unit ;
17754: LD_ADDR_VAR 0 11
17758: PUSH
17759: LD_VAR 0 11
17763: PUSH
17764: LD_VAR 0 6
17768: DIFF
17769: ST_TO_ADDR
// engineers_list = engineers_list diff temp_unit ;
17770: LD_ADDR_VAR 0 3
17774: PUSH
17775: LD_VAR 0 3
17779: PUSH
17780: LD_VAR 0 6
17784: DIFF
17785: ST_TO_ADDR
// apemen_engineers_list = apemen_engineers_list diff temp_unit ;
17786: LD_ADDR_VAR 0 10
17790: PUSH
17791: LD_VAR 0 10
17795: PUSH
17796: LD_VAR 0 6
17800: DIFF
17801: ST_TO_ADDR
// i = i + 1 ;
17802: LD_ADDR_VAR 0 2
17806: PUSH
17807: LD_VAR 0 2
17811: PUSH
17812: LD_INT 1
17814: PLUS
17815: ST_TO_ADDR
// end ;
17816: GO 17684
// until humans_list = 0 ;
17818: LD_VAR 0 11
17822: PUSH
17823: LD_INT 0
17825: EQUAL
17826: IFFALSE 17676
// continue ;
17828: GO 16619
// end ; if not BaseUnderAttack ( base , - 1 ) then
17830: LD_VAR 0 9
17834: PPUSH
17835: LD_INT 1
17837: NEG
17838: PPUSH
17839: CALL 23301 0 2
17843: NOT
17844: IFFALSE 21678
// begin if ai_building_under_construction [ base ] > 0 then
17846: LD_EXP 42
17850: PUSH
17851: LD_VAR 0 9
17855: ARRAY
17856: PUSH
17857: LD_INT 0
17859: GREATER
17860: IFFALSE 18011
// if BuildingStatus ( ai_building_under_construction [ base ] ) = bs_build then
17862: LD_EXP 42
17866: PUSH
17867: LD_VAR 0 9
17871: ARRAY
17872: PPUSH
17873: CALL_OW 461
17877: PUSH
17878: LD_INT 1
17880: EQUAL
17881: IFFALSE 17973
// begin temp_list_2 = GetHumansOutOfUnits ( engineers_list ^ apemen_engineers_list ) ;
17883: LD_ADDR_VAR 0 8
17887: PUSH
17888: LD_VAR 0 3
17892: PUSH
17893: LD_VAR 0 10
17897: ADD
17898: PPUSH
17899: CALL 23196 0 1
17903: ST_TO_ADDR
// if crane_usable then
17904: LD_VAR 0 12
17908: IFFALSE 17932
// temp_list_2 = temp_list_2 ^ ai_crane [ base ] ;
17910: LD_ADDR_VAR 0 8
17914: PUSH
17915: LD_VAR 0 8
17919: PUSH
17920: LD_EXP 70
17924: PUSH
17925: LD_VAR 0 9
17929: ARRAY
17930: ADD
17931: ST_TO_ADDR
// for i in temp_list_2 do
17932: LD_ADDR_VAR 0 2
17936: PUSH
17937: LD_VAR 0 8
17941: PUSH
17942: FOR_IN
17943: IFFALSE 17967
// ComRepairBuilding ( i , ai_building_under_construction [ base ] ) ;
17945: LD_VAR 0 2
17949: PPUSH
17950: LD_EXP 42
17954: PUSH
17955: LD_VAR 0 9
17959: ARRAY
17960: PPUSH
17961: CALL_OW 130
17965: GO 17942
17967: POP
17968: POP
// continue ;
17969: GO 16619
// end else
17971: GO 18011
// begin ComCancel ( ai_building_under_construction [ base ] ) ;
17973: LD_EXP 42
17977: PUSH
17978: LD_VAR 0 9
17982: ARRAY
17983: PPUSH
17984: CALL_OW 127
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
17988: LD_ADDR_EXP 42
17992: PUSH
17993: LD_EXP 42
17997: PPUSH
17998: LD_VAR 0 9
18002: PPUSH
18003: LD_INT 0
18005: PPUSH
18006: CALL_OW 1
18010: ST_TO_ADDR
// end ; if ai_all_buildings [ base ] - ai_excepted_buildings [ base ] < ai_buildings_locations [ base ] or ai_upcoming_building_data [ base ] > 0 then
18011: LD_EXP 44
18015: PUSH
18016: LD_VAR 0 9
18020: ARRAY
18021: PUSH
18022: LD_EXP 68
18026: PUSH
18027: LD_VAR 0 9
18031: ARRAY
18032: MINUS
18033: PUSH
18034: LD_EXP 38
18038: PUSH
18039: LD_VAR 0 9
18043: ARRAY
18044: LESS
18045: PUSH
18046: LD_EXP 46
18050: PUSH
18051: LD_VAR 0 9
18055: ARRAY
18056: PUSH
18057: LD_INT 0
18059: GREATER
18060: OR
18061: IFFALSE 21564
// begin if ai_upcoming_building_data [ base ] = 0 then
18063: LD_EXP 46
18067: PUSH
18068: LD_VAR 0 9
18072: ARRAY
18073: PUSH
18074: LD_INT 0
18076: EQUAL
18077: IFFALSE 18486
// begin temp_list = [ ] ;
18079: LD_ADDR_VAR 0 4
18083: PUSH
18084: EMPTY
18085: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
18086: LD_ADDR_VAR 0 2
18090: PUSH
18091: LD_EXP 38
18095: PUSH
18096: LD_VAR 0 9
18100: ARRAY
18101: PUSH
18102: FOR_IN
18103: IFFALSE 18153
// if GetBType ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) = - 1 then
18105: LD_VAR 0 2
18109: PUSH
18110: LD_INT 1
18112: ARRAY
18113: PPUSH
18114: LD_VAR 0 2
18118: PUSH
18119: LD_INT 2
18121: ARRAY
18122: PPUSH
18123: CALL_OW 428
18127: PPUSH
18128: CALL_OW 266
18132: PUSH
18133: LD_INT 1
18135: NEG
18136: EQUAL
18137: IFFALSE 18151
// begin temp_list = i ;
18139: LD_ADDR_VAR 0 4
18143: PUSH
18144: LD_VAR 0 2
18148: ST_TO_ADDR
// break ;
18149: GO 18153
// end ;
18151: GO 18102
18153: POP
18154: POP
// if temp_list > 0 then
18155: LD_VAR 0 4
18159: PUSH
18160: LD_INT 0
18162: GREATER
18163: IFFALSE 18486
// begin if temp_list [ 4 ] = b_bunker and GetBaseNation ( base ) in [ nation_american , nation_russian ] then
18165: LD_VAR 0 4
18169: PUSH
18170: LD_INT 4
18172: ARRAY
18173: PUSH
18174: LD_INT 32
18176: EQUAL
18177: PUSH
18178: LD_VAR 0 9
18182: PPUSH
18183: CALL 12458 0 1
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: LD_INT 3
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: IN
18198: AND
18199: IFFALSE 18461
// begin k = 0 ;
18201: LD_ADDR_VAR 0 14
18205: PUSH
18206: LD_INT 0
18208: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
18209: LD_ADDR_VAR 0 2
18213: PUSH
18214: LD_EXP 38
18218: PUSH
18219: LD_VAR 0 9
18223: ARRAY
18224: PUSH
18225: FOR_IN
18226: IFFALSE 18277
// if i [ 4 ] in [ b_breastwork , b_bunker , b_armoury , b_barracks , b_fort ] then
18228: LD_VAR 0 2
18232: PUSH
18233: LD_INT 4
18235: ARRAY
18236: PUSH
18237: LD_INT 31
18239: PUSH
18240: LD_INT 32
18242: PUSH
18243: LD_INT 4
18245: PUSH
18246: LD_INT 5
18248: PUSH
18249: LD_INT 35
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: IN
18259: IFFALSE 18275
// k = k + 1 ;
18261: LD_ADDR_VAR 0 14
18265: PUSH
18266: LD_VAR 0 14
18270: PUSH
18271: LD_INT 1
18273: PLUS
18274: ST_TO_ADDR
18275: GO 18225
18277: POP
18278: POP
// if k > ai_soldiers [ base ] then
18279: LD_VAR 0 14
18283: PUSH
18284: LD_EXP 29
18288: PUSH
18289: LD_VAR 0 9
18293: ARRAY
18294: GREATER
18295: IFFALSE 18461
// begin for i = 1 to ai_buildings_locations [ base ] do
18297: LD_ADDR_VAR 0 2
18301: PUSH
18302: DOUBLE
18303: LD_INT 1
18305: DEC
18306: ST_TO_ADDR
18307: LD_EXP 38
18311: PUSH
18312: LD_VAR 0 9
18316: ARRAY
18317: PUSH
18318: FOR_TO
18319: IFFALSE 18438
// if ai_buildings_locations [ base ] [ i ] = temp_list then
18321: LD_EXP 38
18325: PUSH
18326: LD_VAR 0 9
18330: ARRAY
18331: PUSH
18332: LD_VAR 0 2
18336: ARRAY
18337: PUSH
18338: LD_VAR 0 4
18342: EQUAL
18343: IFFALSE 18436
// begin temp_list_2 = Replace ( ai_buildings_locations [ base ] [ i ] , 4 , b_turret ) ;
18345: LD_ADDR_VAR 0 8
18349: PUSH
18350: LD_EXP 38
18354: PUSH
18355: LD_VAR 0 9
18359: ARRAY
18360: PUSH
18361: LD_VAR 0 2
18365: ARRAY
18366: PPUSH
18367: LD_INT 4
18369: PPUSH
18370: LD_INT 33
18372: PPUSH
18373: CALL_OW 1
18377: ST_TO_ADDR
// temp_list_2 = Replace ( ai_buildings_locations [ base ] , i , temp_list_2 ) ;
18378: LD_ADDR_VAR 0 8
18382: PUSH
18383: LD_EXP 38
18387: PUSH
18388: LD_VAR 0 9
18392: ARRAY
18393: PPUSH
18394: LD_VAR 0 2
18398: PPUSH
18399: LD_VAR 0 8
18403: PPUSH
18404: CALL_OW 1
18408: ST_TO_ADDR
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list_2 ) ;
18409: LD_ADDR_EXP 38
18413: PUSH
18414: LD_EXP 38
18418: PPUSH
18419: LD_VAR 0 9
18423: PPUSH
18424: LD_VAR 0 8
18428: PPUSH
18429: CALL_OW 1
18433: ST_TO_ADDR
// break ;
18434: GO 18438
// end ;
18436: GO 18318
18438: POP
18439: POP
// temp_list = Replace ( temp_list , 4 , b_turret ) ;
18440: LD_ADDR_VAR 0 4
18444: PUSH
18445: LD_VAR 0 4
18449: PPUSH
18450: LD_INT 4
18452: PPUSH
18453: LD_INT 33
18455: PPUSH
18456: CALL_OW 1
18460: ST_TO_ADDR
// end ; end ; ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , temp_list ) ;
18461: LD_ADDR_EXP 46
18465: PUSH
18466: LD_EXP 46
18470: PPUSH
18471: LD_VAR 0 9
18475: PPUSH
18476: LD_VAR 0 4
18480: PPUSH
18481: CALL_OW 1
18485: ST_TO_ADDR
// end ; end ; if ai_upcoming_building_data [ base ] > 0 then
18486: LD_EXP 46
18490: PUSH
18491: LD_VAR 0 9
18495: ARRAY
18496: PUSH
18497: LD_INT 0
18499: GREATER
18500: IFFALSE 21564
// begin if ai_building_constructor [ base ] = 0 then
18502: LD_EXP 45
18506: PUSH
18507: LD_VAR 0 9
18511: ARRAY
18512: PUSH
18513: LD_INT 0
18515: EQUAL
18516: IFFALSE 18670
// begin temp_list_2 = UnitFilter ( ai_engineers [ base ] , [ f_class , class_engineer ] ) ;
18518: LD_ADDR_VAR 0 8
18522: PUSH
18523: LD_EXP 30
18527: PUSH
18528: LD_VAR 0 9
18532: ARRAY
18533: PPUSH
18534: LD_INT 25
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PPUSH
18544: CALL_OW 72
18548: ST_TO_ADDR
// if crane_usable then
18549: LD_VAR 0 12
18553: IFFALSE 18577
// temp_list_2 = temp_list_2 ^ ai_crane [ base ] ;
18555: LD_ADDR_VAR 0 8
18559: PUSH
18560: LD_VAR 0 8
18564: PUSH
18565: LD_EXP 70
18569: PUSH
18570: LD_VAR 0 9
18574: ARRAY
18575: ADD
18576: ST_TO_ADDR
// if temp_list_2 > 0 then
18577: LD_VAR 0 8
18581: PUSH
18582: LD_INT 0
18584: GREATER
18585: IFFALSE 18670
// begin temp_list = [ ] ;
18587: LD_ADDR_VAR 0 4
18591: PUSH
18592: EMPTY
18593: ST_TO_ADDR
// for i in temp_list_2 do
18594: LD_ADDR_VAR 0 2
18598: PUSH
18599: LD_VAR 0 8
18603: PUSH
18604: FOR_IN
18605: IFFALSE 18633
// temp_list = temp_list ^ GetSkill ( i , skill_engineering ) ;
18607: LD_ADDR_VAR 0 4
18611: PUSH
18612: LD_VAR 0 4
18616: PUSH
18617: LD_VAR 0 2
18621: PPUSH
18622: LD_INT 2
18624: PPUSH
18625: CALL_OW 259
18629: ADD
18630: ST_TO_ADDR
18631: GO 18604
18633: POP
18634: POP
// ai_building_constructor = Replace ( ai_building_constructor , base , BestFromListByList ( temp_list_2 , temp_list ) ) ;
18635: LD_ADDR_EXP 45
18639: PUSH
18640: LD_EXP 45
18644: PPUSH
18645: LD_VAR 0 9
18649: PPUSH
18650: LD_VAR 0 8
18654: PPUSH
18655: LD_VAR 0 4
18659: PPUSH
18660: CALL_OW 79
18664: PPUSH
18665: CALL_OW 1
18669: ST_TO_ADDR
// end ; end ; if ai_building_constructor [ base ] > 0 and ( ai_building_constructor [ base ] in engineers_list or ( ai_building_constructor [ base ] = ai_crane [ base ] and crane_usable ) ) then
18670: LD_EXP 45
18674: PUSH
18675: LD_VAR 0 9
18679: ARRAY
18680: PUSH
18681: LD_INT 0
18683: GREATER
18684: PUSH
18685: LD_EXP 45
18689: PUSH
18690: LD_VAR 0 9
18694: ARRAY
18695: PUSH
18696: LD_VAR 0 3
18700: IN
18701: PUSH
18702: LD_EXP 45
18706: PUSH
18707: LD_VAR 0 9
18711: ARRAY
18712: PUSH
18713: LD_EXP 70
18717: PUSH
18718: LD_VAR 0 9
18722: ARRAY
18723: EQUAL
18724: PUSH
18725: LD_VAR 0 12
18729: AND
18730: OR
18731: AND
18732: IFFALSE 21564
// begin engineers_list = engineers_list diff ai_building_constructor [ base ] ;
18734: LD_ADDR_VAR 0 3
18738: PUSH
18739: LD_VAR 0 3
18743: PUSH
18744: LD_EXP 45
18748: PUSH
18749: LD_VAR 0 9
18753: ARRAY
18754: DIFF
18755: ST_TO_ADDR
// case GetType ( IsInUnit ( ai_building_constructor [ base ] ) ) of unit_building :
18756: LD_EXP 45
18760: PUSH
18761: LD_VAR 0 9
18765: ARRAY
18766: PPUSH
18767: CALL_OW 310
18771: PPUSH
18772: CALL_OW 247
18776: PUSH
18777: LD_INT 3
18779: DOUBLE
18780: EQUAL
18781: IFTRUE 18785
18783: GO 18803
18785: POP
// ComExitBuilding ( ai_building_constructor [ base ] ) ; unit_vehicle :
18786: LD_EXP 45
18790: PUSH
18791: LD_VAR 0 9
18795: ARRAY
18796: PPUSH
18797: CALL_OW 122
18801: GO 21564
18803: LD_INT 2
18805: DOUBLE
18806: EQUAL
18807: IFTRUE 18811
18809: GO 18829
18811: POP
// ComExitVehicle ( ai_building_constructor [ base ] ) ; else
18812: LD_EXP 45
18816: PUSH
18817: LD_VAR 0 9
18821: ARRAY
18822: PPUSH
18823: CALL_OW 121
18827: GO 21564
18829: POP
// case GetBType ( HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ) of - 1 :
18830: LD_EXP 46
18834: PUSH
18835: LD_VAR 0 9
18839: ARRAY
18840: PUSH
18841: LD_INT 1
18843: ARRAY
18844: PPUSH
18845: LD_EXP 46
18849: PUSH
18850: LD_VAR 0 9
18854: ARRAY
18855: PUSH
18856: LD_INT 2
18858: ARRAY
18859: PPUSH
18860: CALL_OW 428
18864: PPUSH
18865: CALL_OW 266
18869: PUSH
18870: LD_INT 1
18872: NEG
18873: DOUBLE
18874: EQUAL
18875: IFTRUE 18879
18877: GO 21069
18879: POP
// begin case ai_upcoming_building_data [ base ] [ 4 ] of b_warehouse :
18880: LD_EXP 46
18884: PUSH
18885: LD_VAR 0 9
18889: ARRAY
18890: PUSH
18891: LD_INT 4
18893: ARRAY
18894: PUSH
18895: LD_INT 1
18897: DOUBLE
18898: EQUAL
18899: IFTRUE 18903
18901: GO 18914
18903: POP
// i = b_depot ; b_factory :
18904: LD_ADDR_VAR 0 2
18908: PUSH
18909: LD_INT 0
18911: ST_TO_ADDR
18912: GO 18998
18914: LD_INT 3
18916: DOUBLE
18917: EQUAL
18918: IFTRUE 18922
18920: GO 18933
18922: POP
// i = b_workshop ; b_lab_half , b_lab_full :
18923: LD_ADDR_VAR 0 2
18927: PUSH
18928: LD_INT 2
18930: ST_TO_ADDR
18931: GO 18998
18933: LD_INT 7
18935: DOUBLE
18936: EQUAL
18937: IFTRUE 18947
18939: LD_INT 8
18941: DOUBLE
18942: EQUAL
18943: IFTRUE 18947
18945: GO 18958
18947: POP
// i = b_lab ; b_barracks :
18948: LD_ADDR_VAR 0 2
18952: PUSH
18953: LD_INT 6
18955: ST_TO_ADDR
18956: GO 18998
18958: LD_INT 5
18960: DOUBLE
18961: EQUAL
18962: IFTRUE 18966
18964: GO 18977
18966: POP
// i = b_armoury ; else
18967: LD_ADDR_VAR 0 2
18971: PUSH
18972: LD_INT 4
18974: ST_TO_ADDR
18975: GO 18998
18977: POP
// i = ai_upcoming_building_data [ base ] [ 4 ] ; end ;
18978: LD_ADDR_VAR 0 2
18982: PUSH
18983: LD_EXP 46
18987: PUSH
18988: LD_VAR 0 9
18992: ARRAY
18993: PUSH
18994: LD_INT 4
18996: ARRAY
18997: ST_TO_ADDR
// case i of b_depot :
18998: LD_VAR 0 2
19002: PUSH
19003: LD_INT 0
19005: DOUBLE
19006: EQUAL
19007: IFTRUE 19011
19009: GO 19088
19011: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19012: LD_EXP 45
19016: PUSH
19017: LD_VAR 0 9
19021: ARRAY
19022: PPUSH
19023: CALL_OW 248
19027: PUSH
19028: LD_INT 3
19030: DOUBLE
19031: EQUAL
19032: IFTRUE 19036
19034: GO 19047
19036: POP
// b_value = 64 ; nation_american :
19037: LD_ADDR_VAR 0 13
19041: PUSH
19042: LD_INT 64
19044: ST_TO_ADDR
19045: GO 19086
19047: LD_INT 1
19049: DOUBLE
19050: EQUAL
19051: IFTRUE 19055
19053: GO 19066
19055: POP
// b_value = 1 ; nation_arabian :
19056: LD_ADDR_VAR 0 13
19060: PUSH
19061: LD_INT 1
19063: ST_TO_ADDR
19064: GO 19086
19066: LD_INT 2
19068: DOUBLE
19069: EQUAL
19070: IFTRUE 19074
19072: GO 19085
19074: POP
// b_value = 34 ; end ;
19075: LD_ADDR_VAR 0 13
19079: PUSH
19080: LD_INT 34
19082: ST_TO_ADDR
19083: GO 19086
19085: POP
// end ; b_workshop :
19086: GO 20981
19088: LD_INT 2
19090: DOUBLE
19091: EQUAL
19092: IFTRUE 19096
19094: GO 19173
19096: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19097: LD_EXP 45
19101: PUSH
19102: LD_VAR 0 9
19106: ARRAY
19107: PPUSH
19108: CALL_OW 248
19112: PUSH
19113: LD_INT 3
19115: DOUBLE
19116: EQUAL
19117: IFTRUE 19121
19119: GO 19132
19121: POP
// b_value = 68 ; nation_american :
19122: LD_ADDR_VAR 0 13
19126: PUSH
19127: LD_INT 68
19129: ST_TO_ADDR
19130: GO 19171
19132: LD_INT 1
19134: DOUBLE
19135: EQUAL
19136: IFTRUE 19140
19138: GO 19151
19140: POP
// b_value = 5 ; nation_arabian :
19141: LD_ADDR_VAR 0 13
19145: PUSH
19146: LD_INT 5
19148: ST_TO_ADDR
19149: GO 19171
19151: LD_INT 2
19153: DOUBLE
19154: EQUAL
19155: IFTRUE 19159
19157: GO 19170
19159: POP
// b_value = 38 ; end ;
19160: LD_ADDR_VAR 0 13
19164: PUSH
19165: LD_INT 38
19167: ST_TO_ADDR
19168: GO 19171
19170: POP
// end ; b_armoury :
19171: GO 20981
19173: LD_INT 4
19175: DOUBLE
19176: EQUAL
19177: IFTRUE 19181
19179: GO 19258
19181: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19182: LD_EXP 45
19186: PUSH
19187: LD_VAR 0 9
19191: ARRAY
19192: PPUSH
19193: CALL_OW 248
19197: PUSH
19198: LD_INT 3
19200: DOUBLE
19201: EQUAL
19202: IFTRUE 19206
19204: GO 19217
19206: POP
// b_value = 66 ; nation_american :
19207: LD_ADDR_VAR 0 13
19211: PUSH
19212: LD_INT 66
19214: ST_TO_ADDR
19215: GO 19256
19217: LD_INT 1
19219: DOUBLE
19220: EQUAL
19221: IFTRUE 19225
19223: GO 19236
19225: POP
// b_value = 3 ; nation_arabian :
19226: LD_ADDR_VAR 0 13
19230: PUSH
19231: LD_INT 3
19233: ST_TO_ADDR
19234: GO 19256
19236: LD_INT 2
19238: DOUBLE
19239: EQUAL
19240: IFTRUE 19244
19242: GO 19255
19244: POP
// b_value = 36 ; end ;
19245: LD_ADDR_VAR 0 13
19249: PUSH
19250: LD_INT 36
19252: ST_TO_ADDR
19253: GO 19256
19255: POP
// end ; b_lab :
19256: GO 20981
19258: LD_INT 6
19260: DOUBLE
19261: EQUAL
19262: IFTRUE 19266
19264: GO 19343
19266: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19267: LD_EXP 45
19271: PUSH
19272: LD_VAR 0 9
19276: ARRAY
19277: PPUSH
19278: CALL_OW 248
19282: PUSH
19283: LD_INT 3
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19302
19291: POP
// b_value = 77 ; nation_american :
19292: LD_ADDR_VAR 0 13
19296: PUSH
19297: LD_INT 77
19299: ST_TO_ADDR
19300: GO 19341
19302: LD_INT 1
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19321
19310: POP
// b_value = 17 ; nation_arabian :
19311: LD_ADDR_VAR 0 13
19315: PUSH
19316: LD_INT 17
19318: ST_TO_ADDR
19319: GO 19341
19321: LD_INT 2
19323: DOUBLE
19324: EQUAL
19325: IFTRUE 19329
19327: GO 19340
19329: POP
// b_value = 48 ; end ;
19330: LD_ADDR_VAR 0 13
19334: PUSH
19335: LD_INT 48
19337: ST_TO_ADDR
19338: GO 19341
19340: POP
// end ; b_oil_power :
19341: GO 20981
19343: LD_INT 26
19345: DOUBLE
19346: EQUAL
19347: IFTRUE 19351
19349: GO 19428
19351: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19352: LD_EXP 45
19356: PUSH
19357: LD_VAR 0 9
19361: ARRAY
19362: PPUSH
19363: CALL_OW 248
19367: PUSH
19368: LD_INT 3
19370: DOUBLE
19371: EQUAL
19372: IFTRUE 19376
19374: GO 19387
19376: POP
// b_value = 85 ; nation_american :
19377: LD_ADDR_VAR 0 13
19381: PUSH
19382: LD_INT 85
19384: ST_TO_ADDR
19385: GO 19426
19387: LD_INT 1
19389: DOUBLE
19390: EQUAL
19391: IFTRUE 19395
19393: GO 19406
19395: POP
// b_value = 25 ; nation_arabian :
19396: LD_ADDR_VAR 0 13
19400: PUSH
19401: LD_INT 25
19403: ST_TO_ADDR
19404: GO 19426
19406: LD_INT 2
19408: DOUBLE
19409: EQUAL
19410: IFTRUE 19414
19412: GO 19425
19414: POP
// b_value = 56 ; end ;
19415: LD_ADDR_VAR 0 13
19419: PUSH
19420: LD_INT 56
19422: ST_TO_ADDR
19423: GO 19426
19425: POP
// end ; b_solar_power :
19426: GO 20981
19428: LD_INT 27
19430: DOUBLE
19431: EQUAL
19432: IFTRUE 19436
19434: GO 19514
19436: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19437: LD_EXP 45
19441: PUSH
19442: LD_VAR 0 9
19446: ARRAY
19447: PPUSH
19448: CALL_OW 248
19452: PUSH
19453: LD_INT 3
19455: DOUBLE
19456: EQUAL
19457: IFTRUE 19461
19459: GO 19473
19461: POP
// b_value = - 7 ; nation_american :
19462: LD_ADDR_VAR 0 13
19466: PUSH
19467: LD_INT 7
19469: NEG
19470: ST_TO_ADDR
19471: GO 19512
19473: LD_INT 1
19475: DOUBLE
19476: EQUAL
19477: IFTRUE 19481
19479: GO 19492
19481: POP
// b_value = 26 ; nation_arabian :
19482: LD_ADDR_VAR 0 13
19486: PUSH
19487: LD_INT 26
19489: ST_TO_ADDR
19490: GO 19512
19492: LD_INT 2
19494: DOUBLE
19495: EQUAL
19496: IFTRUE 19500
19498: GO 19511
19500: POP
// b_value = 57 ; end ;
19501: LD_ADDR_VAR 0 13
19505: PUSH
19506: LD_INT 57
19508: ST_TO_ADDR
19509: GO 19512
19511: POP
// end ; b_siberite_power :
19512: GO 20981
19514: LD_INT 28
19516: DOUBLE
19517: EQUAL
19518: IFTRUE 19522
19520: GO 19599
19522: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19523: LD_EXP 45
19527: PUSH
19528: LD_VAR 0 9
19532: ARRAY
19533: PPUSH
19534: CALL_OW 248
19538: PUSH
19539: LD_INT 3
19541: DOUBLE
19542: EQUAL
19543: IFTRUE 19547
19545: GO 19558
19547: POP
// b_value = 86 ; nation_american :
19548: LD_ADDR_VAR 0 13
19552: PUSH
19553: LD_INT 86
19555: ST_TO_ADDR
19556: GO 19597
19558: LD_INT 1
19560: DOUBLE
19561: EQUAL
19562: IFTRUE 19566
19564: GO 19577
19566: POP
// b_value = 27 ; nation_arabian :
19567: LD_ADDR_VAR 0 13
19571: PUSH
19572: LD_INT 27
19574: ST_TO_ADDR
19575: GO 19597
19577: LD_INT 2
19579: DOUBLE
19580: EQUAL
19581: IFTRUE 19585
19583: GO 19596
19585: POP
// b_value = 58 ; end ;
19586: LD_ADDR_VAR 0 13
19590: PUSH
19591: LD_INT 58
19593: ST_TO_ADDR
19594: GO 19597
19596: POP
// end ; b_oil_mine :
19597: GO 20981
19599: LD_INT 29
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19684
19607: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19608: LD_EXP 45
19612: PUSH
19613: LD_VAR 0 9
19617: ARRAY
19618: PPUSH
19619: CALL_OW 248
19623: PUSH
19624: LD_INT 3
19626: DOUBLE
19627: EQUAL
19628: IFTRUE 19632
19630: GO 19643
19632: POP
// b_value = 87 ; nation_american :
19633: LD_ADDR_VAR 0 13
19637: PUSH
19638: LD_INT 87
19640: ST_TO_ADDR
19641: GO 19682
19643: LD_INT 1
19645: DOUBLE
19646: EQUAL
19647: IFTRUE 19651
19649: GO 19662
19651: POP
// b_value = 28 ; nation_arabian :
19652: LD_ADDR_VAR 0 13
19656: PUSH
19657: LD_INT 28
19659: ST_TO_ADDR
19660: GO 19682
19662: LD_INT 2
19664: DOUBLE
19665: EQUAL
19666: IFTRUE 19670
19668: GO 19681
19670: POP
// b_value = 59 ; end ;
19671: LD_ADDR_VAR 0 13
19675: PUSH
19676: LD_INT 59
19678: ST_TO_ADDR
19679: GO 19682
19681: POP
// end ; b_siberite_mine :
19682: GO 20981
19684: LD_INT 30
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19769
19692: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19693: LD_EXP 45
19697: PUSH
19698: LD_VAR 0 9
19702: ARRAY
19703: PPUSH
19704: CALL_OW 248
19708: PUSH
19709: LD_INT 3
19711: DOUBLE
19712: EQUAL
19713: IFTRUE 19717
19715: GO 19728
19717: POP
// b_value = 88 ; nation_american :
19718: LD_ADDR_VAR 0 13
19722: PUSH
19723: LD_INT 88
19725: ST_TO_ADDR
19726: GO 19767
19728: LD_INT 1
19730: DOUBLE
19731: EQUAL
19732: IFTRUE 19736
19734: GO 19747
19736: POP
// b_value = 29 ; nation_arabian :
19737: LD_ADDR_VAR 0 13
19741: PUSH
19742: LD_INT 29
19744: ST_TO_ADDR
19745: GO 19767
19747: LD_INT 2
19749: DOUBLE
19750: EQUAL
19751: IFTRUE 19755
19753: GO 19766
19755: POP
// b_value = 60 ; end ;
19756: LD_ADDR_VAR 0 13
19760: PUSH
19761: LD_INT 60
19763: ST_TO_ADDR
19764: GO 19767
19766: POP
// end ; b_breastwork :
19767: GO 20981
19769: LD_INT 31
19771: DOUBLE
19772: EQUAL
19773: IFTRUE 19777
19775: GO 19854
19777: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19778: LD_EXP 45
19782: PUSH
19783: LD_VAR 0 9
19787: ARRAY
19788: PPUSH
19789: CALL_OW 248
19793: PUSH
19794: LD_INT 3
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19813
19802: POP
// b_value = 89 ; nation_american :
19803: LD_ADDR_VAR 0 13
19807: PUSH
19808: LD_INT 89
19810: ST_TO_ADDR
19811: GO 19852
19813: LD_INT 1
19815: DOUBLE
19816: EQUAL
19817: IFTRUE 19821
19819: GO 19832
19821: POP
// b_value = 30 ; nation_arabian :
19822: LD_ADDR_VAR 0 13
19826: PUSH
19827: LD_INT 30
19829: ST_TO_ADDR
19830: GO 19852
19832: LD_INT 2
19834: DOUBLE
19835: EQUAL
19836: IFTRUE 19840
19838: GO 19851
19840: POP
// b_value = 61 ; end ;
19841: LD_ADDR_VAR 0 13
19845: PUSH
19846: LD_INT 61
19848: ST_TO_ADDR
19849: GO 19852
19851: POP
// end ; b_bunker :
19852: GO 20981
19854: LD_INT 32
19856: DOUBLE
19857: EQUAL
19858: IFTRUE 19862
19860: GO 19939
19862: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19863: LD_EXP 45
19867: PUSH
19868: LD_VAR 0 9
19872: ARRAY
19873: PPUSH
19874: CALL_OW 248
19878: PUSH
19879: LD_INT 3
19881: DOUBLE
19882: EQUAL
19883: IFTRUE 19887
19885: GO 19898
19887: POP
// b_value = 90 ; nation_american :
19888: LD_ADDR_VAR 0 13
19892: PUSH
19893: LD_INT 90
19895: ST_TO_ADDR
19896: GO 19937
19898: LD_INT 1
19900: DOUBLE
19901: EQUAL
19902: IFTRUE 19906
19904: GO 19917
19906: POP
// b_value = 31 ; nation_arabian :
19907: LD_ADDR_VAR 0 13
19911: PUSH
19912: LD_INT 31
19914: ST_TO_ADDR
19915: GO 19937
19917: LD_INT 2
19919: DOUBLE
19920: EQUAL
19921: IFTRUE 19925
19923: GO 19936
19925: POP
// b_value = 62 ; end ;
19926: LD_ADDR_VAR 0 13
19930: PUSH
19931: LD_INT 62
19933: ST_TO_ADDR
19934: GO 19937
19936: POP
// end ; b_turret :
19937: GO 20981
19939: LD_INT 33
19941: DOUBLE
19942: EQUAL
19943: IFTRUE 19947
19945: GO 20025
19947: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19948: LD_EXP 45
19952: PUSH
19953: LD_VAR 0 9
19957: ARRAY
19958: PPUSH
19959: CALL_OW 248
19963: PUSH
19964: LD_INT 3
19966: DOUBLE
19967: EQUAL
19968: IFTRUE 19972
19970: GO 19983
19972: POP
// b_value = 91 ; nation_american :
19973: LD_ADDR_VAR 0 13
19977: PUSH
19978: LD_INT 91
19980: ST_TO_ADDR
19981: GO 20023
19983: LD_INT 1
19985: DOUBLE
19986: EQUAL
19987: IFTRUE 19991
19989: GO 20002
19991: POP
// b_value = 32 ; nation_arabian :
19992: LD_ADDR_VAR 0 13
19996: PUSH
19997: LD_INT 32
19999: ST_TO_ADDR
20000: GO 20023
20002: LD_INT 2
20004: DOUBLE
20005: EQUAL
20006: IFTRUE 20010
20008: GO 20022
20010: POP
// b_value = - 7 ; end ;
20011: LD_ADDR_VAR 0 13
20015: PUSH
20016: LD_INT 7
20018: NEG
20019: ST_TO_ADDR
20020: GO 20023
20022: POP
// end ; b_teleport :
20023: GO 20981
20025: LD_INT 34
20027: DOUBLE
20028: EQUAL
20029: IFTRUE 20033
20031: GO 20112
20033: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20034: LD_EXP 45
20038: PUSH
20039: LD_VAR 0 9
20043: ARRAY
20044: PPUSH
20045: CALL_OW 248
20049: PUSH
20050: LD_INT 3
20052: DOUBLE
20053: EQUAL
20054: IFTRUE 20058
20056: GO 20069
20058: POP
// b_value = 92 ; nation_american :
20059: LD_ADDR_VAR 0 13
20063: PUSH
20064: LD_INT 92
20066: ST_TO_ADDR
20067: GO 20110
20069: LD_INT 1
20071: DOUBLE
20072: EQUAL
20073: IFTRUE 20077
20075: GO 20089
20077: POP
// b_value = - 7 ; nation_arabian :
20078: LD_ADDR_VAR 0 13
20082: PUSH
20083: LD_INT 7
20085: NEG
20086: ST_TO_ADDR
20087: GO 20110
20089: LD_INT 2
20091: DOUBLE
20092: EQUAL
20093: IFTRUE 20097
20095: GO 20109
20097: POP
// b_value = - 7 ; end ;
20098: LD_ADDR_VAR 0 13
20102: PUSH
20103: LD_INT 7
20105: NEG
20106: ST_TO_ADDR
20107: GO 20110
20109: POP
// end ; b_control_tower :
20110: GO 20981
20112: LD_INT 36
20114: DOUBLE
20115: EQUAL
20116: IFTRUE 20120
20118: GO 20199
20120: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20121: LD_EXP 45
20125: PUSH
20126: LD_VAR 0 9
20130: ARRAY
20131: PPUSH
20132: CALL_OW 248
20136: PUSH
20137: LD_INT 3
20139: DOUBLE
20140: EQUAL
20141: IFTRUE 20145
20143: GO 20157
20145: POP
// b_value = - 7 ; nation_american :
20146: LD_ADDR_VAR 0 13
20150: PUSH
20151: LD_INT 7
20153: NEG
20154: ST_TO_ADDR
20155: GO 20197
20157: LD_INT 1
20159: DOUBLE
20160: EQUAL
20161: IFTRUE 20165
20163: GO 20176
20165: POP
// b_value = 94 ; nation_arabian :
20166: LD_ADDR_VAR 0 13
20170: PUSH
20171: LD_INT 94
20173: ST_TO_ADDR
20174: GO 20197
20176: LD_INT 2
20178: DOUBLE
20179: EQUAL
20180: IFTRUE 20184
20182: GO 20196
20184: POP
// b_value = - 7 ; end ;
20185: LD_ADDR_VAR 0 13
20189: PUSH
20190: LD_INT 7
20192: NEG
20193: ST_TO_ADDR
20194: GO 20197
20196: POP
// end ; b_ext_track :
20197: GO 20981
20199: LD_INT 16
20201: DOUBLE
20202: EQUAL
20203: IFTRUE 20207
20205: GO 20284
20207: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20208: LD_EXP 45
20212: PUSH
20213: LD_VAR 0 9
20217: ARRAY
20218: PPUSH
20219: CALL_OW 248
20223: PUSH
20224: LD_INT 3
20226: DOUBLE
20227: EQUAL
20228: IFTRUE 20232
20230: GO 20243
20232: POP
// b_value = 70 ; nation_american :
20233: LD_ADDR_VAR 0 13
20237: PUSH
20238: LD_INT 70
20240: ST_TO_ADDR
20241: GO 20282
20243: LD_INT 1
20245: DOUBLE
20246: EQUAL
20247: IFTRUE 20251
20249: GO 20262
20251: POP
// b_value = 7 ; nation_arabian :
20252: LD_ADDR_VAR 0 13
20256: PUSH
20257: LD_INT 7
20259: ST_TO_ADDR
20260: GO 20282
20262: LD_INT 2
20264: DOUBLE
20265: EQUAL
20266: IFTRUE 20270
20268: GO 20281
20270: POP
// b_value = 40 ; end ;
20271: LD_ADDR_VAR 0 13
20275: PUSH
20276: LD_INT 40
20278: ST_TO_ADDR
20279: GO 20282
20281: POP
// end ; b_ext_gun :
20282: GO 20981
20284: LD_INT 17
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20369
20292: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20293: LD_EXP 45
20297: PUSH
20298: LD_VAR 0 9
20302: ARRAY
20303: PPUSH
20304: CALL_OW 248
20308: PUSH
20309: LD_INT 3
20311: DOUBLE
20312: EQUAL
20313: IFTRUE 20317
20315: GO 20328
20317: POP
// b_value = 71 ; nation_american :
20318: LD_ADDR_VAR 0 13
20322: PUSH
20323: LD_INT 71
20325: ST_TO_ADDR
20326: GO 20367
20328: LD_INT 1
20330: DOUBLE
20331: EQUAL
20332: IFTRUE 20336
20334: GO 20347
20336: POP
// b_value = 8 ; nation_arabian :
20337: LD_ADDR_VAR 0 13
20341: PUSH
20342: LD_INT 8
20344: ST_TO_ADDR
20345: GO 20367
20347: LD_INT 2
20349: DOUBLE
20350: EQUAL
20351: IFTRUE 20355
20353: GO 20366
20355: POP
// b_value = 41 ; end ;
20356: LD_ADDR_VAR 0 13
20360: PUSH
20361: LD_INT 41
20363: ST_TO_ADDR
20364: GO 20367
20366: POP
// end ; b_ext_rocket :
20367: GO 20981
20369: LD_INT 18
20371: DOUBLE
20372: EQUAL
20373: IFTRUE 20377
20375: GO 20454
20377: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20378: LD_EXP 45
20382: PUSH
20383: LD_VAR 0 9
20387: ARRAY
20388: PPUSH
20389: CALL_OW 248
20393: PUSH
20394: LD_INT 3
20396: DOUBLE
20397: EQUAL
20398: IFTRUE 20402
20400: GO 20413
20402: POP
// b_value = 72 ; nation_american :
20403: LD_ADDR_VAR 0 13
20407: PUSH
20408: LD_INT 72
20410: ST_TO_ADDR
20411: GO 20452
20413: LD_INT 1
20415: DOUBLE
20416: EQUAL
20417: IFTRUE 20421
20419: GO 20432
20421: POP
// b_value = 9 ; nation_arabian :
20422: LD_ADDR_VAR 0 13
20426: PUSH
20427: LD_INT 9
20429: ST_TO_ADDR
20430: GO 20452
20432: LD_INT 2
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20451
20440: POP
// b_value = 42 ; end ;
20441: LD_ADDR_VAR 0 13
20445: PUSH
20446: LD_INT 42
20448: ST_TO_ADDR
20449: GO 20452
20451: POP
// end ; b_ext_noncombat :
20452: GO 20981
20454: LD_INT 19
20456: DOUBLE
20457: EQUAL
20458: IFTRUE 20462
20460: GO 20540
20462: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20463: LD_EXP 45
20467: PUSH
20468: LD_VAR 0 9
20472: ARRAY
20473: PPUSH
20474: CALL_OW 248
20478: PUSH
20479: LD_INT 3
20481: DOUBLE
20482: EQUAL
20483: IFTRUE 20487
20485: GO 20498
20487: POP
// b_value = 73 ; nation_american :
20488: LD_ADDR_VAR 0 13
20492: PUSH
20493: LD_INT 73
20495: ST_TO_ADDR
20496: GO 20538
20498: LD_INT 1
20500: DOUBLE
20501: EQUAL
20502: IFTRUE 20506
20504: GO 20517
20506: POP
// b_value = 10 ; nation_arabian :
20507: LD_ADDR_VAR 0 13
20511: PUSH
20512: LD_INT 10
20514: ST_TO_ADDR
20515: GO 20538
20517: LD_INT 2
20519: DOUBLE
20520: EQUAL
20521: IFTRUE 20525
20523: GO 20537
20525: POP
// b_value = - 7 ; end ;
20526: LD_ADDR_VAR 0 13
20530: PUSH
20531: LD_INT 7
20533: NEG
20534: ST_TO_ADDR
20535: GO 20538
20537: POP
// end ; b_ext_radar :
20538: GO 20981
20540: LD_INT 20
20542: DOUBLE
20543: EQUAL
20544: IFTRUE 20548
20546: GO 20626
20548: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20549: LD_EXP 45
20553: PUSH
20554: LD_VAR 0 9
20558: ARRAY
20559: PPUSH
20560: CALL_OW 248
20564: PUSH
20565: LD_INT 3
20567: DOUBLE
20568: EQUAL
20569: IFTRUE 20573
20571: GO 20585
20573: POP
// b_value = - 7 ; nation_american :
20574: LD_ADDR_VAR 0 13
20578: PUSH
20579: LD_INT 7
20581: NEG
20582: ST_TO_ADDR
20583: GO 20624
20585: LD_INT 1
20587: DOUBLE
20588: EQUAL
20589: IFTRUE 20593
20591: GO 20604
20593: POP
// b_value = 11 ; nation_arabian :
20594: LD_ADDR_VAR 0 13
20598: PUSH
20599: LD_INT 11
20601: ST_TO_ADDR
20602: GO 20624
20604: LD_INT 2
20606: DOUBLE
20607: EQUAL
20608: IFTRUE 20612
20610: GO 20623
20612: POP
// b_value = 44 ; end ;
20613: LD_ADDR_VAR 0 13
20617: PUSH
20618: LD_INT 44
20620: ST_TO_ADDR
20621: GO 20624
20623: POP
// end ; b_ext_siberium :
20624: GO 20981
20626: LD_INT 21
20628: DOUBLE
20629: EQUAL
20630: IFTRUE 20634
20632: GO 20711
20634: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20635: LD_EXP 45
20639: PUSH
20640: LD_VAR 0 9
20644: ARRAY
20645: PPUSH
20646: CALL_OW 248
20650: PUSH
20651: LD_INT 3
20653: DOUBLE
20654: EQUAL
20655: IFTRUE 20659
20657: GO 20670
20659: POP
// b_value = 75 ; nation_american :
20660: LD_ADDR_VAR 0 13
20664: PUSH
20665: LD_INT 75
20667: ST_TO_ADDR
20668: GO 20709
20670: LD_INT 1
20672: DOUBLE
20673: EQUAL
20674: IFTRUE 20678
20676: GO 20689
20678: POP
// b_value = 12 ; nation_arabian :
20679: LD_ADDR_VAR 0 13
20683: PUSH
20684: LD_INT 12
20686: ST_TO_ADDR
20687: GO 20709
20689: LD_INT 2
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20697
20695: GO 20708
20697: POP
// b_value = 45 ; end ;
20698: LD_ADDR_VAR 0 13
20702: PUSH
20703: LD_INT 45
20705: ST_TO_ADDR
20706: GO 20709
20708: POP
// end ; b_ext_stitch :
20709: GO 20981
20711: LD_INT 23
20713: DOUBLE
20714: EQUAL
20715: IFTRUE 20719
20717: GO 20798
20719: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20720: LD_EXP 45
20724: PUSH
20725: LD_VAR 0 9
20729: ARRAY
20730: PPUSH
20731: CALL_OW 248
20735: PUSH
20736: LD_INT 3
20738: DOUBLE
20739: EQUAL
20740: IFTRUE 20744
20742: GO 20756
20744: POP
// b_value = - 7 ; nation_american :
20745: LD_ADDR_VAR 0 13
20749: PUSH
20750: LD_INT 7
20752: NEG
20753: ST_TO_ADDR
20754: GO 20796
20756: LD_INT 1
20758: DOUBLE
20759: EQUAL
20760: IFTRUE 20764
20762: GO 20776
20764: POP
// b_value = - 7 ; nation_arabian :
20765: LD_ADDR_VAR 0 13
20769: PUSH
20770: LD_INT 7
20772: NEG
20773: ST_TO_ADDR
20774: GO 20796
20776: LD_INT 2
20778: DOUBLE
20779: EQUAL
20780: IFTRUE 20784
20782: GO 20795
20784: POP
// b_value = 43 ; end ;
20785: LD_ADDR_VAR 0 13
20789: PUSH
20790: LD_INT 43
20792: ST_TO_ADDR
20793: GO 20796
20795: POP
// end ; b_ext_computer :
20796: GO 20981
20798: LD_INT 24
20800: DOUBLE
20801: EQUAL
20802: IFTRUE 20806
20804: GO 20884
20806: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20807: LD_EXP 45
20811: PUSH
20812: LD_VAR 0 9
20816: ARRAY
20817: PPUSH
20818: CALL_OW 248
20822: PUSH
20823: LD_INT 3
20825: DOUBLE
20826: EQUAL
20827: IFTRUE 20831
20829: GO 20842
20831: POP
// b_value = 76 ; nation_american :
20832: LD_ADDR_VAR 0 13
20836: PUSH
20837: LD_INT 76
20839: ST_TO_ADDR
20840: GO 20882
20842: LD_INT 1
20844: DOUBLE
20845: EQUAL
20846: IFTRUE 20850
20848: GO 20861
20850: POP
// b_value = 15 ; nation_arabian :
20851: LD_ADDR_VAR 0 13
20855: PUSH
20856: LD_INT 15
20858: ST_TO_ADDR
20859: GO 20882
20861: LD_INT 2
20863: DOUBLE
20864: EQUAL
20865: IFTRUE 20869
20867: GO 20881
20869: POP
// b_value = - 7 ; end ;
20870: LD_ADDR_VAR 0 13
20874: PUSH
20875: LD_INT 7
20877: NEG
20878: ST_TO_ADDR
20879: GO 20882
20881: POP
// end ; b_ext_laser :
20882: GO 20981
20884: LD_INT 25
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20971
20892: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20893: LD_EXP 45
20897: PUSH
20898: LD_VAR 0 9
20902: ARRAY
20903: PPUSH
20904: CALL_OW 248
20908: PUSH
20909: LD_INT 3
20911: DOUBLE
20912: EQUAL
20913: IFTRUE 20917
20915: GO 20929
20917: POP
// b_value = - 7 ; nation_american :
20918: LD_ADDR_VAR 0 13
20922: PUSH
20923: LD_INT 7
20925: NEG
20926: ST_TO_ADDR
20927: GO 20969
20929: LD_INT 1
20931: DOUBLE
20932: EQUAL
20933: IFTRUE 20937
20935: GO 20948
20937: POP
// b_value = 16 ; nation_arabian :
20938: LD_ADDR_VAR 0 13
20942: PUSH
20943: LD_INT 16
20945: ST_TO_ADDR
20946: GO 20969
20948: LD_INT 2
20950: DOUBLE
20951: EQUAL
20952: IFTRUE 20956
20954: GO 20968
20956: POP
// b_value = - 7 ; end ;
20957: LD_ADDR_VAR 0 13
20961: PUSH
20962: LD_INT 7
20964: NEG
20965: ST_TO_ADDR
20966: GO 20969
20968: POP
// end ; else
20969: GO 20981
20971: POP
// b_value = - 42 ; end ;
20972: LD_ADDR_VAR 0 13
20976: PUSH
20977: LD_INT 42
20979: NEG
20980: ST_TO_ADDR
// SetTaskList ( ai_building_constructor [ base ] , [ [ B , ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] , 0 , b_value , ai_upcoming_building_data [ base ] [ 3 ] , 0 ] ] ) ;
20981: LD_EXP 45
20985: PUSH
20986: LD_VAR 0 9
20990: ARRAY
20991: PPUSH
20992: LD_STRING B
20994: PUSH
20995: LD_EXP 46
20999: PUSH
21000: LD_VAR 0 9
21004: ARRAY
21005: PUSH
21006: LD_INT 1
21008: ARRAY
21009: PUSH
21010: LD_EXP 46
21014: PUSH
21015: LD_VAR 0 9
21019: ARRAY
21020: PUSH
21021: LD_INT 2
21023: ARRAY
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: LD_VAR 0 13
21032: PUSH
21033: LD_EXP 46
21037: PUSH
21038: LD_VAR 0 9
21042: ARRAY
21043: PUSH
21044: LD_INT 3
21046: ARRAY
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: PUSH
21060: EMPTY
21061: LIST
21062: PPUSH
21063: CALL_OW 446
// end ; b_depot :
21067: GO 21564
21069: LD_INT 0
21071: DOUBLE
21072: EQUAL
21073: IFTRUE 21077
21075: GO 21126
21077: POP
// begin ComUpgrade ( ai_depot [ base ] ) ;
21078: LD_EXP 34
21082: PUSH
21083: LD_VAR 0 9
21087: ARRAY
21088: PPUSH
21089: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , ai_depot [ base ] ) ;
21093: LD_ADDR_EXP 42
21097: PUSH
21098: LD_EXP 42
21102: PPUSH
21103: LD_VAR 0 9
21107: PPUSH
21108: LD_EXP 34
21112: PUSH
21113: LD_VAR 0 9
21117: ARRAY
21118: PPUSH
21119: CALL_OW 1
21123: ST_TO_ADDR
// end ; b_workshop :
21124: GO 21564
21126: LD_INT 2
21128: DOUBLE
21129: EQUAL
21130: IFTRUE 21134
21132: GO 21211
21134: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21135: LD_ADDR_VAR 0 6
21139: PUSH
21140: LD_EXP 46
21144: PUSH
21145: LD_VAR 0 9
21149: ARRAY
21150: PUSH
21151: LD_INT 1
21153: ARRAY
21154: PPUSH
21155: LD_EXP 46
21159: PUSH
21160: LD_VAR 0 9
21164: ARRAY
21165: PUSH
21166: LD_INT 2
21168: ARRAY
21169: PPUSH
21170: CALL_OW 428
21174: ST_TO_ADDR
// ComUpgrade ( temp_unit ) ;
21175: LD_VAR 0 6
21179: PPUSH
21180: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21184: LD_ADDR_EXP 42
21188: PUSH
21189: LD_EXP 42
21193: PPUSH
21194: LD_VAR 0 9
21198: PPUSH
21199: LD_VAR 0 6
21203: PPUSH
21204: CALL_OW 1
21208: ST_TO_ADDR
// end ; b_lab , b_lab_half :
21209: GO 21564
21211: LD_INT 6
21213: DOUBLE
21214: EQUAL
21215: IFTRUE 21225
21217: LD_INT 7
21219: DOUBLE
21220: EQUAL
21221: IFTRUE 21225
21223: GO 21478
21225: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21226: LD_ADDR_VAR 0 6
21230: PUSH
21231: LD_EXP 46
21235: PUSH
21236: LD_VAR 0 9
21240: ARRAY
21241: PUSH
21242: LD_INT 1
21244: ARRAY
21245: PPUSH
21246: LD_EXP 46
21250: PUSH
21251: LD_VAR 0 9
21255: ARRAY
21256: PUSH
21257: LD_INT 2
21259: ARRAY
21260: PPUSH
21261: CALL_OW 428
21265: ST_TO_ADDR
// if ai_upcoming_building_data [ base ] [ 5 ] <> b_lab_basic and not ai_upcoming_building_data [ base ] [ 5 ] in [ GetLabKind ( temp_unit , 1 ) , GetLabKind ( temp_unit , 2 ) ] then
21266: LD_EXP 46
21270: PUSH
21271: LD_VAR 0 9
21275: ARRAY
21276: PUSH
21277: LD_INT 5
21279: ARRAY
21280: PUSH
21281: LD_INT 9
21283: NONEQUAL
21284: PUSH
21285: LD_EXP 46
21289: PUSH
21290: LD_VAR 0 9
21294: ARRAY
21295: PUSH
21296: LD_INT 5
21298: ARRAY
21299: PUSH
21300: LD_VAR 0 6
21304: PPUSH
21305: LD_INT 1
21307: PPUSH
21308: CALL_OW 268
21312: PUSH
21313: LD_VAR 0 6
21317: PPUSH
21318: LD_INT 2
21320: PPUSH
21321: CALL_OW 268
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: IN
21330: NOT
21331: AND
21332: IFFALSE 21360
// ComUpgradeLab ( temp_unit , ai_upcoming_building_data [ base ] [ 5 ] ) else
21334: LD_VAR 0 6
21338: PPUSH
21339: LD_EXP 46
21343: PUSH
21344: LD_VAR 0 9
21348: ARRAY
21349: PUSH
21350: LD_INT 5
21352: ARRAY
21353: PPUSH
21354: CALL_OW 147
21358: GO 21451
// if ai_upcoming_building_data [ base ] [ 6 ] <> b_lab_basic then
21360: LD_EXP 46
21364: PUSH
21365: LD_VAR 0 9
21369: ARRAY
21370: PUSH
21371: LD_INT 6
21373: ARRAY
21374: PUSH
21375: LD_INT 9
21377: NONEQUAL
21378: IFFALSE 21406
// ComUpgradeLab ( temp_unit , ai_upcoming_building_data [ base ] [ 6 ] ) else
21380: LD_VAR 0 6
21384: PPUSH
21385: LD_EXP 46
21389: PUSH
21390: LD_VAR 0 9
21394: ARRAY
21395: PUSH
21396: LD_INT 6
21398: ARRAY
21399: PPUSH
21400: CALL_OW 147
21404: GO 21451
// begin ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
21406: LD_ADDR_EXP 45
21410: PUSH
21411: LD_EXP 45
21415: PPUSH
21416: LD_VAR 0 9
21420: PPUSH
21421: LD_INT 0
21423: PPUSH
21424: CALL_OW 1
21428: ST_TO_ADDR
// ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , [ ] ) ;
21429: LD_ADDR_EXP 46
21433: PUSH
21434: LD_EXP 46
21438: PPUSH
21439: LD_VAR 0 9
21443: PPUSH
21444: EMPTY
21445: PPUSH
21446: CALL_OW 1
21450: ST_TO_ADDR
// end ; ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21451: LD_ADDR_EXP 42
21455: PUSH
21456: LD_EXP 42
21460: PPUSH
21461: LD_VAR 0 9
21465: PPUSH
21466: LD_VAR 0 6
21470: PPUSH
21471: CALL_OW 1
21475: ST_TO_ADDR
// end ; b_armoury :
21476: GO 21564
21478: LD_INT 4
21480: DOUBLE
21481: EQUAL
21482: IFTRUE 21486
21484: GO 21563
21486: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21487: LD_ADDR_VAR 0 6
21491: PUSH
21492: LD_EXP 46
21496: PUSH
21497: LD_VAR 0 9
21501: ARRAY
21502: PUSH
21503: LD_INT 1
21505: ARRAY
21506: PPUSH
21507: LD_EXP 46
21511: PUSH
21512: LD_VAR 0 9
21516: ARRAY
21517: PUSH
21518: LD_INT 2
21520: ARRAY
21521: PPUSH
21522: CALL_OW 428
21526: ST_TO_ADDR
// ComUpgrade ( temp_unit ) ;
21527: LD_VAR 0 6
21531: PPUSH
21532: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21536: LD_ADDR_EXP 42
21540: PUSH
21541: LD_EXP 42
21545: PPUSH
21546: LD_VAR 0 9
21550: PPUSH
21551: LD_VAR 0 6
21555: PPUSH
21556: CALL_OW 1
21560: ST_TO_ADDR
// end ; end ; end ;
21561: GO 21564
21563: POP
// end ; end ; end ; if ( engineers_list ^ apemen_engineers_list ) > 0 and ai_depot [ base ] > 0 then
21564: LD_VAR 0 3
21568: PUSH
21569: LD_VAR 0 10
21573: ADD
21574: PUSH
21575: LD_INT 0
21577: GREATER
21578: PUSH
21579: LD_EXP 34
21583: PUSH
21584: LD_VAR 0 9
21588: ARRAY
21589: PUSH
21590: LD_INT 0
21592: GREATER
21593: AND
21594: IFFALSE 21678
// begin temp_list = GetListOfCratesInArea ( GetBaseArea ( base ) ) ;
21596: LD_ADDR_VAR 0 4
21600: PUSH
21601: LD_VAR 0 9
21605: PPUSH
21606: CALL 12310 0 1
21610: PPUSH
21611: CALL_OW 435
21615: ST_TO_ADDR
// if temp_list > 0 then
21616: LD_VAR 0 4
21620: PUSH
21621: LD_INT 0
21623: GREATER
21624: IFFALSE 21678
// begin ComCollect ( GetHumansOutOfUnits ( engineers_list ^ apemen_engineers_list ) , temp_list [ 1 ] , temp_list [ 2 ] ) ;
21626: LD_VAR 0 3
21630: PUSH
21631: LD_VAR 0 10
21635: ADD
21636: PPUSH
21637: CALL 23196 0 1
21641: PPUSH
21642: LD_VAR 0 4
21646: PUSH
21647: LD_INT 1
21649: ARRAY
21650: PPUSH
21651: LD_VAR 0 4
21655: PUSH
21656: LD_INT 2
21658: ARRAY
21659: PPUSH
21660: CALL_OW 117
// engineers_list = [ ] ;
21664: LD_ADDR_VAR 0 3
21668: PUSH
21669: EMPTY
21670: ST_TO_ADDR
// apemen_engineers_list = [ ] ;
21671: LD_ADDR_VAR 0 10
21675: PUSH
21676: EMPTY
21677: ST_TO_ADDR
// end ; end ; end ; DistributeHumansToBuildings ( base , engineers_list ^ apemen_engineers_list , UnitFilter ( ai_depot [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_engineer , 6 , false , false ) ;
21678: LD_VAR 0 9
21682: PPUSH
21683: LD_VAR 0 3
21687: PUSH
21688: LD_VAR 0 10
21692: ADD
21693: PPUSH
21694: LD_EXP 34
21698: PUSH
21699: LD_VAR 0 9
21703: ARRAY
21704: PPUSH
21705: LD_INT 50
21707: PUSH
21708: EMPTY
21709: LIST
21710: PUSH
21711: LD_INT 3
21713: PUSH
21714: LD_INT 57
21716: PUSH
21717: EMPTY
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PPUSH
21728: CALL_OW 72
21732: PPUSH
21733: LD_INT 2
21735: PPUSH
21736: LD_INT 6
21738: PPUSH
21739: LD_INT 0
21741: PPUSH
21742: LD_INT 0
21744: PPUSH
21745: CALL 15267 0 7
// if crane_usable and ai_crane [ base ] <> ai_building_constructor [ base ] then
21749: LD_VAR 0 12
21753: PUSH
21754: LD_EXP 70
21758: PUSH
21759: LD_VAR 0 9
21763: ARRAY
21764: PUSH
21765: LD_EXP 45
21769: PUSH
21770: LD_VAR 0 9
21774: ARRAY
21775: NONEQUAL
21776: AND
21777: IFFALSE 21852
// if not IsInArea ( ai_crane [ base ] , GetBaseArea ( base ) ) then
21779: LD_EXP 70
21783: PUSH
21784: LD_VAR 0 9
21788: ARRAY
21789: PPUSH
21790: LD_VAR 0 9
21794: PPUSH
21795: CALL 12310 0 1
21799: PPUSH
21800: CALL_OW 308
21804: NOT
21805: IFFALSE 21852
// ComMoveXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
21807: LD_EXP 70
21811: PUSH
21812: LD_VAR 0 9
21816: ARRAY
21817: PPUSH
21818: LD_EXP 41
21822: PUSH
21823: LD_VAR 0 9
21827: ARRAY
21828: PUSH
21829: LD_INT 1
21831: ARRAY
21832: PPUSH
21833: LD_EXP 41
21837: PUSH
21838: LD_VAR 0 9
21842: ARRAY
21843: PUSH
21844: LD_INT 2
21846: ARRAY
21847: PPUSH
21848: CALL_OW 111
// end ;
21852: GO 16619
21854: POP
21855: POP
// until false ;
21856: LD_INT 0
21858: IFFALSE 16602
// end ;
21860: PPOPN 15
21862: END
// on BuildingStarted ( building , builder ) do var side , temp_list , base , i ;
21863: LD_INT 0
21865: PPUSH
21866: PPUSH
21867: PPUSH
21868: PPUSH
// begin side = GetSide ( building ) ;
21869: LD_ADDR_VAR 0 3
21873: PUSH
21874: LD_VAR 0 1
21878: PPUSH
21879: CALL_OW 255
21883: ST_TO_ADDR
// if side = you then
21884: LD_VAR 0 3
21888: PUSH
21889: LD_EXP 2
21893: EQUAL
21894: IFFALSE 21898
// exit ;
21896: GO 21973
// base = FindBase ( building ) ;
21898: LD_ADDR_VAR 0 5
21902: PUSH
21903: LD_VAR 0 1
21907: PPUSH
21908: CALL 12529 0 1
21912: ST_TO_ADDR
// if base = 0 then
21913: LD_VAR 0 5
21917: PUSH
21918: LD_INT 0
21920: EQUAL
21921: IFFALSE 21925
// exit ;
21923: GO 21973
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
21925: LD_ADDR_EXP 45
21929: PUSH
21930: LD_EXP 45
21934: PPUSH
21935: LD_VAR 0 5
21939: PPUSH
21940: LD_INT 0
21942: PPUSH
21943: CALL_OW 1
21947: ST_TO_ADDR
// ai_building_under_construction = Replace ( ai_building_under_construction , base , building ) ;
21948: LD_ADDR_EXP 42
21952: PUSH
21953: LD_EXP 42
21957: PPUSH
21958: LD_VAR 0 5
21962: PPUSH
21963: LD_VAR 0 1
21967: PPUSH
21968: CALL_OW 1
21972: ST_TO_ADDR
// end ;
21973: PPOPN 6
21975: END
// on BuildingComplete ( building ) do var side , temp_list , temp_unit , base , i ;
21976: LD_INT 0
21978: PPUSH
21979: PPUSH
21980: PPUSH
21981: PPUSH
21982: PPUSH
// begin side = GetSide ( building ) ;
21983: LD_ADDR_VAR 0 2
21987: PUSH
21988: LD_VAR 0 1
21992: PPUSH
21993: CALL_OW 255
21997: ST_TO_ADDR
// if side = you then
21998: LD_VAR 0 2
22002: PUSH
22003: LD_EXP 2
22007: EQUAL
22008: IFFALSE 22012
// exit ;
22010: GO 22117
// base = FindBase ( building ) ;
22012: LD_ADDR_VAR 0 5
22016: PUSH
22017: LD_VAR 0 1
22021: PPUSH
22022: CALL 12529 0 1
22026: ST_TO_ADDR
// if base = 0 then
22027: LD_VAR 0 5
22031: PUSH
22032: LD_INT 0
22034: EQUAL
22035: IFFALSE 22039
// exit ;
22037: GO 22117
// BuildUpgradeCommon ( base , building ) ;
22039: LD_VAR 0 5
22043: PPUSH
22044: LD_VAR 0 1
22048: PPUSH
22049: CALL 22198 0 2
// temp_list = ai_all_buildings [ base ] ^ building ;
22053: LD_ADDR_VAR 0 3
22057: PUSH
22058: LD_EXP 44
22062: PUSH
22063: LD_VAR 0 5
22067: ARRAY
22068: PUSH
22069: LD_VAR 0 1
22073: ADD
22074: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
22075: LD_ADDR_EXP 44
22079: PUSH
22080: LD_EXP 44
22084: PPUSH
22085: LD_VAR 0 5
22089: PPUSH
22090: LD_VAR 0 3
22094: PPUSH
22095: CALL_OW 1
22099: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , building , true ) ;
22100: LD_VAR 0 5
22104: PPUSH
22105: LD_VAR 0 1
22109: PPUSH
22110: LD_INT 1
22112: PPUSH
22113: CALL 7037 0 3
// end ;
22117: PPOPN 6
22119: END
// on UpgradeComplete ( building ) do var side , temp_list , base ;
22120: LD_INT 0
22122: PPUSH
22123: PPUSH
22124: PPUSH
// begin side = GetSide ( building ) ;
22125: LD_ADDR_VAR 0 2
22129: PUSH
22130: LD_VAR 0 1
22134: PPUSH
22135: CALL_OW 255
22139: ST_TO_ADDR
// if side = you then
22140: LD_VAR 0 2
22144: PUSH
22145: LD_EXP 2
22149: EQUAL
22150: IFFALSE 22154
// exit ;
22152: GO 22195
// base = FindBase ( building ) ;
22154: LD_ADDR_VAR 0 4
22158: PUSH
22159: LD_VAR 0 1
22163: PPUSH
22164: CALL 12529 0 1
22168: ST_TO_ADDR
// if base = 0 then
22169: LD_VAR 0 4
22173: PUSH
22174: LD_INT 0
22176: EQUAL
22177: IFFALSE 22181
// exit ;
22179: GO 22195
// BuildUpgradeCommon ( base , building ) ;
22181: LD_VAR 0 4
22185: PPUSH
22186: LD_VAR 0 1
22190: PPUSH
22191: CALL 22198 0 2
// end ;
22195: PPOPN 4
22197: END
// function BuildUpgradeCommon ( base , building ) ; begin
22198: LD_INT 0
22200: PPUSH
// if GetBType ( building ) = ai_upcoming_building_data [ base ] [ 4 ] then
22201: LD_VAR 0 2
22205: PPUSH
22206: CALL_OW 266
22210: PUSH
22211: LD_EXP 46
22215: PUSH
22216: LD_VAR 0 1
22220: ARRAY
22221: PUSH
22222: LD_INT 4
22224: ARRAY
22225: EQUAL
22226: IFFALSE 22250
// ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , [ ] ) ;
22228: LD_ADDR_EXP 46
22232: PUSH
22233: LD_EXP 46
22237: PPUSH
22238: LD_VAR 0 1
22242: PPUSH
22243: EMPTY
22244: PPUSH
22245: CALL_OW 1
22249: ST_TO_ADDR
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
22250: LD_ADDR_EXP 42
22254: PUSH
22255: LD_EXP 42
22259: PPUSH
22260: LD_VAR 0 1
22264: PPUSH
22265: LD_INT 0
22267: PPUSH
22268: CALL_OW 1
22272: ST_TO_ADDR
// end ;
22273: LD_VAR 0 3
22277: RET
// on BuildingCaptured ( captured_building , building_former_side , capturing_unit ) do var temp_list , base ;
22278: LD_INT 0
22280: PPUSH
22281: PPUSH
// begin if captured_building in ai_depot then
22282: LD_VAR 0 1
22286: PUSH
22287: LD_EXP 34
22291: IN
22292: IFFALSE 22607
// begin case captured_building of ai_depot [ 1 ] :
22294: LD_VAR 0 1
22298: PUSH
22299: LD_EXP 34
22303: PUSH
22304: LD_INT 1
22306: ARRAY
22307: DOUBLE
22308: EQUAL
22309: IFTRUE 22313
22311: GO 22408
22313: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22314: LD_VAR 0 1
22318: PPUSH
22319: CALL_OW 274
22323: PPUSH
22324: LD_INT 1
22326: PPUSH
22327: LD_INT 200
22329: PUSH
22330: LD_INT 0
22332: PPUSH
22333: LD_INT 7
22335: PPUSH
22336: CALL_OW 12
22340: PUSH
22341: LD_INT 10
22343: MUL
22344: PLUS
22345: PPUSH
22346: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 0 ) ;
22350: LD_VAR 0 1
22354: PPUSH
22355: CALL_OW 274
22359: PPUSH
22360: LD_INT 2
22362: PPUSH
22363: LD_INT 0
22365: PPUSH
22366: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22370: LD_VAR 0 1
22374: PPUSH
22375: CALL_OW 274
22379: PPUSH
22380: LD_INT 3
22382: PPUSH
22383: LD_INT 80
22385: PUSH
22386: LD_INT 0
22388: PPUSH
22389: LD_INT 10
22391: PPUSH
22392: CALL_OW 12
22396: PUSH
22397: LD_INT 5
22399: MUL
22400: PLUS
22401: PPUSH
22402: CALL_OW 277
// end ; ai_depot [ 2 ] :
22406: GO 22607
22408: LD_EXP 34
22412: PUSH
22413: LD_INT 2
22415: ARRAY
22416: DOUBLE
22417: EQUAL
22418: IFTRUE 22422
22420: GO 22485
22422: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 100 ) ;
22423: LD_VAR 0 1
22427: PPUSH
22428: CALL_OW 274
22432: PPUSH
22433: LD_INT 1
22435: PPUSH
22436: LD_INT 100
22438: PPUSH
22439: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 55 ) ;
22443: LD_VAR 0 1
22447: PPUSH
22448: CALL_OW 274
22452: PPUSH
22453: LD_INT 2
22455: PPUSH
22456: LD_INT 55
22458: PPUSH
22459: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 20 ) ;
22463: LD_VAR 0 1
22467: PPUSH
22468: CALL_OW 274
22472: PPUSH
22473: LD_INT 3
22475: PPUSH
22476: LD_INT 20
22478: PPUSH
22479: CALL_OW 277
// end ; ai_depot [ 3 ] :
22483: GO 22607
22485: LD_EXP 34
22489: PUSH
22490: LD_INT 3
22492: ARRAY
22493: DOUBLE
22494: EQUAL
22495: IFTRUE 22499
22497: GO 22606
22499: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22500: LD_VAR 0 1
22504: PPUSH
22505: CALL_OW 274
22509: PPUSH
22510: LD_INT 1
22512: PPUSH
22513: LD_INT 200
22515: PUSH
22516: LD_INT 0
22518: PPUSH
22519: LD_INT 7
22521: PPUSH
22522: CALL_OW 12
22526: PUSH
22527: LD_INT 10
22529: MUL
22530: PLUS
22531: PPUSH
22532: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 400 + Rand ( 0 , 100 ) ) ;
22536: LD_VAR 0 1
22540: PPUSH
22541: CALL_OW 274
22545: PPUSH
22546: LD_INT 2
22548: PPUSH
22549: LD_INT 400
22551: PUSH
22552: LD_INT 0
22554: PPUSH
22555: LD_INT 100
22557: PPUSH
22558: CALL_OW 12
22562: PLUS
22563: PPUSH
22564: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22568: LD_VAR 0 1
22572: PPUSH
22573: CALL_OW 274
22577: PPUSH
22578: LD_INT 3
22580: PPUSH
22581: LD_INT 80
22583: PUSH
22584: LD_INT 0
22586: PPUSH
22587: LD_INT 10
22589: PPUSH
22590: CALL_OW 12
22594: PUSH
22595: LD_INT 5
22597: MUL
22598: PLUS
22599: PPUSH
22600: CALL_OW 277
// end ; end ;
22604: GO 22607
22606: POP
// end ; base = FindBase ( captured_building ) ;
22607: LD_ADDR_VAR 0 5
22611: PUSH
22612: LD_VAR 0 1
22616: PPUSH
22617: CALL 12529 0 1
22621: ST_TO_ADDR
// if base = 0 then
22622: LD_VAR 0 5
22626: PUSH
22627: LD_INT 0
22629: EQUAL
22630: IFFALSE 22634
// exit ;
22632: GO 22865
// if building_former_side = GetBaseSide ( base ) then
22634: LD_VAR 0 2
22638: PUSH
22639: LD_VAR 0 5
22643: PPUSH
22644: CALL 12381 0 1
22648: EQUAL
22649: IFFALSE 22732
// begin if captured_building in ai_all_buildings [ base ] then
22651: LD_VAR 0 1
22655: PUSH
22656: LD_EXP 44
22660: PUSH
22661: LD_VAR 0 5
22665: ARRAY
22666: IN
22667: IFFALSE 22730
// begin RemoveBuildingFromVariables ( base , captured_building ) ;
22669: LD_VAR 0 5
22673: PPUSH
22674: LD_VAR 0 1
22678: PPUSH
22679: CALL 11008 0 2
// temp_list = ai_captured_buildings [ base ] ^ captured_building ;
22683: LD_ADDR_VAR 0 4
22687: PUSH
22688: LD_EXP 78
22692: PUSH
22693: LD_VAR 0 5
22697: ARRAY
22698: PUSH
22699: LD_VAR 0 1
22703: ADD
22704: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
22705: LD_ADDR_EXP 78
22709: PUSH
22710: LD_EXP 78
22714: PPUSH
22715: LD_VAR 0 5
22719: PPUSH
22720: LD_VAR 0 4
22724: PPUSH
22725: CALL_OW 1
22729: ST_TO_ADDR
// end ; end else
22730: GO 22865
// begin if GetSide ( captured_building ) = GetBaseSide ( base ) then
22732: LD_VAR 0 1
22736: PPUSH
22737: CALL_OW 255
22741: PUSH
22742: LD_VAR 0 5
22746: PPUSH
22747: CALL 12381 0 1
22751: EQUAL
22752: IFFALSE 22865
// begin temp_list = ai_all_buildings [ base ] ^ captured_building ;
22754: LD_ADDR_VAR 0 4
22758: PUSH
22759: LD_EXP 44
22763: PUSH
22764: LD_VAR 0 5
22768: ARRAY
22769: PUSH
22770: LD_VAR 0 1
22774: ADD
22775: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
22776: LD_ADDR_EXP 44
22780: PUSH
22781: LD_EXP 44
22785: PPUSH
22786: LD_VAR 0 5
22790: PPUSH
22791: LD_VAR 0 4
22795: PPUSH
22796: CALL_OW 1
22800: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , captured_building , true ) ;
22801: LD_VAR 0 5
22805: PPUSH
22806: LD_VAR 0 1
22810: PPUSH
22811: LD_INT 1
22813: PPUSH
22814: CALL 7037 0 3
// temp_list = ai_captured_buildings [ base ] diff captured_building ;
22818: LD_ADDR_VAR 0 4
22822: PUSH
22823: LD_EXP 78
22827: PUSH
22828: LD_VAR 0 5
22832: ARRAY
22833: PUSH
22834: LD_VAR 0 1
22838: DIFF
22839: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
22840: LD_ADDR_EXP 78
22844: PUSH
22845: LD_EXP 78
22849: PPUSH
22850: LD_VAR 0 5
22854: PPUSH
22855: LD_VAR 0 4
22859: PPUSH
22860: CALL_OW 1
22864: ST_TO_ADDR
// end ; end ; end ;
22865: PPOPN 5
22867: END
// on UnitGoesToRed ( un ) do begin if un in ai_depot then
22868: LD_VAR 0 1
22872: PUSH
22873: LD_EXP 34
22877: IN
22878: IFFALSE 23193
// begin case un of ai_depot [ 1 ] :
22880: LD_VAR 0 1
22884: PUSH
22885: LD_EXP 34
22889: PUSH
22890: LD_INT 1
22892: ARRAY
22893: DOUBLE
22894: EQUAL
22895: IFTRUE 22899
22897: GO 22994
22899: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 274
22909: PPUSH
22910: LD_INT 1
22912: PPUSH
22913: LD_INT 200
22915: PUSH
22916: LD_INT 0
22918: PPUSH
22919: LD_INT 7
22921: PPUSH
22922: CALL_OW 12
22926: PUSH
22927: LD_INT 10
22929: MUL
22930: PLUS
22931: PPUSH
22932: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 0 ) ;
22936: LD_VAR 0 1
22940: PPUSH
22941: CALL_OW 274
22945: PPUSH
22946: LD_INT 2
22948: PPUSH
22949: LD_INT 0
22951: PPUSH
22952: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 274
22965: PPUSH
22966: LD_INT 3
22968: PPUSH
22969: LD_INT 80
22971: PUSH
22972: LD_INT 0
22974: PPUSH
22975: LD_INT 10
22977: PPUSH
22978: CALL_OW 12
22982: PUSH
22983: LD_INT 5
22985: MUL
22986: PLUS
22987: PPUSH
22988: CALL_OW 277
// end ; ai_depot [ 2 ] :
22992: GO 23193
22994: LD_EXP 34
22998: PUSH
22999: LD_INT 2
23001: ARRAY
23002: DOUBLE
23003: EQUAL
23004: IFTRUE 23008
23006: GO 23071
23008: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 100 ) ;
23009: LD_VAR 0 1
23013: PPUSH
23014: CALL_OW 274
23018: PPUSH
23019: LD_INT 1
23021: PPUSH
23022: LD_INT 100
23024: PPUSH
23025: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 55 ) ;
23029: LD_VAR 0 1
23033: PPUSH
23034: CALL_OW 274
23038: PPUSH
23039: LD_INT 2
23041: PPUSH
23042: LD_INT 55
23044: PPUSH
23045: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 20 ) ;
23049: LD_VAR 0 1
23053: PPUSH
23054: CALL_OW 274
23058: PPUSH
23059: LD_INT 3
23061: PPUSH
23062: LD_INT 20
23064: PPUSH
23065: CALL_OW 277
// end ; ai_depot [ 3 ] :
23069: GO 23193
23071: LD_EXP 34
23075: PUSH
23076: LD_INT 3
23078: ARRAY
23079: DOUBLE
23080: EQUAL
23081: IFTRUE 23085
23083: GO 23192
23085: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
23086: LD_VAR 0 1
23090: PPUSH
23091: CALL_OW 274
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: LD_INT 200
23101: PUSH
23102: LD_INT 0
23104: PPUSH
23105: LD_INT 7
23107: PPUSH
23108: CALL_OW 12
23112: PUSH
23113: LD_INT 10
23115: MUL
23116: PLUS
23117: PPUSH
23118: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 400 + Rand ( 0 , 100 ) ) ;
23122: LD_VAR 0 1
23126: PPUSH
23127: CALL_OW 274
23131: PPUSH
23132: LD_INT 2
23134: PPUSH
23135: LD_INT 400
23137: PUSH
23138: LD_INT 0
23140: PPUSH
23141: LD_INT 100
23143: PPUSH
23144: CALL_OW 12
23148: PLUS
23149: PPUSH
23150: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
23154: LD_VAR 0 1
23158: PPUSH
23159: CALL_OW 274
23163: PPUSH
23164: LD_INT 3
23166: PPUSH
23167: LD_INT 80
23169: PUSH
23170: LD_INT 0
23172: PPUSH
23173: LD_INT 10
23175: PPUSH
23176: CALL_OW 12
23180: PUSH
23181: LD_INT 5
23183: MUL
23184: PLUS
23185: PPUSH
23186: CALL_OW 277
// end ; end ;
23190: GO 23193
23192: POP
// end ; end ;
23193: PPOPN 1
23195: END
// export function GetHumansOutOfUnits ( un_list ) ; var i ; begin
23196: LD_INT 0
23198: PPUSH
23199: PPUSH
// result = [ ] ;
23200: LD_ADDR_VAR 0 2
23204: PUSH
23205: EMPTY
23206: ST_TO_ADDR
// for i in un_list do
23207: LD_ADDR_VAR 0 3
23211: PUSH
23212: LD_VAR 0 1
23216: PUSH
23217: FOR_IN
23218: IFFALSE 23294
// case GetType ( IsInUnit ( i ) ) of unit_building :
23220: LD_VAR 0 3
23224: PPUSH
23225: CALL_OW 310
23229: PPUSH
23230: CALL_OW 247
23234: PUSH
23235: LD_INT 3
23237: DOUBLE
23238: EQUAL
23239: IFTRUE 23243
23241: GO 23255
23243: POP
// ComExitBuilding ( i ) ; unit_vehicle :
23244: LD_VAR 0 3
23248: PPUSH
23249: CALL_OW 122
23253: GO 23292
23255: LD_INT 2
23257: DOUBLE
23258: EQUAL
23259: IFTRUE 23263
23261: GO 23275
23263: POP
// ComExitVehicle ( i ) ; else
23264: LD_VAR 0 3
23268: PPUSH
23269: CALL_OW 121
23273: GO 23292
23275: POP
// result = result ^ i ; end ;
23276: LD_ADDR_VAR 0 2
23280: PUSH
23281: LD_VAR 0 2
23285: PUSH
23286: LD_VAR 0 3
23290: ADD
23291: ST_TO_ADDR
23292: GO 23217
23294: POP
23295: POP
// end ;
23296: LD_VAR 0 2
23300: RET
// export function BaseUnderAttack ( base , attack_side ) ; var area , i , val , def_side , temp_list ; begin
23301: LD_INT 0
23303: PPUSH
23304: PPUSH
23305: PPUSH
23306: PPUSH
23307: PPUSH
23308: PPUSH
// result = false ;
23309: LD_ADDR_VAR 0 3
23313: PUSH
23314: LD_INT 0
23316: ST_TO_ADDR
// def_side = GetBaseSide ( base ) ;
23317: LD_ADDR_VAR 0 7
23321: PUSH
23322: LD_VAR 0 1
23326: PPUSH
23327: CALL 12381 0 1
23331: ST_TO_ADDR
// area = GetBaseArea ( base ) ;
23332: LD_ADDR_VAR 0 4
23336: PUSH
23337: LD_VAR 0 1
23341: PPUSH
23342: CALL 12310 0 1
23346: ST_TO_ADDR
// if attack_side = def_side then
23347: LD_VAR 0 2
23351: PUSH
23352: LD_VAR 0 7
23356: EQUAL
23357: IFFALSE 23361
// exit ;
23359: GO 23880
// if attack_side = - 1 then
23361: LD_VAR 0 2
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: EQUAL
23370: IFFALSE 23636
// begin if FilterAllUnits ( [ [ f_enemy , def_side ] , [ f_inarea , area ] ] ) > 0 then
23372: LD_INT 81
23374: PUSH
23375: LD_VAR 0 7
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 95
23386: PUSH
23387: LD_VAR 0 4
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PPUSH
23400: CALL_OW 69
23404: PUSH
23405: LD_INT 0
23407: GREATER
23408: IFFALSE 23420
// begin result = true ;
23410: LD_ADDR_VAR 0 3
23414: PUSH
23415: LD_INT 1
23417: ST_TO_ADDR
// exit ;
23418: GO 23880
// end ; val = true ;
23420: LD_ADDR_VAR 0 6
23424: PUSH
23425: LD_INT 1
23427: ST_TO_ADDR
// for i in ai_contact_time [ def_side ] do
23428: LD_ADDR_VAR 0 5
23432: PUSH
23433: LD_EXP 75
23437: PUSH
23438: LD_VAR 0 7
23442: ARRAY
23443: PUSH
23444: FOR_IN
23445: IFFALSE 23469
// if i < 0 0$10 then
23447: LD_VAR 0 5
23451: PUSH
23452: LD_INT 350
23454: LESS
23455: IFFALSE 23467
// begin val = false ;
23457: LD_ADDR_VAR 0 6
23461: PUSH
23462: LD_INT 0
23464: ST_TO_ADDR
// break ;
23465: GO 23469
// end ;
23467: GO 23444
23469: POP
23470: POP
// if ContactTime ( def_side ) >= 0 0$10 and val then
23471: LD_VAR 0 7
23475: PPUSH
23476: CALL_OW 462
23480: PUSH
23481: LD_INT 350
23483: GREATEREQUAL
23484: PUSH
23485: LD_VAR 0 6
23489: AND
23490: IFFALSE 23494
// exit ;
23492: GO 23880
// temp_list = [ ] ;
23494: LD_ADDR_VAR 0 8
23498: PUSH
23499: EMPTY
23500: ST_TO_ADDR
// for i in ( ai_bases diff base ) do
23501: LD_ADDR_VAR 0 5
23505: PUSH
23506: LD_EXP 58
23510: PUSH
23511: LD_VAR 0 1
23515: DIFF
23516: PUSH
23517: FOR_IN
23518: IFFALSE 23564
// temp_list = Insert ( temp_list , 1 , [ f_not , [ f_inarea , GetBaseArea ( i ) ] ] ) ;
23520: LD_ADDR_VAR 0 8
23524: PUSH
23525: LD_VAR 0 8
23529: PPUSH
23530: LD_INT 1
23532: PPUSH
23533: LD_INT 3
23535: PUSH
23536: LD_INT 95
23538: PUSH
23539: LD_VAR 0 5
23543: PPUSH
23544: CALL 12310 0 1
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PPUSH
23557: CALL_OW 2
23561: ST_TO_ADDR
23562: GO 23517
23564: POP
23565: POP
// temp_list = FilterAllUnits ( [ [ f_enemy , def_side ] , [ f_not , [ f_type , unit_building ] ] ] ^ temp_list ) ;
23566: LD_ADDR_VAR 0 8
23570: PUSH
23571: LD_INT 81
23573: PUSH
23574: LD_VAR 0 7
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 3
23585: PUSH
23586: LD_INT 21
23588: PUSH
23589: LD_INT 3
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_VAR 0 8
23608: ADD
23609: PPUSH
23610: CALL_OW 69
23614: ST_TO_ADDR
// if not AnyNearBaseArea ( temp_list , base ) then
23615: LD_VAR 0 8
23619: PPUSH
23620: LD_VAR 0 1
23624: PPUSH
23625: CALL 23956 0 2
23629: NOT
23630: IFFALSE 23634
// exit ;
23632: GO 23880
// end else
23634: GO 23872
// begin if FilterAllUnits ( [ [ f_side , attack_side ] , [ f_inarea , area ] ] ) > 0 then
23636: LD_INT 22
23638: PUSH
23639: LD_VAR 0 2
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 95
23650: PUSH
23651: LD_VAR 0 4
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PPUSH
23664: CALL_OW 69
23668: PUSH
23669: LD_INT 0
23671: GREATER
23672: IFFALSE 23684
// begin result = true ;
23674: LD_ADDR_VAR 0 3
23678: PUSH
23679: LD_INT 1
23681: ST_TO_ADDR
// exit ;
23682: GO 23880
// end ; if ContactTime ( [ def_side , attack_side ] ) >= 0 0$10 and ai_contact_time [ def_side ] [ attack_side ] >= 0 0$10 then
23684: LD_VAR 0 7
23688: PUSH
23689: LD_VAR 0 2
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PPUSH
23698: CALL_OW 462
23702: PUSH
23703: LD_INT 350
23705: GREATEREQUAL
23706: PUSH
23707: LD_EXP 75
23711: PUSH
23712: LD_VAR 0 7
23716: ARRAY
23717: PUSH
23718: LD_VAR 0 2
23722: ARRAY
23723: PUSH
23724: LD_INT 350
23726: GREATEREQUAL
23727: AND
23728: IFFALSE 23732
// exit ;
23730: GO 23880
// temp_list = [ ] ;
23732: LD_ADDR_VAR 0 8
23736: PUSH
23737: EMPTY
23738: ST_TO_ADDR
// for i in ( ai_bases diff base ) do
23739: LD_ADDR_VAR 0 5
23743: PUSH
23744: LD_EXP 58
23748: PUSH
23749: LD_VAR 0 1
23753: DIFF
23754: PUSH
23755: FOR_IN
23756: IFFALSE 23802
// temp_list = Insert ( temp_list , 1 , [ f_not , [ f_inarea , GetBaseArea ( i ) ] ] ) ;
23758: LD_ADDR_VAR 0 8
23762: PUSH
23763: LD_VAR 0 8
23767: PPUSH
23768: LD_INT 1
23770: PPUSH
23771: LD_INT 3
23773: PUSH
23774: LD_INT 95
23776: PUSH
23777: LD_VAR 0 5
23781: PPUSH
23782: CALL 12310 0 1
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PPUSH
23795: CALL_OW 2
23799: ST_TO_ADDR
23800: GO 23755
23802: POP
23803: POP
// temp_list = FilterAllUnits ( [ [ f_side , attack_side ] , [ f_not , [ f_type , unit_building ] ] ] ^ temp_list ) ;
23804: LD_ADDR_VAR 0 8
23808: PUSH
23809: LD_INT 22
23811: PUSH
23812: LD_VAR 0 2
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 3
23823: PUSH
23824: LD_INT 21
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_VAR 0 8
23846: ADD
23847: PPUSH
23848: CALL_OW 69
23852: ST_TO_ADDR
// if not AnyNearBaseArea ( temp_list , base ) then
23853: LD_VAR 0 8
23857: PPUSH
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL 23956 0 2
23867: NOT
23868: IFFALSE 23872
// exit ;
23870: GO 23880
// end ; result = true ;
23872: LD_ADDR_VAR 0 3
23876: PUSH
23877: LD_INT 1
23879: ST_TO_ADDR
// end ;
23880: LD_VAR 0 3
23884: RET
// export function ListFilterNearArea ( list , area ) ; var i ; begin
23885: LD_INT 0
23887: PPUSH
23888: PPUSH
// result = [ ] ;
23889: LD_ADDR_VAR 0 3
23893: PUSH
23894: EMPTY
23895: ST_TO_ADDR
// for i in list do
23896: LD_ADDR_VAR 0 4
23900: PUSH
23901: LD_VAR 0 1
23905: PUSH
23906: FOR_IN
23907: IFFALSE 23949
// if GetDistUnitArea ( i , area ) <= ai_near_base_dist then
23909: LD_VAR 0 4
23913: PPUSH
23914: LD_VAR 0 2
23918: PPUSH
23919: CALL_OW 299
23923: PUSH
23924: LD_EXP 52
23928: LESSEQUAL
23929: IFFALSE 23947
// result = result ^ i ;
23931: LD_ADDR_VAR 0 3
23935: PUSH
23936: LD_VAR 0 3
23940: PUSH
23941: LD_VAR 0 4
23945: ADD
23946: ST_TO_ADDR
23947: GO 23906
23949: POP
23950: POP
// end ;
23951: LD_VAR 0 3
23955: RET
// function AnyNearBaseArea ( list , base ) ; var i , area ; begin
23956: LD_INT 0
23958: PPUSH
23959: PPUSH
23960: PPUSH
// result = false ;
23961: LD_ADDR_VAR 0 3
23965: PUSH
23966: LD_INT 0
23968: ST_TO_ADDR
// area = GetBaseArea ( base ) ;
23969: LD_ADDR_VAR 0 5
23973: PUSH
23974: LD_VAR 0 2
23978: PPUSH
23979: CALL 12310 0 1
23983: ST_TO_ADDR
// for i in list do
23984: LD_ADDR_VAR 0 4
23988: PUSH
23989: LD_VAR 0 1
23993: PUSH
23994: FOR_IN
23995: IFFALSE 24031
// if GetDistUnitArea ( i , area ) <= ai_near_base_dist then
23997: LD_VAR 0 4
24001: PPUSH
24002: LD_VAR 0 5
24006: PPUSH
24007: CALL_OW 299
24011: PUSH
24012: LD_EXP 52
24016: LESSEQUAL
24017: IFFALSE 24029
// begin result = true ;
24019: LD_ADDR_VAR 0 3
24023: PUSH
24024: LD_INT 1
24026: ST_TO_ADDR
// break ;
24027: GO 24031
// end ;
24029: GO 23994
24031: POP
24032: POP
// end ;
24033: LD_VAR 0 3
24037: RET
// on Command ( com ) do var i , temp_list , hex_list , un , k , target_hex ;
24038: LD_INT 0
24040: PPUSH
24041: PPUSH
24042: PPUSH
24043: PPUSH
24044: PPUSH
24045: PPUSH
// begin CheckCamerasOnCommand ( com ) ;
24046: LD_VAR 0 1
24050: PPUSH
24051: CALL 44911 0 1
// if com = 124 then
24055: LD_VAR 0 1
24059: PUSH
24060: LD_INT 124
24062: EQUAL
24063: IFFALSE 24474
// begin for i in FilterAllUnits ( [ f_side , you ] ) do
24065: LD_ADDR_VAR 0 2
24069: PUSH
24070: LD_INT 22
24072: PUSH
24073: LD_EXP 2
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 69
24086: PUSH
24087: FOR_IN
24088: IFFALSE 24472
// if IsSelected ( i ) and HasTask ( i ) then
24090: LD_VAR 0 2
24094: PPUSH
24095: CALL_OW 306
24099: PUSH
24100: LD_VAR 0 2
24104: PPUSH
24105: CALL_OW 314
24109: AND
24110: IFFALSE 24470
// begin target_hex = [ ] ;
24112: LD_ADDR_VAR 0 7
24116: PUSH
24117: EMPTY
24118: ST_TO_ADDR
// for k in GetTaskList ( i ) do
24119: LD_ADDR_VAR 0 6
24123: PUSH
24124: LD_VAR 0 2
24128: PPUSH
24129: CALL_OW 437
24133: PUSH
24134: FOR_IN
24135: IFFALSE 24182
// if k [ 1 ] = | then
24137: LD_VAR 0 6
24141: PUSH
24142: LD_INT 1
24144: ARRAY
24145: PUSH
24146: LD_STRING |
24148: EQUAL
24149: IFFALSE 24180
// begin target_hex = [ k [ 2 ] , k [ 3 ] ] ;
24151: LD_ADDR_VAR 0 7
24155: PUSH
24156: LD_VAR 0 6
24160: PUSH
24161: LD_INT 2
24163: ARRAY
24164: PUSH
24165: LD_VAR 0 6
24169: PUSH
24170: LD_INT 3
24172: ARRAY
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: ST_TO_ADDR
// break ;
24178: GO 24182
// end ;
24180: GO 24134
24182: POP
24183: POP
// if target_hex > 0 then
24184: LD_VAR 0 7
24188: PUSH
24189: LD_INT 0
24191: GREATER
24192: IFFALSE 24470
// begin hex_list = target_hex ;
24194: LD_ADDR_VAR 0 4
24198: PUSH
24199: LD_VAR 0 7
24203: ST_TO_ADDR
// temp_list = [ ] ;
24204: LD_ADDR_VAR 0 3
24208: PUSH
24209: EMPTY
24210: ST_TO_ADDR
// for k = 0 to 5 do
24211: LD_ADDR_VAR 0 6
24215: PUSH
24216: DOUBLE
24217: LD_INT 0
24219: DEC
24220: ST_TO_ADDR
24221: LD_INT 5
24223: PUSH
24224: FOR_TO
24225: IFFALSE 24295
// temp_list = Insert ( temp_list , 1 , [ ShiftX ( hex_list [ 1 ] , k , 1 ) , ShiftY ( hex_list [ 2 ] , k , 1 ) ] ) ;
24227: LD_ADDR_VAR 0 3
24231: PUSH
24232: LD_VAR 0 3
24236: PPUSH
24237: LD_INT 1
24239: PPUSH
24240: LD_VAR 0 4
24244: PUSH
24245: LD_INT 1
24247: ARRAY
24248: PPUSH
24249: LD_VAR 0 6
24253: PPUSH
24254: LD_INT 1
24256: PPUSH
24257: CALL_OW 272
24261: PUSH
24262: LD_VAR 0 4
24266: PUSH
24267: LD_INT 2
24269: ARRAY
24270: PPUSH
24271: LD_VAR 0 6
24275: PPUSH
24276: LD_INT 1
24278: PPUSH
24279: CALL_OW 273
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PPUSH
24288: CALL_OW 2
24292: ST_TO_ADDR
24293: GO 24224
24295: POP
24296: POP
// hex_list = [ hex_list ] ^ temp_list ;
24297: LD_ADDR_VAR 0 4
24301: PUSH
24302: LD_VAR 0 4
24306: PUSH
24307: EMPTY
24308: LIST
24309: PUSH
24310: LD_VAR 0 3
24314: ADD
24315: ST_TO_ADDR
// temp_list = [ ] ;
24316: LD_ADDR_VAR 0 3
24320: PUSH
24321: EMPTY
24322: ST_TO_ADDR
// for k in hex_list do
24323: LD_ADDR_VAR 0 6
24327: PUSH
24328: LD_VAR 0 4
24332: PUSH
24333: FOR_IN
24334: IFFALSE 24468
// begin un = HexInfo ( k [ 1 ] , k [ 2 ] ) ;
24336: LD_ADDR_VAR 0 5
24340: PUSH
24341: LD_VAR 0 6
24345: PUSH
24346: LD_INT 1
24348: ARRAY
24349: PPUSH
24350: LD_VAR 0 6
24354: PUSH
24355: LD_INT 2
24357: ARRAY
24358: PPUSH
24359: CALL_OW 428
24363: ST_TO_ADDR
// if un > 0 and not un in temp_list then
24364: LD_VAR 0 5
24368: PUSH
24369: LD_INT 0
24371: GREATER
24372: PUSH
24373: LD_VAR 0 5
24377: PUSH
24378: LD_VAR 0 3
24382: IN
24383: NOT
24384: AND
24385: IFFALSE 24466
// begin ai_attack_ground_info_initial = Insert ( ai_attack_ground_info_initial , 1 , [ i , un , GetSide ( un ) , target_hex [ 1 ] , target_hex [ 2 ] ] ) ;
24387: LD_ADDR_EXP 76
24391: PUSH
24392: LD_EXP 76
24396: PPUSH
24397: LD_INT 1
24399: PPUSH
24400: LD_VAR 0 2
24404: PUSH
24405: LD_VAR 0 5
24409: PUSH
24410: LD_VAR 0 5
24414: PPUSH
24415: CALL_OW 255
24419: PUSH
24420: LD_VAR 0 7
24424: PUSH
24425: LD_INT 1
24427: ARRAY
24428: PUSH
24429: LD_VAR 0 7
24433: PUSH
24434: LD_INT 2
24436: ARRAY
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: PPUSH
24445: CALL_OW 2
24449: ST_TO_ADDR
// temp_list = temp_list ^ un ;
24450: LD_ADDR_VAR 0 3
24454: PUSH
24455: LD_VAR 0 3
24459: PUSH
24460: LD_VAR 0 5
24464: ADD
24465: ST_TO_ADDR
// end ; end ;
24466: GO 24333
24468: POP
24469: POP
// end ; end ;
24470: GO 24087
24472: POP
24473: POP
// end ; end ;
24474: PPOPN 7
24476: END
// every 0 0$1 + 0 0$0.1 do var a , b , temp_list , temp_list_2 , yup , i , t ;
24477: GO 24479
24479: DISABLE
24480: LD_INT 0
24482: PPUSH
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
24487: PPUSH
24488: PPUSH
// begin repeat wait ( 0 0$0.5 ) ;
24489: LD_INT 18
24491: PPUSH
24492: CALL_OW 67
// i = 1 ;
24496: LD_ADDR_VAR 0 6
24500: PUSH
24501: LD_INT 1
24503: ST_TO_ADDR
// while i <= ai_attack_ground_info_initial do
24504: LD_VAR 0 6
24508: PUSH
24509: LD_EXP 76
24513: LESSEQUAL
24514: IFFALSE 24677
// begin yup = false ;
24516: LD_ADDR_VAR 0 5
24520: PUSH
24521: LD_INT 0
24523: ST_TO_ADDR
// for t in GetTaskList ( ai_attack_ground_info_initial [ i ] [ 1 ] ) do
24524: LD_ADDR_VAR 0 7
24528: PUSH
24529: LD_EXP 76
24533: PUSH
24534: LD_VAR 0 6
24538: ARRAY
24539: PUSH
24540: LD_INT 1
24542: ARRAY
24543: PPUSH
24544: CALL_OW 437
24548: PUSH
24549: FOR_IN
24550: IFFALSE 24630
// if t [ 1 ] = | then
24552: LD_VAR 0 7
24556: PUSH
24557: LD_INT 1
24559: ARRAY
24560: PUSH
24561: LD_STRING |
24563: EQUAL
24564: IFFALSE 24628
// if t [ 2 ] = ai_attack_ground_info_initial [ i ] [ 4 ] and t [ 3 ] = ai_attack_ground_info_initial [ i ] [ 5 ] then
24566: LD_VAR 0 7
24570: PUSH
24571: LD_INT 2
24573: ARRAY
24574: PUSH
24575: LD_EXP 76
24579: PUSH
24580: LD_VAR 0 6
24584: ARRAY
24585: PUSH
24586: LD_INT 4
24588: ARRAY
24589: EQUAL
24590: PUSH
24591: LD_VAR 0 7
24595: PUSH
24596: LD_INT 3
24598: ARRAY
24599: PUSH
24600: LD_EXP 76
24604: PUSH
24605: LD_VAR 0 6
24609: ARRAY
24610: PUSH
24611: LD_INT 5
24613: ARRAY
24614: EQUAL
24615: AND
24616: IFFALSE 24628
// begin yup = true ;
24618: LD_ADDR_VAR 0 5
24622: PUSH
24623: LD_INT 1
24625: ST_TO_ADDR
// break ;
24626: GO 24630
// end ;
24628: GO 24549
24630: POP
24631: POP
// if not yup then
24632: LD_VAR 0 5
24636: NOT
24637: IFFALSE 24661
// begin ai_attack_ground_info_initial = Delete ( ai_attack_ground_info_initial , i ) ;
24639: LD_ADDR_EXP 76
24643: PUSH
24644: LD_EXP 76
24648: PPUSH
24649: LD_VAR 0 6
24653: PPUSH
24654: CALL_OW 3
24658: ST_TO_ADDR
// continue ;
24659: GO 24504
// end ; i = i + 1 ;
24661: LD_ADDR_VAR 0 6
24665: PUSH
24666: LD_VAR 0 6
24670: PUSH
24671: LD_INT 1
24673: PLUS
24674: ST_TO_ADDR
// end ;
24675: GO 24504
// i = 1 ;
24677: LD_ADDR_VAR 0 6
24681: PUSH
24682: LD_INT 1
24684: ST_TO_ADDR
// while i <= ai_attack_ground_info_sustain do
24685: LD_VAR 0 6
24689: PUSH
24690: LD_EXP 77
24694: LESSEQUAL
24695: IFFALSE 24858
// begin yup = false ;
24697: LD_ADDR_VAR 0 5
24701: PUSH
24702: LD_INT 0
24704: ST_TO_ADDR
// for t in GetTaskList ( ai_attack_ground_info_sustain [ i ] [ 1 ] ) do
24705: LD_ADDR_VAR 0 7
24709: PUSH
24710: LD_EXP 77
24714: PUSH
24715: LD_VAR 0 6
24719: ARRAY
24720: PUSH
24721: LD_INT 1
24723: ARRAY
24724: PPUSH
24725: CALL_OW 437
24729: PUSH
24730: FOR_IN
24731: IFFALSE 24811
// if t [ 1 ] = | then
24733: LD_VAR 0 7
24737: PUSH
24738: LD_INT 1
24740: ARRAY
24741: PUSH
24742: LD_STRING |
24744: EQUAL
24745: IFFALSE 24809
// if t [ 2 ] = ai_attack_ground_info_sustain [ i ] [ 4 ] and t [ 3 ] = ai_attack_ground_info_sustain [ i ] [ 5 ] then
24747: LD_VAR 0 7
24751: PUSH
24752: LD_INT 2
24754: ARRAY
24755: PUSH
24756: LD_EXP 77
24760: PUSH
24761: LD_VAR 0 6
24765: ARRAY
24766: PUSH
24767: LD_INT 4
24769: ARRAY
24770: EQUAL
24771: PUSH
24772: LD_VAR 0 7
24776: PUSH
24777: LD_INT 3
24779: ARRAY
24780: PUSH
24781: LD_EXP 77
24785: PUSH
24786: LD_VAR 0 6
24790: ARRAY
24791: PUSH
24792: LD_INT 5
24794: ARRAY
24795: EQUAL
24796: AND
24797: IFFALSE 24809
// begin yup = true ;
24799: LD_ADDR_VAR 0 5
24803: PUSH
24804: LD_INT 1
24806: ST_TO_ADDR
// break ;
24807: GO 24811
// end ;
24809: GO 24730
24811: POP
24812: POP
// if not yup then
24813: LD_VAR 0 5
24817: NOT
24818: IFFALSE 24842
// begin ai_attack_ground_info_sustain = Delete ( ai_attack_ground_info_sustain , i ) ;
24820: LD_ADDR_EXP 77
24824: PUSH
24825: LD_EXP 77
24829: PPUSH
24830: LD_VAR 0 6
24834: PPUSH
24835: CALL_OW 3
24839: ST_TO_ADDR
// continue ;
24840: GO 24685
// end ; i = i + 1 ;
24842: LD_ADDR_VAR 0 6
24846: PUSH
24847: LD_VAR 0 6
24851: PUSH
24852: LD_INT 1
24854: PLUS
24855: ST_TO_ADDR
// end ;
24856: GO 24685
// temp_list = ai_contact_time ;
24858: LD_ADDR_VAR 0 3
24862: PUSH
24863: LD_EXP 75
24867: ST_TO_ADDR
// for a = 1 to temp_list do
24868: LD_ADDR_VAR 0 1
24872: PUSH
24873: DOUBLE
24874: LD_INT 1
24876: DEC
24877: ST_TO_ADDR
24878: LD_VAR 0 3
24882: PUSH
24883: FOR_TO
24884: IFFALSE 25010
// for b = 1 to temp_list [ a ] do
24886: LD_ADDR_VAR 0 2
24890: PUSH
24891: DOUBLE
24892: LD_INT 1
24894: DEC
24895: ST_TO_ADDR
24896: LD_VAR 0 3
24900: PUSH
24901: LD_VAR 0 1
24905: ARRAY
24906: PUSH
24907: FOR_TO
24908: IFFALSE 25006
// if temp_list [ a ] [ b ] < 100000 then
24910: LD_VAR 0 3
24914: PUSH
24915: LD_VAR 0 1
24919: ARRAY
24920: PUSH
24921: LD_VAR 0 2
24925: ARRAY
24926: PUSH
24927: LD_INT 100000
24929: LESS
24930: IFFALSE 25004
// begin temp_list_2 = Replace ( ai_contact_time [ a ] , b , temp_list [ a ] [ b ] + 0 0$0.5 ) ;
24932: LD_ADDR_VAR 0 4
24936: PUSH
24937: LD_EXP 75
24941: PUSH
24942: LD_VAR 0 1
24946: ARRAY
24947: PPUSH
24948: LD_VAR 0 2
24952: PPUSH
24953: LD_VAR 0 3
24957: PUSH
24958: LD_VAR 0 1
24962: ARRAY
24963: PUSH
24964: LD_VAR 0 2
24968: ARRAY
24969: PUSH
24970: LD_INT 18
24972: PLUS
24973: PPUSH
24974: CALL_OW 1
24978: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a , temp_list_2 ) ;
24979: LD_ADDR_EXP 75
24983: PUSH
24984: LD_EXP 75
24988: PPUSH
24989: LD_VAR 0 1
24993: PPUSH
24994: LD_VAR 0 4
24998: PPUSH
24999: CALL_OW 1
25003: ST_TO_ADDR
// end ;
25004: GO 24907
25006: POP
25007: POP
25008: GO 24883
25010: POP
25011: POP
// for a in ai_attack_ground_info_initial do
25012: LD_ADDR_VAR 0 1
25016: PUSH
25017: LD_EXP 76
25021: PUSH
25022: FOR_IN
25023: IFFALSE 25229
// begin if IsDead ( a [ 2 ] ) or UnitShoot ( a [ 2 ] ) = a [ 1 ] then
25025: LD_VAR 0 1
25029: PUSH
25030: LD_INT 2
25032: ARRAY
25033: PPUSH
25034: CALL_OW 301
25038: PUSH
25039: LD_VAR 0 1
25043: PUSH
25044: LD_INT 2
25046: ARRAY
25047: PPUSH
25048: CALL_OW 504
25052: PUSH
25053: LD_VAR 0 1
25057: PUSH
25058: LD_INT 1
25060: ARRAY
25061: EQUAL
25062: OR
25063: IFFALSE 25227
// begin temp_list = Replace ( ai_contact_time [ you ] , a [ 3 ] , 0 ) ;
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: LD_EXP 75
25074: PUSH
25075: LD_EXP 2
25079: ARRAY
25080: PPUSH
25081: LD_VAR 0 1
25085: PUSH
25086: LD_INT 3
25088: ARRAY
25089: PPUSH
25090: LD_INT 0
25092: PPUSH
25093: CALL_OW 1
25097: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , you , temp_list ) ;
25098: LD_ADDR_EXP 75
25102: PUSH
25103: LD_EXP 75
25107: PPUSH
25108: LD_EXP 2
25112: PPUSH
25113: LD_VAR 0 3
25117: PPUSH
25118: CALL_OW 1
25122: ST_TO_ADDR
// temp_list = Replace ( ai_contact_time [ a [ 3 ] ] , you , 0 ) ;
25123: LD_ADDR_VAR 0 3
25127: PUSH
25128: LD_EXP 75
25132: PUSH
25133: LD_VAR 0 1
25137: PUSH
25138: LD_INT 3
25140: ARRAY
25141: ARRAY
25142: PPUSH
25143: LD_EXP 2
25147: PPUSH
25148: LD_INT 0
25150: PPUSH
25151: CALL_OW 1
25155: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a [ 3 ] , temp_list ) ;
25156: LD_ADDR_EXP 75
25160: PUSH
25161: LD_EXP 75
25165: PPUSH
25166: LD_VAR 0 1
25170: PUSH
25171: LD_INT 3
25173: ARRAY
25174: PPUSH
25175: LD_VAR 0 3
25179: PPUSH
25180: CALL_OW 1
25184: ST_TO_ADDR
// ai_attack_ground_info_initial = ai_attack_ground_info_initial diff [ a ] ;
25185: LD_ADDR_EXP 76
25189: PUSH
25190: LD_EXP 76
25194: PUSH
25195: LD_VAR 0 1
25199: PUSH
25200: EMPTY
25201: LIST
25202: DIFF
25203: ST_TO_ADDR
// ai_attack_ground_info_sustain = Insert ( ai_attack_ground_info_sustain , 1 , a ) ;
25204: LD_ADDR_EXP 77
25208: PUSH
25209: LD_EXP 77
25213: PPUSH
25214: LD_INT 1
25216: PPUSH
25217: LD_VAR 0 1
25221: PPUSH
25222: CALL_OW 2
25226: ST_TO_ADDR
// end ; end ;
25227: GO 25022
25229: POP
25230: POP
// for a in ai_attack_ground_info_sustain do
25231: LD_ADDR_VAR 0 1
25235: PUSH
25236: LD_EXP 77
25240: PUSH
25241: FOR_IN
25242: IFFALSE 25366
// begin temp_list = Replace ( ai_contact_time [ you ] , a [ 3 ] , 0 ) ;
25244: LD_ADDR_VAR 0 3
25248: PUSH
25249: LD_EXP 75
25253: PUSH
25254: LD_EXP 2
25258: ARRAY
25259: PPUSH
25260: LD_VAR 0 1
25264: PUSH
25265: LD_INT 3
25267: ARRAY
25268: PPUSH
25269: LD_INT 0
25271: PPUSH
25272: CALL_OW 1
25276: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , you , temp_list ) ;
25277: LD_ADDR_EXP 75
25281: PUSH
25282: LD_EXP 75
25286: PPUSH
25287: LD_EXP 2
25291: PPUSH
25292: LD_VAR 0 3
25296: PPUSH
25297: CALL_OW 1
25301: ST_TO_ADDR
// temp_list = Replace ( ai_contact_time [ a [ 3 ] ] , you , 0 ) ;
25302: LD_ADDR_VAR 0 3
25306: PUSH
25307: LD_EXP 75
25311: PUSH
25312: LD_VAR 0 1
25316: PUSH
25317: LD_INT 3
25319: ARRAY
25320: ARRAY
25321: PPUSH
25322: LD_EXP 2
25326: PPUSH
25327: LD_INT 0
25329: PPUSH
25330: CALL_OW 1
25334: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a [ 3 ] , temp_list ) ;
25335: LD_ADDR_EXP 75
25339: PUSH
25340: LD_EXP 75
25344: PPUSH
25345: LD_VAR 0 1
25349: PUSH
25350: LD_INT 3
25352: ARRAY
25353: PPUSH
25354: LD_VAR 0 3
25358: PPUSH
25359: CALL_OW 1
25363: ST_TO_ADDR
// end ;
25364: GO 25241
25366: POP
25367: POP
// until false ;
25368: LD_INT 0
25370: IFFALSE 24489
// end ;
25372: PPOPN 7
25374: END
// every 0 0$1 do var side , i , mechanics_list , temp_list , taken_vehicles , temp_list_3 , temp_unit , vehicles_list , allowed_to_repair_vehicles ; var under_attack , free_parking_spots , k , ready_to_attack , base , area , free_spaces , temp_list_2 , remote_mechanics ; var destroy_gensher_base , temp_list_4 , temp_list_5 , n , a ; var remote_driver_vehicles ;
25375: GO 25377
25377: DISABLE
25378: LD_INT 0
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
25397: PPUSH
25398: PPUSH
25399: PPUSH
25400: PPUSH
25401: PPUSH
25402: PPUSH
25403: PPUSH
// begin remote_driver_vehicles = [ [ ] , [ ] , [ ] ] ;
25404: LD_ADDR_VAR 0 24
25408: PUSH
25409: EMPTY
25410: PUSH
25411: EMPTY
25412: PUSH
25413: EMPTY
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25420: LD_INT 35
25422: PPUSH
25423: CALL_OW 67
// for base in ai_bases do
25427: LD_ADDR_VAR 0 14
25431: PUSH
25432: LD_EXP 58
25436: PUSH
25437: FOR_IN
25438: IFFALSE 30052
// begin side = GetBaseSide ( base ) ;
25440: LD_ADDR_VAR 0 1
25444: PUSH
25445: LD_VAR 0 14
25449: PPUSH
25450: CALL 12381 0 1
25454: ST_TO_ADDR
// under_attack = BaseUnderAttack ( base , - 1 ) ;
25455: LD_ADDR_VAR 0 10
25459: PUSH
25460: LD_VAR 0 14
25464: PPUSH
25465: LD_INT 1
25467: NEG
25468: PPUSH
25469: CALL 23301 0 2
25473: ST_TO_ADDR
// ready_to_attack = not under_attack ;
25474: LD_ADDR_VAR 0 13
25478: PUSH
25479: LD_VAR 0 10
25483: NOT
25484: ST_TO_ADDR
// if base = 1 and GetAttitude ( americans , you_alt ) = att_enemy and FilterAllUnits ( [ [ f_inarea , Gensher_base ] , [ f_type , unit_building ] ] ) > 0 then
25485: LD_VAR 0 14
25489: PUSH
25490: LD_INT 1
25492: EQUAL
25493: PUSH
25494: LD_EXP 6
25498: PPUSH
25499: LD_EXP 5
25503: PPUSH
25504: CALL_OW 81
25508: PUSH
25509: LD_INT 2
25511: EQUAL
25512: AND
25513: PUSH
25514: LD_INT 95
25516: PUSH
25517: LD_INT 7
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 21
25526: PUSH
25527: LD_INT 3
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PPUSH
25538: CALL_OW 69
25542: PUSH
25543: LD_INT 0
25545: GREATER
25546: AND
25547: IFFALSE 25559
// destroy_gensher_base = true else
25549: LD_ADDR_VAR 0 19
25553: PUSH
25554: LD_INT 1
25556: ST_TO_ADDR
25557: GO 25567
// destroy_gensher_base = false ;
25559: LD_ADDR_VAR 0 19
25563: PUSH
25564: LD_INT 0
25566: ST_TO_ADDR
// mechanics_list = ai_mechanics_defend [ base ] diff ai_heal_these_humans [ base ] ;
25567: LD_ADDR_VAR 0 3
25571: PUSH
25572: LD_EXP 31
25576: PUSH
25577: LD_VAR 0 14
25581: ARRAY
25582: PUSH
25583: LD_EXP 43
25587: PUSH
25588: LD_VAR 0 14
25592: ARRAY
25593: DIFF
25594: ST_TO_ADDR
// remote_mechanics = [ ] ;
25595: LD_ADDR_VAR 0 18
25599: PUSH
25600: EMPTY
25601: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
25602: LD_ADDR_VAR 0 4
25606: PUSH
25607: LD_EXP 43
25611: PUSH
25612: LD_VAR 0 14
25616: ARRAY
25617: ST_TO_ADDR
// i = 1 ;
25618: LD_ADDR_VAR 0 2
25622: PUSH
25623: LD_INT 1
25625: ST_TO_ADDR
// while i <= mechanics_list do
25626: LD_VAR 0 2
25630: PUSH
25631: LD_VAR 0 3
25635: LESSEQUAL
25636: IFFALSE 25719
// begin if GetLives ( mechanics_list [ i ] ) <= 900 then
25638: LD_VAR 0 3
25642: PUSH
25643: LD_VAR 0 2
25647: ARRAY
25648: PPUSH
25649: CALL_OW 256
25653: PUSH
25654: LD_INT 900
25656: LESSEQUAL
25657: IFFALSE 25703
// begin temp_list = temp_list ^ mechanics_list [ i ] ;
25659: LD_ADDR_VAR 0 4
25663: PUSH
25664: LD_VAR 0 4
25668: PUSH
25669: LD_VAR 0 3
25673: PUSH
25674: LD_VAR 0 2
25678: ARRAY
25679: ADD
25680: ST_TO_ADDR
// mechanics_list = Delete ( mechanics_list , i ) ;
25681: LD_ADDR_VAR 0 3
25685: PUSH
25686: LD_VAR 0 3
25690: PPUSH
25691: LD_VAR 0 2
25695: PPUSH
25696: CALL_OW 3
25700: ST_TO_ADDR
// continue ;
25701: GO 25626
// end ; i = i + 1 ;
25703: LD_ADDR_VAR 0 2
25707: PUSH
25708: LD_VAR 0 2
25712: PUSH
25713: LD_INT 1
25715: PLUS
25716: ST_TO_ADDR
// end ;
25717: GO 25626
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
25719: LD_ADDR_EXP 43
25723: PUSH
25724: LD_EXP 43
25728: PPUSH
25729: LD_VAR 0 14
25733: PPUSH
25734: LD_VAR 0 4
25738: PPUSH
25739: CALL_OW 1
25743: ST_TO_ADDR
// if ai_control_tower [ base ] > 0 then
25744: LD_EXP 56
25748: PUSH
25749: LD_VAR 0 14
25753: ARRAY
25754: PUSH
25755: LD_INT 0
25757: GREATER
25758: IFFALSE 26696
// begin temp_list = remote_driver_vehicles [ base ] ;
25760: LD_ADDR_VAR 0 4
25764: PUSH
25765: LD_VAR 0 24
25769: PUSH
25770: LD_VAR 0 14
25774: ARRAY
25775: ST_TO_ADDR
// vehicles_list = [ ] ;
25776: LD_ADDR_VAR 0 8
25780: PUSH
25781: EMPTY
25782: ST_TO_ADDR
// i = 1 ;
25783: LD_ADDR_VAR 0 2
25787: PUSH
25788: LD_INT 1
25790: ST_TO_ADDR
// while i <= temp_list do
25791: LD_VAR 0 2
25795: PUSH
25796: LD_VAR 0 4
25800: LESSEQUAL
25801: IFFALSE 26073
// begin if IsDead ( temp_list [ i ] [ 1 ] ) then
25803: LD_VAR 0 4
25807: PUSH
25808: LD_VAR 0 2
25812: ARRAY
25813: PUSH
25814: LD_INT 1
25816: ARRAY
25817: PPUSH
25818: CALL_OW 301
25822: IFFALSE 25848
// begin temp_list = Delete ( temp_list , i ) ;
25824: LD_ADDR_VAR 0 4
25828: PUSH
25829: LD_VAR 0 4
25833: PPUSH
25834: LD_VAR 0 2
25838: PPUSH
25839: CALL_OW 3
25843: ST_TO_ADDR
// continue ;
25844: GO 25791
// end else
25846: GO 26031
// begin temp_list_3 = temp_list [ i ] [ 2 ] ;
25848: LD_ADDR_VAR 0 6
25852: PUSH
25853: LD_VAR 0 4
25857: PUSH
25858: LD_VAR 0 2
25862: ARRAY
25863: PUSH
25864: LD_INT 2
25866: ARRAY
25867: ST_TO_ADDR
// k = 1 ;
25868: LD_ADDR_VAR 0 12
25872: PUSH
25873: LD_INT 1
25875: ST_TO_ADDR
// while k <= temp_list_3 do
25876: LD_VAR 0 12
25880: PUSH
25881: LD_VAR 0 6
25885: LESSEQUAL
25886: IFFALSE 25943
// begin if IsDead ( temp_list_3 [ k ] ) then
25888: LD_VAR 0 6
25892: PUSH
25893: LD_VAR 0 12
25897: ARRAY
25898: PPUSH
25899: CALL_OW 301
25903: IFFALSE 25927
// begin temp_list_3 = Delete ( temp_list_3 , k ) ;
25905: LD_ADDR_VAR 0 6
25909: PUSH
25910: LD_VAR 0 6
25914: PPUSH
25915: LD_VAR 0 12
25919: PPUSH
25920: CALL_OW 3
25924: ST_TO_ADDR
// continue ;
25925: GO 25876
// end ; k = k + 1 ;
25927: LD_ADDR_VAR 0 12
25931: PUSH
25932: LD_VAR 0 12
25936: PUSH
25937: LD_INT 1
25939: PLUS
25940: ST_TO_ADDR
// end ;
25941: GO 25876
// if temp_list_3 > 0 then
25943: LD_VAR 0 6
25947: PUSH
25948: LD_INT 0
25950: GREATER
25951: IFFALSE 26009
// begin temp_list_2 = Replace ( temp_list [ i ] , 2 , temp_list_3 ) ;
25953: LD_ADDR_VAR 0 17
25957: PUSH
25958: LD_VAR 0 4
25962: PUSH
25963: LD_VAR 0 2
25967: ARRAY
25968: PPUSH
25969: LD_INT 2
25971: PPUSH
25972: LD_VAR 0 6
25976: PPUSH
25977: CALL_OW 1
25981: ST_TO_ADDR
// temp_list = Replace ( temp_list , i , temp_list_2 ) ;
25982: LD_ADDR_VAR 0 4
25986: PUSH
25987: LD_VAR 0 4
25991: PPUSH
25992: LD_VAR 0 2
25996: PPUSH
25997: LD_VAR 0 17
26001: PPUSH
26002: CALL_OW 1
26006: ST_TO_ADDR
// end else
26007: GO 26031
// begin temp_list = Delete ( temp_list , i ) ;
26009: LD_ADDR_VAR 0 4
26013: PUSH
26014: LD_VAR 0 4
26018: PPUSH
26019: LD_VAR 0 2
26023: PPUSH
26024: CALL_OW 3
26028: ST_TO_ADDR
// continue ;
26029: GO 25791
// end ; end ; vehicles_list = vehicles_list ^ temp_list [ i ] [ 2 ] ;
26031: LD_ADDR_VAR 0 8
26035: PUSH
26036: LD_VAR 0 8
26040: PUSH
26041: LD_VAR 0 4
26045: PUSH
26046: LD_VAR 0 2
26050: ARRAY
26051: PUSH
26052: LD_INT 2
26054: ARRAY
26055: ADD
26056: ST_TO_ADDR
// i = i + 1 ;
26057: LD_ADDR_VAR 0 2
26061: PUSH
26062: LD_VAR 0 2
26066: PUSH
26067: LD_INT 1
26069: PLUS
26070: ST_TO_ADDR
// end ;
26071: GO 25791
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list ) ;
26073: LD_ADDR_VAR 0 24
26077: PUSH
26078: LD_VAR 0 24
26082: PPUSH
26083: LD_VAR 0 14
26087: PPUSH
26088: LD_VAR 0 4
26092: PPUSH
26093: CALL_OW 1
26097: ST_TO_ADDR
// temp_list = ai_vehicles_defend [ base ] diff vehicles_list ;
26098: LD_ADDR_VAR 0 4
26102: PUSH
26103: LD_EXP 39
26107: PUSH
26108: LD_VAR 0 14
26112: ARRAY
26113: PUSH
26114: LD_VAR 0 8
26118: DIFF
26119: ST_TO_ADDR
// if temp_list > 0 then
26120: LD_VAR 0 4
26124: PUSH
26125: LD_INT 0
26127: GREATER
26128: IFFALSE 26352
// begin temp_list_3 = ai_mechanics_defend [ base ] ;
26130: LD_ADDR_VAR 0 6
26134: PUSH
26135: LD_EXP 31
26139: PUSH
26140: LD_VAR 0 14
26144: ARRAY
26145: ST_TO_ADDR
// for i in remote_driver_vehicles [ base ] do
26146: LD_ADDR_VAR 0 2
26150: PUSH
26151: LD_VAR 0 24
26155: PUSH
26156: LD_VAR 0 14
26160: ARRAY
26161: PUSH
26162: FOR_IN
26163: IFFALSE 26187
// temp_list_3 = temp_list_3 diff i [ 1 ] ;
26165: LD_ADDR_VAR 0 6
26169: PUSH
26170: LD_VAR 0 6
26174: PUSH
26175: LD_VAR 0 2
26179: PUSH
26180: LD_INT 1
26182: ARRAY
26183: DIFF
26184: ST_TO_ADDR
26185: GO 26162
26187: POP
26188: POP
// if temp_list_3 > 0 then
26189: LD_VAR 0 6
26193: PUSH
26194: LD_INT 0
26196: GREATER
26197: IFFALSE 26223
// temp_list_3 = temp_list_3 diff FindMinSkill ( temp_list_3 , skill_mechanical ) ;
26199: LD_ADDR_VAR 0 6
26203: PUSH
26204: LD_VAR 0 6
26208: PUSH
26209: LD_VAR 0 6
26213: PPUSH
26214: LD_INT 3
26216: PPUSH
26217: CALL_OW 443
26221: DIFF
26222: ST_TO_ADDR
// for i in temp_list do
26223: LD_ADDR_VAR 0 2
26227: PUSH
26228: LD_VAR 0 4
26232: PUSH
26233: FOR_IN
26234: IFFALSE 26350
// begin if temp_list_3 = 0 then
26236: LD_VAR 0 6
26240: PUSH
26241: LD_INT 0
26243: EQUAL
26244: IFFALSE 26248
// break ;
26246: GO 26350
// temp_unit = FindMaxSkill ( temp_list_3 , skill_mechanical ) ;
26248: LD_ADDR_VAR 0 7
26252: PUSH
26253: LD_VAR 0 6
26257: PPUSH
26258: LD_INT 3
26260: PPUSH
26261: CALL_OW 433
26265: ST_TO_ADDR
// temp_list_3 = temp_list_3 diff temp_unit ;
26266: LD_ADDR_VAR 0 6
26270: PUSH
26271: LD_VAR 0 6
26275: PUSH
26276: LD_VAR 0 7
26280: DIFF
26281: ST_TO_ADDR
// temp_list_2 = Insert ( remote_driver_vehicles [ base ] , 1 , [ temp_unit , [ i ] ] ) ;
26282: LD_ADDR_VAR 0 17
26286: PUSH
26287: LD_VAR 0 24
26291: PUSH
26292: LD_VAR 0 14
26296: ARRAY
26297: PPUSH
26298: LD_INT 1
26300: PPUSH
26301: LD_VAR 0 7
26305: PUSH
26306: LD_VAR 0 2
26310: PUSH
26311: EMPTY
26312: LIST
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PPUSH
26318: CALL_OW 2
26322: ST_TO_ADDR
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list_2 ) ;
26323: LD_ADDR_VAR 0 24
26327: PUSH
26328: LD_VAR 0 24
26332: PPUSH
26333: LD_VAR 0 14
26337: PPUSH
26338: LD_VAR 0 17
26342: PPUSH
26343: CALL_OW 1
26347: ST_TO_ADDR
// end ;
26348: GO 26233
26350: POP
26351: POP
// end ; for i in remote_driver_vehicles [ base ] do
26352: LD_ADDR_VAR 0 2
26356: PUSH
26357: LD_VAR 0 24
26361: PUSH
26362: LD_VAR 0 14
26366: ARRAY
26367: PUSH
26368: FOR_IN
26369: IFFALSE 26393
// remote_mechanics = remote_mechanics ^ i [ 1 ] ;
26371: LD_ADDR_VAR 0 18
26375: PUSH
26376: LD_VAR 0 18
26380: PUSH
26381: LD_VAR 0 2
26385: PUSH
26386: LD_INT 1
26388: ARRAY
26389: ADD
26390: ST_TO_ADDR
26391: GO 26368
26393: POP
26394: POP
// mechanics_list = mechanics_list diff remote_mechanics ;
26395: LD_ADDR_VAR 0 3
26399: PUSH
26400: LD_VAR 0 3
26404: PUSH
26405: LD_VAR 0 18
26409: DIFF
26410: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff ai_heal_these_humans [ base ] ;
26411: LD_ADDR_VAR 0 18
26415: PUSH
26416: LD_VAR 0 18
26420: PUSH
26421: LD_EXP 43
26425: PUSH
26426: LD_VAR 0 14
26430: ARRAY
26431: DIFF
26432: ST_TO_ADDR
// if mechanics_list = 0 and remote_driver_vehicles [ base ] > 0 then
26433: LD_VAR 0 3
26437: PUSH
26438: LD_INT 0
26440: EQUAL
26441: PUSH
26442: LD_VAR 0 24
26446: PUSH
26447: LD_VAR 0 14
26451: ARRAY
26452: PUSH
26453: LD_INT 0
26455: GREATER
26456: AND
26457: IFFALSE 26694
// begin n = 0 ;
26459: LD_ADDR_VAR 0 22
26463: PUSH
26464: LD_INT 0
26466: ST_TO_ADDR
// a = 9999 ;
26467: LD_ADDR_VAR 0 23
26471: PUSH
26472: LD_INT 9999
26474: ST_TO_ADDR
// for i = 1 to ( remote_driver_vehicles [ base ] + 0 ) do
26475: LD_ADDR_VAR 0 2
26479: PUSH
26480: DOUBLE
26481: LD_INT 1
26483: DEC
26484: ST_TO_ADDR
26485: LD_VAR 0 24
26489: PUSH
26490: LD_VAR 0 14
26494: ARRAY
26495: PUSH
26496: LD_INT 0
26498: PLUS
26499: PUSH
26500: FOR_TO
26501: IFFALSE 26577
// begin if remote_driver_vehicles [ base ] [ i ] [ 2 ] + 0 < a then
26503: LD_VAR 0 24
26507: PUSH
26508: LD_VAR 0 14
26512: ARRAY
26513: PUSH
26514: LD_VAR 0 2
26518: ARRAY
26519: PUSH
26520: LD_INT 2
26522: ARRAY
26523: PUSH
26524: LD_INT 0
26526: PLUS
26527: PUSH
26528: LD_VAR 0 23
26532: LESS
26533: IFFALSE 26575
// begin a = remote_driver_vehicles [ base ] [ i ] [ 2 ] + 0 ;
26535: LD_ADDR_VAR 0 23
26539: PUSH
26540: LD_VAR 0 24
26544: PUSH
26545: LD_VAR 0 14
26549: ARRAY
26550: PUSH
26551: LD_VAR 0 2
26555: ARRAY
26556: PUSH
26557: LD_INT 2
26559: ARRAY
26560: PUSH
26561: LD_INT 0
26563: PLUS
26564: ST_TO_ADDR
// n = i ;
26565: LD_ADDR_VAR 0 22
26569: PUSH
26570: LD_VAR 0 2
26574: ST_TO_ADDR
// end ; end ;
26575: GO 26500
26577: POP
26578: POP
// mechanics_list = mechanics_list ^ remote_driver_vehicles [ base ] [ n ] [ 1 ] ;
26579: LD_ADDR_VAR 0 3
26583: PUSH
26584: LD_VAR 0 3
26588: PUSH
26589: LD_VAR 0 24
26593: PUSH
26594: LD_VAR 0 14
26598: ARRAY
26599: PUSH
26600: LD_VAR 0 22
26604: ARRAY
26605: PUSH
26606: LD_INT 1
26608: ARRAY
26609: ADD
26610: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff remote_driver_vehicles [ base ] [ n ] [ 1 ] ;
26611: LD_ADDR_VAR 0 18
26615: PUSH
26616: LD_VAR 0 18
26620: PUSH
26621: LD_VAR 0 24
26625: PUSH
26626: LD_VAR 0 14
26630: ARRAY
26631: PUSH
26632: LD_VAR 0 22
26636: ARRAY
26637: PUSH
26638: LD_INT 1
26640: ARRAY
26641: DIFF
26642: ST_TO_ADDR
// temp_list_2 = Delete ( remote_driver_vehicles [ base ] , n ) ;
26643: LD_ADDR_VAR 0 17
26647: PUSH
26648: LD_VAR 0 24
26652: PUSH
26653: LD_VAR 0 14
26657: ARRAY
26658: PPUSH
26659: LD_VAR 0 22
26663: PPUSH
26664: CALL_OW 3
26668: ST_TO_ADDR
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list_2 ) ;
26669: LD_ADDR_VAR 0 24
26673: PUSH
26674: LD_VAR 0 24
26678: PPUSH
26679: LD_VAR 0 14
26683: PPUSH
26684: LD_VAR 0 17
26688: PPUSH
26689: CALL_OW 1
26693: ST_TO_ADDR
// end ; end else
26694: GO 26718
// begin remote_driver_vehicles = Replace ( remote_driver_vehicles , base , [ ] ) ;
26696: LD_ADDR_VAR 0 24
26700: PUSH
26701: LD_VAR 0 24
26705: PPUSH
26706: LD_VAR 0 14
26710: PPUSH
26711: EMPTY
26712: PPUSH
26713: CALL_OW 1
26717: ST_TO_ADDR
// end ; temp_list = [ ] ;
26718: LD_ADDR_VAR 0 4
26722: PUSH
26723: EMPTY
26724: ST_TO_ADDR
// for i in ai_vehicles_being_repaired [ base ] do
26725: LD_ADDR_VAR 0 2
26729: PUSH
26730: LD_EXP 79
26734: PUSH
26735: LD_VAR 0 14
26739: ARRAY
26740: PUSH
26741: FOR_IN
26742: IFFALSE 26777
// if GetLives ( i ) < 1000 then
26744: LD_VAR 0 2
26748: PPUSH
26749: CALL_OW 256
26753: PUSH
26754: LD_INT 1000
26756: LESS
26757: IFFALSE 26775
// temp_list = temp_list ^ i ;
26759: LD_ADDR_VAR 0 4
26763: PUSH
26764: LD_VAR 0 4
26768: PUSH
26769: LD_VAR 0 2
26773: ADD
26774: ST_TO_ADDR
26775: GO 26741
26777: POP
26778: POP
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
26779: LD_ADDR_EXP 79
26783: PUSH
26784: LD_EXP 79
26788: PPUSH
26789: LD_VAR 0 14
26793: PPUSH
26794: LD_VAR 0 4
26798: PPUSH
26799: CALL_OW 1
26803: ST_TO_ADDR
// temp_list = [ ] ;
26804: LD_ADDR_VAR 0 4
26808: PUSH
26809: EMPTY
26810: ST_TO_ADDR
// for i in ai_refuel_vehicles_list [ base ] diff ai_vehicles_being_repaired [ base ] do
26811: LD_ADDR_VAR 0 2
26815: PUSH
26816: LD_EXP 54
26820: PUSH
26821: LD_VAR 0 14
26825: ARRAY
26826: PUSH
26827: LD_EXP 79
26831: PUSH
26832: LD_VAR 0 14
26836: ARRAY
26837: DIFF
26838: PUSH
26839: FOR_IN
26840: IFFALSE 26875
// if GetFuel ( i ) < 95 then
26842: LD_VAR 0 2
26846: PPUSH
26847: CALL_OW 261
26851: PUSH
26852: LD_INT 95
26854: LESS
26855: IFFALSE 26873
// temp_list = temp_list ^ i ;
26857: LD_ADDR_VAR 0 4
26861: PUSH
26862: LD_VAR 0 4
26866: PUSH
26867: LD_VAR 0 2
26871: ADD
26872: ST_TO_ADDR
26873: GO 26839
26875: POP
26876: POP
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
26877: LD_ADDR_EXP 54
26881: PUSH
26882: LD_EXP 54
26886: PPUSH
26887: LD_VAR 0 14
26891: PPUSH
26892: LD_VAR 0 4
26896: PPUSH
26897: CALL_OW 1
26901: ST_TO_ADDR
// if under_attack or destroy_gensher_base then
26902: LD_VAR 0 10
26906: PUSH
26907: LD_VAR 0 19
26911: OR
26912: IFFALSE 28315
// begin vehicles_list = ai_vehicles_defend [ base ] diff ai_vehicles_being_repaired [ base ] ;
26914: LD_ADDR_VAR 0 8
26918: PUSH
26919: LD_EXP 39
26923: PUSH
26924: LD_VAR 0 14
26928: ARRAY
26929: PUSH
26930: LD_EXP 79
26934: PUSH
26935: LD_VAR 0 14
26939: ARRAY
26940: DIFF
26941: ST_TO_ADDR
// case base of 1 :
26942: LD_VAR 0 14
26946: PUSH
26947: LD_INT 1
26949: DOUBLE
26950: EQUAL
26951: IFTRUE 26955
26953: GO 27597
26955: POP
// begin repeat if game_phase = 1 then
26956: LD_EXP 88
26960: PUSH
26961: LD_INT 1
26963: EQUAL
26964: IFFALSE 26968
// break ;
26966: GO 27595
// temp_list = [ ] ;
26968: LD_ADDR_VAR 0 4
26972: PUSH
26973: EMPTY
26974: ST_TO_ADDR
// if destroy_gensher_base then
26975: LD_VAR 0 19
26979: IFFALSE 27046
// for i in original_gensher_people ^ Gensher do
26981: LD_ADDR_VAR 0 2
26985: PUSH
26986: LD_EXP 82
26990: PUSH
26991: LD_EXP 23
26995: ADD
26996: PUSH
26997: FOR_IN
26998: IFFALSE 27044
// if IsPlaced ( i ) and GetY ( i ) <= 70 then
27000: LD_VAR 0 2
27004: PPUSH
27005: CALL_OW 305
27009: PUSH
27010: LD_VAR 0 2
27014: PPUSH
27015: CALL_OW 251
27019: PUSH
27020: LD_INT 70
27022: LESSEQUAL
27023: AND
27024: IFFALSE 27042
// temp_list = temp_list ^ i ;
27026: LD_ADDR_VAR 0 4
27030: PUSH
27031: LD_VAR 0 4
27035: PUSH
27036: LD_VAR 0 2
27040: ADD
27041: ST_TO_ADDR
27042: GO 26997
27044: POP
27045: POP
// if temp_list > 0 then
27046: LD_VAR 0 4
27050: PUSH
27051: LD_INT 0
27053: GREATER
27054: IFFALSE 27266
// begin temp_list_3 = [ [ 105 , 40 ] , [ 98 , 44 ] , [ 90 , 44 ] , [ 82 , 46 ] , [ 78 , 52 ] , [ 79 , 61 ] ] ;
27056: LD_ADDR_VAR 0 6
27060: PUSH
27061: LD_INT 105
27063: PUSH
27064: LD_INT 40
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 98
27073: PUSH
27074: LD_INT 44
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 90
27083: PUSH
27084: LD_INT 44
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 82
27093: PUSH
27094: LD_INT 46
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 78
27103: PUSH
27104: LD_INT 52
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 79
27113: PUSH
27114: LD_INT 61
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: ST_TO_ADDR
// for i in vehicles_list do
27129: LD_ADDR_VAR 0 2
27133: PUSH
27134: LD_VAR 0 8
27138: PUSH
27139: FOR_IN
27140: IFFALSE 27262
// begin temp_unit = AllNearestUnitToUnit ( temp_list , i ) ;
27142: LD_ADDR_VAR 0 7
27146: PUSH
27147: LD_VAR 0 4
27151: PPUSH
27152: LD_VAR 0 2
27156: PPUSH
27157: CALL_OW 75
27161: ST_TO_ADDR
// if GetDistUnits ( i , temp_unit ) <= 6 then
27162: LD_VAR 0 2
27166: PPUSH
27167: LD_VAR 0 7
27171: PPUSH
27172: CALL_OW 296
27176: PUSH
27177: LD_INT 6
27179: LESSEQUAL
27180: IFFALSE 27213
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) else
27182: LD_VAR 0 2
27186: PPUSH
27187: LD_VAR 0 7
27191: PPUSH
27192: CALL_OW 250
27196: PPUSH
27197: LD_VAR 0 7
27201: PPUSH
27202: CALL_OW 251
27206: PPUSH
27207: CALL_OW 114
27211: GO 27260
// begin temp_list = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
27213: LD_ADDR_VAR 0 4
27217: PUSH
27218: LD_VAR 0 6
27222: PPUSH
27223: LD_VAR 0 2
27227: PPUSH
27228: CALL 30195 0 2
27232: ST_TO_ADDR
// ComMoveXY ( i , temp_list [ 1 ] , temp_list [ 2 ] ) ;
27233: LD_VAR 0 2
27237: PPUSH
27238: LD_VAR 0 4
27242: PUSH
27243: LD_INT 1
27245: ARRAY
27246: PPUSH
27247: LD_VAR 0 4
27251: PUSH
27252: LD_INT 2
27254: ARRAY
27255: PPUSH
27256: CALL_OW 111
// end ; end ;
27260: GO 27139
27262: POP
27263: POP
// end else
27264: GO 27591
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , am_vehicle_defend_area ] ] ) ;
27266: LD_ADDR_VAR 0 4
27270: PUSH
27271: LD_INT 81
27273: PUSH
27274: LD_VAR 0 1
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 95
27285: PUSH
27286: LD_INT 11
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PPUSH
27297: CALL_OW 69
27301: ST_TO_ADDR
// temp_list = DangerousUnits ( temp_list ) ;
27302: LD_ADDR_VAR 0 4
27306: PUSH
27307: LD_VAR 0 4
27311: PPUSH
27312: CALL 40372 0 1
27316: ST_TO_ADDR
// if temp_list > 0 then
27317: LD_VAR 0 4
27321: PUSH
27322: LD_INT 0
27324: GREATER
27325: IFFALSE 27395
// begin for i in vehicles_list do
27327: LD_ADDR_VAR 0 2
27331: PUSH
27332: LD_VAR 0 8
27336: PUSH
27337: FOR_IN
27338: IFFALSE 27391
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
27340: LD_ADDR_VAR 0 7
27344: PUSH
27345: LD_VAR 0 4
27349: PPUSH
27350: LD_VAR 0 2
27354: PPUSH
27355: CALL_OW 74
27359: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27360: LD_VAR 0 2
27364: PPUSH
27365: LD_VAR 0 7
27369: PPUSH
27370: CALL_OW 250
27374: PPUSH
27375: LD_VAR 0 7
27379: PPUSH
27380: CALL_OW 251
27384: PPUSH
27385: CALL_OW 114
// end ;
27389: GO 27337
27391: POP
27392: POP
// end else
27393: GO 27591
// if destroy_gensher_base then
27395: LD_VAR 0 19
27399: IFFALSE 27591
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , gensher_base ] ] ) ;
27401: LD_ADDR_VAR 0 4
27405: PUSH
27406: LD_INT 81
27408: PUSH
27409: LD_VAR 0 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 95
27420: PUSH
27421: LD_INT 7
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PPUSH
27432: CALL_OW 69
27436: ST_TO_ADDR
// temp_list_2 = DangerousUnits ( temp_list ) ;
27437: LD_ADDR_VAR 0 17
27441: PUSH
27442: LD_VAR 0 4
27446: PPUSH
27447: CALL 40372 0 1
27451: ST_TO_ADDR
// if temp_list_2 > 0 then
27452: LD_VAR 0 17
27456: PUSH
27457: LD_INT 0
27459: GREATER
27460: IFFALSE 27530
// begin for i in vehicles_list do
27462: LD_ADDR_VAR 0 2
27466: PUSH
27467: LD_VAR 0 8
27471: PUSH
27472: FOR_IN
27473: IFFALSE 27526
// begin temp_unit = NearestUnitToUnit ( temp_list_2 , i ) ;
27475: LD_ADDR_VAR 0 7
27479: PUSH
27480: LD_VAR 0 17
27484: PPUSH
27485: LD_VAR 0 2
27489: PPUSH
27490: CALL_OW 74
27494: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27495: LD_VAR 0 2
27499: PPUSH
27500: LD_VAR 0 7
27504: PPUSH
27505: CALL_OW 250
27509: PPUSH
27510: LD_VAR 0 7
27514: PPUSH
27515: CALL_OW 251
27519: PPUSH
27520: CALL_OW 114
// end ;
27524: GO 27472
27526: POP
27527: POP
// end else
27528: GO 27591
// if temp_list > 0 then
27530: LD_VAR 0 4
27534: PUSH
27535: LD_INT 0
27537: GREATER
27538: IFFALSE 27591
// begin for i in vehicles_list do
27540: LD_ADDR_VAR 0 2
27544: PUSH
27545: LD_VAR 0 8
27549: PUSH
27550: FOR_IN
27551: IFFALSE 27589
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
27553: LD_ADDR_VAR 0 7
27557: PUSH
27558: LD_VAR 0 4
27562: PPUSH
27563: LD_VAR 0 2
27567: PPUSH
27568: CALL_OW 74
27572: ST_TO_ADDR
// ComAttackUnit ( i , temp_unit ) ;
27573: LD_VAR 0 2
27577: PPUSH
27578: LD_VAR 0 7
27582: PPUSH
27583: CALL_OW 115
// end ;
27587: GO 27550
27589: POP
27590: POP
// end ; end ; end ; until true ;
27591: LD_INT 1
27593: IFFALSE 26956
// end ; 2 :
27595: GO 28313
27597: LD_INT 2
27599: DOUBLE
27600: EQUAL
27601: IFTRUE 27605
27603: GO 27608
27605: POP
// begin end ; 3 :
27606: GO 28313
27608: LD_INT 3
27610: DOUBLE
27611: EQUAL
27612: IFTRUE 27616
27614: GO 28312
27616: POP
// begin temp_list = FilterAllUnits ( [ f_enemy , side ] ) ;
27617: LD_ADDR_VAR 0 4
27621: PUSH
27622: LD_INT 81
27624: PUSH
27625: LD_VAR 0 1
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PPUSH
27634: CALL_OW 69
27638: ST_TO_ADDR
// temp_list = ListFilterNearArea ( temp_list , GetBaseArea ( base ) ) ;
27639: LD_ADDR_VAR 0 4
27643: PUSH
27644: LD_VAR 0 4
27648: PPUSH
27649: LD_VAR 0 14
27653: PPUSH
27654: CALL 12310 0 1
27658: PPUSH
27659: CALL 23885 0 2
27663: ST_TO_ADDR
// temp_list = DangerousUnits ( temp_list ) ;
27664: LD_ADDR_VAR 0 4
27668: PUSH
27669: LD_VAR 0 4
27673: PPUSH
27674: CALL 40372 0 1
27678: ST_TO_ADDR
// temp_list_2 = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , Ru_backdoor_area ] ] ) ;
27679: LD_ADDR_VAR 0 17
27683: PUSH
27684: LD_INT 81
27686: PUSH
27687: LD_VAR 0 1
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 95
27698: PUSH
27699: LD_INT 13
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PPUSH
27710: CALL_OW 69
27714: ST_TO_ADDR
// temp_list_2 = DangerousUnits ( temp_list_2 ) ;
27715: LD_ADDR_VAR 0 17
27719: PUSH
27720: LD_VAR 0 17
27724: PPUSH
27725: CALL 40372 0 1
27729: ST_TO_ADDR
// temp_list_3 = [ [ 53 , 80 ] , [ 61 , 80 ] , [ 63 , 73 ] , [ 67 , 66 ] , [ 67 , 59 ] ] ;
27730: LD_ADDR_VAR 0 6
27734: PUSH
27735: LD_INT 53
27737: PUSH
27738: LD_INT 80
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 61
27747: PUSH
27748: LD_INT 80
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 63
27757: PUSH
27758: LD_INT 73
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 67
27767: PUSH
27768: LD_INT 66
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 67
27777: PUSH
27778: LD_INT 59
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// temp_list_4 = [ [ 53 , 80 ] , [ 61 , 91 ] , [ 70 , 97 ] , [ 78 , 99 ] , [ 88 , 98 ] ] ;
27792: LD_ADDR_VAR 0 20
27796: PUSH
27797: LD_INT 53
27799: PUSH
27800: LD_INT 80
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 61
27809: PUSH
27810: LD_INT 91
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 70
27819: PUSH
27820: LD_INT 97
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 78
27829: PUSH
27830: LD_INT 99
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 88
27839: PUSH
27840: LD_INT 98
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: ST_TO_ADDR
// if temp_list_2 >= temp_list then
27854: LD_VAR 0 17
27858: PUSH
27859: LD_VAR 0 4
27863: GREATEREQUAL
27864: IFFALSE 28007
// begin if temp_list_2 > 0 then
27866: LD_VAR 0 17
27870: PUSH
27871: LD_INT 0
27873: GREATER
27874: IFFALSE 28005
// begin for i in vehicles_list do
27876: LD_ADDR_VAR 0 2
27880: PUSH
27881: LD_VAR 0 8
27885: PUSH
27886: FOR_IN
27887: IFFALSE 28003
// if IsInArea ( i , Ru_base ) then
27889: LD_VAR 0 2
27893: PPUSH
27894: LD_INT 3
27896: PPUSH
27897: CALL_OW 308
27901: IFFALSE 27952
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
27903: LD_ADDR_VAR 0 21
27907: PUSH
27908: LD_VAR 0 6
27912: PPUSH
27913: LD_VAR 0 2
27917: PPUSH
27918: CALL 30195 0 2
27922: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
27923: LD_VAR 0 2
27927: PPUSH
27928: LD_VAR 0 21
27932: PUSH
27933: LD_INT 1
27935: ARRAY
27936: PPUSH
27937: LD_VAR 0 21
27941: PUSH
27942: LD_INT 2
27944: ARRAY
27945: PPUSH
27946: CALL_OW 114
// end else
27950: GO 28001
// begin temp_unit = NearestUnitToUnit ( temp_list_2 , i ) ;
27952: LD_ADDR_VAR 0 7
27956: PUSH
27957: LD_VAR 0 17
27961: PPUSH
27962: LD_VAR 0 2
27966: PPUSH
27967: CALL_OW 74
27971: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_VAR 0 7
27981: PPUSH
27982: CALL_OW 250
27986: PPUSH
27987: LD_VAR 0 7
27991: PPUSH
27992: CALL_OW 251
27996: PPUSH
27997: CALL_OW 114
// end ;
28001: GO 27886
28003: POP
28004: POP
// end ; end else
28005: GO 28310
// begin if temp_list > 0 then
28007: LD_VAR 0 4
28011: PUSH
28012: LD_INT 0
28014: GREATER
28015: IFFALSE 28310
// begin k = 0 ;
28017: LD_ADDR_VAR 0 12
28021: PUSH
28022: LD_INT 0
28024: ST_TO_ADDR
// for i in vehicles_list do
28025: LD_ADDR_VAR 0 2
28029: PUSH
28030: LD_VAR 0 8
28034: PUSH
28035: FOR_IN
28036: IFFALSE 28308
// begin k = k + 1 ;
28038: LD_ADDR_VAR 0 12
28042: PUSH
28043: LD_VAR 0 12
28047: PUSH
28048: LD_INT 1
28050: PLUS
28051: ST_TO_ADDR
// if k mod 2 = 0 then
28052: LD_VAR 0 12
28056: PUSH
28057: LD_INT 2
28059: MOD
28060: PUSH
28061: LD_INT 0
28063: EQUAL
28064: IFFALSE 28180
// begin if IsInArea ( i , Ru_base ) then
28066: LD_VAR 0 2
28070: PPUSH
28071: LD_INT 3
28073: PPUSH
28074: CALL_OW 308
28078: IFFALSE 28129
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
28080: LD_ADDR_VAR 0 21
28084: PUSH
28085: LD_VAR 0 6
28089: PPUSH
28090: LD_VAR 0 2
28094: PPUSH
28095: CALL 30195 0 2
28099: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28100: LD_VAR 0 2
28104: PPUSH
28105: LD_VAR 0 21
28109: PUSH
28110: LD_INT 1
28112: ARRAY
28113: PPUSH
28114: LD_VAR 0 21
28118: PUSH
28119: LD_INT 2
28121: ARRAY
28122: PPUSH
28123: CALL_OW 114
// end else
28127: GO 28178
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
28129: LD_ADDR_VAR 0 7
28133: PUSH
28134: LD_VAR 0 4
28138: PPUSH
28139: LD_VAR 0 2
28143: PPUSH
28144: CALL_OW 74
28148: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28149: LD_VAR 0 2
28153: PPUSH
28154: LD_VAR 0 7
28158: PPUSH
28159: CALL_OW 250
28163: PPUSH
28164: LD_VAR 0 7
28168: PPUSH
28169: CALL_OW 251
28173: PPUSH
28174: CALL_OW 114
// end ; end else
28178: GO 28306
// begin if IsInArea ( i , Ru_base ) or IsInArea ( i , Ru_base_south ) then
28180: LD_VAR 0 2
28184: PPUSH
28185: LD_INT 3
28187: PPUSH
28188: CALL_OW 308
28192: PUSH
28193: LD_VAR 0 2
28197: PPUSH
28198: LD_INT 19
28200: PPUSH
28201: CALL_OW 308
28205: OR
28206: IFFALSE 28257
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_4 , i ) ;
28208: LD_ADDR_VAR 0 21
28212: PUSH
28213: LD_VAR 0 20
28217: PPUSH
28218: LD_VAR 0 2
28222: PPUSH
28223: CALL 30195 0 2
28227: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28228: LD_VAR 0 2
28232: PPUSH
28233: LD_VAR 0 21
28237: PUSH
28238: LD_INT 1
28240: ARRAY
28241: PPUSH
28242: LD_VAR 0 21
28246: PUSH
28247: LD_INT 2
28249: ARRAY
28250: PPUSH
28251: CALL_OW 114
// end else
28255: GO 28306
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
28257: LD_ADDR_VAR 0 7
28261: PUSH
28262: LD_VAR 0 4
28266: PPUSH
28267: LD_VAR 0 2
28271: PPUSH
28272: CALL_OW 74
28276: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28277: LD_VAR 0 2
28281: PPUSH
28282: LD_VAR 0 7
28286: PPUSH
28287: CALL_OW 250
28291: PPUSH
28292: LD_VAR 0 7
28296: PPUSH
28297: CALL_OW 251
28301: PPUSH
28302: CALL_OW 114
// end ; end ; end ;
28306: GO 28035
28308: POP
28309: POP
// end ; end ; end ; end ;
28310: GO 28313
28312: POP
// end else
28313: GO 28702
// begin area = GetBaseArea ( base ) ;
28315: LD_ADDR_VAR 0 15
28319: PUSH
28320: LD_VAR 0 14
28324: PPUSH
28325: CALL 12310 0 1
28329: ST_TO_ADDR
// if IsOk ( ai_depot [ base ] ) then
28330: LD_EXP 34
28334: PUSH
28335: LD_VAR 0 14
28339: ARRAY
28340: PPUSH
28341: CALL_OW 302
28345: IFFALSE 28611
// begin temp_list = ai_refuel_vehicles_list [ base ] ;
28347: LD_ADDR_VAR 0 4
28351: PUSH
28352: LD_EXP 54
28356: PUSH
28357: LD_VAR 0 14
28361: ARRAY
28362: ST_TO_ADDR
// for i in ai_vehicles_defend [ base ] diff ai_refuel_vehicles_list [ base ] do
28363: LD_ADDR_VAR 0 2
28367: PUSH
28368: LD_EXP 39
28372: PUSH
28373: LD_VAR 0 14
28377: ARRAY
28378: PUSH
28379: LD_EXP 54
28383: PUSH
28384: LD_VAR 0 14
28388: ARRAY
28389: DIFF
28390: PUSH
28391: FOR_IN
28392: IFFALSE 28442
// if GetFuel ( i ) < 70 and GetEngine ( i ) = engine_combustion then
28394: LD_VAR 0 2
28398: PPUSH
28399: CALL_OW 261
28403: PUSH
28404: LD_INT 70
28406: LESS
28407: PUSH
28408: LD_VAR 0 2
28412: PPUSH
28413: CALL_OW 262
28417: PUSH
28418: LD_INT 1
28420: EQUAL
28421: AND
28422: IFFALSE 28440
// temp_list = temp_list ^ i ;
28424: LD_ADDR_VAR 0 4
28428: PUSH
28429: LD_VAR 0 4
28433: PUSH
28434: LD_VAR 0 2
28438: ADD
28439: ST_TO_ADDR
28440: GO 28391
28442: POP
28443: POP
// temp_list = temp_list diff ai_vehicles_being_repaired [ base ] ;
28444: LD_ADDR_VAR 0 4
28448: PUSH
28449: LD_VAR 0 4
28453: PUSH
28454: LD_EXP 79
28458: PUSH
28459: LD_VAR 0 14
28463: ARRAY
28464: DIFF
28465: ST_TO_ADDR
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
28466: LD_ADDR_EXP 54
28470: PUSH
28471: LD_EXP 54
28475: PPUSH
28476: LD_VAR 0 14
28480: PPUSH
28481: LD_VAR 0 4
28485: PPUSH
28486: CALL_OW 1
28490: ST_TO_ADDR
// for i in ai_refuel_vehicles_list [ base ] do
28491: LD_ADDR_VAR 0 2
28495: PUSH
28496: LD_EXP 54
28500: PUSH
28501: LD_VAR 0 14
28505: ARRAY
28506: PUSH
28507: FOR_IN
28508: IFFALSE 28609
// begin if IsInArea ( i , area ) then
28510: LD_VAR 0 2
28514: PPUSH
28515: LD_VAR 0 15
28519: PPUSH
28520: CALL_OW 308
28524: IFFALSE 28568
// begin ComMoveUnit ( i , ai_depot [ base ] ) ;
28526: LD_VAR 0 2
28530: PPUSH
28531: LD_EXP 34
28535: PUSH
28536: LD_VAR 0 14
28540: ARRAY
28541: PPUSH
28542: CALL_OW 112
// AddComRefuel ( i , ai_depot [ base ] ) ;
28546: LD_VAR 0 2
28550: PPUSH
28551: LD_EXP 34
28555: PUSH
28556: LD_VAR 0 14
28560: ARRAY
28561: PPUSH
28562: CALL_OW 210
// end else
28566: GO 28607
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
28568: LD_VAR 0 2
28572: PPUSH
28573: LD_EXP 41
28577: PUSH
28578: LD_VAR 0 14
28582: ARRAY
28583: PUSH
28584: LD_INT 1
28586: ARRAY
28587: PPUSH
28588: LD_EXP 41
28592: PUSH
28593: LD_VAR 0 14
28597: ARRAY
28598: PUSH
28599: LD_INT 2
28601: ARRAY
28602: PPUSH
28603: CALL_OW 114
// end ;
28607: GO 28507
28609: POP
28610: POP
// end ; for i in ai_vehicles_defend [ base ] diff ai_refuel_vehicles_list [ base ] do
28611: LD_ADDR_VAR 0 2
28615: PUSH
28616: LD_EXP 39
28620: PUSH
28621: LD_VAR 0 14
28625: ARRAY
28626: PUSH
28627: LD_EXP 54
28631: PUSH
28632: LD_VAR 0 14
28636: ARRAY
28637: DIFF
28638: PUSH
28639: FOR_IN
28640: IFFALSE 28700
// if not IsInArea ( i , area ) then
28642: LD_VAR 0 2
28646: PPUSH
28647: LD_VAR 0 15
28651: PPUSH
28652: CALL_OW 308
28656: NOT
28657: IFFALSE 28698
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
28659: LD_VAR 0 2
28663: PPUSH
28664: LD_EXP 41
28668: PUSH
28669: LD_VAR 0 14
28673: ARRAY
28674: PUSH
28675: LD_INT 1
28677: ARRAY
28678: PPUSH
28679: LD_EXP 41
28683: PUSH
28684: LD_VAR 0 14
28688: ARRAY
28689: PUSH
28690: LD_INT 2
28692: ARRAY
28693: PPUSH
28694: CALL_OW 114
28698: GO 28639
28700: POP
28701: POP
// end ; if mechanics_list = 0 and remote_mechanics = 0 then
28702: LD_VAR 0 3
28706: PUSH
28707: LD_INT 0
28709: EQUAL
28710: PUSH
28711: LD_VAR 0 18
28715: PUSH
28716: LD_INT 0
28718: EQUAL
28719: AND
28720: IFFALSE 28724
// continue ;
28722: GO 25437
// allowed_to_repair_vehicles = UnitFilter ( ai_vehicles_defend [ base ] ^ ( ai_crane [ base ] diff 0 ) , [ [ f_not , [ f_lives , 1000 ] ] , [ f_inarea , GetBaseArea ( base ) ] ] ) ;
28724: LD_ADDR_VAR 0 9
28728: PUSH
28729: LD_EXP 39
28733: PUSH
28734: LD_VAR 0 14
28738: ARRAY
28739: PUSH
28740: LD_EXP 70
28744: PUSH
28745: LD_VAR 0 14
28749: ARRAY
28750: PUSH
28751: LD_INT 0
28753: DIFF
28754: ADD
28755: PPUSH
28756: LD_INT 3
28758: PUSH
28759: LD_INT 24
28761: PUSH
28762: LD_INT 1000
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 95
28775: PUSH
28776: LD_VAR 0 14
28780: PPUSH
28781: CALL 12310 0 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PPUSH
28794: CALL_OW 72
28798: ST_TO_ADDR
// if not under_attack then
28799: LD_VAR 0 10
28803: NOT
28804: IFFALSE 28875
// allowed_to_repair_vehicles = allowed_to_repair_vehicles ^ UnitFilter ( ai_cargo_bay [ base ] diff 0 , [ [ f_not , [ f_lives , 1000 ] ] , [ f_inarea , GetBaseArea ( base ) ] ] ) ;
28806: LD_ADDR_VAR 0 9
28810: PUSH
28811: LD_VAR 0 9
28815: PUSH
28816: LD_EXP 60
28820: PUSH
28821: LD_VAR 0 14
28825: ARRAY
28826: PUSH
28827: LD_INT 0
28829: DIFF
28830: PPUSH
28831: LD_INT 3
28833: PUSH
28834: LD_INT 24
28836: PUSH
28837: LD_INT 1000
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 95
28850: PUSH
28851: LD_VAR 0 14
28855: PPUSH
28856: CALL 12310 0 1
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PPUSH
28869: CALL_OW 72
28873: ADD
28874: ST_TO_ADDR
// allowed_to_repair_vehicles = allowed_to_repair_vehicles diff ( ai_refuel_vehicles_list [ base ] ^ ai_vehicles_being_repaired [ base ] ) ;
28875: LD_ADDR_VAR 0 9
28879: PUSH
28880: LD_VAR 0 9
28884: PUSH
28885: LD_EXP 54
28889: PUSH
28890: LD_VAR 0 14
28894: ARRAY
28895: PUSH
28896: LD_EXP 79
28900: PUSH
28901: LD_VAR 0 14
28905: ARRAY
28906: ADD
28907: DIFF
28908: ST_TO_ADDR
// if allowed_to_repair_vehicles > 0 or ai_vehicles_being_repaired [ base ] > 0 then
28909: LD_VAR 0 9
28913: PUSH
28914: LD_INT 0
28916: GREATER
28917: PUSH
28918: LD_EXP 79
28922: PUSH
28923: LD_VAR 0 14
28927: ARRAY
28928: PUSH
28929: LD_INT 0
28931: GREATER
28932: OR
28933: IFFALSE 29435
// begin if remote_mechanics > 0 then
28935: LD_VAR 0 18
28939: PUSH
28940: LD_INT 0
28942: GREATER
28943: IFFALSE 29179
// begin if under_attack then
28945: LD_VAR 0 10
28949: IFFALSE 29057
// begin for i in remote_driver_vehicles [ base ] do
28951: LD_ADDR_VAR 0 2
28955: PUSH
28956: LD_VAR 0 24
28960: PUSH
28961: LD_VAR 0 14
28965: ARRAY
28966: PUSH
28967: FOR_IN
28968: IFFALSE 29053
// if UnitFilter ( i [ 2 ] , [ f_ok ] ) = 0 and i [ 1 ] in remote_mechanics then
28970: LD_VAR 0 2
28974: PUSH
28975: LD_INT 2
28977: ARRAY
28978: PPUSH
28979: LD_INT 50
28981: PUSH
28982: EMPTY
28983: LIST
28984: PPUSH
28985: CALL_OW 72
28989: PUSH
28990: LD_INT 0
28992: EQUAL
28993: PUSH
28994: LD_VAR 0 2
28998: PUSH
28999: LD_INT 1
29001: ARRAY
29002: PUSH
29003: LD_VAR 0 18
29007: IN
29008: AND
29009: IFFALSE 29051
// begin mechanics_list = mechanics_list ^ i [ 1 ] ;
29011: LD_ADDR_VAR 0 3
29015: PUSH
29016: LD_VAR 0 3
29020: PUSH
29021: LD_VAR 0 2
29025: PUSH
29026: LD_INT 1
29028: ARRAY
29029: ADD
29030: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff i [ 1 ] ;
29031: LD_ADDR_VAR 0 18
29035: PUSH
29036: LD_VAR 0 18
29040: PUSH
29041: LD_VAR 0 2
29045: PUSH
29046: LD_INT 1
29048: ARRAY
29049: DIFF
29050: ST_TO_ADDR
// end ;
29051: GO 28967
29053: POP
29054: POP
// end else
29055: GO 29179
// begin temp_unit = true ;
29057: LD_ADDR_VAR 0 7
29061: PUSH
29062: LD_INT 1
29064: ST_TO_ADDR
// for i in remote_driver_vehicles [ base ] do
29065: LD_ADDR_VAR 0 2
29069: PUSH
29070: LD_VAR 0 24
29074: PUSH
29075: LD_VAR 0 14
29079: ARRAY
29080: PUSH
29081: FOR_IN
29082: IFFALSE 29148
// begin for k in i [ 2 ] do
29084: LD_ADDR_VAR 0 12
29088: PUSH
29089: LD_VAR 0 2
29093: PUSH
29094: LD_INT 2
29096: ARRAY
29097: PUSH
29098: FOR_IN
29099: IFFALSE 29135
// if not IsInArea ( k , GetBaseArea ( base ) ) then
29101: LD_VAR 0 12
29105: PPUSH
29106: LD_VAR 0 14
29110: PPUSH
29111: CALL 12310 0 1
29115: PPUSH
29116: CALL_OW 308
29120: NOT
29121: IFFALSE 29133
// begin temp_unit = false ;
29123: LD_ADDR_VAR 0 7
29127: PUSH
29128: LD_INT 0
29130: ST_TO_ADDR
// break ;
29131: GO 29135
// end ;
29133: GO 29098
29135: POP
29136: POP
// if not temp_unit then
29137: LD_VAR 0 7
29141: NOT
29142: IFFALSE 29146
// break ;
29144: GO 29148
// end ;
29146: GO 29081
29148: POP
29149: POP
// if temp_unit then
29150: LD_VAR 0 7
29154: IFFALSE 29179
// begin mechanics_list = mechanics_list ^ remote_mechanics ;
29156: LD_ADDR_VAR 0 3
29160: PUSH
29161: LD_VAR 0 3
29165: PUSH
29166: LD_VAR 0 18
29170: ADD
29171: ST_TO_ADDR
// remote_mechanics = [ ] ;
29172: LD_ADDR_VAR 0 18
29176: PUSH
29177: EMPTY
29178: ST_TO_ADDR
// end ; end ; end ; if allowed_to_repair_vehicles > 0 then
29179: LD_VAR 0 9
29183: PUSH
29184: LD_INT 0
29186: GREATER
29187: IFFALSE 29404
// begin k = false ;
29189: LD_ADDR_VAR 0 12
29193: PUSH
29194: LD_INT 0
29196: ST_TO_ADDR
// if ai_vehicles_being_repaired [ base ] = 0 then
29197: LD_EXP 79
29201: PUSH
29202: LD_VAR 0 14
29206: ARRAY
29207: PUSH
29208: LD_INT 0
29210: EQUAL
29211: IFFALSE 29223
// k = true else
29213: LD_ADDR_VAR 0 12
29217: PUSH
29218: LD_INT 1
29220: ST_TO_ADDR
29221: GO 29286
// if IsOk ( ai_vehicles_being_repaired [ base ] [ 1 ] ) then
29223: LD_EXP 79
29227: PUSH
29228: LD_VAR 0 14
29232: ARRAY
29233: PUSH
29234: LD_INT 1
29236: ARRAY
29237: PPUSH
29238: CALL_OW 302
29242: IFFALSE 29286
// begin allowed_to_repair_vehicles = UnitFilter ( allowed_to_repair_vehicles , [ f_not , [ f_ok ] ] ) ;
29244: LD_ADDR_VAR 0 9
29248: PUSH
29249: LD_VAR 0 9
29253: PPUSH
29254: LD_INT 3
29256: PUSH
29257: LD_INT 50
29259: PUSH
29260: EMPTY
29261: LIST
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PPUSH
29267: CALL_OW 72
29271: ST_TO_ADDR
// k := allowed_to_repair_vehicles > 0 ;
29272: LD_ADDR_VAR 0 12
29276: PUSH
29277: LD_VAR 0 9
29281: PUSH
29282: LD_INT 0
29284: GREATER
29285: ST_TO_ADDR
// end ; if k then
29286: LD_VAR 0 12
29290: IFFALSE 29404
// begin temp_list = [ ] ;
29292: LD_ADDR_VAR 0 4
29296: PUSH
29297: EMPTY
29298: ST_TO_ADDR
// for i in allowed_to_repair_vehicles do
29299: LD_ADDR_VAR 0 2
29303: PUSH
29304: LD_VAR 0 9
29308: PUSH
29309: FOR_IN
29310: IFFALSE 29335
// temp_list = temp_list ^ GetLives ( i ) ;
29312: LD_ADDR_VAR 0 4
29316: PUSH
29317: LD_VAR 0 4
29321: PUSH
29322: LD_VAR 0 2
29326: PPUSH
29327: CALL_OW 256
29331: ADD
29332: ST_TO_ADDR
29333: GO 29309
29335: POP
29336: POP
// temp_unit = WorstFromListByList ( allowed_to_repair_vehicles , temp_list ) ;
29337: LD_ADDR_VAR 0 7
29341: PUSH
29342: LD_VAR 0 9
29346: PPUSH
29347: LD_VAR 0 4
29351: PPUSH
29352: CALL_OW 78
29356: ST_TO_ADDR
// temp_list = temp_unit ^ ai_vehicles_being_repaired [ base ] ;
29357: LD_ADDR_VAR 0 4
29361: PUSH
29362: LD_VAR 0 7
29366: PUSH
29367: LD_EXP 79
29371: PUSH
29372: LD_VAR 0 14
29376: ARRAY
29377: ADD
29378: ST_TO_ADDR
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
29379: LD_ADDR_EXP 79
29383: PUSH
29384: LD_EXP 79
29388: PPUSH
29389: LD_VAR 0 14
29393: PPUSH
29394: LD_VAR 0 4
29398: PPUSH
29399: CALL_OW 1
29403: ST_TO_ADDR
// end ; end ; ComRepairVehicle ( GetHumansOutOfUnits ( mechanics_list ) , ai_vehicles_being_repaired [ base ] [ 1 ] ) ;
29404: LD_VAR 0 3
29408: PPUSH
29409: CALL 23196 0 1
29413: PPUSH
29414: LD_EXP 79
29418: PUSH
29419: LD_VAR 0 14
29423: ARRAY
29424: PUSH
29425: LD_INT 1
29427: ARRAY
29428: PPUSH
29429: CALL_OW 129
// end else
29433: GO 29500
// begin DistributeHumansToBuildings ( base , mechanics_list , UnitFilter ( ai_facts [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_mechanic , 6 , true , false ) ;
29435: LD_VAR 0 14
29439: PPUSH
29440: LD_VAR 0 3
29444: PPUSH
29445: LD_EXP 47
29449: PUSH
29450: LD_VAR 0 14
29454: ARRAY
29455: PPUSH
29456: LD_INT 50
29458: PUSH
29459: EMPTY
29460: LIST
29461: PUSH
29462: LD_INT 3
29464: PUSH
29465: LD_INT 57
29467: PUSH
29468: EMPTY
29469: LIST
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PPUSH
29479: CALL_OW 72
29483: PPUSH
29484: LD_INT 3
29486: PPUSH
29487: LD_INT 6
29489: PPUSH
29490: LD_INT 1
29492: PPUSH
29493: LD_INT 0
29495: PPUSH
29496: CALL 15267 0 7
// end ; if remote_driver_vehicles [ base ] > 0 then
29500: LD_VAR 0 24
29504: PUSH
29505: LD_VAR 0 14
29509: ARRAY
29510: PUSH
29511: LD_INT 0
29513: GREATER
29514: IFFALSE 30050
// begin if not IsOk ( ai_control_tower [ base ] ) then
29516: LD_EXP 56
29520: PUSH
29521: LD_VAR 0 14
29525: ARRAY
29526: PPUSH
29527: CALL_OW 302
29531: NOT
29532: IFFALSE 29601
// begin DistributeHumansToBuildings ( base , remote_mechanics , UnitFilter ( ai_facts [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_mechanic , 6 , true , false ) ;
29534: LD_VAR 0 14
29538: PPUSH
29539: LD_VAR 0 18
29543: PPUSH
29544: LD_EXP 47
29548: PUSH
29549: LD_VAR 0 14
29553: ARRAY
29554: PPUSH
29555: LD_INT 50
29557: PUSH
29558: EMPTY
29559: LIST
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: LD_INT 57
29566: PUSH
29567: EMPTY
29568: LIST
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PPUSH
29578: CALL_OW 72
29582: PPUSH
29583: LD_INT 3
29585: PPUSH
29586: LD_INT 6
29588: PPUSH
29589: LD_INT 1
29591: PPUSH
29592: LD_INT 0
29594: PPUSH
29595: CALL 15267 0 7
// end else
29599: GO 30050
// begin for i in remote_driver_vehicles [ base ] do
29601: LD_ADDR_VAR 0 2
29605: PUSH
29606: LD_VAR 0 24
29610: PUSH
29611: LD_VAR 0 14
29615: ARRAY
29616: PUSH
29617: FOR_IN
29618: IFFALSE 30048
// begin if not i [ 1 ] in remote_mechanics then
29620: LD_VAR 0 2
29624: PUSH
29625: LD_INT 1
29627: ARRAY
29628: PUSH
29629: LD_VAR 0 18
29633: IN
29634: NOT
29635: IFFALSE 29639
// continue ;
29637: GO 29617
// if GetClass ( i [ 1 ] ) <> class_mechanic then
29639: LD_VAR 0 2
29643: PUSH
29644: LD_INT 1
29646: ARRAY
29647: PPUSH
29648: CALL_OW 257
29652: PUSH
29653: LD_INT 3
29655: NONEQUAL
29656: IFFALSE 29864
// begin temp_unit = 0 ;
29658: LD_ADDR_VAR 0 7
29662: PUSH
29663: LD_INT 0
29665: ST_TO_ADDR
// for k in ai_facts [ base ] do
29666: LD_ADDR_VAR 0 12
29670: PUSH
29671: LD_EXP 47
29675: PUSH
29676: LD_VAR 0 14
29680: ARRAY
29681: PUSH
29682: FOR_IN
29683: IFFALSE 29725
// if IsOk ( k ) and UnitsInside ( k ) < 6 then
29685: LD_VAR 0 12
29689: PPUSH
29690: CALL_OW 302
29694: PUSH
29695: LD_VAR 0 12
29699: PPUSH
29700: CALL_OW 313
29704: PUSH
29705: LD_INT 6
29707: LESS
29708: AND
29709: IFFALSE 29723
// begin temp_unit = k ;
29711: LD_ADDR_VAR 0 7
29715: PUSH
29716: LD_VAR 0 12
29720: ST_TO_ADDR
// break ;
29721: GO 29725
// end ;
29723: GO 29682
29725: POP
29726: POP
// if temp_unit > 0 then
29727: LD_VAR 0 7
29731: PUSH
29732: LD_INT 0
29734: GREATER
29735: IFFALSE 29862
// begin if IsInUnit ( i [ 1 ] ) = temp_unit then
29737: LD_VAR 0 2
29741: PUSH
29742: LD_INT 1
29744: ARRAY
29745: PPUSH
29746: CALL_OW 310
29750: PUSH
29751: LD_VAR 0 7
29755: EQUAL
29756: IFFALSE 29776
// ComChangeProfession ( i [ 1 ] , class_mechanic ) else
29758: LD_VAR 0 2
29762: PUSH
29763: LD_INT 1
29765: ARRAY
29766: PPUSH
29767: LD_INT 3
29769: PPUSH
29770: CALL_OW 123
29774: GO 29862
// begin case GetType ( IsInUnit ( i [ 1 ] ) ) of unit_building :
29776: LD_VAR 0 2
29780: PUSH
29781: LD_INT 1
29783: ARRAY
29784: PPUSH
29785: CALL_OW 310
29789: PPUSH
29790: CALL_OW 247
29794: PUSH
29795: LD_INT 3
29797: DOUBLE
29798: EQUAL
29799: IFTRUE 29803
29801: GO 29819
29803: POP
// ComExitBuilding ( i [ 1 ] ) ; unit_vehicle :
29804: LD_VAR 0 2
29808: PUSH
29809: LD_INT 1
29811: ARRAY
29812: PPUSH
29813: CALL_OW 122
29817: GO 29862
29819: LD_INT 2
29821: DOUBLE
29822: EQUAL
29823: IFTRUE 29827
29825: GO 29843
29827: POP
// ComExitVehicle ( i [ 1 ] ) ; else
29828: LD_VAR 0 2
29832: PUSH
29833: LD_INT 1
29835: ARRAY
29836: PPUSH
29837: CALL_OW 121
29841: GO 29862
29843: POP
// ComEnterUnit ( i [ 1 ] , temp_unit ) ; end ;
29844: LD_VAR 0 2
29848: PUSH
29849: LD_INT 1
29851: ARRAY
29852: PPUSH
29853: LD_VAR 0 7
29857: PPUSH
29858: CALL_OW 120
// end ; end ; end else
29862: GO 30046
// begin temp_unit = IsInUnit ( i [ 1 ] ) ;
29864: LD_ADDR_VAR 0 7
29868: PUSH
29869: LD_VAR 0 2
29873: PUSH
29874: LD_INT 1
29876: ARRAY
29877: PPUSH
29878: CALL_OW 310
29882: ST_TO_ADDR
// if temp_unit <> ai_control_tower [ base ] then
29883: LD_VAR 0 7
29887: PUSH
29888: LD_EXP 56
29892: PUSH
29893: LD_VAR 0 14
29897: ARRAY
29898: NONEQUAL
29899: IFFALSE 29986
// begin case GetType ( temp_unit ) of unit_building :
29901: LD_VAR 0 7
29905: PPUSH
29906: CALL_OW 247
29910: PUSH
29911: LD_INT 3
29913: DOUBLE
29914: EQUAL
29915: IFTRUE 29919
29917: GO 29935
29919: POP
// ComExitBuilding ( i [ 1 ] ) ; unit_vehicle :
29920: LD_VAR 0 2
29924: PUSH
29925: LD_INT 1
29927: ARRAY
29928: PPUSH
29929: CALL_OW 122
29933: GO 29984
29935: LD_INT 2
29937: DOUBLE
29938: EQUAL
29939: IFTRUE 29943
29941: GO 29959
29943: POP
// ComExitVehicle ( i [ 1 ] ) ; else
29944: LD_VAR 0 2
29948: PUSH
29949: LD_INT 1
29951: ARRAY
29952: PPUSH
29953: CALL_OW 121
29957: GO 29984
29959: POP
// ComEnterUnit ( i [ 1 ] , ai_control_tower [ base ] ) ; end ;
29960: LD_VAR 0 2
29964: PUSH
29965: LD_INT 1
29967: ARRAY
29968: PPUSH
29969: LD_EXP 56
29973: PUSH
29974: LD_VAR 0 14
29978: ARRAY
29979: PPUSH
29980: CALL_OW 120
// end else
29984: GO 30046
// for k in i [ 2 ] do
29986: LD_ADDR_VAR 0 12
29990: PUSH
29991: LD_VAR 0 2
29995: PUSH
29996: LD_INT 2
29998: ARRAY
29999: PUSH
30000: FOR_IN
30001: IFFALSE 30044
// if IsControledBy ( k ) <> i [ 1 ] then
30003: LD_VAR 0 12
30007: PPUSH
30008: CALL_OW 312
30012: PUSH
30013: LD_VAR 0 2
30017: PUSH
30018: LD_INT 1
30020: ARRAY
30021: NONEQUAL
30022: IFFALSE 30042
// ComLinkTo ( k , i [ 1 ] ) ;
30024: LD_VAR 0 12
30028: PPUSH
30029: LD_VAR 0 2
30033: PUSH
30034: LD_INT 1
30036: ARRAY
30037: PPUSH
30038: CALL_OW 135
30042: GO 30000
30044: POP
30045: POP
// end ; end ;
30046: GO 29617
30048: POP
30049: POP
// end ; end ; end ;
30050: GO 25437
30052: POP
30053: POP
// until false ;
30054: LD_INT 0
30056: IFFALSE 25420
// end ;
30058: PPOPN 24
30060: END
// function MaxNumWarVehicles ( base ) ; begin
30061: LD_INT 0
30063: PPUSH
// case base of 1 :
30064: LD_VAR 0 1
30068: PUSH
30069: LD_INT 1
30071: DOUBLE
30072: EQUAL
30073: IFTRUE 30077
30075: GO 30134
30077: POP
// result = WorstFromListByList ( [ ai_mechanics_defend [ base ] + 0 , 3 ] , [ ai_mechanics_defend [ base ] + 0 , 3 ] ) ; 2 :
30078: LD_ADDR_VAR 0 2
30082: PUSH
30083: LD_EXP 31
30087: PUSH
30088: LD_VAR 0 1
30092: ARRAY
30093: PUSH
30094: LD_INT 0
30096: PLUS
30097: PUSH
30098: LD_INT 3
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PPUSH
30105: LD_EXP 31
30109: PUSH
30110: LD_VAR 0 1
30114: ARRAY
30115: PUSH
30116: LD_INT 0
30118: PLUS
30119: PUSH
30120: LD_INT 3
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PPUSH
30127: CALL_OW 78
30131: ST_TO_ADDR
30132: GO 30190
30134: LD_INT 2
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30142
30140: GO 30153
30142: POP
// result = 0 ; 3 :
30143: LD_ADDR_VAR 0 2
30147: PUSH
30148: LD_INT 0
30150: ST_TO_ADDR
30151: GO 30190
30153: LD_INT 3
30155: DOUBLE
30156: EQUAL
30157: IFTRUE 30161
30159: GO 30189
30161: POP
// result = [ 3 , 4 , 5 ] [ difficulty ] ; end ;
30162: LD_ADDR_VAR 0 2
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: LD_INT 4
30172: PUSH
30173: LD_INT 5
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: LIST
30180: PUSH
30181: LD_OWVAR 67
30185: ARRAY
30186: ST_TO_ADDR
30187: GO 30190
30189: POP
// end ;
30190: LD_VAR 0 2
30194: RET
// function FindNextHexOldWaypointSystem ( waypoints , un ) ; var dist , k , num , temp ; begin
30195: LD_INT 0
30197: PPUSH
30198: PPUSH
30199: PPUSH
30200: PPUSH
30201: PPUSH
// dist = GetDistUnitXY ( un , waypoints [ 1 ] [ 1 ] , waypoints [ 1 ] [ 2 ] ) ;
30202: LD_ADDR_VAR 0 4
30206: PUSH
30207: LD_VAR 0 2
30211: PPUSH
30212: LD_VAR 0 1
30216: PUSH
30217: LD_INT 1
30219: ARRAY
30220: PUSH
30221: LD_INT 1
30223: ARRAY
30224: PPUSH
30225: LD_VAR 0 1
30229: PUSH
30230: LD_INT 1
30232: ARRAY
30233: PUSH
30234: LD_INT 2
30236: ARRAY
30237: PPUSH
30238: CALL_OW 297
30242: ST_TO_ADDR
// num = 1 ;
30243: LD_ADDR_VAR 0 6
30247: PUSH
30248: LD_INT 1
30250: ST_TO_ADDR
// for k = 2 to waypoints do
30251: LD_ADDR_VAR 0 5
30255: PUSH
30256: DOUBLE
30257: LD_INT 2
30259: DEC
30260: ST_TO_ADDR
30261: LD_VAR 0 1
30265: PUSH
30266: FOR_TO
30267: IFFALSE 30348
// begin temp = GetDistUnitXY ( un , waypoints [ k ] [ 1 ] , waypoints [ k ] [ 2 ] ) ;
30269: LD_ADDR_VAR 0 7
30273: PUSH
30274: LD_VAR 0 2
30278: PPUSH
30279: LD_VAR 0 1
30283: PUSH
30284: LD_VAR 0 5
30288: ARRAY
30289: PUSH
30290: LD_INT 1
30292: ARRAY
30293: PPUSH
30294: LD_VAR 0 1
30298: PUSH
30299: LD_VAR 0 5
30303: ARRAY
30304: PUSH
30305: LD_INT 2
30307: ARRAY
30308: PPUSH
30309: CALL_OW 297
30313: ST_TO_ADDR
// if temp < dist then
30314: LD_VAR 0 7
30318: PUSH
30319: LD_VAR 0 4
30323: LESS
30324: IFFALSE 30346
// begin dist = temp ;
30326: LD_ADDR_VAR 0 4
30330: PUSH
30331: LD_VAR 0 7
30335: ST_TO_ADDR
// num = k ;
30336: LD_ADDR_VAR 0 6
30340: PUSH
30341: LD_VAR 0 5
30345: ST_TO_ADDR
// end ; end ;
30346: GO 30266
30348: POP
30349: POP
// if num < waypoints + 0 then
30350: LD_VAR 0 6
30354: PUSH
30355: LD_VAR 0 1
30359: PUSH
30360: LD_INT 0
30362: PLUS
30363: LESS
30364: IFFALSE 30380
// num = num + 1 ;
30366: LD_ADDR_VAR 0 6
30370: PUSH
30371: LD_VAR 0 6
30375: PUSH
30376: LD_INT 1
30378: PLUS
30379: ST_TO_ADDR
// result = waypoints [ num ] ;
30380: LD_ADDR_VAR 0 3
30384: PUSH
30385: LD_VAR 0 1
30389: PUSH
30390: LD_VAR 0 6
30394: ARRAY
30395: ST_TO_ADDR
// end ;
30396: LD_VAR 0 3
30400: RET
// every 0 0$1 + 0 0$0.1 do var i , temp_value , temp_unit , temp_list , base , idle_factories , fact ; var vehicle_prod_delay ;
30401: GO 30403
30403: DISABLE
30404: LD_INT 0
30406: PPUSH
30407: PPUSH
30408: PPUSH
30409: PPUSH
30410: PPUSH
30411: PPUSH
30412: PPUSH
30413: PPUSH
// begin vehicle_prod_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
30414: LD_ADDR_VAR 0 8
30418: PUSH
30419: LD_INT 0
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: LD_INT 0
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30433: LD_INT 35
30435: PPUSH
30436: CALL_OW 67
// for base in ai_bases do
30440: LD_ADDR_VAR 0 5
30444: PUSH
30445: LD_EXP 58
30449: PUSH
30450: FOR_IN
30451: IFFALSE 31277
// begin if ContactTime ( GetBaseSide ( base ) ) <= 0 0$10 and ai_vehicles_defend [ base ] >= [ 0 , 1 , 2 ] [ difficulty ] then
30453: LD_VAR 0 5
30457: PPUSH
30458: CALL 12381 0 1
30462: PPUSH
30463: CALL_OW 462
30467: PUSH
30468: LD_INT 350
30470: LESSEQUAL
30471: PUSH
30472: LD_EXP 39
30476: PUSH
30477: LD_VAR 0 5
30481: ARRAY
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: LIST
30496: PUSH
30497: LD_OWVAR 67
30501: ARRAY
30502: GREATEREQUAL
30503: AND
30504: IFFALSE 30546
// begin vehicle_prod_delay = Replace ( vehicle_prod_delay , base , [ 1 1$15 , 0 0$45 , 0 0$30 ] [ difficulty ] ) ;
30506: LD_ADDR_VAR 0 8
30510: PUSH
30511: LD_VAR 0 8
30515: PPUSH
30516: LD_VAR 0 5
30520: PPUSH
30521: LD_INT 2625
30523: PUSH
30524: LD_INT 1575
30526: PUSH
30527: LD_INT 1050
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: PUSH
30535: LD_OWVAR 67
30539: ARRAY
30540: PPUSH
30541: CALL_OW 1
30545: ST_TO_ADDR
// end ; idle_factories = [ ] ;
30546: LD_ADDR_VAR 0 6
30550: PUSH
30551: EMPTY
30552: ST_TO_ADDR
// for i in ai_facts [ base ] do
30553: LD_ADDR_VAR 0 1
30557: PUSH
30558: LD_EXP 47
30562: PUSH
30563: LD_VAR 0 5
30567: ARRAY
30568: PUSH
30569: FOR_IN
30570: IFFALSE 30631
// if BuildingStatus ( i ) = bs_idle and IsOk ( i ) and GetBType ( i ) = b_factory then
30572: LD_VAR 0 1
30576: PPUSH
30577: CALL_OW 461
30581: PUSH
30582: LD_INT 2
30584: EQUAL
30585: PUSH
30586: LD_VAR 0 1
30590: PPUSH
30591: CALL_OW 302
30595: AND
30596: PUSH
30597: LD_VAR 0 1
30601: PPUSH
30602: CALL_OW 266
30606: PUSH
30607: LD_INT 3
30609: EQUAL
30610: AND
30611: IFFALSE 30629
// idle_factories = idle_factories ^ i ;
30613: LD_ADDR_VAR 0 6
30617: PUSH
30618: LD_VAR 0 6
30622: PUSH
30623: LD_VAR 0 1
30627: ADD
30628: ST_TO_ADDR
30629: GO 30569
30631: POP
30632: POP
// if idle_factories = 0 then
30633: LD_VAR 0 6
30637: PUSH
30638: LD_INT 0
30640: EQUAL
30641: IFFALSE 30645
// continue ;
30643: GO 30450
// temp_value = false ;
30645: LD_ADDR_VAR 0 2
30649: PUSH
30650: LD_INT 0
30652: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
30653: LD_ADDR_VAR 0 1
30657: PUSH
30658: LD_EXP 38
30662: PUSH
30663: LD_VAR 0 5
30667: ARRAY
30668: PUSH
30669: FOR_IN
30670: IFFALSE 30842
// if i [ 4 ] in [ b_bunker , b_turret ] then
30672: LD_VAR 0 1
30676: PUSH
30677: LD_INT 4
30679: ARRAY
30680: PUSH
30681: LD_INT 32
30683: PUSH
30684: LD_INT 33
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: IN
30691: IFFALSE 30840
// begin temp_unit = HexInfo ( i [ 1 ] , i [ 2 ] ) ;
30693: LD_ADDR_VAR 0 3
30697: PUSH
30698: LD_VAR 0 1
30702: PUSH
30703: LD_INT 1
30705: ARRAY
30706: PPUSH
30707: LD_VAR 0 1
30711: PUSH
30712: LD_INT 2
30714: ARRAY
30715: PPUSH
30716: CALL_OW 428
30720: ST_TO_ADDR
// if GetBType ( temp_unit ) in [ b_bunker , b_turret ] and not IsConstructed ( temp_unit ) and GetBWeapon ( temp_unit ) <> i [ 7 ] then
30721: LD_VAR 0 3
30725: PPUSH
30726: CALL_OW 266
30730: PUSH
30731: LD_INT 32
30733: PUSH
30734: LD_INT 33
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: IN
30741: PUSH
30742: LD_VAR 0 3
30746: PPUSH
30747: CALL_OW 304
30751: NOT
30752: AND
30753: PUSH
30754: LD_VAR 0 3
30758: PPUSH
30759: CALL_OW 269
30763: PUSH
30764: LD_VAR 0 1
30768: PUSH
30769: LD_INT 7
30771: ARRAY
30772: NONEQUAL
30773: AND
30774: IFFALSE 30832
// for fact in idle_factories do
30776: LD_ADDR_VAR 0 7
30780: PUSH
30781: LD_VAR 0 6
30785: PUSH
30786: FOR_IN
30787: IFFALSE 30830
// if IsWeaponFactory ( fact ) then
30789: LD_VAR 0 7
30793: PPUSH
30794: CALL 31286 0 1
30798: IFFALSE 30828
// begin ComPlaceWeapon ( temp_unit , i [ 7 ] ) ;
30800: LD_VAR 0 3
30804: PPUSH
30805: LD_VAR 0 1
30809: PUSH
30810: LD_INT 7
30812: ARRAY
30813: PPUSH
30814: CALL_OW 148
// temp_value = true ;
30818: LD_ADDR_VAR 0 2
30822: PUSH
30823: LD_INT 1
30825: ST_TO_ADDR
// break ;
30826: GO 30830
// end ;
30828: GO 30786
30830: POP
30831: POP
// if temp_value then
30832: LD_VAR 0 2
30836: IFFALSE 30840
// break ;
30838: GO 30842
// end ;
30840: GO 30669
30842: POP
30843: POP
// if temp_value then
30844: LD_VAR 0 2
30848: IFFALSE 30852
// continue ;
30850: GO 30450
// if vehicle_prod_delay [ base ] > 0 0$0 or game_phase = 2 then
30852: LD_VAR 0 8
30856: PUSH
30857: LD_VAR 0 5
30861: ARRAY
30862: PUSH
30863: LD_INT 0
30865: GREATER
30866: PUSH
30867: LD_EXP 88
30871: PUSH
30872: LD_INT 2
30874: EQUAL
30875: OR
30876: IFFALSE 30915
// begin vehicle_prod_delay = Replace ( vehicle_prod_delay , base , vehicle_prod_delay [ base ] - 0 0$1 ) ;
30878: LD_ADDR_VAR 0 8
30882: PUSH
30883: LD_VAR 0 8
30887: PPUSH
30888: LD_VAR 0 5
30892: PPUSH
30893: LD_VAR 0 8
30897: PUSH
30898: LD_VAR 0 5
30902: ARRAY
30903: PUSH
30904: LD_INT 35
30906: MINUS
30907: PPUSH
30908: CALL_OW 1
30912: ST_TO_ADDR
// continue ;
30913: GO 30450
// end ; if ai_vehicles_defend [ base ] < MaxNumWarVehicles ( base ) then
30915: LD_EXP 39
30919: PUSH
30920: LD_VAR 0 5
30924: ARRAY
30925: PUSH
30926: LD_VAR 0 5
30930: PPUSH
30931: CALL 30061 0 1
30935: LESS
30936: IFFALSE 31275
// begin case base of 1 :
30938: LD_VAR 0 5
30942: PUSH
30943: LD_INT 1
30945: DOUBLE
30946: EQUAL
30947: IFTRUE 30951
30949: GO 31069
30951: POP
// begin case Rand ( 1 , 4 ) of 1 :
30952: LD_INT 1
30954: PPUSH
30955: LD_INT 4
30957: PPUSH
30958: CALL_OW 12
30962: PUSH
30963: LD_INT 1
30965: DOUBLE
30966: EQUAL
30967: IFTRUE 30971
30969: GO 30982
30971: POP
// temp_value = us_gatling_gun ; 2 :
30972: LD_ADDR_VAR 0 2
30976: PUSH
30977: LD_INT 4
30979: ST_TO_ADDR
30980: GO 31040
30982: LD_INT 2
30984: DOUBLE
30985: EQUAL
30986: IFTRUE 30990
30988: GO 31001
30990: POP
// temp_value = us_laser ; 3 :
30991: LD_ADDR_VAR 0 2
30995: PUSH
30996: LD_INT 9
30998: ST_TO_ADDR
30999: GO 31040
31001: LD_INT 3
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31009
31007: GO 31020
31009: POP
// temp_value = us_double_gun ; 4 :
31010: LD_ADDR_VAR 0 2
31014: PUSH
31015: LD_INT 5
31017: ST_TO_ADDR
31018: GO 31040
31020: LD_INT 4
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31039
31028: POP
// temp_value = us_rocket_launcher ; end ;
31029: LD_ADDR_VAR 0 2
31033: PUSH
31034: LD_INT 7
31036: ST_TO_ADDR
31037: GO 31040
31039: POP
// ComConstruct ( idle_factories [ 1 ] , us_medium_wheeled , engine_siberite , control_remote , temp_value ) ;
31040: LD_VAR 0 6
31044: PUSH
31045: LD_INT 1
31047: ARRAY
31048: PPUSH
31049: LD_INT 2
31051: PPUSH
31052: LD_INT 3
31054: PPUSH
31055: LD_INT 2
31057: PPUSH
31058: LD_VAR 0 2
31062: PPUSH
31063: CALL_OW 125
// end ; 2 :
31067: GO 31275
31069: LD_INT 2
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31080
31077: POP
// begin end ; 3 :
31078: GO 31275
31080: LD_INT 3
31082: DOUBLE
31083: EQUAL
31084: IFTRUE 31088
31086: GO 31274
31088: POP
// begin if PlayerAtEasternBorder then
31089: CALL 31592 0 0
31093: IFFALSE 31116
// temp_list = [ ru_heavy_machine_gun , ru_gun , ru_rocket_launcher ] else
31095: LD_ADDR_VAR 0 4
31099: PUSH
31100: LD_INT 42
31102: PUSH
31103: LD_INT 44
31105: PUSH
31106: LD_INT 45
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: LIST
31113: ST_TO_ADDR
31114: GO 31135
// temp_list = [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
31116: LD_ADDR_VAR 0 4
31120: PUSH
31121: LD_INT 43
31123: PUSH
31124: LD_INT 46
31126: PUSH
31127: LD_INT 45
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: ST_TO_ADDR
// temp_value = temp_list [ Rand ( 1 , temp_list + 0 ) ] ;
31135: LD_ADDR_VAR 0 2
31139: PUSH
31140: LD_VAR 0 4
31144: PUSH
31145: LD_INT 1
31147: PPUSH
31148: LD_VAR 0 4
31152: PUSH
31153: LD_INT 0
31155: PLUS
31156: PPUSH
31157: CALL_OW 12
31161: ARRAY
31162: ST_TO_ADDR
// if not IsWeaponFactory ( idle_factories [ 1 ] ) then
31163: LD_VAR 0 6
31167: PUSH
31168: LD_INT 1
31170: ARRAY
31171: PPUSH
31172: CALL 31286 0 1
31176: NOT
31177: IFFALSE 31187
// temp_value = ru_heavy_machine_gun ;
31179: LD_ADDR_VAR 0 2
31183: PUSH
31184: LD_INT 42
31186: ST_TO_ADDR
// if temp_value = ru_heavy_gun then
31187: LD_VAR 0 2
31191: PUSH
31192: LD_INT 46
31194: EQUAL
31195: IFFALSE 31207
// i = ru_heavy_tracked else
31197: LD_ADDR_VAR 0 1
31201: PUSH
31202: LD_INT 24
31204: ST_TO_ADDR
31205: GO 31243
// if Rand ( difficulty , 4 ) = 4 then
31207: LD_OWVAR 67
31211: PPUSH
31212: LD_INT 4
31214: PPUSH
31215: CALL_OW 12
31219: PUSH
31220: LD_INT 4
31222: EQUAL
31223: IFFALSE 31235
// i = ru_heavy_tracked else
31225: LD_ADDR_VAR 0 1
31229: PUSH
31230: LD_INT 24
31232: ST_TO_ADDR
31233: GO 31243
// i = ru_medium_tracked ;
31235: LD_ADDR_VAR 0 1
31239: PUSH
31240: LD_INT 22
31242: ST_TO_ADDR
// ComConstruct ( idle_factories [ 1 ] , i , engine_siberite , control_computer , temp_value ) ;
31243: LD_VAR 0 6
31247: PUSH
31248: LD_INT 1
31250: ARRAY
31251: PPUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: LD_INT 3
31259: PPUSH
31260: LD_INT 3
31262: PPUSH
31263: LD_VAR 0 2
31267: PPUSH
31268: CALL_OW 125
// end ; end ;
31272: GO 31275
31274: POP
// end ; end ;
31275: GO 30450
31277: POP
31278: POP
// until false ;
31279: LD_INT 0
31281: IFFALSE 30433
// end ;
31283: PPOPN 8
31285: END
// function IsWeaponFactory ( factory ) ; begin
31286: LD_INT 0
31288: PPUSH
// if FilterAllUnits ( [ [ f_dist , factory , 4 ] , [ f_btype , b_ext_gun ] ] ) > 0 then
31289: LD_INT 91
31291: PUSH
31292: LD_VAR 0 1
31296: PUSH
31297: LD_INT 4
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 30
31307: PUSH
31308: LD_INT 17
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PPUSH
31319: CALL_OW 69
31323: PUSH
31324: LD_INT 0
31326: GREATER
31327: IFFALSE 31339
// result = true else
31329: LD_ADDR_VAR 0 2
31333: PUSH
31334: LD_INT 1
31336: ST_TO_ADDR
31337: GO 31347
// result = false ;
31339: LD_ADDR_VAR 0 2
31343: PUSH
31344: LD_INT 0
31346: ST_TO_ADDR
// end ;
31347: LD_VAR 0 2
31351: RET
// on VehicleCaptured ( new_identifier , old_identifier , old_side , capturing_unit ) do var temp_list , base ;
31352: LD_INT 0
31354: PPUSH
31355: PPUSH
// begin if old_side = you then
31356: LD_VAR 0 3
31360: PUSH
31361: LD_EXP 2
31365: EQUAL
31366: IFFALSE 31370
// exit ;
31368: GO 31401
// for base in ai_bases do
31370: LD_ADDR_VAR 0 6
31374: PUSH
31375: LD_EXP 58
31379: PUSH
31380: FOR_IN
31381: IFFALSE 31399
// RemoveVehicleFromVariables ( base , old_identifier ) ;
31383: LD_VAR 0 6
31387: PPUSH
31388: LD_VAR 0 2
31392: PPUSH
31393: CALL 11169 0 2
31397: GO 31380
31399: POP
31400: POP
// end ;
31401: PPOPN 6
31403: END
// on VehicleConstructed ( vehicle , factory ) do var side , temp_list , base ;
31404: LD_INT 0
31406: PPUSH
31407: PPUSH
31408: PPUSH
// begin side = GetSide ( vehicle ) ;
31409: LD_ADDR_VAR 0 3
31413: PUSH
31414: LD_VAR 0 1
31418: PPUSH
31419: CALL_OW 255
31423: ST_TO_ADDR
// if side = you then
31424: LD_VAR 0 3
31428: PUSH
31429: LD_EXP 2
31433: EQUAL
31434: IFFALSE 31438
// exit ;
31436: GO 31589
// base = FindBase ( vehicle ) ;
31438: LD_ADDR_VAR 0 5
31442: PUSH
31443: LD_VAR 0 1
31447: PPUSH
31448: CALL 12529 0 1
31452: ST_TO_ADDR
// if base = 0 then
31453: LD_VAR 0 5
31457: PUSH
31458: LD_INT 0
31460: EQUAL
31461: IFFALSE 31465
// exit ;
31463: GO 31589
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] then
31465: LD_VAR 0 1
31469: PPUSH
31470: CALL_OW 264
31474: PUSH
31475: LD_INT 12
31477: PUSH
31478: LD_INT 32
31480: PUSH
31481: LD_INT 51
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: IN
31489: NOT
31490: IFFALSE 31541
// begin temp_list = ai_vehicles_defend [ base ] ^ vehicle ;
31492: LD_ADDR_VAR 0 4
31496: PUSH
31497: LD_EXP 39
31501: PUSH
31502: LD_VAR 0 5
31506: ARRAY
31507: PUSH
31508: LD_VAR 0 1
31512: ADD
31513: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list ) ;
31514: LD_ADDR_EXP 39
31518: PUSH
31519: LD_EXP 39
31523: PPUSH
31524: LD_VAR 0 5
31528: PPUSH
31529: LD_VAR 0 4
31533: PPUSH
31534: CALL_OW 1
31538: ST_TO_ADDR
// end else
31539: GO 31589
// begin ai_cargo_bay = Replace ( ai_cargo_bay , base , vehicle ) ;
31541: LD_ADDR_EXP 60
31545: PUSH
31546: LD_EXP 60
31550: PPUSH
31551: LD_VAR 0 5
31555: PPUSH
31556: LD_VAR 0 1
31560: PPUSH
31561: CALL_OW 1
31565: ST_TO_ADDR
// ai_cargo_bay_under_construction = Replace ( ai_cargo_bay_under_construction , base , false ) ;
31566: LD_ADDR_EXP 61
31570: PUSH
31571: LD_EXP 61
31575: PPUSH
31576: LD_VAR 0 5
31580: PPUSH
31581: LD_INT 0
31583: PPUSH
31584: CALL_OW 1
31588: ST_TO_ADDR
// end ; end ;
31589: PPOPN 5
31591: END
// export function PlayerAtEasternBorder ; var temp_list ; begin
31592: LD_INT 0
31594: PPUSH
31595: PPUSH
// result = false ;
31596: LD_ADDR_VAR 0 1
31600: PUSH
31601: LD_INT 0
31603: ST_TO_ADDR
// temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31604: LD_ADDR_VAR 0 2
31608: PUSH
31609: LD_INT 22
31611: PUSH
31612: LD_EXP 2
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: LD_INT 30
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 30
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: LIST
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PPUSH
31653: CALL_OW 69
31657: ST_TO_ADDR
// if temp_list = 0 then
31658: LD_VAR 0 2
31662: PUSH
31663: LD_INT 0
31665: EQUAL
31666: IFFALSE 31678
// result = true else
31668: LD_ADDR_VAR 0 1
31672: PUSH
31673: LD_INT 1
31675: ST_TO_ADDR
31676: GO 31711
// if UnitFilter ( temp_list , [ f_inarea , player_base_outer ] ) > 0 then
31678: LD_VAR 0 2
31682: PPUSH
31683: LD_INT 95
31685: PUSH
31686: LD_INT 2
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PPUSH
31693: CALL_OW 72
31697: PUSH
31698: LD_INT 0
31700: GREATER
31701: IFFALSE 31711
// result = true ;
31703: LD_ADDR_VAR 0 1
31707: PUSH
31708: LD_INT 1
31710: ST_TO_ADDR
// end ;
31711: LD_VAR 0 1
31715: RET
// every 0 0$2 + 0 0$0.6 do var i , temp_list , human_list , num_sol , num_baz , num_sci , temp_list_2 , temp_list_3 , k ; var base , side , attack_strat_history , first_time_attack_gensher ;
31716: GO 31718
31718: DISABLE
31719: LD_INT 0
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
31727: PPUSH
31728: PPUSH
31729: PPUSH
31730: PPUSH
31731: PPUSH
31732: PPUSH
31733: PPUSH
// begin base = 3 ;
31734: LD_ADDR_VAR 0 10
31738: PUSH
31739: LD_INT 3
31741: ST_TO_ADDR
// side = russians ;
31742: LD_ADDR_VAR 0 11
31746: PUSH
31747: LD_EXP 3
31751: ST_TO_ADDR
// attack_strat_history = [ ] ;
31752: LD_ADDR_VAR 0 12
31756: PUSH
31757: EMPTY
31758: ST_TO_ADDR
// first_time_attack_gensher = true ;
31759: LD_ADDR_VAR 0 13
31763: PUSH
31764: LD_INT 1
31766: ST_TO_ADDR
// while not scout_event_over do
31767: LD_EXP 92
31771: NOT
31772: IFFALSE 31783
// wait ( 0 0$1 ) ;
31774: LD_INT 35
31776: PPUSH
31777: CALL_OW 67
31781: GO 31767
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , ai_vehicle_attack_delay [ base ] - 2 2$0 ) ;
31783: LD_ADDR_EXP 57
31787: PUSH
31788: LD_EXP 57
31792: PPUSH
31793: LD_VAR 0 10
31797: PPUSH
31798: LD_EXP 57
31802: PUSH
31803: LD_VAR 0 10
31807: ARRAY
31808: PUSH
31809: LD_INT 4200
31811: MINUS
31812: PPUSH
31813: CALL_OW 1
31817: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31818: LD_INT 35
31820: PPUSH
31821: CALL_OW 67
// if UnitFilter ( ai_attacking_soldiers [ base ] , [ f_ok ] ) > 0 or UnitFilter ( ai_attacking_scientists [ base ] , [ f_ok ] ) > 0 or UnitFilter ( ai_vehicles_attack [ base ] , [ f_ok ] ) > 0 then
31825: LD_EXP 63
31829: PUSH
31830: LD_VAR 0 10
31834: ARRAY
31835: PPUSH
31836: LD_INT 50
31838: PUSH
31839: EMPTY
31840: LIST
31841: PPUSH
31842: CALL_OW 72
31846: PUSH
31847: LD_INT 0
31849: GREATER
31850: PUSH
31851: LD_EXP 64
31855: PUSH
31856: LD_VAR 0 10
31860: ARRAY
31861: PPUSH
31862: LD_INT 50
31864: PUSH
31865: EMPTY
31866: LIST
31867: PPUSH
31868: CALL_OW 72
31872: PUSH
31873: LD_INT 0
31875: GREATER
31876: OR
31877: PUSH
31878: LD_EXP 40
31882: PUSH
31883: LD_VAR 0 10
31887: ARRAY
31888: PPUSH
31889: LD_INT 50
31891: PUSH
31892: EMPTY
31893: LIST
31894: PPUSH
31895: CALL_OW 72
31899: PUSH
31900: LD_INT 0
31902: GREATER
31903: OR
31904: IFFALSE 31908
// continue ;
31906: GO 31818
// if IsPlaced ( Cornell ) and not IsDead ( Cornell ) then
31908: LD_EXP 25
31912: PPUSH
31913: CALL_OW 305
31917: PUSH
31918: LD_EXP 25
31922: PPUSH
31923: CALL_OW 301
31927: NOT
31928: AND
31929: IFFALSE 31933
// continue ;
31931: GO 31818
// if IsPlaced ( Khattam ) and not ( IsDead ( Khattam ) or GetSide ( Khattam ) = you ) then
31933: LD_EXP 26
31937: PPUSH
31938: CALL_OW 305
31942: PUSH
31943: LD_EXP 26
31947: PPUSH
31948: CALL_OW 301
31952: PUSH
31953: LD_EXP 26
31957: PPUSH
31958: CALL_OW 255
31962: PUSH
31963: LD_EXP 2
31967: EQUAL
31968: OR
31969: NOT
31970: AND
31971: IFFALSE 31975
// continue ;
31973: GO 31818
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , ai_vehicle_attack_delay [ base ] - 0 0$1 ) ;
31975: LD_ADDR_EXP 57
31979: PUSH
31980: LD_EXP 57
31984: PPUSH
31985: LD_VAR 0 10
31989: PPUSH
31990: LD_EXP 57
31994: PUSH
31995: LD_VAR 0 10
31999: ARRAY
32000: PUSH
32001: LD_INT 35
32003: MINUS
32004: PPUSH
32005: CALL_OW 1
32009: ST_TO_ADDR
// if ai_vehicle_attack_delay [ base ] > 0 0$0 then
32010: LD_EXP 57
32014: PUSH
32015: LD_VAR 0 10
32019: ARRAY
32020: PUSH
32021: LD_INT 0
32023: GREATER
32024: IFFALSE 32028
// continue ;
32026: GO 31818
// if BaseUnderAttack ( base , - 1 ) then
32028: LD_VAR 0 10
32032: PPUSH
32033: LD_INT 1
32035: NEG
32036: PPUSH
32037: CALL 23301 0 2
32041: IFFALSE 32045
// continue ;
32043: GO 31818
// if ai_vehicles_defend [ base ] < MaxNumWarVehiclesForAttack ( base ) then
32045: LD_EXP 39
32049: PUSH
32050: LD_VAR 0 10
32054: ARRAY
32055: PUSH
32056: LD_VAR 0 10
32060: PPUSH
32061: CALL 33840 0 1
32065: LESS
32066: IFFALSE 32070
// continue ;
32068: GO 31818
// temp_list = [ ] ;
32070: LD_ADDR_VAR 0 2
32074: PUSH
32075: EMPTY
32076: ST_TO_ADDR
// temp_list_2 = ai_vehicles_defend [ base ] ;
32077: LD_ADDR_VAR 0 7
32081: PUSH
32082: LD_EXP 39
32086: PUSH
32087: LD_VAR 0 10
32091: ARRAY
32092: ST_TO_ADDR
// for i = 1 to MaxNumWarVehiclesForAttack ( base ) do
32093: LD_ADDR_VAR 0 1
32097: PUSH
32098: DOUBLE
32099: LD_INT 1
32101: DEC
32102: ST_TO_ADDR
32103: LD_VAR 0 10
32107: PPUSH
32108: CALL 33840 0 1
32112: PUSH
32113: FOR_TO
32114: IFFALSE 32160
// begin temp_list = temp_list ^ temp_list_2 [ i ] ;
32116: LD_ADDR_VAR 0 2
32120: PUSH
32121: LD_VAR 0 2
32125: PUSH
32126: LD_VAR 0 7
32130: PUSH
32131: LD_VAR 0 1
32135: ARRAY
32136: ADD
32137: ST_TO_ADDR
// RemoveVehicleFromVariables ( base , temp_list_2 [ i ] ) ;
32138: LD_VAR 0 10
32142: PPUSH
32143: LD_VAR 0 7
32147: PUSH
32148: LD_VAR 0 1
32152: ARRAY
32153: PPUSH
32154: CALL 11169 0 2
// end ;
32158: GO 32113
32160: POP
32161: POP
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , temp_list ) ;
32162: LD_ADDR_EXP 40
32166: PUSH
32167: LD_EXP 40
32171: PPUSH
32172: LD_VAR 0 10
32176: PPUSH
32177: LD_VAR 0 2
32181: PPUSH
32182: CALL_OW 1
32186: ST_TO_ADDR
// human_list = [ ] ;
32187: LD_ADDR_VAR 0 3
32191: PUSH
32192: EMPTY
32193: ST_TO_ADDR
// num_sci = difficulty + Rand ( 0 , 1 ) ;
32194: LD_ADDR_VAR 0 6
32198: PUSH
32199: LD_OWVAR 67
32203: PUSH
32204: LD_INT 0
32206: PPUSH
32207: LD_INT 1
32209: PPUSH
32210: CALL_OW 12
32214: PLUS
32215: ST_TO_ADDR
// num_sol = difficulty + 1 + Rand ( 0 , 1 ) ;
32216: LD_ADDR_VAR 0 4
32220: PUSH
32221: LD_OWVAR 67
32225: PUSH
32226: LD_INT 1
32228: PLUS
32229: PUSH
32230: LD_INT 0
32232: PPUSH
32233: LD_INT 1
32235: PPUSH
32236: CALL_OW 12
32240: PLUS
32241: ST_TO_ADDR
// num_baz = difficulty + Rand ( 0 , 1 ) ;
32242: LD_ADDR_VAR 0 5
32246: PUSH
32247: LD_OWVAR 67
32251: PUSH
32252: LD_INT 0
32254: PPUSH
32255: LD_INT 1
32257: PPUSH
32258: CALL_OW 12
32262: PLUS
32263: ST_TO_ADDR
// case num_russian_attacks of 0 :
32264: LD_EXP 86
32268: PUSH
32269: LD_INT 0
32271: DOUBLE
32272: EQUAL
32273: IFTRUE 32277
32275: GO 32330
32277: POP
// begin if num_sci > 1 then
32278: LD_VAR 0 6
32282: PUSH
32283: LD_INT 1
32285: GREATER
32286: IFFALSE 32296
// num_sci = 1 ;
32288: LD_ADDR_VAR 0 6
32292: PUSH
32293: LD_INT 1
32295: ST_TO_ADDR
// if num_sol > 2 then
32296: LD_VAR 0 4
32300: PUSH
32301: LD_INT 2
32303: GREATER
32304: IFFALSE 32314
// num_sol = 2 ;
32306: LD_ADDR_VAR 0 4
32310: PUSH
32311: LD_INT 2
32313: ST_TO_ADDR
// num_baz = num_baz - 1 ;
32314: LD_ADDR_VAR 0 5
32318: PUSH
32319: LD_VAR 0 5
32323: PUSH
32324: LD_INT 1
32326: MINUS
32327: ST_TO_ADDR
// end ; 1 :
32328: GO 32417
32330: LD_INT 1
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32383
32338: POP
// begin if num_sol > 3 then
32339: LD_VAR 0 4
32343: PUSH
32344: LD_INT 3
32346: GREATER
32347: IFFALSE 32357
// num_sol = 3 ;
32349: LD_ADDR_VAR 0 4
32353: PUSH
32354: LD_INT 3
32356: ST_TO_ADDR
// if num_baz > 1 then
32357: LD_VAR 0 5
32361: PUSH
32362: LD_INT 1
32364: GREATER
32365: IFFALSE 32381
// num_baz = num_baz - 1 ;
32367: LD_ADDR_VAR 0 5
32371: PUSH
32372: LD_VAR 0 5
32376: PUSH
32377: LD_INT 1
32379: MINUS
32380: ST_TO_ADDR
// end ; 2 :
32381: GO 32417
32383: LD_INT 2
32385: DOUBLE
32386: EQUAL
32387: IFTRUE 32391
32389: GO 32394
32391: POP
// begin end ; else
32392: GO 32417
32394: POP
// begin num_baz = num_baz + Rand ( 0 , 1 ) ;
32395: LD_ADDR_VAR 0 5
32399: PUSH
32400: LD_VAR 0 5
32404: PUSH
32405: LD_INT 0
32407: PPUSH
32408: LD_INT 1
32410: PPUSH
32411: CALL_OW 12
32415: PLUS
32416: ST_TO_ADDR
// end ; end ; if yashin_alive then
32417: LD_EXP 85
32421: IFFALSE 32455
// begin num_baz = num_baz + num_sol ;
32423: LD_ADDR_VAR 0 5
32427: PUSH
32428: LD_VAR 0 5
32432: PUSH
32433: LD_VAR 0 4
32437: PLUS
32438: ST_TO_ADDR
// num_sol = Rand ( 1 , 2 ) ;
32439: LD_ADDR_VAR 0 4
32443: PUSH
32444: LD_INT 1
32446: PPUSH
32447: LD_INT 2
32449: PPUSH
32450: CALL_OW 12
32454: ST_TO_ADDR
// end ; temp_list = CreateUnitsWithClass ( num_sci , class_scientistic , side ) ;
32455: LD_ADDR_VAR 0 2
32459: PUSH
32460: LD_VAR 0 6
32464: PPUSH
32465: LD_INT 4
32467: PPUSH
32468: LD_VAR 0 11
32472: PPUSH
32473: CALL 9640 0 3
32477: ST_TO_ADDR
// human_list = human_list ^ temp_list ;
32478: LD_ADDR_VAR 0 3
32482: PUSH
32483: LD_VAR 0 3
32487: PUSH
32488: LD_VAR 0 2
32492: ADD
32493: ST_TO_ADDR
// ai_attacking_scientists = Replace ( ai_attacking_scientists , base , temp_list ) ;
32494: LD_ADDR_EXP 64
32498: PUSH
32499: LD_EXP 64
32503: PPUSH
32504: LD_VAR 0 10
32508: PPUSH
32509: LD_VAR 0 2
32513: PPUSH
32514: CALL_OW 1
32518: ST_TO_ADDR
// temp_list = CreateUnitsWithClass ( num_sol , class_soldier , side ) ^ CreateUnitsWithClass ( num_baz , class_bazooker , side ) ;
32519: LD_ADDR_VAR 0 2
32523: PUSH
32524: LD_VAR 0 4
32528: PPUSH
32529: LD_INT 1
32531: PPUSH
32532: LD_VAR 0 11
32536: PPUSH
32537: CALL 9640 0 3
32541: PUSH
32542: LD_VAR 0 5
32546: PPUSH
32547: LD_INT 9
32549: PPUSH
32550: LD_VAR 0 11
32554: PPUSH
32555: CALL 9640 0 3
32559: ADD
32560: ST_TO_ADDR
// human_list = human_list ^ temp_list ;
32561: LD_ADDR_VAR 0 3
32565: PUSH
32566: LD_VAR 0 3
32570: PUSH
32571: LD_VAR 0 2
32575: ADD
32576: ST_TO_ADDR
// ai_attacking_soldiers = Replace ( ai_attacking_soldiers , base , temp_list ) ;
32577: LD_ADDR_EXP 63
32581: PUSH
32582: LD_EXP 63
32586: PPUSH
32587: LD_VAR 0 10
32591: PPUSH
32592: LD_VAR 0 2
32596: PPUSH
32597: CALL_OW 1
32601: ST_TO_ADDR
// for i in human_list do
32602: LD_ADDR_VAR 0 1
32606: PUSH
32607: LD_VAR 0 3
32611: PUSH
32612: FOR_IN
32613: IFFALSE 32632
// PlaceUnitArea ( i , russian_reinforcements_area , false ) ;
32615: LD_VAR 0 1
32619: PPUSH
32620: LD_INT 14
32622: PPUSH
32623: LD_INT 0
32625: PPUSH
32626: CALL_OW 49
32630: GO 32612
32632: POP
32633: POP
// if MayAttackGensherBase and Rand ( 1 , 2 ) = 1 then
32634: CALL 33789 0 0
32638: PUSH
32639: LD_INT 1
32641: PPUSH
32642: LD_INT 2
32644: PPUSH
32645: CALL_OW 12
32649: PUSH
32650: LD_INT 1
32652: EQUAL
32653: AND
32654: IFFALSE 32666
// russian_attack_strategy = 1 else
32656: LD_ADDR_EXP 83
32660: PUSH
32661: LD_INT 1
32663: ST_TO_ADDR
32664: GO 32690
// if PlayerAtEasternBorder then
32666: CALL 31592 0 0
32670: IFFALSE 32682
// russian_attack_strategy = 2 else
32672: LD_ADDR_EXP 83
32676: PUSH
32677: LD_INT 2
32679: ST_TO_ADDR
32680: GO 32690
// russian_attack_strategy = 3 ;
32682: LD_ADDR_EXP 83
32686: PUSH
32687: LD_INT 3
32689: ST_TO_ADDR
// if russian_attack_strategy <> 1 and not 1 in attack_strat_history then
32690: LD_EXP 83
32694: PUSH
32695: LD_INT 1
32697: NONEQUAL
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: LD_VAR 0 12
32706: IN
32707: NOT
32708: AND
32709: IFFALSE 32752
// if attack_strat_history >= [ 5 , 4 , 3 ] [ difficulty ] and MayAttackGensherBase then
32711: LD_VAR 0 12
32715: PUSH
32716: LD_INT 5
32718: PUSH
32719: LD_INT 4
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: PUSH
32730: LD_OWVAR 67
32734: ARRAY
32735: GREATEREQUAL
32736: PUSH
32737: CALL 33789 0 0
32741: AND
32742: IFFALSE 32752
// russian_attack_strategy = 1 ;
32744: LD_ADDR_EXP 83
32748: PUSH
32749: LD_INT 1
32751: ST_TO_ADDR
// attack_strat_history = attack_strat_history ^ russian_attack_strategy ;
32752: LD_ADDR_VAR 0 12
32756: PUSH
32757: LD_VAR 0 12
32761: PUSH
32762: LD_EXP 83
32766: ADD
32767: ST_TO_ADDR
// if russian_attack_strategy = 1 then
32768: LD_EXP 83
32772: PUSH
32773: LD_INT 1
32775: EQUAL
32776: IFFALSE 33625
// begin if first_time_attack_gensher or difficulty = 1 then
32778: LD_VAR 0 13
32782: PUSH
32783: LD_OWVAR 67
32787: PUSH
32788: LD_INT 1
32790: EQUAL
32791: OR
32792: IFFALSE 33186
// begin first_time_attack_gensher = false ;
32794: LD_ADDR_VAR 0 13
32798: PUSH
32799: LD_INT 0
32801: ST_TO_ADDR
// temp_list = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_class , class_bazooker ] ) ;
32802: LD_ADDR_VAR 0 2
32806: PUSH
32807: LD_EXP 63
32811: PUSH
32812: LD_VAR 0 10
32816: ARRAY
32817: PPUSH
32818: LD_INT 25
32820: PUSH
32821: LD_INT 9
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PPUSH
32828: CALL_OW 72
32832: ST_TO_ADDR
// for i in temp_list do
32833: LD_ADDR_VAR 0 1
32837: PUSH
32838: LD_VAR 0 2
32842: PUSH
32843: FOR_IN
32844: IFFALSE 32874
// begin RemoveHumanFromVariables ( base , i , false ) ;
32846: LD_VAR 0 10
32850: PPUSH
32851: LD_VAR 0 1
32855: PPUSH
32856: LD_INT 0
32858: PPUSH
32859: CALL 11561 0 3
// DestroyUnit ( i ) ;
32863: LD_VAR 0 1
32867: PPUSH
32868: CALL_OW 65
// end ;
32872: GO 32843
32874: POP
32875: POP
// temp_list = UnitFilter ( ai_vehicles_attack [ base ] , [ f_weapon , ru_rocket_launcher ] ) ;
32876: LD_ADDR_VAR 0 2
32880: PUSH
32881: LD_EXP 40
32885: PUSH
32886: LD_VAR 0 10
32890: ARRAY
32891: PPUSH
32892: LD_INT 34
32894: PUSH
32895: LD_INT 45
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PPUSH
32902: CALL_OW 72
32906: ST_TO_ADDR
// temp_list_2 = [ ] ;
32907: LD_ADDR_VAR 0 7
32911: PUSH
32912: EMPTY
32913: ST_TO_ADDR
// InitUc ;
32914: CALL_OW 18
// InitVc ;
32918: CALL_OW 20
// uc_side = side ;
32922: LD_ADDR_OWVAR 20
32926: PUSH
32927: LD_VAR 0 11
32931: ST_TO_ADDR
// uc_nation = nation_russian ;
32932: LD_ADDR_OWVAR 21
32936: PUSH
32937: LD_INT 3
32939: ST_TO_ADDR
// for i in temp_list do
32940: LD_ADDR_VAR 0 1
32944: PUSH
32945: LD_VAR 0 2
32949: PUSH
32950: FOR_IN
32951: IFFALSE 33145
// begin RemoveVehicleFromVariables ( base , i ) ;
32953: LD_VAR 0 10
32957: PPUSH
32958: LD_VAR 0 1
32962: PPUSH
32963: CALL 11169 0 2
// vc_chassis = GetChassis ( i ) ;
32967: LD_ADDR_OWVAR 37
32971: PUSH
32972: LD_VAR 0 1
32976: PPUSH
32977: CALL_OW 265
32981: ST_TO_ADDR
// vc_control = GetControl ( i ) ;
32982: LD_ADDR_OWVAR 38
32986: PUSH
32987: LD_VAR 0 1
32991: PPUSH
32992: CALL_OW 263
32996: ST_TO_ADDR
// vc_engine = GetEngine ( i ) ;
32997: LD_ADDR_OWVAR 39
33001: PUSH
33002: LD_VAR 0 1
33006: PPUSH
33007: CALL_OW 262
33011: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
33012: LD_ADDR_OWVAR 40
33016: PUSH
33017: LD_INT 42
33019: ST_TO_ADDR
// temp_list_3 = [ GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ;
33020: LD_ADDR_VAR 0 8
33024: PUSH
33025: LD_VAR 0 1
33029: PPUSH
33030: CALL_OW 250
33034: PUSH
33035: LD_VAR 0 1
33039: PPUSH
33040: CALL_OW 251
33044: PUSH
33045: LD_VAR 0 1
33049: PPUSH
33050: CALL_OW 254
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: ST_TO_ADDR
// DestroyUnit ( i ) ;
33060: LD_VAR 0 1
33064: PPUSH
33065: CALL_OW 65
// i = CreateVehicle ;
33069: LD_ADDR_VAR 0 1
33073: PUSH
33074: CALL_OW 45
33078: ST_TO_ADDR
// SetDir ( i , temp_list_3 [ 3 ] ) ;
33079: LD_VAR 0 1
33083: PPUSH
33084: LD_VAR 0 8
33088: PUSH
33089: LD_INT 3
33091: ARRAY
33092: PPUSH
33093: CALL_OW 233
// PlaceUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] , false ) ;
33097: LD_VAR 0 1
33101: PPUSH
33102: LD_VAR 0 8
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: PPUSH
33111: LD_VAR 0 8
33115: PUSH
33116: LD_INT 2
33118: ARRAY
33119: PPUSH
33120: LD_INT 0
33122: PPUSH
33123: CALL_OW 48
// temp_list_2 = temp_list_2 ^ i ;
33127: LD_ADDR_VAR 0 7
33131: PUSH
33132: LD_VAR 0 7
33136: PUSH
33137: LD_VAR 0 1
33141: ADD
33142: ST_TO_ADDR
// end ;
33143: GO 32950
33145: POP
33146: POP
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , ai_vehicles_attack [ base ] ^ temp_list_2 ) ;
33147: LD_ADDR_EXP 40
33151: PUSH
33152: LD_EXP 40
33156: PPUSH
33157: LD_VAR 0 10
33161: PPUSH
33162: LD_EXP 40
33166: PUSH
33167: LD_VAR 0 10
33171: ARRAY
33172: PUSH
33173: LD_VAR 0 7
33177: ADD
33178: PPUSH
33179: CALL_OW 1
33183: ST_TO_ADDR
// end else
33184: GO 33415
// begin temp_list = [ ] ;
33186: LD_ADDR_VAR 0 2
33190: PUSH
33191: EMPTY
33192: ST_TO_ADDR
// temp_list_2 = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_class , class_bazooker ] ) ;
33193: LD_ADDR_VAR 0 7
33197: PUSH
33198: LD_EXP 63
33202: PUSH
33203: LD_VAR 0 10
33207: ARRAY
33208: PPUSH
33209: LD_INT 25
33211: PUSH
33212: LD_INT 9
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PPUSH
33219: CALL_OW 72
33223: ST_TO_ADDR
// temp_list_3 = ai_attacking_soldiers [ base ] diff temp_list_2 ;
33224: LD_ADDR_VAR 0 8
33228: PUSH
33229: LD_EXP 63
33233: PUSH
33234: LD_VAR 0 10
33238: ARRAY
33239: PUSH
33240: LD_VAR 0 7
33244: DIFF
33245: ST_TO_ADDR
// if temp_list_2 > 0 then
33246: LD_VAR 0 7
33250: PUSH
33251: LD_INT 0
33253: GREATER
33254: IFFALSE 33286
// temp_list = temp_list ^ temp_list_2 [ Rand ( 1 , temp_list_2 ) ] ;
33256: LD_ADDR_VAR 0 2
33260: PUSH
33261: LD_VAR 0 2
33265: PUSH
33266: LD_VAR 0 7
33270: PUSH
33271: LD_INT 1
33273: PPUSH
33274: LD_VAR 0 7
33278: PPUSH
33279: CALL_OW 12
33283: ARRAY
33284: ADD
33285: ST_TO_ADDR
// if temp_list_3 > 0 then
33286: LD_VAR 0 8
33290: PUSH
33291: LD_INT 0
33293: GREATER
33294: IFFALSE 33326
// temp_list = temp_list ^ temp_list_3 [ Rand ( 1 , temp_list_3 ) ] ;
33296: LD_ADDR_VAR 0 2
33300: PUSH
33301: LD_VAR 0 2
33305: PUSH
33306: LD_VAR 0 8
33310: PUSH
33311: LD_INT 1
33313: PPUSH
33314: LD_VAR 0 8
33318: PPUSH
33319: CALL_OW 12
33323: ARRAY
33324: ADD
33325: ST_TO_ADDR
// temp_list_2 = ai_attacking_scientists [ base ] ;
33326: LD_ADDR_VAR 0 7
33330: PUSH
33331: LD_EXP 64
33335: PUSH
33336: LD_VAR 0 10
33340: ARRAY
33341: ST_TO_ADDR
// temp_list = temp_list ^ temp_list_2 [ Rand ( 1 , temp_list_2 ) ] ;
33342: LD_ADDR_VAR 0 2
33346: PUSH
33347: LD_VAR 0 2
33351: PUSH
33352: LD_VAR 0 7
33356: PUSH
33357: LD_INT 1
33359: PPUSH
33360: LD_VAR 0 7
33364: PPUSH
33365: CALL_OW 12
33369: ARRAY
33370: ADD
33371: ST_TO_ADDR
// for i in temp_list do
33372: LD_ADDR_VAR 0 1
33376: PUSH
33377: LD_VAR 0 2
33381: PUSH
33382: FOR_IN
33383: IFFALSE 33413
// begin RemoveHumanFromVariables ( base , i , false ) ;
33385: LD_VAR 0 10
33389: PPUSH
33390: LD_VAR 0 1
33394: PPUSH
33395: LD_INT 0
33397: PPUSH
33398: CALL 11561 0 3
// DestroyUnit ( i ) ;
33402: LD_VAR 0 1
33406: PPUSH
33407: CALL_OW 65
// end ;
33411: GO 33382
33413: POP
33414: POP
// end ; temp_list_2 = ai_vehicles_attack [ base ] ;
33415: LD_ADDR_VAR 0 7
33419: PUSH
33420: LD_EXP 40
33424: PUSH
33425: LD_VAR 0 10
33429: ARRAY
33430: ST_TO_ADDR
// temp_list = [ ] ;
33431: LD_ADDR_VAR 0 2
33435: PUSH
33436: EMPTY
33437: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 1 ] [ difficulty ] do
33438: LD_ADDR_VAR 0 1
33442: PUSH
33443: DOUBLE
33444: LD_INT 1
33446: DEC
33447: ST_TO_ADDR
33448: LD_INT 2
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: LIST
33461: PUSH
33462: LD_OWVAR 67
33466: ARRAY
33467: PUSH
33468: FOR_TO
33469: IFFALSE 33545
// begin if temp_list_2 = 0 then
33471: LD_VAR 0 7
33475: PUSH
33476: LD_INT 0
33478: EQUAL
33479: IFFALSE 33483
// break ;
33481: GO 33545
// k = temp_list_2 [ Rand ( 1 , temp_list_2 + 0 ) ] ;
33483: LD_ADDR_VAR 0 9
33487: PUSH
33488: LD_VAR 0 7
33492: PUSH
33493: LD_INT 1
33495: PPUSH
33496: LD_VAR 0 7
33500: PUSH
33501: LD_INT 0
33503: PLUS
33504: PPUSH
33505: CALL_OW 12
33509: ARRAY
33510: ST_TO_ADDR
// temp_list = temp_list ^ k ;
33511: LD_ADDR_VAR 0 2
33515: PUSH
33516: LD_VAR 0 2
33520: PUSH
33521: LD_VAR 0 9
33525: ADD
33526: ST_TO_ADDR
// temp_list_2 = temp_list_2 diff k ;
33527: LD_ADDR_VAR 0 7
33531: PUSH
33532: LD_VAR 0 7
33536: PUSH
33537: LD_VAR 0 9
33541: DIFF
33542: ST_TO_ADDR
// end ;
33543: GO 33468
33545: POP
33546: POP
// for i in temp_list do
33547: LD_ADDR_VAR 0 1
33551: PUSH
33552: LD_VAR 0 2
33556: PUSH
33557: FOR_IN
33558: IFFALSE 33623
// begin RemoveVehicleFromVariables ( base , i ) ;
33560: LD_VAR 0 10
33564: PPUSH
33565: LD_VAR 0 1
33569: PPUSH
33570: CALL 11169 0 2
// temp_list_2 = ai_vehicles_defend [ base ] ^ i ;
33574: LD_ADDR_VAR 0 7
33578: PUSH
33579: LD_EXP 39
33583: PUSH
33584: LD_VAR 0 10
33588: ARRAY
33589: PUSH
33590: LD_VAR 0 1
33594: ADD
33595: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list_2 ) ;
33596: LD_ADDR_EXP 39
33600: PUSH
33601: LD_EXP 39
33605: PPUSH
33606: LD_VAR 0 10
33610: PPUSH
33611: LD_VAR 0 7
33615: PPUSH
33616: CALL_OW 1
33620: ST_TO_ADDR
// end ;
33621: GO 33557
33623: POP
33624: POP
// end ; temp_list = ai_attacking_unit_hex_index [ base ] ;
33625: LD_ADDR_VAR 0 2
33629: PUSH
33630: LD_EXP 74
33634: PUSH
33635: LD_VAR 0 10
33639: ARRAY
33640: ST_TO_ADDR
// for i in ai_vehicles_attack [ base ] ^ ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
33641: LD_ADDR_VAR 0 1
33645: PUSH
33646: LD_EXP 40
33650: PUSH
33651: LD_VAR 0 10
33655: ARRAY
33656: PUSH
33657: LD_EXP 63
33661: PUSH
33662: LD_VAR 0 10
33666: ARRAY
33667: ADD
33668: PUSH
33669: LD_EXP 64
33673: PUSH
33674: LD_VAR 0 10
33678: ARRAY
33679: ADD
33680: PUSH
33681: FOR_IN
33682: IFFALSE 33709
// temp_list = Replace ( temp_list , i , 1 ) ;
33684: LD_ADDR_VAR 0 2
33688: PUSH
33689: LD_VAR 0 2
33693: PPUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: LD_INT 1
33701: PPUSH
33702: CALL_OW 1
33706: ST_TO_ADDR
33707: GO 33681
33709: POP
33710: POP
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
33711: LD_ADDR_EXP 74
33715: PUSH
33716: LD_EXP 74
33720: PPUSH
33721: LD_VAR 0 10
33725: PPUSH
33726: LD_VAR 0 2
33730: PPUSH
33731: CALL_OW 1
33735: ST_TO_ADDR
// num_russian_attacks = num_russian_attacks + 1 ;
33736: LD_ADDR_EXP 86
33740: PUSH
33741: LD_EXP 86
33745: PUSH
33746: LD_INT 1
33748: PLUS
33749: ST_TO_ADDR
// ai_new_attack_commencing = Replace ( ai_new_attack_commencing , base , true ) ;
33750: LD_ADDR_EXP 69
33754: PUSH
33755: LD_EXP 69
33759: PPUSH
33760: LD_VAR 0 10
33764: PPUSH
33765: LD_INT 1
33767: PPUSH
33768: CALL_OW 1
33772: ST_TO_ADDR
// ResetVehicleAttackDelay ( base ) ;
33773: LD_VAR 0 10
33777: PPUSH
33778: CALL 10004 0 1
// until false ;
33782: LD_INT 0
33784: IFFALSE 31818
// end ;
33786: PPOPN 13
33788: END
// function MayAttackGensherBase ; begin
33789: LD_INT 0
33791: PPUSH
// if not scout_event_over or game_phase > 1 then
33792: LD_EXP 92
33796: NOT
33797: PUSH
33798: LD_EXP 88
33802: PUSH
33803: LD_INT 1
33805: GREATER
33806: OR
33807: IFFALSE 33819
// result = false else
33809: LD_ADDR_VAR 0 1
33813: PUSH
33814: LD_INT 0
33816: ST_TO_ADDR
33817: GO 33835
// result := tick >= russians_allowed_to_attack_gensher_time ;
33819: LD_ADDR_VAR 0 1
33823: PUSH
33824: LD_OWVAR 1
33828: PUSH
33829: LD_EXP 93
33833: GREATEREQUAL
33834: ST_TO_ADDR
// end ;
33835: LD_VAR 0 1
33839: RET
// function MaxNumWarVehiclesForAttack ( base ) ; begin
33840: LD_INT 0
33842: PPUSH
// case base of 1 , 2 :
33843: LD_VAR 0 1
33847: PUSH
33848: LD_INT 1
33850: DOUBLE
33851: EQUAL
33852: IFTRUE 33862
33854: LD_INT 2
33856: DOUBLE
33857: EQUAL
33858: IFTRUE 33862
33860: GO 33880
33862: POP
// result = MaxNumWarVehicles ( base ) ; 3 :
33863: LD_ADDR_VAR 0 2
33867: PUSH
33868: LD_VAR 0 1
33872: PPUSH
33873: CALL 30061 0 1
33877: ST_TO_ADDR
33878: GO 34030
33880: LD_INT 3
33882: DOUBLE
33883: EQUAL
33884: IFTRUE 33888
33886: GO 34029
33888: POP
// begin result = [ 0 , 1 , 2 ] [ difficulty ] ;
33889: LD_ADDR_VAR 0 2
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: LD_INT 1
33899: PUSH
33900: LD_INT 2
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: LIST
33907: PUSH
33908: LD_OWVAR 67
33912: ARRAY
33913: ST_TO_ADDR
// case num_russian_attacks of 0 :
33914: LD_EXP 86
33918: PUSH
33919: LD_INT 0
33921: DOUBLE
33922: EQUAL
33923: IFTRUE 33927
33925: GO 33930
33927: POP
// begin end ; 1 :
33928: GO 33995
33930: LD_INT 1
33932: DOUBLE
33933: EQUAL
33934: IFTRUE 33938
33936: GO 33955
33938: POP
// result = result + 1 ; 2 :
33939: LD_ADDR_VAR 0 2
33943: PUSH
33944: LD_VAR 0 2
33948: PUSH
33949: LD_INT 1
33951: PLUS
33952: ST_TO_ADDR
33953: GO 33995
33955: LD_INT 2
33957: DOUBLE
33958: EQUAL
33959: IFTRUE 33963
33961: GO 33980
33963: POP
// result = result + 2 ; else
33964: LD_ADDR_VAR 0 2
33968: PUSH
33969: LD_VAR 0 2
33973: PUSH
33974: LD_INT 2
33976: PLUS
33977: ST_TO_ADDR
33978: GO 33995
33980: POP
// result = result + 3 ; end ;
33981: LD_ADDR_VAR 0 2
33985: PUSH
33986: LD_VAR 0 2
33990: PUSH
33991: LD_INT 3
33993: PLUS
33994: ST_TO_ADDR
// if result > MaxNumWarVehicles ( base ) then
33995: LD_VAR 0 2
33999: PUSH
34000: LD_VAR 0 1
34004: PPUSH
34005: CALL 30061 0 1
34009: GREATER
34010: IFFALSE 34027
// result = MaxNumWarVehicles ( base ) ;
34012: LD_ADDR_VAR 0 2
34016: PUSH
34017: LD_VAR 0 1
34021: PPUSH
34022: CALL 30061 0 1
34026: ST_TO_ADDR
// end ; end ;
34027: GO 34030
34029: POP
// end ;
34030: LD_VAR 0 2
34034: RET
// every 0 0$1 + 0 0$0.2 do var i , temp_list ; var base , side ;
34035: GO 34037
34037: DISABLE
34038: LD_INT 0
34040: PPUSH
34041: PPUSH
34042: PPUSH
34043: PPUSH
// begin base = 3 ;
34044: LD_ADDR_VAR 0 3
34048: PUSH
34049: LD_INT 3
34051: ST_TO_ADDR
// side = russians ;
34052: LD_ADDR_VAR 0 4
34056: PUSH
34057: LD_EXP 3
34061: ST_TO_ADDR
// while not scout_event_over do
34062: LD_EXP 92
34066: NOT
34067: IFFALSE 34078
// wait ( 0 0$1 ) ;
34069: LD_INT 35
34071: PPUSH
34072: CALL_OW 67
34076: GO 34062
// repeat wait ( 0 0$1 ) ;
34078: LD_INT 35
34080: PPUSH
34081: CALL_OW 67
// if game_phase > 1 then
34085: LD_EXP 88
34089: PUSH
34090: LD_INT 1
34092: GREATER
34093: IFFALSE 34097
// exit ;
34095: GO 34324
// if special_russian_attackers > 0 or not MayAttackGensherBase then
34097: LD_EXP 84
34101: PUSH
34102: LD_INT 0
34104: GREATER
34105: PUSH
34106: CALL 33789 0 0
34110: NOT
34111: OR
34112: IFFALSE 34116
// continue ;
34114: GO 34078
// ai_human_attack_delay = Replace ( ai_human_attack_delay , base , ai_human_attack_delay [ base ] - 0 0$1 ) ;
34116: LD_ADDR_EXP 67
34120: PUSH
34121: LD_EXP 67
34125: PPUSH
34126: LD_VAR 0 3
34130: PPUSH
34131: LD_EXP 67
34135: PUSH
34136: LD_VAR 0 3
34140: ARRAY
34141: PUSH
34142: LD_INT 35
34144: MINUS
34145: PPUSH
34146: CALL_OW 1
34150: ST_TO_ADDR
// if ai_human_attack_delay [ base ] > 0 0$0 then
34151: LD_EXP 67
34155: PUSH
34156: LD_VAR 0 3
34160: ARRAY
34161: PUSH
34162: LD_INT 0
34164: GREATER
34165: IFFALSE 34169
// continue ;
34167: GO 34078
// if BaseUnderAttack ( base , - 1 ) then
34169: LD_VAR 0 3
34173: PPUSH
34174: LD_INT 1
34176: NEG
34177: PPUSH
34178: CALL 23301 0 2
34182: IFFALSE 34186
// continue ;
34184: GO 34078
// special_russian_attackers = CreateUnitsWithClass ( difficulty + yashin_alive , class_bazooker , side ) ;
34186: LD_ADDR_EXP 84
34190: PUSH
34191: LD_OWVAR 67
34195: PUSH
34196: LD_EXP 85
34200: PLUS
34201: PPUSH
34202: LD_INT 9
34204: PPUSH
34205: LD_VAR 0 4
34209: PPUSH
34210: CALL 9640 0 3
34214: ST_TO_ADDR
// temp_list = ai_attacking_unit_hex_index [ base ] ;
34215: LD_ADDR_VAR 0 2
34219: PUSH
34220: LD_EXP 74
34224: PUSH
34225: LD_VAR 0 3
34229: ARRAY
34230: ST_TO_ADDR
// for i in special_russian_attackers do
34231: LD_ADDR_VAR 0 1
34235: PUSH
34236: LD_EXP 84
34240: PUSH
34241: FOR_IN
34242: IFFALSE 34284
// begin PlaceUnitArea ( i , russian_reinforcements_area , false ) ;
34244: LD_VAR 0 1
34248: PPUSH
34249: LD_INT 14
34251: PPUSH
34252: LD_INT 0
34254: PPUSH
34255: CALL_OW 49
// temp_list = Replace ( temp_list , i , 1 ) ;
34259: LD_ADDR_VAR 0 2
34263: PUSH
34264: LD_VAR 0 2
34268: PPUSH
34269: LD_VAR 0 1
34273: PPUSH
34274: LD_INT 1
34276: PPUSH
34277: CALL_OW 1
34281: ST_TO_ADDR
// end ;
34282: GO 34241
34284: POP
34285: POP
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
34286: LD_ADDR_EXP 74
34290: PUSH
34291: LD_EXP 74
34295: PPUSH
34296: LD_VAR 0 3
34300: PPUSH
34301: LD_VAR 0 2
34305: PPUSH
34306: CALL_OW 1
34310: ST_TO_ADDR
// ResetHumanAttackDelay ( base ) ;
34311: LD_VAR 0 3
34315: PPUSH
34316: CALL 10053 0 1
// until false ;
34320: LD_INT 0
34322: IFFALSE 34078
// end ;
34324: PPOPN 4
34326: END
// every 0 0$1 do var side , i , temp_value , base , temp_list , temp_unit , temp_list_2 , k , human_attack_hexes , vehicle_attack_hexes , temp_list_3 ; var center_hex , center_dist , attacking_humans , area , x , y , all_done , un1 , val , attacking_vehicles ; var human_prepare_hexes , vehicle_prepare_hexes ; var human_dist , vehicle_dist , all_are_ready , strat_2_attack_permitted , vehs_to_move_to_start_pos , prepare_veh_movement ; var wait_indexes , wait_indexes_pos ;
34327: GO 34329
34329: DISABLE
34330: LD_INT 0
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
34362: PPUSH
// begin side = russians ;
34363: LD_ADDR_VAR 0 1
34367: PUSH
34368: LD_EXP 3
34372: ST_TO_ADDR
// human_dist = 3 ;
34373: LD_ADDR_VAR 0 24
34377: PUSH
34378: LD_INT 3
34380: ST_TO_ADDR
// vehicle_dist = 6 ;
34381: LD_ADDR_VAR 0 25
34385: PUSH
34386: LD_INT 6
34388: ST_TO_ADDR
// vehs_to_move_to_start_pos = [ ] ;
34389: LD_ADDR_VAR 0 28
34393: PUSH
34394: EMPTY
34395: ST_TO_ADDR
// all_are_ready = false ;
34396: LD_ADDR_VAR 0 26
34400: PUSH
34401: LD_INT 0
34403: ST_TO_ADDR
// strat_2_attack_permitted = false ;
34404: LD_ADDR_VAR 0 27
34408: PUSH
34409: LD_INT 0
34411: ST_TO_ADDR
// prepare_veh_movement = true ;
34412: LD_ADDR_VAR 0 29
34416: PUSH
34417: LD_INT 1
34419: ST_TO_ADDR
// wait_indexes_pos = 1 ;
34420: LD_ADDR_VAR 0 31
34424: PUSH
34425: LD_INT 1
34427: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34428: LD_INT 35
34430: PPUSH
34431: CALL_OW 67
// for base in ai_bases do
34435: LD_ADDR_VAR 0 4
34439: PUSH
34440: LD_EXP 58
34444: PUSH
34445: FOR_IN
34446: IFFALSE 40241
// begin if base in [ 1 , 2 ] then
34448: LD_VAR 0 4
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: LD_INT 2
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: IN
34463: IFFALSE 34467
// continue ;
34465: GO 34445
// if ai_vehicles_attack [ base ] = 0 and ai_attacking_soldiers [ base ] = 0 and ai_attacking_scientists [ base ] = 0 then
34467: LD_EXP 40
34471: PUSH
34472: LD_VAR 0 4
34476: ARRAY
34477: PUSH
34478: LD_INT 0
34480: EQUAL
34481: PUSH
34482: LD_EXP 63
34486: PUSH
34487: LD_VAR 0 4
34491: ARRAY
34492: PUSH
34493: LD_INT 0
34495: EQUAL
34496: AND
34497: PUSH
34498: LD_EXP 64
34502: PUSH
34503: LD_VAR 0 4
34507: ARRAY
34508: PUSH
34509: LD_INT 0
34511: EQUAL
34512: AND
34513: IFFALSE 34517
// continue ;
34515: GO 34445
// if ai_new_attack_commencing [ base ] then
34517: LD_EXP 69
34521: PUSH
34522: LD_VAR 0 4
34526: ARRAY
34527: IFFALSE 34584
// begin all_are_ready = false ;
34529: LD_ADDR_VAR 0 26
34533: PUSH
34534: LD_INT 0
34536: ST_TO_ADDR
// strat_2_attack_permitted = false ;
34537: LD_ADDR_VAR 0 27
34541: PUSH
34542: LD_INT 0
34544: ST_TO_ADDR
// prepare_veh_movement = true ;
34545: LD_ADDR_VAR 0 29
34549: PUSH
34550: LD_INT 1
34552: ST_TO_ADDR
// wait_indexes_pos = 1 ;
34553: LD_ADDR_VAR 0 31
34557: PUSH
34558: LD_INT 1
34560: ST_TO_ADDR
// ai_new_attack_commencing = Replace ( ai_new_attack_commencing , base , false ) ;
34561: LD_ADDR_EXP 69
34565: PUSH
34566: LD_EXP 69
34570: PPUSH
34571: LD_VAR 0 4
34575: PPUSH
34576: LD_INT 0
34578: PPUSH
34579: CALL_OW 1
34583: ST_TO_ADDR
// end ; case russian_attack_strategy of 1 :
34584: LD_EXP 83
34588: PUSH
34589: LD_INT 1
34591: DOUBLE
34592: EQUAL
34593: IFTRUE 34597
34595: GO 34811
34597: POP
// begin vehicle_prepare_hexes = [ [ 64 , 51 ] ] ;
34598: LD_ADDR_VAR 0 23
34602: PUSH
34603: LD_INT 64
34605: PUSH
34606: LD_INT 51
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: EMPTY
34614: LIST
34615: ST_TO_ADDR
// human_prepare_hexes = [ [ 72 , 55 ] ] ;
34616: LD_ADDR_VAR 0 22
34620: PUSH
34621: LD_INT 72
34623: PUSH
34624: LD_INT 55
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: EMPTY
34632: LIST
34633: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 75 , 46 ] , [ 75 , 30 ] , [ 70 , 20 ] , [ 84 , 20 ] , [ 99 , 29 ] , [ 108 , 42 ] , [ 112 , 33 ] ] ;
34634: LD_ADDR_VAR 0 10
34638: PUSH
34639: LD_INT 75
34641: PUSH
34642: LD_INT 46
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 75
34651: PUSH
34652: LD_INT 30
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 70
34661: PUSH
34662: LD_INT 20
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 84
34671: PUSH
34672: LD_INT 20
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 99
34681: PUSH
34682: LD_INT 29
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 108
34691: PUSH
34692: LD_INT 42
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 112
34701: PUSH
34702: LD_INT 33
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: ST_TO_ADDR
// human_attack_hexes = [ [ 75 , 46 ] , [ 75 , 30 ] , [ 70 , 20 ] , [ 84 , 20 ] , [ 99 , 29 ] , [ 108 , 42 ] , [ 112 , 33 ] ] ;
34718: LD_ADDR_VAR 0 9
34722: PUSH
34723: LD_INT 75
34725: PUSH
34726: LD_INT 46
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 75
34735: PUSH
34736: LD_INT 30
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 70
34745: PUSH
34746: LD_INT 20
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 84
34755: PUSH
34756: LD_INT 20
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 99
34765: PUSH
34766: LD_INT 29
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 108
34775: PUSH
34776: LD_INT 42
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 112
34785: PUSH
34786: LD_INT 33
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: ST_TO_ADDR
// wait_indexes = [ ] ;
34802: LD_ADDR_VAR 0 30
34806: PUSH
34807: EMPTY
34808: ST_TO_ADDR
// end ; 2 :
34809: GO 35630
34811: LD_INT 2
34813: DOUBLE
34814: EQUAL
34815: IFTRUE 34819
34817: GO 35363
34819: POP
// begin vehicle_prepare_hexes = [ [ 70 , 100 ] ] ;
34820: LD_ADDR_VAR 0 23
34824: PUSH
34825: LD_INT 70
34827: PUSH
34828: LD_INT 100
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: EMPTY
34836: LIST
34837: ST_TO_ADDR
// human_prepare_hexes = [ [ 60 , 82 ] ] ;
34838: LD_ADDR_VAR 0 22
34842: PUSH
34843: LD_INT 60
34845: PUSH
34846: LD_INT 82
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: EMPTY
34854: LIST
34855: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 105 , 95 ] , [ 121 , 93 ] , [ 123 , 79 ] , [ 143 , 78 ] , [ 143 , 71 ] , [ 144 , 64 ] , [ 149 , 74 ] , [ 158 , 88 ] , [ 141 , 85 ] , [ 124 , 79 ] , [ 121 , 93 ] , [ 105 , 95 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
34856: LD_ADDR_VAR 0 10
34860: PUSH
34861: LD_INT 105
34863: PUSH
34864: LD_INT 95
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 121
34873: PUSH
34874: LD_INT 93
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 123
34883: PUSH
34884: LD_INT 79
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 143
34893: PUSH
34894: LD_INT 78
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 143
34903: PUSH
34904: LD_INT 71
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 144
34913: PUSH
34914: LD_INT 64
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 149
34923: PUSH
34924: LD_INT 74
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 158
34933: PUSH
34934: LD_INT 88
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 141
34943: PUSH
34944: LD_INT 85
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 124
34953: PUSH
34954: LD_INT 79
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 121
34963: PUSH
34964: LD_INT 93
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 105
34973: PUSH
34974: LD_INT 95
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 88
34983: PUSH
34984: LD_INT 81
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 80
34993: PUSH
34994: LD_INT 63
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 78
35003: PUSH
35004: LD_INT 48
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 89
35013: PUSH
35014: LD_INT 43
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 108
35023: PUSH
35024: LD_INT 40
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 100
35033: PUSH
35034: LD_INT 28
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: ST_TO_ADDR
// human_attack_hexes = [ [ 73 , 95 ] , [ 84 , 101 ] , [ 95 , 102 ] , [ 104 , 100 ] , [ 114 , 97 ] , [ 124 , 99 ] , [ 132 , 100 ] , [ 137 , 94 ] , [ 149 , 99 ] , [ 161 , 104 ] , [ 158 , 88 ] , [ 149 , 74 ] , [ 144 , 64 ] , [ 143 , 71 ] , [ 141 , 85 ] , [ 124 , 79 ] , [ 121 , 93 ] , [ 105 , 95 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35061: LD_ADDR_VAR 0 9
35065: PUSH
35066: LD_INT 73
35068: PUSH
35069: LD_INT 95
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 84
35078: PUSH
35079: LD_INT 101
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 95
35088: PUSH
35089: LD_INT 102
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 104
35098: PUSH
35099: LD_INT 100
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 114
35108: PUSH
35109: LD_INT 97
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 124
35118: PUSH
35119: LD_INT 99
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 132
35128: PUSH
35129: LD_INT 100
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 137
35138: PUSH
35139: LD_INT 94
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 149
35148: PUSH
35149: LD_INT 99
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 161
35158: PUSH
35159: LD_INT 104
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 158
35168: PUSH
35169: LD_INT 88
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 149
35178: PUSH
35179: LD_INT 74
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 144
35188: PUSH
35189: LD_INT 64
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 143
35198: PUSH
35199: LD_INT 71
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 141
35208: PUSH
35209: LD_INT 85
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 124
35218: PUSH
35219: LD_INT 79
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 121
35228: PUSH
35229: LD_INT 93
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 105
35238: PUSH
35239: LD_INT 95
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 88
35248: PUSH
35249: LD_INT 81
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 80
35258: PUSH
35259: LD_INT 63
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 78
35268: PUSH
35269: LD_INT 48
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 89
35278: PUSH
35279: LD_INT 43
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 108
35288: PUSH
35289: LD_INT 40
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 100
35298: PUSH
35299: LD_INT 28
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: ST_TO_ADDR
// wait_indexes = [ [ 1 , 5 ] , [ 3 , 8 ] ] ;
35332: LD_ADDR_VAR 0 30
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 5
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 3
35349: PUSH
35350: LD_INT 8
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: ST_TO_ADDR
// end ; 3 :
35361: GO 35630
35363: LD_INT 3
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35371
35369: GO 35629
35371: POP
// begin vehicle_prepare_hexes = [ [ 71 , 100 ] ] ;
35372: LD_ADDR_VAR 0 23
35376: PUSH
35377: LD_INT 71
35379: PUSH
35380: LD_INT 100
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: ST_TO_ADDR
// human_prepare_hexes = [ [ 69 , 76 ] ] ;
35390: LD_ADDR_VAR 0 22
35394: PUSH
35395: LD_INT 69
35397: PUSH
35398: LD_INT 76
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: EMPTY
35406: LIST
35407: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 94 , 97 ] , [ 99 , 109 ] , [ 103 , 94 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35408: LD_ADDR_VAR 0 10
35412: PUSH
35413: LD_INT 94
35415: PUSH
35416: LD_INT 97
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 99
35425: PUSH
35426: LD_INT 109
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 103
35435: PUSH
35436: LD_INT 94
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 88
35445: PUSH
35446: LD_INT 81
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 80
35455: PUSH
35456: LD_INT 63
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 78
35465: PUSH
35466: LD_INT 48
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 89
35475: PUSH
35476: LD_INT 43
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 108
35485: PUSH
35486: LD_INT 40
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 100
35495: PUSH
35496: LD_INT 28
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: ST_TO_ADDR
// human_attack_hexes = [ [ 94 , 97 ] , [ 99 , 109 ] , [ 103 , 94 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35514: LD_ADDR_VAR 0 9
35518: PUSH
35519: LD_INT 94
35521: PUSH
35522: LD_INT 97
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 99
35531: PUSH
35532: LD_INT 109
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 103
35541: PUSH
35542: LD_INT 94
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 88
35551: PUSH
35552: LD_INT 81
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 80
35561: PUSH
35562: LD_INT 63
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 78
35571: PUSH
35572: LD_INT 48
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 89
35581: PUSH
35582: LD_INT 43
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 108
35591: PUSH
35592: LD_INT 40
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 100
35601: PUSH
35602: LD_INT 28
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: ST_TO_ADDR
// wait_indexes = [ ] ;
35620: LD_ADDR_VAR 0 30
35624: PUSH
35625: EMPTY
35626: ST_TO_ADDR
// end ; end ;
35627: GO 35630
35629: POP
// area = GetBaseArea ( base ) ;
35630: LD_ADDR_VAR 0 15
35634: PUSH
35635: LD_VAR 0 4
35639: PPUSH
35640: CALL 12310 0 1
35644: ST_TO_ADDR
// attacking_humans = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_ok ] ) ;
35645: LD_ADDR_VAR 0 14
35649: PUSH
35650: LD_EXP 63
35654: PUSH
35655: LD_VAR 0 4
35659: ARRAY
35660: PPUSH
35661: LD_INT 50
35663: PUSH
35664: EMPTY
35665: LIST
35666: PPUSH
35667: CALL_OW 72
35671: ST_TO_ADDR
// attacking_vehicles = UnitFilter ( ai_vehicles_attack [ base ] , [ f_ok ] ) ;
35672: LD_ADDR_VAR 0 21
35676: PUSH
35677: LD_EXP 40
35681: PUSH
35682: LD_VAR 0 4
35686: ARRAY
35687: PPUSH
35688: LD_INT 50
35690: PUSH
35691: EMPTY
35692: LIST
35693: PPUSH
35694: CALL_OW 72
35698: ST_TO_ADDR
// if ai_attacking_scientists [ base ] > 0 then
35699: LD_EXP 64
35703: PUSH
35704: LD_VAR 0 4
35708: ARRAY
35709: PUSH
35710: LD_INT 0
35712: GREATER
35713: IFFALSE 36083
// if ai_attacking_soldiers [ base ] = 0 then
35715: LD_EXP 63
35719: PUSH
35720: LD_VAR 0 4
35724: ARRAY
35725: PUSH
35726: LD_INT 0
35728: EQUAL
35729: IFFALSE 35755
// begin attacking_humans = attacking_humans ^ ai_attacking_scientists [ base ] ;
35731: LD_ADDR_VAR 0 14
35735: PUSH
35736: LD_VAR 0 14
35740: PUSH
35741: LD_EXP 64
35745: PUSH
35746: LD_VAR 0 4
35750: ARRAY
35751: ADD
35752: ST_TO_ADDR
// end else
35753: GO 36083
// begin x = 0 ;
35755: LD_ADDR_VAR 0 16
35759: PUSH
35760: LD_INT 0
35762: ST_TO_ADDR
// y = 0 ;
35763: LD_ADDR_VAR 0 17
35767: PUSH
35768: LD_INT 0
35770: ST_TO_ADDR
// for i in ai_attacking_soldiers [ base ] do
35771: LD_ADDR_VAR 0 2
35775: PUSH
35776: LD_EXP 63
35780: PUSH
35781: LD_VAR 0 4
35785: ARRAY
35786: PUSH
35787: FOR_IN
35788: IFFALSE 35834
// begin x = x + GetX ( i ) ;
35790: LD_ADDR_VAR 0 16
35794: PUSH
35795: LD_VAR 0 16
35799: PUSH
35800: LD_VAR 0 2
35804: PPUSH
35805: CALL_OW 250
35809: PLUS
35810: ST_TO_ADDR
// y = y + GetY ( i ) ;
35811: LD_ADDR_VAR 0 17
35815: PUSH
35816: LD_VAR 0 17
35820: PUSH
35821: LD_VAR 0 2
35825: PPUSH
35826: CALL_OW 251
35830: PLUS
35831: ST_TO_ADDR
// end ;
35832: GO 35787
35834: POP
35835: POP
// x = x div ai_attacking_soldiers [ base ] ;
35836: LD_ADDR_VAR 0 16
35840: PUSH
35841: LD_VAR 0 16
35845: PUSH
35846: LD_EXP 63
35850: PUSH
35851: LD_VAR 0 4
35855: ARRAY
35856: DIV
35857: ST_TO_ADDR
// y = y div ai_attacking_soldiers [ base ] ;
35858: LD_ADDR_VAR 0 17
35862: PUSH
35863: LD_VAR 0 17
35867: PUSH
35868: LD_EXP 63
35872: PUSH
35873: LD_VAR 0 4
35877: ARRAY
35878: DIV
35879: ST_TO_ADDR
// temp_value = 0 ;
35880: LD_ADDR_VAR 0 3
35884: PUSH
35885: LD_INT 0
35887: ST_TO_ADDR
// for i in ai_attacking_soldiers [ base ] do
35888: LD_ADDR_VAR 0 2
35892: PUSH
35893: LD_EXP 63
35897: PUSH
35898: LD_VAR 0 4
35902: ARRAY
35903: PUSH
35904: FOR_IN
35905: IFFALSE 35956
// begin k = GetDistUnitXY ( i , x , y ) ;
35907: LD_ADDR_VAR 0 8
35911: PUSH
35912: LD_VAR 0 2
35916: PPUSH
35917: LD_VAR 0 16
35921: PPUSH
35922: LD_VAR 0 17
35926: PPUSH
35927: CALL_OW 297
35931: ST_TO_ADDR
// if k > temp_value then
35932: LD_VAR 0 8
35936: PUSH
35937: LD_VAR 0 3
35941: GREATER
35942: IFFALSE 35954
// temp_value = k ;
35944: LD_ADDR_VAR 0 3
35948: PUSH
35949: LD_VAR 0 8
35953: ST_TO_ADDR
// end ;
35954: GO 35904
35956: POP
35957: POP
// for i in ai_attacking_scientists [ base ] do
35958: LD_ADDR_VAR 0 2
35962: PUSH
35963: LD_EXP 64
35967: PUSH
35968: LD_VAR 0 4
35972: ARRAY
35973: PUSH
35974: FOR_IN
35975: IFFALSE 36081
// if GetDistUnitXY ( i , x , y ) > temp_value then
35977: LD_VAR 0 2
35981: PPUSH
35982: LD_VAR 0 16
35986: PPUSH
35987: LD_VAR 0 17
35991: PPUSH
35992: CALL_OW 297
35996: PUSH
35997: LD_VAR 0 3
36001: GREATER
36002: IFFALSE 36079
// case GetType ( IsInUnit ( i ) ) of unit_building :
36004: LD_VAR 0 2
36008: PPUSH
36009: CALL_OW 310
36013: PPUSH
36014: CALL_OW 247
36018: PUSH
36019: LD_INT 3
36021: DOUBLE
36022: EQUAL
36023: IFTRUE 36027
36025: GO 36039
36027: POP
// ComExitBuilding ( i ) ; unit_vehicle :
36028: LD_VAR 0 2
36032: PPUSH
36033: CALL_OW 122
36037: GO 36079
36039: LD_INT 2
36041: DOUBLE
36042: EQUAL
36043: IFTRUE 36047
36045: GO 36059
36047: POP
// ComExitVehicle ( i ) ; else
36048: LD_VAR 0 2
36052: PPUSH
36053: CALL_OW 121
36057: GO 36079
36059: POP
// ComMoveXY ( i , x , y ) ; end ;
36060: LD_VAR 0 2
36064: PPUSH
36065: LD_VAR 0 16
36069: PPUSH
36070: LD_VAR 0 17
36074: PPUSH
36075: CALL_OW 111
36079: GO 35974
36081: POP
36082: POP
// end ; if not all_are_ready then
36083: LD_VAR 0 26
36087: NOT
36088: IFFALSE 36812
// begin all_done = true ;
36090: LD_ADDR_VAR 0 18
36094: PUSH
36095: LD_INT 1
36097: ST_TO_ADDR
// for k = 1 to 2 do
36098: LD_ADDR_VAR 0 8
36102: PUSH
36103: DOUBLE
36104: LD_INT 1
36106: DEC
36107: ST_TO_ADDR
36108: LD_INT 2
36110: PUSH
36111: FOR_TO
36112: IFFALSE 36699
// begin case k of 1 :
36114: LD_VAR 0 8
36118: PUSH
36119: LD_INT 1
36121: DOUBLE
36122: EQUAL
36123: IFTRUE 36127
36125: GO 36276
36127: POP
// begin temp_list = attacking_vehicles ;
36128: LD_ADDR_VAR 0 5
36132: PUSH
36133: LD_VAR 0 21
36137: ST_TO_ADDR
// temp_list_2 = vehicle_prepare_hexes ;
36138: LD_ADDR_VAR 0 7
36142: PUSH
36143: LD_VAR 0 23
36147: ST_TO_ADDR
// if russian_attack_strategy = 2 then
36148: LD_EXP 83
36152: PUSH
36153: LD_INT 2
36155: EQUAL
36156: IFFALSE 36274
// begin if prepare_veh_movement then
36158: LD_VAR 0 29
36162: IFFALSE 36216
// begin prepare_veh_movement = false ;
36164: LD_ADDR_VAR 0 29
36168: PUSH
36169: LD_INT 0
36171: ST_TO_ADDR
// for i in temp_list do
36172: LD_ADDR_VAR 0 2
36176: PUSH
36177: LD_VAR 0 5
36181: PUSH
36182: FOR_IN
36183: IFFALSE 36214
// if not IsInArea ( i , area ) then
36185: LD_VAR 0 2
36189: PPUSH
36190: LD_VAR 0 15
36194: PPUSH
36195: CALL_OW 308
36199: NOT
36200: IFFALSE 36212
// begin prepare_veh_movement = true ;
36202: LD_ADDR_VAR 0 29
36206: PUSH
36207: LD_INT 1
36209: ST_TO_ADDR
// break ;
36210: GO 36214
// end ;
36212: GO 36182
36214: POP
36215: POP
// end ; vehs_to_move_to_start_pos = [ ] ;
36216: LD_ADDR_VAR 0 28
36220: PUSH
36221: EMPTY
36222: ST_TO_ADDR
// for i in temp_list do
36223: LD_ADDR_VAR 0 2
36227: PUSH
36228: LD_VAR 0 5
36232: PUSH
36233: FOR_IN
36234: IFFALSE 36272
// begin vehs_to_move_to_start_pos = vehs_to_move_to_start_pos ^ i ;
36236: LD_ADDR_VAR 0 28
36240: PUSH
36241: LD_VAR 0 28
36245: PUSH
36246: LD_VAR 0 2
36250: ADD
36251: ST_TO_ADDR
// if IsInArea ( i , area ) then
36252: LD_VAR 0 2
36256: PPUSH
36257: LD_VAR 0 15
36261: PPUSH
36262: CALL_OW 308
36266: IFFALSE 36270
// break ;
36268: GO 36272
// end ;
36270: GO 36233
36272: POP
36273: POP
// end ; end ; 2 :
36274: GO 36308
36276: LD_INT 2
36278: DOUBLE
36279: EQUAL
36280: IFTRUE 36284
36282: GO 36307
36284: POP
// begin temp_list = attacking_humans ;
36285: LD_ADDR_VAR 0 5
36289: PUSH
36290: LD_VAR 0 14
36294: ST_TO_ADDR
// temp_list_2 = human_prepare_hexes ;
36295: LD_ADDR_VAR 0 7
36299: PUSH
36300: LD_VAR 0 22
36304: ST_TO_ADDR
// end ; end ;
36305: GO 36308
36307: POP
// temp_value = true ;
36308: LD_ADDR_VAR 0 3
36312: PUSH
36313: LD_INT 1
36315: ST_TO_ADDR
// for i in temp_list do
36316: LD_ADDR_VAR 0 2
36320: PUSH
36321: LD_VAR 0 5
36325: PUSH
36326: FOR_IN
36327: IFFALSE 36568
// begin if ai_attacking_unit_hex_index [ base ] [ i ] = temp_list_2 + 0 then
36329: LD_EXP 74
36333: PUSH
36334: LD_VAR 0 4
36338: ARRAY
36339: PUSH
36340: LD_VAR 0 2
36344: ARRAY
36345: PUSH
36346: LD_VAR 0 7
36350: PUSH
36351: LD_INT 0
36353: PLUS
36354: EQUAL
36355: IFFALSE 36367
// temp_value = false else
36357: LD_ADDR_VAR 0 3
36361: PUSH
36362: LD_INT 0
36364: ST_TO_ADDR
36365: GO 36375
// all_done = false ;
36367: LD_ADDR_VAR 0 18
36371: PUSH
36372: LD_INT 0
36374: ST_TO_ADDR
// temp_list_3 = temp_list_2 [ ai_attacking_unit_hex_index [ base ] [ i ] ] ;
36375: LD_ADDR_VAR 0 11
36379: PUSH
36380: LD_VAR 0 7
36384: PUSH
36385: LD_EXP 74
36389: PUSH
36390: LD_VAR 0 4
36394: ARRAY
36395: PUSH
36396: LD_VAR 0 2
36400: ARRAY
36401: ARRAY
36402: ST_TO_ADDR
// if k = 1 and russian_attack_strategy = 2 then
36403: LD_VAR 0 8
36407: PUSH
36408: LD_INT 1
36410: EQUAL
36411: PUSH
36412: LD_EXP 83
36416: PUSH
36417: LD_INT 2
36419: EQUAL
36420: AND
36421: IFFALSE 36448
// begin temp_list_3 = CalculateVehicleNotReadyHex ( temp_list_3 , i , attacking_vehicles ) ;
36423: LD_ADDR_VAR 0 11
36427: PUSH
36428: LD_VAR 0 11
36432: PPUSH
36433: LD_VAR 0 2
36437: PPUSH
36438: LD_VAR 0 21
36442: PPUSH
36443: CALL 41235 0 3
36447: ST_TO_ADDR
// end ; if GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) > [ vehicle_dist , human_dist + 1 ] [ k ] and not ( GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) <= 10 and not HasTask ( i ) ) then
36448: LD_VAR 0 2
36452: PPUSH
36453: LD_VAR 0 11
36457: PUSH
36458: LD_INT 1
36460: ARRAY
36461: PPUSH
36462: LD_VAR 0 11
36466: PUSH
36467: LD_INT 2
36469: ARRAY
36470: PPUSH
36471: CALL_OW 297
36475: PUSH
36476: LD_VAR 0 25
36480: PUSH
36481: LD_VAR 0 24
36485: PUSH
36486: LD_INT 1
36488: PLUS
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_VAR 0 8
36498: ARRAY
36499: GREATER
36500: PUSH
36501: LD_VAR 0 2
36505: PPUSH
36506: LD_VAR 0 11
36510: PUSH
36511: LD_INT 1
36513: ARRAY
36514: PPUSH
36515: LD_VAR 0 11
36519: PUSH
36520: LD_INT 2
36522: ARRAY
36523: PPUSH
36524: CALL_OW 297
36528: PUSH
36529: LD_INT 10
36531: LESSEQUAL
36532: PUSH
36533: LD_VAR 0 2
36537: PPUSH
36538: CALL_OW 314
36542: NOT
36543: AND
36544: NOT
36545: AND
36546: IFFALSE 36566
// begin temp_value = false ;
36548: LD_ADDR_VAR 0 3
36552: PUSH
36553: LD_INT 0
36555: ST_TO_ADDR
// all_done = false ;
36556: LD_ADDR_VAR 0 18
36560: PUSH
36561: LD_INT 0
36563: ST_TO_ADDR
// break ;
36564: GO 36568
// end ; end ;
36566: GO 36326
36568: POP
36569: POP
// if temp_value then
36570: LD_VAR 0 3
36574: IFFALSE 36697
// begin if k = 2 then
36576: LD_VAR 0 8
36580: PUSH
36581: LD_INT 2
36583: EQUAL
36584: IFFALSE 36608
// temp_list = temp_list union ai_attacking_scientists [ base ] ;
36586: LD_ADDR_VAR 0 5
36590: PUSH
36591: LD_VAR 0 5
36595: PUSH
36596: LD_EXP 64
36600: PUSH
36601: LD_VAR 0 4
36605: ARRAY
36606: UNION
36607: ST_TO_ADDR
// for i in temp_list do
36608: LD_ADDR_VAR 0 2
36612: PUSH
36613: LD_VAR 0 5
36617: PUSH
36618: FOR_IN
36619: IFFALSE 36695
// begin temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
36621: LD_ADDR_VAR 0 7
36625: PUSH
36626: LD_EXP 74
36630: PUSH
36631: LD_VAR 0 4
36635: ARRAY
36636: PPUSH
36637: LD_VAR 0 2
36641: PPUSH
36642: LD_EXP 74
36646: PUSH
36647: LD_VAR 0 4
36651: ARRAY
36652: PUSH
36653: LD_VAR 0 2
36657: ARRAY
36658: PUSH
36659: LD_INT 1
36661: PLUS
36662: PPUSH
36663: CALL_OW 1
36667: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
36668: LD_ADDR_EXP 74
36672: PUSH
36673: LD_EXP 74
36677: PPUSH
36678: LD_VAR 0 4
36682: PPUSH
36683: LD_VAR 0 7
36687: PPUSH
36688: CALL_OW 1
36692: ST_TO_ADDR
// end ;
36693: GO 36618
36695: POP
36696: POP
// end ; end ;
36697: GO 36111
36699: POP
36700: POP
// if all_done then
36701: LD_VAR 0 18
36705: IFFALSE 36810
// begin all_are_ready = true ;
36707: LD_ADDR_VAR 0 26
36711: PUSH
36712: LD_INT 1
36714: ST_TO_ADDR
// for i in attacking_vehicles ^ ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
36715: LD_ADDR_VAR 0 2
36719: PUSH
36720: LD_VAR 0 21
36724: PUSH
36725: LD_EXP 63
36729: PUSH
36730: LD_VAR 0 4
36734: ARRAY
36735: ADD
36736: PUSH
36737: LD_EXP 64
36741: PUSH
36742: LD_VAR 0 4
36746: ARRAY
36747: ADD
36748: PUSH
36749: FOR_IN
36750: IFFALSE 36808
// begin temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , 1 ) ;
36752: LD_ADDR_VAR 0 7
36756: PUSH
36757: LD_EXP 74
36761: PUSH
36762: LD_VAR 0 4
36766: ARRAY
36767: PPUSH
36768: LD_VAR 0 2
36772: PPUSH
36773: LD_INT 1
36775: PPUSH
36776: CALL_OW 1
36780: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
36781: LD_ADDR_EXP 74
36785: PUSH
36786: LD_EXP 74
36790: PPUSH
36791: LD_VAR 0 4
36795: PPUSH
36796: LD_VAR 0 7
36800: PPUSH
36801: CALL_OW 1
36805: ST_TO_ADDR
// end ;
36806: GO 36749
36808: POP
36809: POP
// end ; end else
36810: GO 37464
// begin temp_list_3 = [ false , false ] ;
36812: LD_ADDR_VAR 0 11
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: ST_TO_ADDR
// for i in attacking_vehicles do
36827: LD_ADDR_VAR 0 2
36831: PUSH
36832: LD_VAR 0 21
36836: PUSH
36837: FOR_IN
36838: IFFALSE 37086
// if ai_attacking_unit_hex_index [ base ] [ i ] < vehicle_attack_hexes + 0 then
36840: LD_EXP 74
36844: PUSH
36845: LD_VAR 0 4
36849: ARRAY
36850: PUSH
36851: LD_VAR 0 2
36855: ARRAY
36856: PUSH
36857: LD_VAR 0 10
36861: PUSH
36862: LD_INT 0
36864: PLUS
36865: LESS
36866: IFFALSE 37084
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) <= vehicle_dist then
36868: LD_VAR 0 2
36872: PPUSH
36873: LD_VAR 0 10
36877: PUSH
36878: LD_EXP 74
36882: PUSH
36883: LD_VAR 0 4
36887: ARRAY
36888: PUSH
36889: LD_VAR 0 2
36893: ARRAY
36894: ARRAY
36895: PUSH
36896: LD_INT 1
36898: ARRAY
36899: PPUSH
36900: LD_VAR 0 10
36904: PUSH
36905: LD_EXP 74
36909: PUSH
36910: LD_VAR 0 4
36914: ARRAY
36915: PUSH
36916: LD_VAR 0 2
36920: ARRAY
36921: ARRAY
36922: PUSH
36923: LD_INT 2
36925: ARRAY
36926: PPUSH
36927: CALL_OW 297
36931: PUSH
36932: LD_VAR 0 25
36936: LESSEQUAL
36937: IFFALSE 37084
// begin if wait_indexes_pos <= wait_indexes + 0 then
36939: LD_VAR 0 31
36943: PUSH
36944: LD_VAR 0 30
36948: PUSH
36949: LD_INT 0
36951: PLUS
36952: LESSEQUAL
36953: IFFALSE 37012
// if ai_attacking_unit_hex_index [ base ] [ i ] = wait_indexes [ wait_indexes_pos ] [ 1 ] then
36955: LD_EXP 74
36959: PUSH
36960: LD_VAR 0 4
36964: ARRAY
36965: PUSH
36966: LD_VAR 0 2
36970: ARRAY
36971: PUSH
36972: LD_VAR 0 30
36976: PUSH
36977: LD_VAR 0 31
36981: ARRAY
36982: PUSH
36983: LD_INT 1
36985: ARRAY
36986: EQUAL
36987: IFFALSE 37012
// begin temp_list_3 = Replace ( temp_list_3 , 1 , true ) ;
36989: LD_ADDR_VAR 0 11
36993: PUSH
36994: LD_VAR 0 11
36998: PPUSH
36999: LD_INT 1
37001: PPUSH
37002: LD_INT 1
37004: PPUSH
37005: CALL_OW 1
37009: ST_TO_ADDR
// continue ;
37010: GO 36837
// end ; temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37012: LD_ADDR_VAR 0 7
37016: PUSH
37017: LD_EXP 74
37021: PUSH
37022: LD_VAR 0 4
37026: ARRAY
37027: PPUSH
37028: LD_VAR 0 2
37032: PPUSH
37033: LD_EXP 74
37037: PUSH
37038: LD_VAR 0 4
37042: ARRAY
37043: PUSH
37044: LD_VAR 0 2
37048: ARRAY
37049: PUSH
37050: LD_INT 1
37052: PLUS
37053: PPUSH
37054: CALL_OW 1
37058: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37059: LD_ADDR_EXP 74
37063: PUSH
37064: LD_EXP 74
37068: PPUSH
37069: LD_VAR 0 4
37073: PPUSH
37074: LD_VAR 0 7
37078: PPUSH
37079: CALL_OW 1
37083: ST_TO_ADDR
// end ; end ;
37084: GO 36837
37086: POP
37087: POP
// temp_value = true ;
37088: LD_ADDR_VAR 0 3
37092: PUSH
37093: LD_INT 1
37095: ST_TO_ADDR
// for i in attacking_humans do
37096: LD_ADDR_VAR 0 2
37100: PUSH
37101: LD_VAR 0 14
37105: PUSH
37106: FOR_IN
37107: IFFALSE 37220
// if ai_attacking_unit_hex_index [ base ] [ i ] <= human_attack_hexes + 0 then
37109: LD_EXP 74
37113: PUSH
37114: LD_VAR 0 4
37118: ARRAY
37119: PUSH
37120: LD_VAR 0 2
37124: ARRAY
37125: PUSH
37126: LD_VAR 0 9
37130: PUSH
37131: LD_INT 0
37133: PLUS
37134: LESSEQUAL
37135: IFFALSE 37218
// begin if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
37137: LD_VAR 0 2
37141: PPUSH
37142: LD_VAR 0 9
37146: PUSH
37147: LD_EXP 74
37151: PUSH
37152: LD_VAR 0 4
37156: ARRAY
37157: PUSH
37158: LD_VAR 0 2
37162: ARRAY
37163: ARRAY
37164: PUSH
37165: LD_INT 1
37167: ARRAY
37168: PPUSH
37169: LD_VAR 0 9
37173: PUSH
37174: LD_EXP 74
37178: PUSH
37179: LD_VAR 0 4
37183: ARRAY
37184: PUSH
37185: LD_VAR 0 2
37189: ARRAY
37190: ARRAY
37191: PUSH
37192: LD_INT 2
37194: ARRAY
37195: PPUSH
37196: CALL_OW 297
37200: PUSH
37201: LD_VAR 0 24
37205: GREATER
37206: IFFALSE 37218
// begin temp_value = false ;
37208: LD_ADDR_VAR 0 3
37212: PUSH
37213: LD_INT 0
37215: ST_TO_ADDR
// break ;
37216: GO 37220
// end ; end ;
37218: GO 37106
37220: POP
37221: POP
// if temp_value then
37222: LD_VAR 0 3
37226: IFFALSE 37436
// for i in ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
37228: LD_ADDR_VAR 0 2
37232: PUSH
37233: LD_EXP 63
37237: PUSH
37238: LD_VAR 0 4
37242: ARRAY
37243: PUSH
37244: LD_EXP 64
37248: PUSH
37249: LD_VAR 0 4
37253: ARRAY
37254: ADD
37255: PUSH
37256: FOR_IN
37257: IFFALSE 37434
// if ai_attacking_unit_hex_index [ base ] [ i ] < human_attack_hexes + 0 then
37259: LD_EXP 74
37263: PUSH
37264: LD_VAR 0 4
37268: ARRAY
37269: PUSH
37270: LD_VAR 0 2
37274: ARRAY
37275: PUSH
37276: LD_VAR 0 9
37280: PUSH
37281: LD_INT 0
37283: PLUS
37284: LESS
37285: IFFALSE 37432
// begin if wait_indexes_pos <= wait_indexes + 0 then
37287: LD_VAR 0 31
37291: PUSH
37292: LD_VAR 0 30
37296: PUSH
37297: LD_INT 0
37299: PLUS
37300: LESSEQUAL
37301: IFFALSE 37360
// if ai_attacking_unit_hex_index [ base ] [ i ] = wait_indexes [ wait_indexes_pos ] [ 2 ] then
37303: LD_EXP 74
37307: PUSH
37308: LD_VAR 0 4
37312: ARRAY
37313: PUSH
37314: LD_VAR 0 2
37318: ARRAY
37319: PUSH
37320: LD_VAR 0 30
37324: PUSH
37325: LD_VAR 0 31
37329: ARRAY
37330: PUSH
37331: LD_INT 2
37333: ARRAY
37334: EQUAL
37335: IFFALSE 37360
// begin temp_list_3 = Replace ( temp_list_3 , 2 , true ) ;
37337: LD_ADDR_VAR 0 11
37341: PUSH
37342: LD_VAR 0 11
37346: PPUSH
37347: LD_INT 2
37349: PPUSH
37350: LD_INT 1
37352: PPUSH
37353: CALL_OW 1
37357: ST_TO_ADDR
// break ;
37358: GO 37434
// end ; temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37360: LD_ADDR_VAR 0 7
37364: PUSH
37365: LD_EXP 74
37369: PUSH
37370: LD_VAR 0 4
37374: ARRAY
37375: PPUSH
37376: LD_VAR 0 2
37380: PPUSH
37381: LD_EXP 74
37385: PUSH
37386: LD_VAR 0 4
37390: ARRAY
37391: PUSH
37392: LD_VAR 0 2
37396: ARRAY
37397: PUSH
37398: LD_INT 1
37400: PLUS
37401: PPUSH
37402: CALL_OW 1
37406: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37407: LD_ADDR_EXP 74
37411: PUSH
37412: LD_EXP 74
37416: PPUSH
37417: LD_VAR 0 4
37421: PPUSH
37422: LD_VAR 0 7
37426: PPUSH
37427: CALL_OW 1
37431: ST_TO_ADDR
// end ;
37432: GO 37256
37434: POP
37435: POP
// if ( temp_list_3 diff true ) = 0 then
37436: LD_VAR 0 11
37440: PUSH
37441: LD_INT 1
37443: DIFF
37444: PUSH
37445: LD_INT 0
37447: EQUAL
37448: IFFALSE 37464
// wait_indexes_pos = wait_indexes_pos + 1 ;
37450: LD_ADDR_VAR 0 31
37454: PUSH
37455: LD_VAR 0 31
37459: PUSH
37460: LD_INT 1
37462: PLUS
37463: ST_TO_ADDR
// end ; if russian_attack_strategy = 2 and not strat_2_attack_permitted then
37464: LD_EXP 83
37468: PUSH
37469: LD_INT 2
37471: EQUAL
37472: PUSH
37473: LD_VAR 0 27
37477: NOT
37478: AND
37479: IFFALSE 37614
// begin temp_list = UnitFilter ( attacking_vehicles , [ f_inarea , player_base_1 ] ) ;
37481: LD_ADDR_VAR 0 5
37485: PUSH
37486: LD_VAR 0 21
37490: PPUSH
37491: LD_INT 95
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PPUSH
37501: CALL_OW 72
37505: ST_TO_ADDR
// if temp_list + 0 >= attacking_vehicles + 0 or temp_list + 0 >= 3 then
37506: LD_VAR 0 5
37510: PUSH
37511: LD_INT 0
37513: PLUS
37514: PUSH
37515: LD_VAR 0 21
37519: PUSH
37520: LD_INT 0
37522: PLUS
37523: GREATEREQUAL
37524: PUSH
37525: LD_VAR 0 5
37529: PUSH
37530: LD_INT 0
37532: PLUS
37533: PUSH
37534: LD_INT 3
37536: GREATEREQUAL
37537: OR
37538: IFFALSE 37550
// strat_2_attack_permitted = true else
37540: LD_ADDR_VAR 0 27
37544: PUSH
37545: LD_INT 1
37547: ST_TO_ADDR
37548: GO 37614
// begin temp_value = true ;
37550: LD_ADDR_VAR 0 3
37554: PUSH
37555: LD_INT 1
37557: ST_TO_ADDR
// for i in attacking_vehicles do
37558: LD_ADDR_VAR 0 2
37562: PUSH
37563: LD_VAR 0 21
37567: PUSH
37568: FOR_IN
37569: IFFALSE 37598
// if Attacks ( i ) = 0 then
37571: LD_VAR 0 2
37575: PPUSH
37576: CALL_OW 320
37580: PUSH
37581: LD_INT 0
37583: EQUAL
37584: IFFALSE 37596
// begin temp_value = false ;
37586: LD_ADDR_VAR 0 3
37590: PUSH
37591: LD_INT 0
37593: ST_TO_ADDR
// break ;
37594: GO 37598
// end ;
37596: GO 37568
37598: POP
37599: POP
// if temp_value then
37600: LD_VAR 0 3
37604: IFFALSE 37614
// strat_2_attack_permitted = true ;
37606: LD_ADDR_VAR 0 27
37610: PUSH
37611: LD_INT 1
37613: ST_TO_ADDR
// end ; end ; for i in attacking_vehicles ^ attacking_humans do
37614: LD_ADDR_VAR 0 2
37618: PUSH
37619: LD_VAR 0 21
37623: PUSH
37624: LD_VAR 0 14
37628: ADD
37629: PUSH
37630: FOR_IN
37631: IFFALSE 40237
// begin if GetClass ( i ) = class_bazooker then
37633: LD_VAR 0 2
37637: PPUSH
37638: CALL_OW 257
37642: PUSH
37643: LD_INT 9
37645: EQUAL
37646: IFFALSE 38013
// begin temp_list = GetTaskList ( i ) ;
37648: LD_ADDR_VAR 0 5
37652: PUSH
37653: LD_VAR 0 2
37657: PPUSH
37658: CALL_OW 437
37662: ST_TO_ADDR
// if temp_list > 0 then
37663: LD_VAR 0 5
37667: PUSH
37668: LD_INT 0
37670: GREATER
37671: IFFALSE 37711
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
37673: LD_VAR 0 5
37677: PUSH
37678: LD_INT 1
37680: ARRAY
37681: PUSH
37682: LD_INT 1
37684: ARRAY
37685: PUSH
37686: LD_STRING &
37688: EQUAL
37689: PUSH
37690: LD_VAR 0 5
37694: PUSH
37695: LD_INT 1
37697: ARRAY
37698: PUSH
37699: LD_INT 1
37701: ARRAY
37702: PUSH
37703: LD_STRING %
37705: EQUAL
37706: OR
37707: IFFALSE 37711
// continue ;
37709: GO 37630
// un1 = Attacks ( i ) ;
37711: LD_ADDR_VAR 0 19
37715: PUSH
37716: LD_VAR 0 2
37720: PPUSH
37721: CALL_OW 320
37725: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
37726: LD_VAR 0 19
37730: PUSH
37731: LD_INT 0
37733: GREATER
37734: PUSH
37735: LD_VAR 0 19
37739: PUSH
37740: EMPTY
37741: LIST
37742: PPUSH
37743: CALL 40372 0 1
37747: PUSH
37748: LD_INT 0
37750: GREATER
37751: AND
37752: IFFALSE 38013
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
37754: LD_ADDR_VAR 0 7
37758: PUSH
37759: LD_VAR 0 19
37763: PPUSH
37764: CALL_OW 250
37768: PUSH
37769: LD_VAR 0 19
37773: PPUSH
37774: CALL_OW 251
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: ST_TO_ADDR
// temp_value = false ;
37783: LD_ADDR_VAR 0 3
37787: PUSH
37788: LD_INT 0
37790: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
37791: LD_ADDR_VAR 0 20
37795: PUSH
37796: LD_EXP 72
37800: PUSH
37801: LD_VAR 0 4
37805: ARRAY
37806: PUSH
37807: LD_EXP 73
37811: PUSH
37812: LD_VAR 0 4
37816: ARRAY
37817: ADD
37818: PUSH
37819: FOR_IN
37820: IFFALSE 37892
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
37822: LD_VAR 0 7
37826: PUSH
37827: LD_INT 1
37829: ARRAY
37830: PPUSH
37831: LD_VAR 0 7
37835: PUSH
37836: LD_INT 2
37838: ARRAY
37839: PPUSH
37840: LD_VAR 0 20
37844: PUSH
37845: LD_INT 1
37847: ARRAY
37848: PPUSH
37849: LD_VAR 0 20
37853: PUSH
37854: LD_INT 2
37856: ARRAY
37857: PPUSH
37858: CALL_OW 298
37862: PUSH
37863: LD_EXP 71
37867: PUSH
37868: LD_VAR 0 1
37872: ARRAY
37873: PUSH
37874: LD_INT 2
37876: ARRAY
37877: LESSEQUAL
37878: IFFALSE 37890
// begin temp_value = true ;
37880: LD_ADDR_VAR 0 3
37884: PUSH
37885: LD_INT 1
37887: ST_TO_ADDR
// break ;
37888: GO 37892
// end ;
37890: GO 37819
37892: POP
37893: POP
// if not temp_value then
37894: LD_VAR 0 3
37898: NOT
37899: IFFALSE 38013
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
37901: LD_VAR 0 2
37905: PPUSH
37906: LD_VAR 0 7
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PPUSH
37915: LD_VAR 0 7
37919: PUSH
37920: LD_INT 2
37922: ARRAY
37923: PPUSH
37924: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
37928: LD_ADDR_VAR 0 5
37932: PUSH
37933: LD_EXP 73
37937: PUSH
37938: LD_VAR 0 4
37942: ARRAY
37943: PPUSH
37944: LD_INT 1
37946: PPUSH
37947: LD_VAR 0 7
37951: PUSH
37952: LD_INT 1
37954: ARRAY
37955: PUSH
37956: LD_VAR 0 7
37960: PUSH
37961: LD_INT 2
37963: ARRAY
37964: PUSH
37965: LD_VAR 0 2
37969: PUSH
37970: LD_OWVAR 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: PPUSH
37981: CALL_OW 2
37985: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
37986: LD_ADDR_EXP 73
37990: PUSH
37991: LD_EXP 73
37995: PPUSH
37996: LD_VAR 0 4
38000: PPUSH
38001: LD_VAR 0 5
38005: PPUSH
38006: CALL_OW 1
38010: ST_TO_ADDR
// continue ;
38011: GO 37630
// end ; end ; end ; if not all_are_ready then
38013: LD_VAR 0 26
38017: NOT
38018: IFFALSE 38382
// begin if i in attacking_vehicles then
38020: LD_VAR 0 2
38024: PUSH
38025: LD_VAR 0 21
38029: IN
38030: IFFALSE 38143
// begin if russian_attack_strategy = 2 then
38032: LD_EXP 83
38036: PUSH
38037: LD_INT 2
38039: EQUAL
38040: IFFALSE 38121
// begin if prepare_veh_movement then
38042: LD_VAR 0 29
38046: IFFALSE 38106
// begin if not IsInArea ( i , area ) then
38048: LD_VAR 0 2
38052: PPUSH
38053: LD_VAR 0 15
38057: PPUSH
38058: CALL_OW 308
38062: NOT
38063: IFFALSE 38104
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
38065: LD_VAR 0 2
38069: PPUSH
38070: LD_EXP 41
38074: PUSH
38075: LD_VAR 0 4
38079: ARRAY
38080: PUSH
38081: LD_INT 1
38083: ARRAY
38084: PPUSH
38085: LD_EXP 41
38089: PUSH
38090: LD_VAR 0 4
38094: ARRAY
38095: PUSH
38096: LD_INT 2
38098: ARRAY
38099: PPUSH
38100: CALL_OW 111
// continue ;
38104: GO 37630
// end ; if not i in vehs_to_move_to_start_pos then
38106: LD_VAR 0 2
38110: PUSH
38111: LD_VAR 0 28
38115: IN
38116: NOT
38117: IFFALSE 38121
// continue ;
38119: GO 37630
// end ; temp_list = vehicle_prepare_hexes ;
38121: LD_ADDR_VAR 0 5
38125: PUSH
38126: LD_VAR 0 23
38130: ST_TO_ADDR
// k = vehicle_dist ;
38131: LD_ADDR_VAR 0 8
38135: PUSH
38136: LD_VAR 0 25
38140: ST_TO_ADDR
// end else
38141: GO 38163
// begin temp_list = human_prepare_hexes ;
38143: LD_ADDR_VAR 0 5
38147: PUSH
38148: LD_VAR 0 22
38152: ST_TO_ADDR
// k = human_dist ;
38153: LD_ADDR_VAR 0 8
38157: PUSH
38158: LD_VAR 0 24
38162: ST_TO_ADDR
// end ; if ai_attacking_unit_hex_index [ base ] [ i ] <= temp_list then
38163: LD_EXP 74
38167: PUSH
38168: LD_VAR 0 4
38172: ARRAY
38173: PUSH
38174: LD_VAR 0 2
38178: ARRAY
38179: PUSH
38180: LD_VAR 0 5
38184: LESSEQUAL
38185: IFFALSE 38380
// begin temp_list_3 = temp_list [ ai_attacking_unit_hex_index [ base ] [ i ] ] ;
38187: LD_ADDR_VAR 0 11
38191: PUSH
38192: LD_VAR 0 5
38196: PUSH
38197: LD_EXP 74
38201: PUSH
38202: LD_VAR 0 4
38206: ARRAY
38207: PUSH
38208: LD_VAR 0 2
38212: ARRAY
38213: ARRAY
38214: ST_TO_ADDR
// if i in attacking_vehicles and russian_attack_strategy = 2 then
38215: LD_VAR 0 2
38219: PUSH
38220: LD_VAR 0 21
38224: IN
38225: PUSH
38226: LD_EXP 83
38230: PUSH
38231: LD_INT 2
38233: EQUAL
38234: AND
38235: IFFALSE 38262
// begin temp_list_3 = CalculateVehicleNotReadyHex ( temp_list_3 , i , attacking_vehicles ) ;
38237: LD_ADDR_VAR 0 11
38241: PUSH
38242: LD_VAR 0 11
38246: PPUSH
38247: LD_VAR 0 2
38251: PPUSH
38252: LD_VAR 0 21
38256: PPUSH
38257: CALL 41235 0 3
38261: ST_TO_ADDR
// end ; if GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) > k then
38262: LD_VAR 0 2
38266: PPUSH
38267: LD_VAR 0 11
38271: PUSH
38272: LD_INT 1
38274: ARRAY
38275: PPUSH
38276: LD_VAR 0 11
38280: PUSH
38281: LD_INT 2
38283: ARRAY
38284: PPUSH
38285: CALL_OW 297
38289: PUSH
38290: LD_VAR 0 8
38294: GREATER
38295: IFFALSE 38380
// begin case GetType ( IsInUnit ( i ) ) of unit_building :
38297: LD_VAR 0 2
38301: PPUSH
38302: CALL_OW 310
38306: PPUSH
38307: CALL_OW 247
38311: PUSH
38312: LD_INT 3
38314: DOUBLE
38315: EQUAL
38316: IFTRUE 38320
38318: GO 38332
38320: POP
// ComExitBuilding ( i ) ; unit_vehicle :
38321: LD_VAR 0 2
38325: PPUSH
38326: CALL_OW 122
38330: GO 38380
38332: LD_INT 2
38334: DOUBLE
38335: EQUAL
38336: IFTRUE 38340
38338: GO 38352
38340: POP
// ComExitVehicle ( i ) ; else
38341: LD_VAR 0 2
38345: PPUSH
38346: CALL_OW 121
38350: GO 38380
38352: POP
// ComMoveXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) ; end ;
38353: LD_VAR 0 2
38357: PPUSH
38358: LD_VAR 0 11
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: LD_VAR 0 11
38371: PUSH
38372: LD_INT 2
38374: ARRAY
38375: PPUSH
38376: CALL_OW 111
// end ; end ; end else
38380: GO 40235
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_human ] , [ f_dist , i , 20 ] , [ f_see , side ] ] ) ;
38382: LD_ADDR_VAR 0 5
38386: PUSH
38387: LD_INT 81
38389: PUSH
38390: LD_VAR 0 1
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 21
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 91
38411: PUSH
38412: LD_VAR 0 2
38416: PUSH
38417: LD_INT 20
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 101
38427: PUSH
38428: LD_VAR 0 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: PPUSH
38443: CALL_OW 69
38447: ST_TO_ADDR
// if russian_attack_strategy = 2 and GetY ( i ) >= 59 then
38448: LD_EXP 83
38452: PUSH
38453: LD_INT 2
38455: EQUAL
38456: PUSH
38457: LD_VAR 0 2
38461: PPUSH
38462: CALL_OW 251
38466: PUSH
38467: LD_INT 59
38469: GREATEREQUAL
38470: AND
38471: IFFALSE 38556
// begin k = 1 ;
38473: LD_ADDR_VAR 0 8
38477: PUSH
38478: LD_INT 1
38480: ST_TO_ADDR
// while k <= temp_list + 0 do
38481: LD_VAR 0 8
38485: PUSH
38486: LD_VAR 0 5
38490: PUSH
38491: LD_INT 0
38493: PLUS
38494: LESSEQUAL
38495: IFFALSE 38556
// begin if GetY ( temp_list [ k ] ) >= 59 then
38497: LD_VAR 0 5
38501: PUSH
38502: LD_VAR 0 8
38506: ARRAY
38507: PPUSH
38508: CALL_OW 251
38512: PUSH
38513: LD_INT 59
38515: GREATEREQUAL
38516: IFFALSE 38540
// begin temp_list = Delete ( temp_list , k ) ;
38518: LD_ADDR_VAR 0 5
38522: PUSH
38523: LD_VAR 0 5
38527: PPUSH
38528: LD_VAR 0 8
38532: PPUSH
38533: CALL_OW 3
38537: ST_TO_ADDR
// continue ;
38538: GO 38481
// end ; k = k + 1 ;
38540: LD_ADDR_VAR 0 8
38544: PUSH
38545: LD_VAR 0 8
38549: PUSH
38550: LD_INT 1
38552: PLUS
38553: ST_TO_ADDR
// end ;
38554: GO 38481
// end ; temp_value := russian_attack_strategy = 2 and i in attacking_vehicles and not strat_2_attack_permitted ;
38556: LD_ADDR_VAR 0 3
38560: PUSH
38561: LD_EXP 83
38565: PUSH
38566: LD_INT 2
38568: EQUAL
38569: PUSH
38570: LD_VAR 0 2
38574: PUSH
38575: LD_VAR 0 21
38579: IN
38580: AND
38581: PUSH
38582: LD_VAR 0 27
38586: NOT
38587: AND
38588: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
38589: LD_VAR 0 5
38593: PUSH
38594: LD_INT 0
38596: GREATER
38597: PUSH
38598: LD_VAR 0 3
38602: NOT
38603: AND
38604: IFFALSE 38740
// begin temp_list_2 = UnitFilter ( temp_list , [ f_not , [ f_lives , 250 ] ] ) ;
38606: LD_ADDR_VAR 0 7
38610: PUSH
38611: LD_VAR 0 5
38615: PPUSH
38616: LD_INT 3
38618: PUSH
38619: LD_INT 24
38621: PUSH
38622: LD_INT 250
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PPUSH
38633: CALL_OW 72
38637: ST_TO_ADDR
// if temp_list_2 > 0 then
38638: LD_VAR 0 7
38642: PUSH
38643: LD_INT 0
38645: GREATER
38646: IFFALSE 38658
// temp_list = temp_list_2 ;
38648: LD_ADDR_VAR 0 5
38652: PUSH
38653: LD_VAR 0 7
38657: ST_TO_ADDR
// temp_unit = AllNearestUnitToUnit ( temp_list , i ) ;
38658: LD_ADDR_VAR 0 6
38662: PUSH
38663: LD_VAR 0 5
38667: PPUSH
38668: LD_VAR 0 2
38672: PPUSH
38673: CALL_OW 75
38677: ST_TO_ADDR
// if GetLives ( temp_unit ) > 250 then
38678: LD_VAR 0 6
38682: PPUSH
38683: CALL_OW 256
38687: PUSH
38688: LD_INT 250
38690: GREATER
38691: IFFALSE 38724
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) else
38693: LD_VAR 0 2
38697: PPUSH
38698: LD_VAR 0 6
38702: PPUSH
38703: CALL_OW 250
38707: PPUSH
38708: LD_VAR 0 6
38712: PPUSH
38713: CALL_OW 251
38717: PPUSH
38718: CALL_OW 114
38722: GO 38738
// ComAttackUnit ( i , temp_unit ) ;
38724: LD_VAR 0 2
38728: PPUSH
38729: LD_VAR 0 6
38733: PPUSH
38734: CALL_OW 115
// end else
38738: GO 40235
// begin temp_list = FindNonhumansNearUnit ( side , i , 20 , true ) ;
38740: LD_ADDR_VAR 0 5
38744: PUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: LD_VAR 0 2
38754: PPUSH
38755: LD_INT 20
38757: PPUSH
38758: LD_INT 1
38760: PPUSH
38761: CALL 40250 0 4
38765: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
38766: LD_VAR 0 5
38770: PUSH
38771: LD_INT 0
38773: GREATER
38774: PUSH
38775: LD_VAR 0 3
38779: NOT
38780: AND
38781: IFFALSE 39067
// begin if i in attacking_vehicles then
38783: LD_VAR 0 2
38787: PUSH
38788: LD_VAR 0 21
38792: IN
38793: IFFALSE 38931
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
38795: LD_VAR 0 2
38799: PPUSH
38800: LD_VAR 0 10
38804: PUSH
38805: LD_EXP 74
38809: PUSH
38810: LD_VAR 0 4
38814: ARRAY
38815: PUSH
38816: LD_VAR 0 2
38820: ARRAY
38821: ARRAY
38822: PUSH
38823: LD_INT 1
38825: ARRAY
38826: PPUSH
38827: LD_VAR 0 10
38831: PUSH
38832: LD_EXP 74
38836: PUSH
38837: LD_VAR 0 4
38841: ARRAY
38842: PUSH
38843: LD_VAR 0 2
38847: ARRAY
38848: ARRAY
38849: PUSH
38850: LD_INT 2
38852: ARRAY
38853: PPUSH
38854: CALL_OW 297
38858: PUSH
38859: LD_VAR 0 25
38863: GREATER
38864: IFFALSE 38929
// ComAgressiveMove ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
38866: LD_VAR 0 2
38870: PPUSH
38871: LD_VAR 0 10
38875: PUSH
38876: LD_EXP 74
38880: PUSH
38881: LD_VAR 0 4
38885: ARRAY
38886: PUSH
38887: LD_VAR 0 2
38891: ARRAY
38892: ARRAY
38893: PUSH
38894: LD_INT 1
38896: ARRAY
38897: PPUSH
38898: LD_VAR 0 10
38902: PUSH
38903: LD_EXP 74
38907: PUSH
38908: LD_VAR 0 4
38912: ARRAY
38913: PUSH
38914: LD_VAR 0 2
38918: ARRAY
38919: ARRAY
38920: PUSH
38921: LD_INT 2
38923: ARRAY
38924: PPUSH
38925: CALL_OW 114
// end else
38929: GO 39065
// if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
38931: LD_VAR 0 2
38935: PPUSH
38936: LD_VAR 0 9
38940: PUSH
38941: LD_EXP 74
38945: PUSH
38946: LD_VAR 0 4
38950: ARRAY
38951: PUSH
38952: LD_VAR 0 2
38956: ARRAY
38957: ARRAY
38958: PUSH
38959: LD_INT 1
38961: ARRAY
38962: PPUSH
38963: LD_VAR 0 9
38967: PUSH
38968: LD_EXP 74
38972: PUSH
38973: LD_VAR 0 4
38977: ARRAY
38978: PUSH
38979: LD_VAR 0 2
38983: ARRAY
38984: ARRAY
38985: PUSH
38986: LD_INT 2
38988: ARRAY
38989: PPUSH
38990: CALL_OW 297
38994: PUSH
38995: LD_VAR 0 24
38999: GREATER
39000: IFFALSE 39065
// ComAgressiveMove ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39002: LD_VAR 0 2
39006: PPUSH
39007: LD_VAR 0 9
39011: PUSH
39012: LD_EXP 74
39016: PUSH
39017: LD_VAR 0 4
39021: ARRAY
39022: PUSH
39023: LD_VAR 0 2
39027: ARRAY
39028: ARRAY
39029: PUSH
39030: LD_INT 1
39032: ARRAY
39033: PPUSH
39034: LD_VAR 0 9
39038: PUSH
39039: LD_EXP 74
39043: PUSH
39044: LD_VAR 0 4
39048: ARRAY
39049: PUSH
39050: LD_VAR 0 2
39054: ARRAY
39055: ARRAY
39056: PUSH
39057: LD_INT 2
39059: ARRAY
39060: PPUSH
39061: CALL_OW 114
// end else
39065: GO 40235
// begin temp_list = FindNonhumansNearUnit ( side , i , 20 , false ) ;
39067: LD_ADDR_VAR 0 5
39071: PUSH
39072: LD_VAR 0 1
39076: PPUSH
39077: LD_VAR 0 2
39081: PPUSH
39082: LD_INT 20
39084: PPUSH
39085: LD_INT 0
39087: PPUSH
39088: CALL 40250 0 4
39092: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
39093: LD_VAR 0 5
39097: PUSH
39098: LD_INT 0
39100: GREATER
39101: PUSH
39102: LD_VAR 0 3
39106: NOT
39107: AND
39108: IFFALSE 39146
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
39110: LD_ADDR_VAR 0 6
39114: PUSH
39115: LD_VAR 0 5
39119: PPUSH
39120: LD_VAR 0 2
39124: PPUSH
39125: CALL_OW 74
39129: ST_TO_ADDR
// ComAttackUnit ( i , temp_unit ) ;
39130: LD_VAR 0 2
39134: PPUSH
39135: LD_VAR 0 6
39139: PPUSH
39140: CALL_OW 115
// end else
39144: GO 40235
// if i in attacking_vehicles and russian_attack_strategy = 2 and not strat_2_attack_permitted then
39146: LD_VAR 0 2
39150: PUSH
39151: LD_VAR 0 21
39155: IN
39156: PUSH
39157: LD_EXP 83
39161: PUSH
39162: LD_INT 2
39164: EQUAL
39165: AND
39166: PUSH
39167: LD_VAR 0 27
39171: NOT
39172: AND
39173: IFFALSE 39953
// begin if i = attacking_vehicles [ 1 ] then
39175: LD_VAR 0 2
39179: PUSH
39180: LD_VAR 0 21
39184: PUSH
39185: LD_INT 1
39187: ARRAY
39188: EQUAL
39189: IFFALSE 39433
// begin if ai_attacking_unit_hex_index [ base ] [ i ] <= vehicle_attack_hexes then
39191: LD_EXP 74
39195: PUSH
39196: LD_VAR 0 4
39200: ARRAY
39201: PUSH
39202: LD_VAR 0 2
39206: ARRAY
39207: PUSH
39208: LD_VAR 0 10
39212: LESSEQUAL
39213: IFFALSE 39431
// if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
39215: LD_VAR 0 2
39219: PPUSH
39220: LD_VAR 0 10
39224: PUSH
39225: LD_EXP 74
39229: PUSH
39230: LD_VAR 0 4
39234: ARRAY
39235: PUSH
39236: LD_VAR 0 2
39240: ARRAY
39241: ARRAY
39242: PUSH
39243: LD_INT 1
39245: ARRAY
39246: PPUSH
39247: LD_VAR 0 10
39251: PUSH
39252: LD_EXP 74
39256: PUSH
39257: LD_VAR 0 4
39261: ARRAY
39262: PUSH
39263: LD_VAR 0 2
39267: ARRAY
39268: ARRAY
39269: PUSH
39270: LD_INT 2
39272: ARRAY
39273: PPUSH
39274: CALL_OW 297
39278: PUSH
39279: LD_VAR 0 25
39283: GREATER
39284: IFFALSE 39431
// begin temp_value = true ;
39286: LD_ADDR_VAR 0 3
39290: PUSH
39291: LD_INT 1
39293: ST_TO_ADDR
// for k = 2 to attacking_vehicles do
39294: LD_ADDR_VAR 0 8
39298: PUSH
39299: DOUBLE
39300: LD_INT 2
39302: DEC
39303: ST_TO_ADDR
39304: LD_VAR 0 21
39308: PUSH
39309: FOR_TO
39310: IFFALSE 39360
// if GetDistUnits ( attacking_vehicles [ k ] , attacking_vehicles [ k - 1 ] ) > 7 then
39312: LD_VAR 0 21
39316: PUSH
39317: LD_VAR 0 8
39321: ARRAY
39322: PPUSH
39323: LD_VAR 0 21
39327: PUSH
39328: LD_VAR 0 8
39332: PUSH
39333: LD_INT 1
39335: MINUS
39336: ARRAY
39337: PPUSH
39338: CALL_OW 296
39342: PUSH
39343: LD_INT 7
39345: GREATER
39346: IFFALSE 39358
// begin temp_value = false ;
39348: LD_ADDR_VAR 0 3
39352: PUSH
39353: LD_INT 0
39355: ST_TO_ADDR
// break ;
39356: GO 39360
// end ;
39358: GO 39309
39360: POP
39361: POP
// if temp_value then
39362: LD_VAR 0 3
39366: IFFALSE 39431
// ComMoveXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39368: LD_VAR 0 2
39372: PPUSH
39373: LD_VAR 0 10
39377: PUSH
39378: LD_EXP 74
39382: PUSH
39383: LD_VAR 0 4
39387: ARRAY
39388: PUSH
39389: LD_VAR 0 2
39393: ARRAY
39394: ARRAY
39395: PUSH
39396: LD_INT 1
39398: ARRAY
39399: PPUSH
39400: LD_VAR 0 10
39404: PUSH
39405: LD_EXP 74
39409: PUSH
39410: LD_VAR 0 4
39414: ARRAY
39415: PUSH
39416: LD_VAR 0 2
39420: ARRAY
39421: ARRAY
39422: PUSH
39423: LD_INT 2
39425: ARRAY
39426: PPUSH
39427: CALL_OW 111
// end ; end else
39431: GO 39951
// begin temp_value = 2 ;
39433: LD_ADDR_VAR 0 3
39437: PUSH
39438: LD_INT 2
39440: ST_TO_ADDR
// for k = 2 to attacking_vehicles do
39441: LD_ADDR_VAR 0 8
39445: PUSH
39446: DOUBLE
39447: LD_INT 2
39449: DEC
39450: ST_TO_ADDR
39451: LD_VAR 0 21
39455: PUSH
39456: FOR_TO
39457: IFFALSE 39491
// if i = attacking_vehicles [ k ] then
39459: LD_VAR 0 2
39463: PUSH
39464: LD_VAR 0 21
39468: PUSH
39469: LD_VAR 0 8
39473: ARRAY
39474: EQUAL
39475: IFFALSE 39489
// begin temp_value = k ;
39477: LD_ADDR_VAR 0 3
39481: PUSH
39482: LD_VAR 0 8
39486: ST_TO_ADDR
// break ;
39487: GO 39491
// end ;
39489: GO 39456
39491: POP
39492: POP
// temp_value = temp_value - 1 ;
39493: LD_ADDR_VAR 0 3
39497: PUSH
39498: LD_VAR 0 3
39502: PUSH
39503: LD_INT 1
39505: MINUS
39506: ST_TO_ADDR
// x = GetX ( attacking_vehicles [ temp_value ] ) ;
39507: LD_ADDR_VAR 0 16
39511: PUSH
39512: LD_VAR 0 21
39516: PUSH
39517: LD_VAR 0 3
39521: ARRAY
39522: PPUSH
39523: CALL_OW 250
39527: ST_TO_ADDR
// y = GetY ( attacking_vehicles [ temp_value ] ) ;
39528: LD_ADDR_VAR 0 17
39532: PUSH
39533: LD_VAR 0 21
39537: PUSH
39538: LD_VAR 0 3
39542: ARRAY
39543: PPUSH
39544: CALL_OW 251
39548: ST_TO_ADDR
// if temp_value > 1 then
39549: LD_VAR 0 3
39553: PUSH
39554: LD_INT 1
39556: GREATER
39557: IFFALSE 39621
// begin k = AI_GetTurnDirection ( GetX ( attacking_vehicles [ temp_value - 1 ] ) , GetY ( attacking_vehicles [ temp_value - 1 ] ) , x , y ) ;
39559: LD_ADDR_VAR 0 8
39563: PUSH
39564: LD_VAR 0 21
39568: PUSH
39569: LD_VAR 0 3
39573: PUSH
39574: LD_INT 1
39576: MINUS
39577: ARRAY
39578: PPUSH
39579: CALL_OW 250
39583: PPUSH
39584: LD_VAR 0 21
39588: PUSH
39589: LD_VAR 0 3
39593: PUSH
39594: LD_INT 1
39596: MINUS
39597: ARRAY
39598: PPUSH
39599: CALL_OW 251
39603: PPUSH
39604: LD_VAR 0 16
39608: PPUSH
39609: LD_VAR 0 17
39613: PPUSH
39614: CALL 15049 0 4
39618: ST_TO_ADDR
// end else
39619: GO 39647
// k = AI_InvertDirection ( GetDir ( attacking_vehicles [ temp_value ] ) ) ;
39621: LD_ADDR_VAR 0 8
39625: PUSH
39626: LD_VAR 0 21
39630: PUSH
39631: LD_VAR 0 3
39635: ARRAY
39636: PPUSH
39637: CALL_OW 254
39641: PPUSH
39642: CALL 40960 0 1
39646: ST_TO_ADDR
// k = k - 1 ;
39647: LD_ADDR_VAR 0 8
39651: PUSH
39652: LD_VAR 0 8
39656: PUSH
39657: LD_INT 1
39659: MINUS
39660: ST_TO_ADDR
// if k = - 1 then
39661: LD_VAR 0 8
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: EQUAL
39670: IFFALSE 39680
// k = 5 ;
39672: LD_ADDR_VAR 0 8
39676: PUSH
39677: LD_INT 5
39679: ST_TO_ADDR
// temp_list_3 = [ ] ;
39680: LD_ADDR_VAR 0 11
39684: PUSH
39685: EMPTY
39686: ST_TO_ADDR
// for val = 1 to 3 do
39687: LD_ADDR_VAR 0 20
39691: PUSH
39692: DOUBLE
39693: LD_INT 1
39695: DEC
39696: ST_TO_ADDR
39697: LD_INT 3
39699: PUSH
39700: FOR_TO
39701: IFFALSE 39839
// begin temp_list_2 = [ ] ;
39703: LD_ADDR_VAR 0 7
39707: PUSH
39708: EMPTY
39709: ST_TO_ADDR
// temp_list_2 = Insert ( temp_list_2 , 1 , ShiftX ( x , k , 4 ) ) ;
39710: LD_ADDR_VAR 0 7
39714: PUSH
39715: LD_VAR 0 7
39719: PPUSH
39720: LD_INT 1
39722: PPUSH
39723: LD_VAR 0 16
39727: PPUSH
39728: LD_VAR 0 8
39732: PPUSH
39733: LD_INT 4
39735: PPUSH
39736: CALL_OW 272
39740: PPUSH
39741: CALL_OW 2
39745: ST_TO_ADDR
// temp_list_2 = Insert ( temp_list_2 , 2 , ShiftY ( y , k , 4 ) ) ;
39746: LD_ADDR_VAR 0 7
39750: PUSH
39751: LD_VAR 0 7
39755: PPUSH
39756: LD_INT 2
39758: PPUSH
39759: LD_VAR 0 17
39763: PPUSH
39764: LD_VAR 0 8
39768: PPUSH
39769: LD_INT 4
39771: PPUSH
39772: CALL_OW 273
39776: PPUSH
39777: CALL_OW 2
39781: ST_TO_ADDR
// temp_list_3 = Insert ( temp_list_3 , 1 , temp_list_2 ) ;
39782: LD_ADDR_VAR 0 11
39786: PUSH
39787: LD_VAR 0 11
39791: PPUSH
39792: LD_INT 1
39794: PPUSH
39795: LD_VAR 0 7
39799: PPUSH
39800: CALL_OW 2
39804: ST_TO_ADDR
// k = k + 1 ;
39805: LD_ADDR_VAR 0 8
39809: PUSH
39810: LD_VAR 0 8
39814: PUSH
39815: LD_INT 1
39817: PLUS
39818: ST_TO_ADDR
// if k = 6 then
39819: LD_VAR 0 8
39823: PUSH
39824: LD_INT 6
39826: EQUAL
39827: IFFALSE 39837
// k = 0 ;
39829: LD_ADDR_VAR 0 8
39833: PUSH
39834: LD_INT 0
39836: ST_TO_ADDR
// end ;
39837: GO 39700
39839: POP
39840: POP
// temp_list_2 = [ ] ;
39841: LD_ADDR_VAR 0 7
39845: PUSH
39846: EMPTY
39847: ST_TO_ADDR
// for val in temp_list_3 do
39848: LD_ADDR_VAR 0 20
39852: PUSH
39853: LD_VAR 0 11
39857: PUSH
39858: FOR_IN
39859: IFFALSE 39902
// temp_list_2 = temp_list_2 ^ GetDistUnitXY ( i , val [ 1 ] , val [ 2 ] ) ;
39861: LD_ADDR_VAR 0 7
39865: PUSH
39866: LD_VAR 0 7
39870: PUSH
39871: LD_VAR 0 2
39875: PPUSH
39876: LD_VAR 0 20
39880: PUSH
39881: LD_INT 1
39883: ARRAY
39884: PPUSH
39885: LD_VAR 0 20
39889: PUSH
39890: LD_INT 2
39892: ARRAY
39893: PPUSH
39894: CALL_OW 297
39898: ADD
39899: ST_TO_ADDR
39900: GO 39858
39902: POP
39903: POP
// temp_list_3 = WorstFromListByList ( temp_list_3 , temp_list_2 ) ;
39904: LD_ADDR_VAR 0 11
39908: PUSH
39909: LD_VAR 0 11
39913: PPUSH
39914: LD_VAR 0 7
39918: PPUSH
39919: CALL_OW 78
39923: ST_TO_ADDR
// ComMoveXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) ;
39924: LD_VAR 0 2
39928: PPUSH
39929: LD_VAR 0 11
39933: PUSH
39934: LD_INT 1
39936: ARRAY
39937: PPUSH
39938: LD_VAR 0 11
39942: PUSH
39943: LD_INT 2
39945: ARRAY
39946: PPUSH
39947: CALL_OW 111
// end ; end else
39951: GO 40235
// begin if i in attacking_vehicles then
39953: LD_VAR 0 2
39957: PUSH
39958: LD_VAR 0 21
39962: IN
39963: IFFALSE 40101
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
39965: LD_VAR 0 2
39969: PPUSH
39970: LD_VAR 0 10
39974: PUSH
39975: LD_EXP 74
39979: PUSH
39980: LD_VAR 0 4
39984: ARRAY
39985: PUSH
39986: LD_VAR 0 2
39990: ARRAY
39991: ARRAY
39992: PUSH
39993: LD_INT 1
39995: ARRAY
39996: PPUSH
39997: LD_VAR 0 10
40001: PUSH
40002: LD_EXP 74
40006: PUSH
40007: LD_VAR 0 4
40011: ARRAY
40012: PUSH
40013: LD_VAR 0 2
40017: ARRAY
40018: ARRAY
40019: PUSH
40020: LD_INT 2
40022: ARRAY
40023: PPUSH
40024: CALL_OW 297
40028: PUSH
40029: LD_VAR 0 25
40033: GREATER
40034: IFFALSE 40099
// ComAgressiveMove ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
40036: LD_VAR 0 2
40040: PPUSH
40041: LD_VAR 0 10
40045: PUSH
40046: LD_EXP 74
40050: PUSH
40051: LD_VAR 0 4
40055: ARRAY
40056: PUSH
40057: LD_VAR 0 2
40061: ARRAY
40062: ARRAY
40063: PUSH
40064: LD_INT 1
40066: ARRAY
40067: PPUSH
40068: LD_VAR 0 10
40072: PUSH
40073: LD_EXP 74
40077: PUSH
40078: LD_VAR 0 4
40082: ARRAY
40083: PUSH
40084: LD_VAR 0 2
40088: ARRAY
40089: ARRAY
40090: PUSH
40091: LD_INT 2
40093: ARRAY
40094: PPUSH
40095: CALL_OW 114
// end else
40099: GO 40235
// if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
40101: LD_VAR 0 2
40105: PPUSH
40106: LD_VAR 0 9
40110: PUSH
40111: LD_EXP 74
40115: PUSH
40116: LD_VAR 0 4
40120: ARRAY
40121: PUSH
40122: LD_VAR 0 2
40126: ARRAY
40127: ARRAY
40128: PUSH
40129: LD_INT 1
40131: ARRAY
40132: PPUSH
40133: LD_VAR 0 9
40137: PUSH
40138: LD_EXP 74
40142: PUSH
40143: LD_VAR 0 4
40147: ARRAY
40148: PUSH
40149: LD_VAR 0 2
40153: ARRAY
40154: ARRAY
40155: PUSH
40156: LD_INT 2
40158: ARRAY
40159: PPUSH
40160: CALL_OW 297
40164: PUSH
40165: LD_VAR 0 24
40169: GREATER
40170: IFFALSE 40235
// ComAgressiveMove ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
40172: LD_VAR 0 2
40176: PPUSH
40177: LD_VAR 0 9
40181: PUSH
40182: LD_EXP 74
40186: PUSH
40187: LD_VAR 0 4
40191: ARRAY
40192: PUSH
40193: LD_VAR 0 2
40197: ARRAY
40198: ARRAY
40199: PUSH
40200: LD_INT 1
40202: ARRAY
40203: PPUSH
40204: LD_VAR 0 9
40208: PUSH
40209: LD_EXP 74
40213: PUSH
40214: LD_VAR 0 4
40218: ARRAY
40219: PUSH
40220: LD_VAR 0 2
40224: ARRAY
40225: ARRAY
40226: PUSH
40227: LD_INT 2
40229: ARRAY
40230: PPUSH
40231: CALL_OW 114
// end ; end ; end ; end ; end ;
40235: GO 37630
40237: POP
40238: POP
// end ;
40239: GO 34445
40241: POP
40242: POP
// until false ;
40243: LD_INT 0
40245: IFFALSE 34428
// end ;
40247: PPOPN 31
40249: END
// function FindNonhumansNearUnit ( side , un , dist , only_dangerous ) ; var weapon_list , temp_list , i , btype , b , val ; begin
40250: LD_INT 0
40252: PPUSH
40253: PPUSH
40254: PPUSH
40255: PPUSH
40256: PPUSH
40257: PPUSH
40258: PPUSH
// temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_human ] ] , [ f_dist , un , dist ] , [ f_see , side ] ] ) ;
40259: LD_ADDR_VAR 0 7
40263: PUSH
40264: LD_INT 81
40266: PUSH
40267: LD_VAR 0 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 3
40278: PUSH
40279: LD_INT 21
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 91
40295: PUSH
40296: LD_VAR 0 2
40300: PUSH
40301: LD_VAR 0 3
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 101
40313: PUSH
40314: LD_VAR 0 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: PPUSH
40329: CALL_OW 69
40333: ST_TO_ADDR
// if only_dangerous then
40334: LD_VAR 0 4
40338: IFFALSE 40357
// begin result = DangerousUnits ( temp_list ) ;
40340: LD_ADDR_VAR 0 5
40344: PUSH
40345: LD_VAR 0 7
40349: PPUSH
40350: CALL 40372 0 1
40354: ST_TO_ADDR
// end else
40355: GO 40367
// result = temp_list end ;
40357: LD_ADDR_VAR 0 5
40361: PUSH
40362: LD_VAR 0 7
40366: ST_TO_ADDR
40367: LD_VAR 0 5
40371: RET
// function DangerousUnits ( list ) ; var weapon_list , i , btype , b , val ; begin
40372: LD_INT 0
40374: PPUSH
40375: PPUSH
40376: PPUSH
40377: PPUSH
40378: PPUSH
40379: PPUSH
// weapon_list = [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , ar_multimissile_ballista , ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_siberium_rocket , ru_time_lapser ] ;
40380: LD_ADDR_VAR 0 3
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: LD_INT 3
40390: PUSH
40391: LD_INT 4
40393: PUSH
40394: LD_INT 5
40396: PUSH
40397: LD_INT 6
40399: PUSH
40400: LD_INT 7
40402: PUSH
40403: LD_INT 8
40405: PUSH
40406: LD_INT 9
40408: PUSH
40409: LD_INT 10
40411: PUSH
40412: LD_INT 22
40414: PUSH
40415: LD_INT 23
40417: PUSH
40418: LD_INT 24
40420: PUSH
40421: LD_INT 25
40423: PUSH
40424: LD_INT 26
40426: PUSH
40427: LD_INT 27
40429: PUSH
40430: LD_INT 28
40432: PUSH
40433: LD_INT 29
40435: PUSH
40436: LD_INT 42
40438: PUSH
40439: LD_INT 43
40441: PUSH
40442: LD_INT 44
40444: PUSH
40445: LD_INT 45
40447: PUSH
40448: LD_INT 46
40450: PUSH
40451: LD_INT 47
40453: PUSH
40454: LD_INT 48
40456: PUSH
40457: LD_INT 49
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: ST_TO_ADDR
// result = [ ] ;
40487: LD_ADDR_VAR 0 2
40491: PUSH
40492: EMPTY
40493: ST_TO_ADDR
// for i in list do
40494: LD_ADDR_VAR 0 4
40498: PUSH
40499: LD_VAR 0 1
40503: PUSH
40504: FOR_IN
40505: IFFALSE 40953
// case GetType ( i ) of unit_human :
40507: LD_VAR 0 4
40511: PPUSH
40512: CALL_OW 247
40516: PUSH
40517: LD_INT 1
40519: DOUBLE
40520: EQUAL
40521: IFTRUE 40525
40523: GO 40558
40525: POP
// begin if not IsOk ( i ) then
40526: LD_VAR 0 4
40530: PPUSH
40531: CALL_OW 302
40535: NOT
40536: IFFALSE 40540
// continue ;
40538: GO 40504
// result = result ^ i ;
40540: LD_ADDR_VAR 0 2
40544: PUSH
40545: LD_VAR 0 2
40549: PUSH
40550: LD_VAR 0 4
40554: ADD
40555: ST_TO_ADDR
// end ; unit_vehicle :
40556: GO 40951
40558: LD_INT 2
40560: DOUBLE
40561: EQUAL
40562: IFTRUE 40566
40564: GO 40706
40566: POP
// begin if not IsOk ( i ) then
40567: LD_VAR 0 4
40571: PPUSH
40572: CALL_OW 302
40576: NOT
40577: IFFALSE 40581
// continue ;
40579: GO 40504
// case GetControl ( i ) of control_manual , control_rider :
40581: LD_VAR 0 4
40585: PPUSH
40586: CALL_OW 263
40590: PUSH
40591: LD_INT 1
40593: DOUBLE
40594: EQUAL
40595: IFTRUE 40605
40597: LD_INT 4
40599: DOUBLE
40600: EQUAL
40601: IFTRUE 40605
40603: GO 40625
40605: POP
// begin if UnitsInside ( i ) = 0 then
40606: LD_VAR 0 4
40610: PPUSH
40611: CALL_OW 313
40615: PUSH
40616: LD_INT 0
40618: EQUAL
40619: IFFALSE 40623
// continue ;
40621: GO 40504
// end ; control_remote :
40623: GO 40671
40625: LD_INT 2
40627: DOUBLE
40628: EQUAL
40629: IFTRUE 40633
40631: GO 40653
40633: POP
// begin if IsControledBy ( i ) = 0 then
40634: LD_VAR 0 4
40638: PPUSH
40639: CALL_OW 312
40643: PUSH
40644: LD_INT 0
40646: EQUAL
40647: IFFALSE 40651
// continue ;
40649: GO 40504
// end ; control_computer , control_apeman :
40651: GO 40671
40653: LD_INT 3
40655: DOUBLE
40656: EQUAL
40657: IFTRUE 40667
40659: LD_INT 5
40661: DOUBLE
40662: EQUAL
40663: IFTRUE 40667
40665: GO 40670
40667: POP
// begin end ; end ;
40668: GO 40671
40670: POP
// if GetWeapon ( i ) in weapon_list then
40671: LD_VAR 0 4
40675: PPUSH
40676: CALL_OW 264
40680: PUSH
40681: LD_VAR 0 3
40685: IN
40686: IFFALSE 40704
// result = result ^ i ;
40688: LD_ADDR_VAR 0 2
40692: PUSH
40693: LD_VAR 0 2
40697: PUSH
40698: LD_VAR 0 4
40702: ADD
40703: ST_TO_ADDR
// end ; unit_building :
40704: GO 40951
40706: LD_INT 3
40708: DOUBLE
40709: EQUAL
40710: IFTRUE 40714
40712: GO 40950
40714: POP
// begin if not IsOk ( i ) then
40715: LD_VAR 0 4
40719: PPUSH
40720: CALL_OW 302
40724: NOT
40725: IFFALSE 40729
// continue ;
40727: GO 40504
// btype = GetBType ( i ) ;
40729: LD_ADDR_VAR 0 5
40733: PUSH
40734: LD_VAR 0 4
40738: PPUSH
40739: CALL_OW 266
40743: ST_TO_ADDR
// case btype of b_turret :
40744: LD_VAR 0 5
40748: PUSH
40749: LD_INT 33
40751: DOUBLE
40752: EQUAL
40753: IFTRUE 40757
40755: GO 40760
40757: POP
// begin end ; b_bunker , b_breastwork , b_armoury , b_barracks , b_fort :
40758: GO 40815
40760: LD_INT 32
40762: DOUBLE
40763: EQUAL
40764: IFTRUE 40792
40766: LD_INT 31
40768: DOUBLE
40769: EQUAL
40770: IFTRUE 40792
40772: LD_INT 4
40774: DOUBLE
40775: EQUAL
40776: IFTRUE 40792
40778: LD_INT 5
40780: DOUBLE
40781: EQUAL
40782: IFTRUE 40792
40784: LD_INT 35
40786: DOUBLE
40787: EQUAL
40788: IFTRUE 40792
40790: GO 40812
40792: POP
// begin if UnitsInside ( i ) = 0 then
40793: LD_VAR 0 4
40797: PPUSH
40798: CALL_OW 313
40802: PUSH
40803: LD_INT 0
40805: EQUAL
40806: IFFALSE 40810
// continue ;
40808: GO 40504
// end ; else
40810: GO 40815
40812: POP
// continue ; end ;
40813: GO 40504
// if btype in [ b_bunker , b_turret ] then
40815: LD_VAR 0 5
40819: PUSH
40820: LD_INT 32
40822: PUSH
40823: LD_INT 33
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: IN
40830: IFFALSE 40932
// if not GetBWeapon ( i ) in weapon_list then
40832: LD_VAR 0 4
40836: PPUSH
40837: CALL_OW 269
40841: PUSH
40842: LD_VAR 0 3
40846: IN
40847: NOT
40848: IFFALSE 40854
// continue else
40850: GO 40504
40852: GO 40932
// begin b = GetBase ( i ) ;
40854: LD_ADDR_VAR 0 6
40858: PUSH
40859: LD_VAR 0 4
40863: PPUSH
40864: CALL_OW 274
40868: ST_TO_ADDR
// val = false ;
40869: LD_ADDR_VAR 0 7
40873: PUSH
40874: LD_INT 0
40876: ST_TO_ADDR
// if b = 0 then
40877: LD_VAR 0 6
40881: PUSH
40882: LD_INT 0
40884: EQUAL
40885: IFFALSE 40897
// val = true else
40887: LD_ADDR_VAR 0 7
40891: PUSH
40892: LD_INT 1
40894: ST_TO_ADDR
40895: GO 40924
// if GetEnergy ( b ) [ 4 ] = 0 then
40897: LD_VAR 0 6
40901: PPUSH
40902: CALL_OW 278
40906: PUSH
40907: LD_INT 4
40909: ARRAY
40910: PUSH
40911: LD_INT 0
40913: EQUAL
40914: IFFALSE 40924
// val = true ;
40916: LD_ADDR_VAR 0 7
40920: PUSH
40921: LD_INT 1
40923: ST_TO_ADDR
// if val then
40924: LD_VAR 0 7
40928: IFFALSE 40932
// continue ;
40930: GO 40504
// end ; result = result ^ i ;
40932: LD_ADDR_VAR 0 2
40936: PUSH
40937: LD_VAR 0 2
40941: PUSH
40942: LD_VAR 0 4
40946: ADD
40947: ST_TO_ADDR
// end ; end ;
40948: GO 40951
40950: POP
40951: GO 40504
40953: POP
40954: POP
// end ;
40955: LD_VAR 0 2
40959: RET
// function AI_InvertDirection ( direction ) ; var dir ; begin
40960: LD_INT 0
40962: PPUSH
40963: PPUSH
// dir = direction - 3 ;
40964: LD_ADDR_VAR 0 3
40968: PUSH
40969: LD_VAR 0 1
40973: PUSH
40974: LD_INT 3
40976: MINUS
40977: ST_TO_ADDR
// if dir < 0 then
40978: LD_VAR 0 3
40982: PUSH
40983: LD_INT 0
40985: LESS
40986: IFFALSE 41002
// dir = dir + 6 ;
40988: LD_ADDR_VAR 0 3
40992: PUSH
40993: LD_VAR 0 3
40997: PUSH
40998: LD_INT 6
41000: PLUS
41001: ST_TO_ADDR
// result = dir ;
41002: LD_ADDR_VAR 0 2
41006: PUSH
41007: LD_VAR 0 3
41011: ST_TO_ADDR
// end ;
41012: LD_VAR 0 2
41016: RET
// export function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
41017: LD_INT 0
41019: PPUSH
41020: PPUSH
41021: PPUSH
41022: PPUSH
41023: PPUSH
41024: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
41025: LD_VAR 0 1
41029: PPUSH
41030: LD_VAR 0 2
41034: PPUSH
41035: CALL_OW 488
41039: NOT
41040: PUSH
41041: LD_VAR 0 3
41045: PPUSH
41046: LD_VAR 0 4
41050: PPUSH
41051: CALL_OW 488
41055: NOT
41056: OR
41057: IFFALSE 41070
// begin result = - 1 ;
41059: LD_ADDR_VAR 0 5
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: ST_TO_ADDR
// exit ;
41068: GO 41230
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
41070: LD_ADDR_VAR 0 6
41074: PUSH
41075: LD_VAR 0 1
41079: PPUSH
41080: LD_VAR 0 2
41084: PPUSH
41085: LD_VAR 0 3
41089: PPUSH
41090: LD_VAR 0 4
41094: PPUSH
41095: CALL_OW 298
41099: ST_TO_ADDR
// dist_2 = 99999 ;
41100: LD_ADDR_VAR 0 7
41104: PUSH
41105: LD_INT 99999
41107: ST_TO_ADDR
// for b = 0 to 5 do
41108: LD_ADDR_VAR 0 8
41112: PUSH
41113: DOUBLE
41114: LD_INT 0
41116: DEC
41117: ST_TO_ADDR
41118: LD_INT 5
41120: PUSH
41121: FOR_TO
41122: IFFALSE 41218
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
41124: LD_ADDR_VAR 0 9
41128: PUSH
41129: LD_VAR 0 1
41133: PPUSH
41134: LD_VAR 0 8
41138: PPUSH
41139: LD_VAR 0 6
41143: PPUSH
41144: CALL_OW 272
41148: PPUSH
41149: LD_VAR 0 2
41153: PPUSH
41154: LD_VAR 0 8
41158: PPUSH
41159: LD_VAR 0 6
41163: PPUSH
41164: CALL_OW 273
41168: PPUSH
41169: LD_VAR 0 3
41173: PPUSH
41174: LD_VAR 0 4
41178: PPUSH
41179: CALL_OW 298
41183: ST_TO_ADDR
// if temp_dist < dist_2 then
41184: LD_VAR 0 9
41188: PUSH
41189: LD_VAR 0 7
41193: LESS
41194: IFFALSE 41216
// begin dist_2 = temp_dist ;
41196: LD_ADDR_VAR 0 7
41200: PUSH
41201: LD_VAR 0 9
41205: ST_TO_ADDR
// dir = b ;
41206: LD_ADDR_VAR 0 10
41210: PUSH
41211: LD_VAR 0 8
41215: ST_TO_ADDR
// end ; end ;
41216: GO 41121
41218: POP
41219: POP
// result = dir ;
41220: LD_ADDR_VAR 0 5
41224: PUSH
41225: LD_VAR 0 10
41229: ST_TO_ADDR
// end ;
41230: LD_VAR 0 5
41234: RET
// function CalculateVehicleNotReadyHex ( hex , veh , attacking_vehicles ) ; var x , num ; begin
41235: LD_INT 0
41237: PPUSH
41238: PPUSH
41239: PPUSH
// for num = 1 to attacking_vehicles do
41240: LD_ADDR_VAR 0 6
41244: PUSH
41245: DOUBLE
41246: LD_INT 1
41248: DEC
41249: ST_TO_ADDR
41250: LD_VAR 0 3
41254: PUSH
41255: FOR_TO
41256: IFFALSE 41280
// if attacking_vehicles [ num ] = veh then
41258: LD_VAR 0 3
41262: PUSH
41263: LD_VAR 0 6
41267: ARRAY
41268: PUSH
41269: LD_VAR 0 2
41273: EQUAL
41274: IFFALSE 41278
// break ;
41276: GO 41280
41278: GO 41255
41280: POP
41281: POP
// x = ShiftX ( hex [ 1 ] , 1 , 5 * ( attacking_vehicles - num ) ) ;
41282: LD_ADDR_VAR 0 5
41286: PUSH
41287: LD_VAR 0 1
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: PPUSH
41296: LD_INT 1
41298: PPUSH
41299: LD_INT 5
41301: PUSH
41302: LD_VAR 0 3
41306: PUSH
41307: LD_VAR 0 6
41311: MINUS
41312: MUL
41313: PPUSH
41314: CALL_OW 272
41318: ST_TO_ADDR
// result = Replace ( hex , 1 , x ) ;
41319: LD_ADDR_VAR 0 4
41323: PUSH
41324: LD_VAR 0 1
41328: PPUSH
41329: LD_INT 1
41331: PPUSH
41332: LD_VAR 0 5
41336: PPUSH
41337: CALL_OW 1
41341: ST_TO_ADDR
// end ;
41342: LD_VAR 0 4
41346: RET
// every 0 0$1 + 0 0$0.1 do var i , k , temp_list , un1 , temp_list_2 , temp_value , val ; var side , base , attack_hexes ;
41347: GO 41349
41349: DISABLE
41350: LD_INT 0
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
// begin side = russians ;
41362: LD_ADDR_VAR 0 8
41366: PUSH
41367: LD_EXP 3
41371: ST_TO_ADDR
// base = 3 ;
41372: LD_ADDR_VAR 0 9
41376: PUSH
41377: LD_INT 3
41379: ST_TO_ADDR
// attack_hexes = [ [ 41 , 65 ] , [ 25 , 46 ] , [ 26 , 24 ] , [ 41 , 21 ] , [ 53 , 17 ] , [ 60 , 27 ] , [ 53 , 17 ] ] ;
41380: LD_ADDR_VAR 0 10
41384: PUSH
41385: LD_INT 41
41387: PUSH
41388: LD_INT 65
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 25
41397: PUSH
41398: LD_INT 46
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 26
41407: PUSH
41408: LD_INT 24
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 41
41417: PUSH
41418: LD_INT 21
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 53
41427: PUSH
41428: LD_INT 17
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 60
41437: PUSH
41438: LD_INT 27
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 53
41447: PUSH
41448: LD_INT 17
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41464: LD_INT 35
41466: PPUSH
41467: CALL_OW 67
// special_russian_attackers = UnitFilter ( special_russian_attackers , [ f_alive ] ) ;
41471: LD_ADDR_EXP 84
41475: PUSH
41476: LD_EXP 84
41480: PPUSH
41481: LD_INT 51
41483: PUSH
41484: EMPTY
41485: LIST
41486: PPUSH
41487: CALL_OW 72
41491: ST_TO_ADDR
// for i in special_russian_attackers do
41492: LD_ADDR_VAR 0 1
41496: PUSH
41497: LD_EXP 84
41501: PUSH
41502: FOR_IN
41503: IFFALSE 42173
// begin if GetClass ( i ) = class_bazooker then
41505: LD_VAR 0 1
41509: PPUSH
41510: CALL_OW 257
41514: PUSH
41515: LD_INT 9
41517: EQUAL
41518: IFFALSE 41867
// begin temp_list = GetTaskList ( i ) ;
41520: LD_ADDR_VAR 0 3
41524: PUSH
41525: LD_VAR 0 1
41529: PPUSH
41530: CALL_OW 437
41534: ST_TO_ADDR
// if temp_list > 0 then
41535: LD_VAR 0 3
41539: PUSH
41540: LD_INT 0
41542: GREATER
41543: IFFALSE 41565
// if temp_list [ 1 ] [ 1 ] = & then
41545: LD_VAR 0 3
41549: PUSH
41550: LD_INT 1
41552: ARRAY
41553: PUSH
41554: LD_INT 1
41556: ARRAY
41557: PUSH
41558: LD_STRING &
41560: EQUAL
41561: IFFALSE 41565
// continue ;
41563: GO 41502
// un1 = Attacks ( i ) ;
41565: LD_ADDR_VAR 0 4
41569: PUSH
41570: LD_VAR 0 1
41574: PPUSH
41575: CALL_OW 320
41579: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
41580: LD_VAR 0 4
41584: PUSH
41585: LD_INT 0
41587: GREATER
41588: PUSH
41589: LD_VAR 0 4
41593: PUSH
41594: EMPTY
41595: LIST
41596: PPUSH
41597: CALL 40372 0 1
41601: PUSH
41602: LD_INT 0
41604: GREATER
41605: AND
41606: IFFALSE 41867
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
41608: LD_ADDR_VAR 0 5
41612: PUSH
41613: LD_VAR 0 4
41617: PPUSH
41618: CALL_OW 250
41622: PUSH
41623: LD_VAR 0 4
41627: PPUSH
41628: CALL_OW 251
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: ST_TO_ADDR
// temp_value = false ;
41637: LD_ADDR_VAR 0 6
41641: PUSH
41642: LD_INT 0
41644: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
41645: LD_ADDR_VAR 0 7
41649: PUSH
41650: LD_EXP 72
41654: PUSH
41655: LD_VAR 0 9
41659: ARRAY
41660: PUSH
41661: LD_EXP 73
41665: PUSH
41666: LD_VAR 0 9
41670: ARRAY
41671: ADD
41672: PUSH
41673: FOR_IN
41674: IFFALSE 41746
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
41676: LD_VAR 0 5
41680: PUSH
41681: LD_INT 1
41683: ARRAY
41684: PPUSH
41685: LD_VAR 0 5
41689: PUSH
41690: LD_INT 2
41692: ARRAY
41693: PPUSH
41694: LD_VAR 0 7
41698: PUSH
41699: LD_INT 1
41701: ARRAY
41702: PPUSH
41703: LD_VAR 0 7
41707: PUSH
41708: LD_INT 2
41710: ARRAY
41711: PPUSH
41712: CALL_OW 298
41716: PUSH
41717: LD_EXP 71
41721: PUSH
41722: LD_VAR 0 8
41726: ARRAY
41727: PUSH
41728: LD_INT 2
41730: ARRAY
41731: LESSEQUAL
41732: IFFALSE 41744
// begin temp_value = true ;
41734: LD_ADDR_VAR 0 6
41738: PUSH
41739: LD_INT 1
41741: ST_TO_ADDR
// break ;
41742: GO 41746
// end ;
41744: GO 41673
41746: POP
41747: POP
// if not temp_value then
41748: LD_VAR 0 6
41752: NOT
41753: IFFALSE 41867
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
41755: LD_VAR 0 1
41759: PPUSH
41760: LD_VAR 0 5
41764: PUSH
41765: LD_INT 1
41767: ARRAY
41768: PPUSH
41769: LD_VAR 0 5
41773: PUSH
41774: LD_INT 2
41776: ARRAY
41777: PPUSH
41778: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
41782: LD_ADDR_VAR 0 3
41786: PUSH
41787: LD_EXP 73
41791: PUSH
41792: LD_VAR 0 9
41796: ARRAY
41797: PPUSH
41798: LD_INT 1
41800: PPUSH
41801: LD_VAR 0 5
41805: PUSH
41806: LD_INT 1
41808: ARRAY
41809: PUSH
41810: LD_VAR 0 5
41814: PUSH
41815: LD_INT 2
41817: ARRAY
41818: PUSH
41819: LD_VAR 0 1
41823: PUSH
41824: LD_OWVAR 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: PPUSH
41835: CALL_OW 2
41839: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
41840: LD_ADDR_EXP 73
41844: PUSH
41845: LD_EXP 73
41849: PPUSH
41850: LD_VAR 0 9
41854: PPUSH
41855: LD_VAR 0 3
41859: PPUSH
41860: CALL_OW 1
41864: ST_TO_ADDR
// continue ;
41865: GO 41502
// end ; end ; end ; k = ai_attacking_unit_hex_index [ base ] [ i ] ;
41867: LD_ADDR_VAR 0 2
41871: PUSH
41872: LD_EXP 74
41876: PUSH
41877: LD_VAR 0 9
41881: ARRAY
41882: PUSH
41883: LD_VAR 0 1
41887: ARRAY
41888: ST_TO_ADDR
// if GetDistUnitXY ( i , attack_hexes [ k ] [ 1 ] , attack_hexes [ k ] [ 2 ] ) > 1 then
41889: LD_VAR 0 1
41893: PPUSH
41894: LD_VAR 0 10
41898: PUSH
41899: LD_VAR 0 2
41903: ARRAY
41904: PUSH
41905: LD_INT 1
41907: ARRAY
41908: PPUSH
41909: LD_VAR 0 10
41913: PUSH
41914: LD_VAR 0 2
41918: ARRAY
41919: PUSH
41920: LD_INT 2
41922: ARRAY
41923: PPUSH
41924: CALL_OW 297
41928: PUSH
41929: LD_INT 1
41931: GREATER
41932: IFFALSE 41975
// ComAgressiveMove ( i , attack_hexes [ k ] [ 1 ] , attack_hexes [ k ] [ 2 ] ) else
41934: LD_VAR 0 1
41938: PPUSH
41939: LD_VAR 0 10
41943: PUSH
41944: LD_VAR 0 2
41948: ARRAY
41949: PUSH
41950: LD_INT 1
41952: ARRAY
41953: PPUSH
41954: LD_VAR 0 10
41958: PUSH
41959: LD_VAR 0 2
41963: ARRAY
41964: PUSH
41965: LD_INT 2
41967: ARRAY
41968: PPUSH
41969: CALL_OW 114
41973: GO 42171
// begin if k < attack_hexes - 1 then
41975: LD_VAR 0 2
41979: PUSH
41980: LD_VAR 0 10
41984: PUSH
41985: LD_INT 1
41987: MINUS
41988: LESS
41989: IFFALSE 42053
// begin temp_list = Replace ( ai_attacking_unit_hex_index [ base ] , i , k + 1 ) ;
41991: LD_ADDR_VAR 0 3
41995: PUSH
41996: LD_EXP 74
42000: PUSH
42001: LD_VAR 0 9
42005: ARRAY
42006: PPUSH
42007: LD_VAR 0 1
42011: PPUSH
42012: LD_VAR 0 2
42016: PUSH
42017: LD_INT 1
42019: PLUS
42020: PPUSH
42021: CALL_OW 1
42025: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
42026: LD_ADDR_EXP 74
42030: PUSH
42031: LD_EXP 74
42035: PPUSH
42036: LD_VAR 0 9
42040: PPUSH
42041: LD_VAR 0 3
42045: PPUSH
42046: CALL_OW 1
42050: ST_TO_ADDR
// end else
42051: GO 42171
// begin if Rand ( 1 , 6 ) = 1 then
42053: LD_INT 1
42055: PPUSH
42056: LD_INT 6
42058: PPUSH
42059: CALL_OW 12
42063: PUSH
42064: LD_INT 1
42066: EQUAL
42067: IFFALSE 42171
// begin if k = attack_hexes - 1 then
42069: LD_VAR 0 2
42073: PUSH
42074: LD_VAR 0 10
42078: PUSH
42079: LD_INT 1
42081: MINUS
42082: EQUAL
42083: IFFALSE 42101
// k = attack_hexes + 0 else
42085: LD_ADDR_VAR 0 2
42089: PUSH
42090: LD_VAR 0 10
42094: PUSH
42095: LD_INT 0
42097: PLUS
42098: ST_TO_ADDR
42099: GO 42115
// k = attack_hexes - 1 ;
42101: LD_ADDR_VAR 0 2
42105: PUSH
42106: LD_VAR 0 10
42110: PUSH
42111: LD_INT 1
42113: MINUS
42114: ST_TO_ADDR
// temp_list = Replace ( ai_attacking_unit_hex_index [ base ] , i , k ) ;
42115: LD_ADDR_VAR 0 3
42119: PUSH
42120: LD_EXP 74
42124: PUSH
42125: LD_VAR 0 9
42129: ARRAY
42130: PPUSH
42131: LD_VAR 0 1
42135: PPUSH
42136: LD_VAR 0 2
42140: PPUSH
42141: CALL_OW 1
42145: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
42146: LD_ADDR_EXP 74
42150: PUSH
42151: LD_EXP 74
42155: PPUSH
42156: LD_VAR 0 9
42160: PPUSH
42161: LD_VAR 0 3
42165: PPUSH
42166: CALL_OW 1
42170: ST_TO_ADDR
// end ; end ; end ; end ;
42171: GO 41502
42173: POP
42174: POP
// until false ;
42175: LD_INT 0
42177: IFFALSE 41464
// end ;
42179: PPOPN 10
42181: END
// every 0 0$1 do var base , side , val , temp_value , temp_list ;
42182: GO 42184
42184: DISABLE
42185: LD_INT 0
42187: PPUSH
42188: PPUSH
42189: PPUSH
42190: PPUSH
42191: PPUSH
// begin repeat wait ( 1 ) ;
42192: LD_INT 1
42194: PPUSH
42195: CALL_OW 67
// for base in ai_bases do
42199: LD_ADDR_VAR 0 1
42203: PUSH
42204: LD_EXP 58
42208: PUSH
42209: FOR_IN
42210: IFFALSE 42672
// begin if base in [ 1 , 2 ] then
42212: LD_VAR 0 1
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: IN
42227: IFFALSE 42231
// continue ;
42229: GO 42209
// side = GetBaseSide ( base ) ;
42231: LD_ADDR_VAR 0 2
42235: PUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: CALL 12381 0 1
42245: ST_TO_ADDR
// val = 1 ;
42246: LD_ADDR_VAR 0 3
42250: PUSH
42251: LD_INT 1
42253: ST_TO_ADDR
// while val <= ai_time_shift_hexes_underway [ base ] do
42254: LD_VAR 0 3
42258: PUSH
42259: LD_EXP 73
42263: PUSH
42264: LD_VAR 0 1
42268: ARRAY
42269: LESSEQUAL
42270: IFFALSE 42670
// begin if tick = ai_time_shift_hexes_underway [ base ] [ val ] [ 4 ] then
42272: LD_OWVAR 1
42276: PUSH
42277: LD_EXP 73
42281: PUSH
42282: LD_VAR 0 1
42286: ARRAY
42287: PUSH
42288: LD_VAR 0 3
42292: ARRAY
42293: PUSH
42294: LD_INT 4
42296: ARRAY
42297: EQUAL
42298: IFFALSE 42316
// begin val = val + 1 ;
42300: LD_ADDR_VAR 0 3
42304: PUSH
42305: LD_VAR 0 3
42309: PUSH
42310: LD_INT 1
42312: PLUS
42313: ST_TO_ADDR
// continue ;
42314: GO 42254
// end ; temp_value = false ;
42316: LD_ADDR_VAR 0 4
42320: PUSH
42321: LD_INT 0
42323: ST_TO_ADDR
// temp_list = GetTaskList ( ai_time_shift_hexes_underway [ base ] [ val ] [ 3 ] ) ;
42324: LD_ADDR_VAR 0 5
42328: PUSH
42329: LD_EXP 73
42333: PUSH
42334: LD_VAR 0 1
42338: ARRAY
42339: PUSH
42340: LD_VAR 0 3
42344: ARRAY
42345: PUSH
42346: LD_INT 3
42348: ARRAY
42349: PPUSH
42350: CALL_OW 437
42354: ST_TO_ADDR
// if IsOk ( ai_time_shift_hexes_underway [ base ] [ val ] [ 3 ] ) then
42355: LD_EXP 73
42359: PUSH
42360: LD_VAR 0 1
42364: ARRAY
42365: PUSH
42366: LD_VAR 0 3
42370: ARRAY
42371: PUSH
42372: LD_INT 3
42374: ARRAY
42375: PPUSH
42376: CALL_OW 302
42380: IFFALSE 42431
// begin if temp_list = 0 then
42382: LD_VAR 0 5
42386: PUSH
42387: LD_INT 0
42389: EQUAL
42390: IFFALSE 42402
// temp_value = true else
42392: LD_ADDR_VAR 0 4
42396: PUSH
42397: LD_INT 1
42399: ST_TO_ADDR
42400: GO 42429
// if not temp_list [ 1 ] [ 1 ] = & then
42402: LD_VAR 0 5
42406: PUSH
42407: LD_INT 1
42409: ARRAY
42410: PUSH
42411: LD_INT 1
42413: ARRAY
42414: PUSH
42415: LD_STRING &
42417: EQUAL
42418: NOT
42419: IFFALSE 42429
// temp_value = true ;
42421: LD_ADDR_VAR 0 4
42425: PUSH
42426: LD_INT 1
42428: ST_TO_ADDR
// end else
42429: GO 42484
// begin temp_list = Delete ( ai_time_shift_hexes_underway [ base ] , val ) ;
42431: LD_ADDR_VAR 0 5
42435: PUSH
42436: LD_EXP 73
42440: PUSH
42441: LD_VAR 0 1
42445: ARRAY
42446: PPUSH
42447: LD_VAR 0 3
42451: PPUSH
42452: CALL_OW 3
42456: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
42457: LD_ADDR_EXP 73
42461: PUSH
42462: LD_EXP 73
42466: PPUSH
42467: LD_VAR 0 1
42471: PPUSH
42472: LD_VAR 0 5
42476: PPUSH
42477: CALL_OW 1
42481: ST_TO_ADDR
// continue ;
42482: GO 42254
// end ; if temp_value then
42484: LD_VAR 0 4
42488: IFFALSE 42654
// begin temp_list = Insert ( ai_time_shift_hexes [ base ] , 1 , [ ai_time_shift_hexes_underway [ base ] [ val ] [ 1 ] , ai_time_shift_hexes_underway [ base ] [ val ] [ 2 ] , ai_time_shift_data [ side ] [ 1 ] ] ) ;
42490: LD_ADDR_VAR 0 5
42494: PUSH
42495: LD_EXP 72
42499: PUSH
42500: LD_VAR 0 1
42504: ARRAY
42505: PPUSH
42506: LD_INT 1
42508: PPUSH
42509: LD_EXP 73
42513: PUSH
42514: LD_VAR 0 1
42518: ARRAY
42519: PUSH
42520: LD_VAR 0 3
42524: ARRAY
42525: PUSH
42526: LD_INT 1
42528: ARRAY
42529: PUSH
42530: LD_EXP 73
42534: PUSH
42535: LD_VAR 0 1
42539: ARRAY
42540: PUSH
42541: LD_VAR 0 3
42545: ARRAY
42546: PUSH
42547: LD_INT 2
42549: ARRAY
42550: PUSH
42551: LD_EXP 71
42555: PUSH
42556: LD_VAR 0 2
42560: ARRAY
42561: PUSH
42562: LD_INT 1
42564: ARRAY
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: LIST
42570: PPUSH
42571: CALL_OW 2
42575: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
42576: LD_ADDR_EXP 72
42580: PUSH
42581: LD_EXP 72
42585: PPUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: LD_VAR 0 5
42595: PPUSH
42596: CALL_OW 1
42600: ST_TO_ADDR
// temp_list = Delete ( ai_time_shift_hexes_underway [ base ] , val ) ;
42601: LD_ADDR_VAR 0 5
42605: PUSH
42606: LD_EXP 73
42610: PUSH
42611: LD_VAR 0 1
42615: ARRAY
42616: PPUSH
42617: LD_VAR 0 3
42621: PPUSH
42622: CALL_OW 3
42626: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
42627: LD_ADDR_EXP 73
42631: PUSH
42632: LD_EXP 73
42636: PPUSH
42637: LD_VAR 0 1
42641: PPUSH
42642: LD_VAR 0 5
42646: PPUSH
42647: CALL_OW 1
42651: ST_TO_ADDR
// continue ;
42652: GO 42254
// end ; val = val + 1 ;
42654: LD_ADDR_VAR 0 3
42658: PUSH
42659: LD_VAR 0 3
42663: PUSH
42664: LD_INT 1
42666: PLUS
42667: ST_TO_ADDR
// end ;
42668: GO 42254
// end ;
42670: GO 42209
42672: POP
42673: POP
// until false ;
42674: LD_INT 0
42676: IFFALSE 42192
// end ;
42678: PPOPN 5
42680: END
// every 0 0$1 + 0 0$0.3 do var base , val , temp_list , time ;
42681: GO 42683
42683: DISABLE
42684: LD_INT 0
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
// begin repeat wait ( 0 0$1 ) ;
42690: LD_INT 35
42692: PPUSH
42693: CALL_OW 67
// for base in ai_bases do
42697: LD_ADDR_VAR 0 1
42701: PUSH
42702: LD_EXP 58
42706: PUSH
42707: FOR_IN
42708: IFFALSE 42959
// begin if base in [ 1 , 2 ] then
42710: LD_VAR 0 1
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: IN
42725: IFFALSE 42729
// continue ;
42727: GO 42707
// val = 1 ;
42729: LD_ADDR_VAR 0 2
42733: PUSH
42734: LD_INT 1
42736: ST_TO_ADDR
// while val <= ai_time_shift_hexes [ base ] do
42737: LD_VAR 0 2
42741: PUSH
42742: LD_EXP 72
42746: PUSH
42747: LD_VAR 0 1
42751: ARRAY
42752: LESSEQUAL
42753: IFFALSE 42957
// begin time = ai_time_shift_hexes [ base ] [ val ] [ 3 ] - 0 0$1 ;
42755: LD_ADDR_VAR 0 4
42759: PUSH
42760: LD_EXP 72
42764: PUSH
42765: LD_VAR 0 1
42769: ARRAY
42770: PUSH
42771: LD_VAR 0 2
42775: ARRAY
42776: PUSH
42777: LD_INT 3
42779: ARRAY
42780: PUSH
42781: LD_INT 35
42783: MINUS
42784: ST_TO_ADDR
// if time <= 0 0$0 then
42785: LD_VAR 0 4
42789: PUSH
42790: LD_INT 0
42792: LESSEQUAL
42793: IFFALSE 42850
// begin temp_list = Delete ( ai_time_shift_hexes [ base ] , val ) ;
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_EXP 72
42804: PUSH
42805: LD_VAR 0 1
42809: ARRAY
42810: PPUSH
42811: LD_VAR 0 2
42815: PPUSH
42816: CALL_OW 3
42820: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
42821: LD_ADDR_EXP 72
42825: PUSH
42826: LD_EXP 72
42830: PPUSH
42831: LD_VAR 0 1
42835: PPUSH
42836: LD_VAR 0 3
42840: PPUSH
42841: CALL_OW 1
42845: ST_TO_ADDR
// continue ;
42846: GO 42737
// end else
42848: GO 42941
// begin temp_list = Replace ( ai_time_shift_hexes [ base ] [ val ] , 3 , time ) ;
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_EXP 72
42859: PUSH
42860: LD_VAR 0 1
42864: ARRAY
42865: PUSH
42866: LD_VAR 0 2
42870: ARRAY
42871: PPUSH
42872: LD_INT 3
42874: PPUSH
42875: LD_VAR 0 4
42879: PPUSH
42880: CALL_OW 1
42884: ST_TO_ADDR
// temp_list = Replace ( ai_time_shift_hexes [ base ] , val , temp_list ) ;
42885: LD_ADDR_VAR 0 3
42889: PUSH
42890: LD_EXP 72
42894: PUSH
42895: LD_VAR 0 1
42899: ARRAY
42900: PPUSH
42901: LD_VAR 0 2
42905: PPUSH
42906: LD_VAR 0 3
42910: PPUSH
42911: CALL_OW 1
42915: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
42916: LD_ADDR_EXP 72
42920: PUSH
42921: LD_EXP 72
42925: PPUSH
42926: LD_VAR 0 1
42930: PPUSH
42931: LD_VAR 0 3
42935: PPUSH
42936: CALL_OW 1
42940: ST_TO_ADDR
// end ; val = val + 1 ;
42941: LD_ADDR_VAR 0 2
42945: PUSH
42946: LD_VAR 0 2
42950: PUSH
42951: LD_INT 1
42953: PLUS
42954: ST_TO_ADDR
// end ;
42955: GO 42737
// end ;
42957: GO 42707
42959: POP
42960: POP
// until false ;
42961: LD_INT 0
42963: IFFALSE 42690
// end ;
42965: PPOPN 4
42967: END
// every 0 0$5 do var base , i ;
42968: GO 42970
42970: DISABLE
42971: LD_INT 0
42973: PPUSH
42974: PPUSH
// begin for base in ai_bases do
42975: LD_ADDR_VAR 0 1
42979: PUSH
42980: LD_EXP 58
42984: PUSH
42985: FOR_IN
42986: IFFALSE 43083
// for i in ( ai_vehicles_attack [ base ] ^ ai_vehicles_defend [ base ] ^ ai_cargo_bay [ base ] ) diff 0 do
42988: LD_ADDR_VAR 0 2
42992: PUSH
42993: LD_EXP 40
42997: PUSH
42998: LD_VAR 0 1
43002: ARRAY
43003: PUSH
43004: LD_EXP 39
43008: PUSH
43009: LD_VAR 0 1
43013: ARRAY
43014: ADD
43015: PUSH
43016: LD_EXP 60
43020: PUSH
43021: LD_VAR 0 1
43025: ARRAY
43026: ADD
43027: PUSH
43028: LD_INT 0
43030: DIFF
43031: PUSH
43032: FOR_IN
43033: IFFALSE 43079
// if GetFuel ( i ) < 10 and GetEngine ( i ) = engine_combustion then
43035: LD_VAR 0 2
43039: PPUSH
43040: CALL_OW 261
43044: PUSH
43045: LD_INT 10
43047: LESS
43048: PUSH
43049: LD_VAR 0 2
43053: PPUSH
43054: CALL_OW 262
43058: PUSH
43059: LD_INT 1
43061: EQUAL
43062: AND
43063: IFFALSE 43077
// SetFuel ( i , 10 ) ;
43065: LD_VAR 0 2
43069: PPUSH
43070: LD_INT 10
43072: PPUSH
43073: CALL_OW 240
43077: GO 43032
43079: POP
43080: POP
43081: GO 42985
43083: POP
43084: POP
// enable ;
43085: ENABLE
// end ;
43086: PPOPN 2
43088: END
// every 0 0$1 do var side , i , scientists_list , temp_list , temp_unit , base , k , temp_list_3 , free_spaces , area ;
43089: GO 43091
43091: DISABLE
43092: LD_INT 0
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
43101: PPUSH
43102: PPUSH
43103: PPUSH
// begin for base in ai_bases do
43104: LD_ADDR_VAR 0 6
43108: PUSH
43109: LD_EXP 58
43113: PUSH
43114: FOR_IN
43115: IFFALSE 43810
// begin side = GetBaseSide ( base ) ;
43117: LD_ADDR_VAR 0 1
43121: PUSH
43122: LD_VAR 0 6
43126: PPUSH
43127: CALL 12381 0 1
43131: ST_TO_ADDR
// scientists_list = ai_scientists [ base ] diff ai_heal_these_humans [ base ] ;
43132: LD_ADDR_VAR 0 3
43136: PUSH
43137: LD_EXP 32
43141: PUSH
43142: LD_VAR 0 6
43146: ARRAY
43147: PUSH
43148: LD_EXP 43
43152: PUSH
43153: LD_VAR 0 6
43157: ARRAY
43158: DIFF
43159: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
43160: LD_ADDR_VAR 0 4
43164: PUSH
43165: LD_EXP 43
43169: PUSH
43170: LD_VAR 0 6
43174: ARRAY
43175: ST_TO_ADDR
// i = 1 ;
43176: LD_ADDR_VAR 0 2
43180: PUSH
43181: LD_INT 1
43183: ST_TO_ADDR
// while i <= scientists_list do
43184: LD_VAR 0 2
43188: PUSH
43189: LD_VAR 0 3
43193: LESSEQUAL
43194: IFFALSE 43289
// begin if GetLives ( scientists_list [ i ] ) <= 700 then
43196: LD_VAR 0 3
43200: PUSH
43201: LD_VAR 0 2
43205: ARRAY
43206: PPUSH
43207: CALL_OW 256
43211: PUSH
43212: LD_INT 700
43214: LESSEQUAL
43215: IFFALSE 43273
// begin temp_list = temp_list ^ scientists_list [ i ] ;
43217: LD_ADDR_VAR 0 4
43221: PUSH
43222: LD_VAR 0 4
43226: PUSH
43227: LD_VAR 0 3
43231: PUSH
43232: LD_VAR 0 2
43236: ARRAY
43237: ADD
43238: ST_TO_ADDR
// scientists_list = Delete ( scientists_list , i ) ;
43239: LD_ADDR_VAR 0 3
43243: PUSH
43244: LD_VAR 0 3
43248: PPUSH
43249: LD_VAR 0 2
43253: PPUSH
43254: CALL_OW 3
43258: ST_TO_ADDR
// i = i - 1 ;
43259: LD_ADDR_VAR 0 2
43263: PUSH
43264: LD_VAR 0 2
43268: PUSH
43269: LD_INT 1
43271: MINUS
43272: ST_TO_ADDR
// end ; i = i + 1 ;
43273: LD_ADDR_VAR 0 2
43277: PUSH
43278: LD_VAR 0 2
43282: PUSH
43283: LD_INT 1
43285: PLUS
43286: ST_TO_ADDR
// end ;
43287: GO 43184
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
43289: LD_ADDR_EXP 43
43293: PUSH
43294: LD_EXP 43
43298: PPUSH
43299: LD_VAR 0 6
43303: PPUSH
43304: LD_VAR 0 4
43308: PPUSH
43309: CALL_OW 1
43313: ST_TO_ADDR
// temp_list = [ ] ;
43314: LD_ADDR_VAR 0 4
43318: PUSH
43319: EMPTY
43320: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
43321: LD_ADDR_VAR 0 2
43325: PUSH
43326: LD_EXP 43
43330: PUSH
43331: LD_VAR 0 6
43335: ARRAY
43336: PUSH
43337: FOR_IN
43338: IFFALSE 43388
// if GetLives ( i ) < 1000 and IsInUnit ( i ) = 0 then
43340: LD_VAR 0 2
43344: PPUSH
43345: CALL_OW 256
43349: PUSH
43350: LD_INT 1000
43352: LESS
43353: PUSH
43354: LD_VAR 0 2
43358: PPUSH
43359: CALL_OW 310
43363: PUSH
43364: LD_INT 0
43366: EQUAL
43367: AND
43368: IFFALSE 43386
// temp_list = temp_list ^ i ;
43370: LD_ADDR_VAR 0 4
43374: PUSH
43375: LD_VAR 0 4
43379: PUSH
43380: LD_VAR 0 2
43384: ADD
43385: ST_TO_ADDR
43386: GO 43337
43388: POP
43389: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
43390: LD_ADDR_EXP 43
43394: PUSH
43395: LD_EXP 43
43399: PPUSH
43400: LD_VAR 0 6
43404: PPUSH
43405: LD_VAR 0 4
43409: PPUSH
43410: CALL_OW 1
43414: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
43415: LD_ADDR_VAR 0 2
43419: PUSH
43420: LD_EXP 43
43424: PUSH
43425: LD_VAR 0 6
43429: ARRAY
43430: PUSH
43431: FOR_IN
43432: IFFALSE 43520
// if GetDistUnitXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 4 then
43434: LD_VAR 0 2
43438: PPUSH
43439: LD_EXP 41
43443: PUSH
43444: LD_VAR 0 6
43448: ARRAY
43449: PUSH
43450: LD_INT 1
43452: ARRAY
43453: PPUSH
43454: LD_EXP 41
43458: PUSH
43459: LD_VAR 0 6
43463: ARRAY
43464: PUSH
43465: LD_INT 2
43467: ARRAY
43468: PPUSH
43469: CALL_OW 297
43473: PUSH
43474: LD_INT 4
43476: GREATER
43477: IFFALSE 43518
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
43479: LD_VAR 0 2
43483: PPUSH
43484: LD_EXP 41
43488: PUSH
43489: LD_VAR 0 6
43493: ARRAY
43494: PUSH
43495: LD_INT 1
43497: ARRAY
43498: PPUSH
43499: LD_EXP 41
43503: PUSH
43504: LD_VAR 0 6
43508: ARRAY
43509: PUSH
43510: LD_INT 2
43512: ARRAY
43513: PPUSH
43514: CALL_OW 111
43518: GO 43431
43520: POP
43521: POP
// if scientists_list = 0 then
43522: LD_VAR 0 3
43526: PUSH
43527: LD_INT 0
43529: EQUAL
43530: IFFALSE 43534
// continue ;
43532: GO 43114
// if ai_heal_these_humans [ base ] > 0 then
43534: LD_EXP 43
43538: PUSH
43539: LD_VAR 0 6
43543: ARRAY
43544: PUSH
43545: LD_INT 0
43547: GREATER
43548: IFFALSE 43743
// begin area = GetBaseArea ( base ) ;
43550: LD_ADDR_VAR 0 10
43554: PUSH
43555: LD_VAR 0 6
43559: PPUSH
43560: CALL 12310 0 1
43564: ST_TO_ADDR
// temp_list = UnitFilter ( ai_heal_these_humans [ base ] , [ f_inarea , area ] ) ;
43565: LD_ADDR_VAR 0 4
43569: PUSH
43570: LD_EXP 43
43574: PUSH
43575: LD_VAR 0 6
43579: ARRAY
43580: PPUSH
43581: LD_INT 95
43583: PUSH
43584: LD_VAR 0 10
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PPUSH
43593: CALL_OW 72
43597: ST_TO_ADDR
// if temp_list > 0 then
43598: LD_VAR 0 4
43602: PUSH
43603: LD_INT 0
43605: GREATER
43606: IFFALSE 43743
// begin scientists_list = GetHumansOutOfUnits ( scientists_list ) ;
43608: LD_ADDR_VAR 0 3
43612: PUSH
43613: LD_VAR 0 3
43617: PPUSH
43618: CALL 23196 0 1
43622: ST_TO_ADDR
// repeat i = 1 ;
43623: LD_ADDR_VAR 0 2
43627: PUSH
43628: LD_INT 1
43630: ST_TO_ADDR
// while i <= temp_list do
43631: LD_VAR 0 2
43635: PUSH
43636: LD_VAR 0 4
43640: LESSEQUAL
43641: IFFALSE 43733
// begin if scientists_list = 0 then
43643: LD_VAR 0 3
43647: PUSH
43648: LD_INT 0
43650: EQUAL
43651: IFFALSE 43655
// break ;
43653: GO 43733
// temp_unit = NearestUnitToUnit ( scientists_list , temp_list [ i ] ) ;
43655: LD_ADDR_VAR 0 5
43659: PUSH
43660: LD_VAR 0 3
43664: PPUSH
43665: LD_VAR 0 4
43669: PUSH
43670: LD_VAR 0 2
43674: ARRAY
43675: PPUSH
43676: CALL_OW 74
43680: ST_TO_ADDR
// ComHeal ( temp_unit , temp_list [ i ] ) ;
43681: LD_VAR 0 5
43685: PPUSH
43686: LD_VAR 0 4
43690: PUSH
43691: LD_VAR 0 2
43695: ARRAY
43696: PPUSH
43697: CALL_OW 128
// scientists_list = scientists_list diff temp_unit ;
43701: LD_ADDR_VAR 0 3
43705: PUSH
43706: LD_VAR 0 3
43710: PUSH
43711: LD_VAR 0 5
43715: DIFF
43716: ST_TO_ADDR
// i = i + 1 ;
43717: LD_ADDR_VAR 0 2
43721: PUSH
43722: LD_VAR 0 2
43726: PUSH
43727: LD_INT 1
43729: PLUS
43730: ST_TO_ADDR
// end ;
43731: GO 43631
// until scientists_list = 0 ;
43733: LD_VAR 0 3
43737: PUSH
43738: LD_INT 0
43740: EQUAL
43741: IFFALSE 43623
// end ; end ; DistributeHumansToBuildings ( base , scientists_list , UnitFilter ( ai_labs [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_scientistic , 6 , true , false ) ;
43743: LD_VAR 0 6
43747: PPUSH
43748: LD_VAR 0 3
43752: PPUSH
43753: LD_EXP 35
43757: PUSH
43758: LD_VAR 0 6
43762: ARRAY
43763: PPUSH
43764: LD_INT 50
43766: PUSH
43767: EMPTY
43768: LIST
43769: PUSH
43770: LD_INT 3
43772: PUSH
43773: LD_INT 57
43775: PUSH
43776: EMPTY
43777: LIST
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PPUSH
43787: CALL_OW 72
43791: PPUSH
43792: LD_INT 4
43794: PPUSH
43795: LD_INT 6
43797: PPUSH
43798: LD_INT 1
43800: PPUSH
43801: LD_INT 0
43803: PPUSH
43804: CALL 15267 0 7
// end ;
43808: GO 43114
43810: POP
43811: POP
// enable ;
43812: ENABLE
// end ; end_of_file
43813: PPOPN 10
43815: END
// export function GetApes ( side ) ; begin
43816: LD_INT 0
43818: PPUSH
// result = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ;
43819: LD_ADDR_VAR 0 2
43823: PUSH
43824: LD_INT 22
43826: PUSH
43827: LD_VAR 0 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 25
43841: PUSH
43842: LD_INT 12
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 25
43851: PUSH
43852: LD_INT 15
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 25
43861: PUSH
43862: LD_INT 16
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 25
43871: PUSH
43872: LD_INT 17
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PPUSH
43890: CALL_OW 69
43894: ST_TO_ADDR
// end ;
43895: LD_VAR 0 2
43899: RET
// on ResearchComplete ( tech , lab ) do var temp_list , temp_unit , i , un_list ;
43900: LD_INT 0
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
// begin if GetSide ( lab ) = you then
43906: LD_VAR 0 2
43910: PPUSH
43911: CALL_OW 255
43915: PUSH
43916: LD_EXP 2
43920: EQUAL
43921: IFFALSE 44908
// begin SetTech ( tech , you_alt , state_researched ) ;
43923: LD_VAR 0 1
43927: PPUSH
43928: LD_EXP 5
43932: PPUSH
43933: LD_INT 2
43935: PPUSH
43936: CALL_OW 322
// if tech = tech_HidCam then
43940: LD_VAR 0 1
43944: PUSH
43945: LD_INT 17
43947: EQUAL
43948: IFFALSE 44908
// begin un_list = [ Sonya , MarkB , Aviradze ] diff 0 ;
43950: LD_ADDR_VAR 0 6
43954: PUSH
43955: LD_EXP 10
43959: PUSH
43960: LD_EXP 19
43964: PUSH
43965: LD_EXP 20
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 0
43977: DIFF
43978: ST_TO_ADDR
// temp_list = [ ] ;
43979: LD_ADDR_VAR 0 3
43983: PUSH
43984: EMPTY
43985: ST_TO_ADDR
// for i in un_list do
43986: LD_ADDR_VAR 0 5
43990: PUSH
43991: LD_VAR 0 6
43995: PUSH
43996: FOR_IN
43997: IFFALSE 44034
// if IsInUnit ( i ) = lab then
43999: LD_VAR 0 5
44003: PPUSH
44004: CALL_OW 310
44008: PUSH
44009: LD_VAR 0 2
44013: EQUAL
44014: IFFALSE 44032
// temp_list = temp_list ^ i ;
44016: LD_ADDR_VAR 0 3
44020: PUSH
44021: LD_VAR 0 3
44025: PUSH
44026: LD_VAR 0 5
44030: ADD
44031: ST_TO_ADDR
44032: GO 43996
44034: POP
44035: POP
// if temp_list = 0 then
44036: LD_VAR 0 3
44040: PUSH
44041: LD_INT 0
44043: EQUAL
44044: IFFALSE 44153
// begin temp_list = UnitsInside ( lab ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
44046: LD_ADDR_VAR 0 3
44050: PUSH
44051: LD_VAR 0 2
44055: PPUSH
44056: CALL_OW 313
44060: PUSH
44061: LD_EXP 2
44065: PPUSH
44066: CALL 43816 0 1
44070: PUSH
44071: LD_EXP 9
44075: PUSH
44076: LD_EXP 10
44080: PUSH
44081: LD_EXP 11
44085: PUSH
44086: LD_EXP 12
44090: PUSH
44091: LD_EXP 13
44095: PUSH
44096: LD_EXP 14
44100: PUSH
44101: LD_EXP 15
44105: PUSH
44106: LD_EXP 16
44110: PUSH
44111: LD_EXP 17
44115: PUSH
44116: LD_EXP 18
44120: PUSH
44121: LD_EXP 19
44125: PUSH
44126: LD_EXP 20
44130: PUSH
44131: LD_EXP 21
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: ADD
44151: DIFF
44152: ST_TO_ADDR
// end ; if temp_list = 0 then
44153: LD_VAR 0 3
44157: PUSH
44158: LD_INT 0
44160: EQUAL
44161: IFFALSE 44188
// begin temp_list = UnitFilter ( un_list , [ f_class , class_scientistic ] ) ;
44163: LD_ADDR_VAR 0 3
44167: PUSH
44168: LD_VAR 0 6
44172: PPUSH
44173: LD_INT 25
44175: PUSH
44176: LD_INT 4
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PPUSH
44183: CALL_OW 72
44187: ST_TO_ADDR
// end ; if temp_list = 0 then
44188: LD_VAR 0 3
44192: PUSH
44193: LD_INT 0
44195: EQUAL
44196: IFFALSE 44315
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_class , class_scientistic ] ] ) diff [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ;
44198: LD_ADDR_VAR 0 3
44202: PUSH
44203: LD_INT 22
44205: PUSH
44206: LD_EXP 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 25
44217: PUSH
44218: LD_INT 4
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PPUSH
44229: CALL_OW 69
44233: PUSH
44234: LD_EXP 9
44238: PUSH
44239: LD_EXP 10
44243: PUSH
44244: LD_EXP 11
44248: PUSH
44249: LD_EXP 12
44253: PUSH
44254: LD_EXP 13
44258: PUSH
44259: LD_EXP 14
44263: PUSH
44264: LD_EXP 15
44268: PUSH
44269: LD_EXP 16
44273: PUSH
44274: LD_EXP 17
44278: PUSH
44279: LD_EXP 18
44283: PUSH
44284: LD_EXP 19
44288: PUSH
44289: LD_EXP 20
44293: PUSH
44294: LD_EXP 21
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: DIFF
44314: ST_TO_ADDR
// end ; if temp_list = 0 then
44315: LD_VAR 0 3
44319: PUSH
44320: LD_INT 0
44322: EQUAL
44323: IFFALSE 44453
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
44325: LD_ADDR_VAR 0 3
44329: PUSH
44330: LD_INT 22
44332: PUSH
44333: LD_EXP 2
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 21
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PPUSH
44356: CALL_OW 69
44360: PUSH
44361: LD_EXP 2
44365: PPUSH
44366: CALL 43816 0 1
44370: PUSH
44371: LD_EXP 9
44375: PUSH
44376: LD_EXP 10
44380: PUSH
44381: LD_EXP 11
44385: PUSH
44386: LD_EXP 12
44390: PUSH
44391: LD_EXP 13
44395: PUSH
44396: LD_EXP 14
44400: PUSH
44401: LD_EXP 15
44405: PUSH
44406: LD_EXP 16
44410: PUSH
44411: LD_EXP 17
44415: PUSH
44416: LD_EXP 18
44420: PUSH
44421: LD_EXP 19
44425: PUSH
44426: LD_EXP 20
44430: PUSH
44431: LD_EXP 21
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: ADD
44451: DIFF
44452: ST_TO_ADDR
// end ; if temp_list > 0 then
44453: LD_VAR 0 3
44457: PUSH
44458: LD_INT 0
44460: GREATER
44461: IFFALSE 44847
// begin DialogueOn ;
44463: CALL_OW 6
// temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
44467: LD_ADDR_VAR 0 4
44471: PUSH
44472: LD_VAR 0 3
44476: PUSH
44477: LD_INT 1
44479: PPUSH
44480: LD_VAR 0 3
44484: PPUSH
44485: CALL_OW 12
44489: ARRAY
44490: ST_TO_ADDR
// case temp_unit of Sonya :
44491: LD_VAR 0 4
44495: PUSH
44496: LD_EXP 10
44500: DOUBLE
44501: EQUAL
44502: IFTRUE 44506
44504: GO 44521
44506: POP
// Say ( temp_unit , D7-So-1 ) ; MarkB :
44507: LD_VAR 0 4
44511: PPUSH
44512: LD_STRING D7-So-1
44514: PPUSH
44515: CALL_OW 88
44519: GO 44709
44521: LD_EXP 19
44525: DOUBLE
44526: EQUAL
44527: IFTRUE 44531
44529: GO 44570
44531: POP
// begin Say ( temp_unit , D7-Ma-1 ) ;
44532: LD_VAR 0 4
44536: PPUSH
44537: LD_STRING D7-Ma-1
44539: PPUSH
44540: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44544: LD_EXP 9
44548: PPUSH
44549: LD_STRING D7-H-1
44551: PPUSH
44552: CALL_OW 88
// Say ( temp_unit , D7-Ma-2 ) ;
44556: LD_VAR 0 4
44560: PPUSH
44561: LD_STRING D7-Ma-2
44563: PPUSH
44564: CALL_OW 88
// end ; Aviradze :
44568: GO 44709
44570: LD_EXP 20
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44580
44578: GO 44619
44580: POP
// begin Say ( temp_unit , D7-Av-1 ) ;
44581: LD_VAR 0 4
44585: PPUSH
44586: LD_STRING D7-Av-1
44588: PPUSH
44589: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44593: LD_EXP 9
44597: PPUSH
44598: LD_STRING D7-H-1
44600: PPUSH
44601: CALL_OW 88
// Say ( temp_unit , D7-Av-2 ) ;
44605: LD_VAR 0 4
44609: PPUSH
44610: LD_STRING D7-Av-2
44612: PPUSH
44613: CALL_OW 88
// end ; else
44617: GO 44709
44619: POP
// if GetSex ( temp_unit ) = sex_male then
44620: LD_VAR 0 4
44624: PPUSH
44625: CALL_OW 258
44629: PUSH
44630: LD_INT 1
44632: EQUAL
44633: IFFALSE 44673
// begin Say ( temp_unit , D7-SciM-1 ) ;
44635: LD_VAR 0 4
44639: PPUSH
44640: LD_STRING D7-SciM-1
44642: PPUSH
44643: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44647: LD_EXP 9
44651: PPUSH
44652: LD_STRING D7-H-1
44654: PPUSH
44655: CALL_OW 88
// Say ( temp_unit , D7-SciM-2 ) ;
44659: LD_VAR 0 4
44663: PPUSH
44664: LD_STRING D7-SciM-2
44666: PPUSH
44667: CALL_OW 88
// end else
44671: GO 44709
// begin Say ( temp_unit , D7-SciF-1 ) ;
44673: LD_VAR 0 4
44677: PPUSH
44678: LD_STRING D7-SciF-1
44680: PPUSH
44681: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44685: LD_EXP 9
44689: PPUSH
44690: LD_STRING D7-H-1
44692: PPUSH
44693: CALL_OW 88
// Say ( temp_unit , D7-SciF-2 ) ;
44697: LD_VAR 0 4
44701: PPUSH
44702: LD_STRING D7-SciF-2
44704: PPUSH
44705: CALL_OW 88
// end ; end ; Say ( Heike , D7-H-2 ) ;
44709: LD_EXP 9
44713: PPUSH
44714: LD_STRING D7-H-2
44716: PPUSH
44717: CALL_OW 88
// case temp_unit of Sonya :
44721: LD_VAR 0 4
44725: PUSH
44726: LD_EXP 10
44730: DOUBLE
44731: EQUAL
44732: IFTRUE 44736
44734: GO 44751
44736: POP
// Say ( temp_unit , D7-So-2 ) ; MarkB :
44737: LD_VAR 0 4
44741: PPUSH
44742: LD_STRING D7-So-2
44744: PPUSH
44745: CALL_OW 88
44749: GO 44843
44751: LD_EXP 19
44755: DOUBLE
44756: EQUAL
44757: IFTRUE 44761
44759: GO 44776
44761: POP
// Say ( temp_unit , D7-Ma-3 ) ; Aviradze :
44762: LD_VAR 0 4
44766: PPUSH
44767: LD_STRING D7-Ma-3
44769: PPUSH
44770: CALL_OW 88
44774: GO 44843
44776: LD_EXP 20
44780: DOUBLE
44781: EQUAL
44782: IFTRUE 44786
44784: GO 44801
44786: POP
// Say ( temp_unit , D7-Av-3 ) ; else
44787: LD_VAR 0 4
44791: PPUSH
44792: LD_STRING D7-Av-3
44794: PPUSH
44795: CALL_OW 88
44799: GO 44843
44801: POP
// if GetSex ( temp_unit ) = sex_male then
44802: LD_VAR 0 4
44806: PPUSH
44807: CALL_OW 258
44811: PUSH
44812: LD_INT 1
44814: EQUAL
44815: IFFALSE 44831
// Say ( temp_unit , D7-SciM-3 ) else
44817: LD_VAR 0 4
44821: PPUSH
44822: LD_STRING D7-SciM-3
44824: PPUSH
44825: CALL_OW 88
44829: GO 44843
// Say ( temp_unit , D7-SciF-3 ) ; end ;
44831: LD_VAR 0 4
44835: PPUSH
44836: LD_STRING D7-SciF-3
44838: PPUSH
44839: CALL_OW 88
// DialogueOff ;
44843: CALL_OW 7
// end ; Wait ( 0 0$0.2 ) ;
44847: LD_INT 7
44849: PPUSH
44850: CALL_OW 67
// ChangeMissionObjectives ( MAddCameras ) ;
44854: LD_STRING MAddCameras
44856: PPUSH
44857: CALL_OW 337
// wait ( 0 0$0.2 ) ;
44861: LD_INT 7
44863: PPUSH
44864: CALL_OW 67
// SetAreaMapShow ( camera_area_2 , 1 ) ;
44868: LD_INT 15
44870: PPUSH
44871: LD_INT 1
44873: PPUSH
44874: CALL_OW 424
// SetAreaMapShow ( camera_area_3 , 1 ) ;
44878: LD_INT 16
44880: PPUSH
44881: LD_INT 1
44883: PPUSH
44884: CALL_OW 424
// SetAreaMapShow ( camera_area_4 , 1 ) ;
44888: LD_INT 17
44890: PPUSH
44891: LD_INT 1
44893: PPUSH
44894: CALL_OW 424
// SetAreaMapShow ( camera_area_5 , 1 ) ;
44898: LD_INT 18
44900: PPUSH
44901: LD_INT 1
44903: PPUSH
44904: CALL_OW 424
// end ; end ; end ;
44908: PPOPN 6
44910: END
// export function CheckCamerasOnCommand ( comm ) ; var i , task_list , x , y , k , temp_list ; begin
44911: LD_INT 0
44913: PPUSH
44914: PPUSH
44915: PPUSH
44916: PPUSH
44917: PPUSH
44918: PPUSH
44919: PPUSH
// if cameras_placed then
44920: LD_EXP 91
44924: IFFALSE 44928
// exit ;
44926: GO 45164
// case comm of 103 :
44928: LD_VAR 0 1
44932: PUSH
44933: LD_INT 103
44935: DOUBLE
44936: EQUAL
44937: IFTRUE 44941
44939: GO 45163
44941: POP
// begin for i in FilterAllUnits ( [ [ f_side , you ] , [ f_class , class_engineer ] ] ) do
44942: LD_ADDR_VAR 0 3
44946: PUSH
44947: LD_INT 22
44949: PUSH
44950: LD_EXP 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 25
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PPUSH
44973: CALL_OW 69
44977: PUSH
44978: FOR_IN
44979: IFFALSE 45159
// if IsSelected ( i ) then
44981: LD_VAR 0 3
44985: PPUSH
44986: CALL_OW 306
44990: IFFALSE 45157
// begin task_list = GetTaskList ( i ) ;
44992: LD_ADDR_VAR 0 4
44996: PUSH
44997: LD_VAR 0 3
45001: PPUSH
45002: CALL_OW 437
45006: ST_TO_ADDR
// if task_list > 0 then
45007: LD_VAR 0 4
45011: PUSH
45012: LD_INT 0
45014: GREATER
45015: IFFALSE 45157
// begin x = task_list [ task_list + 0 ] [ 2 ] ;
45017: LD_ADDR_VAR 0 5
45021: PUSH
45022: LD_VAR 0 4
45026: PUSH
45027: LD_VAR 0 4
45031: PUSH
45032: LD_INT 0
45034: PLUS
45035: ARRAY
45036: PUSH
45037: LD_INT 2
45039: ARRAY
45040: ST_TO_ADDR
// y = task_list [ task_list + 0 ] [ 3 ] ;
45041: LD_ADDR_VAR 0 6
45045: PUSH
45046: LD_VAR 0 4
45050: PUSH
45051: LD_VAR 0 4
45055: PUSH
45056: LD_INT 0
45058: PLUS
45059: ARRAY
45060: PUSH
45061: LD_INT 3
45063: ARRAY
45064: ST_TO_ADDR
// if InArea ( x , y , camera_area_2 ) or InArea ( x , y , camera_area_3 ) or InArea ( x , y , camera_area_4 ) or InArea ( x , y , camera_area_5 ) then
45065: LD_VAR 0 5
45069: PPUSH
45070: LD_VAR 0 6
45074: PPUSH
45075: LD_INT 15
45077: PPUSH
45078: CALL_OW 309
45082: PUSH
45083: LD_VAR 0 5
45087: PPUSH
45088: LD_VAR 0 6
45092: PPUSH
45093: LD_INT 16
45095: PPUSH
45096: CALL_OW 309
45100: OR
45101: PUSH
45102: LD_VAR 0 5
45106: PPUSH
45107: LD_VAR 0 6
45111: PPUSH
45112: LD_INT 17
45114: PPUSH
45115: CALL_OW 309
45119: OR
45120: PUSH
45121: LD_VAR 0 5
45125: PPUSH
45126: LD_VAR 0 6
45130: PPUSH
45131: LD_INT 18
45133: PPUSH
45134: CALL_OW 309
45138: OR
45139: IFFALSE 45157
// begin camera_engineers = camera_engineers union i ;
45141: LD_ADDR_EXP 90
45145: PUSH
45146: LD_EXP 90
45150: PUSH
45151: LD_VAR 0 3
45155: UNION
45156: ST_TO_ADDR
// end ; end ; end ;
45157: GO 44978
45159: POP
45160: POP
// end ; end ;
45161: GO 45164
45163: POP
// end ;
45164: LD_VAR 0 2
45168: RET
// every 0 0$1 + 0 0$0.4 do var i , k , temp_list , x , y , task_list ; var need_area_list ;
45169: GO 45171
45171: DISABLE
45172: LD_INT 0
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
// begin need_area_list = [ 2 , 3 , 4 , 5 ] ;
45181: LD_ADDR_VAR 0 7
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 3
45191: PUSH
45192: LD_INT 4
45194: PUSH
45195: LD_INT 5
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: ST_TO_ADDR
// repeat wait ( 0 0$0.1 ) ;
45204: LD_INT 4
45206: PPUSH
45207: CALL_OW 67
// temp_list = [ ] ;
45211: LD_ADDR_VAR 0 3
45215: PUSH
45216: EMPTY
45217: ST_TO_ADDR
// for i in camera_engineers do
45218: LD_ADDR_VAR 0 1
45222: PUSH
45223: LD_EXP 90
45227: PUSH
45228: FOR_IN
45229: IFFALSE 45260
// if HasTask ( i ) then
45231: LD_VAR 0 1
45235: PPUSH
45236: CALL_OW 314
45240: IFFALSE 45258
// temp_list = temp_list ^ i ;
45242: LD_ADDR_VAR 0 3
45246: PUSH
45247: LD_VAR 0 3
45251: PUSH
45252: LD_VAR 0 1
45256: ADD
45257: ST_TO_ADDR
45258: GO 45228
45260: POP
45261: POP
// camera_engineers = temp_list ;
45262: LD_ADDR_EXP 90
45266: PUSH
45267: LD_VAR 0 3
45271: ST_TO_ADDR
// for i in camera_engineers do
45272: LD_ADDR_VAR 0 1
45276: PUSH
45277: LD_EXP 90
45281: PUSH
45282: FOR_IN
45283: IFFALSE 45666
// begin task_list = GetTaskList ( i ) ;
45285: LD_ADDR_VAR 0 6
45289: PUSH
45290: LD_VAR 0 1
45294: PPUSH
45295: CALL_OW 437
45299: ST_TO_ADDR
// if task_list [ 1 ] [ 1 ] = g then
45300: LD_VAR 0 6
45304: PUSH
45305: LD_INT 1
45307: ARRAY
45308: PUSH
45309: LD_INT 1
45311: ARRAY
45312: PUSH
45313: LD_STRING g
45315: EQUAL
45316: IFFALSE 45664
// begin x = task_list [ 1 ] [ 2 ] ;
45318: LD_ADDR_VAR 0 4
45322: PUSH
45323: LD_VAR 0 6
45327: PUSH
45328: LD_INT 1
45330: ARRAY
45331: PUSH
45332: LD_INT 2
45334: ARRAY
45335: ST_TO_ADDR
// y = task_list [ 1 ] [ 3 ] ;
45336: LD_ADDR_VAR 0 5
45340: PUSH
45341: LD_VAR 0 6
45345: PUSH
45346: LD_INT 1
45348: ARRAY
45349: PUSH
45350: LD_INT 3
45352: ARRAY
45353: ST_TO_ADDR
// if GetDistUnitXY ( i , x , y ) > 2 then
45354: LD_VAR 0 1
45358: PPUSH
45359: LD_VAR 0 4
45363: PPUSH
45364: LD_VAR 0 5
45368: PPUSH
45369: CALL_OW 297
45373: PUSH
45374: LD_INT 2
45376: GREATER
45377: IFFALSE 45381
// continue ;
45379: GO 45282
// if InArea ( x , y , camera_area_2 ) then
45381: LD_VAR 0 4
45385: PPUSH
45386: LD_VAR 0 5
45390: PPUSH
45391: LD_INT 15
45393: PPUSH
45394: CALL_OW 309
45398: IFFALSE 45445
// begin HiddenCamera ( x , y , you ) ;
45400: LD_VAR 0 4
45404: PPUSH
45405: LD_VAR 0 5
45409: PPUSH
45410: LD_EXP 2
45414: PPUSH
45415: CALL_OW 244
// need_area_list = need_area_list diff 2 ;
45419: LD_ADDR_VAR 0 7
45423: PUSH
45424: LD_VAR 0 7
45428: PUSH
45429: LD_INT 2
45431: DIFF
45432: ST_TO_ADDR
// SetAreaMapShow ( camera_area_2 , 0 ) ;
45433: LD_INT 15
45435: PPUSH
45436: LD_INT 0
45438: PPUSH
45439: CALL_OW 424
// end else
45443: GO 45635
// if InArea ( x , y , camera_area_3 ) then
45445: LD_VAR 0 4
45449: PPUSH
45450: LD_VAR 0 5
45454: PPUSH
45455: LD_INT 16
45457: PPUSH
45458: CALL_OW 309
45462: IFFALSE 45509
// begin HiddenCamera ( x , y , you ) ;
45464: LD_VAR 0 4
45468: PPUSH
45469: LD_VAR 0 5
45473: PPUSH
45474: LD_EXP 2
45478: PPUSH
45479: CALL_OW 244
// need_area_list = need_area_list diff 3 ;
45483: LD_ADDR_VAR 0 7
45487: PUSH
45488: LD_VAR 0 7
45492: PUSH
45493: LD_INT 3
45495: DIFF
45496: ST_TO_ADDR
// SetAreaMapShow ( camera_area_3 , 0 ) ;
45497: LD_INT 16
45499: PPUSH
45500: LD_INT 0
45502: PPUSH
45503: CALL_OW 424
// end else
45507: GO 45635
// if InArea ( x , y , camera_area_4 ) then
45509: LD_VAR 0 4
45513: PPUSH
45514: LD_VAR 0 5
45518: PPUSH
45519: LD_INT 17
45521: PPUSH
45522: CALL_OW 309
45526: IFFALSE 45573
// begin HiddenCamera ( x , y , you ) ;
45528: LD_VAR 0 4
45532: PPUSH
45533: LD_VAR 0 5
45537: PPUSH
45538: LD_EXP 2
45542: PPUSH
45543: CALL_OW 244
// need_area_list = need_area_list diff 4 ;
45547: LD_ADDR_VAR 0 7
45551: PUSH
45552: LD_VAR 0 7
45556: PUSH
45557: LD_INT 4
45559: DIFF
45560: ST_TO_ADDR
// SetAreaMapShow ( camera_area_4 , 0 ) ;
45561: LD_INT 17
45563: PPUSH
45564: LD_INT 0
45566: PPUSH
45567: CALL_OW 424
// end else
45571: GO 45635
// if InArea ( x , y , camera_area_5 ) then
45573: LD_VAR 0 4
45577: PPUSH
45578: LD_VAR 0 5
45582: PPUSH
45583: LD_INT 18
45585: PPUSH
45586: CALL_OW 309
45590: IFFALSE 45635
// begin HiddenCamera ( x , y , you ) ;
45592: LD_VAR 0 4
45596: PPUSH
45597: LD_VAR 0 5
45601: PPUSH
45602: LD_EXP 2
45606: PPUSH
45607: CALL_OW 244
// need_area_list = need_area_list diff 5 ;
45611: LD_ADDR_VAR 0 7
45615: PUSH
45616: LD_VAR 0 7
45620: PUSH
45621: LD_INT 5
45623: DIFF
45624: ST_TO_ADDR
// SetAreaMapShow ( camera_area_5 , 0 ) ;
45625: LD_INT 18
45627: PPUSH
45628: LD_INT 0
45630: PPUSH
45631: CALL_OW 424
// end ; if need_area_list = 0 then
45635: LD_VAR 0 7
45639: PUSH
45640: LD_INT 0
45642: EQUAL
45643: IFFALSE 45664
// begin ChangeMissionObjectives ( MOutCameras ) ;
45645: LD_STRING MOutCameras
45647: PPUSH
45648: CALL_OW 337
// cameras_placed = true ;
45652: LD_ADDR_EXP 91
45656: PUSH
45657: LD_INT 1
45659: ST_TO_ADDR
// exit ;
45660: POP
45661: POP
45662: GO 45672
// end ; end ; end ;
45664: GO 45282
45666: POP
45667: POP
// until false ;
45668: LD_INT 0
45670: IFFALSE 45204
// end ;
45672: PPOPN 7
45674: END
// on SpontaneousTeleported ( un ) do begin if first_teleport then
45675: LD_EXP 89
45679: IFFALSE 45809
// if See ( you , un ) then
45681: LD_EXP 2
45685: PPUSH
45686: LD_VAR 0 1
45690: PPUSH
45691: CALL_OW 292
45695: IFFALSE 45809
// begin CenterNowOnUnits ( un ) ;
45697: LD_VAR 0 1
45701: PPUSH
45702: CALL_OW 87
// first_teleport = false ;
45706: LD_ADDR_EXP 89
45710: PUSH
45711: LD_INT 0
45713: ST_TO_ADDR
// wait ( 0 0$1.8 ) ;
45714: LD_INT 63
45716: PPUSH
45717: CALL_OW 67
// DialogueOn ;
45721: CALL_OW 6
// ForceSay ( Heike , D6-H-1 ) ;
45725: LD_EXP 9
45729: PPUSH
45730: LD_STRING D6-H-1
45732: PPUSH
45733: CALL_OW 91
// if IsLive ( Ralph ) then
45737: LD_EXP 12
45741: PPUSH
45742: CALL_OW 300
45746: IFFALSE 45762
// ForceSay ( Ralph , D6-Ra-1 ) else
45748: LD_EXP 12
45752: PPUSH
45753: LD_STRING D6-Ra-1
45755: PPUSH
45756: CALL_OW 91
45760: GO 45805
// if IsLive ( Oswald ) then
45762: LD_EXP 11
45766: PPUSH
45767: CALL_OW 300
45771: IFFALSE 45805
// begin if oswald_is_substitute then
45773: LD_EXP 80
45777: IFFALSE 45793
// ForceSay ( Oswald , D6-Os_alt-1 ) else
45779: LD_EXP 11
45783: PPUSH
45784: LD_STRING D6-Os_alt-1
45786: PPUSH
45787: CALL_OW 91
45791: GO 45805
// ForceSay ( Oswald , D6-Os-1 ) ;
45793: LD_EXP 11
45797: PPUSH
45798: LD_STRING D6-Os-1
45800: PPUSH
45801: CALL_OW 91
// end ; DialogueOff ;
45805: CALL_OW 7
// end ; end ;
45809: PPOPN 1
45811: END
// every 0 0$1.6 do
45812: GO 45814
45814: DISABLE
// begin repeat wait ( 0 0$0.5 ) ;
45815: LD_INT 18
45817: PPUSH
45818: CALL_OW 67
// if game_phase = 3 then
45822: LD_EXP 88
45826: PUSH
45827: LD_INT 3
45829: EQUAL
45830: IFFALSE 45834
// exit ;
45832: GO 45920
// if ContactTime ( [ you , you_alt ] ) <= 0 0$1 or ai_contact_time [ you ] [ you_alt ] <= 0 0$1 then
45834: LD_EXP 2
45838: PUSH
45839: LD_EXP 5
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PPUSH
45848: CALL_OW 462
45852: PUSH
45853: LD_INT 35
45855: LESSEQUAL
45856: PUSH
45857: LD_EXP 75
45861: PUSH
45862: LD_EXP 2
45866: ARRAY
45867: PUSH
45868: LD_EXP 5
45872: ARRAY
45873: PUSH
45874: LD_INT 35
45876: LESSEQUAL
45877: OR
45878: IFFALSE 45916
// begin DialogueOn ;
45880: CALL_OW 6
// Say ( Gensher , D11-Ge-1 ) ;
45884: LD_EXP 23
45888: PPUSH
45889: LD_STRING D11-Ge-1
45891: PPUSH
45892: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
45896: LD_INT 18
45898: PPUSH
45899: CALL_OW 68
// YouLost ( AttackedGensher ) ;
45903: LD_STRING AttackedGensher
45905: PPUSH
45906: CALL_OW 104
// DialogueOff ;
45910: CALL_OW 7
// exit ;
45914: GO 45920
// end ; until false ;
45916: LD_INT 0
45918: IFFALSE 45815
// end ;
45920: END
// every 0 0$1 + 0 0$0.2 do var temp_list , i ;
45921: GO 45923
45923: DISABLE
45924: LD_INT 0
45926: PPUSH
45927: PPUSH
// begin repeat wait ( 0 0$1 ) ;
45928: LD_INT 35
45930: PPUSH
45931: CALL_OW 67
// if game_phase > 1 then
45935: LD_EXP 88
45939: PUSH
45940: LD_INT 1
45942: GREATER
45943: IFFALSE 45947
// exit ;
45945: GO 46391
// if ContactTime ( [ you , americans ] ) <= 0 0$2 or ai_contact_time [ americans ] [ you ] <= 0 0$2 then
45947: LD_EXP 2
45951: PUSH
45952: LD_EXP 6
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PPUSH
45961: CALL_OW 462
45965: PUSH
45966: LD_INT 70
45968: LESSEQUAL
45969: PUSH
45970: LD_EXP 75
45974: PUSH
45975: LD_EXP 6
45979: ARRAY
45980: PUSH
45981: LD_EXP 2
45985: ARRAY
45986: PUSH
45987: LD_INT 70
45989: LESSEQUAL
45990: OR
45991: IFFALSE 46387
// begin temp_list = [ ] ;
45993: LD_ADDR_VAR 0 1
45997: PUSH
45998: EMPTY
45999: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , americans ] ) do
46000: LD_ADDR_VAR 0 2
46004: PUSH
46005: LD_INT 22
46007: PUSH
46008: LD_EXP 6
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PPUSH
46017: CALL_OW 69
46021: PUSH
46022: FOR_IN
46023: IFFALSE 46061
// if GetSide ( Attacks ( i ) ) = you then
46025: LD_VAR 0 2
46029: PPUSH
46030: CALL_OW 320
46034: PPUSH
46035: CALL_OW 255
46039: PUSH
46040: LD_EXP 2
46044: EQUAL
46045: IFFALSE 46059
// begin temp_list = i ;
46047: LD_ADDR_VAR 0 1
46051: PUSH
46052: LD_VAR 0 2
46056: ST_TO_ADDR
// break ;
46057: GO 46061
// end ;
46059: GO 46022
46061: POP
46062: POP
// if temp_list = 0 then
46063: LD_VAR 0 1
46067: PUSH
46068: LD_INT 0
46070: EQUAL
46071: IFFALSE 46136
// for i in FilterAllUnits ( [ f_side , you ] ) do
46073: LD_ADDR_VAR 0 2
46077: PUSH
46078: LD_INT 22
46080: PUSH
46081: LD_EXP 2
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PPUSH
46090: CALL_OW 69
46094: PUSH
46095: FOR_IN
46096: IFFALSE 46134
// if GetSide ( Attacks ( i ) ) = americans then
46098: LD_VAR 0 2
46102: PPUSH
46103: CALL_OW 320
46107: PPUSH
46108: CALL_OW 255
46112: PUSH
46113: LD_EXP 6
46117: EQUAL
46118: IFFALSE 46132
// begin temp_list = i ;
46120: LD_ADDR_VAR 0 1
46124: PUSH
46125: LD_VAR 0 2
46129: ST_TO_ADDR
// break ;
46130: GO 46134
// end ;
46132: GO 46095
46134: POP
46135: POP
// if temp_list > 0 then
46136: LD_VAR 0 1
46140: PUSH
46141: LD_INT 0
46143: GREATER
46144: IFFALSE 46155
// CenterOnUnits ( temp_list ) ;
46146: LD_VAR 0 1
46150: PPUSH
46151: CALL_OW 85
// DialogueOn ;
46155: CALL_OW 6
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_class , class_soldier ] ] ) diff [ Simms , Cornell , Khattam ] ;
46159: LD_ADDR_VAR 0 1
46163: PUSH
46164: LD_INT 22
46166: PUSH
46167: LD_EXP 6
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 25
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PPUSH
46190: CALL_OW 69
46194: PUSH
46195: LD_EXP 24
46199: PUSH
46200: LD_EXP 25
46204: PUSH
46205: LD_EXP 26
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: LIST
46214: DIFF
46215: ST_TO_ADDR
// if temp_list = 0 then
46216: LD_VAR 0 1
46220: PUSH
46221: LD_INT 0
46223: EQUAL
46224: IFFALSE 46294
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) diff ( GetApes ( americans ) ^ [ Simms , Cornell , Khattam ] ) ;
46226: LD_ADDR_VAR 0 1
46230: PUSH
46231: LD_INT 22
46233: PUSH
46234: LD_EXP 6
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 21
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PPUSH
46257: CALL_OW 69
46261: PUSH
46262: LD_EXP 6
46266: PPUSH
46267: CALL 43816 0 1
46271: PUSH
46272: LD_EXP 24
46276: PUSH
46277: LD_EXP 25
46281: PUSH
46282: LD_EXP 26
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: LIST
46291: ADD
46292: DIFF
46293: ST_TO_ADDR
// if temp_list > 0 then
46294: LD_VAR 0 1
46298: PUSH
46299: LD_INT 0
46301: GREATER
46302: IFFALSE 46357
// if GetSex ( temp_list [ 1 ] ) = sex_male then
46304: LD_VAR 0 1
46308: PUSH
46309: LD_INT 1
46311: ARRAY
46312: PPUSH
46313: CALL_OW 258
46317: PUSH
46318: LD_INT 1
46320: EQUAL
46321: IFFALSE 46341
// SayRadio ( temp_list [ 1 ] , D4-SomeM-1 ) else
46323: LD_VAR 0 1
46327: PUSH
46328: LD_INT 1
46330: ARRAY
46331: PPUSH
46332: LD_STRING D4-SomeM-1
46334: PPUSH
46335: CALL_OW 94
46339: GO 46357
// SayRadio ( temp_list [ 1 ] , D4-SomeF-1 ) ;
46341: LD_VAR 0 1
46345: PUSH
46346: LD_INT 1
46348: ARRAY
46349: PPUSH
46350: LD_STRING D4-SomeF-1
46352: PPUSH
46353: CALL_OW 94
// SayRadio ( Simms , D4-Sim-1 ) ;
46357: LD_EXP 24
46361: PPUSH
46362: LD_STRING D4-Sim-1
46364: PPUSH
46365: CALL_OW 94
// dwait ( 0 0$0.5 ) ;
46369: LD_INT 18
46371: PPUSH
46372: CALL_OW 68
// YouLost ( PlayerSeen ) ;
46376: LD_STRING PlayerSeen
46378: PPUSH
46379: CALL_OW 104
// DialogueOff ;
46383: CALL_OW 7
// end ; until false ;
46387: LD_INT 0
46389: IFFALSE 45928
// end ;
46391: PPOPN 2
46393: END
// every 0 0$1 + 0 0$0.9 do var vehicle ;
46394: GO 46396
46396: DISABLE
46397: LD_INT 0
46399: PPUSH
// begin InitUc ;
46400: CALL_OW 18
// InitVc ;
46404: CALL_OW 20
// uc_side = americans ;
46408: LD_ADDR_OWVAR 20
46412: PUSH
46413: LD_EXP 6
46417: ST_TO_ADDR
// uc_nation = nation_american ;
46418: LD_ADDR_OWVAR 21
46422: PUSH
46423: LD_INT 1
46425: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
46426: LD_ADDR_OWVAR 37
46430: PUSH
46431: LD_INT 2
46433: ST_TO_ADDR
// vc_control = control_manual ;
46434: LD_ADDR_OWVAR 38
46438: PUSH
46439: LD_INT 1
46441: ST_TO_ADDR
// vc_engine = engine_siberite ;
46442: LD_ADDR_OWVAR 39
46446: PUSH
46447: LD_INT 3
46449: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
46450: LD_ADDR_OWVAR 40
46454: PUSH
46455: LD_INT 2
46457: ST_TO_ADDR
// vehicle = CreateVehicle ;
46458: LD_ADDR_VAR 0 1
46462: PUSH
46463: CALL_OW 45
46467: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , vehicle ) ;
46468: LD_EXP 27
46472: PPUSH
46473: LD_VAR 0 1
46477: PPUSH
46478: CALL_OW 52
// wait ( Rand ( 0 0$20 , 0 0$30 ) ) ;
46482: LD_INT 700
46484: PPUSH
46485: LD_INT 1050
46487: PPUSH
46488: CALL_OW 12
46492: PPUSH
46493: CALL_OW 67
// while not PlaceUnitXYR ( vehicle , 98 , 30 , 2 , false ) do
46497: LD_VAR 0 1
46501: PPUSH
46502: LD_INT 98
46504: PPUSH
46505: LD_INT 30
46507: PPUSH
46508: LD_INT 2
46510: PPUSH
46511: LD_INT 0
46513: PPUSH
46514: CALL_OW 50
46518: NOT
46519: IFFALSE 46530
// wait ( 0 0$2 ) ;
46521: LD_INT 70
46523: PPUSH
46524: CALL_OW 67
46528: GO 46497
// while IsPlaced ( Joan ) do
46530: LD_EXP 27
46534: PPUSH
46535: CALL_OW 305
46539: IFFALSE 46606
// begin wait ( 0 0$1 ) ;
46541: LD_INT 35
46543: PPUSH
46544: CALL_OW 67
// if GetDistUnitXY ( Joan , 56 , 3 ) > 1 then
46548: LD_EXP 27
46552: PPUSH
46553: LD_INT 56
46555: PPUSH
46556: LD_INT 3
46558: PPUSH
46559: CALL_OW 297
46563: PUSH
46564: LD_INT 1
46566: GREATER
46567: IFFALSE 46586
// ComMoveXY ( Joan , 56 , 3 ) else
46569: LD_EXP 27
46573: PPUSH
46574: LD_INT 56
46576: PPUSH
46577: LD_INT 3
46579: PPUSH
46580: CALL_OW 111
46584: GO 46604
// begin DestroyUnit ( Joan ) ;
46586: LD_EXP 27
46590: PPUSH
46591: CALL_OW 65
// DestroyUnit ( vehicle ) ;
46595: LD_VAR 0 1
46599: PPUSH
46600: CALL_OW 65
// end ; end ;
46604: GO 46530
// end ;
46606: PPOPN 1
46608: END
// every 0 0$1 + 0 0$0.1 do var i , temp_unit , temp_list , temp_list_2 ; var cargo_bay , special_player_units , scout , crate_hex ;
46609: GO 46611
46611: DISABLE
46612: LD_INT 0
46614: PPUSH
46615: PPUSH
46616: PPUSH
46617: PPUSH
46618: PPUSH
46619: PPUSH
46620: PPUSH
46621: PPUSH
// begin special_player_units = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ;
46622: LD_ADDR_VAR 0 6
46626: PUSH
46627: LD_EXP 9
46631: PUSH
46632: LD_EXP 10
46636: PUSH
46637: LD_EXP 11
46641: PUSH
46642: LD_EXP 12
46646: PUSH
46647: LD_EXP 13
46651: PUSH
46652: LD_EXP 14
46656: PUSH
46657: LD_EXP 15
46661: PUSH
46662: LD_EXP 16
46666: PUSH
46667: LD_EXP 17
46671: PUSH
46672: LD_EXP 18
46676: PUSH
46677: LD_EXP 19
46681: PUSH
46682: LD_EXP 20
46686: PUSH
46687: LD_EXP 21
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: ST_TO_ADDR
// InitUc ;
46707: CALL_OW 18
// InitVc ;
46711: CALL_OW 20
// uc_side = russians ;
46715: LD_ADDR_OWVAR 20
46719: PUSH
46720: LD_EXP 3
46724: ST_TO_ADDR
// uc_nation = nation_russian ;
46725: LD_ADDR_OWVAR 21
46729: PUSH
46730: LD_INT 3
46732: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
46733: LD_ADDR_OWVAR 37
46737: PUSH
46738: LD_INT 22
46740: ST_TO_ADDR
// vc_engine = engine_siberite ;
46741: LD_ADDR_OWVAR 39
46745: PUSH
46746: LD_INT 3
46748: ST_TO_ADDR
// vc_control = control_computer ;
46749: LD_ADDR_OWVAR 38
46753: PUSH
46754: LD_INT 3
46756: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
46757: LD_ADDR_OWVAR 40
46761: PUSH
46762: LD_INT 51
46764: ST_TO_ADDR
// cargo_bay = CreateVehicle ;
46765: LD_ADDR_VAR 0 5
46769: PUSH
46770: CALL_OW 45
46774: ST_TO_ADDR
// SetCargo ( cargo_bay , mat_cans , Rand ( 2 , 5 ) * 10 ) ;
46775: LD_VAR 0 5
46779: PPUSH
46780: LD_INT 1
46782: PPUSH
46783: LD_INT 2
46785: PPUSH
46786: LD_INT 5
46788: PPUSH
46789: CALL_OW 12
46793: PUSH
46794: LD_INT 10
46796: MUL
46797: PPUSH
46798: CALL_OW 290
// SetDir ( cargo_bay , 0 ) ;
46802: LD_VAR 0 5
46806: PPUSH
46807: LD_INT 0
46809: PPUSH
46810: CALL_OW 233
// PlaceUnitXY ( cargo_bay , 103 , 116 , false ) ;
46814: LD_VAR 0 5
46818: PPUSH
46819: LD_INT 103
46821: PPUSH
46822: LD_INT 116
46824: PPUSH
46825: LD_INT 0
46827: PPUSH
46828: CALL_OW 48
// crate_hex = RandHexXYR ( 122 , 93 , 4 , false ) ;
46832: LD_ADDR_VAR 0 8
46836: PUSH
46837: LD_INT 122
46839: PPUSH
46840: LD_INT 93
46842: PPUSH
46843: LD_INT 4
46845: PPUSH
46846: LD_INT 0
46848: PPUSH
46849: CALL_OW 17
46853: ST_TO_ADDR
// CreateCratesXY ( Rand ( 3 , 5 ) , crate_hex [ 1 ] , crate_hex [ 2 ] , false ) ;
46854: LD_INT 3
46856: PPUSH
46857: LD_INT 5
46859: PPUSH
46860: CALL_OW 12
46864: PPUSH
46865: LD_VAR 0 8
46869: PUSH
46870: LD_INT 1
46872: ARRAY
46873: PPUSH
46874: LD_VAR 0 8
46878: PUSH
46879: LD_INT 2
46881: ARRAY
46882: PPUSH
46883: LD_INT 0
46885: PPUSH
46886: CALL_OW 54
// ComMoveXY ( cargo_bay , 122 , 93 ) ;
46890: LD_VAR 0 5
46894: PPUSH
46895: LD_INT 122
46897: PPUSH
46898: LD_INT 93
46900: PPUSH
46901: CALL_OW 111
// AddComStand ( cargo_bay ) ;
46905: LD_VAR 0 5
46909: PPUSH
46910: CALL_OW 225
// i = Rand ( 1 1$30 , 2 2$0 ) ;
46914: LD_ADDR_VAR 0 1
46918: PUSH
46919: LD_INT 3150
46921: PPUSH
46922: LD_INT 4200
46924: PPUSH
46925: CALL_OW 12
46929: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
46930: LD_INT 18
46932: PPUSH
46933: CALL_OW 67
// i = i - 0 0$0.5 ;
46937: LD_ADDR_VAR 0 1
46941: PUSH
46942: LD_VAR 0 1
46946: PUSH
46947: LD_INT 18
46949: MINUS
46950: ST_TO_ADDR
// until i <= 0 0$0 or See ( you , cargo_bay ) ;
46951: LD_VAR 0 1
46955: PUSH
46956: LD_INT 0
46958: LESSEQUAL
46959: PUSH
46960: LD_EXP 2
46964: PPUSH
46965: LD_VAR 0 5
46969: PPUSH
46970: CALL_OW 292
46974: OR
46975: IFFALSE 46930
// while not See ( you , cargo_bay ) do
46977: LD_EXP 2
46981: PPUSH
46982: LD_VAR 0 5
46986: PPUSH
46987: CALL_OW 292
46991: NOT
46992: IFFALSE 47064
// begin wait ( 0 0$0.5 ) ;
46994: LD_INT 18
46996: PPUSH
46997: CALL_OW 67
// temp_unit = NearestUnitToUnit ( FilterAllUnits ( [ f_side , you ] ) , cargo_bay ) ;
47001: LD_ADDR_VAR 0 2
47005: PUSH
47006: LD_INT 22
47008: PUSH
47009: LD_EXP 2
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PPUSH
47018: CALL_OW 69
47022: PPUSH
47023: LD_VAR 0 5
47027: PPUSH
47028: CALL_OW 74
47032: ST_TO_ADDR
// ComMoveXY ( cargo_bay , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
47033: LD_VAR 0 5
47037: PPUSH
47038: LD_VAR 0 2
47042: PPUSH
47043: CALL_OW 250
47047: PPUSH
47048: LD_VAR 0 2
47052: PPUSH
47053: CALL_OW 251
47057: PPUSH
47058: CALL_OW 111
// end ;
47062: GO 46977
// CenterOnUnits ( cargo_bay ) ;
47064: LD_VAR 0 5
47068: PPUSH
47069: CALL_OW 85
// DialogueOn ;
47073: CALL_OW 6
// if IsOk ( Oswald ) then
47077: LD_EXP 11
47081: PPUSH
47082: CALL_OW 302
47086: IFFALSE 47122
// begin if oswald_is_substitute then
47088: LD_EXP 80
47092: IFFALSE 47108
// Say ( Oswald , D2-Os_alt-1 ) else
47094: LD_EXP 11
47098: PPUSH
47099: LD_STRING D2-Os_alt-1
47101: PPUSH
47102: CALL_OW 88
47106: GO 47120
// Say ( Oswald , D2-Os-1 ) ;
47108: LD_EXP 11
47112: PPUSH
47113: LD_STRING D2-Os-1
47115: PPUSH
47116: CALL_OW 88
// end else
47120: GO 47354
// if IsOk ( Olaf ) then
47122: LD_EXP 16
47126: PPUSH
47127: CALL_OW 302
47131: IFFALSE 47147
// Say ( Olaf , D2-Olaf-1 ) else
47133: LD_EXP 16
47137: PPUSH
47138: LD_STRING D2-Olaf-1
47140: PPUSH
47141: CALL_OW 88
47145: GO 47354
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ special_player_units ) ;
47147: LD_ADDR_VAR 0 3
47151: PUSH
47152: LD_INT 22
47154: PUSH
47155: LD_EXP 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 21
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PPUSH
47178: CALL_OW 69
47182: PUSH
47183: LD_EXP 2
47187: PPUSH
47188: CALL 43816 0 1
47192: PUSH
47193: LD_VAR 0 6
47197: ADD
47198: DIFF
47199: ST_TO_ADDR
// if temp_list > 0 then
47200: LD_VAR 0 3
47204: PUSH
47205: LD_INT 0
47207: GREATER
47208: IFFALSE 47226
// temp_unit = temp_list [ 1 ] else
47210: LD_ADDR_VAR 0 2
47214: PUSH
47215: LD_VAR 0 3
47219: PUSH
47220: LD_INT 1
47222: ARRAY
47223: ST_TO_ADDR
47224: GO 47313
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ Heike ) ;
47226: LD_ADDR_VAR 0 3
47230: PUSH
47231: LD_INT 22
47233: PUSH
47234: LD_EXP 2
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 21
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PPUSH
47257: CALL_OW 69
47261: PUSH
47262: LD_EXP 2
47266: PPUSH
47267: CALL 43816 0 1
47271: PUSH
47272: LD_EXP 9
47276: ADD
47277: DIFF
47278: ST_TO_ADDR
// if temp_list > 0 then
47279: LD_VAR 0 3
47283: PUSH
47284: LD_INT 0
47286: GREATER
47287: IFFALSE 47305
// temp_unit = temp_list [ 1 ] else
47289: LD_ADDR_VAR 0 2
47293: PUSH
47294: LD_VAR 0 3
47298: PUSH
47299: LD_INT 1
47301: ARRAY
47302: ST_TO_ADDR
47303: GO 47313
// temp_unit = 0 ;
47305: LD_ADDR_VAR 0 2
47309: PUSH
47310: LD_INT 0
47312: ST_TO_ADDR
// end ; if GetSex ( temp_unit ) = sex_male then
47313: LD_VAR 0 2
47317: PPUSH
47318: CALL_OW 258
47322: PUSH
47323: LD_INT 1
47325: EQUAL
47326: IFFALSE 47342
// Say ( temp_unit , D2-SomeM-1 ) else
47328: LD_VAR 0 2
47332: PPUSH
47333: LD_STRING D2-SomeM-1
47335: PPUSH
47336: CALL_OW 88
47340: GO 47354
// Say ( temp_unit , D2-SomeF-1 ) ;
47342: LD_VAR 0 2
47346: PPUSH
47347: LD_STRING D2-SomeF-1
47349: PPUSH
47350: CALL_OW 88
// end ; Say ( Heike , D2-H-1 ) ;
47354: LD_EXP 9
47358: PPUSH
47359: LD_STRING D2-H-1
47361: PPUSH
47362: CALL_OW 88
// if IsOk ( Kowalski ) then
47366: LD_EXP 13
47370: PPUSH
47371: CALL_OW 302
47375: IFFALSE 47403
// begin Say ( Kowalski , D2-Ko-a-1 ) ;
47377: LD_EXP 13
47381: PPUSH
47382: LD_STRING D2-Ko-a-1
47384: PPUSH
47385: CALL_OW 88
// Say ( Heike , D2-H-a-2 ) ;
47389: LD_EXP 9
47393: PPUSH
47394: LD_STRING D2-H-a-2
47396: PPUSH
47397: CALL_OW 88
// end else
47401: GO 47415
// begin Say ( Heike , D2-H-b-2 ) ;
47403: LD_EXP 9
47407: PPUSH
47408: LD_STRING D2-H-b-2
47410: PPUSH
47411: CALL_OW 88
// end ; dwait ( 0 0$0.2 ) ;
47415: LD_INT 7
47417: PPUSH
47418: CALL_OW 68
// temp_list_2 = FilterAllUnits ( [ f_side , you ] ) diff ( GetApes ( you ) ^ Heike ) ;
47422: LD_ADDR_VAR 0 4
47426: PUSH
47427: LD_INT 22
47429: PUSH
47430: LD_EXP 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PPUSH
47439: CALL_OW 69
47443: PUSH
47444: LD_EXP 2
47448: PPUSH
47449: CALL 43816 0 1
47453: PUSH
47454: LD_EXP 9
47458: ADD
47459: DIFF
47460: ST_TO_ADDR
// if UnitFilter ( temp_list_2 , [ f_class , class_soldier ] ) = 0 then
47461: LD_VAR 0 4
47465: PPUSH
47466: LD_INT 25
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PPUSH
47476: CALL_OW 72
47480: PUSH
47481: LD_INT 0
47483: EQUAL
47484: IFFALSE 47499
// temp_list = [ sel_change_class ] else
47486: LD_ADDR_VAR 0 3
47490: PUSH
47491: LD_INT -5
47493: PUSH
47494: EMPTY
47495: LIST
47496: ST_TO_ADDR
47497: GO 47510
// temp_list = [ sel_dont_change_class ] ;
47499: LD_ADDR_VAR 0 3
47503: PUSH
47504: LD_INT -6
47506: PUSH
47507: EMPTY
47508: LIST
47509: ST_TO_ADDR
// temp_list = CharacterSelection (  , 1 , 1 , [ sel_dont_change_class , sel_not_hired , sel_not_changeable , Heike , sel_changeable ] ^ temp_list ^ temp_list_2 , [ [ class_soldier , 1 ] ] ) ;
47510: LD_ADDR_VAR 0 3
47514: PUSH
47515: LD_STRING 
47517: PPUSH
47518: LD_INT 1
47520: PPUSH
47521: LD_INT 1
47523: PPUSH
47524: LD_INT -6
47526: PUSH
47527: LD_INT -2
47529: PUSH
47530: LD_INT -4
47532: PUSH
47533: LD_EXP 9
47537: PUSH
47538: LD_INT -3
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: PUSH
47548: LD_VAR 0 3
47552: ADD
47553: PUSH
47554: LD_VAR 0 4
47558: ADD
47559: PPUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: EMPTY
47571: LIST
47572: PPUSH
47573: CALL_OW 42
47577: ST_TO_ADDR
// temp_unit = temp_list [ 1 ] ;
47578: LD_ADDR_VAR 0 2
47582: PUSH
47583: LD_VAR 0 3
47587: PUSH
47588: LD_INT 1
47590: ARRAY
47591: ST_TO_ADDR
// scout = temp_unit ;
47592: LD_ADDR_VAR 0 7
47596: PUSH
47597: LD_VAR 0 2
47601: ST_TO_ADDR
// dwait ( 0 0$0.2 ) ;
47602: LD_INT 7
47604: PPUSH
47605: CALL_OW 68
// case temp_unit of Sonya :
47609: LD_VAR 0 2
47613: PUSH
47614: LD_EXP 10
47618: DOUBLE
47619: EQUAL
47620: IFTRUE 47624
47622: GO 47639
47624: POP
// Say ( temp_unit , D2-So-1 ) ; Oswald :
47625: LD_VAR 0 2
47629: PPUSH
47630: LD_STRING D2-So-1
47632: PPUSH
47633: CALL_OW 88
47637: GO 48008
47639: LD_EXP 11
47643: DOUBLE
47644: EQUAL
47645: IFTRUE 47649
47647: GO 47684
47649: POP
// begin if oswald_is_substitute then
47650: LD_EXP 80
47654: IFFALSE 47670
// Say ( temp_unit , D2-Os_alt-2 ) else
47656: LD_VAR 0 2
47660: PPUSH
47661: LD_STRING D2-Os_alt-2
47663: PPUSH
47664: CALL_OW 88
47668: GO 47682
// Say ( temp_unit , D2-Os-2 ) ;
47670: LD_VAR 0 2
47674: PPUSH
47675: LD_STRING D2-Os-2
47677: PPUSH
47678: CALL_OW 88
// end ; Ralph :
47682: GO 48008
47684: LD_EXP 12
47688: DOUBLE
47689: EQUAL
47690: IFTRUE 47694
47692: GO 47709
47694: POP
// Say ( temp_unit , D2-Ra-1 ) ; Kowalski :
47695: LD_VAR 0 2
47699: PPUSH
47700: LD_STRING D2-Ra-1
47702: PPUSH
47703: CALL_OW 88
47707: GO 48008
47709: LD_EXP 13
47713: DOUBLE
47714: EQUAL
47715: IFTRUE 47719
47717: GO 47734
47719: POP
// Say ( temp_unit , D2-Ko-1 ) ; Evelyn :
47720: LD_VAR 0 2
47724: PPUSH
47725: LD_STRING D2-Ko-1
47727: PPUSH
47728: CALL_OW 88
47732: GO 48008
47734: LD_EXP 14
47738: DOUBLE
47739: EQUAL
47740: IFTRUE 47744
47742: GO 47759
47744: POP
// Say ( temp_unit , D2-Ev-1 ) ; Suze :
47745: LD_VAR 0 2
47749: PPUSH
47750: LD_STRING D2-Ev-1
47752: PPUSH
47753: CALL_OW 88
47757: GO 48008
47759: LD_EXP 15
47763: DOUBLE
47764: EQUAL
47765: IFTRUE 47769
47767: GO 47784
47769: POP
// Say ( temp_unit , D2-Su-1 ) ; Olaf :
47770: LD_VAR 0 2
47774: PPUSH
47775: LD_STRING D2-Su-1
47777: PPUSH
47778: CALL_OW 88
47782: GO 48008
47784: LD_EXP 16
47788: DOUBLE
47789: EQUAL
47790: IFTRUE 47794
47792: GO 47809
47794: POP
// Say ( temp_unit , D2-Olaf-2 ) ; Kurt :
47795: LD_VAR 0 2
47799: PPUSH
47800: LD_STRING D2-Olaf-2
47802: PPUSH
47803: CALL_OW 88
47807: GO 48008
47809: LD_EXP 17
47813: DOUBLE
47814: EQUAL
47815: IFTRUE 47819
47817: GO 47854
47819: POP
// begin if kurt_is_substitute then
47820: LD_EXP 81
47824: IFFALSE 47840
// Say ( temp_unit , D2-Ku_alt-1 ) else
47826: LD_VAR 0 2
47830: PPUSH
47831: LD_STRING D2-Ku_alt-1
47833: PPUSH
47834: CALL_OW 88
47838: GO 47852
// Say ( temp_unit , D2-Ku-1 ) ;
47840: LD_VAR 0 2
47844: PPUSH
47845: LD_STRING D2-Ku-1
47847: PPUSH
47848: CALL_OW 88
// end ; Dwayne :
47852: GO 48008
47854: LD_EXP 18
47858: DOUBLE
47859: EQUAL
47860: IFTRUE 47864
47862: GO 47879
47864: POP
// Say ( temp_unit , D2-Dw-1 ) ; MarkB :
47865: LD_VAR 0 2
47869: PPUSH
47870: LD_STRING D2-Dw-1
47872: PPUSH
47873: CALL_OW 88
47877: GO 48008
47879: LD_EXP 19
47883: DOUBLE
47884: EQUAL
47885: IFTRUE 47889
47887: GO 47904
47889: POP
// Say ( temp_unit , D2-Ma-1 ) ; Aviradze :
47890: LD_VAR 0 2
47894: PPUSH
47895: LD_STRING D2-Ma-1
47897: PPUSH
47898: CALL_OW 88
47902: GO 48008
47904: LD_EXP 20
47908: DOUBLE
47909: EQUAL
47910: IFTRUE 47914
47912: GO 47941
47914: POP
// begin Say ( temp_unit , D2-Av-1 ) ;
47915: LD_VAR 0 2
47919: PPUSH
47920: LD_STRING D2-Av-1
47922: PPUSH
47923: CALL_OW 88
// Say ( Heike , D2-H-3 ) ;
47927: LD_EXP 9
47931: PPUSH
47932: LD_STRING D2-H-3
47934: PPUSH
47935: CALL_OW 88
// end ; Swansson :
47939: GO 48008
47941: LD_EXP 21
47945: DOUBLE
47946: EQUAL
47947: IFTRUE 47951
47949: GO 47966
47951: POP
// Say ( temp_unit , D2-Sw-1 ) ; else
47952: LD_VAR 0 2
47956: PPUSH
47957: LD_STRING D2-Sw-1
47959: PPUSH
47960: CALL_OW 88
47964: GO 48008
47966: POP
// begin if GetSex ( temp_unit ) = sex_male then
47967: LD_VAR 0 2
47971: PPUSH
47972: CALL_OW 258
47976: PUSH
47977: LD_INT 1
47979: EQUAL
47980: IFFALSE 47996
// Say ( temp_unit , D2-SomeM-2 ) else
47982: LD_VAR 0 2
47986: PPUSH
47987: LD_STRING D2-SomeM-2
47989: PPUSH
47990: CALL_OW 88
47994: GO 48008
// Say ( temp_unit , D2-SomeF-2 ) ;
47996: LD_VAR 0 2
48000: PPUSH
48001: LD_STRING D2-SomeF-2
48003: PPUSH
48004: CALL_OW 88
// end ; end ; DialogueOff ;
48008: CALL_OW 7
// SetSide ( scout , scout_side ) ;
48012: LD_VAR 0 7
48016: PPUSH
48017: LD_EXP 7
48021: PPUSH
48022: CALL_OW 235
// repeat wait ( 0 0$0.7 ) ;
48026: LD_INT 24
48028: PPUSH
48029: CALL_OW 67
// if IsPlaced ( scout ) then
48033: LD_VAR 0 7
48037: PPUSH
48038: CALL_OW 305
48042: IFFALSE 48147
// case GetType ( IsInUnit ( scout ) ) of unit_building :
48044: LD_VAR 0 7
48048: PPUSH
48049: CALL_OW 310
48053: PPUSH
48054: CALL_OW 247
48058: PUSH
48059: LD_INT 3
48061: DOUBLE
48062: EQUAL
48063: IFTRUE 48067
48065: GO 48079
48067: POP
// ComExitBuilding ( scout ) ; unit_vehicle :
48068: LD_VAR 0 7
48072: PPUSH
48073: CALL_OW 122
48077: GO 48147
48079: LD_INT 2
48081: DOUBLE
48082: EQUAL
48083: IFTRUE 48087
48085: GO 48099
48087: POP
// ComExitVehicle ( scout ) ; else
48088: LD_VAR 0 7
48092: PPUSH
48093: CALL_OW 121
48097: GO 48147
48099: POP
// begin if GetDistUnitXY ( scout , 143 , 117 ) > 1 then
48100: LD_VAR 0 7
48104: PPUSH
48105: LD_INT 143
48107: PPUSH
48108: LD_INT 117
48110: PPUSH
48111: CALL_OW 297
48115: PUSH
48116: LD_INT 1
48118: GREATER
48119: IFFALSE 48138
// ComMoveXY ( scout , 143 , 117 ) else
48121: LD_VAR 0 7
48125: PPUSH
48126: LD_INT 143
48128: PPUSH
48129: LD_INT 117
48131: PPUSH
48132: CALL_OW 111
48136: GO 48147
// RemoveUnit ( scout ) ;
48138: LD_VAR 0 7
48142: PPUSH
48143: CALL_OW 64
// end ; end ; if IsPlaced ( cargo_bay ) then
48147: LD_VAR 0 5
48151: PPUSH
48152: CALL_OW 305
48156: IFFALSE 48253
// if GetResourceAmountXY ( crate_hex [ 1 ] , crate_hex [ 2 ] ) > 0 then
48158: LD_VAR 0 8
48162: PUSH
48163: LD_INT 1
48165: ARRAY
48166: PPUSH
48167: LD_VAR 0 8
48171: PUSH
48172: LD_INT 2
48174: ARRAY
48175: PPUSH
48176: CALL_OW 284
48180: PUSH
48181: LD_INT 0
48183: GREATER
48184: IFFALSE 48215
// ComGet ( cargo_bay , crate_hex [ 1 ] , crate_hex [ 2 ] ) else
48186: LD_VAR 0 5
48190: PPUSH
48191: LD_VAR 0 8
48195: PUSH
48196: LD_INT 1
48198: ARRAY
48199: PPUSH
48200: LD_VAR 0 8
48204: PUSH
48205: LD_INT 2
48207: ARRAY
48208: PPUSH
48209: CALL_OW 160
48213: GO 48253
// if not IsInArea ( cargo_bay , ru_enter_area ) then
48215: LD_VAR 0 5
48219: PPUSH
48220: LD_INT 10
48222: PPUSH
48223: CALL_OW 308
48227: NOT
48228: IFFALSE 48244
// ComMoveToArea ( cargo_bay , ru_enter_area ) else
48230: LD_VAR 0 5
48234: PPUSH
48235: LD_INT 10
48237: PPUSH
48238: CALL_OW 113
48242: GO 48253
// DestroyUnit ( cargo_bay ) ;
48244: LD_VAR 0 5
48248: PPUSH
48249: CALL_OW 65
// until not IsPlaced ( scout ) and not IsPlaced ( cargo_bay ) ;
48253: LD_VAR 0 7
48257: PPUSH
48258: CALL_OW 305
48262: NOT
48263: PUSH
48264: LD_VAR 0 5
48268: PPUSH
48269: CALL_OW 305
48273: NOT
48274: AND
48275: IFFALSE 48026
// wait ( Rand ( 5 5$0 , 6 6$0 ) ) ;
48277: LD_INT 10500
48279: PPUSH
48280: LD_INT 12600
48282: PPUSH
48283: CALL_OW 12
48287: PPUSH
48288: CALL_OW 67
// SetDir ( scout , 5 ) ;
48292: LD_VAR 0 7
48296: PPUSH
48297: LD_INT 5
48299: PPUSH
48300: CALL_OW 233
// i = 1 ;
48304: LD_ADDR_VAR 0 1
48308: PUSH
48309: LD_INT 1
48311: ST_TO_ADDR
// while not IsPlaced ( scout ) do
48312: LD_VAR 0 7
48316: PPUSH
48317: CALL_OW 305
48321: NOT
48322: IFFALSE 48370
// begin PlaceUnitXYR ( scout , 143 , 117 , i , false ) ;
48324: LD_VAR 0 7
48328: PPUSH
48329: LD_INT 143
48331: PPUSH
48332: LD_INT 117
48334: PPUSH
48335: LD_VAR 0 1
48339: PPUSH
48340: LD_INT 0
48342: PPUSH
48343: CALL_OW 50
// i = i + 1 ;
48347: LD_ADDR_VAR 0 1
48351: PUSH
48352: LD_VAR 0 1
48356: PUSH
48357: LD_INT 1
48359: PLUS
48360: ST_TO_ADDR
// wait ( 0 0$2 ) ;
48361: LD_INT 70
48363: PPUSH
48364: CALL_OW 67
// end ;
48368: GO 48312
// while not See ( you , scout ) do
48370: LD_EXP 2
48374: PPUSH
48375: LD_VAR 0 7
48379: PPUSH
48380: CALL_OW 292
48384: NOT
48385: IFFALSE 48457
// begin wait ( 0 0$1 ) ;
48387: LD_INT 35
48389: PPUSH
48390: CALL_OW 67
// temp_unit = NearestUnitToUnit ( FilterAllUnits ( [ f_side , you ] ) , scout ) ;
48394: LD_ADDR_VAR 0 2
48398: PUSH
48399: LD_INT 22
48401: PUSH
48402: LD_EXP 2
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PPUSH
48411: CALL_OW 69
48415: PPUSH
48416: LD_VAR 0 7
48420: PPUSH
48421: CALL_OW 74
48425: ST_TO_ADDR
// ComMoveXY ( scout , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
48426: LD_VAR 0 7
48430: PPUSH
48431: LD_VAR 0 2
48435: PPUSH
48436: CALL_OW 250
48440: PPUSH
48441: LD_VAR 0 2
48445: PPUSH
48446: CALL_OW 251
48450: PPUSH
48451: CALL_OW 111
// end ;
48455: GO 48370
// CenterOnUnits ( scout ) ;
48457: LD_VAR 0 7
48461: PPUSH
48462: CALL_OW 85
// SetSide ( scout , you ) ;
48466: LD_VAR 0 7
48470: PPUSH
48471: LD_EXP 2
48475: PPUSH
48476: CALL_OW 235
// ComStop ( scout ) ;
48480: LD_VAR 0 7
48484: PPUSH
48485: CALL_OW 141
// DialogueOn ;
48489: CALL_OW 6
// Say ( Heike , D3-H-1 ) ;
48493: LD_EXP 9
48497: PPUSH
48498: LD_STRING D3-H-1
48500: PPUSH
48501: CALL_OW 88
// temp_unit = scout ;
48505: LD_ADDR_VAR 0 2
48509: PUSH
48510: LD_VAR 0 7
48514: ST_TO_ADDR
// case temp_unit of Sonya :
48515: LD_VAR 0 2
48519: PUSH
48520: LD_EXP 10
48524: DOUBLE
48525: EQUAL
48526: IFTRUE 48530
48528: GO 48545
48530: POP
// Say ( temp_unit , D3-So-1 ) ; Oswald :
48531: LD_VAR 0 2
48535: PPUSH
48536: LD_STRING D3-So-1
48538: PPUSH
48539: CALL_OW 88
48543: GO 48975
48545: LD_EXP 11
48549: DOUBLE
48550: EQUAL
48551: IFTRUE 48555
48553: GO 48590
48555: POP
// begin if oswald_is_substitute then
48556: LD_EXP 80
48560: IFFALSE 48576
// Say ( temp_unit , D3-Os_alt-1 ) else
48562: LD_VAR 0 2
48566: PPUSH
48567: LD_STRING D3-Os_alt-1
48569: PPUSH
48570: CALL_OW 88
48574: GO 48588
// Say ( temp_unit , D3-Os-1 ) ;
48576: LD_VAR 0 2
48580: PPUSH
48581: LD_STRING D3-Os-1
48583: PPUSH
48584: CALL_OW 88
// end ; Ralph :
48588: GO 48975
48590: LD_EXP 12
48594: DOUBLE
48595: EQUAL
48596: IFTRUE 48600
48598: GO 48664
48600: POP
// begin Say ( temp_unit , D3-Ra-1 ) ;
48601: LD_VAR 0 2
48605: PPUSH
48606: LD_STRING D3-Ra-1
48608: PPUSH
48609: CALL_OW 88
// if IsOk ( Sonya ) then
48613: LD_EXP 10
48617: PPUSH
48618: CALL_OW 302
48622: IFFALSE 48638
// Say ( Sonya , D3-So-2a ) else
48624: LD_EXP 10
48628: PPUSH
48629: LD_STRING D3-So-2a
48631: PPUSH
48632: CALL_OW 88
48636: GO 48650
// Say ( Heike , D3-H-2a ) ;
48638: LD_EXP 9
48642: PPUSH
48643: LD_STRING D3-H-2a
48645: PPUSH
48646: CALL_OW 88
// Say ( Ralph , D3-Ra-2 ) ;
48650: LD_EXP 12
48654: PPUSH
48655: LD_STRING D3-Ra-2
48657: PPUSH
48658: CALL_OW 88
// end ; Kowalski :
48662: GO 48975
48664: LD_EXP 13
48668: DOUBLE
48669: EQUAL
48670: IFTRUE 48674
48672: GO 48689
48674: POP
// Say ( temp_unit , D3-Ko-1 ) ; Evelyn :
48675: LD_VAR 0 2
48679: PPUSH
48680: LD_STRING D3-Ko-1
48682: PPUSH
48683: CALL_OW 88
48687: GO 48975
48689: LD_EXP 14
48693: DOUBLE
48694: EQUAL
48695: IFTRUE 48699
48697: GO 48714
48699: POP
// Say ( temp_unit , D3-Ev-1 ) ; Suze :
48700: LD_VAR 0 2
48704: PPUSH
48705: LD_STRING D3-Ev-1
48707: PPUSH
48708: CALL_OW 88
48712: GO 48975
48714: LD_EXP 15
48718: DOUBLE
48719: EQUAL
48720: IFTRUE 48724
48722: GO 48739
48724: POP
// Say ( temp_unit , D3-Su-1 ) ; Olaf :
48725: LD_VAR 0 2
48729: PPUSH
48730: LD_STRING D3-Su-1
48732: PPUSH
48733: CALL_OW 88
48737: GO 48975
48739: LD_EXP 16
48743: DOUBLE
48744: EQUAL
48745: IFTRUE 48749
48747: GO 48764
48749: POP
// Say ( temp_unit , D3-Olaf-1 ) ; Kurt :
48750: LD_VAR 0 2
48754: PPUSH
48755: LD_STRING D3-Olaf-1
48757: PPUSH
48758: CALL_OW 88
48762: GO 48975
48764: LD_EXP 17
48768: DOUBLE
48769: EQUAL
48770: IFTRUE 48774
48772: GO 48809
48774: POP
// begin if kurt_is_substitute then
48775: LD_EXP 81
48779: IFFALSE 48795
// Say ( temp_unit , D3-Ku_alt-1 ) else
48781: LD_VAR 0 2
48785: PPUSH
48786: LD_STRING D3-Ku_alt-1
48788: PPUSH
48789: CALL_OW 88
48793: GO 48807
// Say ( temp_unit , D3-Ku-1 ) ;
48795: LD_VAR 0 2
48799: PPUSH
48800: LD_STRING D3-Ku-1
48802: PPUSH
48803: CALL_OW 88
// end ; Dwayne :
48807: GO 48975
48809: LD_EXP 18
48813: DOUBLE
48814: EQUAL
48815: IFTRUE 48819
48817: GO 48834
48819: POP
// Say ( temp_unit , D3-Dw-1 ) ; MarkB :
48820: LD_VAR 0 2
48824: PPUSH
48825: LD_STRING D3-Dw-1
48827: PPUSH
48828: CALL_OW 88
48832: GO 48975
48834: LD_EXP 19
48838: DOUBLE
48839: EQUAL
48840: IFTRUE 48844
48842: GO 48859
48844: POP
// Say ( temp_unit , D3-Ma-1 ) ; Aviradze :
48845: LD_VAR 0 2
48849: PPUSH
48850: LD_STRING D3-Ma-1
48852: PPUSH
48853: CALL_OW 88
48857: GO 48975
48859: LD_EXP 20
48863: DOUBLE
48864: EQUAL
48865: IFTRUE 48869
48867: GO 48908
48869: POP
// begin Say ( temp_unit , D3-Av-1 ) ;
48870: LD_VAR 0 2
48874: PPUSH
48875: LD_STRING D3-Av-1
48877: PPUSH
48878: CALL_OW 88
// Say ( Heike , D3-H-2b ) ;
48882: LD_EXP 9
48886: PPUSH
48887: LD_STRING D3-H-2b
48889: PPUSH
48890: CALL_OW 88
// Say ( temp_unit , D3-Av-2 ) ;
48894: LD_VAR 0 2
48898: PPUSH
48899: LD_STRING D3-Av-2
48901: PPUSH
48902: CALL_OW 88
// end ; Swansson :
48906: GO 48975
48908: LD_EXP 21
48912: DOUBLE
48913: EQUAL
48914: IFTRUE 48918
48916: GO 48933
48918: POP
// Say ( temp_unit , D3-Sw-1 ) ; else
48919: LD_VAR 0 2
48923: PPUSH
48924: LD_STRING D3-Sw-1
48926: PPUSH
48927: CALL_OW 88
48931: GO 48975
48933: POP
// begin if GetSex ( temp_unit ) = sex_male then
48934: LD_VAR 0 2
48938: PPUSH
48939: CALL_OW 258
48943: PUSH
48944: LD_INT 1
48946: EQUAL
48947: IFFALSE 48963
// Say ( temp_unit , D3-SomeM-1 ) else
48949: LD_VAR 0 2
48953: PPUSH
48954: LD_STRING D3-SomeM-1
48956: PPUSH
48957: CALL_OW 88
48961: GO 48975
// Say ( temp_unit , D3-SomeF-1 ) ;
48963: LD_VAR 0 2
48967: PPUSH
48968: LD_STRING D3-SomeF-1
48970: PPUSH
48971: CALL_OW 88
// end ; end ; if SeeGreyArea ( you , Ru_base ) then
48975: LD_EXP 2
48979: PPUSH
48980: LD_INT 3
48982: PPUSH
48983: CALL_OW 452
48987: IFFALSE 49003
// begin Say ( Heike , D3-H-a-2 ) ;
48989: LD_EXP 9
48993: PPUSH
48994: LD_STRING D3-H-a-2
48996: PPUSH
48997: CALL_OW 88
// end else
49001: GO 49015
// begin Say ( Heike , D3-H-b-2 ) ;
49003: LD_EXP 9
49007: PPUSH
49008: LD_STRING D3-H-b-2
49010: PPUSH
49011: CALL_OW 88
// end ; case temp_unit of Sonya :
49015: LD_VAR 0 2
49019: PUSH
49020: LD_EXP 10
49024: DOUBLE
49025: EQUAL
49026: IFTRUE 49030
49028: GO 49045
49030: POP
// Say ( temp_unit , D3-So-2 ) ; Oswald :
49031: LD_VAR 0 2
49035: PPUSH
49036: LD_STRING D3-So-2
49038: PPUSH
49039: CALL_OW 88
49043: GO 49402
49045: LD_EXP 11
49049: DOUBLE
49050: EQUAL
49051: IFTRUE 49055
49053: GO 49090
49055: POP
// begin if oswald_is_substitute then
49056: LD_EXP 80
49060: IFFALSE 49076
// Say ( temp_unit , D3-Os_alt-2 ) else
49062: LD_VAR 0 2
49066: PPUSH
49067: LD_STRING D3-Os_alt-2
49069: PPUSH
49070: CALL_OW 88
49074: GO 49088
// Say ( temp_unit , D3-Os-2 ) ;
49076: LD_VAR 0 2
49080: PPUSH
49081: LD_STRING D3-Os-2
49083: PPUSH
49084: CALL_OW 88
// end ; Ralph :
49088: GO 49402
49090: LD_EXP 12
49094: DOUBLE
49095: EQUAL
49096: IFTRUE 49100
49098: GO 49115
49100: POP
// Say ( temp_unit , D3-Ra-3 ) ; Kowalski :
49101: LD_VAR 0 2
49105: PPUSH
49106: LD_STRING D3-Ra-3
49108: PPUSH
49109: CALL_OW 88
49113: GO 49402
49115: LD_EXP 13
49119: DOUBLE
49120: EQUAL
49121: IFTRUE 49125
49123: GO 49140
49125: POP
// Say ( temp_unit , D3-Ko-2 ) ; Evelyn :
49126: LD_VAR 0 2
49130: PPUSH
49131: LD_STRING D3-Ko-2
49133: PPUSH
49134: CALL_OW 88
49138: GO 49402
49140: LD_EXP 14
49144: DOUBLE
49145: EQUAL
49146: IFTRUE 49150
49148: GO 49165
49150: POP
// Say ( temp_unit , D3-Ev-2 ) ; Suze :
49151: LD_VAR 0 2
49155: PPUSH
49156: LD_STRING D3-Ev-2
49158: PPUSH
49159: CALL_OW 88
49163: GO 49402
49165: LD_EXP 15
49169: DOUBLE
49170: EQUAL
49171: IFTRUE 49175
49173: GO 49190
49175: POP
// Say ( temp_unit , D3-Su-2 ) ; Olaf :
49176: LD_VAR 0 2
49180: PPUSH
49181: LD_STRING D3-Su-2
49183: PPUSH
49184: CALL_OW 88
49188: GO 49402
49190: LD_EXP 16
49194: DOUBLE
49195: EQUAL
49196: IFTRUE 49200
49198: GO 49215
49200: POP
// Say ( temp_unit , D3-Olaf-2 ) ; Kurt :
49201: LD_VAR 0 2
49205: PPUSH
49206: LD_STRING D3-Olaf-2
49208: PPUSH
49209: CALL_OW 88
49213: GO 49402
49215: LD_EXP 17
49219: DOUBLE
49220: EQUAL
49221: IFTRUE 49225
49223: GO 49260
49225: POP
// begin if kurt_is_substitute then
49226: LD_EXP 81
49230: IFFALSE 49246
// Say ( temp_unit , D3-Ku_alt-2 ) else
49232: LD_VAR 0 2
49236: PPUSH
49237: LD_STRING D3-Ku_alt-2
49239: PPUSH
49240: CALL_OW 88
49244: GO 49258
// Say ( temp_unit , D3-Ku-2 ) ;
49246: LD_VAR 0 2
49250: PPUSH
49251: LD_STRING D3-Ku-2
49253: PPUSH
49254: CALL_OW 88
// end ; Dwayne :
49258: GO 49402
49260: LD_EXP 18
49264: DOUBLE
49265: EQUAL
49266: IFTRUE 49270
49268: GO 49285
49270: POP
// Say ( temp_unit , D3-Dw-2 ) ; MarkB :
49271: LD_VAR 0 2
49275: PPUSH
49276: LD_STRING D3-Dw-2
49278: PPUSH
49279: CALL_OW 88
49283: GO 49402
49285: LD_EXP 19
49289: DOUBLE
49290: EQUAL
49291: IFTRUE 49295
49293: GO 49310
49295: POP
// Say ( temp_unit , D3-Ma-2 ) ; Aviradze :
49296: LD_VAR 0 2
49300: PPUSH
49301: LD_STRING D3-Ma-2
49303: PPUSH
49304: CALL_OW 88
49308: GO 49402
49310: LD_EXP 20
49314: DOUBLE
49315: EQUAL
49316: IFTRUE 49320
49318: GO 49335
49320: POP
// Say ( temp_unit , D3-Av-3 ) ; Swansson :
49321: LD_VAR 0 2
49325: PPUSH
49326: LD_STRING D3-Av-3
49328: PPUSH
49329: CALL_OW 88
49333: GO 49402
49335: LD_EXP 21
49339: DOUBLE
49340: EQUAL
49341: IFTRUE 49345
49343: GO 49360
49345: POP
// Say ( temp_unit , D3-Sw-2 ) ; else
49346: LD_VAR 0 2
49350: PPUSH
49351: LD_STRING D3-Sw-2
49353: PPUSH
49354: CALL_OW 88
49358: GO 49402
49360: POP
// begin if GetSex ( temp_unit ) = sex_male then
49361: LD_VAR 0 2
49365: PPUSH
49366: CALL_OW 258
49370: PUSH
49371: LD_INT 1
49373: EQUAL
49374: IFFALSE 49390
// Say ( temp_unit , D3-SomeM-2 ) else
49376: LD_VAR 0 2
49380: PPUSH
49381: LD_STRING D3-SomeM-2
49383: PPUSH
49384: CALL_OW 88
49388: GO 49402
// Say ( temp_unit , D3-SomeF-2 ) ;
49390: LD_VAR 0 2
49394: PPUSH
49395: LD_STRING D3-SomeF-2
49397: PPUSH
49398: CALL_OW 88
// end ; end ; Say ( Heike , D3-H-3 ) ;
49402: LD_EXP 9
49406: PPUSH
49407: LD_STRING D3-H-3
49409: PPUSH
49410: CALL_OW 88
// temp_list = UnitFilter ( [ Sonya , Ralph , Kowalski , Suze , Olaf , Dwayne ] , [ f_ok ] ) ;
49414: LD_ADDR_VAR 0 3
49418: PUSH
49419: LD_EXP 10
49423: PUSH
49424: LD_EXP 12
49428: PUSH
49429: LD_EXP 13
49433: PUSH
49434: LD_EXP 15
49438: PUSH
49439: LD_EXP 16
49443: PUSH
49444: LD_EXP 18
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: PPUSH
49457: LD_INT 50
49459: PUSH
49460: EMPTY
49461: LIST
49462: PPUSH
49463: CALL_OW 72
49467: ST_TO_ADDR
// if temp_list > 0 then
49468: LD_VAR 0 3
49472: PUSH
49473: LD_INT 0
49475: GREATER
49476: IFFALSE 49707
// begin temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
49478: LD_ADDR_VAR 0 2
49482: PUSH
49483: LD_VAR 0 3
49487: PUSH
49488: LD_INT 1
49490: PPUSH
49491: LD_VAR 0 3
49495: PPUSH
49496: CALL_OW 12
49500: ARRAY
49501: ST_TO_ADDR
// case temp_unit of Sonya :
49502: LD_VAR 0 2
49506: PUSH
49507: LD_EXP 10
49511: DOUBLE
49512: EQUAL
49513: IFTRUE 49517
49515: GO 49532
49517: POP
// Say ( temp_unit , D3-So-3 ) ; Ralph :
49518: LD_VAR 0 2
49522: PPUSH
49523: LD_STRING D3-So-3
49525: PPUSH
49526: CALL_OW 88
49530: GO 49658
49532: LD_EXP 12
49536: DOUBLE
49537: EQUAL
49538: IFTRUE 49542
49540: GO 49557
49542: POP
// Say ( temp_unit , D3-Ra-4 ) ; Kowalski :
49543: LD_VAR 0 2
49547: PPUSH
49548: LD_STRING D3-Ra-4
49550: PPUSH
49551: CALL_OW 88
49555: GO 49658
49557: LD_EXP 13
49561: DOUBLE
49562: EQUAL
49563: IFTRUE 49567
49565: GO 49582
49567: POP
// Say ( temp_unit , D3-Ko-3 ) ; Suze :
49568: LD_VAR 0 2
49572: PPUSH
49573: LD_STRING D3-Ko-3
49575: PPUSH
49576: CALL_OW 88
49580: GO 49658
49582: LD_EXP 15
49586: DOUBLE
49587: EQUAL
49588: IFTRUE 49592
49590: GO 49607
49592: POP
// Say ( temp_unit , D3-Su-3 ) ; Olaf :
49593: LD_VAR 0 2
49597: PPUSH
49598: LD_STRING D3-Su-3
49600: PPUSH
49601: CALL_OW 88
49605: GO 49658
49607: LD_EXP 16
49611: DOUBLE
49612: EQUAL
49613: IFTRUE 49617
49615: GO 49632
49617: POP
// Say ( temp_unit , D3-Olaf-3 ) ; Dwayne :
49618: LD_VAR 0 2
49622: PPUSH
49623: LD_STRING D3-Olaf-3
49625: PPUSH
49626: CALL_OW 88
49630: GO 49658
49632: LD_EXP 18
49636: DOUBLE
49637: EQUAL
49638: IFTRUE 49642
49640: GO 49657
49642: POP
// Say ( temp_unit , D3-Dw-3 ) ; end ;
49643: LD_VAR 0 2
49647: PPUSH
49648: LD_STRING D3-Dw-3
49650: PPUSH
49651: CALL_OW 88
49655: GO 49658
49657: POP
// if temp_unit in [ Sonya , Olaf ] then
49658: LD_VAR 0 2
49662: PUSH
49663: LD_EXP 10
49667: PUSH
49668: LD_EXP 16
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: IN
49677: IFFALSE 49693
// Say ( Heike , D3-H-a-4 ) else
49679: LD_EXP 9
49683: PPUSH
49684: LD_STRING D3-H-a-4
49686: PPUSH
49687: CALL_OW 88
49691: GO 49705
// Say ( Heike , D3-H-b-4 ) ;
49693: LD_EXP 9
49697: PPUSH
49698: LD_STRING D3-H-b-4
49700: PPUSH
49701: CALL_OW 88
// end else
49705: GO 49719
// begin Say ( Heike , D3-H-c-4 ) ;
49707: LD_EXP 9
49711: PPUSH
49712: LD_STRING D3-H-c-4
49714: PPUSH
49715: CALL_OW 88
// end ; Say ( Heike , D3-H-5 ) ;
49719: LD_EXP 9
49723: PPUSH
49724: LD_STRING D3-H-5
49726: PPUSH
49727: CALL_OW 88
// if yashin_alive then
49731: LD_EXP 85
49735: IFFALSE 50136
// begin case temp_unit of Sonya :
49737: LD_VAR 0 2
49741: PUSH
49742: LD_EXP 10
49746: DOUBLE
49747: EQUAL
49748: IFTRUE 49752
49750: GO 49767
49752: POP
// Say ( temp_unit , D3-So-a-4 ) ; Oswald :
49753: LD_VAR 0 2
49757: PPUSH
49758: LD_STRING D3-So-a-4
49760: PPUSH
49761: CALL_OW 88
49765: GO 50124
49767: LD_EXP 11
49771: DOUBLE
49772: EQUAL
49773: IFTRUE 49777
49775: GO 49812
49777: POP
// begin if oswald_is_substitute then
49778: LD_EXP 80
49782: IFFALSE 49798
// Say ( temp_unit , D3-Os_alt-a-3 ) else
49784: LD_VAR 0 2
49788: PPUSH
49789: LD_STRING D3-Os_alt-a-3
49791: PPUSH
49792: CALL_OW 88
49796: GO 49810
// Say ( temp_unit , D3-Os-a-3 ) ;
49798: LD_VAR 0 2
49802: PPUSH
49803: LD_STRING D3-Os-a-3
49805: PPUSH
49806: CALL_OW 88
// end ; Ralph :
49810: GO 50124
49812: LD_EXP 12
49816: DOUBLE
49817: EQUAL
49818: IFTRUE 49822
49820: GO 49837
49822: POP
// Say ( temp_unit , D3-Ra-a-5 ) ; Kowalski :
49823: LD_VAR 0 2
49827: PPUSH
49828: LD_STRING D3-Ra-a-5
49830: PPUSH
49831: CALL_OW 88
49835: GO 50124
49837: LD_EXP 13
49841: DOUBLE
49842: EQUAL
49843: IFTRUE 49847
49845: GO 49862
49847: POP
// Say ( temp_unit , D3-Ko-a-4 ) ; Evelyn :
49848: LD_VAR 0 2
49852: PPUSH
49853: LD_STRING D3-Ko-a-4
49855: PPUSH
49856: CALL_OW 88
49860: GO 50124
49862: LD_EXP 14
49866: DOUBLE
49867: EQUAL
49868: IFTRUE 49872
49870: GO 49887
49872: POP
// Say ( temp_unit , D3-Ev-a-3 ) ; Suze :
49873: LD_VAR 0 2
49877: PPUSH
49878: LD_STRING D3-Ev-a-3
49880: PPUSH
49881: CALL_OW 88
49885: GO 50124
49887: LD_EXP 15
49891: DOUBLE
49892: EQUAL
49893: IFTRUE 49897
49895: GO 49912
49897: POP
// Say ( temp_unit , D3-Su-a-4 ) ; Olaf :
49898: LD_VAR 0 2
49902: PPUSH
49903: LD_STRING D3-Su-a-4
49905: PPUSH
49906: CALL_OW 88
49910: GO 50124
49912: LD_EXP 16
49916: DOUBLE
49917: EQUAL
49918: IFTRUE 49922
49920: GO 49937
49922: POP
// Say ( temp_unit , D3-Olaf-a-4 ) ; Kurt :
49923: LD_VAR 0 2
49927: PPUSH
49928: LD_STRING D3-Olaf-a-4
49930: PPUSH
49931: CALL_OW 88
49935: GO 50124
49937: LD_EXP 17
49941: DOUBLE
49942: EQUAL
49943: IFTRUE 49947
49945: GO 49982
49947: POP
// begin if kurt_is_substitute then
49948: LD_EXP 81
49952: IFFALSE 49968
// Say ( temp_unit , D3-Ku_alt-a-3 ) else
49954: LD_VAR 0 2
49958: PPUSH
49959: LD_STRING D3-Ku_alt-a-3
49961: PPUSH
49962: CALL_OW 88
49966: GO 49980
// Say ( temp_unit , D3-Ku-a-3 ) ;
49968: LD_VAR 0 2
49972: PPUSH
49973: LD_STRING D3-Ku-a-3
49975: PPUSH
49976: CALL_OW 88
// end ; Dwayne :
49980: GO 50124
49982: LD_EXP 18
49986: DOUBLE
49987: EQUAL
49988: IFTRUE 49992
49990: GO 50007
49992: POP
// Say ( temp_unit , D3-Dw-a-4 ) ; MarkB :
49993: LD_VAR 0 2
49997: PPUSH
49998: LD_STRING D3-Dw-a-4
50000: PPUSH
50001: CALL_OW 88
50005: GO 50124
50007: LD_EXP 19
50011: DOUBLE
50012: EQUAL
50013: IFTRUE 50017
50015: GO 50032
50017: POP
// Say ( temp_unit , D3-Ma-a-3 ) ; Aviradze :
50018: LD_VAR 0 2
50022: PPUSH
50023: LD_STRING D3-Ma-a-3
50025: PPUSH
50026: CALL_OW 88
50030: GO 50124
50032: LD_EXP 20
50036: DOUBLE
50037: EQUAL
50038: IFTRUE 50042
50040: GO 50057
50042: POP
// Say ( temp_unit , D3-Av-a-4 ) ; Swansson :
50043: LD_VAR 0 2
50047: PPUSH
50048: LD_STRING D3-Av-a-4
50050: PPUSH
50051: CALL_OW 88
50055: GO 50124
50057: LD_EXP 21
50061: DOUBLE
50062: EQUAL
50063: IFTRUE 50067
50065: GO 50082
50067: POP
// Say ( temp_unit , D3-Sw-a-3 ) ; else
50068: LD_VAR 0 2
50072: PPUSH
50073: LD_STRING D3-Sw-a-3
50075: PPUSH
50076: CALL_OW 88
50080: GO 50124
50082: POP
// begin if GetSex ( temp_unit ) = sex_male then
50083: LD_VAR 0 2
50087: PPUSH
50088: CALL_OW 258
50092: PUSH
50093: LD_INT 1
50095: EQUAL
50096: IFFALSE 50112
// Say ( temp_unit , D3-SomeM-a-3 ) else
50098: LD_VAR 0 2
50102: PPUSH
50103: LD_STRING D3-SomeM-a-3
50105: PPUSH
50106: CALL_OW 88
50110: GO 50124
// Say ( temp_unit , D3-SomeF-a-3 ) ;
50112: LD_VAR 0 2
50116: PPUSH
50117: LD_STRING D3-SomeF-a-3
50119: PPUSH
50120: CALL_OW 88
// end ; end ; Say ( Heike , D3-H-a-6 ) ;
50124: LD_EXP 9
50128: PPUSH
50129: LD_STRING D3-H-a-6
50131: PPUSH
50132: CALL_OW 88
// end ; DialogueOff ;
50136: CALL_OW 7
// wait ( 0 0$0.2 ) ;
50140: LD_INT 7
50142: PPUSH
50143: CALL_OW 67
// ChangeMissionObjectives ( M2 ) ;
50147: LD_STRING M2
50149: PPUSH
50150: CALL_OW 337
// scout_event_over = true ;
50154: LD_ADDR_EXP 92
50158: PUSH
50159: LD_INT 1
50161: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = russians_allowed_to_attack_gensher_time + tick ;
50162: LD_ADDR_EXP 93
50166: PUSH
50167: LD_EXP 93
50171: PUSH
50172: LD_OWVAR 1
50176: PLUS
50177: ST_TO_ADDR
// end ;
50178: PPOPN 8
50180: END
// every 0 0$1 + 0 0$0.6 do var i ; var ignore_yellow_list , ignore_red_list ;
50181: GO 50183
50183: DISABLE
50184: LD_INT 0
50186: PPUSH
50187: PPUSH
50188: PPUSH
// begin ignore_yellow_list = [ ] ;
50189: LD_ADDR_VAR 0 2
50193: PUSH
50194: EMPTY
50195: ST_TO_ADDR
// ignore_red_list = [ ] ;
50196: LD_ADDR_VAR 0 3
50200: PUSH
50201: EMPTY
50202: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50203: LD_INT 35
50205: PPUSH
50206: CALL_OW 67
// if game_phase > 1 then
50210: LD_EXP 88
50214: PUSH
50215: LD_INT 1
50217: GREATER
50218: IFFALSE 50222
// exit ;
50220: GO 50602
// if ContactTime ( [ you_alt , russians ] ) >= 0 0$8 then
50222: LD_EXP 5
50226: PUSH
50227: LD_EXP 3
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PPUSH
50236: CALL_OW 462
50240: PUSH
50241: LD_INT 280
50243: GREATEREQUAL
50244: IFFALSE 50262
// begin ignore_yellow_list = [ ] ;
50246: LD_ADDR_VAR 0 2
50250: PUSH
50251: EMPTY
50252: ST_TO_ADDR
// ignore_red_list = [ ] ;
50253: LD_ADDR_VAR 0 3
50257: PUSH
50258: EMPTY
50259: ST_TO_ADDR
// continue ;
50260: GO 50203
// end ; for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_human ] ] ) do
50262: LD_ADDR_VAR 0 1
50266: PUSH
50267: LD_INT 22
50269: PUSH
50270: LD_EXP 5
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 21
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PPUSH
50293: CALL_OW 69
50297: PUSH
50298: FOR_IN
50299: IFFALSE 50422
// if GetLives ( i ) <= 250 then
50301: LD_VAR 0 1
50305: PPUSH
50306: CALL_OW 256
50310: PUSH
50311: LD_INT 250
50313: LESSEQUAL
50314: IFFALSE 50361
// begin if not i in ignore_red_list then
50316: LD_VAR 0 1
50320: PUSH
50321: LD_VAR 0 3
50325: IN
50326: NOT
50327: IFFALSE 50359
// begin russian_interference_points = russian_interference_points + 1 ;
50329: LD_ADDR_EXP 96
50333: PUSH
50334: LD_EXP 96
50338: PUSH
50339: LD_INT 1
50341: PLUS
50342: ST_TO_ADDR
// ignore_red_list = ignore_red_list ^ i ;
50343: LD_ADDR_VAR 0 3
50347: PUSH
50348: LD_VAR 0 3
50352: PUSH
50353: LD_VAR 0 1
50357: ADD
50358: ST_TO_ADDR
// end ; end else
50359: GO 50420
// if i in ai_heal_these_humans [ 2 ] then
50361: LD_VAR 0 1
50365: PUSH
50366: LD_EXP 43
50370: PUSH
50371: LD_INT 2
50373: ARRAY
50374: IN
50375: IFFALSE 50420
// begin if not i in ignore_yellow_list then
50377: LD_VAR 0 1
50381: PUSH
50382: LD_VAR 0 2
50386: IN
50387: NOT
50388: IFFALSE 50420
// begin russian_interference_points = russian_interference_points + 1 ;
50390: LD_ADDR_EXP 96
50394: PUSH
50395: LD_EXP 96
50399: PUSH
50400: LD_INT 1
50402: PLUS
50403: ST_TO_ADDR
// ignore_yellow_list = ignore_yellow_list ^ i ;
50404: LD_ADDR_VAR 0 2
50408: PUSH
50409: LD_VAR 0 2
50413: PUSH
50414: LD_VAR 0 1
50418: ADD
50419: ST_TO_ADDR
// end ; end ;
50420: GO 50298
50422: POP
50423: POP
// for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_building ] ] ) do
50424: LD_ADDR_VAR 0 1
50428: PUSH
50429: LD_INT 22
50431: PUSH
50432: LD_EXP 5
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 21
50443: PUSH
50444: LD_INT 3
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PPUSH
50455: CALL_OW 69
50459: PUSH
50460: FOR_IN
50461: IFFALSE 50596
// case GetLives ( i ) of 1 .. 250 :
50463: LD_VAR 0 1
50467: PPUSH
50468: CALL_OW 256
50472: PUSH
50473: LD_INT 1
50475: DOUBLE
50476: GREATEREQUAL
50477: IFFALSE 50485
50479: LD_INT 250
50481: DOUBLE
50482: LESSEQUAL
50483: IFTRUE 50487
50485: GO 50533
50487: POP
// begin if not i in ignore_red_list then
50488: LD_VAR 0 1
50492: PUSH
50493: LD_VAR 0 3
50497: IN
50498: NOT
50499: IFFALSE 50531
// begin russian_interference_points = russian_interference_points + 1 ;
50501: LD_ADDR_EXP 96
50505: PUSH
50506: LD_EXP 96
50510: PUSH
50511: LD_INT 1
50513: PLUS
50514: ST_TO_ADDR
// ignore_red_list = ignore_red_list ^ i ;
50515: LD_ADDR_VAR 0 3
50519: PUSH
50520: LD_VAR 0 3
50524: PUSH
50525: LD_VAR 0 1
50529: ADD
50530: ST_TO_ADDR
// end ; end ; 1 .. 500 :
50531: GO 50594
50533: LD_INT 1
50535: DOUBLE
50536: GREATEREQUAL
50537: IFFALSE 50545
50539: LD_INT 500
50541: DOUBLE
50542: LESSEQUAL
50543: IFTRUE 50547
50545: GO 50593
50547: POP
// begin if not i in ignore_yellow_list then
50548: LD_VAR 0 1
50552: PUSH
50553: LD_VAR 0 2
50557: IN
50558: NOT
50559: IFFALSE 50591
// begin russian_interference_points = russian_interference_points + 1 ;
50561: LD_ADDR_EXP 96
50565: PUSH
50566: LD_EXP 96
50570: PUSH
50571: LD_INT 1
50573: PLUS
50574: ST_TO_ADDR
// ignore_yellow_list = ignore_yellow_list ^ i ;
50575: LD_ADDR_VAR 0 2
50579: PUSH
50580: LD_VAR 0 2
50584: PUSH
50585: LD_VAR 0 1
50589: ADD
50590: ST_TO_ADDR
// end ; end ; end ;
50591: GO 50594
50593: POP
50594: GO 50460
50596: POP
50597: POP
// until false ;
50598: LD_INT 0
50600: IFFALSE 50203
// end ;
50602: PPOPN 3
50604: END
// every 0 0$1 + 0 0$0.3 do var temp_list , hex , time , i ; var hex_list_before , hex_list_after ;
50605: GO 50607
50607: DISABLE
50608: LD_INT 0
50610: PPUSH
50611: PPUSH
50612: PPUSH
50613: PPUSH
50614: PPUSH
50615: PPUSH
// begin time = Rand ( 20 20$0 , 23 23$0 ) ;
50616: LD_ADDR_VAR 0 3
50620: PUSH
50621: LD_INT 42000
50623: PPUSH
50624: LD_INT 48300
50626: PPUSH
50627: CALL_OW 12
50631: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50632: LD_INT 35
50634: PPUSH
50635: CALL_OW 67
// time = time - 0 0$1 ;
50639: LD_ADDR_VAR 0 3
50643: PUSH
50644: LD_VAR 0 3
50648: PUSH
50649: LD_INT 35
50651: MINUS
50652: ST_TO_ADDR
// until time <= 0 0$0 or not 3 in ai_bases ;
50653: LD_VAR 0 3
50657: PUSH
50658: LD_INT 0
50660: LESSEQUAL
50661: PUSH
50662: LD_INT 3
50664: PUSH
50665: LD_EXP 58
50669: IN
50670: NOT
50671: OR
50672: IFFALSE 50632
// if difficulty <= 2 and 3 in ai_bases then
50674: LD_OWVAR 67
50678: PUSH
50679: LD_INT 2
50681: LESSEQUAL
50682: PUSH
50683: LD_INT 3
50685: PUSH
50686: LD_EXP 58
50690: IN
50691: AND
50692: IFFALSE 50701
// wait ( 4 4$0 ) ;
50694: LD_INT 8400
50696: PPUSH
50697: CALL_OW 67
// if difficulty = 1 and 3 in ai_bases then
50701: LD_OWVAR 67
50705: PUSH
50706: LD_INT 1
50708: EQUAL
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: LD_EXP 58
50717: IN
50718: AND
50719: IFFALSE 50728
// wait ( 4 4$0 ) ;
50721: LD_INT 8400
50723: PPUSH
50724: CALL_OW 67
// while ( ai_vehicles_attack [ 3 ] > 0 or ai_attacking_scientists [ 3 ] > 0 or ai_attacking_soldiers [ 3 ] > 0 ) and russian_attack_strategy <> 1 and 3 in ai_bases do
50728: LD_EXP 40
50732: PUSH
50733: LD_INT 3
50735: ARRAY
50736: PUSH
50737: LD_INT 0
50739: GREATER
50740: PUSH
50741: LD_EXP 64
50745: PUSH
50746: LD_INT 3
50748: ARRAY
50749: PUSH
50750: LD_INT 0
50752: GREATER
50753: OR
50754: PUSH
50755: LD_EXP 63
50759: PUSH
50760: LD_INT 3
50762: ARRAY
50763: PUSH
50764: LD_INT 0
50766: GREATER
50767: OR
50768: PUSH
50769: LD_EXP 83
50773: PUSH
50774: LD_INT 1
50776: NONEQUAL
50777: AND
50778: PUSH
50779: LD_INT 3
50781: PUSH
50782: LD_EXP 58
50786: IN
50787: AND
50788: IFFALSE 50799
// wait ( 0 0$2 ) ;
50790: LD_INT 70
50792: PPUSH
50793: CALL_OW 67
50797: GO 50728
// if PlayerAtEasternBorder then
50799: CALL 31592 0 0
50803: IFFALSE 50902
// begin hex_list_before = [ [ 148 , 99 ] , [ 153 , 99 ] ] ;
50805: LD_ADDR_VAR 0 5
50809: PUSH
50810: LD_INT 148
50812: PUSH
50813: LD_INT 99
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 153
50822: PUSH
50823: LD_INT 99
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: ST_TO_ADDR
// hex = [ 145 , 58 ] ;
50834: LD_ADDR_VAR 0 2
50838: PUSH
50839: LD_INT 145
50841: PUSH
50842: LD_INT 58
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: ST_TO_ADDR
// hex_list_after = [ [ 140 , 104 ] , [ 126 , 91 ] , [ 123 , 71 ] , [ 118 , 59 ] ] ;
50849: LD_ADDR_VAR 0 6
50853: PUSH
50854: LD_INT 140
50856: PUSH
50857: LD_INT 104
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 126
50866: PUSH
50867: LD_INT 91
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 123
50876: PUSH
50877: LD_INT 71
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 118
50886: PUSH
50887: LD_INT 59
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: ST_TO_ADDR
// end else
50900: GO 51152
// begin hex_list_before = [ [ 134 , 107 ] , [ 121 , 99 ] ] ;
50902: LD_ADDR_VAR 0 5
50906: PUSH
50907: LD_INT 134
50909: PUSH
50910: LD_INT 107
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 121
50919: PUSH
50920: LD_INT 99
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: ST_TO_ADDR
// hex = [ 99 , 108 ] ;
50931: LD_ADDR_VAR 0 2
50935: PUSH
50936: LD_INT 99
50938: PUSH
50939: LD_INT 108
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: ST_TO_ADDR
// hex_list_after = [ [ 122 , 80 ] ] ;
50946: LD_ADDR_VAR 0 6
50950: PUSH
50951: LD_INT 122
50953: PUSH
50954: LD_INT 80
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: ST_TO_ADDR
// case difficulty of 1 :
50964: LD_OWVAR 67
50968: PUSH
50969: LD_INT 1
50971: DOUBLE
50972: EQUAL
50973: IFTRUE 50977
50975: GO 51037
50977: POP
// hex_list_after = hex_list_after ^ [ [ 143 , 77 ] , [ 143 , 52 ] , [ 134 , 42 ] , [ 115 , 39 ] ] ; 2 :
50978: LD_ADDR_VAR 0 6
50982: PUSH
50983: LD_VAR 0 6
50987: PUSH
50988: LD_INT 143
50990: PUSH
50991: LD_INT 77
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 143
51000: PUSH
51001: LD_INT 52
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 134
51010: PUSH
51011: LD_INT 42
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 115
51020: PUSH
51021: LD_INT 39
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: ADD
51034: ST_TO_ADDR
51035: GO 51152
51037: LD_INT 2
51039: DOUBLE
51040: EQUAL
51041: IFTRUE 51045
51043: GO 51105
51045: POP
// hex_list_after = hex_list_after ^ [ [ 143 , 77 ] , [ 134 , 70 ] , [ 124 , 66 ] , [ 118 , 59 ] ] ; 3 :
51046: LD_ADDR_VAR 0 6
51050: PUSH
51051: LD_VAR 0 6
51055: PUSH
51056: LD_INT 143
51058: PUSH
51059: LD_INT 77
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 134
51068: PUSH
51069: LD_INT 70
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 124
51078: PUSH
51079: LD_INT 66
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 118
51088: PUSH
51089: LD_INT 59
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: ADD
51102: ST_TO_ADDR
51103: GO 51152
51105: LD_INT 3
51107: DOUBLE
51108: EQUAL
51109: IFTRUE 51113
51111: GO 51151
51113: POP
// hex_list_after = hex_list_after ^ [ [ 123 , 71 ] , [ 118 , 59 ] ] ; end ;
51114: LD_ADDR_VAR 0 6
51118: PUSH
51119: LD_VAR 0 6
51123: PUSH
51124: LD_INT 123
51126: PUSH
51127: LD_INT 71
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 118
51136: PUSH
51137: LD_INT 59
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: ADD
51148: ST_TO_ADDR
51149: GO 51152
51151: POP
// end ; temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51152: LD_ADDR_VAR 0 1
51156: PUSH
51157: LD_INT 22
51159: PUSH
51160: LD_EXP 2
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 30
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 30
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PPUSH
51201: CALL_OW 69
51205: ST_TO_ADDR
// if temp_list > 0 then
51206: LD_VAR 0 1
51210: PUSH
51211: LD_INT 0
51213: GREATER
51214: IFFALSE 51264
// hex_list_before = hex_list_before ^ [ [ GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ] ] else
51216: LD_ADDR_VAR 0 5
51220: PUSH
51221: LD_VAR 0 5
51225: PUSH
51226: LD_VAR 0 1
51230: PUSH
51231: LD_INT 1
51233: ARRAY
51234: PPUSH
51235: CALL_OW 250
51239: PUSH
51240: LD_VAR 0 1
51244: PUSH
51245: LD_INT 1
51247: ARRAY
51248: PPUSH
51249: CALL_OW 251
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: EMPTY
51259: LIST
51260: ADD
51261: ST_TO_ADDR
51262: GO 51283
// hex_list_before = hex_list_before ^ [ hex ] ;
51264: LD_ADDR_VAR 0 5
51268: PUSH
51269: LD_VAR 0 5
51273: PUSH
51274: LD_VAR 0 2
51278: PUSH
51279: EMPTY
51280: LIST
51281: ADD
51282: ST_TO_ADDR
// SetDir ( Cornell , 5 ) ;
51283: LD_EXP 25
51287: PPUSH
51288: LD_INT 5
51290: PPUSH
51291: CALL_OW 233
// SetLives ( Cornell , [ 400 , 450 , 500 ] [ difficulty ] ) ;
51295: LD_EXP 25
51299: PPUSH
51300: LD_INT 400
51302: PUSH
51303: LD_INT 450
51305: PUSH
51306: LD_INT 500
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: PUSH
51314: LD_OWVAR 67
51318: ARRAY
51319: PPUSH
51320: CALL_OW 234
// while not PlaceUnitXYR ( Cornell , 146 , 117 , 1 , false ) do
51324: LD_EXP 25
51328: PPUSH
51329: LD_INT 146
51331: PPUSH
51332: LD_INT 117
51334: PPUSH
51335: LD_INT 1
51337: PPUSH
51338: LD_INT 0
51340: PPUSH
51341: CALL_OW 50
51345: NOT
51346: IFFALSE 51357
// wait ( 0 0$2 ) ;
51348: LD_INT 70
51350: PPUSH
51351: CALL_OW 67
51355: GO 51324
// hex = 1 ;
51357: LD_ADDR_VAR 0 2
51361: PUSH
51362: LD_INT 1
51364: ST_TO_ADDR
// time = 1 1$0 ;
51365: LD_ADDR_VAR 0 3
51369: PUSH
51370: LD_INT 2100
51372: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
51373: LD_INT 18
51375: PPUSH
51376: CALL_OW 67
// if GetDistUnitXY ( Cornell , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) > 2 then
51380: LD_EXP 25
51384: PPUSH
51385: LD_VAR 0 5
51389: PUSH
51390: LD_VAR 0 2
51394: ARRAY
51395: PUSH
51396: LD_INT 1
51398: ARRAY
51399: PPUSH
51400: LD_VAR 0 5
51404: PUSH
51405: LD_VAR 0 2
51409: ARRAY
51410: PUSH
51411: LD_INT 2
51413: ARRAY
51414: PPUSH
51415: CALL_OW 297
51419: PUSH
51420: LD_INT 2
51422: GREATER
51423: IFFALSE 51466
// ComMoveXY ( Cornell , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
51425: LD_EXP 25
51429: PPUSH
51430: LD_VAR 0 5
51434: PUSH
51435: LD_VAR 0 2
51439: ARRAY
51440: PUSH
51441: LD_INT 1
51443: ARRAY
51444: PPUSH
51445: LD_VAR 0 5
51449: PUSH
51450: LD_VAR 0 2
51454: ARRAY
51455: PUSH
51456: LD_INT 2
51458: ARRAY
51459: PPUSH
51460: CALL_OW 111
51464: GO 51527
// if hex < hex_list_before then
51466: LD_VAR 0 2
51470: PUSH
51471: LD_VAR 0 5
51475: LESS
51476: IFFALSE 51494
// hex = hex + 1 else
51478: LD_ADDR_VAR 0 2
51482: PUSH
51483: LD_VAR 0 2
51487: PUSH
51488: LD_INT 1
51490: PLUS
51491: ST_TO_ADDR
51492: GO 51527
// begin time = time - 0 0$0.5 ;
51494: LD_ADDR_VAR 0 3
51498: PUSH
51499: LD_VAR 0 3
51503: PUSH
51504: LD_INT 18
51506: MINUS
51507: ST_TO_ADDR
// if time <= 0 0$0 then
51508: LD_VAR 0 3
51512: PUSH
51513: LD_INT 0
51515: LESSEQUAL
51516: IFFALSE 51527
// KillUnit ( Cornell ) ;
51518: LD_EXP 25
51522: PPUSH
51523: CALL_OW 66
// end ; until ( See ( you , Cornell ) and FilterAllUnits ( [ [ f_side , you ] , [ f_see , americans_alt ] ] ) > 0 ) or IsDead ( Cornell ) ;
51527: LD_EXP 2
51531: PPUSH
51532: LD_EXP 25
51536: PPUSH
51537: CALL_OW 292
51541: PUSH
51542: LD_INT 22
51544: PUSH
51545: LD_EXP 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 101
51556: PUSH
51557: LD_EXP 8
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PPUSH
51570: CALL_OW 69
51574: PUSH
51575: LD_INT 0
51577: GREATER
51578: AND
51579: PUSH
51580: LD_EXP 25
51584: PPUSH
51585: CALL_OW 301
51589: OR
51590: IFFALSE 51373
// if See ( you , Cornell ) and FilterAllUnits ( [ [ f_side , you ] , [ f_see , americans_alt ] ] ) > 0 then
51592: LD_EXP 2
51596: PPUSH
51597: LD_EXP 25
51601: PPUSH
51602: CALL_OW 292
51606: PUSH
51607: LD_INT 22
51609: PUSH
51610: LD_EXP 2
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 101
51621: PUSH
51622: LD_EXP 8
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PPUSH
51635: CALL_OW 69
51639: PUSH
51640: LD_INT 0
51642: GREATER
51643: AND
51644: IFFALSE 51967
// begin CenterOnUnits ( Cornell ) ;
51646: LD_EXP 25
51650: PPUSH
51651: CALL_OW 85
// DialogueOn ;
51655: CALL_OW 6
// ForceSay ( Cornell , D5-Cor-1 ) ;
51659: LD_EXP 25
51663: PPUSH
51664: LD_STRING D5-Cor-1
51666: PPUSH
51667: CALL_OW 91
// ForceSay ( Heike , D5-H-1 ) ;
51671: LD_EXP 9
51675: PPUSH
51676: LD_STRING D5-H-1
51678: PPUSH
51679: CALL_OW 91
// DialogueOff ;
51683: CALL_OW 7
// hex = 1 ;
51687: LD_ADDR_VAR 0 2
51691: PUSH
51692: LD_INT 1
51694: ST_TO_ADDR
// repeat if GetDistUnitXY ( Cornell , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) > 3 then
51695: LD_EXP 25
51699: PPUSH
51700: LD_VAR 0 6
51704: PUSH
51705: LD_VAR 0 2
51709: ARRAY
51710: PUSH
51711: LD_INT 1
51713: ARRAY
51714: PPUSH
51715: LD_VAR 0 6
51719: PUSH
51720: LD_VAR 0 2
51724: ARRAY
51725: PUSH
51726: LD_INT 2
51728: ARRAY
51729: PPUSH
51730: CALL_OW 297
51734: PUSH
51735: LD_INT 3
51737: GREATER
51738: IFFALSE 51781
// ComMoveXY ( Cornell , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) else
51740: LD_EXP 25
51744: PPUSH
51745: LD_VAR 0 6
51749: PUSH
51750: LD_VAR 0 2
51754: ARRAY
51755: PUSH
51756: LD_INT 1
51758: ARRAY
51759: PPUSH
51760: LD_VAR 0 6
51764: PUSH
51765: LD_VAR 0 2
51769: ARRAY
51770: PUSH
51771: LD_INT 2
51773: ARRAY
51774: PPUSH
51775: CALL_OW 111
51779: GO 51807
// if hex < hex_list_after then
51781: LD_VAR 0 2
51785: PUSH
51786: LD_VAR 0 6
51790: LESS
51791: IFFALSE 51807
// hex = hex + 1 ;
51793: LD_ADDR_VAR 0 2
51797: PUSH
51798: LD_VAR 0 2
51802: PUSH
51803: LD_INT 1
51805: PLUS
51806: ST_TO_ADDR
// wait ( 0 0$0.5 ) ;
51807: LD_INT 18
51809: PPUSH
51810: CALL_OW 67
// until IsDead ( Cornell ) or ( See ( americans , Cornell ) and FilterAllUnits ( [ [ f_side , americans ] , [ f_see , americans_alt ] ] ) > 0 ) ;
51814: LD_EXP 25
51818: PPUSH
51819: CALL_OW 301
51823: PUSH
51824: LD_EXP 6
51828: PPUSH
51829: LD_EXP 25
51833: PPUSH
51834: CALL_OW 292
51838: PUSH
51839: LD_INT 22
51841: PUSH
51842: LD_EXP 6
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 101
51853: PUSH
51854: LD_EXP 8
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PPUSH
51867: CALL_OW 69
51871: PUSH
51872: LD_INT 0
51874: GREATER
51875: AND
51876: OR
51877: IFFALSE 51695
// if See ( americans , Cornell ) and FilterAllUnits ( [ [ f_side , americans ] , [ f_see , americans_alt ] ] ) > 0 then
51879: LD_EXP 6
51883: PPUSH
51884: LD_EXP 25
51888: PPUSH
51889: CALL_OW 292
51893: PUSH
51894: LD_INT 22
51896: PUSH
51897: LD_EXP 6
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 101
51908: PUSH
51909: LD_EXP 8
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PPUSH
51922: CALL_OW 69
51926: PUSH
51927: LD_INT 0
51929: GREATER
51930: AND
51931: IFFALSE 51967
// begin DialogueOn ;
51933: CALL_OW 6
// SayRadio ( Simms , D4-Sim-2 ) ;
51937: LD_EXP 24
51941: PPUSH
51942: LD_STRING D4-Sim-2
51944: PPUSH
51945: CALL_OW 94
// dwait ( 0 0$0.5 ) ;
51949: LD_INT 18
51951: PPUSH
51952: CALL_OW 68
// YouLost ( PlayerSeen ) ;
51956: LD_STRING PlayerSeen
51958: PPUSH
51959: CALL_OW 104
// DialogueOff ;
51963: CALL_OW 7
// end ; end ; time = Rand ( 22 22$0 , 24 24$0 ) ;
51967: LD_ADDR_VAR 0 3
51971: PUSH
51972: LD_INT 46200
51974: PPUSH
51975: LD_INT 50400
51977: PPUSH
51978: CALL_OW 12
51982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51983: LD_INT 35
51985: PPUSH
51986: CALL_OW 67
// time = time - 0 0$1 ;
51990: LD_ADDR_VAR 0 3
51994: PUSH
51995: LD_VAR 0 3
51999: PUSH
52000: LD_INT 35
52002: MINUS
52003: ST_TO_ADDR
// until time <= 0 0$0 or not 3 in ai_bases ;
52004: LD_VAR 0 3
52008: PUSH
52009: LD_INT 0
52011: LESSEQUAL
52012: PUSH
52013: LD_INT 3
52015: PUSH
52016: LD_EXP 58
52020: IN
52021: NOT
52022: OR
52023: IFFALSE 51983
// DialogueOn ;
52025: CALL_OW 6
// SayRadio ( Gensher , D8-Ge-1 ) ;
52029: LD_EXP 23
52033: PPUSH
52034: LD_STRING D8-Ge-1
52036: PPUSH
52037: CALL_OW 94
// DialogueOff ;
52041: CALL_OW 7
// wait ( 0 0$0.2 ) ;
52045: LD_INT 7
52047: PPUSH
52048: CALL_OW 67
// time = 8 8$0 ;
52052: LD_ADDR_VAR 0 3
52056: PUSH
52057: LD_INT 16800
52059: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = tick + time + 1 1$0 ;
52060: LD_ADDR_EXP 93
52064: PUSH
52065: LD_OWVAR 1
52069: PUSH
52070: LD_VAR 0 3
52074: PLUS
52075: PUSH
52076: LD_INT 2100
52078: PLUS
52079: ST_TO_ADDR
// repeat display_strings = [ #Ar11-GensherCountdown , time ] ;
52080: LD_ADDR_OWVAR 47
52084: PUSH
52085: LD_STRING #Ar11-GensherCountdown
52087: PUSH
52088: LD_VAR 0 3
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: ST_TO_ADDR
// time = time - 0 0$1 ;
52097: LD_ADDR_VAR 0 3
52101: PUSH
52102: LD_VAR 0 3
52106: PUSH
52107: LD_INT 35
52109: MINUS
52110: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52111: LD_INT 35
52113: PPUSH
52114: CALL_OW 67
// until time <= 0 0$0 ;
52118: LD_VAR 0 3
52122: PUSH
52123: LD_INT 0
52125: LESSEQUAL
52126: IFFALSE 52080
// display_strings = [ ] ;
52128: LD_ADDR_OWVAR 47
52132: PUSH
52133: EMPTY
52134: ST_TO_ADDR
// game_phase = 2 ;
52135: LD_ADDR_EXP 88
52139: PUSH
52140: LD_INT 2
52142: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
52143: LD_STRING M3
52145: PPUSH
52146: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , americans ] ) do
52150: LD_ADDR_VAR 0 4
52154: PUSH
52155: LD_INT 22
52157: PUSH
52158: LD_EXP 6
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PPUSH
52167: CALL_OW 69
52171: PUSH
52172: FOR_IN
52173: IFFALSE 52191
// NormalAttack ( you , i ) ;
52175: LD_EXP 2
52179: PPUSH
52180: LD_VAR 0 4
52184: PPUSH
52185: CALL_OW 472
52189: GO 52172
52191: POP
52192: POP
// end ;
52193: PPOPN 6
52195: END
// every 0 0$1 do var i ;
52196: GO 52198
52198: DISABLE
52199: LD_INT 0
52201: PPUSH
// begin repeat wait ( 0 0$1 ) ;
52202: LD_INT 35
52204: PPUSH
52205: CALL_OW 67
// if game_phase > 1 then
52209: LD_EXP 88
52213: PUSH
52214: LD_INT 1
52216: GREATER
52217: IFFALSE 52221
// exit ;
52219: GO 52349
// for i in FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
52221: LD_ADDR_VAR 0 1
52225: PUSH
52226: LD_INT 22
52228: PUSH
52229: LD_EXP 2
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 21
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 21
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PPUSH
52270: CALL_OW 69
52274: PUSH
52275: FOR_IN
52276: IFFALSE 52343
// if GetDistUnitArea ( i , Gensher_base ) <= 9 then
52278: LD_VAR 0 1
52282: PPUSH
52283: LD_INT 7
52285: PPUSH
52286: CALL_OW 299
52290: PUSH
52291: LD_INT 9
52293: LESSEQUAL
52294: IFFALSE 52341
// begin CenterOnUnits ( i ) ;
52296: LD_VAR 0 1
52300: PPUSH
52301: CALL_OW 85
// DialogueOn ;
52305: CALL_OW 6
// Say ( Gensher , D12-Ge-1 ) ;
52309: LD_EXP 23
52313: PPUSH
52314: LD_STRING D12-Ge-1
52316: PPUSH
52317: CALL_OW 88
// ForceSay ( Heike , D12-H-1 ) ;
52321: LD_EXP 9
52325: PPUSH
52326: LD_STRING D12-H-1
52328: PPUSH
52329: CALL_OW 91
// DialogueOff ;
52333: CALL_OW 7
// exit ;
52337: POP
52338: POP
52339: GO 52349
// end ;
52341: GO 52275
52343: POP
52344: POP
// until false ;
52345: LD_INT 0
52347: IFFALSE 52202
// end ;
52349: PPOPN 1
52351: END
// every 0 0$1 + 0 0$0.8 trigger game_phase = 2 do var i , val , temp_list , k ; var un_list , scis_list , hex_list , hex , exit_hex , rand_hexes ; var attacking_units , american_base_hex ;
52352: LD_EXP 88
52356: PUSH
52357: LD_INT 2
52359: EQUAL
52360: IFFALSE 53759
52362: GO 52364
52364: DISABLE
52365: LD_INT 0
52367: PPUSH
52368: PPUSH
52369: PPUSH
52370: PPUSH
52371: PPUSH
52372: PPUSH
52373: PPUSH
52374: PPUSH
52375: PPUSH
52376: PPUSH
52377: PPUSH
52378: PPUSH
// begin ai_bases = ai_bases diff 2 ;
52379: LD_ADDR_EXP 58
52383: PUSH
52384: LD_EXP 58
52388: PUSH
52389: LD_INT 2
52391: DIFF
52392: ST_TO_ADDR
// hex = 1 ;
52393: LD_ADDR_VAR 0 8
52397: PUSH
52398: LD_INT 1
52400: ST_TO_ADDR
// hex_list = [ [ 75 , 23 ] , [ 76 , 36 ] , [ 78 , 43 ] , [ 79 , 51 ] , [ 81 , 61 ] , [ 84 , 71 ] , [ 90 , 81 ] , [ 97 , 88 ] , [ 105 , 93 ] , [ 113 , 95 ] , [ 119 , 92 ] , [ 122 , 87 ] , [ 123 , 79 ] , [ 132 , 82 ] , [ 141 , 88 ] , [ 160 , 104 ] , [ 168 , 109 ] ] ;
52401: LD_ADDR_VAR 0 7
52405: PUSH
52406: LD_INT 75
52408: PUSH
52409: LD_INT 23
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 76
52418: PUSH
52419: LD_INT 36
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 78
52428: PUSH
52429: LD_INT 43
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 79
52438: PUSH
52439: LD_INT 51
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 81
52448: PUSH
52449: LD_INT 61
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 84
52458: PUSH
52459: LD_INT 71
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 90
52468: PUSH
52469: LD_INT 81
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 97
52478: PUSH
52479: LD_INT 88
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 105
52488: PUSH
52489: LD_INT 93
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 113
52498: PUSH
52499: LD_INT 95
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 119
52508: PUSH
52509: LD_INT 92
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 122
52518: PUSH
52519: LD_INT 87
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 123
52528: PUSH
52529: LD_INT 79
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 132
52538: PUSH
52539: LD_INT 82
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 141
52548: PUSH
52549: LD_INT 88
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 160
52558: PUSH
52559: LD_INT 104
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 168
52568: PUSH
52569: LD_INT 109
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: ST_TO_ADDR
// exit_hex = [ 173 , 110 ] ;
52595: LD_ADDR_VAR 0 9
52599: PUSH
52600: LD_INT 173
52602: PUSH
52603: LD_INT 110
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: ST_TO_ADDR
// rand_hexes = [ ] ;
52610: LD_ADDR_VAR 0 10
52614: PUSH
52615: EMPTY
52616: ST_TO_ADDR
// american_base_hex = [ 113 , 36 ] ;
52617: LD_ADDR_VAR 0 12
52621: PUSH
52622: LD_INT 113
52624: PUSH
52625: LD_INT 36
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: ST_TO_ADDR
// attacking_units = [ ] ;
52632: LD_ADDR_VAR 0 11
52636: PUSH
52637: EMPTY
52638: ST_TO_ADDR
// attacking_units = FilterAllUnits ( [ [ f_placed ] , [ f_side , you_alt ] , [ f_type , unit_vehicle ] ] ) ;
52639: LD_ADDR_VAR 0 11
52643: PUSH
52644: LD_INT 52
52646: PUSH
52647: EMPTY
52648: LIST
52649: PUSH
52650: LD_INT 22
52652: PUSH
52653: LD_EXP 5
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 21
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: PPUSH
52677: CALL_OW 69
52681: ST_TO_ADDR
// attacking_units = attacking_units ^ gensher_mortars ;
52682: LD_ADDR_VAR 0 11
52686: PUSH
52687: LD_VAR 0 11
52691: PUSH
52692: LD_EXP 99
52696: ADD
52697: ST_TO_ADDR
// SetAttitude ( you_alt , americans , att_enemy , false ) ;
52698: LD_EXP 5
52702: PPUSH
52703: LD_EXP 6
52707: PPUSH
52708: LD_INT 2
52710: PPUSH
52711: LD_INT 0
52713: PPUSH
52714: CALL_OW 80
// ComAgressiveMove ( attacking_units , american_base_hex [ 1 ] , american_base_hex [ 2 ] ) ;
52718: LD_VAR 0 11
52722: PPUSH
52723: LD_VAR 0 12
52727: PUSH
52728: LD_INT 1
52730: ARRAY
52731: PPUSH
52732: LD_VAR 0 12
52736: PUSH
52737: LD_INT 2
52739: ARRAY
52740: PPUSH
52741: CALL_OW 114
// un_list = original_gensher_people ^ Gensher ;
52745: LD_ADDR_VAR 0 5
52749: PUSH
52750: LD_EXP 82
52754: PUSH
52755: LD_EXP 23
52759: ADD
52760: ST_TO_ADDR
// un_list = un_list ^ gensher_bunker_apes ;
52761: LD_ADDR_VAR 0 5
52765: PUSH
52766: LD_VAR 0 5
52770: PUSH
52771: LD_EXP 98
52775: ADD
52776: ST_TO_ADDR
// scis_list = UnitFilter ( un_list , [ f_class , class_scientistic ] ) ;
52777: LD_ADDR_VAR 0 6
52781: PUSH
52782: LD_VAR 0 5
52786: PPUSH
52787: LD_INT 25
52789: PUSH
52790: LD_INT 4
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PPUSH
52797: CALL_OW 72
52801: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52802: LD_INT 35
52804: PPUSH
52805: CALL_OW 67
// val = true ;
52809: LD_ADDR_VAR 0 2
52813: PUSH
52814: LD_INT 1
52816: ST_TO_ADDR
// for i in un_list do
52817: LD_ADDR_VAR 0 1
52821: PUSH
52822: LD_VAR 0 5
52826: PUSH
52827: FOR_IN
52828: IFFALSE 52904
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
52830: LD_VAR 0 1
52834: PPUSH
52835: CALL_OW 310
52839: PPUSH
52840: CALL_OW 247
52844: PUSH
52845: LD_INT 2
52847: DOUBLE
52848: EQUAL
52849: IFTRUE 52853
52851: GO 52873
52853: POP
// begin ComExitVehicle ( i ) ;
52854: LD_VAR 0 1
52858: PPUSH
52859: CALL_OW 121
// val = false ;
52863: LD_ADDR_VAR 0 2
52867: PUSH
52868: LD_INT 0
52870: ST_TO_ADDR
// end ; unit_building :
52871: GO 52902
52873: LD_INT 3
52875: DOUBLE
52876: EQUAL
52877: IFTRUE 52881
52879: GO 52901
52881: POP
// begin ComExitBuilding ( i ) ;
52882: LD_VAR 0 1
52886: PPUSH
52887: CALL_OW 122
// val = false ;
52891: LD_ADDR_VAR 0 2
52895: PUSH
52896: LD_INT 0
52898: ST_TO_ADDR
// end ; end ;
52899: GO 52902
52901: POP
52902: GO 52827
52904: POP
52905: POP
// until val ;
52906: LD_VAR 0 2
52910: IFFALSE 52802
// for i in un_list do
52912: LD_ADDR_VAR 0 1
52916: PUSH
52917: LD_VAR 0 5
52921: PUSH
52922: FOR_IN
52923: IFFALSE 52958
// rand_hexes = Replace ( rand_hexes , i , hex_list [ hex ] ) ;
52925: LD_ADDR_VAR 0 10
52929: PUSH
52930: LD_VAR 0 10
52934: PPUSH
52935: LD_VAR 0 1
52939: PPUSH
52940: LD_VAR 0 7
52944: PUSH
52945: LD_VAR 0 8
52949: ARRAY
52950: PPUSH
52951: CALL_OW 1
52955: ST_TO_ADDR
52956: GO 52922
52958: POP
52959: POP
// repeat wait ( 0 0$0.3 ) ;
52960: LD_INT 10
52962: PPUSH
52963: CALL_OW 67
// un_list = UnitFilter ( un_list , [ f_alive ] ) ;
52967: LD_ADDR_VAR 0 5
52971: PUSH
52972: LD_VAR 0 5
52976: PPUSH
52977: LD_INT 51
52979: PUSH
52980: EMPTY
52981: LIST
52982: PPUSH
52983: CALL_OW 72
52987: ST_TO_ADDR
// scis_list = UnitFilter ( scis_list , [ f_alive ] ) ;
52988: LD_ADDR_VAR 0 6
52992: PUSH
52993: LD_VAR 0 6
52997: PPUSH
52998: LD_INT 51
53000: PUSH
53001: EMPTY
53002: LIST
53003: PPUSH
53004: CALL_OW 72
53008: ST_TO_ADDR
// temp_list = [ ] ;
53009: LD_ADDR_VAR 0 3
53013: PUSH
53014: EMPTY
53015: ST_TO_ADDR
// for i in un_list do
53016: LD_ADDR_VAR 0 1
53020: PUSH
53021: LD_VAR 0 5
53025: PUSH
53026: FOR_IN
53027: IFFALSE 53062
// if GetLives ( i ) <= 250 then
53029: LD_VAR 0 1
53033: PPUSH
53034: CALL_OW 256
53038: PUSH
53039: LD_INT 250
53041: LESSEQUAL
53042: IFFALSE 53060
// temp_list = temp_list ^ i ;
53044: LD_ADDR_VAR 0 3
53048: PUSH
53049: LD_VAR 0 3
53053: PUSH
53054: LD_VAR 0 1
53058: ADD
53059: ST_TO_ADDR
53060: GO 53026
53062: POP
53063: POP
// if temp_list > 0 and scis_list > 0 and UnitFilter ( un_list , [ f_lives , 501 ] ) > ( original_gensher_people + 1 ) div 2 then
53064: LD_VAR 0 3
53068: PUSH
53069: LD_INT 0
53071: GREATER
53072: PUSH
53073: LD_VAR 0 6
53077: PUSH
53078: LD_INT 0
53080: GREATER
53081: AND
53082: PUSH
53083: LD_VAR 0 5
53087: PPUSH
53088: LD_INT 24
53090: PUSH
53091: LD_INT 501
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PPUSH
53098: CALL_OW 72
53102: PUSH
53103: LD_EXP 82
53107: PUSH
53108: LD_INT 1
53110: PLUS
53111: PUSH
53112: LD_INT 2
53114: DIV
53115: GREATER
53116: AND
53117: IFFALSE 53240
// begin for i in scis_list do
53119: LD_ADDR_VAR 0 1
53123: PUSH
53124: LD_VAR 0 6
53128: PUSH
53129: FOR_IN
53130: IFFALSE 53152
// ComHeal ( i , temp_list [ 1 ] ) ;
53132: LD_VAR 0 1
53136: PPUSH
53137: LD_VAR 0 3
53141: PUSH
53142: LD_INT 1
53144: ARRAY
53145: PPUSH
53146: CALL_OW 128
53150: GO 53129
53152: POP
53153: POP
// for i in un_list diff scis_list do
53154: LD_ADDR_VAR 0 1
53158: PUSH
53159: LD_VAR 0 5
53163: PUSH
53164: LD_VAR 0 6
53168: DIFF
53169: PUSH
53170: FOR_IN
53171: IFFALSE 53236
// if GetDistUnits ( i , temp_list [ 1 ] ) > 4 then
53173: LD_VAR 0 1
53177: PPUSH
53178: LD_VAR 0 3
53182: PUSH
53183: LD_INT 1
53185: ARRAY
53186: PPUSH
53187: CALL_OW 296
53191: PUSH
53192: LD_INT 4
53194: GREATER
53195: IFFALSE 53234
// ComMoveXY ( i , GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ) ;
53197: LD_VAR 0 1
53201: PPUSH
53202: LD_VAR 0 3
53206: PUSH
53207: LD_INT 1
53209: ARRAY
53210: PPUSH
53211: CALL_OW 250
53215: PPUSH
53216: LD_VAR 0 3
53220: PUSH
53221: LD_INT 1
53223: ARRAY
53224: PPUSH
53225: CALL_OW 251
53229: PPUSH
53230: CALL_OW 111
53234: GO 53170
53236: POP
53237: POP
// end else
53238: GO 53727
// begin val = true ;
53240: LD_ADDR_VAR 0 2
53244: PUSH
53245: LD_INT 1
53247: ST_TO_ADDR
// for i in un_list do
53248: LD_ADDR_VAR 0 1
53252: PUSH
53253: LD_VAR 0 5
53257: PUSH
53258: FOR_IN
53259: IFFALSE 53500
// if hex <= hex_list then
53261: LD_VAR 0 8
53265: PUSH
53266: LD_VAR 0 7
53270: LESSEQUAL
53271: IFFALSE 53367
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 5 then
53273: LD_VAR 0 1
53277: PPUSH
53278: LD_VAR 0 10
53282: PUSH
53283: LD_VAR 0 1
53287: ARRAY
53288: PUSH
53289: LD_INT 1
53291: ARRAY
53292: PPUSH
53293: LD_VAR 0 10
53297: PUSH
53298: LD_VAR 0 1
53302: ARRAY
53303: PUSH
53304: LD_INT 2
53306: ARRAY
53307: PPUSH
53308: CALL_OW 297
53312: PUSH
53313: LD_INT 5
53315: GREATER
53316: IFFALSE 53365
// begin ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
53318: LD_VAR 0 1
53322: PPUSH
53323: LD_VAR 0 10
53327: PUSH
53328: LD_VAR 0 1
53332: ARRAY
53333: PUSH
53334: LD_INT 1
53336: ARRAY
53337: PPUSH
53338: LD_VAR 0 10
53342: PUSH
53343: LD_VAR 0 1
53347: ARRAY
53348: PUSH
53349: LD_INT 2
53351: ARRAY
53352: PPUSH
53353: CALL_OW 111
// val = false ;
53357: LD_ADDR_VAR 0 2
53361: PUSH
53362: LD_INT 0
53364: ST_TO_ADDR
// end ; end else
53365: GO 53498
// if GetDistUnitXY ( i , exit_hex [ 1 ] , exit_hex [ 2 ] ) > 2 then
53367: LD_VAR 0 1
53371: PPUSH
53372: LD_VAR 0 9
53376: PUSH
53377: LD_INT 1
53379: ARRAY
53380: PPUSH
53381: LD_VAR 0 9
53385: PUSH
53386: LD_INT 2
53388: ARRAY
53389: PPUSH
53390: CALL_OW 297
53394: PUSH
53395: LD_INT 2
53397: GREATER
53398: IFFALSE 53429
// ComMoveXY ( i , exit_hex [ 1 ] , exit_hex [ 2 ] ) else
53400: LD_VAR 0 1
53404: PPUSH
53405: LD_VAR 0 9
53409: PUSH
53410: LD_INT 1
53412: ARRAY
53413: PPUSH
53414: LD_VAR 0 9
53418: PUSH
53419: LD_INT 2
53421: ARRAY
53422: PPUSH
53423: CALL_OW 111
53427: GO 53498
// begin if i <> Gensher then
53429: LD_VAR 0 1
53433: PUSH
53434: LD_EXP 23
53438: NONEQUAL
53439: IFFALSE 53457
// saved_gensher_people = saved_gensher_people ^ i ;
53441: LD_ADDR_EXP 94
53445: PUSH
53446: LD_EXP 94
53450: PUSH
53451: LD_VAR 0 1
53455: ADD
53456: ST_TO_ADDR
// un_list = un_list diff i ;
53457: LD_ADDR_VAR 0 5
53461: PUSH
53462: LD_VAR 0 5
53466: PUSH
53467: LD_VAR 0 1
53471: DIFF
53472: ST_TO_ADDR
// scis_list = scis_list diff i ;
53473: LD_ADDR_VAR 0 6
53477: PUSH
53478: LD_VAR 0 6
53482: PUSH
53483: LD_VAR 0 1
53487: DIFF
53488: ST_TO_ADDR
// RemoveUnit ( i ) ;
53489: LD_VAR 0 1
53493: PPUSH
53494: CALL_OW 64
// end ;
53498: GO 53258
53500: POP
53501: POP
// if val then
53502: LD_VAR 0 2
53506: IFFALSE 53727
// begin hex = hex + 1 ;
53508: LD_ADDR_VAR 0 8
53512: PUSH
53513: LD_VAR 0 8
53517: PUSH
53518: LD_INT 1
53520: PLUS
53521: ST_TO_ADDR
// if hex <= hex_list then
53522: LD_VAR 0 8
53526: PUSH
53527: LD_VAR 0 7
53531: LESSEQUAL
53532: IFFALSE 53727
// begin temp_list = [ ] ;
53534: LD_ADDR_VAR 0 3
53538: PUSH
53539: EMPTY
53540: ST_TO_ADDR
// for i in un_list do
53541: LD_ADDR_VAR 0 1
53545: PUSH
53546: LD_VAR 0 5
53550: PUSH
53551: FOR_IN
53552: IFFALSE 53725
// begin k = 0 ;
53554: LD_ADDR_VAR 0 4
53558: PUSH
53559: LD_INT 0
53561: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list [ hex ] [ 1 ] , hex_list [ hex ] [ 2 ] , 2 , false ) ;
53562: LD_ADDR_VAR 0 2
53566: PUSH
53567: LD_VAR 0 7
53571: PUSH
53572: LD_VAR 0 8
53576: ARRAY
53577: PUSH
53578: LD_INT 1
53580: ARRAY
53581: PPUSH
53582: LD_VAR 0 7
53586: PUSH
53587: LD_VAR 0 8
53591: ARRAY
53592: PUSH
53593: LD_INT 2
53595: ARRAY
53596: PPUSH
53597: LD_INT 2
53599: PPUSH
53600: LD_INT 0
53602: PPUSH
53603: CALL_OW 17
53607: ST_TO_ADDR
// k = k + 1 ;
53608: LD_ADDR_VAR 0 4
53612: PUSH
53613: LD_VAR 0 4
53617: PUSH
53618: LD_INT 1
53620: PLUS
53621: ST_TO_ADDR
// if ( not val in temp_list and HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 ) or k >= 10 then
53622: LD_VAR 0 2
53626: PUSH
53627: LD_VAR 0 3
53631: IN
53632: NOT
53633: PUSH
53634: LD_VAR 0 2
53638: PUSH
53639: LD_INT 1
53641: ARRAY
53642: PPUSH
53643: LD_VAR 0 2
53647: PUSH
53648: LD_INT 2
53650: ARRAY
53651: PPUSH
53652: CALL_OW 428
53656: PUSH
53657: LD_INT 0
53659: GREATEREQUAL
53660: AND
53661: PUSH
53662: LD_VAR 0 4
53666: PUSH
53667: LD_INT 10
53669: GREATEREQUAL
53670: OR
53671: IFFALSE 53719
// begin temp_list = temp_list ^ [ val ] ;
53673: LD_ADDR_VAR 0 3
53677: PUSH
53678: LD_VAR 0 3
53682: PUSH
53683: LD_VAR 0 2
53687: PUSH
53688: EMPTY
53689: LIST
53690: ADD
53691: ST_TO_ADDR
// rand_hexes = Replace ( rand_hexes , i , val ) ;
53692: LD_ADDR_VAR 0 10
53696: PUSH
53697: LD_VAR 0 10
53701: PPUSH
53702: LD_VAR 0 1
53706: PPUSH
53707: LD_VAR 0 2
53711: PPUSH
53712: CALL_OW 1
53716: ST_TO_ADDR
// break ;
53717: GO 53723
// end ; until false ;
53719: LD_INT 0
53721: IFFALSE 53562
// end ;
53723: GO 53551
53725: POP
53726: POP
// end ; end ; end ; until un_list = 0 ;
53727: LD_VAR 0 5
53731: PUSH
53732: LD_INT 0
53734: EQUAL
53735: IFFALSE 52960
// wait ( 0 0$0.2 ) ;
53737: LD_INT 7
53739: PPUSH
53740: CALL_OW 67
// ChangeMissionObjectives ( M4 ) ;
53744: LD_STRING M4
53746: PPUSH
53747: CALL_OW 337
// game_phase = 3 ;
53751: LD_ADDR_EXP 88
53755: PUSH
53756: LD_INT 3
53758: ST_TO_ADDR
// end ;
53759: PPOPN 12
53761: END
// every 0 0$1 + 0 0$0.9 trigger game_phase = 2 do
53762: LD_EXP 88
53766: PUSH
53767: LD_INT 2
53769: EQUAL
53770: IFFALSE 53851
53772: GO 53774
53774: DISABLE
// begin wait ( [ 0 0$18 , 0 0$15 , 0 0$12 ] [ difficulty ] ) ;
53775: LD_INT 630
53777: PUSH
53778: LD_INT 525
53780: PUSH
53781: LD_INT 420
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: LIST
53788: PUSH
53789: LD_OWVAR 67
53793: ARRAY
53794: PPUSH
53795: CALL_OW 67
// DialogueOn ;
53799: CALL_OW 6
// SayRadio ( Simms , D8-Simm-1_v2 ) ;
53803: LD_EXP 24
53807: PPUSH
53808: LD_STRING D8-Simm-1_v2
53810: PPUSH
53811: CALL_OW 94
// SayRadio ( Powell , D8-Po-1 ) ;
53815: LD_EXP 28
53819: PPUSH
53820: LD_STRING D8-Po-1
53822: PPUSH
53823: CALL_OW 94
// DialogueOff ;
53827: CALL_OW 7
// SetAttitude ( americans , you_alt , att_enemy , true ) ;
53831: LD_EXP 6
53835: PPUSH
53836: LD_EXP 5
53840: PPUSH
53841: LD_INT 2
53843: PPUSH
53844: LD_INT 1
53846: PPUSH
53847: CALL_OW 80
// end ;
53851: END
// every 0 0$1 + 0 0$0.6 trigger GetAttitude ( americans , you_alt ) = att_enemy do var i , val ; var sniper_group_1 , sniper_group_2 , hex_list_1 , hex_list_2 , unit_hex , rand_hexes , k ;
53852: LD_EXP 6
53856: PPUSH
53857: LD_EXP 5
53861: PPUSH
53862: CALL_OW 81
53866: PUSH
53867: LD_INT 2
53869: EQUAL
53870: IFFALSE 55269
53872: GO 53874
53874: DISABLE
53875: LD_INT 0
53877: PPUSH
53878: PPUSH
53879: PPUSH
53880: PPUSH
53881: PPUSH
53882: PPUSH
53883: PPUSH
53884: PPUSH
53885: PPUSH
// begin sniper_group_1 = CreateUnitsWithClass ( difficulty , class_sniper , americans ) ;
53886: LD_ADDR_VAR 0 3
53890: PUSH
53891: LD_OWVAR 67
53895: PPUSH
53896: LD_INT 5
53898: PPUSH
53899: LD_EXP 6
53903: PPUSH
53904: CALL 9640 0 3
53908: ST_TO_ADDR
// sniper_group_2 = CreateUnitsWithClass ( difficulty , class_sniper , americans ) ;
53909: LD_ADDR_VAR 0 4
53913: PUSH
53914: LD_OWVAR 67
53918: PPUSH
53919: LD_INT 5
53921: PPUSH
53922: LD_EXP 6
53926: PPUSH
53927: CALL 9640 0 3
53931: ST_TO_ADDR
// for i in sniper_group_1 ^ sniper_group_2 do
53932: LD_ADDR_VAR 0 1
53936: PUSH
53937: LD_VAR 0 3
53941: PUSH
53942: LD_VAR 0 4
53946: ADD
53947: PUSH
53948: FOR_IN
53949: IFFALSE 53994
// PlaceUnitXYR ( i , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 7 , false ) ;
53951: LD_VAR 0 1
53955: PPUSH
53956: LD_EXP 41
53960: PUSH
53961: LD_INT 1
53963: ARRAY
53964: PUSH
53965: LD_INT 1
53967: ARRAY
53968: PPUSH
53969: LD_EXP 41
53973: PUSH
53974: LD_INT 1
53976: ARRAY
53977: PUSH
53978: LD_INT 2
53980: ARRAY
53981: PPUSH
53982: LD_INT 7
53984: PPUSH
53985: LD_INT 0
53987: PPUSH
53988: CALL_OW 50
53992: GO 53948
53994: POP
53995: POP
// unit_hex = [ ] ;
53996: LD_ADDR_VAR 0 7
54000: PUSH
54001: EMPTY
54002: ST_TO_ADDR
// for i in sniper_group_1 ^ sniper_group_2 do
54003: LD_ADDR_VAR 0 1
54007: PUSH
54008: LD_VAR 0 3
54012: PUSH
54013: LD_VAR 0 4
54017: ADD
54018: PUSH
54019: FOR_IN
54020: IFFALSE 54047
// unit_hex = Replace ( unit_hex , i , 1 ) ;
54022: LD_ADDR_VAR 0 7
54026: PUSH
54027: LD_VAR 0 7
54031: PPUSH
54032: LD_VAR 0 1
54036: PPUSH
54037: LD_INT 1
54039: PPUSH
54040: CALL_OW 1
54044: ST_TO_ADDR
54045: GO 54019
54047: POP
54048: POP
// if FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_inarea , player_base_1 ] ] ) > 0 then
54049: LD_INT 22
54051: PUSH
54052: LD_EXP 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 30
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 30
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 95
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: LIST
54103: PPUSH
54104: CALL_OW 69
54108: PUSH
54109: LD_INT 0
54111: GREATER
54112: IFFALSE 54218
// begin hex_list_1 = [ [ 116 , 59 ] , [ 115 , 67 ] , [ 114 , 77 ] ] ;
54114: LD_ADDR_VAR 0 5
54118: PUSH
54119: LD_INT 116
54121: PUSH
54122: LD_INT 59
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 115
54131: PUSH
54132: LD_INT 67
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 114
54141: PUSH
54142: LD_INT 77
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// hex_list_2 = [ [ 116 , 59 ] , [ 124 , 77 ] , [ 123 , 86 ] , [ 135 , 96 ] , [ 128 , 87 ] ] ;
54154: LD_ADDR_VAR 0 6
54158: PUSH
54159: LD_INT 116
54161: PUSH
54162: LD_INT 59
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 124
54171: PUSH
54172: LD_INT 77
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 123
54181: PUSH
54182: LD_INT 86
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 135
54191: PUSH
54192: LD_INT 96
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 128
54201: PUSH
54202: LD_INT 87
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: ST_TO_ADDR
// end else
54216: GO 54309
// begin hex_list_1 = [ [ 116 , 59 ] , [ 117 , 66 ] , [ 116 , 72 ] ] ;
54218: LD_ADDR_VAR 0 5
54222: PUSH
54223: LD_INT 116
54225: PUSH
54226: LD_INT 59
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 117
54235: PUSH
54236: LD_INT 66
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 116
54245: PUSH
54246: LD_INT 72
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// hex_list_2 = [ [ 116 , 59 ] , [ 134 , 69 ] , [ 150 , 82 ] , [ 157 , 98 ] ] ;
54258: LD_ADDR_VAR 0 6
54262: PUSH
54263: LD_INT 116
54265: PUSH
54266: LD_INT 59
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 134
54275: PUSH
54276: LD_INT 69
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 150
54285: PUSH
54286: LD_INT 82
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 157
54295: PUSH
54296: LD_INT 98
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: ST_TO_ADDR
// end ; rand_hexes = [ ] ;
54309: LD_ADDR_VAR 0 8
54313: PUSH
54314: EMPTY
54315: ST_TO_ADDR
// for i in sniper_group_1 do
54316: LD_ADDR_VAR 0 1
54320: PUSH
54321: LD_VAR 0 3
54325: PUSH
54326: FOR_IN
54327: IFFALSE 54360
// rand_hexes = Replace ( rand_hexes , i , hex_list_1 [ 1 ] ) ;
54329: LD_ADDR_VAR 0 8
54333: PUSH
54334: LD_VAR 0 8
54338: PPUSH
54339: LD_VAR 0 1
54343: PPUSH
54344: LD_VAR 0 5
54348: PUSH
54349: LD_INT 1
54351: ARRAY
54352: PPUSH
54353: CALL_OW 1
54357: ST_TO_ADDR
54358: GO 54326
54360: POP
54361: POP
// for i in sniper_group_2 do
54362: LD_ADDR_VAR 0 1
54366: PUSH
54367: LD_VAR 0 4
54371: PUSH
54372: FOR_IN
54373: IFFALSE 54406
// rand_hexes = Replace ( rand_hexes , i , hex_list_2 [ 1 ] ) ;
54375: LD_ADDR_VAR 0 8
54379: PUSH
54380: LD_VAR 0 8
54384: PPUSH
54385: LD_VAR 0 1
54389: PPUSH
54390: LD_VAR 0 6
54394: PUSH
54395: LD_INT 1
54397: ARRAY
54398: PPUSH
54399: CALL_OW 1
54403: ST_TO_ADDR
54404: GO 54372
54406: POP
54407: POP
// repeat wait ( 0 0$1 ) ;
54408: LD_INT 35
54410: PPUSH
54411: CALL_OW 67
// sniper_group_1 = UnitFilter ( sniper_group_1 , [ f_ok ] ) ;
54415: LD_ADDR_VAR 0 3
54419: PUSH
54420: LD_VAR 0 3
54424: PPUSH
54425: LD_INT 50
54427: PUSH
54428: EMPTY
54429: LIST
54430: PPUSH
54431: CALL_OW 72
54435: ST_TO_ADDR
// sniper_group_2 = UnitFilter ( sniper_group_2 , [ f_ok ] ) ;
54436: LD_ADDR_VAR 0 4
54440: PUSH
54441: LD_VAR 0 4
54445: PPUSH
54446: LD_INT 50
54448: PUSH
54449: EMPTY
54450: LIST
54451: PPUSH
54452: CALL_OW 72
54456: ST_TO_ADDR
// if sniper_group_1 = 0 and sniper_group_2 = 0 then
54457: LD_VAR 0 3
54461: PUSH
54462: LD_INT 0
54464: EQUAL
54465: PUSH
54466: LD_VAR 0 4
54470: PUSH
54471: LD_INT 0
54473: EQUAL
54474: AND
54475: IFFALSE 54479
// exit ;
54477: GO 55269
// for i in sniper_group_1 do
54479: LD_ADDR_VAR 0 1
54483: PUSH
54484: LD_VAR 0 3
54488: PUSH
54489: FOR_IN
54490: IFFALSE 54870
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 2 then
54492: LD_VAR 0 1
54496: PPUSH
54497: LD_VAR 0 8
54501: PUSH
54502: LD_VAR 0 1
54506: ARRAY
54507: PUSH
54508: LD_INT 1
54510: ARRAY
54511: PPUSH
54512: LD_VAR 0 8
54516: PUSH
54517: LD_VAR 0 1
54521: ARRAY
54522: PUSH
54523: LD_INT 2
54525: ARRAY
54526: PPUSH
54527: CALL_OW 297
54531: PUSH
54532: LD_INT 2
54534: GREATER
54535: IFFALSE 54672
// begin if unit_hex [ i ] = hex_list_1 + 0 then
54537: LD_VAR 0 7
54541: PUSH
54542: LD_VAR 0 1
54546: ARRAY
54547: PUSH
54548: LD_VAR 0 5
54552: PUSH
54553: LD_INT 0
54555: PLUS
54556: EQUAL
54557: IFFALSE 54600
// ComAgressiveMove ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) else
54559: LD_VAR 0 1
54563: PPUSH
54564: LD_VAR 0 8
54568: PUSH
54569: LD_VAR 0 1
54573: ARRAY
54574: PUSH
54575: LD_INT 1
54577: ARRAY
54578: PPUSH
54579: LD_VAR 0 8
54583: PUSH
54584: LD_VAR 0 1
54588: ARRAY
54589: PUSH
54590: LD_INT 2
54592: ARRAY
54593: PPUSH
54594: CALL_OW 114
54598: GO 54639
// ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
54600: LD_VAR 0 1
54604: PPUSH
54605: LD_VAR 0 8
54609: PUSH
54610: LD_VAR 0 1
54614: ARRAY
54615: PUSH
54616: LD_INT 1
54618: ARRAY
54619: PPUSH
54620: LD_VAR 0 8
54624: PUSH
54625: LD_VAR 0 1
54629: ARRAY
54630: PUSH
54631: LD_INT 2
54633: ARRAY
54634: PPUSH
54635: CALL_OW 111
// if unit_hex [ i ] = hex_list_1 + 0 then
54639: LD_VAR 0 7
54643: PUSH
54644: LD_VAR 0 1
54648: ARRAY
54649: PUSH
54650: LD_VAR 0 5
54654: PUSH
54655: LD_INT 0
54657: PLUS
54658: EQUAL
54659: IFFALSE 54670
// AddComHold ( i ) ;
54661: LD_VAR 0 1
54665: PPUSH
54666: CALL_OW 200
// end else
54670: GO 54868
// if unit_hex [ i ] < hex_list_1 then
54672: LD_VAR 0 7
54676: PUSH
54677: LD_VAR 0 1
54681: ARRAY
54682: PUSH
54683: LD_VAR 0 5
54687: LESS
54688: IFFALSE 54868
// begin unit_hex = Replace ( unit_hex , i , unit_hex [ i ] + 1 ) ;
54690: LD_ADDR_VAR 0 7
54694: PUSH
54695: LD_VAR 0 7
54699: PPUSH
54700: LD_VAR 0 1
54704: PPUSH
54705: LD_VAR 0 7
54709: PUSH
54710: LD_VAR 0 1
54714: ARRAY
54715: PUSH
54716: LD_INT 1
54718: PLUS
54719: PPUSH
54720: CALL_OW 1
54724: ST_TO_ADDR
// k = 0 ;
54725: LD_ADDR_VAR 0 9
54729: PUSH
54730: LD_INT 0
54732: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list_1 [ unit_hex [ i ] ] [ 1 ] , hex_list_1 [ unit_hex [ i ] ] [ 2 ] , 1 , false ) ;
54733: LD_ADDR_VAR 0 2
54737: PUSH
54738: LD_VAR 0 5
54742: PUSH
54743: LD_VAR 0 7
54747: PUSH
54748: LD_VAR 0 1
54752: ARRAY
54753: ARRAY
54754: PUSH
54755: LD_INT 1
54757: ARRAY
54758: PPUSH
54759: LD_VAR 0 5
54763: PUSH
54764: LD_VAR 0 7
54768: PUSH
54769: LD_VAR 0 1
54773: ARRAY
54774: ARRAY
54775: PUSH
54776: LD_INT 2
54778: ARRAY
54779: PPUSH
54780: LD_INT 1
54782: PPUSH
54783: LD_INT 0
54785: PPUSH
54786: CALL_OW 17
54790: ST_TO_ADDR
// k = k + 1 ;
54791: LD_ADDR_VAR 0 9
54795: PUSH
54796: LD_VAR 0 9
54800: PUSH
54801: LD_INT 1
54803: PLUS
54804: ST_TO_ADDR
// until HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 or k >= 10 ;
54805: LD_VAR 0 2
54809: PUSH
54810: LD_INT 1
54812: ARRAY
54813: PPUSH
54814: LD_VAR 0 2
54818: PUSH
54819: LD_INT 2
54821: ARRAY
54822: PPUSH
54823: CALL_OW 428
54827: PUSH
54828: LD_INT 0
54830: GREATEREQUAL
54831: PUSH
54832: LD_VAR 0 9
54836: PUSH
54837: LD_INT 10
54839: GREATEREQUAL
54840: OR
54841: IFFALSE 54733
// rand_hexes = Replace ( rand_hexes , i , val ) ;
54843: LD_ADDR_VAR 0 8
54847: PUSH
54848: LD_VAR 0 8
54852: PPUSH
54853: LD_VAR 0 1
54857: PPUSH
54858: LD_VAR 0 2
54862: PPUSH
54863: CALL_OW 1
54867: ST_TO_ADDR
// end ; end ;
54868: GO 54489
54870: POP
54871: POP
// for i in sniper_group_2 do
54872: LD_ADDR_VAR 0 1
54876: PUSH
54877: LD_VAR 0 4
54881: PUSH
54882: FOR_IN
54883: IFFALSE 55263
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 2 then
54885: LD_VAR 0 1
54889: PPUSH
54890: LD_VAR 0 8
54894: PUSH
54895: LD_VAR 0 1
54899: ARRAY
54900: PUSH
54901: LD_INT 1
54903: ARRAY
54904: PPUSH
54905: LD_VAR 0 8
54909: PUSH
54910: LD_VAR 0 1
54914: ARRAY
54915: PUSH
54916: LD_INT 2
54918: ARRAY
54919: PPUSH
54920: CALL_OW 297
54924: PUSH
54925: LD_INT 2
54927: GREATER
54928: IFFALSE 55065
// begin if unit_hex [ i ] = hex_list_2 + 0 then
54930: LD_VAR 0 7
54934: PUSH
54935: LD_VAR 0 1
54939: ARRAY
54940: PUSH
54941: LD_VAR 0 6
54945: PUSH
54946: LD_INT 0
54948: PLUS
54949: EQUAL
54950: IFFALSE 54993
// ComAgressiveMove ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) else
54952: LD_VAR 0 1
54956: PPUSH
54957: LD_VAR 0 8
54961: PUSH
54962: LD_VAR 0 1
54966: ARRAY
54967: PUSH
54968: LD_INT 1
54970: ARRAY
54971: PPUSH
54972: LD_VAR 0 8
54976: PUSH
54977: LD_VAR 0 1
54981: ARRAY
54982: PUSH
54983: LD_INT 2
54985: ARRAY
54986: PPUSH
54987: CALL_OW 114
54991: GO 55032
// ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
54993: LD_VAR 0 1
54997: PPUSH
54998: LD_VAR 0 8
55002: PUSH
55003: LD_VAR 0 1
55007: ARRAY
55008: PUSH
55009: LD_INT 1
55011: ARRAY
55012: PPUSH
55013: LD_VAR 0 8
55017: PUSH
55018: LD_VAR 0 1
55022: ARRAY
55023: PUSH
55024: LD_INT 2
55026: ARRAY
55027: PPUSH
55028: CALL_OW 111
// if unit_hex [ i ] = hex_list_2 + 0 then
55032: LD_VAR 0 7
55036: PUSH
55037: LD_VAR 0 1
55041: ARRAY
55042: PUSH
55043: LD_VAR 0 6
55047: PUSH
55048: LD_INT 0
55050: PLUS
55051: EQUAL
55052: IFFALSE 55063
// AddComHold ( i ) ;
55054: LD_VAR 0 1
55058: PPUSH
55059: CALL_OW 200
// end else
55063: GO 55261
// if unit_hex [ i ] < hex_list_2 then
55065: LD_VAR 0 7
55069: PUSH
55070: LD_VAR 0 1
55074: ARRAY
55075: PUSH
55076: LD_VAR 0 6
55080: LESS
55081: IFFALSE 55261
// begin unit_hex = Replace ( unit_hex , i , unit_hex [ i ] + 1 ) ;
55083: LD_ADDR_VAR 0 7
55087: PUSH
55088: LD_VAR 0 7
55092: PPUSH
55093: LD_VAR 0 1
55097: PPUSH
55098: LD_VAR 0 7
55102: PUSH
55103: LD_VAR 0 1
55107: ARRAY
55108: PUSH
55109: LD_INT 1
55111: PLUS
55112: PPUSH
55113: CALL_OW 1
55117: ST_TO_ADDR
// k = 0 ;
55118: LD_ADDR_VAR 0 9
55122: PUSH
55123: LD_INT 0
55125: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list_2 [ unit_hex [ i ] ] [ 1 ] , hex_list_2 [ unit_hex [ i ] ] [ 2 ] , 1 , false ) ;
55126: LD_ADDR_VAR 0 2
55130: PUSH
55131: LD_VAR 0 6
55135: PUSH
55136: LD_VAR 0 7
55140: PUSH
55141: LD_VAR 0 1
55145: ARRAY
55146: ARRAY
55147: PUSH
55148: LD_INT 1
55150: ARRAY
55151: PPUSH
55152: LD_VAR 0 6
55156: PUSH
55157: LD_VAR 0 7
55161: PUSH
55162: LD_VAR 0 1
55166: ARRAY
55167: ARRAY
55168: PUSH
55169: LD_INT 2
55171: ARRAY
55172: PPUSH
55173: LD_INT 1
55175: PPUSH
55176: LD_INT 0
55178: PPUSH
55179: CALL_OW 17
55183: ST_TO_ADDR
// k = k + 1 ;
55184: LD_ADDR_VAR 0 9
55188: PUSH
55189: LD_VAR 0 9
55193: PUSH
55194: LD_INT 1
55196: PLUS
55197: ST_TO_ADDR
// until HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 or k >= 10 ;
55198: LD_VAR 0 2
55202: PUSH
55203: LD_INT 1
55205: ARRAY
55206: PPUSH
55207: LD_VAR 0 2
55211: PUSH
55212: LD_INT 2
55214: ARRAY
55215: PPUSH
55216: CALL_OW 428
55220: PUSH
55221: LD_INT 0
55223: GREATEREQUAL
55224: PUSH
55225: LD_VAR 0 9
55229: PUSH
55230: LD_INT 10
55232: GREATEREQUAL
55233: OR
55234: IFFALSE 55126
// rand_hexes = Replace ( rand_hexes , i , val ) ;
55236: LD_ADDR_VAR 0 8
55240: PUSH
55241: LD_VAR 0 8
55245: PPUSH
55246: LD_VAR 0 1
55250: PPUSH
55251: LD_VAR 0 2
55255: PPUSH
55256: CALL_OW 1
55260: ST_TO_ADDR
// end ; end ;
55261: GO 54882
55263: POP
55264: POP
// until false ;
55265: LD_INT 0
55267: IFFALSE 54408
// end ;
55269: PPOPN 9
55271: END
// every 0 0$1 + 0 0$0.9 trigger game_phase = 3 do var old_man , x , y , temp_list , dist ; var hex , hex_list_before , hex_list_after ;
55272: LD_EXP 88
55276: PUSH
55277: LD_INT 3
55279: EQUAL
55280: IFFALSE 56902
55282: GO 55284
55284: DISABLE
55285: LD_INT 0
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
// begin while ( ai_vehicles_attack [ 3 ] > 0 or ai_attacking_scientists [ 3 ] > 0 or ai_attacking_soldiers [ 3 ] > 0 ) and russian_attack_strategy <> 1 do
55295: LD_EXP 40
55299: PUSH
55300: LD_INT 3
55302: ARRAY
55303: PUSH
55304: LD_INT 0
55306: GREATER
55307: PUSH
55308: LD_EXP 64
55312: PUSH
55313: LD_INT 3
55315: ARRAY
55316: PUSH
55317: LD_INT 0
55319: GREATER
55320: OR
55321: PUSH
55322: LD_EXP 63
55326: PUSH
55327: LD_INT 3
55329: ARRAY
55330: PUSH
55331: LD_INT 0
55333: GREATER
55334: OR
55335: PUSH
55336: LD_EXP 83
55340: PUSH
55341: LD_INT 1
55343: NONEQUAL
55344: AND
55345: IFFALSE 55356
// wait ( 0 0$2 ) ;
55347: LD_INT 70
55349: PPUSH
55350: CALL_OW 67
55354: GO 55295
// if PlayerAtEasternBorder then
55356: CALL 31592 0 0
55360: IFFALSE 55422
// begin hex_list_before = [ [ 127 , 42 ] , [ 139 , 45 ] ] ;
55362: LD_ADDR_VAR 0 7
55366: PUSH
55367: LD_INT 127
55369: PUSH
55370: LD_INT 42
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 139
55379: PUSH
55380: LD_INT 45
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: ST_TO_ADDR
// hex_list_after = [ [ 139 , 45 ] , [ 138 , 39 ] ] ;
55391: LD_ADDR_VAR 0 8
55395: PUSH
55396: LD_INT 139
55398: PUSH
55399: LD_INT 45
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 138
55408: PUSH
55409: LD_INT 39
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: ST_TO_ADDR
// end else
55420: GO 55491
// begin hex_list_before = [ [ 119 , 55 ] , [ 124 , 73 ] , [ 121 , 86 ] ] ;
55422: LD_ADDR_VAR 0 7
55426: PUSH
55427: LD_INT 119
55429: PUSH
55430: LD_INT 55
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 124
55439: PUSH
55440: LD_INT 73
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 121
55449: PUSH
55450: LD_INT 86
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: LIST
55461: ST_TO_ADDR
// hex_list_after = [ [ 121 , 99 ] , [ 141 , 118 ] ] ;
55462: LD_ADDR_VAR 0 8
55466: PUSH
55467: LD_INT 121
55469: PUSH
55470: LD_INT 99
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 141
55479: PUSH
55480: LD_INT 118
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: ST_TO_ADDR
// end ; temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55491: LD_ADDR_VAR 0 4
55495: PUSH
55496: LD_INT 22
55498: PUSH
55499: LD_EXP 2
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 30
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 30
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PPUSH
55540: CALL_OW 69
55544: ST_TO_ADDR
// if temp_list > 0 then
55545: LD_VAR 0 4
55549: PUSH
55550: LD_INT 0
55552: GREATER
55553: IFFALSE 55594
// hex = [ GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ] else
55555: LD_ADDR_VAR 0 6
55559: PUSH
55560: LD_VAR 0 4
55564: PUSH
55565: LD_INT 1
55567: ARRAY
55568: PPUSH
55569: CALL_OW 250
55573: PUSH
55574: LD_VAR 0 4
55578: PUSH
55579: LD_INT 1
55581: ARRAY
55582: PPUSH
55583: CALL_OW 251
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: ST_TO_ADDR
55592: GO 55632
// if PlayerAtEasternBorder then
55594: CALL 31592 0 0
55598: IFFALSE 55617
// hex = [ 144 , 65 ] else
55600: LD_ADDR_VAR 0 6
55604: PUSH
55605: LD_INT 144
55607: PUSH
55608: LD_INT 65
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: ST_TO_ADDR
55615: GO 55632
// hex = [ 99 , 110 ] ;
55617: LD_ADDR_VAR 0 6
55621: PUSH
55622: LD_INT 99
55624: PUSH
55625: LD_INT 110
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: ST_TO_ADDR
// hex_list_before = hex_list_before ^ [ hex ] ;
55632: LD_ADDR_VAR 0 7
55636: PUSH
55637: LD_VAR 0 7
55641: PUSH
55642: LD_VAR 0 6
55646: PUSH
55647: EMPTY
55648: LIST
55649: ADD
55650: ST_TO_ADDR
// SetDir ( Khattam , 5 ) ;
55651: LD_EXP 26
55655: PPUSH
55656: LD_INT 5
55658: PPUSH
55659: CALL_OW 233
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] , [ f_ok ] ] ) ;
55663: LD_ADDR_VAR 0 4
55667: PUSH
55668: LD_INT 22
55670: PUSH
55671: LD_EXP 6
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 30
55685: PUSH
55686: LD_INT 6
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 30
55695: PUSH
55696: LD_INT 7
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 30
55705: PUSH
55706: LD_INT 8
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 50
55721: PUSH
55722: EMPTY
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: PPUSH
55730: CALL_OW 69
55734: ST_TO_ADDR
// if temp_list > 0 then
55735: LD_VAR 0 4
55739: PUSH
55740: LD_INT 0
55742: GREATER
55743: IFFALSE 55871
// begin while not PlaceHumanInUnit ( Khattam , temp_list [ 1 ] ) do
55745: LD_EXP 26
55749: PPUSH
55750: LD_VAR 0 4
55754: PUSH
55755: LD_INT 1
55757: ARRAY
55758: PPUSH
55759: CALL_OW 52
55763: NOT
55764: IFFALSE 55869
// begin if not IsOk ( temp_list [ 1 ] ) or UnitsInside ( temp_list [ 1 ] ) + 0 = 6 then
55766: LD_VAR 0 4
55770: PUSH
55771: LD_INT 1
55773: ARRAY
55774: PPUSH
55775: CALL_OW 302
55779: NOT
55780: PUSH
55781: LD_VAR 0 4
55785: PUSH
55786: LD_INT 1
55788: ARRAY
55789: PPUSH
55790: CALL_OW 313
55794: PUSH
55795: LD_INT 0
55797: PLUS
55798: PUSH
55799: LD_INT 6
55801: EQUAL
55802: OR
55803: IFFALSE 55860
// begin while not PlaceUnitXYR ( Khattam , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 4 , false ) do
55805: LD_EXP 26
55809: PPUSH
55810: LD_EXP 41
55814: PUSH
55815: LD_INT 1
55817: ARRAY
55818: PUSH
55819: LD_INT 1
55821: ARRAY
55822: PPUSH
55823: LD_EXP 41
55827: PUSH
55828: LD_INT 1
55830: ARRAY
55831: PUSH
55832: LD_INT 2
55834: ARRAY
55835: PPUSH
55836: LD_INT 4
55838: PPUSH
55839: LD_INT 0
55841: PPUSH
55842: CALL_OW 50
55846: NOT
55847: IFFALSE 55858
// wait ( 0 0$2 ) ;
55849: LD_INT 70
55851: PPUSH
55852: CALL_OW 67
55856: GO 55805
// break ;
55858: GO 55869
// end ; wait ( 0 0$2 ) ;
55860: LD_INT 70
55862: PPUSH
55863: CALL_OW 67
// end ;
55867: GO 55745
// end else
55869: GO 55924
// begin while not PlaceUnitXYR ( Khattam , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 4 , false ) do
55871: LD_EXP 26
55875: PPUSH
55876: LD_EXP 41
55880: PUSH
55881: LD_INT 1
55883: ARRAY
55884: PUSH
55885: LD_INT 1
55887: ARRAY
55888: PPUSH
55889: LD_EXP 41
55893: PUSH
55894: LD_INT 1
55896: ARRAY
55897: PUSH
55898: LD_INT 2
55900: ARRAY
55901: PPUSH
55902: LD_INT 4
55904: PPUSH
55905: LD_INT 0
55907: PPUSH
55908: CALL_OW 50
55912: NOT
55913: IFFALSE 55924
// wait ( 0 0$2 ) ;
55915: LD_INT 70
55917: PPUSH
55918: CALL_OW 67
55922: GO 55871
// end ; SetAttitude ( you , americans_alt , att_neutral , true ) ;
55924: LD_EXP 2
55928: PPUSH
55929: LD_EXP 8
55933: PPUSH
55934: LD_INT 0
55936: PPUSH
55937: LD_INT 1
55939: PPUSH
55940: CALL_OW 80
// hex = 1 ;
55944: LD_ADDR_VAR 0 6
55948: PUSH
55949: LD_INT 1
55951: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55952: LD_INT 35
55954: PPUSH
55955: CALL_OW 67
// if GetDistUnitXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) > 3 then
55959: LD_EXP 26
55963: PPUSH
55964: LD_VAR 0 7
55968: PUSH
55969: LD_VAR 0 6
55973: ARRAY
55974: PUSH
55975: LD_INT 1
55977: ARRAY
55978: PPUSH
55979: LD_VAR 0 7
55983: PUSH
55984: LD_VAR 0 6
55988: ARRAY
55989: PUSH
55990: LD_INT 2
55992: ARRAY
55993: PPUSH
55994: CALL_OW 297
55998: PUSH
55999: LD_INT 3
56001: GREATER
56002: IFFALSE 56045
// ComMoveXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
56004: LD_EXP 26
56008: PPUSH
56009: LD_VAR 0 7
56013: PUSH
56014: LD_VAR 0 6
56018: ARRAY
56019: PUSH
56020: LD_INT 1
56022: ARRAY
56023: PPUSH
56024: LD_VAR 0 7
56028: PUSH
56029: LD_VAR 0 6
56033: ARRAY
56034: PUSH
56035: LD_INT 2
56037: ARRAY
56038: PPUSH
56039: CALL_OW 111
56043: GO 56071
// if hex < hex_list_before then
56045: LD_VAR 0 6
56049: PUSH
56050: LD_VAR 0 7
56054: LESS
56055: IFFALSE 56071
// hex = hex + 1 ;
56057: LD_ADDR_VAR 0 6
56061: PUSH
56062: LD_VAR 0 6
56066: PUSH
56067: LD_INT 1
56069: PLUS
56070: ST_TO_ADDR
// until See ( you , Khattam ) or IsDead ( Khattam ) ;
56071: LD_EXP 2
56075: PPUSH
56076: LD_EXP 26
56080: PPUSH
56081: CALL_OW 292
56085: PUSH
56086: LD_EXP 26
56090: PPUSH
56091: CALL_OW 301
56095: OR
56096: IFFALSE 55952
// if See ( you , Khattam ) then
56098: LD_EXP 2
56102: PPUSH
56103: LD_EXP 26
56107: PPUSH
56108: CALL_OW 292
56112: IFFALSE 56902
// begin CenterOnUnits ( Khattam ) ;
56114: LD_EXP 26
56118: PPUSH
56119: CALL_OW 85
// DialogueOn ;
56123: CALL_OW 6
// ForceSay ( Khattam , D9-Kh-1 ) ;
56127: LD_EXP 26
56131: PPUSH
56132: LD_STRING D9-Kh-1
56134: PPUSH
56135: CALL_OW 91
// if IsOk ( Oswald ) then
56139: LD_EXP 11
56143: PPUSH
56144: CALL_OW 302
56148: IFFALSE 56184
// begin if oswald_is_substitute then
56150: LD_EXP 80
56154: IFFALSE 56170
// Say ( Oswald , D9-Os_sub-1 ) else
56156: LD_EXP 11
56160: PPUSH
56161: LD_STRING D9-Os_sub-1
56163: PPUSH
56164: CALL_OW 88
56168: GO 56182
// Say ( Oswald , D9-Os-1 ) ;
56170: LD_EXP 11
56174: PPUSH
56175: LD_STRING D9-Os-1
56177: PPUSH
56178: CALL_OW 88
// end else
56182: GO 56196
// ForceSay ( Heike , D9-H-1 ) ;
56184: LD_EXP 9
56188: PPUSH
56189: LD_STRING D9-H-1
56191: PPUSH
56192: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-2 ) ;
56196: LD_EXP 26
56200: PPUSH
56201: LD_STRING D9-Kh-2
56203: PPUSH
56204: CALL_OW 91
// ForceSay ( Heike , D9-H-2 ) ;
56208: LD_EXP 9
56212: PPUSH
56213: LD_STRING D9-H-2
56215: PPUSH
56216: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-3 ) ;
56220: LD_EXP 26
56224: PPUSH
56225: LD_STRING D9-Kh-3
56227: PPUSH
56228: CALL_OW 91
// dwait ( 0 0$0.2 ) ;
56232: LD_INT 7
56234: PPUSH
56235: CALL_OW 68
// khattam_choice = Query ( QKhattamJoin ) ;
56239: LD_ADDR_EXP 95
56243: PUSH
56244: LD_STRING QKhattamJoin
56246: PPUSH
56247: CALL_OW 97
56251: ST_TO_ADDR
// case khattam_choice of 1 :
56252: LD_EXP 95
56256: PUSH
56257: LD_INT 1
56259: DOUBLE
56260: EQUAL
56261: IFTRUE 56265
56263: GO 56693
56265: POP
// begin ForceSay ( Heike , D9-H-1-1 ) ;
56266: LD_EXP 9
56270: PPUSH
56271: LD_STRING D9-H-1-1
56273: PPUSH
56274: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-1-1 ) ;
56278: LD_EXP 26
56282: PPUSH
56283: LD_STRING D9-Kh-1-1
56285: PPUSH
56286: CALL_OW 91
// DialogueOff ;
56290: CALL_OW 7
// SetAttitude ( you , americans_alt , att_friend , true ) ;
56294: LD_EXP 2
56298: PPUSH
56299: LD_EXP 8
56303: PPUSH
56304: LD_INT 1
56306: PPUSH
56307: LD_INT 1
56309: PPUSH
56310: CALL_OW 80
// while FilterAllUnits ( [ [ f_side , americans ] , [ f_ok ] , [ f_dist , Khattam , 17 ] ] ) > 0 do
56314: LD_INT 22
56316: PUSH
56317: LD_EXP 6
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 50
56328: PUSH
56329: EMPTY
56330: LIST
56331: PUSH
56332: LD_INT 91
56334: PUSH
56335: LD_EXP 26
56339: PUSH
56340: LD_INT 17
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: PPUSH
56353: CALL_OW 69
56357: PUSH
56358: LD_INT 0
56360: GREATER
56361: IFFALSE 56525
// begin dist = GetDistUnitXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) ;
56363: LD_ADDR_VAR 0 5
56367: PUSH
56368: LD_EXP 26
56372: PPUSH
56373: LD_VAR 0 7
56377: PUSH
56378: LD_VAR 0 6
56382: ARRAY
56383: PUSH
56384: LD_INT 1
56386: ARRAY
56387: PPUSH
56388: LD_VAR 0 7
56392: PUSH
56393: LD_VAR 0 6
56397: ARRAY
56398: PUSH
56399: LD_INT 2
56401: ARRAY
56402: PPUSH
56403: CALL_OW 297
56407: ST_TO_ADDR
// if not ( dist <= 3 or ( hex = hex_list_before + 0 and dist <= 7 ) ) then
56408: LD_VAR 0 5
56412: PUSH
56413: LD_INT 3
56415: LESSEQUAL
56416: PUSH
56417: LD_VAR 0 6
56421: PUSH
56422: LD_VAR 0 7
56426: PUSH
56427: LD_INT 0
56429: PLUS
56430: EQUAL
56431: PUSH
56432: LD_VAR 0 5
56436: PUSH
56437: LD_INT 7
56439: LESSEQUAL
56440: AND
56441: OR
56442: NOT
56443: IFFALSE 56486
// ComMoveXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
56445: LD_EXP 26
56449: PPUSH
56450: LD_VAR 0 7
56454: PUSH
56455: LD_VAR 0 6
56459: ARRAY
56460: PUSH
56461: LD_INT 1
56463: ARRAY
56464: PPUSH
56465: LD_VAR 0 7
56469: PUSH
56470: LD_VAR 0 6
56474: ARRAY
56475: PUSH
56476: LD_INT 2
56478: ARRAY
56479: PPUSH
56480: CALL_OW 111
56484: GO 56516
// if hex < hex_list_before then
56486: LD_VAR 0 6
56490: PUSH
56491: LD_VAR 0 7
56495: LESS
56496: IFFALSE 56514
// hex = hex + 1 else
56498: LD_ADDR_VAR 0 6
56502: PUSH
56503: LD_VAR 0 6
56507: PUSH
56508: LD_INT 1
56510: PLUS
56511: ST_TO_ADDR
56512: GO 56516
// break ;
56514: GO 56525
// wait ( 0 0$1 ) ;
56516: LD_INT 35
56518: PPUSH
56519: CALL_OW 67
// end ;
56523: GO 56314
// PrepareNewCharacter ( Khatam ) ;
56525: LD_STRING Khatam
56527: PPUSH
56528: CALL_OW 26
// uc_side = you ;
56532: LD_ADDR_OWVAR 20
56536: PUSH
56537: LD_EXP 2
56541: ST_TO_ADDR
// uc_nation = nation_arabian ;
56542: LD_ADDR_OWVAR 21
56546: PUSH
56547: LD_INT 2
56549: ST_TO_ADDR
// old_man = Khattam ;
56550: LD_ADDR_VAR 0 1
56554: PUSH
56555: LD_EXP 26
56559: ST_TO_ADDR
// Khattam = CreateHuman ;
56560: LD_ADDR_EXP 26
56564: PUSH
56565: CALL_OW 44
56569: ST_TO_ADDR
// hc_importance = 0 ;
56570: LD_ADDR_OWVAR 32
56574: PUSH
56575: LD_INT 0
56577: ST_TO_ADDR
// CopySkills ( old_man , Khattam ) ;
56578: LD_VAR 0 1
56582: PPUSH
56583: LD_EXP 26
56587: PPUSH
56588: CALL_OW 510
// x = GetX ( old_man ) ;
56592: LD_ADDR_VAR 0 2
56596: PUSH
56597: LD_VAR 0 1
56601: PPUSH
56602: CALL_OW 250
56606: ST_TO_ADDR
// y = GetY ( old_man ) ;
56607: LD_ADDR_VAR 0 3
56611: PUSH
56612: LD_VAR 0 1
56616: PPUSH
56617: CALL_OW 251
56621: ST_TO_ADDR
// SetDir ( Khattam , GetDir ( old_man ) ) ;
56622: LD_EXP 26
56626: PPUSH
56627: LD_VAR 0 1
56631: PPUSH
56632: CALL_OW 254
56636: PPUSH
56637: CALL_OW 233
// SetLives ( Khattam , GetLives ( old_man ) ) ;
56641: LD_EXP 26
56645: PPUSH
56646: LD_VAR 0 1
56650: PPUSH
56651: CALL_OW 256
56655: PPUSH
56656: CALL_OW 234
// RemoveUnit ( old_man ) ;
56660: LD_VAR 0 1
56664: PPUSH
56665: CALL_OW 64
// PlaceUnitXY ( Khattam , x , y , false ) ;
56669: LD_EXP 26
56673: PPUSH
56674: LD_VAR 0 2
56678: PPUSH
56679: LD_VAR 0 3
56683: PPUSH
56684: LD_INT 0
56686: PPUSH
56687: CALL_OW 48
// end ; 2 :
56691: GO 56733
56693: LD_INT 2
56695: DOUBLE
56696: EQUAL
56697: IFTRUE 56701
56699: GO 56732
56701: POP
// begin ForceSay ( Heike , D9-H-2-1 ) ;
56702: LD_EXP 9
56706: PPUSH
56707: LD_STRING D9-H-2-1
56709: PPUSH
56710: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-2-1 ) ;
56714: LD_EXP 26
56718: PPUSH
56719: LD_STRING D9-Kh-2-1
56721: PPUSH
56722: CALL_OW 91
// DialogueOff ;
56726: CALL_OW 7
// end ; end ;
56730: GO 56733
56732: POP
// ComStop ( Khattam ) ;
56733: LD_EXP 26
56737: PPUSH
56738: CALL_OW 141
// if khattam_choice = 2 then
56742: LD_EXP 95
56746: PUSH
56747: LD_INT 2
56749: EQUAL
56750: IFFALSE 56902
// begin hex = 1 ;
56752: LD_ADDR_VAR 0 6
56756: PUSH
56757: LD_INT 1
56759: ST_TO_ADDR
// repeat if GetDistUnitXY ( Khattam , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) > 3 then
56760: LD_EXP 26
56764: PPUSH
56765: LD_VAR 0 8
56769: PUSH
56770: LD_VAR 0 6
56774: ARRAY
56775: PUSH
56776: LD_INT 1
56778: ARRAY
56779: PPUSH
56780: LD_VAR 0 8
56784: PUSH
56785: LD_VAR 0 6
56789: ARRAY
56790: PUSH
56791: LD_INT 2
56793: ARRAY
56794: PPUSH
56795: CALL_OW 297
56799: PUSH
56800: LD_INT 3
56802: GREATER
56803: IFFALSE 56846
// ComMoveXY ( Khattam , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) else
56805: LD_EXP 26
56809: PPUSH
56810: LD_VAR 0 8
56814: PUSH
56815: LD_VAR 0 6
56819: ARRAY
56820: PUSH
56821: LD_INT 1
56823: ARRAY
56824: PPUSH
56825: LD_VAR 0 8
56829: PUSH
56830: LD_VAR 0 6
56834: ARRAY
56835: PUSH
56836: LD_INT 2
56838: ARRAY
56839: PPUSH
56840: CALL_OW 111
56844: GO 56883
// if hex < hex_list_after then
56846: LD_VAR 0 6
56850: PUSH
56851: LD_VAR 0 8
56855: LESS
56856: IFFALSE 56874
// hex = hex + 1 else
56858: LD_ADDR_VAR 0 6
56862: PUSH
56863: LD_VAR 0 6
56867: PUSH
56868: LD_INT 1
56870: PLUS
56871: ST_TO_ADDR
56872: GO 56883
// RemoveUnit ( Khattam ) ;
56874: LD_EXP 26
56878: PPUSH
56879: CALL_OW 64
// wait ( 0 0$1 ) ;
56883: LD_INT 35
56885: PPUSH
56886: CALL_OW 67
// until not IsPlaced ( Khattam ) ;
56890: LD_EXP 26
56894: PPUSH
56895: CALL_OW 305
56899: NOT
56900: IFFALSE 56760
// end ; end ; end ;
56902: PPOPN 8
56904: END
// every 0 0$1 + 0 0$0.8 trigger game_phase = 3 do var init_buildings , init_humans , temp_list , temp_unit ;
56905: LD_EXP 88
56909: PUSH
56910: LD_INT 3
56912: EQUAL
56913: IFFALSE 57486
56915: GO 56917
56917: DISABLE
56918: LD_INT 0
56920: PPUSH
56921: PPUSH
56922: PPUSH
56923: PPUSH
// begin init_buildings = GetAmBuildings ;
56924: LD_ADDR_VAR 0 1
56928: PUSH
56929: CALL 57489 0 0
56933: ST_TO_ADDR
// init_humans = GetAmHumans ;
56934: LD_ADDR_VAR 0 2
56938: PUSH
56939: CALL 57576 0 0
56943: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
56944: LD_INT 175
56946: PPUSH
56947: CALL_OW 67
// until init_buildings >= GetAmBuildings * 2 or init_humans >= GetAmHumans * 2 ;
56951: LD_VAR 0 1
56955: PUSH
56956: CALL 57489 0 0
56960: PUSH
56961: LD_INT 2
56963: MUL
56964: GREATEREQUAL
56965: PUSH
56966: LD_VAR 0 2
56970: PUSH
56971: CALL 57576 0 0
56975: PUSH
56976: LD_INT 2
56978: MUL
56979: GREATEREQUAL
56980: OR
56981: IFFALSE 56944
// DialogueOn ;
56983: CALL_OW 6
// SayRadio ( Simms , D10-Simm-1 ) ;
56987: LD_EXP 24
56991: PPUSH
56992: LD_STRING D10-Simm-1
56994: PPUSH
56995: CALL_OW 94
// ForceSay ( Heike , D10-H-1 ) ;
56999: LD_EXP 9
57003: PPUSH
57004: LD_STRING D10-H-1
57006: PPUSH
57007: CALL_OW 91
// SayRadio ( Simms , D10-Simm-2 ) ;
57011: LD_EXP 24
57015: PPUSH
57016: LD_STRING D10-Simm-2
57018: PPUSH
57019: CALL_OW 94
// ForceSay ( Heike , D10-H-2 ) ;
57023: LD_EXP 9
57027: PPUSH
57028: LD_STRING D10-H-2
57030: PPUSH
57031: CALL_OW 91
// SayRadio ( Simms , D10-Simm-3 ) ;
57035: LD_EXP 24
57039: PPUSH
57040: LD_STRING D10-Simm-3
57042: PPUSH
57043: CALL_OW 94
// ForceSay ( Heike , D10-H-3 ) ;
57047: LD_EXP 9
57051: PPUSH
57052: LD_STRING D10-H-3
57054: PPUSH
57055: CALL_OW 91
// SayRadio ( Simms , D10-Simm-4 ) ;
57059: LD_EXP 24
57063: PPUSH
57064: LD_STRING D10-Simm-4
57066: PPUSH
57067: CALL_OW 94
// temp_list = UnitFilter ( [ Kowalski , Suze , Kurt , Dwayne ] , [ f_alive ] ) ;
57071: LD_ADDR_VAR 0 3
57075: PUSH
57076: LD_EXP 13
57080: PUSH
57081: LD_EXP 15
57085: PUSH
57086: LD_EXP 17
57090: PUSH
57091: LD_EXP 18
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: PPUSH
57102: LD_INT 51
57104: PUSH
57105: EMPTY
57106: LIST
57107: PPUSH
57108: CALL_OW 72
57112: ST_TO_ADDR
// if temp_list = 0 then
57113: LD_VAR 0 3
57117: PUSH
57118: LD_INT 0
57120: EQUAL
57121: IFFALSE 57251
// temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
57123: LD_ADDR_VAR 0 3
57127: PUSH
57128: LD_INT 22
57130: PUSH
57131: LD_EXP 2
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 21
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PPUSH
57154: CALL_OW 69
57158: PUSH
57159: LD_EXP 2
57163: PPUSH
57164: CALL 43816 0 1
57168: PUSH
57169: LD_EXP 9
57173: PUSH
57174: LD_EXP 10
57178: PUSH
57179: LD_EXP 11
57183: PUSH
57184: LD_EXP 12
57188: PUSH
57189: LD_EXP 13
57193: PUSH
57194: LD_EXP 14
57198: PUSH
57199: LD_EXP 15
57203: PUSH
57204: LD_EXP 16
57208: PUSH
57209: LD_EXP 17
57213: PUSH
57214: LD_EXP 18
57218: PUSH
57219: LD_EXP 19
57223: PUSH
57224: LD_EXP 20
57228: PUSH
57229: LD_EXP 21
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: ADD
57249: DIFF
57250: ST_TO_ADDR
// if temp_list > 0 then
57251: LD_VAR 0 3
57255: PUSH
57256: LD_INT 0
57258: GREATER
57259: IFFALSE 57452
// begin temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
57261: LD_ADDR_VAR 0 4
57265: PUSH
57266: LD_VAR 0 3
57270: PUSH
57271: LD_INT 1
57273: PPUSH
57274: LD_VAR 0 3
57278: PPUSH
57279: CALL_OW 12
57283: ARRAY
57284: ST_TO_ADDR
// case temp_unit of Kowalski :
57285: LD_VAR 0 4
57289: PUSH
57290: LD_EXP 13
57294: DOUBLE
57295: EQUAL
57296: IFTRUE 57300
57298: GO 57315
57300: POP
// ForceSay ( temp_unit , D10-Ko-1 ) ; Suze :
57301: LD_VAR 0 4
57305: PPUSH
57306: LD_STRING D10-Ko-1
57308: PPUSH
57309: CALL_OW 91
57313: GO 57452
57315: LD_EXP 15
57319: DOUBLE
57320: EQUAL
57321: IFTRUE 57325
57323: GO 57340
57325: POP
// ForceSay ( temp_unit , D10-Su-1 ) ; Kurt :
57326: LD_VAR 0 4
57330: PPUSH
57331: LD_STRING D10-Su-1
57333: PPUSH
57334: CALL_OW 91
57338: GO 57452
57340: LD_EXP 17
57344: DOUBLE
57345: EQUAL
57346: IFTRUE 57350
57348: GO 57385
57350: POP
// begin if kurt_is_substitute then
57351: LD_EXP 81
57355: IFFALSE 57371
// ForceSay ( temp_unit , D10-Ku-1 ) else
57357: LD_VAR 0 4
57361: PPUSH
57362: LD_STRING D10-Ku-1
57364: PPUSH
57365: CALL_OW 91
57369: GO 57383
// ForceSay ( temp_unit , D10-Ku-1 ) ;
57371: LD_VAR 0 4
57375: PPUSH
57376: LD_STRING D10-Ku-1
57378: PPUSH
57379: CALL_OW 91
// end ; Dwayne :
57383: GO 57452
57385: LD_EXP 18
57389: DOUBLE
57390: EQUAL
57391: IFTRUE 57395
57393: GO 57410
57395: POP
// ForceSay ( temp_unit , D10-Dw-1 ) ; else
57396: LD_VAR 0 4
57400: PPUSH
57401: LD_STRING D10-Dw-1
57403: PPUSH
57404: CALL_OW 91
57408: GO 57452
57410: POP
// if GetSex ( temp_unit ) = sex_male then
57411: LD_VAR 0 4
57415: PPUSH
57416: CALL_OW 258
57420: PUSH
57421: LD_INT 1
57423: EQUAL
57424: IFFALSE 57440
// ForceSay ( temp_unit , D10-SomeM-1 ) else
57426: LD_VAR 0 4
57430: PPUSH
57431: LD_STRING D10-SomeM-1
57433: PPUSH
57434: CALL_OW 91
57438: GO 57452
// ForceSay ( temp_unit , D10-SomeF-1 ) ; end ;
57440: LD_VAR 0 4
57444: PPUSH
57445: LD_STRING D10-SomeF-1
57447: PPUSH
57448: CALL_OW 91
// end ; dwait ( 0 0$0.9 ) ;
57452: LD_INT 32
57454: PPUSH
57455: CALL_OW 68
// ForceSay ( Heike , D10-H-4 ) ;
57459: LD_EXP 9
57463: PPUSH
57464: LD_STRING D10-H-4
57466: PPUSH
57467: CALL_OW 91
// dwait ( 0 0$0.2 ) ;
57471: LD_INT 7
57473: PPUSH
57474: CALL_OW 68
// EndMission ;
57478: CALL 57620 0 0
// DialogueOff ;
57482: CALL_OW 7
// end ;
57486: PPOPN 4
57488: END
// function GetAmBuildings ; begin
57489: LD_INT 0
57491: PPUSH
// result = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_building ] ] ) diff [ b_ext_computer , b_ext_gun , b_ext_laser , b_ext_noncombat , b_ext_radar , b_ext_radio , b_ext_rocket , b_ext_siberium , b_ext_stitch , b_ext_track ] ;
57492: LD_ADDR_VAR 0 1
57496: PUSH
57497: LD_INT 22
57499: PUSH
57500: LD_EXP 6
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 21
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PPUSH
57523: CALL_OW 69
57527: PUSH
57528: LD_INT 24
57530: PUSH
57531: LD_INT 17
57533: PUSH
57534: LD_INT 25
57536: PUSH
57537: LD_INT 19
57539: PUSH
57540: LD_INT 20
57542: PUSH
57543: LD_INT 22
57545: PUSH
57546: LD_INT 18
57548: PUSH
57549: LD_INT 21
57551: PUSH
57552: LD_INT 23
57554: PUSH
57555: LD_INT 16
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: DIFF
57570: ST_TO_ADDR
// end ;
57571: LD_VAR 0 1
57575: RET
// function GetAmHumans ; begin
57576: LD_INT 0
57578: PPUSH
// result = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
57579: LD_ADDR_VAR 0 1
57583: PUSH
57584: LD_INT 22
57586: PUSH
57587: LD_EXP 6
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 21
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PPUSH
57610: CALL_OW 69
57614: ST_TO_ADDR
// end ; end_of_file
57615: LD_VAR 0 1
57619: RET
// export function EndMission ; var val , all_list , un_list , name_list ; begin
57620: LD_INT 0
57622: PPUSH
57623: PPUSH
57624: PPUSH
57625: PPUSH
57626: PPUSH
// if original_gensher_people + 0 = saved_gensher_people + 0 then
57627: LD_EXP 82
57631: PUSH
57632: LD_INT 0
57634: PLUS
57635: PUSH
57636: LD_EXP 94
57640: PUSH
57641: LD_INT 0
57643: PLUS
57644: EQUAL
57645: IFFALSE 57657
// val = 1 else
57647: LD_ADDR_VAR 0 2
57651: PUSH
57652: LD_INT 1
57654: ST_TO_ADDR
57655: GO 57666
// val = - 1 ;
57657: LD_ADDR_VAR 0 2
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: ST_TO_ADDR
// AddMedal ( GensherPeople , val ) ;
57666: LD_STRING GensherPeople
57668: PPUSH
57669: LD_VAR 0 2
57673: PPUSH
57674: CALL_OW 101
// if val = 1 then
57678: LD_VAR 0 2
57682: PUSH
57683: LD_INT 1
57685: EQUAL
57686: IFFALSE 57700
// SaveVariable ( 1 , AllGensherPeopleSaved_11_cont ) else
57688: LD_INT 1
57690: PPUSH
57691: LD_STRING AllGensherPeopleSaved_11_cont
57693: PPUSH
57694: CALL_OW 39
57698: GO 57710
// SaveVariable ( 0 , AllGensherPeopleSaved_11_cont ) ;
57700: LD_INT 0
57702: PPUSH
57703: LD_STRING AllGensherPeopleSaved_11_cont
57705: PPUSH
57706: CALL_OW 39
// if cameras_placed then
57710: LD_EXP 91
57714: IFFALSE 57726
// val = 1 else
57716: LD_ADDR_VAR 0 2
57720: PUSH
57721: LD_INT 1
57723: ST_TO_ADDR
57724: GO 57760
// if Researched ( you , tech_HidCam ) then
57726: LD_EXP 2
57730: PPUSH
57731: LD_INT 17
57733: PPUSH
57734: CALL_OW 325
57738: IFFALSE 57751
// val = - 1 else
57740: LD_ADDR_VAR 0 2
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: ST_TO_ADDR
57749: GO 57760
// val = - 2 ;
57751: LD_ADDR_VAR 0 2
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: ST_TO_ADDR
// AddMedal ( HiddenCamera , val ) ;
57760: LD_STRING HiddenCamera
57762: PPUSH
57763: LD_VAR 0 2
57767: PPUSH
57768: CALL_OW 101
// if russian_interference_points <= [ 11 , 8 , 5 ] [ difficulty ] then
57772: LD_EXP 96
57776: PUSH
57777: LD_INT 11
57779: PUSH
57780: LD_INT 8
57782: PUSH
57783: LD_INT 5
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: LIST
57790: PUSH
57791: LD_OWVAR 67
57795: ARRAY
57796: LESSEQUAL
57797: IFFALSE 57809
// val = 1 else
57799: LD_ADDR_VAR 0 2
57803: PUSH
57804: LD_INT 1
57806: ST_TO_ADDR
57807: GO 57818
// val = - 1 ;
57809: LD_ADDR_VAR 0 2
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: ST_TO_ADDR
// AddMedal ( RussianInterference , val ) ;
57818: LD_STRING RussianInterference
57820: PPUSH
57821: LD_VAR 0 2
57825: PPUSH
57826: CALL_OW 101
// GiveMedals ( Medals ) ;
57830: LD_STRING Medals
57832: PPUSH
57833: CALL_OW 102
// all_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff GetApes ( you ) ;
57837: LD_ADDR_VAR 0 3
57841: PUSH
57842: LD_INT 22
57844: PUSH
57845: LD_EXP 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 21
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PPUSH
57868: CALL_OW 69
57872: PUSH
57873: LD_EXP 2
57877: PPUSH
57878: CALL 43816 0 1
57882: DIFF
57883: ST_TO_ADDR
// if IsLive ( Gonzo ) then
57884: LD_EXP 22
57888: PPUSH
57889: CALL_OW 300
57893: IFFALSE 57911
// all_list = all_list ^ Gonzo ;
57895: LD_ADDR_VAR 0 3
57899: PUSH
57900: LD_VAR 0 3
57904: PUSH
57905: LD_EXP 22
57909: ADD
57910: ST_TO_ADDR
// RewardPeople ( all_list ) ;
57911: LD_VAR 0 3
57915: PPUSH
57916: CALL_OW 43
// SetLastMission ( all_list , 16 ) ;
57920: LD_VAR 0 3
57924: PPUSH
57925: LD_INT 16
57927: PPUSH
57928: CALL_OW 245
// SaveCharacters ( Heike , Heike_11_cont ) ;
57932: LD_EXP 9
57936: PPUSH
57937: LD_STRING Heike_11_cont
57939: PPUSH
57940: CALL_OW 38
// SaveCharacters ( Gensher , Gensher_11_cont ) ;
57944: LD_EXP 23
57948: PPUSH
57949: LD_STRING Gensher_11_cont
57951: PPUSH
57952: CALL_OW 38
// SaveVariable ( oswald_is_substitute , Oswald_is_substitute_11_generic ) ;
57956: LD_EXP 80
57960: PPUSH
57961: LD_STRING Oswald_is_substitute_11_generic
57963: PPUSH
57964: CALL_OW 39
// SaveVariable ( kurt_is_substitute , Kurt_is_substitute_11_generic ) ;
57968: LD_EXP 81
57972: PPUSH
57973: LD_STRING Kurt_is_substitute_11_generic
57975: PPUSH
57976: CALL_OW 39
// un_list = [ Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ] ;
57980: LD_ADDR_VAR 0 4
57984: PUSH
57985: LD_EXP 10
57989: PUSH
57990: LD_EXP 11
57994: PUSH
57995: LD_EXP 12
57999: PUSH
58000: LD_EXP 13
58004: PUSH
58005: LD_EXP 14
58009: PUSH
58010: LD_EXP 15
58014: PUSH
58015: LD_EXP 16
58019: PUSH
58020: LD_EXP 17
58024: PUSH
58025: LD_EXP 18
58029: PUSH
58030: LD_EXP 19
58034: PUSH
58035: LD_EXP 20
58039: PUSH
58040: LD_EXP 21
58044: PUSH
58045: LD_EXP 22
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: ST_TO_ADDR
// name_list = [ Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ] ;
58065: LD_ADDR_VAR 0 5
58069: PUSH
58070: LD_STRING Sonya
58072: PUSH
58073: LD_STRING Oswald
58075: PUSH
58076: LD_STRING Ralph
58078: PUSH
58079: LD_STRING Kowalski
58081: PUSH
58082: LD_STRING Evelyn
58084: PUSH
58085: LD_STRING Suze
58087: PUSH
58088: LD_STRING Olaf
58090: PUSH
58091: LD_STRING Kurt
58093: PUSH
58094: LD_STRING Dwayne
58096: PUSH
58097: LD_STRING MarkB
58099: PUSH
58100: LD_STRING Aviradze
58102: PUSH
58103: LD_STRING Swansson
58105: PUSH
58106: LD_STRING Gonzo
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// for val = 1 to un_list do
58124: LD_ADDR_VAR 0 2
58128: PUSH
58129: DOUBLE
58130: LD_INT 1
58132: DEC
58133: ST_TO_ADDR
58134: LD_VAR 0 4
58138: PUSH
58139: FOR_TO
58140: IFFALSE 58192
// if un_list [ val ] in all_list then
58142: LD_VAR 0 4
58146: PUSH
58147: LD_VAR 0 2
58151: ARRAY
58152: PUSH
58153: LD_VAR 0 3
58157: IN
58158: IFFALSE 58190
// SaveCharacters ( un_list [ val ] , name_list [ val ] & _11_cont ) ;
58160: LD_VAR 0 4
58164: PUSH
58165: LD_VAR 0 2
58169: ARRAY
58170: PPUSH
58171: LD_VAR 0 5
58175: PUSH
58176: LD_VAR 0 2
58180: ARRAY
58181: PUSH
58182: LD_STRING _11_cont
58184: STR
58185: PPUSH
58186: CALL_OW 38
58190: GO 58139
58192: POP
58193: POP
// SaveCharacters ( all_list diff ( Heike ^ Khattam ^ un_list ) , Others_11_cont ) ;
58194: LD_VAR 0 3
58198: PUSH
58199: LD_EXP 9
58203: PUSH
58204: LD_EXP 26
58208: ADD
58209: PUSH
58210: LD_VAR 0 4
58214: ADD
58215: DIFF
58216: PPUSH
58217: LD_STRING Others_11_cont
58219: PPUSH
58220: CALL_OW 38
// if GetLives ( Khattam ) > 0 then
58224: LD_EXP 26
58228: PPUSH
58229: CALL_OW 256
58233: PUSH
58234: LD_INT 0
58236: GREATER
58237: IFFALSE 58251
// SaveCharacters ( Khattam , Khattam_11_cont ) ;
58239: LD_EXP 26
58243: PPUSH
58244: LD_STRING Khattam_11_cont
58246: PPUSH
58247: CALL_OW 38
// SaveVariable ( khattam_choice = 1 , Khattam_accepted_11_cont ) ;
58251: LD_EXP 95
58255: PUSH
58256: LD_INT 1
58258: EQUAL
58259: PPUSH
58260: LD_STRING Khattam_accepted_11_cont
58262: PPUSH
58263: CALL_OW 39
// InGameOn ;
58267: CALL_OW 8
// for val in all_units do
58271: LD_ADDR_VAR 0 2
58275: PUSH
58276: LD_OWVAR 3
58280: PUSH
58281: FOR_IN
58282: IFFALSE 58295
// DestroyUnit ( val ) ;
58284: LD_VAR 0 2
58288: PPUSH
58289: CALL_OW 65
58293: GO 58281
58295: POP
58296: POP
// ResetFog ;
58297: CALL_OW 335
// wait ( 0 0$0.5 ) ;
58301: LD_INT 18
58303: PPUSH
58304: CALL_OW 67
// repeat Query ( QCutscene1 ) ;
58308: LD_STRING QCutscene1
58310: PPUSH
58311: CALL_OW 97
// val = Query ( QCutscene2 ) ;
58315: LD_ADDR_VAR 0 2
58319: PUSH
58320: LD_STRING QCutscene2
58322: PPUSH
58323: CALL_OW 97
58327: ST_TO_ADDR
// until val = 3 or val = 2 ;
58328: LD_VAR 0 2
58332: PUSH
58333: LD_INT 3
58335: EQUAL
58336: PUSH
58337: LD_VAR 0 2
58341: PUSH
58342: LD_INT 2
58344: EQUAL
58345: OR
58346: IFFALSE 58308
// wait ( 0 0$0.5 ) ;
58348: LD_INT 18
58350: PPUSH
58351: CALL_OW 67
// SetNextMission ( val - 1 ) ;
58355: LD_VAR 0 2
58359: PUSH
58360: LD_INT 1
58362: MINUS
58363: PPUSH
58364: CALL_OW 536
// InGameOff ;
58368: CALL_OW 9
// YouWin ;
58372: CALL_OW 103
// end ;
58376: LD_VAR 0 1
58380: RET
