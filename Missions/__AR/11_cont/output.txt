// export testing , logsenabled ; export you , russians , nature , you_alt , americans , scout_side , americans_alt ; export Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ; export Gensher ; export Simms , Cornell , Khattam , Joan , Powell ; export ai_soldiers , ai_engineers , ai_mechanics_defend , ai_scientists , ai_commander , ai_depot , ai_labs , ai_siberite_mines ; export ai_power_plants , ai_buildings_locations , ai_vehicles_defend , ai_vehicles_attack , ai_human_pullback_hex ; export ai_building_under_construction , ai_heal_these_humans , ai_all_buildings , ai_building_constructor ; export ai_upcoming_building_data , ai_facts , ai_armouries , ai_bunkers , ai_oil_mine , ai_fact_extensions ; export ai_near_base_dist , ai_going_to_attack_this_base , ai_refuel_vehicles_list , ai_turrets , ai_control_tower ; export ai_vehicle_attack_delay , ai_bases , ai_has_switched_base_target , ai_cargo_bay , ai_cargo_bay_under_construction , ai_apemen_engineers ; export ai_attacking_soldiers , ai_attacking_scientists , ai_humans_ready_to_attack , ai_retreating_attacking_humans , ai_human_attack_delay ; export ai_excepted_buildings , ai_new_attack_commencing ; export ai_crane , ai_time_shift_data , ai_time_shift_hexes , ai_time_shift_hexes_underway , ai_attacking_unit_hex_index ; export ai_contact_time , ai_attack_ground_info_initial , ai_attack_ground_info_sustain , ai_captured_buildings , ai_vehicles_being_repaired ; export oswald_is_substitute , kurt_is_substitute , original_gensher_people , russian_attack_strategy , special_russian_attackers ; export yashin_alive , num_russian_attacks , gensher_spec_research_progress , game_phase , first_teleport , camera_engineers ; export cameras_placed , scout_event_over , russians_allowed_to_attack_gensher_time , saved_gensher_people , khattam_choice ; export russian_interference_points , camera_engineers_task_map ; export gensher_bunker_apes , gensher_mortars ; export us_reserve_troops , russian_reserve_troops ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// testing = false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// logsenabled = true ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 1
  23: ST_TO_ADDR
// ai_bases = [ 1 , 2 , 3 ] ;
  24: LD_ADDR_EXP 59
  28: PUSH
  29: LD_INT 1
  31: PUSH
  32: LD_INT 2
  34: PUSH
  35: LD_INT 3
  37: PUSH
  38: EMPTY
  39: LIST
  40: LIST
  41: LIST
  42: ST_TO_ADDR
// ai_soldiers = [ [ ] , [ ] , [ ] ] ;
  43: LD_ADDR_EXP 30
  47: PUSH
  48: EMPTY
  49: PUSH
  50: EMPTY
  51: PUSH
  52: EMPTY
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: LIST
  58: ST_TO_ADDR
// ai_attacking_soldiers = [ [ ] , [ ] , [ ] ] ;
  59: LD_ADDR_EXP 64
  63: PUSH
  64: EMPTY
  65: PUSH
  66: EMPTY
  67: PUSH
  68: EMPTY
  69: PUSH
  70: EMPTY
  71: LIST
  72: LIST
  73: LIST
  74: ST_TO_ADDR
// ai_engineers = [ [ ] , [ ] , [ ] ] ;
  75: LD_ADDR_EXP 31
  79: PUSH
  80: EMPTY
  81: PUSH
  82: EMPTY
  83: PUSH
  84: EMPTY
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: LIST
  90: ST_TO_ADDR
// ai_mechanics_defend = [ [ ] , [ ] , [ ] ] ;
  91: LD_ADDR_EXP 32
  95: PUSH
  96: EMPTY
  97: PUSH
  98: EMPTY
  99: PUSH
 100: EMPTY
 101: PUSH
 102: EMPTY
 103: LIST
 104: LIST
 105: LIST
 106: ST_TO_ADDR
// ai_scientists = [ [ ] , [ ] , [ ] ] ;
 107: LD_ADDR_EXP 33
 111: PUSH
 112: EMPTY
 113: PUSH
 114: EMPTY
 115: PUSH
 116: EMPTY
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// ai_attacking_scientists = [ [ ] , [ ] , [ ] ] ;
 123: LD_ADDR_EXP 65
 127: PUSH
 128: EMPTY
 129: PUSH
 130: EMPTY
 131: PUSH
 132: EMPTY
 133: PUSH
 134: EMPTY
 135: LIST
 136: LIST
 137: LIST
 138: ST_TO_ADDR
// ai_apemen_engineers = [ [ ] , [ ] , [ ] ] ;
 139: LD_ADDR_EXP 63
 143: PUSH
 144: EMPTY
 145: PUSH
 146: EMPTY
 147: PUSH
 148: EMPTY
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: ST_TO_ADDR
// ai_depot = [ 0 , 0 , 0 ] ;
 155: LD_ADDR_EXP 35
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: LIST
 173: ST_TO_ADDR
// ai_labs = [ [ ] , [ ] , [ ] ] ;
 174: LD_ADDR_EXP 36
 178: PUSH
 179: EMPTY
 180: PUSH
 181: EMPTY
 182: PUSH
 183: EMPTY
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: ST_TO_ADDR
// ai_facts = [ [ ] , [ ] , [ ] ] ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: EMPTY
 196: PUSH
 197: EMPTY
 198: PUSH
 199: EMPTY
 200: PUSH
 201: EMPTY
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// ai_armouries = [ [ ] , [ ] , [ ] ] ;
 206: LD_ADDR_EXP 49
 210: PUSH
 211: EMPTY
 212: PUSH
 213: EMPTY
 214: PUSH
 215: EMPTY
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: ST_TO_ADDR
// ai_bunkers = [ [ ] , [ ] , [ ] ] ;
 222: LD_ADDR_EXP 50
 226: PUSH
 227: EMPTY
 228: PUSH
 229: EMPTY
 230: PUSH
 231: EMPTY
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: ST_TO_ADDR
// ai_turrets = [ [ ] , [ ] , [ ] ] ;
 238: LD_ADDR_EXP 56
 242: PUSH
 243: EMPTY
 244: PUSH
 245: EMPTY
 246: PUSH
 247: EMPTY
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// ai_oil_mine = [ 0 , 0 , 0 ] ;
 254: LD_ADDR_EXP 51
 258: PUSH
 259: LD_INT 0
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// ai_siberite_mines = [ [ ] , [ ] , [ ] ] ;
 273: LD_ADDR_EXP 37
 277: PUSH
 278: EMPTY
 279: PUSH
 280: EMPTY
 281: PUSH
 282: EMPTY
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: ST_TO_ADDR
// ai_fact_extensions = [ [ ] , [ ] , [ ] ] ;
 289: LD_ADDR_EXP 52
 293: PUSH
 294: EMPTY
 295: PUSH
 296: EMPTY
 297: PUSH
 298: EMPTY
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// ai_power_plants = [ [ ] , [ ] , [ ] ] ;
 305: LD_ADDR_EXP 38
 309: PUSH
 310: EMPTY
 311: PUSH
 312: EMPTY
 313: PUSH
 314: EMPTY
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: ST_TO_ADDR
// ai_control_tower = [ 0 , 0 , 0 ] ;
 321: LD_ADDR_EXP 57
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// ai_buildings_locations = [ [ ] , [ ] , [ ] ] ;
 340: LD_ADDR_EXP 39
 344: PUSH
 345: EMPTY
 346: PUSH
 347: EMPTY
 348: PUSH
 349: EMPTY
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: ST_TO_ADDR
// ai_captured_buildings = [ [ ] , [ ] , [ ] ] ;
 356: LD_ADDR_EXP 79
 360: PUSH
 361: EMPTY
 362: PUSH
 363: EMPTY
 364: PUSH
 365: EMPTY
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// ai_vehicles_defend = [ [ ] , [ ] , [ ] ] ;
 372: LD_ADDR_EXP 40
 376: PUSH
 377: EMPTY
 378: PUSH
 379: EMPTY
 380: PUSH
 381: EMPTY
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// ai_vehicles_attack = [ [ ] , [ ] , [ ] ] ;
 388: LD_ADDR_EXP 41
 392: PUSH
 393: EMPTY
 394: PUSH
 395: EMPTY
 396: PUSH
 397: EMPTY
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: ST_TO_ADDR
// ai_vehicles_being_repaired = [ [ ] , [ ] , [ ] ] ;
 404: LD_ADDR_EXP 80
 408: PUSH
 409: EMPTY
 410: PUSH
 411: EMPTY
 412: PUSH
 413: EMPTY
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: LIST
 419: ST_TO_ADDR
// ai_refuel_vehicles_list = [ [ ] , [ ] , [ ] ] ;
 420: LD_ADDR_EXP 55
 424: PUSH
 425: EMPTY
 426: PUSH
 427: EMPTY
 428: PUSH
 429: EMPTY
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: LIST
 435: ST_TO_ADDR
// ai_human_pullback_hex = [ [ 106 , 40 ] , [ 75 , 22 ] , [ 60 , 81 ] ] ;
 436: LD_ADDR_EXP 42
 440: PUSH
 441: LD_INT 106
 443: PUSH
 444: LD_INT 40
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 75
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 60
 463: PUSH
 464: LD_INT 81
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: ST_TO_ADDR
// ai_building_under_construction = [ 0 , 0 , 0 ] ;
 476: LD_ADDR_EXP 43
 480: PUSH
 481: LD_INT 0
 483: PUSH
 484: LD_INT 0
 486: PUSH
 487: LD_INT 0
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: LIST
 494: ST_TO_ADDR
// ai_heal_these_humans = [ [ ] , [ ] , [ ] ] ;
 495: LD_ADDR_EXP 44
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: ST_TO_ADDR
// ai_all_buildings = [ [ ] , [ ] , [ ] ] ;
 511: LD_ADDR_EXP 45
 515: PUSH
 516: EMPTY
 517: PUSH
 518: EMPTY
 519: PUSH
 520: EMPTY
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// ai_building_constructor = [ 0 , 0 , 0 ] ;
 527: LD_ADDR_EXP 46
 531: PUSH
 532: LD_INT 0
 534: PUSH
 535: LD_INT 0
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: ST_TO_ADDR
// ai_upcoming_building_data = [ [ ] , [ ] , [ ] ] ;
 546: LD_ADDR_EXP 47
 550: PUSH
 551: EMPTY
 552: PUSH
 553: EMPTY
 554: PUSH
 555: EMPTY
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// ai_near_base_dist = 18 ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 18
 569: ST_TO_ADDR
// ai_vehicle_attack_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
 570: LD_ADDR_EXP 58
 574: PUSH
 575: LD_INT 0
 577: PUSH
 578: LD_INT 0
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// ai_human_attack_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
 589: LD_ADDR_EXP 68
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: ST_TO_ADDR
// ai_cargo_bay = [ 0 , 0 , 0 ] ;
 608: LD_ADDR_EXP 61
 612: PUSH
 613: LD_INT 0
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 0
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: LIST
 626: ST_TO_ADDR
// ai_cargo_bay_under_construction = [ false , false , false ] ;
 627: LD_ADDR_EXP 62
 631: PUSH
 632: LD_INT 0
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: LD_INT 0
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: ST_TO_ADDR
// ai_crane = [ 0 , 0 , 0 ] ;
 646: LD_ADDR_EXP 71
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// ai_attacking_unit_hex_index = [ [ ] , [ ] , [ ] ] ;
 665: LD_ADDR_EXP 75
 669: PUSH
 670: EMPTY
 671: PUSH
 672: EMPTY
 673: PUSH
 674: EMPTY
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: ST_TO_ADDR
// ai_retreating_attacking_humans = [ [ ] , [ ] , [ ] ] ;
 681: LD_ADDR_EXP 67
 685: PUSH
 686: EMPTY
 687: PUSH
 688: EMPTY
 689: PUSH
 690: EMPTY
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: ST_TO_ADDR
// ai_excepted_buildings = [ [ ] , [ ] , [ ] ] ;
 697: LD_ADDR_EXP 69
 701: PUSH
 702: EMPTY
 703: PUSH
 704: EMPTY
 705: PUSH
 706: EMPTY
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
// ai_new_attack_commencing = [ false , false , false ] ;
 713: LD_ADDR_EXP 70
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: LIST
 731: ST_TO_ADDR
// ai_time_shift_data = [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 732: LD_ADDR_EXP 72
 736: PUSH
 737: EMPTY
 738: PUSH
 739: EMPTY
 740: PUSH
 741: EMPTY
 742: PUSH
 743: EMPTY
 744: PUSH
 745: EMPTY
 746: PUSH
 747: EMPTY
 748: PUSH
 749: EMPTY
 750: PUSH
 751: EMPTY
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// ai_time_shift_hexes = [ [ ] , [ ] , [ ] ] ;
 763: LD_ADDR_EXP 73
 767: PUSH
 768: EMPTY
 769: PUSH
 770: EMPTY
 771: PUSH
 772: EMPTY
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: ST_TO_ADDR
// ai_time_shift_hexes_underway = [ [ ] , [ ] , [ ] ] ;
 779: LD_ADDR_EXP 74
 783: PUSH
 784: EMPTY
 785: PUSH
 786: EMPTY
 787: PUSH
 788: EMPTY
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: ST_TO_ADDR
// Initiate_ai_contact_time ;
 795: CALL 1047 0 0
// ai_attack_ground_info_initial = [ ] ;
 799: LD_ADDR_EXP 77
 803: PUSH
 804: EMPTY
 805: ST_TO_ADDR
// ai_attack_ground_info_sustain = [ ] ;
 806: LD_ADDR_EXP 78
 810: PUSH
 811: EMPTY
 812: ST_TO_ADDR
// oswald_is_substitute = false ;
 813: LD_ADDR_EXP 81
 817: PUSH
 818: LD_INT 0
 820: ST_TO_ADDR
// kurt_is_substitute = false ;
 821: LD_ADDR_EXP 82
 825: PUSH
 826: LD_INT 0
 828: ST_TO_ADDR
// original_gensher_people = [ ] ;
 829: LD_ADDR_EXP 83
 833: PUSH
 834: EMPTY
 835: ST_TO_ADDR
// russian_attack_strategy = - 1 ;
 836: LD_ADDR_EXP 84
 840: PUSH
 841: LD_INT 1
 843: NEG
 844: ST_TO_ADDR
// special_russian_attackers = [ ] ;
 845: LD_ADDR_EXP 85
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// yashin_alive = TestCharacters ( Yashin_08 ) ;
 852: LD_ADDR_EXP 86
 856: PUSH
 857: LD_STRING Yashin_08
 859: PPUSH
 860: CALL_OW 28
 864: ST_TO_ADDR
// num_russian_attacks = 0 ;
 865: LD_ADDR_EXP 87
 869: PUSH
 870: LD_INT 0
 872: ST_TO_ADDR
// gensher_spec_research_progress = 0 ;
 873: LD_ADDR_EXP 88
 877: PUSH
 878: LD_INT 0
 880: ST_TO_ADDR
// game_phase = 1 ;
 881: LD_ADDR_EXP 89
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// first_teleport = true ;
 889: LD_ADDR_EXP 90
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
// camera_engineers = [ ] ;
 897: LD_ADDR_EXP 91
 901: PUSH
 902: EMPTY
 903: ST_TO_ADDR
// cameras_placed = false ;
 904: LD_ADDR_EXP 92
 908: PUSH
 909: LD_INT 0
 911: ST_TO_ADDR
// scout_event_over = false ;
 912: LD_ADDR_EXP 93
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = [ 30 30$0 , 25 25$0 , 20 20$0 ] [ difficulty ] ;
 920: LD_ADDR_EXP 94
 924: PUSH
 925: LD_INT 63000
 927: PUSH
 928: LD_INT 52500
 930: PUSH
 931: LD_INT 42000
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: PUSH
 939: LD_OWVAR 67
 943: ARRAY
 944: ST_TO_ADDR
// saved_gensher_people = [ ] ;
 945: LD_ADDR_EXP 95
 949: PUSH
 950: EMPTY
 951: ST_TO_ADDR
// khattam_choice = 0 ;
 952: LD_ADDR_EXP 96
 956: PUSH
 957: LD_INT 0
 959: ST_TO_ADDR
// russian_interference_points = 0 ;
 960: LD_ADDR_EXP 97
 964: PUSH
 965: LD_INT 0
 967: ST_TO_ADDR
// us_reserve_troops = [ 20 , 30 , 60 ] [ difficulty ] ;
 968: LD_ADDR_EXP 101
 972: PUSH
 973: LD_INT 20
 975: PUSH
 976: LD_INT 30
 978: PUSH
 979: LD_INT 60
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: LD_OWVAR 67
 991: ARRAY
 992: ST_TO_ADDR
// russian_reserve_troops = [ 20 , 30 , 60 ] [ difficulty ] ;
 993: LD_ADDR_EXP 102
 997: PUSH
 998: LD_INT 20
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 60
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: ST_TO_ADDR
// PrepareSides ;
1018: CALL 1328 0 0
// PrepareNature ;
1022: CALL 1781 0 0
// PrepareArabians ;
1026: CALL 2305 0 0
// ScanBuildings ;
1030: CALL 6158 0 0
// PrepareComputerSides ;
1034: CALL 8645 0 0
// InitiateTimeShiftData ;
1038: CALL 1131 0 0
// Action ;
1042: CALL 10431 0 0
// end ;
1046: END
// function Initiate_ai_contact_time ; var i ; begin
1047: LD_INT 0
1049: PPUSH
1050: PPUSH
// ai_contact_time = [ ] ;
1051: LD_ADDR_EXP 76
1055: PUSH
1056: EMPTY
1057: ST_TO_ADDR
// for i = 1 to 8 do
1058: LD_ADDR_VAR 0 2
1062: PUSH
1063: DOUBLE
1064: LD_INT 1
1066: DEC
1067: ST_TO_ADDR
1068: LD_INT 8
1070: PUSH
1071: FOR_TO
1072: IFFALSE 1124
// ai_contact_time = ai_contact_time ^ [ [ 100000 , 100000 , 100000 , 100000 , 100000 , 100000 , 100000 , 100000 ] ] ;
1074: LD_ADDR_EXP 76
1078: PUSH
1079: LD_EXP 76
1083: PUSH
1084: LD_INT 100000
1086: PUSH
1087: LD_INT 100000
1089: PUSH
1090: LD_INT 100000
1092: PUSH
1093: LD_INT 100000
1095: PUSH
1096: LD_INT 100000
1098: PUSH
1099: LD_INT 100000
1101: PUSH
1102: LD_INT 100000
1104: PUSH
1105: LD_INT 100000
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: EMPTY
1119: LIST
1120: ADD
1121: ST_TO_ADDR
1122: GO 1071
1124: POP
1125: POP
// end ;
1126: LD_VAR 0 1
1130: RET
// function InitiateTimeShiftData ; var side ; begin
1131: LD_INT 0
1133: PPUSH
1134: PPUSH
// for side = 1 to 8 do
1135: LD_ADDR_VAR 0 2
1139: PUSH
1140: DOUBLE
1141: LD_INT 1
1143: DEC
1144: ST_TO_ADDR
1145: LD_INT 8
1147: PUSH
1148: FOR_TO
1149: IFFALSE 1321
// if Researched ( side , tech_st3 ) then
1151: LD_VAR 0 2
1155: PPUSH
1156: LD_INT 65
1158: PPUSH
1159: CALL_OW 325
1163: IFFALSE 1197
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 420 , 10 ] ) else
1165: LD_ADDR_EXP 72
1169: PUSH
1170: LD_EXP 72
1174: PPUSH
1175: LD_VAR 0 2
1179: PPUSH
1180: LD_INT 420
1182: PUSH
1183: LD_INT 10
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 1
1194: ST_TO_ADDR
1195: GO 1319
// if Researched ( side , tech_st2 ) then
1197: LD_VAR 0 2
1201: PPUSH
1202: LD_INT 64
1204: PPUSH
1205: CALL_OW 325
1209: IFFALSE 1243
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 420 , 10 ] ) else
1211: LD_ADDR_EXP 72
1215: PUSH
1216: LD_EXP 72
1220: PPUSH
1221: LD_VAR 0 2
1225: PPUSH
1226: LD_INT 420
1228: PUSH
1229: LD_INT 10
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PPUSH
1236: CALL_OW 1
1240: ST_TO_ADDR
1241: GO 1319
// if Researched ( side , tech_st1 ) then
1243: LD_VAR 0 2
1247: PPUSH
1248: LD_INT 63
1250: PPUSH
1251: CALL_OW 325
1255: IFFALSE 1289
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 320 , 7 ] ) else
1257: LD_ADDR_EXP 72
1261: PUSH
1262: LD_EXP 72
1266: PPUSH
1267: LD_VAR 0 2
1271: PPUSH
1272: LD_INT 320
1274: PUSH
1275: LD_INT 7
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 1
1286: ST_TO_ADDR
1287: GO 1319
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 215 , 4 ] ) ;
1289: LD_ADDR_EXP 72
1293: PUSH
1294: LD_EXP 72
1298: PPUSH
1299: LD_VAR 0 2
1303: PPUSH
1304: LD_INT 215
1306: PUSH
1307: LD_INT 4
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PPUSH
1314: CALL_OW 1
1318: ST_TO_ADDR
1319: GO 1148
1321: POP
1322: POP
// end ;
1323: LD_VAR 0 1
1327: RET
// function PrepareSides ; begin
1328: LD_INT 0
1330: PPUSH
// nature = 0 ;
1331: LD_ADDR_EXP 5
1335: PUSH
1336: LD_INT 0
1338: ST_TO_ADDR
// americans = 1 ;
1339: LD_ADDR_EXP 7
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// you = 2 ;
1347: LD_ADDR_EXP 3
1351: PUSH
1352: LD_INT 2
1354: ST_TO_ADDR
// russians = 3 ;
1355: LD_ADDR_EXP 4
1359: PUSH
1360: LD_INT 3
1362: ST_TO_ADDR
// americans_alt = 4 ;
1363: LD_ADDR_EXP 9
1367: PUSH
1368: LD_INT 4
1370: ST_TO_ADDR
// you_alt = 5 ;
1371: LD_ADDR_EXP 6
1375: PUSH
1376: LD_INT 5
1378: ST_TO_ADDR
// scout_side = 8 ;
1379: LD_ADDR_EXP 8
1383: PUSH
1384: LD_INT 8
1386: ST_TO_ADDR
// SetAttitude ( americans , you , att_enemy , true ) ;
1387: LD_EXP 7
1391: PPUSH
1392: LD_EXP 3
1396: PPUSH
1397: LD_INT 2
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL_OW 80
// SetAttitude ( americans , russians , att_enemy , true ) ;
1407: LD_EXP 7
1411: PPUSH
1412: LD_EXP 4
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: CALL_OW 80
// SetAttitude ( americans , americans_alt , att_friend , true ) ;
1427: LD_EXP 7
1431: PPUSH
1432: LD_EXP 9
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 80
// SetAttitude ( americans , you_alt , att_friend , true ) ;
1447: LD_EXP 7
1451: PPUSH
1452: LD_EXP 6
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: CALL_OW 80
// SetAttitude ( americans , scout_side , att_friend , true ) ;
1467: LD_EXP 7
1471: PPUSH
1472: LD_EXP 8
1476: PPUSH
1477: LD_INT 1
1479: PPUSH
1480: LD_INT 1
1482: PPUSH
1483: CALL_OW 80
// SetAttitude ( you , russians , att_enemy , true ) ;
1487: LD_EXP 3
1491: PPUSH
1492: LD_EXP 4
1496: PPUSH
1497: LD_INT 2
1499: PPUSH
1500: LD_INT 1
1502: PPUSH
1503: CALL_OW 80
// SetAttitude ( you , americans_alt , att_enemy , true ) ;
1507: LD_EXP 3
1511: PPUSH
1512: LD_EXP 9
1516: PPUSH
1517: LD_INT 2
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: CALL_OW 80
// SetAttitude ( you , you_alt , att_friend , true ) ;
1527: LD_EXP 3
1531: PPUSH
1532: LD_EXP 6
1536: PPUSH
1537: LD_INT 1
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: CALL_OW 80
// SetAttitude ( you , scout_side , att_friend , true ) ;
1547: LD_EXP 3
1551: PPUSH
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 1
1559: PPUSH
1560: LD_INT 1
1562: PPUSH
1563: CALL_OW 80
// SetAttitude ( russians , americans_alt , att_enemy , true ) ;
1567: LD_EXP 4
1571: PPUSH
1572: LD_EXP 9
1576: PPUSH
1577: LD_INT 2
1579: PPUSH
1580: LD_INT 1
1582: PPUSH
1583: CALL_OW 80
// SetAttitude ( russians , you_alt , att_enemy , true ) ;
1587: LD_EXP 4
1591: PPUSH
1592: LD_EXP 6
1596: PPUSH
1597: LD_INT 2
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: CALL_OW 80
// SetAttitude ( russians , scout_side , att_friend , true ) ;
1607: LD_EXP 4
1611: PPUSH
1612: LD_EXP 8
1616: PPUSH
1617: LD_INT 1
1619: PPUSH
1620: LD_INT 1
1622: PPUSH
1623: CALL_OW 80
// SetAttitude ( americans_alt , you_alt , att_enemy , true ) ;
1627: LD_EXP 9
1631: PPUSH
1632: LD_EXP 6
1636: PPUSH
1637: LD_INT 2
1639: PPUSH
1640: LD_INT 1
1642: PPUSH
1643: CALL_OW 80
// SetAttitude ( americans_alt , scout_side , att_friend , true ) ;
1647: LD_EXP 9
1651: PPUSH
1652: LD_EXP 8
1656: PPUSH
1657: LD_INT 1
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: CALL_OW 80
// SetAttitude ( you_alt , scout_side , att_friend , true ) ;
1667: LD_EXP 6
1671: PPUSH
1672: LD_EXP 8
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: CALL_OW 80
// ChangeSideFog ( you_alt , you ) ;
1687: LD_EXP 6
1691: PPUSH
1692: LD_EXP 3
1696: PPUSH
1697: CALL_OW 343
// if difficulty = 3 then
1701: LD_OWVAR 67
1705: PUSH
1706: LD_INT 3
1708: EQUAL
1709: IFFALSE 1726
// SetTech ( tech_opto1 , americans , state_researched ) ;
1711: LD_INT 60
1713: PPUSH
1714: LD_EXP 7
1718: PPUSH
1719: LD_INT 2
1721: PPUSH
1722: CALL_OW 322
// if difficulty = 3 then
1726: LD_OWVAR 67
1730: PUSH
1731: LD_INT 3
1733: EQUAL
1734: IFFALSE 1751
// SetTech ( tech_comp3 , russians , state_researched ) ;
1736: LD_INT 59
1738: PPUSH
1739: LD_EXP 4
1743: PPUSH
1744: LD_INT 2
1746: PPUSH
1747: CALL_OW 322
// if difficulty = 3 then
1751: LD_OWVAR 67
1755: PUSH
1756: LD_INT 3
1758: EQUAL
1759: IFFALSE 1776
// SetTech ( tech_st3 , russians , state_researched ) ;
1761: LD_INT 65
1763: PPUSH
1764: LD_EXP 4
1768: PPUSH
1769: LD_INT 2
1771: PPUSH
1772: CALL_OW 322
// end ;
1776: LD_VAR 0 1
1780: RET
// function PrepareNature ; var i , spots , num , agres , count , temp_unit ; begin
1781: LD_INT 0
1783: PPUSH
1784: PPUSH
1785: PPUSH
1786: PPUSH
1787: PPUSH
1788: PPUSH
1789: PPUSH
// for i in FilterAllUnits ( [ f_side , nature ] ) do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_INT 22
1797: PUSH
1798: LD_EXP 5
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PPUSH
1807: CALL_OW 69
1811: PUSH
1812: FOR_IN
1813: IFFALSE 1826
// DestroyUnit ( i ) ;
1815: LD_VAR 0 2
1819: PPUSH
1820: CALL_OW 65
1824: GO 1812
1826: POP
1827: POP
// spots = [ [ 158 , 91 ] , [ 140 , 107 ] , [ 37 , 27 ] , [ 22 , 4 ] , [ 38 , 10 ] , [ 50 , 23 ] , [ 40 , 20 ] , [ 158 , 110 ] , [ 159 , 118 ] , [ 146 , 115 ] , [ 135 , 100 ] , [ 155 , 115 ] ] ;
1828: LD_ADDR_VAR 0 3
1832: PUSH
1833: LD_INT 158
1835: PUSH
1836: LD_INT 91
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 140
1845: PUSH
1846: LD_INT 107
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 37
1855: PUSH
1856: LD_INT 27
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 22
1865: PUSH
1866: LD_INT 4
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 38
1875: PUSH
1876: LD_INT 10
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 50
1885: PUSH
1886: LD_INT 23
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 40
1895: PUSH
1896: LD_INT 20
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: LD_INT 158
1905: PUSH
1906: LD_INT 110
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PUSH
1913: LD_INT 159
1915: PUSH
1916: LD_INT 118
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 146
1925: PUSH
1926: LD_INT 115
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PUSH
1933: LD_INT 135
1935: PUSH
1936: LD_INT 100
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 155
1945: PUSH
1946: LD_INT 115
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: ST_TO_ADDR
// InitUc ;
1967: CALL_OW 18
// InitHc ;
1971: CALL_OW 19
// uc_side = nature ;
1975: LD_ADDR_OWVAR 20
1979: PUSH
1980: LD_EXP 5
1984: ST_TO_ADDR
// uc_nation = nation_nature ;
1985: LD_ADDR_OWVAR 21
1989: PUSH
1990: LD_INT 0
1992: ST_TO_ADDR
// agres = - 10 + difficulty * 20 ;
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_INT 10
2000: NEG
2001: PUSH
2002: LD_OWVAR 67
2006: PUSH
2007: LD_INT 20
2009: MUL
2010: PLUS
2011: ST_TO_ADDR
// count = [ 15 , 13 , 10 ] [ difficulty ] ;
2012: LD_ADDR_VAR 0 6
2016: PUSH
2017: LD_INT 15
2019: PUSH
2020: LD_INT 13
2022: PUSH
2023: LD_INT 10
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: PUSH
2031: LD_OWVAR 67
2035: ARRAY
2036: ST_TO_ADDR
// hc_class = class_apeman ;
2037: LD_ADDR_OWVAR 28
2041: PUSH
2042: LD_INT 12
2044: ST_TO_ADDR
// for i = 1 to count do
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: DOUBLE
2051: LD_INT 1
2053: DEC
2054: ST_TO_ADDR
2055: LD_VAR 0 6
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2298
// begin if spots = 0 then
2063: LD_VAR 0 3
2067: PUSH
2068: LD_INT 0
2070: EQUAL
2071: IFFALSE 2077
// exit ;
2073: POP
2074: POP
2075: GO 2300
// uc_direction = Rand ( 0 , 5 ) ;
2077: LD_ADDR_OWVAR 24
2081: PUSH
2082: LD_INT 0
2084: PPUSH
2085: LD_INT 5
2087: PPUSH
2088: CALL_OW 12
2092: ST_TO_ADDR
// hc_agressivity = Rand ( - 1 * agres , agres ) ;
2093: LD_ADDR_OWVAR 35
2097: PUSH
2098: LD_INT 1
2100: NEG
2101: PUSH
2102: LD_VAR 0 5
2106: MUL
2107: PPUSH
2108: LD_VAR 0 5
2112: PPUSH
2113: CALL_OW 12
2117: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
2118: LD_ADDR_OWVAR 29
2122: PUSH
2123: LD_INT 11
2125: PPUSH
2126: LD_INT 13
2128: PPUSH
2129: CALL_OW 12
2133: PUSH
2134: LD_INT 10
2136: PPUSH
2137: LD_INT 11
2139: PPUSH
2140: CALL_OW 12
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
2149: LD_ADDR_OWVAR 27
2153: PUSH
2154: LD_INT 1
2156: PPUSH
2157: LD_INT 2
2159: PPUSH
2160: CALL_OW 12
2164: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , Rand ( 0 , 1 ) , 0 , 0 ] ;
2165: LD_ADDR_OWVAR 31
2169: PUSH
2170: LD_INT 0
2172: PPUSH
2173: LD_INT 1
2175: PPUSH
2176: CALL_OW 12
2180: PUSH
2181: LD_INT 0
2183: PPUSH
2184: LD_INT 1
2186: PPUSH
2187: CALL_OW 12
2191: PUSH
2192: LD_INT 0
2194: PUSH
2195: LD_INT 0
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: ST_TO_ADDR
// num = Rand ( 1 , spots ) ;
2204: LD_ADDR_VAR 0 4
2208: PUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_VAR 0 3
2216: PPUSH
2217: CALL_OW 12
2221: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , spots [ num ] [ 1 ] , spots [ num ] [ 2 ] , 5 , false ) ;
2222: CALL_OW 44
2226: PPUSH
2227: LD_VAR 0 3
2231: PUSH
2232: LD_VAR 0 4
2236: ARRAY
2237: PUSH
2238: LD_INT 1
2240: ARRAY
2241: PPUSH
2242: LD_VAR 0 3
2246: PUSH
2247: LD_VAR 0 4
2251: ARRAY
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: PPUSH
2257: LD_INT 5
2259: PPUSH
2260: LD_INT 0
2262: PPUSH
2263: CALL_OW 50
// if Prob ( 50 ) then
2267: LD_INT 50
2269: PPUSH
2270: CALL_OW 13
2274: IFFALSE 2296
// spots = Delete ( spots , num ) ;
2276: LD_ADDR_VAR 0 3
2280: PUSH
2281: LD_VAR 0 3
2285: PPUSH
2286: LD_VAR 0 4
2290: PPUSH
2291: CALL_OW 3
2295: ST_TO_ADDR
// end ;
2296: GO 2060
2298: POP
2299: POP
// end ;
2300: LD_VAR 0 1
2304: RET
// function PrepareArabians ; var human_list , i , temp_unit , val , k , gensher_bunker_apes ; begin
2305: LD_INT 0
2307: PPUSH
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
2312: PPUSH
2313: PPUSH
// InitHc ;
2314: CALL_OW 19
// InitUc ;
2318: CALL_OW 18
// uc_side = you ;
2322: LD_ADDR_OWVAR 20
2326: PUSH
2327: LD_EXP 3
2331: ST_TO_ADDR
// uc_nation = nation_arabian ;
2332: LD_ADDR_OWVAR 21
2336: PUSH
2337: LD_INT 2
2339: ST_TO_ADDR
// if not testing then
2340: LD_EXP 1
2344: NOT
2345: IFFALSE 2938
// begin Heike = CreateCharacter ( Heike_11_sel ) ;
2347: LD_ADDR_EXP 10
2351: PUSH
2352: LD_STRING Heike_11_sel
2354: PPUSH
2355: CALL_OW 34
2359: ST_TO_ADDR
// if TestCharacters ( Oswald_11_sel ) then
2360: LD_STRING Oswald_11_sel
2362: PPUSH
2363: CALL_OW 28
2367: IFFALSE 2384
// Oswald = CreateCharacter ( Oswald_11_sel ) else
2369: LD_ADDR_EXP 12
2373: PUSH
2374: LD_STRING Oswald_11_sel
2376: PPUSH
2377: CALL_OW 34
2381: ST_TO_ADDR
2382: GO 2392
// Oswald = 0 ;
2384: LD_ADDR_EXP 12
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
// oswald_is_substitute = LoadVariable ( Oswald_is_substitute_10 , false ) ;
2392: LD_ADDR_EXP 81
2396: PUSH
2397: LD_STRING Oswald_is_substitute_10
2399: PPUSH
2400: LD_INT 0
2402: PPUSH
2403: CALL_OW 30
2407: ST_TO_ADDR
// if TestCharacters ( Kurt_11_sel ) then
2408: LD_STRING Kurt_11_sel
2410: PPUSH
2411: CALL_OW 28
2415: IFFALSE 2432
// Kurt = CreateCharacter ( Kurt_11_sel ) else
2417: LD_ADDR_EXP 18
2421: PUSH
2422: LD_STRING Kurt_11_sel
2424: PPUSH
2425: CALL_OW 34
2429: ST_TO_ADDR
2430: GO 2440
// Kurt = 0 ;
2432: LD_ADDR_EXP 18
2436: PUSH
2437: LD_INT 0
2439: ST_TO_ADDR
// kurt_is_substitute = LoadVariable ( Kurt_is_substitute_10 , false ) ;
2440: LD_ADDR_EXP 82
2444: PUSH
2445: LD_STRING Kurt_is_substitute_10
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: CALL_OW 30
2455: ST_TO_ADDR
// if TestCharacters ( Sonya_11_sel ) then
2456: LD_STRING Sonya_11_sel
2458: PPUSH
2459: CALL_OW 28
2463: IFFALSE 2480
// Sonya = CreateCharacter ( Sonya_11_sel ) else
2465: LD_ADDR_EXP 11
2469: PUSH
2470: LD_STRING Sonya_11_sel
2472: PPUSH
2473: CALL_OW 34
2477: ST_TO_ADDR
2478: GO 2488
// Sonya = 0 ;
2480: LD_ADDR_EXP 11
2484: PUSH
2485: LD_INT 0
2487: ST_TO_ADDR
// if TestCharacters ( Ralph_11_sel ) then
2488: LD_STRING Ralph_11_sel
2490: PPUSH
2491: CALL_OW 28
2495: IFFALSE 2512
// Ralph = CreateCharacter ( Ralph_11_sel ) else
2497: LD_ADDR_EXP 13
2501: PUSH
2502: LD_STRING Ralph_11_sel
2504: PPUSH
2505: CALL_OW 34
2509: ST_TO_ADDR
2510: GO 2520
// Ralph = 0 ;
2512: LD_ADDR_EXP 13
2516: PUSH
2517: LD_INT 0
2519: ST_TO_ADDR
// if TestCharacters ( Kowalski_11_sel ) then
2520: LD_STRING Kowalski_11_sel
2522: PPUSH
2523: CALL_OW 28
2527: IFFALSE 2544
// Kowalski = CreateCharacter ( Kowalski_11_sel ) else
2529: LD_ADDR_EXP 14
2533: PUSH
2534: LD_STRING Kowalski_11_sel
2536: PPUSH
2537: CALL_OW 34
2541: ST_TO_ADDR
2542: GO 2552
// Kowalski = 0 ;
2544: LD_ADDR_EXP 14
2548: PUSH
2549: LD_INT 0
2551: ST_TO_ADDR
// if TestCharacters ( Evelyn_11_sel ) then
2552: LD_STRING Evelyn_11_sel
2554: PPUSH
2555: CALL_OW 28
2559: IFFALSE 2576
// Evelyn = CreateCharacter ( Evelyn_11_sel ) else
2561: LD_ADDR_EXP 15
2565: PUSH
2566: LD_STRING Evelyn_11_sel
2568: PPUSH
2569: CALL_OW 34
2573: ST_TO_ADDR
2574: GO 2584
// Evelyn = 0 ;
2576: LD_ADDR_EXP 15
2580: PUSH
2581: LD_INT 0
2583: ST_TO_ADDR
// if TestCharacters ( Suze_11_sel ) then
2584: LD_STRING Suze_11_sel
2586: PPUSH
2587: CALL_OW 28
2591: IFFALSE 2608
// Suze = CreateCharacter ( Suze_11_sel ) else
2593: LD_ADDR_EXP 16
2597: PUSH
2598: LD_STRING Suze_11_sel
2600: PPUSH
2601: CALL_OW 34
2605: ST_TO_ADDR
2606: GO 2616
// Suze = 0 ;
2608: LD_ADDR_EXP 16
2612: PUSH
2613: LD_INT 0
2615: ST_TO_ADDR
// if TestCharacters ( Olaf_11_sel ) then
2616: LD_STRING Olaf_11_sel
2618: PPUSH
2619: CALL_OW 28
2623: IFFALSE 2640
// Olaf = CreateCharacter ( Olaf_11_sel ) else
2625: LD_ADDR_EXP 17
2629: PUSH
2630: LD_STRING Olaf_11_sel
2632: PPUSH
2633: CALL_OW 34
2637: ST_TO_ADDR
2638: GO 2648
// Olaf = 0 ;
2640: LD_ADDR_EXP 17
2644: PUSH
2645: LD_INT 0
2647: ST_TO_ADDR
// if TestCharacters ( Dwayne_11_sel ) then
2648: LD_STRING Dwayne_11_sel
2650: PPUSH
2651: CALL_OW 28
2655: IFFALSE 2672
// Dwayne = CreateCharacter ( Dwayne_11_sel ) else
2657: LD_ADDR_EXP 19
2661: PUSH
2662: LD_STRING Dwayne_11_sel
2664: PPUSH
2665: CALL_OW 34
2669: ST_TO_ADDR
2670: GO 2680
// Dwayne = 0 ;
2672: LD_ADDR_EXP 19
2676: PUSH
2677: LD_INT 0
2679: ST_TO_ADDR
// if TestCharacters ( MarkB_11_sel ) then
2680: LD_STRING MarkB_11_sel
2682: PPUSH
2683: CALL_OW 28
2687: IFFALSE 2704
// MarkB = CreateCharacter ( MarkB_11_sel ) else
2689: LD_ADDR_EXP 20
2693: PUSH
2694: LD_STRING MarkB_11_sel
2696: PPUSH
2697: CALL_OW 34
2701: ST_TO_ADDR
2702: GO 2712
// MarkB = 0 ;
2704: LD_ADDR_EXP 20
2708: PUSH
2709: LD_INT 0
2711: ST_TO_ADDR
// if TestCharacters ( Aviradze_11_sel ) then
2712: LD_STRING Aviradze_11_sel
2714: PPUSH
2715: CALL_OW 28
2719: IFFALSE 2736
// Aviradze = CreateCharacter ( Aviradze_11_sel ) else
2721: LD_ADDR_EXP 21
2725: PUSH
2726: LD_STRING Aviradze_11_sel
2728: PPUSH
2729: CALL_OW 34
2733: ST_TO_ADDR
2734: GO 2744
// Aviradze = 0 ;
2736: LD_ADDR_EXP 21
2740: PUSH
2741: LD_INT 0
2743: ST_TO_ADDR
// if TestCharacters ( Swansson_11_sel ) then
2744: LD_STRING Swansson_11_sel
2746: PPUSH
2747: CALL_OW 28
2751: IFFALSE 2768
// Swansson = CreateCharacter ( Swansson_11_sel ) else
2753: LD_ADDR_EXP 22
2757: PUSH
2758: LD_STRING Swansson_11_sel
2760: PPUSH
2761: CALL_OW 34
2765: ST_TO_ADDR
2766: GO 2776
// Swansson = 0 ;
2768: LD_ADDR_EXP 22
2772: PUSH
2773: LD_INT 0
2775: ST_TO_ADDR
// human_list = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] diff 0 ;
2776: LD_ADDR_VAR 0 2
2780: PUSH
2781: LD_EXP 10
2785: PUSH
2786: LD_EXP 11
2790: PUSH
2791: LD_EXP 12
2795: PUSH
2796: LD_EXP 13
2800: PUSH
2801: LD_EXP 14
2805: PUSH
2806: LD_EXP 15
2810: PUSH
2811: LD_EXP 16
2815: PUSH
2816: LD_EXP 17
2820: PUSH
2821: LD_EXP 18
2825: PUSH
2826: LD_EXP 19
2830: PUSH
2831: LD_EXP 20
2835: PUSH
2836: LD_EXP 21
2840: PUSH
2841: LD_EXP 22
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 0
2863: DIFF
2864: ST_TO_ADDR
// human_list = human_list ^ ( CreateCharacterSet ( Others_11_sel ) diff 0 ) ;
2865: LD_ADDR_VAR 0 2
2869: PUSH
2870: LD_VAR 0 2
2874: PUSH
2875: LD_STRING Others_11_sel
2877: PPUSH
2878: CALL_OW 31
2882: PUSH
2883: LD_INT 0
2885: DIFF
2886: ADD
2887: ST_TO_ADDR
// if TestCharacters ( Gonzo_10 ) then
2888: LD_STRING Gonzo_10
2890: PPUSH
2891: CALL_OW 28
2895: IFFALSE 2928
// begin Gonzo = CreateCharacter ( Gonzo_10 ) ;
2897: LD_ADDR_EXP 23
2901: PUSH
2902: LD_STRING Gonzo_10
2904: PPUSH
2905: CALL_OW 34
2909: ST_TO_ADDR
// human_list = human_list ^ Gonzo ;
2910: LD_ADDR_VAR 0 2
2914: PUSH
2915: LD_VAR 0 2
2919: PUSH
2920: LD_EXP 23
2924: ADD
2925: ST_TO_ADDR
// end else
2926: GO 2936
// Gonzo = 0 ;
2928: LD_ADDR_EXP 23
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// end else
2936: GO 3471
// begin InitHc ;
2938: CALL_OW 19
// PrepareSoldier ( sex_female , 7 ) ;
2942: LD_INT 2
2944: PPUSH
2945: LD_INT 7
2947: PPUSH
2948: CALL_OW 381
// hc_name = Heike ;
2952: LD_ADDR_OWVAR 26
2956: PUSH
2957: LD_STRING Heike
2959: ST_TO_ADDR
// Heike = CreateHuman ;
2960: LD_ADDR_EXP 10
2964: PUSH
2965: CALL_OW 44
2969: ST_TO_ADDR
// PrepareScientist ( sex_female , 7 ) ;
2970: LD_INT 2
2972: PPUSH
2973: LD_INT 7
2975: PPUSH
2976: CALL_OW 384
// hc_name = Sonya ;
2980: LD_ADDR_OWVAR 26
2984: PUSH
2985: LD_STRING Sonya
2987: ST_TO_ADDR
// Sonya = CreateHuman ;
2988: LD_ADDR_EXP 11
2992: PUSH
2993: CALL_OW 44
2997: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
2998: LD_INT 1
3000: PPUSH
3001: LD_INT 7
3003: PPUSH
3004: CALL_OW 381
// hc_name = Oswald ;
3008: LD_ADDR_OWVAR 26
3012: PUSH
3013: LD_STRING Oswald
3015: ST_TO_ADDR
// Oswald = CreateHuman ;
3016: LD_ADDR_EXP 12
3020: PUSH
3021: CALL_OW 44
3025: ST_TO_ADDR
// oswald_is_substitute = false ;
3026: LD_ADDR_EXP 81
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3034: LD_INT 1
3036: PPUSH
3037: LD_INT 7
3039: PPUSH
3040: CALL_OW 381
// hc_name = Ralph ;
3044: LD_ADDR_OWVAR 26
3048: PUSH
3049: LD_STRING Ralph
3051: ST_TO_ADDR
// Ralph = CreateHuman ;
3052: LD_ADDR_EXP 13
3056: PUSH
3057: CALL_OW 44
3061: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3062: LD_INT 1
3064: PPUSH
3065: LD_INT 7
3067: PPUSH
3068: CALL_OW 381
// hc_name = Kowalski ;
3072: LD_ADDR_OWVAR 26
3076: PUSH
3077: LD_STRING Kowalski
3079: ST_TO_ADDR
// Kowalski = CreateHuman ;
3080: LD_ADDR_EXP 14
3084: PUSH
3085: CALL_OW 44
3089: ST_TO_ADDR
// PrepareEngineer ( sex_female , 7 ) ;
3090: LD_INT 2
3092: PPUSH
3093: LD_INT 7
3095: PPUSH
3096: CALL_OW 382
// hc_name = Evelyn ;
3100: LD_ADDR_OWVAR 26
3104: PUSH
3105: LD_STRING Evelyn
3107: ST_TO_ADDR
// Evelyn = CreateHuman ;
3108: LD_ADDR_EXP 15
3112: PUSH
3113: CALL_OW 44
3117: ST_TO_ADDR
// PrepareSoldier ( sex_female , 7 ) ;
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 7
3123: PPUSH
3124: CALL_OW 381
// hc_name = Suze ;
3128: LD_ADDR_OWVAR 26
3132: PUSH
3133: LD_STRING Suze
3135: ST_TO_ADDR
// Suze = CreateHuman ;
3136: LD_ADDR_EXP 16
3140: PUSH
3141: CALL_OW 44
3145: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
3146: LD_INT 1
3148: PPUSH
3149: LD_INT 7
3151: PPUSH
3152: CALL_OW 383
// hc_name = Olaf ;
3156: LD_ADDR_OWVAR 26
3160: PUSH
3161: LD_STRING Olaf
3163: ST_TO_ADDR
// Olaf = CreateHuman ;
3164: LD_ADDR_EXP 17
3168: PUSH
3169: CALL_OW 44
3173: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3174: LD_INT 1
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 381
// hc_name = Kurt ;
3184: LD_ADDR_OWVAR 26
3188: PUSH
3189: LD_STRING Kurt
3191: ST_TO_ADDR
// Kurt = CreateHuman ;
3192: LD_ADDR_EXP 18
3196: PUSH
3197: CALL_OW 44
3201: ST_TO_ADDR
// kurt_is_substitute = false ;
3202: LD_ADDR_EXP 82
3206: PUSH
3207: LD_INT 0
3209: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
3210: LD_INT 1
3212: PPUSH
3213: LD_INT 7
3215: PPUSH
3216: CALL_OW 383
// hc_name = Dwayne ;
3220: LD_ADDR_OWVAR 26
3224: PUSH
3225: LD_STRING Dwayne
3227: ST_TO_ADDR
// Dwayne = CreateHuman ;
3228: LD_ADDR_EXP 19
3232: PUSH
3233: CALL_OW 44
3237: ST_TO_ADDR
// PrepareScientist ( sex_male , 7 ) ;
3238: LD_INT 1
3240: PPUSH
3241: LD_INT 7
3243: PPUSH
3244: CALL_OW 384
// hc_name = Mark ;
3248: LD_ADDR_OWVAR 26
3252: PUSH
3253: LD_STRING Mark
3255: ST_TO_ADDR
// MarkB = CreateHuman ;
3256: LD_ADDR_EXP 20
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// Aviradze = 0 ;
3266: LD_ADDR_EXP 21
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// Swansson = 0 ;
3274: LD_ADDR_EXP 22
3278: PUSH
3279: LD_INT 0
3281: ST_TO_ADDR
// human_list = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] diff 0 ;
3282: LD_ADDR_VAR 0 2
3286: PUSH
3287: LD_EXP 10
3291: PUSH
3292: LD_EXP 11
3296: PUSH
3297: LD_EXP 12
3301: PUSH
3302: LD_EXP 13
3306: PUSH
3307: LD_EXP 14
3311: PUSH
3312: LD_EXP 15
3316: PUSH
3317: LD_EXP 16
3321: PUSH
3322: LD_EXP 17
3326: PUSH
3327: LD_EXP 18
3331: PUSH
3332: LD_EXP 19
3336: PUSH
3337: LD_EXP 20
3341: PUSH
3342: LD_EXP 21
3346: PUSH
3347: LD_EXP 22
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 0
3369: DIFF
3370: ST_TO_ADDR
// InitHc ;
3371: CALL_OW 19
// uc_nation = nation_nature ;
3375: LD_ADDR_OWVAR 21
3379: PUSH
3380: LD_INT 0
3382: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
3383: LD_ADDR_OWVAR 28
3387: PUSH
3388: LD_INT 15
3390: ST_TO_ADDR
// hc_name = Gonzo ;
3391: LD_ADDR_OWVAR 26
3395: PUSH
3396: LD_STRING Gonzo
3398: ST_TO_ADDR
// hc_skills = [ 3 , 1 , 0 , 0 ] ;
3399: LD_ADDR_OWVAR 31
3403: PUSH
3404: LD_INT 3
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: LD_INT 0
3412: PUSH
3413: LD_INT 0
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: ST_TO_ADDR
// hc_attr = [ 13 , 12 ] ;
3422: LD_ADDR_OWVAR 29
3426: PUSH
3427: LD_INT 13
3429: PUSH
3430: LD_INT 12
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: ST_TO_ADDR
// hc_sex = sex_male ;
3437: LD_ADDR_OWVAR 27
3441: PUSH
3442: LD_INT 1
3444: ST_TO_ADDR
// Gonzo = CreateHuman ;
3445: LD_ADDR_EXP 23
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// human_list = human_list ^ Gonzo ;
3455: LD_ADDR_VAR 0 2
3459: PUSH
3460: LD_VAR 0 2
3464: PUSH
3465: LD_EXP 23
3469: ADD
3470: ST_TO_ADDR
// end ; InitVc ;
3471: CALL_OW 20
// uc_direction = 5 ;
3475: LD_ADDR_OWVAR 24
3479: PUSH
3480: LD_INT 5
3482: ST_TO_ADDR
// uc_nation = nation_arabian ;
3483: LD_ADDR_OWVAR 21
3487: PUSH
3488: LD_INT 2
3490: ST_TO_ADDR
// vc_engine = engine_combustion ;
3491: LD_ADDR_OWVAR 39
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
3499: LD_ADDR_OWVAR 37
3503: PUSH
3504: LD_INT 14
3506: ST_TO_ADDR
// vc_control = control_manual ;
3507: LD_ADDR_OWVAR 38
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
// vc_weapon = ar_cargo_bay ;
3515: LD_ADDR_OWVAR 40
3519: PUSH
3520: LD_INT 32
3522: ST_TO_ADDR
// for i = 1 to 2 do
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_INT 2
3535: PUSH
3536: FOR_TO
3537: IFFALSE 3858
// begin temp_unit = CreateVehicle ;
3539: LD_ADDR_VAR 0 4
3543: PUSH
3544: CALL_OW 45
3548: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
3549: LD_VAR 0 4
3553: PPUSH
3554: LD_INT 50
3556: PPUSH
3557: LD_INT 70
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: CALL_OW 240
// val = Rand ( 1 , human_list - 1 ) ;
3569: LD_ADDR_VAR 0 5
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_VAR 0 2
3581: PUSH
3582: LD_INT 1
3584: MINUS
3585: PPUSH
3586: CALL_OW 12
3590: ST_TO_ADDR
// PlaceHumanInUnit ( human_list [ val ] , temp_unit ) ;
3591: LD_VAR 0 2
3595: PUSH
3596: LD_VAR 0 5
3600: ARRAY
3601: PPUSH
3602: LD_VAR 0 4
3606: PPUSH
3607: CALL_OW 52
// human_list = Delete ( human_list , val ) ;
3611: LD_ADDR_VAR 0 2
3615: PUSH
3616: LD_VAR 0 2
3620: PPUSH
3621: LD_VAR 0 5
3625: PPUSH
3626: CALL_OW 3
3630: ST_TO_ADDR
// case i of 1 :
3631: LD_VAR 0 3
3635: PUSH
3636: LD_INT 1
3638: DOUBLE
3639: EQUAL
3640: IFTRUE 3644
3642: GO 3662
3644: POP
// begin SetCargo ( temp_unit , mat_cans , 100 ) ;
3645: LD_VAR 0 4
3649: PPUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 100
3655: PPUSH
3656: CALL_OW 290
// end ; 2 :
3660: GO 3841
3662: LD_INT 2
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3840
3670: POP
// begin val = [ 90 , 70 , 50 ] [ difficulty ] ;
3671: LD_ADDR_VAR 0 5
3675: PUSH
3676: LD_INT 90
3678: PUSH
3679: LD_INT 70
3681: PUSH
3682: LD_INT 50
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: LIST
3689: PUSH
3690: LD_OWVAR 67
3694: ARRAY
3695: ST_TO_ADDR
// if LoadVariable ( Abdul_doubt_07 , false ) then
3696: LD_STRING Abdul_doubt_07
3698: PPUSH
3699: LD_INT 0
3701: PPUSH
3702: CALL_OW 30
3706: IFFALSE 3722
// val = val - 50 ;
3708: LD_ADDR_VAR 0 5
3712: PUSH
3713: LD_VAR 0 5
3717: PUSH
3718: LD_INT 50
3720: MINUS
3721: ST_TO_ADDR
// if LoadVariable ( Siberite_gathered_on_time_07_cont , true ) then
3722: LD_STRING Siberite_gathered_on_time_07_cont
3724: PPUSH
3725: LD_INT 1
3727: PPUSH
3728: CALL_OW 30
3732: IFFALSE 3768
// begin val = val + 20 ;
3734: LD_ADDR_VAR 0 5
3738: PUSH
3739: LD_VAR 0 5
3743: PUSH
3744: LD_INT 20
3746: PLUS
3747: ST_TO_ADDR
// if val > 100 then
3748: LD_VAR 0 5
3752: PUSH
3753: LD_INT 100
3755: GREATER
3756: IFFALSE 3766
// val = 100 ;
3758: LD_ADDR_VAR 0 5
3762: PUSH
3763: LD_INT 100
3765: ST_TO_ADDR
// end else
3766: GO 3782
// val = val - 50 ;
3768: LD_ADDR_VAR 0 5
3772: PUSH
3773: LD_VAR 0 5
3777: PUSH
3778: LD_INT 50
3780: MINUS
3781: ST_TO_ADDR
// if val < 0 then
3782: LD_VAR 0 5
3786: PUSH
3787: LD_INT 0
3789: LESS
3790: IFFALSE 3800
// val = 0 ;
3792: LD_ADDR_VAR 0 5
3796: PUSH
3797: LD_INT 0
3799: ST_TO_ADDR
// SetCargo ( temp_unit , mat_cans , val ) ;
3800: LD_VAR 0 4
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_VAR 0 5
3812: PPUSH
3813: CALL_OW 290
// AddCargo ( temp_unit , mat_oil , 100 - val ) ;
3817: LD_VAR 0 4
3821: PPUSH
3822: LD_INT 2
3824: PPUSH
3825: LD_INT 100
3827: PUSH
3828: LD_VAR 0 5
3832: MINUS
3833: PPUSH
3834: CALL_OW 291
// end ; end ;
3838: GO 3841
3840: POP
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
3841: LD_VAR 0 4
3845: PPUSH
3846: LD_INT 8
3848: PPUSH
3849: LD_INT 0
3851: PPUSH
3852: CALL_OW 49
// end ;
3856: GO 3536
3858: POP
3859: POP
// val = 0 ;
3860: LD_ADDR_VAR 0 5
3864: PUSH
3865: LD_INT 0
3867: ST_TO_ADDR
// for i = 1 to [ 3 , 2 , 1 ] [ difficulty ] - LoadVariable ( Abdul_doubt_07 , false ) do
3868: LD_ADDR_VAR 0 3
3872: PUSH
3873: DOUBLE
3874: LD_INT 1
3876: DEC
3877: ST_TO_ADDR
3878: LD_INT 3
3880: PUSH
3881: LD_INT 2
3883: PUSH
3884: LD_INT 1
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: LIST
3891: PUSH
3892: LD_OWVAR 67
3896: ARRAY
3897: PUSH
3898: LD_STRING Abdul_doubt_07
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL_OW 30
3908: MINUS
3909: PUSH
3910: FOR_TO
3911: IFFALSE 4457
// begin vc_engine = engine_combustion ;
3913: LD_ADDR_OWVAR 39
3917: PUSH
3918: LD_INT 1
3920: ST_TO_ADDR
// if val = 0 then
3921: LD_VAR 0 5
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: IFFALSE 4021
// begin case Rand ( 1 , 4 ) of 1 :
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 12
3941: PUSH
3942: LD_INT 1
3944: DOUBLE
3945: EQUAL
3946: IFTRUE 3950
3948: GO 3961
3950: POP
// vc_chassis = ar_hovercraft ; 2 :
3951: LD_ADDR_OWVAR 37
3955: PUSH
3956: LD_INT 11
3958: ST_TO_ADDR
3959: GO 4019
3961: LD_INT 2
3963: DOUBLE
3964: EQUAL
3965: IFTRUE 3969
3967: GO 3980
3969: POP
// vc_chassis = ar_light_trike ; 3 :
3970: LD_ADDR_OWVAR 37
3974: PUSH
3975: LD_INT 12
3977: ST_TO_ADDR
3978: GO 4019
3980: LD_INT 3
3982: DOUBLE
3983: EQUAL
3984: IFTRUE 3988
3986: GO 3999
3988: POP
// vc_chassis = ar_medium_trike ; 4 :
3989: LD_ADDR_OWVAR 37
3993: PUSH
3994: LD_INT 13
3996: ST_TO_ADDR
3997: GO 4019
3999: LD_INT 4
4001: DOUBLE
4002: EQUAL
4003: IFTRUE 4007
4005: GO 4018
4007: POP
// vc_chassis = ar_half_tracked ; end ;
4008: LD_ADDR_OWVAR 37
4012: PUSH
4013: LD_INT 14
4015: ST_TO_ADDR
4016: GO 4019
4018: POP
// end else
4019: GO 4071
// begin case Rand ( 1 , 2 ) of 1 :
4021: LD_INT 1
4023: PPUSH
4024: LD_INT 2
4026: PPUSH
4027: CALL_OW 12
4031: PUSH
4032: LD_INT 1
4034: DOUBLE
4035: EQUAL
4036: IFTRUE 4040
4038: GO 4051
4040: POP
// vc_chassis = ar_medium_trike ; 2 :
4041: LD_ADDR_OWVAR 37
4045: PUSH
4046: LD_INT 13
4048: ST_TO_ADDR
4049: GO 4071
4051: LD_INT 2
4053: DOUBLE
4054: EQUAL
4055: IFTRUE 4059
4057: GO 4070
4059: POP
// vc_chassis = ar_half_tracked ; end ;
4060: LD_ADDR_OWVAR 37
4064: PUSH
4065: LD_INT 14
4067: ST_TO_ADDR
4068: GO 4071
4070: POP
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
4071: LD_OWVAR 37
4075: PUSH
4076: LD_INT 11
4078: PUSH
4079: LD_INT 12
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: IN
4086: IFFALSE 4216
// begin val = val + 1 ;
4088: LD_ADDR_VAR 0 5
4092: PUSH
4093: LD_VAR 0 5
4097: PUSH
4098: LD_INT 1
4100: PLUS
4101: ST_TO_ADDR
// case Rand ( 1 , 4 ) of 1 :
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 4
4107: PPUSH
4108: CALL_OW 12
4112: PUSH
4113: LD_INT 1
4115: DOUBLE
4116: EQUAL
4117: IFTRUE 4121
4119: GO 4132
4121: POP
// vc_weapon = ar_multimissile_ballista ; 2 :
4122: LD_ADDR_OWVAR 40
4126: PUSH
4127: LD_INT 22
4129: ST_TO_ADDR
4130: GO 4190
4132: LD_INT 2
4134: DOUBLE
4135: EQUAL
4136: IFTRUE 4140
4138: GO 4151
4140: POP
// vc_weapon = ar_light_gun ; 3 :
4141: LD_ADDR_OWVAR 40
4145: PUSH
4146: LD_INT 23
4148: ST_TO_ADDR
4149: GO 4190
4151: LD_INT 3
4153: DOUBLE
4154: EQUAL
4155: IFTRUE 4159
4157: GO 4170
4159: POP
// vc_weapon = ar_double_machine_gun ; 4 :
4160: LD_ADDR_OWVAR 40
4164: PUSH
4165: LD_INT 24
4167: ST_TO_ADDR
4168: GO 4190
4170: LD_INT 4
4172: DOUBLE
4173: EQUAL
4174: IFTRUE 4178
4176: GO 4189
4178: POP
// vc_weapon = ar_radar ; end ;
4179: LD_ADDR_OWVAR 40
4183: PUSH
4184: LD_INT 30
4186: ST_TO_ADDR
4187: GO 4190
4189: POP
// if Rand ( 1 , 2 ) = 1 then
4190: LD_INT 1
4192: PPUSH
4193: LD_INT 2
4195: PPUSH
4196: CALL_OW 12
4200: PUSH
4201: LD_INT 1
4203: EQUAL
4204: IFFALSE 4214
// vc_engine = engine_solar ;
4206: LD_ADDR_OWVAR 39
4210: PUSH
4211: LD_INT 2
4213: ST_TO_ADDR
// end else
4214: GO 4304
// begin case Rand ( 1 , 4 ) of 1 :
4216: LD_INT 1
4218: PPUSH
4219: LD_INT 4
4221: PPUSH
4222: CALL_OW 12
4226: PUSH
4227: LD_INT 1
4229: DOUBLE
4230: EQUAL
4231: IFTRUE 4235
4233: GO 4246
4235: POP
// vc_weapon = ar_gatling_gun ; 2 :
4236: LD_ADDR_OWVAR 40
4240: PUSH
4241: LD_INT 25
4243: ST_TO_ADDR
4244: GO 4304
4246: LD_INT 2
4248: DOUBLE
4249: EQUAL
4250: IFTRUE 4254
4252: GO 4265
4254: POP
// vc_weapon = ar_gun ; 3 :
4255: LD_ADDR_OWVAR 40
4259: PUSH
4260: LD_INT 27
4262: ST_TO_ADDR
4263: GO 4304
4265: LD_INT 3
4267: DOUBLE
4268: EQUAL
4269: IFTRUE 4273
4271: GO 4284
4273: POP
// vc_weapon = ar_flame_thrower ; 4 :
4274: LD_ADDR_OWVAR 40
4278: PUSH
4279: LD_INT 26
4281: ST_TO_ADDR
4282: GO 4304
4284: LD_INT 4
4286: DOUBLE
4287: EQUAL
4288: IFTRUE 4292
4290: GO 4303
4292: POP
// vc_weapon = ar_rocket_launcher ; end ;
4293: LD_ADDR_OWVAR 40
4297: PUSH
4298: LD_INT 28
4300: ST_TO_ADDR
4301: GO 4304
4303: POP
// end ; if Rand ( 1 , 5 ) <= 2 then
4304: LD_INT 1
4306: PPUSH
4307: LD_INT 5
4309: PPUSH
4310: CALL_OW 12
4314: PUSH
4315: LD_INT 2
4317: LESSEQUAL
4318: IFFALSE 4330
// vc_control = control_apeman else
4320: LD_ADDR_OWVAR 38
4324: PUSH
4325: LD_INT 5
4327: ST_TO_ADDR
4328: GO 4338
// vc_control = control_manual ;
4330: LD_ADDR_OWVAR 38
4334: PUSH
4335: LD_INT 1
4337: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4338: LD_ADDR_VAR 0 4
4342: PUSH
4343: CALL_OW 45
4347: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4348: LD_VAR 0 4
4352: PPUSH
4353: LD_INT 50
4355: PPUSH
4356: LD_INT 70
4358: PPUSH
4359: CALL_OW 12
4363: PPUSH
4364: CALL_OW 240
// if vc_control = control_manual then
4368: LD_OWVAR 38
4372: PUSH
4373: LD_INT 1
4375: EQUAL
4376: IFFALSE 4440
// begin val = Rand ( 1 , human_list - 1 ) ;
4378: LD_ADDR_VAR 0 5
4382: PUSH
4383: LD_INT 1
4385: PPUSH
4386: LD_VAR 0 2
4390: PUSH
4391: LD_INT 1
4393: MINUS
4394: PPUSH
4395: CALL_OW 12
4399: ST_TO_ADDR
// PlaceHumanInUnit ( human_list [ val ] , temp_unit ) ;
4400: LD_VAR 0 2
4404: PUSH
4405: LD_VAR 0 5
4409: ARRAY
4410: PPUSH
4411: LD_VAR 0 4
4415: PPUSH
4416: CALL_OW 52
// human_list = Delete ( human_list , val ) ;
4420: LD_ADDR_VAR 0 2
4424: PUSH
4425: LD_VAR 0 2
4429: PPUSH
4430: LD_VAR 0 5
4434: PPUSH
4435: CALL_OW 3
4439: ST_TO_ADDR
// end ; PlaceUnitArea ( temp_unit , enter_area , false ) ;
4440: LD_VAR 0 4
4444: PPUSH
4445: LD_INT 8
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 49
// end ;
4455: GO 3910
4457: POP
4458: POP
// for i in human_list do
4459: LD_ADDR_VAR 0 3
4463: PUSH
4464: LD_VAR 0 2
4468: PUSH
4469: FOR_IN
4470: IFFALSE 4489
// PlaceUnitArea ( i , enter_area , false ) ;
4472: LD_VAR 0 3
4476: PPUSH
4477: LD_INT 8
4479: PPUSH
4480: LD_INT 0
4482: PPUSH
4483: CALL_OW 49
4487: GO 4469
4489: POP
4490: POP
// vc_engine = engine_solar ;
4491: LD_ADDR_OWVAR 39
4495: PUSH
4496: LD_INT 2
4498: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
4499: LD_ADDR_OWVAR 37
4503: PUSH
4504: LD_INT 11
4506: ST_TO_ADDR
// vc_control = control_apeman ;
4507: LD_ADDR_OWVAR 38
4511: PUSH
4512: LD_INT 5
4514: ST_TO_ADDR
// vc_weapon = ar_radar ;
4515: LD_ADDR_OWVAR 40
4519: PUSH
4520: LD_INT 30
4522: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4523: LD_ADDR_VAR 0 4
4527: PUSH
4528: CALL_OW 45
4532: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_INT 50
4540: PPUSH
4541: LD_INT 70
4543: PPUSH
4544: CALL_OW 12
4548: PPUSH
4549: CALL_OW 240
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
4553: LD_VAR 0 4
4557: PPUSH
4558: LD_INT 8
4560: PPUSH
4561: LD_INT 0
4563: PPUSH
4564: CALL_OW 49
// vc_engine = engine_solar ;
4568: LD_ADDR_OWVAR 39
4572: PUSH
4573: LD_INT 2
4575: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
4576: LD_ADDR_OWVAR 37
4580: PUSH
4581: LD_INT 14
4583: ST_TO_ADDR
// vc_control = control_apeman ;
4584: LD_ADDR_OWVAR 38
4588: PUSH
4589: LD_INT 5
4591: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
4592: LD_ADDR_OWVAR 40
4596: PUSH
4597: LD_INT 28
4599: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4600: LD_ADDR_VAR 0 4
4604: PUSH
4605: CALL_OW 45
4609: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4610: LD_VAR 0 4
4614: PPUSH
4615: LD_INT 50
4617: PPUSH
4618: LD_INT 70
4620: PPUSH
4621: CALL_OW 12
4625: PPUSH
4626: CALL_OW 240
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
4630: LD_VAR 0 4
4634: PPUSH
4635: LD_INT 8
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// Gensher = NewCharacter ( Dietrich ) ;
4645: LD_ADDR_EXP 24
4649: PUSH
4650: LD_STRING Dietrich
4652: PPUSH
4653: CALL_OW 25
4657: ST_TO_ADDR
// SetSide ( Gensher , you_alt ) ;
4658: LD_EXP 24
4662: PPUSH
4663: LD_EXP 6
4667: PPUSH
4668: CALL_OW 235
// PlaceHumanInUnit ( Gensher , ar_bar ) ;
4672: LD_EXP 24
4676: PPUSH
4677: LD_INT 61
4679: PPUSH
4680: CALL_OW 52
// InitHc ;
4684: CALL_OW 19
// uc_side = you_alt ;
4688: LD_ADDR_OWVAR 20
4692: PUSH
4693: LD_EXP 6
4697: ST_TO_ADDR
// for i = 1 to 4 do
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: DOUBLE
4704: LD_INT 1
4706: DEC
4707: ST_TO_ADDR
4708: LD_INT 4
4710: PUSH
4711: FOR_TO
4712: IFFALSE 4764
// begin PrepareScientist ( false , 7 ) ;
4714: LD_INT 0
4716: PPUSH
4717: LD_INT 7
4719: PPUSH
4720: CALL_OW 384
// temp_unit = CreateHuman ;
4724: LD_ADDR_VAR 0 4
4728: PUSH
4729: CALL_OW 44
4733: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ temp_unit ;
4734: LD_ADDR_EXP 83
4738: PUSH
4739: LD_EXP 83
4743: PUSH
4744: LD_VAR 0 4
4748: ADD
4749: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lab ) ;
4750: LD_VAR 0 4
4754: PPUSH
4755: LD_INT 59
4757: PPUSH
4758: CALL_OW 52
// end ;
4762: GO 4711
4764: POP
4765: POP
// ai_scientists = Replace ( ai_scientists , 2 , original_gensher_people ) ;
4766: LD_ADDR_EXP 33
4770: PUSH
4771: LD_EXP 33
4775: PPUSH
4776: LD_INT 2
4778: PPUSH
4779: LD_EXP 83
4783: PPUSH
4784: CALL_OW 1
4788: ST_TO_ADDR
// PrepareEngineer ( false , [ 7 , 6 , 5 ] [ difficulty ] ) ;
4789: LD_INT 0
4791: PPUSH
4792: LD_INT 7
4794: PUSH
4795: LD_INT 6
4797: PUSH
4798: LD_INT 5
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: LD_OWVAR 67
4810: ARRAY
4811: PPUSH
4812: CALL_OW 382
// temp_unit = CreateHuman ;
4816: LD_ADDR_VAR 0 4
4820: PUSH
4821: CALL_OW 44
4825: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ temp_unit ;
4826: LD_ADDR_EXP 83
4830: PUSH
4831: LD_EXP 83
4835: PUSH
4836: LD_VAR 0 4
4840: ADD
4841: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_dep ) ;
4842: LD_VAR 0 4
4846: PPUSH
4847: LD_INT 58
4849: PPUSH
4850: CALL_OW 52
// ai_engineers = Replace ( ai_engineers , 2 , [ temp_unit ] ) ;
4854: LD_ADDR_EXP 31
4858: PUSH
4859: LD_EXP 31
4863: PPUSH
4864: LD_INT 2
4866: PPUSH
4867: LD_VAR 0 4
4871: PUSH
4872: EMPTY
4873: LIST
4874: PPUSH
4875: CALL_OW 1
4879: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ mech1 ;
4880: LD_ADDR_EXP 83
4884: PUSH
4885: LD_EXP 83
4889: PUSH
4890: LD_INT 495
4892: ADD
4893: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ mech2 ;
4894: LD_ADDR_EXP 83
4898: PUSH
4899: LD_EXP 83
4903: PUSH
4904: LD_INT 494
4906: ADD
4907: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ healer ;
4908: LD_ADDR_EXP 83
4912: PUSH
4913: LD_EXP 83
4917: PUSH
4918: LD_INT 541
4920: ADD
4921: ST_TO_ADDR
// InitHc ;
4922: CALL_OW 19
// uc_nation = nation_nature ;
4926: LD_ADDR_OWVAR 21
4930: PUSH
4931: LD_INT 0
4933: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
4934: LD_ADDR_OWVAR 28
4938: PUSH
4939: LD_INT 15
4941: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 2 ) , Rand ( 0 , 1 ) , 0 , 0 ] ;
4942: LD_ADDR_OWVAR 31
4946: PUSH
4947: LD_INT 1
4949: PPUSH
4950: LD_INT 2
4952: PPUSH
4953: CALL_OW 12
4957: PUSH
4958: LD_INT 0
4960: PPUSH
4961: LD_INT 1
4963: PPUSH
4964: CALL_OW 12
4968: PUSH
4969: LD_INT 0
4971: PUSH
4972: LD_INT 0
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 12 ) ] ;
4981: LD_ADDR_OWVAR 29
4985: PUSH
4986: LD_INT 11
4988: PPUSH
4989: LD_INT 13
4991: PPUSH
4992: CALL_OW 12
4996: PUSH
4997: LD_INT 10
4999: PPUSH
5000: LD_INT 12
5002: PPUSH
5003: CALL_OW 12
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5012: LD_ADDR_OWVAR 27
5016: PUSH
5017: LD_INT 1
5019: PPUSH
5020: LD_INT 2
5022: PPUSH
5023: CALL_OW 12
5027: ST_TO_ADDR
// temp_unit = CreateHuman ;
5028: LD_ADDR_VAR 0 4
5032: PUSH
5033: CALL_OW 44
5037: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_bu1 ) ;
5038: LD_VAR 0 4
5042: PPUSH
5043: LD_INT 73
5045: PPUSH
5046: CALL_OW 52
// human_list = [ temp_unit ] ;
5050: LD_ADDR_VAR 0 2
5054: PUSH
5055: LD_VAR 0 4
5059: PUSH
5060: EMPTY
5061: LIST
5062: ST_TO_ADDR
// gensher_bunker_apes = [ temp_unit ] ;
5063: LD_ADDR_VAR 0 7
5067: PUSH
5068: LD_VAR 0 4
5072: PUSH
5073: EMPTY
5074: LIST
5075: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5076: LD_ADDR_OWVAR 27
5080: PUSH
5081: LD_INT 1
5083: PPUSH
5084: LD_INT 2
5086: PPUSH
5087: CALL_OW 12
5091: ST_TO_ADDR
// temp_unit = CreateHuman ;
5092: LD_ADDR_VAR 0 4
5096: PUSH
5097: CALL_OW 44
5101: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_bu2 ) ;
5102: LD_VAR 0 4
5106: PPUSH
5107: LD_INT 78
5109: PPUSH
5110: CALL_OW 52
// human_list = human_list ^ temp_unit ;
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_VAR 0 2
5123: PUSH
5124: LD_VAR 0 4
5128: ADD
5129: ST_TO_ADDR
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5130: LD_ADDR_VAR 0 7
5134: PUSH
5135: LD_VAR 0 7
5139: PUSH
5140: LD_VAR 0 4
5144: ADD
5145: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5146: LD_ADDR_OWVAR 27
5150: PUSH
5151: LD_INT 1
5153: PPUSH
5154: LD_INT 2
5156: PPUSH
5157: CALL_OW 12
5161: ST_TO_ADDR
// temp_unit = CreateHuman ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: CALL_OW 44
5171: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill1 ) ;
5172: LD_VAR 0 4
5176: PPUSH
5177: LD_INT 298
5179: PPUSH
5180: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5184: LD_ADDR_VAR 0 7
5188: PUSH
5189: LD_VAR 0 7
5193: PUSH
5194: LD_VAR 0 4
5198: ADD
5199: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5200: LD_ADDR_OWVAR 27
5204: PUSH
5205: LD_INT 1
5207: PPUSH
5208: LD_INT 2
5210: PPUSH
5211: CALL_OW 12
5215: ST_TO_ADDR
// temp_unit = CreateHuman ;
5216: LD_ADDR_VAR 0 4
5220: PUSH
5221: CALL_OW 44
5225: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill2 ) ;
5226: LD_VAR 0 4
5230: PPUSH
5231: LD_INT 299
5233: PPUSH
5234: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5238: LD_ADDR_VAR 0 7
5242: PUSH
5243: LD_VAR 0 7
5247: PUSH
5248: LD_VAR 0 4
5252: ADD
5253: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5254: LD_ADDR_OWVAR 27
5258: PUSH
5259: LD_INT 1
5261: PPUSH
5262: LD_INT 2
5264: PPUSH
5265: CALL_OW 12
5269: ST_TO_ADDR
// temp_unit = CreateHuman ;
5270: LD_ADDR_VAR 0 4
5274: PUSH
5275: CALL_OW 44
5279: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill3 ) ;
5280: LD_VAR 0 4
5284: PPUSH
5285: LD_INT 300
5287: PPUSH
5288: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5292: LD_ADDR_VAR 0 7
5296: PUSH
5297: LD_VAR 0 7
5301: PUSH
5302: LD_VAR 0 4
5306: ADD
5307: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5308: LD_ADDR_OWVAR 27
5312: PUSH
5313: LD_INT 1
5315: PPUSH
5316: LD_INT 2
5318: PPUSH
5319: CALL_OW 12
5323: ST_TO_ADDR
// temp_unit = CreateHuman ;
5324: LD_ADDR_VAR 0 4
5328: PUSH
5329: CALL_OW 44
5333: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill4 ) ;
5334: LD_VAR 0 4
5338: PPUSH
5339: LD_INT 343
5341: PPUSH
5342: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_VAR 0 7
5355: PUSH
5356: LD_VAR 0 4
5360: ADD
5361: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5362: LD_ADDR_OWVAR 27
5366: PUSH
5367: LD_INT 1
5369: PPUSH
5370: LD_INT 2
5372: PPUSH
5373: CALL_OW 12
5377: ST_TO_ADDR
// temp_unit = CreateHuman ;
5378: LD_ADDR_VAR 0 4
5382: PUSH
5383: CALL_OW 44
5387: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu1 ) ;
5388: LD_VAR 0 4
5392: PPUSH
5393: LD_INT 308
5395: PPUSH
5396: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5400: LD_ADDR_VAR 0 7
5404: PUSH
5405: LD_VAR 0 7
5409: PUSH
5410: LD_VAR 0 4
5414: ADD
5415: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5416: LD_ADDR_OWVAR 27
5420: PUSH
5421: LD_INT 1
5423: PPUSH
5424: LD_INT 2
5426: PPUSH
5427: CALL_OW 12
5431: ST_TO_ADDR
// temp_unit = CreateHuman ;
5432: LD_ADDR_VAR 0 4
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu2 ) ;
5442: LD_VAR 0 4
5446: PPUSH
5447: LD_INT 347
5449: PPUSH
5450: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5454: LD_ADDR_VAR 0 7
5458: PUSH
5459: LD_VAR 0 7
5463: PUSH
5464: LD_VAR 0 4
5468: ADD
5469: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5470: LD_ADDR_OWVAR 27
5474: PUSH
5475: LD_INT 1
5477: PPUSH
5478: LD_INT 2
5480: PPUSH
5481: CALL_OW 12
5485: ST_TO_ADDR
// temp_unit = CreateHuman ;
5486: LD_ADDR_VAR 0 4
5490: PUSH
5491: CALL_OW 44
5495: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu3 ) ;
5496: LD_VAR 0 4
5500: PPUSH
5501: LD_INT 346
5503: PPUSH
5504: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5508: LD_ADDR_VAR 0 7
5512: PUSH
5513: LD_VAR 0 7
5517: PUSH
5518: LD_VAR 0 4
5522: ADD
5523: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5524: LD_ADDR_OWVAR 27
5528: PUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_INT 2
5534: PPUSH
5535: CALL_OW 12
5539: ST_TO_ADDR
// temp_unit = CreateHuman ;
5540: LD_ADDR_VAR 0 4
5544: PUSH
5545: CALL_OW 44
5549: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu4 ) ;
5550: LD_VAR 0 4
5554: PPUSH
5555: LD_INT 345
5557: PPUSH
5558: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5562: LD_ADDR_VAR 0 7
5566: PUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_VAR 0 4
5576: ADD
5577: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5578: LD_ADDR_OWVAR 27
5582: PUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_INT 2
5588: PPUSH
5589: CALL_OW 12
5593: ST_TO_ADDR
// temp_unit = CreateHuman ;
5594: LD_ADDR_VAR 0 4
5598: PUSH
5599: CALL_OW 44
5603: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu1 ) ;
5604: LD_VAR 0 4
5608: PPUSH
5609: LD_INT 305
5611: PPUSH
5612: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5616: LD_ADDR_VAR 0 7
5620: PUSH
5621: LD_VAR 0 7
5625: PUSH
5626: LD_VAR 0 4
5630: ADD
5631: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5632: LD_ADDR_OWVAR 27
5636: PUSH
5637: LD_INT 1
5639: PPUSH
5640: LD_INT 2
5642: PPUSH
5643: CALL_OW 12
5647: ST_TO_ADDR
// temp_unit = CreateHuman ;
5648: LD_ADDR_VAR 0 4
5652: PUSH
5653: CALL_OW 44
5657: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu2 ) ;
5658: LD_VAR 0 4
5662: PPUSH
5663: LD_INT 304
5665: PPUSH
5666: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5670: LD_ADDR_VAR 0 7
5674: PUSH
5675: LD_VAR 0 7
5679: PUSH
5680: LD_VAR 0 4
5684: ADD
5685: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5686: LD_ADDR_OWVAR 27
5690: PUSH
5691: LD_INT 1
5693: PPUSH
5694: LD_INT 2
5696: PPUSH
5697: CALL_OW 12
5701: ST_TO_ADDR
// temp_unit = CreateHuman ;
5702: LD_ADDR_VAR 0 4
5706: PUSH
5707: CALL_OW 44
5711: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu3 ) ;
5712: LD_VAR 0 4
5716: PPUSH
5717: LD_INT 303
5719: PPUSH
5720: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5724: LD_ADDR_VAR 0 7
5728: PUSH
5729: LD_VAR 0 7
5733: PUSH
5734: LD_VAR 0 4
5738: ADD
5739: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5740: LD_ADDR_OWVAR 27
5744: PUSH
5745: LD_INT 1
5747: PPUSH
5748: LD_INT 2
5750: PPUSH
5751: CALL_OW 12
5755: ST_TO_ADDR
// temp_unit = CreateHuman ;
5756: LD_ADDR_VAR 0 4
5760: PUSH
5761: CALL_OW 44
5765: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu4 ) ;
5766: LD_VAR 0 4
5770: PPUSH
5771: LD_INT 302
5773: PPUSH
5774: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5778: LD_ADDR_VAR 0 7
5782: PUSH
5783: LD_VAR 0 7
5787: PUSH
5788: LD_VAR 0 4
5792: ADD
5793: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5794: LD_ADDR_OWVAR 27
5798: PUSH
5799: LD_INT 1
5801: PPUSH
5802: LD_INT 2
5804: PPUSH
5805: CALL_OW 12
5809: ST_TO_ADDR
// temp_unit = CreateHuman ;
5810: LD_ADDR_VAR 0 4
5814: PUSH
5815: CALL_OW 44
5819: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu5 ) ;
5820: LD_VAR 0 4
5824: PPUSH
5825: LD_INT 374
5827: PPUSH
5828: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5832: LD_ADDR_VAR 0 7
5836: PUSH
5837: LD_VAR 0 7
5841: PUSH
5842: LD_VAR 0 4
5846: ADD
5847: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5848: LD_ADDR_OWVAR 27
5852: PUSH
5853: LD_INT 1
5855: PPUSH
5856: LD_INT 2
5858: PPUSH
5859: CALL_OW 12
5863: ST_TO_ADDR
// temp_unit = CreateHuman ;
5864: LD_ADDR_VAR 0 4
5868: PUSH
5869: CALL_OW 44
5873: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu6 ) ;
5874: LD_VAR 0 4
5878: PPUSH
5879: LD_INT 397
5881: PPUSH
5882: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5886: LD_ADDR_VAR 0 7
5890: PUSH
5891: LD_VAR 0 7
5895: PUSH
5896: LD_VAR 0 4
5900: ADD
5901: ST_TO_ADDR
// gensher_mortars = [ mortar1 ] ;
5902: LD_ADDR_EXP 100
5906: PUSH
5907: LD_INT 336
5909: PUSH
5910: EMPTY
5911: LIST
5912: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar2 ;
5913: LD_ADDR_EXP 100
5917: PUSH
5918: LD_EXP 100
5922: PUSH
5923: LD_INT 493
5925: ADD
5926: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar3 ;
5927: LD_ADDR_EXP 100
5931: PUSH
5932: LD_EXP 100
5936: PUSH
5937: LD_INT 338
5939: ADD
5940: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar4 ;
5941: LD_ADDR_EXP 100
5945: PUSH
5946: LD_EXP 100
5950: PUSH
5951: LD_INT 339
5953: ADD
5954: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar5 ;
5955: LD_ADDR_EXP 100
5959: PUSH
5960: LD_EXP 100
5964: PUSH
5965: LD_INT 340
5967: ADD
5968: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar6 ;
5969: LD_ADDR_EXP 100
5973: PUSH
5974: LD_EXP 100
5978: PUSH
5979: LD_INT 341
5981: ADD
5982: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , 2 , human_list ^ Gensher ) ;
5983: LD_ADDR_EXP 30
5987: PUSH
5988: LD_EXP 30
5992: PPUSH
5993: LD_INT 2
5995: PPUSH
5996: LD_VAR 0 2
6000: PUSH
6001: LD_EXP 24
6005: ADD
6006: PPUSH
6007: CALL_OW 1
6011: ST_TO_ADDR
// val = GetSkill ( ai_engineers [ 2 ] [ 1 ] , skill_engineering ) ;
6012: LD_ADDR_VAR 0 5
6016: PUSH
6017: LD_EXP 31
6021: PUSH
6022: LD_INT 2
6024: ARRAY
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PPUSH
6030: LD_INT 2
6032: PPUSH
6033: CALL_OW 259
6037: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_building ] ] ) do
6038: LD_ADDR_VAR 0 3
6042: PUSH
6043: LD_INT 22
6045: PUSH
6046: LD_EXP 6
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PPUSH
6069: CALL_OW 69
6073: PUSH
6074: FOR_IN
6075: IFFALSE 6093
// SetBLevel ( i , val ) ;
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_VAR 0 5
6086: PPUSH
6087: CALL_OW 241
6091: GO 6074
6093: POP
6094: POP
// for i in ai_engineers [ 2 ] do
6095: LD_ADDR_VAR 0 3
6099: PUSH
6100: LD_EXP 31
6104: PUSH
6105: LD_INT 2
6107: ARRAY
6108: PUSH
6109: FOR_IN
6110: IFFALSE 6151
// if GetSkill ( i , skill_engineering ) > val then
6112: LD_VAR 0 3
6116: PPUSH
6117: LD_INT 2
6119: PPUSH
6120: CALL_OW 259
6124: PUSH
6125: LD_VAR 0 5
6129: GREATER
6130: IFFALSE 6149
// SetSkill ( i , skill_engineering , val ) ;
6132: LD_VAR 0 3
6136: PPUSH
6137: LD_INT 2
6139: PPUSH
6140: LD_VAR 0 5
6144: PPUSH
6145: CALL_OW 237
6149: GO 6109
6151: POP
6152: POP
// end ;
6153: LD_VAR 0 1
6157: RET
// function ScanBuildings ; var side , i , temp_list , base , area , temp_list_2 ; begin
6158: LD_INT 0
6160: PPUSH
6161: PPUSH
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
6166: PPUSH
// if difficulty <= 2 then
6167: LD_OWVAR 67
6171: PUSH
6172: LD_INT 2
6174: LESSEQUAL
6175: IFFALSE 6316
// begin temp_list = [ GetX ( rub3 ) , GetY ( rub3 ) , GetDir ( rub3 ) , GetBWeapon ( rub3 ) ] ;
6177: LD_ADDR_VAR 0 4
6181: PUSH
6182: LD_INT 269
6184: PPUSH
6185: CALL_OW 250
6189: PUSH
6190: LD_INT 269
6192: PPUSH
6193: CALL_OW 251
6197: PUSH
6198: LD_INT 269
6200: PPUSH
6201: CALL_OW 254
6205: PUSH
6206: LD_INT 269
6208: PPUSH
6209: CALL_OW 269
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: ST_TO_ADDR
// DestroyUnit ( rub3 ) ;
6220: LD_INT 269
6222: PPUSH
6223: CALL_OW 65
// InitUc ;
6227: CALL_OW 18
// InitBc ;
6231: CALL_OW 21
// uc_nation = nation_russian ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 3
6242: ST_TO_ADDR
// uc_side = russians ;
6243: LD_ADDR_OWVAR 20
6247: PUSH
6248: LD_EXP 4
6252: ST_TO_ADDR
// bc_type = b_turret ;
6253: LD_ADDR_OWVAR 42
6257: PUSH
6258: LD_INT 33
6260: ST_TO_ADDR
// i = CreateAndPlaceBuildingXYD ( temp_list [ 1 ] , temp_list [ 2 ] , temp_list [ 3 ] ) ;
6261: LD_ADDR_VAR 0 3
6265: PUSH
6266: LD_VAR 0 4
6270: PUSH
6271: LD_INT 1
6273: ARRAY
6274: PPUSH
6275: LD_VAR 0 4
6279: PUSH
6280: LD_INT 2
6282: ARRAY
6283: PPUSH
6284: LD_VAR 0 4
6288: PUSH
6289: LD_INT 3
6291: ARRAY
6292: PPUSH
6293: CALL_OW 47
6297: ST_TO_ADDR
// PlaceWeaponTurret ( i , temp_list [ 4 ] ) ;
6298: LD_VAR 0 3
6302: PPUSH
6303: LD_VAR 0 4
6307: PUSH
6308: LD_INT 4
6310: ARRAY
6311: PPUSH
6312: CALL_OW 431
// end ; if difficulty = 1 then
6316: LD_OWVAR 67
6320: PUSH
6321: LD_INT 1
6323: EQUAL
6324: IFFALSE 6465
// begin temp_list = [ GetX ( rub1 ) , GetY ( rub1 ) , GetDir ( rub1 ) , GetBWeapon ( rub1 ) ] ;
6326: LD_ADDR_VAR 0 4
6330: PUSH
6331: LD_INT 273
6333: PPUSH
6334: CALL_OW 250
6338: PUSH
6339: LD_INT 273
6341: PPUSH
6342: CALL_OW 251
6346: PUSH
6347: LD_INT 273
6349: PPUSH
6350: CALL_OW 254
6354: PUSH
6355: LD_INT 273
6357: PPUSH
6358: CALL_OW 269
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: ST_TO_ADDR
// DestroyUnit ( rub1 ) ;
6369: LD_INT 273
6371: PPUSH
6372: CALL_OW 65
// InitUc ;
6376: CALL_OW 18
// InitBc ;
6380: CALL_OW 21
// uc_nation = nation_russian ;
6384: LD_ADDR_OWVAR 21
6388: PUSH
6389: LD_INT 3
6391: ST_TO_ADDR
// uc_side = russians ;
6392: LD_ADDR_OWVAR 20
6396: PUSH
6397: LD_EXP 4
6401: ST_TO_ADDR
// bc_type = b_turret ;
6402: LD_ADDR_OWVAR 42
6406: PUSH
6407: LD_INT 33
6409: ST_TO_ADDR
// i = CreateAndPlaceBuildingXYD ( temp_list [ 1 ] , temp_list [ 2 ] , temp_list [ 3 ] ) ;
6410: LD_ADDR_VAR 0 3
6414: PUSH
6415: LD_VAR 0 4
6419: PUSH
6420: LD_INT 1
6422: ARRAY
6423: PPUSH
6424: LD_VAR 0 4
6428: PUSH
6429: LD_INT 2
6431: ARRAY
6432: PPUSH
6433: LD_VAR 0 4
6437: PUSH
6438: LD_INT 3
6440: ARRAY
6441: PPUSH
6442: CALL_OW 47
6446: ST_TO_ADDR
// PlaceWeaponTurret ( i , temp_list [ 4 ] ) ;
6447: LD_VAR 0 3
6451: PPUSH
6452: LD_VAR 0 4
6456: PUSH
6457: LD_INT 4
6459: ARRAY
6460: PPUSH
6461: CALL_OW 431
// end ; for base in ai_bases do
6465: LD_ADDR_VAR 0 5
6469: PUSH
6470: LD_EXP 59
6474: PUSH
6475: FOR_IN
6476: IFFALSE 7102
// begin case base of 1 :
6478: LD_VAR 0 5
6482: PUSH
6483: LD_INT 1
6485: DOUBLE
6486: EQUAL
6487: IFTRUE 6491
6489: GO 6512
6491: POP
// begin area = Am_base ;
6492: LD_ADDR_VAR 0 6
6496: PUSH
6497: LD_INT 4
6499: ST_TO_ADDR
// side = americans ;
6500: LD_ADDR_VAR 0 2
6504: PUSH
6505: LD_EXP 7
6509: ST_TO_ADDR
// end ; 2 :
6510: GO 6571
6512: LD_INT 2
6514: DOUBLE
6515: EQUAL
6516: IFTRUE 6520
6518: GO 6541
6520: POP
// begin area = Gensher_base ;
6521: LD_ADDR_VAR 0 6
6525: PUSH
6526: LD_INT 7
6528: ST_TO_ADDR
// side = you_alt ;
6529: LD_ADDR_VAR 0 2
6533: PUSH
6534: LD_EXP 6
6538: ST_TO_ADDR
// end ; 3 :
6539: GO 6571
6541: LD_INT 3
6543: DOUBLE
6544: EQUAL
6545: IFTRUE 6549
6547: GO 6570
6549: POP
// begin area = Ru_base ;
6550: LD_ADDR_VAR 0 6
6554: PUSH
6555: LD_INT 3
6557: ST_TO_ADDR
// side = russians ;
6558: LD_ADDR_VAR 0 2
6562: PUSH
6563: LD_EXP 4
6567: ST_TO_ADDR
// end ; end ;
6568: GO 6571
6570: POP
// ai_all_buildings = Replace ( ai_all_buildings , base , FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_inarea , area ] ] ) ) ;
6571: LD_ADDR_EXP 45
6575: PUSH
6576: LD_EXP 45
6580: PPUSH
6581: LD_VAR 0 5
6585: PPUSH
6586: LD_INT 22
6588: PUSH
6589: LD_VAR 0 2
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 21
6600: PUSH
6601: LD_INT 3
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: LD_INT 95
6610: PUSH
6611: LD_VAR 0 6
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: PPUSH
6625: CALL_OW 69
6629: PPUSH
6630: CALL_OW 1
6634: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
6635: LD_ADDR_VAR 0 3
6639: PUSH
6640: LD_EXP 45
6644: PUSH
6645: LD_VAR 0 5
6649: ARRAY
6650: PUSH
6651: FOR_IN
6652: IFFALSE 6673
// UpdateBuildingBasicVariables ( base , i , true ) ;
6654: LD_VAR 0 5
6658: PPUSH
6659: LD_VAR 0 3
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL 7109 0 3
6671: GO 6651
6673: POP
6674: POP
// if base = 1 then
6675: LD_VAR 0 5
6679: PUSH
6680: LD_INT 1
6682: EQUAL
6683: IFFALSE 6703
// SetBName ( ai_depot [ base ] , epsilon ) ;
6685: LD_EXP 35
6689: PUSH
6690: LD_VAR 0 5
6694: ARRAY
6695: PPUSH
6696: LD_STRING epsilon
6698: PPUSH
6699: CALL_OW 500
// temp_list = [ ] ;
6703: LD_ADDR_VAR 0 4
6707: PUSH
6708: EMPTY
6709: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
6710: LD_ADDR_VAR 0 3
6714: PUSH
6715: LD_EXP 45
6719: PUSH
6720: LD_VAR 0 5
6724: ARRAY
6725: PUSH
6726: FOR_IN
6727: IFFALSE 7000
// begin if base = 3 and i in [ rub1 , rub2 ] then
6729: LD_VAR 0 5
6733: PUSH
6734: LD_INT 3
6736: EQUAL
6737: PUSH
6738: LD_VAR 0 3
6742: PUSH
6743: LD_INT 273
6745: PUSH
6746: LD_INT 271
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: IN
6753: AND
6754: IFFALSE 6805
// begin temp_list_2 = ai_excepted_buildings [ base ] ^ i ;
6756: LD_ADDR_VAR 0 7
6760: PUSH
6761: LD_EXP 69
6765: PUSH
6766: LD_VAR 0 5
6770: ARRAY
6771: PUSH
6772: LD_VAR 0 3
6776: ADD
6777: ST_TO_ADDR
// ai_excepted_buildings = Replace ( ai_excepted_buildings , base , temp_list_2 ) ;
6778: LD_ADDR_EXP 69
6782: PUSH
6783: LD_EXP 69
6787: PPUSH
6788: LD_VAR 0 5
6792: PPUSH
6793: LD_VAR 0 7
6797: PPUSH
6798: CALL_OW 1
6802: ST_TO_ADDR
// continue ;
6803: GO 6726
// end ; temp_list = temp_list ^ [ [ GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBType ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6805: LD_ADDR_VAR 0 4
6809: PUSH
6810: LD_VAR 0 4
6814: PUSH
6815: LD_VAR 0 3
6819: PPUSH
6820: CALL_OW 250
6824: PUSH
6825: LD_VAR 0 3
6829: PPUSH
6830: CALL_OW 251
6834: PUSH
6835: LD_VAR 0 3
6839: PPUSH
6840: CALL_OW 254
6844: PUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: CALL_OW 266
6854: PUSH
6855: LD_VAR 0 3
6859: PPUSH
6860: LD_INT 1
6862: PPUSH
6863: CALL_OW 268
6867: PUSH
6868: LD_VAR 0 3
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: CALL_OW 268
6880: PUSH
6881: LD_VAR 0 3
6885: PPUSH
6886: CALL_OW 269
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: ADD
6903: ST_TO_ADDR
// if base = 2 and temp_list [ temp_list + 0 ] [ 4 ] = b_bunker then
6904: LD_VAR 0 5
6908: PUSH
6909: LD_INT 2
6911: EQUAL
6912: PUSH
6913: LD_VAR 0 4
6917: PUSH
6918: LD_VAR 0 4
6922: PUSH
6923: LD_INT 0
6925: PLUS
6926: ARRAY
6927: PUSH
6928: LD_INT 4
6930: ARRAY
6931: PUSH
6932: LD_INT 32
6934: EQUAL
6935: AND
6936: IFFALSE 6998
// begin temp_list_2 = Replace ( temp_list [ temp_list + 0 ] , 4 , b_breastwork ) ;
6938: LD_ADDR_VAR 0 7
6942: PUSH
6943: LD_VAR 0 4
6947: PUSH
6948: LD_VAR 0 4
6952: PUSH
6953: LD_INT 0
6955: PLUS
6956: ARRAY
6957: PPUSH
6958: LD_INT 4
6960: PPUSH
6961: LD_INT 31
6963: PPUSH
6964: CALL_OW 1
6968: ST_TO_ADDR
// temp_list = Replace ( temp_list , temp_list + 0 , temp_list_2 ) ;
6969: LD_ADDR_VAR 0 4
6973: PUSH
6974: LD_VAR 0 4
6978: PPUSH
6979: LD_VAR 0 4
6983: PUSH
6984: LD_INT 0
6986: PLUS
6987: PPUSH
6988: LD_VAR 0 7
6992: PPUSH
6993: CALL_OW 1
6997: ST_TO_ADDR
// end ; end ;
6998: GO 6726
7000: POP
7001: POP
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list ) ;
7002: LD_ADDR_EXP 39
7006: PUSH
7007: LD_EXP 39
7011: PPUSH
7012: LD_VAR 0 5
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 1
7026: ST_TO_ADDR
// SortBuildingLocationsListInCorrectOrder ( base ) ;
7027: LD_VAR 0 5
7031: PPUSH
7032: CALL 8184 0 1
// for i in ai_siberite_mines [ base ] ^ ai_oil_mine [ base ] do
7036: LD_ADDR_VAR 0 3
7040: PUSH
7041: LD_EXP 37
7045: PUSH
7046: LD_VAR 0 5
7050: ARRAY
7051: PUSH
7052: LD_EXP 51
7056: PUSH
7057: LD_VAR 0 5
7061: ARRAY
7062: ADD
7063: PUSH
7064: FOR_IN
7065: IFFALSE 7098
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
7067: LD_VAR 0 3
7071: PPUSH
7072: CALL_OW 250
7076: PPUSH
7077: LD_VAR 0 3
7081: PPUSH
7082: CALL_OW 251
7086: PPUSH
7087: LD_VAR 0 2
7091: PPUSH
7092: CALL_OW 441
7096: GO 7064
7098: POP
7099: POP
// end ;
7100: GO 6475
7102: POP
7103: POP
// end ;
7104: LD_VAR 0 1
7108: RET
// export function UpdateBuildingBasicVariables ( base , un , add ) ; var temp_list ; begin
7109: LD_INT 0
7111: PPUSH
7112: PPUSH
// case GetBType ( un ) of b_depot , b_warehouse :
7113: LD_VAR 0 2
7117: PPUSH
7118: CALL_OW 266
7122: PUSH
7123: LD_INT 0
7125: DOUBLE
7126: EQUAL
7127: IFTRUE 7137
7129: LD_INT 1
7131: DOUBLE
7132: EQUAL
7133: IFTRUE 7137
7135: GO 7214
7137: POP
// if add then
7138: LD_VAR 0 3
7142: IFFALSE 7171
// ai_depot = Replace ( ai_depot , base , un ) else
7144: LD_ADDR_EXP 35
7148: PUSH
7149: LD_EXP 35
7153: PPUSH
7154: LD_VAR 0 1
7158: PPUSH
7159: LD_VAR 0 2
7163: PPUSH
7164: CALL_OW 1
7168: ST_TO_ADDR
7169: GO 7212
// if un = ai_depot [ base ] then
7171: LD_VAR 0 2
7175: PUSH
7176: LD_EXP 35
7180: PUSH
7181: LD_VAR 0 1
7185: ARRAY
7186: EQUAL
7187: IFFALSE 7212
// ai_depot = Replace ( ai_depot , base , 0 ) ; b_lab , b_lab_half , b_lab_full :
7189: LD_ADDR_EXP 35
7193: PUSH
7194: LD_EXP 35
7198: PPUSH
7199: LD_VAR 0 1
7203: PPUSH
7204: LD_INT 0
7206: PPUSH
7207: CALL_OW 1
7211: ST_TO_ADDR
7212: GO 8179
7214: LD_INT 6
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7234
7220: LD_INT 7
7222: DOUBLE
7223: EQUAL
7224: IFTRUE 7234
7226: LD_INT 8
7228: DOUBLE
7229: EQUAL
7230: IFTRUE 7234
7232: GO 7314
7234: POP
// begin if add then
7235: LD_VAR 0 3
7239: IFFALSE 7265
// temp_list = ai_labs [ base ] ^ un else
7241: LD_ADDR_VAR 0 5
7245: PUSH
7246: LD_EXP 36
7250: PUSH
7251: LD_VAR 0 1
7255: ARRAY
7256: PUSH
7257: LD_VAR 0 2
7261: ADD
7262: ST_TO_ADDR
7263: GO 7287
// temp_list = ai_labs [ base ] diff un ;
7265: LD_ADDR_VAR 0 5
7269: PUSH
7270: LD_EXP 36
7274: PUSH
7275: LD_VAR 0 1
7279: ARRAY
7280: PUSH
7281: LD_VAR 0 2
7285: DIFF
7286: ST_TO_ADDR
// ai_labs = Replace ( ai_labs , base , temp_list ) ;
7287: LD_ADDR_EXP 36
7291: PUSH
7292: LD_EXP 36
7296: PPUSH
7297: LD_VAR 0 1
7301: PPUSH
7302: LD_VAR 0 5
7306: PPUSH
7307: CALL_OW 1
7311: ST_TO_ADDR
// end ; b_factory , b_workshop :
7312: GO 8179
7314: LD_INT 3
7316: DOUBLE
7317: EQUAL
7318: IFTRUE 7328
7320: LD_INT 2
7322: DOUBLE
7323: EQUAL
7324: IFTRUE 7328
7326: GO 7408
7328: POP
// begin if add then
7329: LD_VAR 0 3
7333: IFFALSE 7359
// temp_list = ai_facts [ base ] ^ un else
7335: LD_ADDR_VAR 0 5
7339: PUSH
7340: LD_EXP 48
7344: PUSH
7345: LD_VAR 0 1
7349: ARRAY
7350: PUSH
7351: LD_VAR 0 2
7355: ADD
7356: ST_TO_ADDR
7357: GO 7381
// temp_list = ai_facts [ base ] diff un ;
7359: LD_ADDR_VAR 0 5
7363: PUSH
7364: LD_EXP 48
7368: PUSH
7369: LD_VAR 0 1
7373: ARRAY
7374: PUSH
7375: LD_VAR 0 2
7379: DIFF
7380: ST_TO_ADDR
// ai_facts = Replace ( ai_facts , base , temp_list ) ;
7381: LD_ADDR_EXP 48
7385: PUSH
7386: LD_EXP 48
7390: PPUSH
7391: LD_VAR 0 1
7395: PPUSH
7396: LD_VAR 0 5
7400: PPUSH
7401: CALL_OW 1
7405: ST_TO_ADDR
// end ; b_armoury , b_barracks :
7406: GO 8179
7408: LD_INT 4
7410: DOUBLE
7411: EQUAL
7412: IFTRUE 7422
7414: LD_INT 5
7416: DOUBLE
7417: EQUAL
7418: IFTRUE 7422
7420: GO 7502
7422: POP
// begin if add then
7423: LD_VAR 0 3
7427: IFFALSE 7453
// temp_list = ai_armouries [ base ] ^ un else
7429: LD_ADDR_VAR 0 5
7433: PUSH
7434: LD_EXP 49
7438: PUSH
7439: LD_VAR 0 1
7443: ARRAY
7444: PUSH
7445: LD_VAR 0 2
7449: ADD
7450: ST_TO_ADDR
7451: GO 7475
// temp_list = ai_armouries [ base ] diff un ;
7453: LD_ADDR_VAR 0 5
7457: PUSH
7458: LD_EXP 49
7462: PUSH
7463: LD_VAR 0 1
7467: ARRAY
7468: PUSH
7469: LD_VAR 0 2
7473: DIFF
7474: ST_TO_ADDR
// ai_armouries = Replace ( ai_armouries , base , temp_list ) ;
7475: LD_ADDR_EXP 49
7479: PUSH
7480: LD_EXP 49
7484: PPUSH
7485: LD_VAR 0 1
7489: PPUSH
7490: LD_VAR 0 5
7494: PPUSH
7495: CALL_OW 1
7499: ST_TO_ADDR
// end ; b_breastwork , b_bunker :
7500: GO 8179
7502: LD_INT 31
7504: DOUBLE
7505: EQUAL
7506: IFTRUE 7516
7508: LD_INT 32
7510: DOUBLE
7511: EQUAL
7512: IFTRUE 7516
7514: GO 7596
7516: POP
// begin if add then
7517: LD_VAR 0 3
7521: IFFALSE 7547
// temp_list = ai_bunkers [ base ] ^ un else
7523: LD_ADDR_VAR 0 5
7527: PUSH
7528: LD_EXP 50
7532: PUSH
7533: LD_VAR 0 1
7537: ARRAY
7538: PUSH
7539: LD_VAR 0 2
7543: ADD
7544: ST_TO_ADDR
7545: GO 7569
// temp_list = ai_bunkers [ base ] diff un ;
7547: LD_ADDR_VAR 0 5
7551: PUSH
7552: LD_EXP 50
7556: PUSH
7557: LD_VAR 0 1
7561: ARRAY
7562: PUSH
7563: LD_VAR 0 2
7567: DIFF
7568: ST_TO_ADDR
// ai_bunkers = Replace ( ai_bunkers , base , temp_list ) ;
7569: LD_ADDR_EXP 50
7573: PUSH
7574: LD_EXP 50
7578: PPUSH
7579: LD_VAR 0 1
7583: PPUSH
7584: LD_VAR 0 5
7588: PPUSH
7589: CALL_OW 1
7593: ST_TO_ADDR
// end ; b_turret :
7594: GO 8179
7596: LD_INT 33
7598: DOUBLE
7599: EQUAL
7600: IFTRUE 7604
7602: GO 7684
7604: POP
// begin if add then
7605: LD_VAR 0 3
7609: IFFALSE 7635
// temp_list = ai_turrets [ base ] ^ un else
7611: LD_ADDR_VAR 0 5
7615: PUSH
7616: LD_EXP 56
7620: PUSH
7621: LD_VAR 0 1
7625: ARRAY
7626: PUSH
7627: LD_VAR 0 2
7631: ADD
7632: ST_TO_ADDR
7633: GO 7657
// temp_list = ai_turrets [ base ] diff un ;
7635: LD_ADDR_VAR 0 5
7639: PUSH
7640: LD_EXP 56
7644: PUSH
7645: LD_VAR 0 1
7649: ARRAY
7650: PUSH
7651: LD_VAR 0 2
7655: DIFF
7656: ST_TO_ADDR
// ai_turrets = Replace ( ai_turrets , base , temp_list ) ;
7657: LD_ADDR_EXP 56
7661: PUSH
7662: LD_EXP 56
7666: PPUSH
7667: LD_VAR 0 1
7671: PPUSH
7672: LD_VAR 0 5
7676: PPUSH
7677: CALL_OW 1
7681: ST_TO_ADDR
// end ; b_oil_mine :
7682: GO 8179
7684: LD_INT 29
7686: DOUBLE
7687: EQUAL
7688: IFTRUE 7692
7690: GO 7769
7692: POP
// if add then
7693: LD_VAR 0 3
7697: IFFALSE 7726
// ai_oil_mine = Replace ( ai_oil_mine , base , un ) else
7699: LD_ADDR_EXP 51
7703: PUSH
7704: LD_EXP 51
7708: PPUSH
7709: LD_VAR 0 1
7713: PPUSH
7714: LD_VAR 0 2
7718: PPUSH
7719: CALL_OW 1
7723: ST_TO_ADDR
7724: GO 7767
// if un = ai_oil_mine [ base ] then
7726: LD_VAR 0 2
7730: PUSH
7731: LD_EXP 51
7735: PUSH
7736: LD_VAR 0 1
7740: ARRAY
7741: EQUAL
7742: IFFALSE 7767
// ai_oil_mine = Replace ( ai_oil_mine , base , 0 ) ; b_siberite_mine :
7744: LD_ADDR_EXP 51
7748: PUSH
7749: LD_EXP 51
7753: PPUSH
7754: LD_VAR 0 1
7758: PPUSH
7759: LD_INT 0
7761: PPUSH
7762: CALL_OW 1
7766: ST_TO_ADDR
7767: GO 8179
7769: LD_INT 30
7771: DOUBLE
7772: EQUAL
7773: IFTRUE 7777
7775: GO 7857
7777: POP
// begin if add then
7778: LD_VAR 0 3
7782: IFFALSE 7808
// temp_list = ai_siberite_mines [ base ] ^ un else
7784: LD_ADDR_VAR 0 5
7788: PUSH
7789: LD_EXP 37
7793: PUSH
7794: LD_VAR 0 1
7798: ARRAY
7799: PUSH
7800: LD_VAR 0 2
7804: ADD
7805: ST_TO_ADDR
7806: GO 7830
// temp_list = ai_siberite_mines [ base ] diff un ;
7808: LD_ADDR_VAR 0 5
7812: PUSH
7813: LD_EXP 37
7817: PUSH
7818: LD_VAR 0 1
7822: ARRAY
7823: PUSH
7824: LD_VAR 0 2
7828: DIFF
7829: ST_TO_ADDR
// ai_siberite_mines = Replace ( ai_siberite_mines , base , temp_list ) ;
7830: LD_ADDR_EXP 37
7834: PUSH
7835: LD_EXP 37
7839: PPUSH
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_VAR 0 5
7849: PPUSH
7850: CALL_OW 1
7854: ST_TO_ADDR
// end ; b_ext_gun , b_ext_noncombat , b_ext_laser , b_ext_computer , b_ext_radar , b_ext_rocket , b_ext_siberium , b_ext_track , b_ext_stitch :
7855: GO 8179
7857: LD_INT 17
7859: DOUBLE
7860: EQUAL
7861: IFTRUE 7913
7863: LD_INT 19
7865: DOUBLE
7866: EQUAL
7867: IFTRUE 7913
7869: LD_INT 25
7871: DOUBLE
7872: EQUAL
7873: IFTRUE 7913
7875: LD_INT 24
7877: DOUBLE
7878: EQUAL
7879: IFTRUE 7913
7881: LD_INT 20
7883: DOUBLE
7884: EQUAL
7885: IFTRUE 7913
7887: LD_INT 18
7889: DOUBLE
7890: EQUAL
7891: IFTRUE 7913
7893: LD_INT 21
7895: DOUBLE
7896: EQUAL
7897: IFTRUE 7913
7899: LD_INT 16
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7913
7905: LD_INT 23
7907: DOUBLE
7908: EQUAL
7909: IFTRUE 7913
7911: GO 7993
7913: POP
// begin if add then
7914: LD_VAR 0 3
7918: IFFALSE 7944
// temp_list = ai_fact_extensions [ base ] ^ un else
7920: LD_ADDR_VAR 0 5
7924: PUSH
7925: LD_EXP 52
7929: PUSH
7930: LD_VAR 0 1
7934: ARRAY
7935: PUSH
7936: LD_VAR 0 2
7940: ADD
7941: ST_TO_ADDR
7942: GO 7966
// temp_list = ai_fact_extensions [ base ] diff un ;
7944: LD_ADDR_VAR 0 5
7948: PUSH
7949: LD_EXP 52
7953: PUSH
7954: LD_VAR 0 1
7958: ARRAY
7959: PUSH
7960: LD_VAR 0 2
7964: DIFF
7965: ST_TO_ADDR
// ai_fact_extensions = Replace ( ai_fact_extensions , base , temp_list ) ;
7966: LD_ADDR_EXP 52
7970: PUSH
7971: LD_EXP 52
7975: PPUSH
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_VAR 0 5
7985: PPUSH
7986: CALL_OW 1
7990: ST_TO_ADDR
// end ; b_solar_power , b_oil_power , b_siberite_power :
7991: GO 8179
7993: LD_INT 27
7995: DOUBLE
7996: EQUAL
7997: IFTRUE 8013
7999: LD_INT 26
8001: DOUBLE
8002: EQUAL
8003: IFTRUE 8013
8005: LD_INT 28
8007: DOUBLE
8008: EQUAL
8009: IFTRUE 8013
8011: GO 8093
8013: POP
// begin if add then
8014: LD_VAR 0 3
8018: IFFALSE 8044
// temp_list = ai_power_plants [ base ] ^ un else
8020: LD_ADDR_VAR 0 5
8024: PUSH
8025: LD_EXP 38
8029: PUSH
8030: LD_VAR 0 1
8034: ARRAY
8035: PUSH
8036: LD_VAR 0 2
8040: ADD
8041: ST_TO_ADDR
8042: GO 8066
// temp_list = ai_power_plants [ base ] diff un ;
8044: LD_ADDR_VAR 0 5
8048: PUSH
8049: LD_EXP 38
8053: PUSH
8054: LD_VAR 0 1
8058: ARRAY
8059: PUSH
8060: LD_VAR 0 2
8064: DIFF
8065: ST_TO_ADDR
// ai_power_plants = Replace ( ai_power_plants , base , temp_list ) ;
8066: LD_ADDR_EXP 38
8070: PUSH
8071: LD_EXP 38
8075: PPUSH
8076: LD_VAR 0 1
8080: PPUSH
8081: LD_VAR 0 5
8085: PPUSH
8086: CALL_OW 1
8090: ST_TO_ADDR
// end ; b_control_tower :
8091: GO 8179
8093: LD_INT 36
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8178
8101: POP
// begin if add then
8102: LD_VAR 0 3
8106: IFFALSE 8135
// ai_control_tower = Replace ( ai_control_tower , base , un ) else
8108: LD_ADDR_EXP 57
8112: PUSH
8113: LD_EXP 57
8117: PPUSH
8118: LD_VAR 0 1
8122: PPUSH
8123: LD_VAR 0 2
8127: PPUSH
8128: CALL_OW 1
8132: ST_TO_ADDR
8133: GO 8176
// if un = ai_control_tower [ base ] then
8135: LD_VAR 0 2
8139: PUSH
8140: LD_EXP 57
8144: PUSH
8145: LD_VAR 0 1
8149: ARRAY
8150: EQUAL
8151: IFFALSE 8176
// ai_control_tower = Replace ( ai_control_tower , base , 0 ) ;
8153: LD_ADDR_EXP 57
8157: PUSH
8158: LD_EXP 57
8162: PPUSH
8163: LD_VAR 0 1
8167: PPUSH
8168: LD_INT 0
8170: PPUSH
8171: CALL_OW 1
8175: ST_TO_ADDR
// end ; end ;
8176: GO 8179
8178: POP
// end ;
8179: LD_VAR 0 4
8183: RET
// function SortBuildingLocationsListInCorrectOrder ( base ) ; var i , temp_list , p ; begin
8184: LD_INT 0
8186: PPUSH
8187: PPUSH
8188: PPUSH
8189: PPUSH
// temp_list = [ ] ;
8190: LD_ADDR_VAR 0 4
8194: PUSH
8195: EMPTY
8196: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
8197: LD_ADDR_VAR 0 3
8201: PUSH
8202: LD_EXP 39
8206: PUSH
8207: LD_VAR 0 1
8211: ARRAY
8212: PUSH
8213: FOR_IN
8214: IFFALSE 8587
// begin case i [ 4 ] of b_depot , b_warehouse :
8216: LD_VAR 0 3
8220: PUSH
8221: LD_INT 4
8223: ARRAY
8224: PUSH
8225: LD_INT 0
8227: DOUBLE
8228: EQUAL
8229: IFTRUE 8239
8231: LD_INT 1
8233: DOUBLE
8234: EQUAL
8235: IFTRUE 8239
8237: GO 8250
8239: POP
// p = 100 ; b_armoury , b_barracks , b_fort :
8240: LD_ADDR_VAR 0 5
8244: PUSH
8245: LD_INT 100
8247: ST_TO_ADDR
8248: GO 8569
8250: LD_INT 4
8252: DOUBLE
8253: EQUAL
8254: IFTRUE 8270
8256: LD_INT 5
8258: DOUBLE
8259: EQUAL
8260: IFTRUE 8270
8262: LD_INT 35
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8270
8268: GO 8281
8270: POP
// p = 99 ; b_solar_power , b_oil_power , b_siberite_power :
8271: LD_ADDR_VAR 0 5
8275: PUSH
8276: LD_INT 99
8278: ST_TO_ADDR
8279: GO 8569
8281: LD_INT 27
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8301
8287: LD_INT 26
8289: DOUBLE
8290: EQUAL
8291: IFTRUE 8301
8293: LD_INT 28
8295: DOUBLE
8296: EQUAL
8297: IFTRUE 8301
8299: GO 8312
8301: POP
// p = 98 ; b_breastwork :
8302: LD_ADDR_VAR 0 5
8306: PUSH
8307: LD_INT 98
8309: ST_TO_ADDR
8310: GO 8569
8312: LD_INT 31
8314: DOUBLE
8315: EQUAL
8316: IFTRUE 8320
8318: GO 8331
8320: POP
// p = 97 ; b_factory , b_workshop :
8321: LD_ADDR_VAR 0 5
8325: PUSH
8326: LD_INT 97
8328: ST_TO_ADDR
8329: GO 8569
8331: LD_INT 3
8333: DOUBLE
8334: EQUAL
8335: IFTRUE 8345
8337: LD_INT 2
8339: DOUBLE
8340: EQUAL
8341: IFTRUE 8345
8343: GO 8356
8345: POP
// p = 96 ; b_ext_gun , b_ext_noncombat , b_ext_laser , b_ext_computer , b_ext_radar , b_ext_rocket , b_ext_siberium , b_ext_track , b_ext_stitch :
8346: LD_ADDR_VAR 0 5
8350: PUSH
8351: LD_INT 96
8353: ST_TO_ADDR
8354: GO 8569
8356: LD_INT 17
8358: DOUBLE
8359: EQUAL
8360: IFTRUE 8412
8362: LD_INT 19
8364: DOUBLE
8365: EQUAL
8366: IFTRUE 8412
8368: LD_INT 25
8370: DOUBLE
8371: EQUAL
8372: IFTRUE 8412
8374: LD_INT 24
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8412
8380: LD_INT 20
8382: DOUBLE
8383: EQUAL
8384: IFTRUE 8412
8386: LD_INT 18
8388: DOUBLE
8389: EQUAL
8390: IFTRUE 8412
8392: LD_INT 21
8394: DOUBLE
8395: EQUAL
8396: IFTRUE 8412
8398: LD_INT 16
8400: DOUBLE
8401: EQUAL
8402: IFTRUE 8412
8404: LD_INT 23
8406: DOUBLE
8407: EQUAL
8408: IFTRUE 8412
8410: GO 8423
8412: POP
// p = 95 ; b_bunker :
8413: LD_ADDR_VAR 0 5
8417: PUSH
8418: LD_INT 95
8420: ST_TO_ADDR
8421: GO 8569
8423: LD_INT 32
8425: DOUBLE
8426: EQUAL
8427: IFTRUE 8431
8429: GO 8442
8431: POP
// p = 94 ; b_control_tower :
8432: LD_ADDR_VAR 0 5
8436: PUSH
8437: LD_INT 94
8439: ST_TO_ADDR
8440: GO 8569
8442: LD_INT 36
8444: DOUBLE
8445: EQUAL
8446: IFTRUE 8450
8448: GO 8461
8450: POP
// p = 93 ; b_turret :
8451: LD_ADDR_VAR 0 5
8455: PUSH
8456: LD_INT 93
8458: ST_TO_ADDR
8459: GO 8569
8461: LD_INT 33
8463: DOUBLE
8464: EQUAL
8465: IFTRUE 8469
8467: GO 8480
8469: POP
// p = 92 ; b_lab , b_lab_half , b_lab_full :
8470: LD_ADDR_VAR 0 5
8474: PUSH
8475: LD_INT 92
8477: ST_TO_ADDR
8478: GO 8569
8480: LD_INT 6
8482: DOUBLE
8483: EQUAL
8484: IFTRUE 8500
8486: LD_INT 7
8488: DOUBLE
8489: EQUAL
8490: IFTRUE 8500
8492: LD_INT 8
8494: DOUBLE
8495: EQUAL
8496: IFTRUE 8500
8498: GO 8511
8500: POP
// p = 91 ; b_teleport :
8501: LD_ADDR_VAR 0 5
8505: PUSH
8506: LD_INT 91
8508: ST_TO_ADDR
8509: GO 8569
8511: LD_INT 34
8513: DOUBLE
8514: EQUAL
8515: IFTRUE 8519
8517: GO 8530
8519: POP
// p = 90 ; b_siberite_mine :
8520: LD_ADDR_VAR 0 5
8524: PUSH
8525: LD_INT 90
8527: ST_TO_ADDR
8528: GO 8569
8530: LD_INT 30
8532: DOUBLE
8533: EQUAL
8534: IFTRUE 8538
8536: GO 8549
8538: POP
// p = 89 ; b_oil_mine :
8539: LD_ADDR_VAR 0 5
8543: PUSH
8544: LD_INT 89
8546: ST_TO_ADDR
8547: GO 8569
8549: LD_INT 29
8551: DOUBLE
8552: EQUAL
8553: IFTRUE 8557
8555: GO 8568
8557: POP
// p = 88 ; end ;
8558: LD_ADDR_VAR 0 5
8562: PUSH
8563: LD_INT 88
8565: ST_TO_ADDR
8566: GO 8569
8568: POP
// temp_list = temp_list ^ p ;
8569: LD_ADDR_VAR 0 4
8573: PUSH
8574: LD_VAR 0 4
8578: PUSH
8579: LD_VAR 0 5
8583: ADD
8584: ST_TO_ADDR
// end ;
8585: GO 8213
8587: POP
8588: POP
// temp_list = SortListByListDesc ( ai_buildings_locations [ base ] , temp_list ) ;
8589: LD_ADDR_VAR 0 4
8593: PUSH
8594: LD_EXP 39
8598: PUSH
8599: LD_VAR 0 1
8603: ARRAY
8604: PPUSH
8605: LD_VAR 0 4
8609: PPUSH
8610: CALL_OW 77
8614: ST_TO_ADDR
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list ) ;
8615: LD_ADDR_EXP 39
8619: PUSH
8620: LD_EXP 39
8624: PPUSH
8625: LD_VAR 0 1
8629: PPUSH
8630: LD_VAR 0 4
8634: PPUSH
8635: CALL_OW 1
8639: ST_TO_ADDR
// end ;
8640: LD_VAR 0 2
8644: RET
// function PrepareComputerSides ; var i , temp_list , side , base , num ; begin
8645: LD_INT 0
8647: PPUSH
8648: PPUSH
8649: PPUSH
8650: PPUSH
8651: PPUSH
8652: PPUSH
// for base in ai_bases do
8653: LD_ADDR_VAR 0 5
8657: PUSH
8658: LD_EXP 59
8662: PUSH
8663: FOR_IN
8664: IFFALSE 9577
// begin case base of 1 :
8666: LD_VAR 0 5
8670: PUSH
8671: LD_INT 1
8673: DOUBLE
8674: EQUAL
8675: IFTRUE 8679
8677: GO 8692
8679: POP
// begin side = americans ;
8680: LD_ADDR_VAR 0 4
8684: PUSH
8685: LD_EXP 7
8689: ST_TO_ADDR
// end ; 2 :
8690: GO 8727
8692: LD_INT 2
8694: DOUBLE
8695: EQUAL
8696: IFTRUE 8700
8698: GO 8705
8700: POP
// begin continue ;
8701: GO 8663
// end ; 3 :
8703: GO 8727
8705: LD_INT 3
8707: DOUBLE
8708: EQUAL
8709: IFTRUE 8713
8711: GO 8726
8713: POP
// begin side = russians ;
8714: LD_ADDR_VAR 0 4
8718: PUSH
8719: LD_EXP 4
8723: ST_TO_ADDR
// end ; end ;
8724: GO 8727
8726: POP
// InitUc ;
8727: CALL_OW 18
// InitHc ;
8731: CALL_OW 19
// uc_side = side ;
8735: LD_ADDR_OWVAR 20
8739: PUSH
8740: LD_VAR 0 4
8744: ST_TO_ADDR
// case side of americans :
8745: LD_VAR 0 4
8749: PUSH
8750: LD_EXP 7
8754: DOUBLE
8755: EQUAL
8756: IFTRUE 8760
8758: GO 8771
8760: POP
// uc_nation = nation_american ; russians :
8761: LD_ADDR_OWVAR 21
8765: PUSH
8766: LD_INT 1
8768: ST_TO_ADDR
8769: GO 8793
8771: LD_EXP 4
8775: DOUBLE
8776: EQUAL
8777: IFTRUE 8781
8779: GO 8792
8781: POP
// uc_nation = nation_russian ; end ;
8782: LD_ADDR_OWVAR 21
8786: PUSH
8787: LD_INT 3
8789: ST_TO_ADDR
8790: GO 8793
8792: POP
// temp_list = CreateUnitsWithClass ( ai_bunkers [ base ] + ai_armouries [ base ] , class_soldier , side ) ;
8793: LD_ADDR_VAR 0 3
8797: PUSH
8798: LD_EXP 50
8802: PUSH
8803: LD_VAR 0 5
8807: ARRAY
8808: PUSH
8809: LD_EXP 49
8813: PUSH
8814: LD_VAR 0 5
8818: ARRAY
8819: PLUS
8820: PPUSH
8821: LD_INT 1
8823: PPUSH
8824: LD_VAR 0 4
8828: PPUSH
8829: CALL 9712 0 3
8833: ST_TO_ADDR
// temp_list = temp_list ^ CreateUnitsWithClass ( [ 3 , 4 , 5 ] [ difficulty ] * ai_armouries [ base ] , [ class_sniper , 0 , class_bazooker ] [ base ] , side ) ;
8834: LD_ADDR_VAR 0 3
8838: PUSH
8839: LD_VAR 0 3
8843: PUSH
8844: LD_INT 3
8846: PUSH
8847: LD_INT 4
8849: PUSH
8850: LD_INT 5
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: LIST
8857: PUSH
8858: LD_OWVAR 67
8862: ARRAY
8863: PUSH
8864: LD_EXP 49
8868: PUSH
8869: LD_VAR 0 5
8873: ARRAY
8874: MUL
8875: PPUSH
8876: LD_INT 5
8878: PUSH
8879: LD_INT 0
8881: PUSH
8882: LD_INT 9
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: LIST
8889: PUSH
8890: LD_VAR 0 5
8894: ARRAY
8895: PPUSH
8896: LD_VAR 0 4
8900: PPUSH
8901: CALL 9712 0 3
8905: ADD
8906: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , base , temp_list ) ;
8907: LD_ADDR_EXP 30
8911: PUSH
8912: LD_EXP 30
8916: PPUSH
8917: LD_VAR 0 5
8921: PPUSH
8922: LD_VAR 0 3
8926: PPUSH
8927: CALL_OW 1
8931: ST_TO_ADDR
// ai_engineers = Replace ( ai_engineers , base , CreateUnitsWithClass ( [ 2 , 3 , 4 ] [ difficulty ] , class_engineer , side ) ) ;
8932: LD_ADDR_EXP 31
8936: PUSH
8937: LD_EXP 31
8941: PPUSH
8942: LD_VAR 0 5
8946: PPUSH
8947: LD_INT 2
8949: PUSH
8950: LD_INT 3
8952: PUSH
8953: LD_INT 4
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: LIST
8960: PUSH
8961: LD_OWVAR 67
8965: ARRAY
8966: PPUSH
8967: LD_INT 2
8969: PPUSH
8970: LD_VAR 0 4
8974: PPUSH
8975: CALL 9712 0 3
8979: PPUSH
8980: CALL_OW 1
8984: ST_TO_ADDR
// temp_list = [ ] ;
8985: LD_ADDR_VAR 0 3
8989: PUSH
8990: EMPTY
8991: ST_TO_ADDR
// for i in ai_engineers [ base ] do
8992: LD_ADDR_VAR 0 2
8996: PUSH
8997: LD_EXP 31
9001: PUSH
9002: LD_VAR 0 5
9006: ARRAY
9007: PUSH
9008: FOR_IN
9009: IFFALSE 9037
// temp_list = temp_list ^ GetSkill ( i , skill_engineering ) ;
9011: LD_ADDR_VAR 0 3
9015: PUSH
9016: LD_VAR 0 3
9020: PUSH
9021: LD_VAR 0 2
9025: PPUSH
9026: LD_INT 2
9028: PPUSH
9029: CALL_OW 259
9033: ADD
9034: ST_TO_ADDR
9035: GO 9008
9037: POP
9038: POP
// num = BestFromListByList ( temp_list , temp_list ) ;
9039: LD_ADDR_VAR 0 6
9043: PUSH
9044: LD_VAR 0 3
9048: PPUSH
9049: LD_VAR 0 3
9053: PPUSH
9054: CALL_OW 79
9058: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
9059: LD_ADDR_VAR 0 2
9063: PUSH
9064: LD_EXP 45
9068: PUSH
9069: LD_VAR 0 5
9073: ARRAY
9074: PUSH
9075: FOR_IN
9076: IFFALSE 9094
// SetBLevel ( i , num ) ;
9078: LD_VAR 0 2
9082: PPUSH
9083: LD_VAR 0 6
9087: PPUSH
9088: CALL_OW 241
9092: GO 9075
9094: POP
9095: POP
// ai_apemen_engineers = Replace ( ai_apemen_engineers , base , CreateApemenWithClass ( 2 , class_apeman_engineer , side ) ) ;
9096: LD_ADDR_EXP 63
9100: PUSH
9101: LD_EXP 63
9105: PPUSH
9106: LD_VAR 0 5
9110: PPUSH
9111: LD_INT 2
9113: PPUSH
9114: LD_INT 16
9116: PPUSH
9117: LD_VAR 0 4
9121: PPUSH
9122: CALL 10135 0 3
9126: PPUSH
9127: CALL_OW 1
9131: ST_TO_ADDR
// ai_mechanics_defend = Replace ( ai_mechanics_defend , base , CreateUnitsWithClass ( [ 4 + Rand ( 0 , 1 ) , 5 + Rand ( 0 , 1 ) , 6 ] [ difficulty ] , class_mechanic , side ) ) ;
9132: LD_ADDR_EXP 32
9136: PUSH
9137: LD_EXP 32
9141: PPUSH
9142: LD_VAR 0 5
9146: PPUSH
9147: LD_INT 4
9149: PUSH
9150: LD_INT 0
9152: PPUSH
9153: LD_INT 1
9155: PPUSH
9156: CALL_OW 12
9160: PLUS
9161: PUSH
9162: LD_INT 5
9164: PUSH
9165: LD_INT 0
9167: PPUSH
9168: LD_INT 1
9170: PPUSH
9171: CALL_OW 12
9175: PLUS
9176: PUSH
9177: LD_INT 6
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: PUSH
9185: LD_OWVAR 67
9189: ARRAY
9190: PPUSH
9191: LD_INT 3
9193: PPUSH
9194: LD_VAR 0 4
9198: PPUSH
9199: CALL 9712 0 3
9203: PPUSH
9204: CALL_OW 1
9208: ST_TO_ADDR
// num = [ 3 , 4 , 5 ] [ difficulty ] ;
9209: LD_ADDR_VAR 0 6
9213: PUSH
9214: LD_INT 3
9216: PUSH
9217: LD_INT 4
9219: PUSH
9220: LD_INT 5
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: LIST
9227: PUSH
9228: LD_OWVAR 67
9232: ARRAY
9233: ST_TO_ADDR
// for i = 1 to ai_labs [ base ] do
9234: LD_ADDR_VAR 0 2
9238: PUSH
9239: DOUBLE
9240: LD_INT 1
9242: DEC
9243: ST_TO_ADDR
9244: LD_EXP 36
9248: PUSH
9249: LD_VAR 0 5
9253: ARRAY
9254: PUSH
9255: FOR_TO
9256: IFFALSE 9282
// num = num + Rand ( 0 , 1 ) ;
9258: LD_ADDR_VAR 0 6
9262: PUSH
9263: LD_VAR 0 6
9267: PUSH
9268: LD_INT 0
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 12
9278: PLUS
9279: ST_TO_ADDR
9280: GO 9255
9282: POP
9283: POP
// if base = 1 then
9284: LD_VAR 0 5
9288: PUSH
9289: LD_INT 1
9291: EQUAL
9292: IFFALSE 9325
// num = num + [ 3 , 4 , 5 ] [ difficulty ] ;
9294: LD_ADDR_VAR 0 6
9298: PUSH
9299: LD_VAR 0 6
9303: PUSH
9304: LD_INT 3
9306: PUSH
9307: LD_INT 4
9309: PUSH
9310: LD_INT 5
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: PUSH
9318: LD_OWVAR 67
9322: ARRAY
9323: PLUS
9324: ST_TO_ADDR
// ai_scientists = Replace ( ai_scientists , base , CreateUnitsWithClass ( num , class_scientistic , side ) ) ;
9325: LD_ADDR_EXP 33
9329: PUSH
9330: LD_EXP 33
9334: PPUSH
9335: LD_VAR 0 5
9339: PPUSH
9340: LD_VAR 0 6
9344: PPUSH
9345: LD_INT 4
9347: PPUSH
9348: LD_VAR 0 4
9352: PPUSH
9353: CALL 9712 0 3
9357: PPUSH
9358: CALL_OW 1
9362: ST_TO_ADDR
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_cans , 300 ) ;
9363: LD_EXP 35
9367: PUSH
9368: LD_VAR 0 5
9372: ARRAY
9373: PPUSH
9374: CALL_OW 274
9378: PPUSH
9379: LD_INT 1
9381: PPUSH
9382: LD_INT 300
9384: PPUSH
9385: CALL_OW 277
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_oil , 300 ) ;
9389: LD_EXP 35
9393: PUSH
9394: LD_VAR 0 5
9398: ARRAY
9399: PPUSH
9400: CALL_OW 274
9404: PPUSH
9405: LD_INT 2
9407: PPUSH
9408: LD_INT 300
9410: PPUSH
9411: CALL_OW 277
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_siberit , 300 ) ;
9415: LD_EXP 35
9419: PUSH
9420: LD_VAR 0 5
9424: ARRAY
9425: PPUSH
9426: CALL_OW 274
9430: PPUSH
9431: LD_INT 3
9433: PPUSH
9434: LD_INT 300
9436: PPUSH
9437: CALL_OW 277
// for i in ai_soldiers [ base ] ^ ai_engineers [ base ] ^ ai_mechanics_defend [ base ] ^ ai_scientists [ base ] ^ ai_apemen_engineers [ base ] do
9441: LD_ADDR_VAR 0 2
9445: PUSH
9446: LD_EXP 30
9450: PUSH
9451: LD_VAR 0 5
9455: ARRAY
9456: PUSH
9457: LD_EXP 31
9461: PUSH
9462: LD_VAR 0 5
9466: ARRAY
9467: ADD
9468: PUSH
9469: LD_EXP 32
9473: PUSH
9474: LD_VAR 0 5
9478: ARRAY
9479: ADD
9480: PUSH
9481: LD_EXP 33
9485: PUSH
9486: LD_VAR 0 5
9490: ARRAY
9491: ADD
9492: PUSH
9493: LD_EXP 63
9497: PUSH
9498: LD_VAR 0 5
9502: ARRAY
9503: ADD
9504: PUSH
9505: FOR_IN
9506: IFFALSE 9555
// PlaceUnitXYR ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] , 7 , false ) ;
9508: LD_VAR 0 2
9512: PPUSH
9513: LD_EXP 42
9517: PUSH
9518: LD_VAR 0 5
9522: ARRAY
9523: PUSH
9524: LD_INT 1
9526: ARRAY
9527: PPUSH
9528: LD_EXP 42
9532: PUSH
9533: LD_VAR 0 5
9537: ARRAY
9538: PUSH
9539: LD_INT 2
9541: ARRAY
9542: PPUSH
9543: LD_INT 7
9545: PPUSH
9546: LD_INT 0
9548: PPUSH
9549: CALL_OW 50
9553: GO 9505
9555: POP
9556: POP
// ResetVehicleAttackDelay ( base ) ;
9557: LD_VAR 0 5
9561: PPUSH
9562: CALL 10311 0 1
// ResetHumanAttackDelay ( base ) ;
9566: LD_VAR 0 5
9570: PPUSH
9571: CALL 10360 0 1
// end ;
9575: GO 8663
9577: POP
9578: POP
// uc_side = americans ;
9579: LD_ADDR_OWVAR 20
9583: PUSH
9584: LD_EXP 7
9588: ST_TO_ADDR
// Simms = NewCharacter ( Simms ) ;
9589: LD_ADDR_EXP 25
9593: PUSH
9594: LD_STRING Simms
9596: PPUSH
9597: CALL_OW 25
9601: ST_TO_ADDR
// Joan = NewCharacter ( Joan ) ;
9602: LD_ADDR_EXP 28
9606: PUSH
9607: LD_STRING Joan
9609: PPUSH
9610: CALL_OW 25
9614: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
9615: LD_ADDR_EXP 29
9619: PUSH
9620: LD_STRING Powell
9622: PPUSH
9623: CALL_OW 25
9627: ST_TO_ADDR
// uc_side = americans_alt ;
9628: LD_ADDR_OWVAR 20
9632: PUSH
9633: LD_EXP 9
9637: ST_TO_ADDR
// Cornell = NewCharacter ( Cornell ) ;
9638: LD_ADDR_EXP 26
9642: PUSH
9643: LD_STRING Cornell
9645: PPUSH
9646: CALL_OW 25
9650: ST_TO_ADDR
// Khattam = NewCharacter ( Khatam ) ;
9651: LD_ADDR_EXP 27
9655: PUSH
9656: LD_STRING Khatam
9658: PPUSH
9659: CALL_OW 25
9663: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , americans ] ) do
9664: LD_ADDR_VAR 0 2
9668: PUSH
9669: LD_INT 22
9671: PUSH
9672: LD_EXP 7
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PPUSH
9681: CALL_OW 69
9685: PUSH
9686: FOR_IN
9687: IFFALSE 9705
// DoNotAttack ( you , i ) ;
9689: LD_EXP 3
9693: PPUSH
9694: LD_VAR 0 2
9698: PPUSH
9699: CALL_OW 471
9703: GO 9686
9705: POP
9706: POP
// end ;
9707: LD_VAR 0 1
9711: RET
// export function CreateUnitsWithClass ( num_units , un_class , side ) ; var i , overskill ; begin
9712: LD_INT 0
9714: PPUSH
9715: PPUSH
9716: PPUSH
// result = [ ] ;
9717: LD_ADDR_VAR 0 4
9721: PUSH
9722: EMPTY
9723: ST_TO_ADDR
// InitUc ;
9724: CALL_OW 18
// InitHc ;
9728: CALL_OW 19
// case side of americans :
9732: LD_VAR 0 3
9736: PUSH
9737: LD_EXP 7
9741: DOUBLE
9742: EQUAL
9743: IFTRUE 9747
9745: GO 9758
9747: POP
// begin uc_nation = nation_american ;
9748: LD_ADDR_OWVAR 21
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// end ; russians :
9756: GO 9780
9758: LD_EXP 4
9762: DOUBLE
9763: EQUAL
9764: IFTRUE 9768
9766: GO 9779
9768: POP
// begin uc_nation = nation_russian ;
9769: LD_ADDR_OWVAR 21
9773: PUSH
9774: LD_INT 3
9776: ST_TO_ADDR
// end ; end ;
9777: GO 9780
9779: POP
// uc_side = side ;
9780: LD_ADDR_OWVAR 20
9784: PUSH
9785: LD_VAR 0 3
9789: ST_TO_ADDR
// overskill = difficulty + 4 ;
9790: LD_ADDR_VAR 0 6
9794: PUSH
9795: LD_OWVAR 67
9799: PUSH
9800: LD_INT 4
9802: PLUS
9803: ST_TO_ADDR
// for i = 1 to num_units do
9804: LD_ADDR_VAR 0 5
9808: PUSH
9809: DOUBLE
9810: LD_INT 1
9812: DEC
9813: ST_TO_ADDR
9814: LD_VAR 0 1
9818: PUSH
9819: FOR_TO
9820: IFFALSE 9893
// begin if Rand ( 1 , 3 ) = 1 then
9822: LD_INT 1
9824: PPUSH
9825: LD_INT 3
9827: PPUSH
9828: CALL_OW 12
9832: PUSH
9833: LD_INT 1
9835: EQUAL
9836: IFFALSE 9858
// PrepareHuman ( false , un_class , - overskill ) else
9838: LD_INT 0
9840: PPUSH
9841: LD_VAR 0 2
9845: PPUSH
9846: LD_VAR 0 6
9850: NEG
9851: PPUSH
9852: CALL_OW 380
9856: GO 9875
// PrepareHuman ( false , un_class , overskill ) ;
9858: LD_INT 0
9860: PPUSH
9861: LD_VAR 0 2
9865: PPUSH
9866: LD_VAR 0 6
9870: PPUSH
9871: CALL_OW 380
// result = result ^ CreateHuman ;
9875: LD_ADDR_VAR 0 4
9879: PUSH
9880: LD_VAR 0 4
9884: PUSH
9885: CALL_OW 44
9889: ADD
9890: ST_TO_ADDR
// end ;
9891: GO 9819
9893: POP
9894: POP
// end ;
9895: LD_VAR 0 4
9899: RET
// export function CreateUnitsWithClassLimited ( num_units , un_class , side , limit ) ; var i , overskill , count ; begin
9900: LD_INT 0
9902: PPUSH
9903: PPUSH
9904: PPUSH
9905: PPUSH
// result = [ ] ;
9906: LD_ADDR_VAR 0 5
9910: PUSH
9911: EMPTY
9912: ST_TO_ADDR
// InitUc ;
9913: CALL_OW 18
// InitHc ;
9917: CALL_OW 19
// if limit <= 0 then
9921: LD_VAR 0 4
9925: PUSH
9926: LD_INT 0
9928: LESSEQUAL
9929: IFFALSE 9933
// exit ;
9931: GO 10130
// if limit < num_units then
9933: LD_VAR 0 4
9937: PUSH
9938: LD_VAR 0 1
9942: LESS
9943: IFFALSE 9957
// count = limit else
9945: LD_ADDR_VAR 0 8
9949: PUSH
9950: LD_VAR 0 4
9954: ST_TO_ADDR
9955: GO 9967
// count = num_units ;
9957: LD_ADDR_VAR 0 8
9961: PUSH
9962: LD_VAR 0 1
9966: ST_TO_ADDR
// case side of americans :
9967: LD_VAR 0 3
9971: PUSH
9972: LD_EXP 7
9976: DOUBLE
9977: EQUAL
9978: IFTRUE 9982
9980: GO 9993
9982: POP
// begin uc_nation = nation_american ;
9983: LD_ADDR_OWVAR 21
9987: PUSH
9988: LD_INT 1
9990: ST_TO_ADDR
// end ; russians :
9991: GO 10015
9993: LD_EXP 4
9997: DOUBLE
9998: EQUAL
9999: IFTRUE 10003
10001: GO 10014
10003: POP
// begin uc_nation = nation_russian ;
10004: LD_ADDR_OWVAR 21
10008: PUSH
10009: LD_INT 3
10011: ST_TO_ADDR
// end ; end ;
10012: GO 10015
10014: POP
// uc_side = side ;
10015: LD_ADDR_OWVAR 20
10019: PUSH
10020: LD_VAR 0 3
10024: ST_TO_ADDR
// overskill = difficulty + 4 ;
10025: LD_ADDR_VAR 0 7
10029: PUSH
10030: LD_OWVAR 67
10034: PUSH
10035: LD_INT 4
10037: PLUS
10038: ST_TO_ADDR
// for i = 1 to count do
10039: LD_ADDR_VAR 0 6
10043: PUSH
10044: DOUBLE
10045: LD_INT 1
10047: DEC
10048: ST_TO_ADDR
10049: LD_VAR 0 8
10053: PUSH
10054: FOR_TO
10055: IFFALSE 10128
// begin if Rand ( 1 , 3 ) = 1 then
10057: LD_INT 1
10059: PPUSH
10060: LD_INT 3
10062: PPUSH
10063: CALL_OW 12
10067: PUSH
10068: LD_INT 1
10070: EQUAL
10071: IFFALSE 10093
// PrepareHuman ( false , un_class , - overskill ) else
10073: LD_INT 0
10075: PPUSH
10076: LD_VAR 0 2
10080: PPUSH
10081: LD_VAR 0 7
10085: NEG
10086: PPUSH
10087: CALL_OW 380
10091: GO 10110
// PrepareHuman ( false , un_class , overskill ) ;
10093: LD_INT 0
10095: PPUSH
10096: LD_VAR 0 2
10100: PPUSH
10101: LD_VAR 0 7
10105: PPUSH
10106: CALL_OW 380
// result = result ^ CreateHuman ;
10110: LD_ADDR_VAR 0 5
10114: PUSH
10115: LD_VAR 0 5
10119: PUSH
10120: CALL_OW 44
10124: ADD
10125: ST_TO_ADDR
// end ;
10126: GO 10054
10128: POP
10129: POP
// end ;
10130: LD_VAR 0 5
10134: RET
// export function CreateApemenWithClass ( num_units , un_class , side ) ; var i ; begin
10135: LD_INT 0
10137: PPUSH
10138: PPUSH
// result = [ ] ;
10139: LD_ADDR_VAR 0 4
10143: PUSH
10144: EMPTY
10145: ST_TO_ADDR
// InitUc ;
10146: CALL_OW 18
// InitHc ;
10150: CALL_OW 19
// uc_side = side ;
10154: LD_ADDR_OWVAR 20
10158: PUSH
10159: LD_VAR 0 3
10163: ST_TO_ADDR
// uc_nation = nation_nature ;
10164: LD_ADDR_OWVAR 21
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// hc_class = un_class ;
10172: LD_ADDR_OWVAR 28
10176: PUSH
10177: LD_VAR 0 2
10181: ST_TO_ADDR
// for i = 1 to num_units do
10182: LD_ADDR_VAR 0 5
10186: PUSH
10187: DOUBLE
10188: LD_INT 1
10190: DEC
10191: ST_TO_ADDR
10192: LD_VAR 0 1
10196: PUSH
10197: FOR_TO
10198: IFFALSE 10304
// begin hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10200: LD_ADDR_OWVAR 29
10204: PUSH
10205: LD_INT 11
10207: PPUSH
10208: LD_INT 13
10210: PPUSH
10211: CALL_OW 12
10215: PUSH
10216: LD_INT 10
10218: PPUSH
10219: LD_INT 11
10221: PPUSH
10222: CALL_OW 12
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
10231: LD_ADDR_OWVAR 27
10235: PUSH
10236: LD_INT 1
10238: PPUSH
10239: LD_INT 2
10241: PPUSH
10242: CALL_OW 12
10246: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , 0 , 0 ] ;
10247: LD_ADDR_OWVAR 31
10251: PUSH
10252: LD_INT 0
10254: PPUSH
10255: LD_INT 2
10257: PPUSH
10258: CALL_OW 12
10262: PUSH
10263: LD_INT 0
10265: PPUSH
10266: LD_INT 2
10268: PPUSH
10269: CALL_OW 12
10273: PUSH
10274: LD_INT 0
10276: PUSH
10277: LD_INT 0
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: ST_TO_ADDR
// result = result ^ CreateHuman ;
10286: LD_ADDR_VAR 0 4
10290: PUSH
10291: LD_VAR 0 4
10295: PUSH
10296: CALL_OW 44
10300: ADD
10301: ST_TO_ADDR
// end ;
10302: GO 10197
10304: POP
10305: POP
// end ;
10306: LD_VAR 0 4
10310: RET
// export function ResetVehicleAttackDelay ( base ) ; begin
10311: LD_INT 0
10313: PPUSH
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , Rand ( 5 5$30 , 7 7$30 ) - 1 1$0 * difficulty ) ;
10314: LD_ADDR_EXP 58
10318: PUSH
10319: LD_EXP 58
10323: PPUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: LD_INT 11550
10331: PPUSH
10332: LD_INT 15750
10334: PPUSH
10335: CALL_OW 12
10339: PUSH
10340: LD_INT 2100
10342: PUSH
10343: LD_OWVAR 67
10347: MUL
10348: MINUS
10349: PPUSH
10350: CALL_OW 1
10354: ST_TO_ADDR
// end ;
10355: LD_VAR 0 2
10359: RET
// export function ResetHumanAttackDelay ( base ) ; begin
10360: LD_INT 0
10362: PPUSH
// ai_human_attack_delay = Replace ( ai_human_attack_delay , base , Rand ( 6 6$30 , 8 8$30 ) - 0 0$45 * difficulty ) ;
10363: LD_ADDR_EXP 68
10367: PUSH
10368: LD_EXP 68
10372: PPUSH
10373: LD_VAR 0 1
10377: PPUSH
10378: LD_INT 13650
10380: PPUSH
10381: LD_INT 17850
10383: PPUSH
10384: CALL_OW 12
10388: PUSH
10389: LD_INT 1575
10391: PUSH
10392: LD_OWVAR 67
10396: MUL
10397: MINUS
10398: PPUSH
10399: CALL_OW 1
10403: ST_TO_ADDR
// end ;
10404: LD_VAR 0 2
10408: RET
// export function sizeof ( list ) ; begin
10409: LD_INT 0
10411: PPUSH
// result = list + 0 ;
10412: LD_ADDR_VAR 0 2
10416: PUSH
10417: LD_VAR 0 1
10421: PUSH
10422: LD_INT 0
10424: PLUS
10425: ST_TO_ADDR
// end ;
10426: LD_VAR 0 2
10430: RET
// function Action ; begin
10431: LD_INT 0
10433: PPUSH
// wait ( 2 ) ;
10434: LD_INT 2
10436: PPUSH
10437: CALL_OW 67
// CenterNowOnXY ( 168 , 109 ) ;
10441: LD_INT 168
10443: PPUSH
10444: LD_INT 109
10446: PPUSH
10447: CALL_OW 86
// RevealFogArea ( you , Am_base ) ;
10451: LD_EXP 3
10455: PPUSH
10456: LD_INT 4
10458: PPUSH
10459: CALL_OW 332
// wait ( 0 0$0.2 ) ;
10463: LD_INT 7
10465: PPUSH
10466: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10470: LD_STRING M1
10472: PPUSH
10473: CALL_OW 337
// wait ( 0 0$0.2 ) ;
10477: LD_INT 7
10479: PPUSH
10480: CALL_OW 67
// SaveForQuickRestart ;
10484: CALL_OW 22
// end ; end_of_file
10488: LD_VAR 0 1
10492: RET
// every 0 0$1 + 0 0$0.4 do
10493: GO 10495
10495: DISABLE
// begin repeat wait ( Rand ( 1 1$10 , 2 2$40 ) ) ;
10496: LD_INT 2450
10498: PPUSH
10499: LD_INT 5600
10501: PPUSH
10502: CALL_OW 12
10506: PPUSH
10507: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 3 , 5 ) , true ) ;
10511: LD_INT 3
10513: PPUSH
10514: LD_INT 5
10516: PPUSH
10517: CALL_OW 12
10521: PPUSH
10522: LD_INT 1
10524: PPUSH
10525: CALL_OW 57
// if Rand ( 1 , 4 ) = 1 then
10529: LD_INT 1
10531: PPUSH
10532: LD_INT 4
10534: PPUSH
10535: CALL_OW 12
10539: PUSH
10540: LD_INT 1
10542: EQUAL
10543: IFFALSE 10578
// begin wait ( Rand ( 0 0$5 , 0 0$20 ) ) ;
10545: LD_INT 175
10547: PPUSH
10548: LD_INT 700
10550: PPUSH
10551: CALL_OW 12
10555: PPUSH
10556: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 2 , 4 ) , true ) ;
10560: LD_INT 2
10562: PPUSH
10563: LD_INT 4
10565: PPUSH
10566: CALL_OW 12
10570: PPUSH
10571: LD_INT 1
10573: PPUSH
10574: CALL_OW 57
// end ; until false ;
10578: LD_INT 0
10580: IFFALSE 10496
// end ;
10582: END
// every 0 0$1 + 0 0$0.5 do var count , time ;
10583: GO 10585
10585: DISABLE
10586: LD_INT 0
10588: PPUSH
10589: PPUSH
// begin count = 0 ;
10590: LD_ADDR_VAR 0 1
10594: PUSH
10595: LD_INT 0
10597: ST_TO_ADDR
// repeat if game_phase < 3 then
10598: LD_EXP 89
10602: PUSH
10603: LD_INT 3
10605: LESS
10606: IFFALSE 10655
// time = [ 1 1$0 , 1 1$15 , 1 1$30 ] [ difficulty ] + ( 0 0$45 * count / ( count + 6 ) ) else
10608: LD_ADDR_VAR 0 2
10612: PUSH
10613: LD_INT 2100
10615: PUSH
10616: LD_INT 2625
10618: PUSH
10619: LD_INT 3150
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: LD_OWVAR 67
10631: ARRAY
10632: PUSH
10633: LD_INT 1575
10635: PUSH
10636: LD_VAR 0 1
10640: MUL
10641: PUSH
10642: LD_VAR 0 1
10646: PUSH
10647: LD_INT 6
10649: PLUS
10650: DIVREAL
10651: PLUS
10652: ST_TO_ADDR
10653: GO 10680
// time = [ 1 1$40 , 1 1$55 , 2 2$10 ] [ difficulty ] ;
10655: LD_ADDR_VAR 0 2
10659: PUSH
10660: LD_INT 3500
10662: PUSH
10663: LD_INT 4025
10665: PUSH
10666: LD_INT 4550
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: PUSH
10674: LD_OWVAR 67
10678: ARRAY
10679: ST_TO_ADDR
// wait ( Rand ( time , time + 0 0$30 ) ) ;
10680: LD_VAR 0 2
10684: PPUSH
10685: LD_VAR 0 2
10689: PUSH
10690: LD_INT 1050
10692: PLUS
10693: PPUSH
10694: CALL_OW 12
10698: PPUSH
10699: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , player_crate_area , true ) ;
10703: LD_INT 3
10705: PPUSH
10706: LD_INT 5
10708: PPUSH
10709: CALL_OW 12
10713: PPUSH
10714: LD_INT 9
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 55
// count = count + 1 ;
10724: LD_ADDR_VAR 0 1
10728: PUSH
10729: LD_VAR 0 1
10733: PUSH
10734: LD_INT 1
10736: PLUS
10737: ST_TO_ADDR
// until false ;
10738: LD_INT 0
10740: IFFALSE 10598
// end ; end_of_file
10742: PPOPN 2
10744: END
// every 0 0$10 do var i , base ;
10745: GO 10747
10747: DISABLE
10748: LD_INT 0
10750: PPUSH
10751: PPUSH
// begin for i = 1 to ai_depot do
10752: LD_ADDR_VAR 0 1
10756: PUSH
10757: DOUBLE
10758: LD_INT 1
10760: DEC
10761: ST_TO_ADDR
10762: LD_EXP 35
10766: PUSH
10767: FOR_TO
10768: IFFALSE 10878
// if IsOk ( ai_depot [ i ] ) and GetSide ( ai_depot [ i ] ) <> you then
10770: LD_EXP 35
10774: PUSH
10775: LD_VAR 0 1
10779: ARRAY
10780: PPUSH
10781: CALL_OW 302
10785: PUSH
10786: LD_EXP 35
10790: PUSH
10791: LD_VAR 0 1
10795: ARRAY
10796: PPUSH
10797: CALL_OW 255
10801: PUSH
10802: LD_EXP 3
10806: NONEQUAL
10807: AND
10808: IFFALSE 10876
// begin base = GetBase ( ai_depot [ i ] ) ;
10810: LD_ADDR_VAR 0 2
10814: PUSH
10815: LD_EXP 35
10819: PUSH
10820: LD_VAR 0 1
10824: ARRAY
10825: PPUSH
10826: CALL_OW 274
10830: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 300 ) ;
10831: LD_VAR 0 2
10835: PPUSH
10836: LD_INT 1
10838: PPUSH
10839: LD_INT 300
10841: PPUSH
10842: CALL_OW 277
// SetResourceType ( base , mat_oil , 300 ) ;
10846: LD_VAR 0 2
10850: PPUSH
10851: LD_INT 2
10853: PPUSH
10854: LD_INT 300
10856: PPUSH
10857: CALL_OW 277
// SetResourceType ( base , mat_siberit , 300 ) ;
10861: LD_VAR 0 2
10865: PPUSH
10866: LD_INT 3
10868: PPUSH
10869: LD_INT 300
10871: PPUSH
10872: CALL_OW 277
// end ;
10876: GO 10767
10878: POP
10879: POP
// enable ;
10880: ENABLE
// end ;
10881: PPOPN 2
10883: END
// on UnitDestroyed ( un ) do var side , temp_list , base ;
10884: LD_INT 0
10886: PPUSH
10887: PPUSH
10888: PPUSH
// begin if un = Heike then
10889: LD_VAR 0 1
10893: PUSH
10894: LD_EXP 10
10898: EQUAL
10899: IFFALSE 10923
// begin ExclusiveOn ;
10901: CALL_OW 4
// Wait ( 0 0$1 ) ;
10905: LD_INT 35
10907: PPUSH
10908: CALL_OW 67
// YouLost ( HeikeDead ) ;
10912: LD_STRING HeikeDead
10914: PPUSH
10915: CALL_OW 104
// ExclusiveOff ;
10919: CALL_OW 5
// end ; if un = Gensher then
10923: LD_VAR 0 1
10927: PUSH
10928: LD_EXP 24
10932: EQUAL
10933: IFFALSE 10957
// begin ExclusiveOn ;
10935: CALL_OW 4
// Wait ( 0 0$1 ) ;
10939: LD_INT 35
10941: PPUSH
10942: CALL_OW 67
// YouLost ( GensherDead ) ;
10946: LD_STRING GensherDead
10948: PPUSH
10949: CALL_OW 104
// ExclusiveOff ;
10953: CALL_OW 5
// end ; if UnitFilter ( original_gensher_people , [ [ f_class , class_scientistic ] , [ f_lives , 1 ] ] ) = 0 then
10957: LD_EXP 83
10961: PPUSH
10962: LD_INT 25
10964: PUSH
10965: LD_INT 4
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 24
10974: PUSH
10975: LD_INT 1
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PPUSH
10986: CALL_OW 72
10990: PUSH
10991: LD_INT 0
10993: EQUAL
10994: IFFALSE 11018
// begin ExclusiveOn ;
10996: CALL_OW 4
// wait ( 0 0$1 ) ;
11000: LD_INT 35
11002: PPUSH
11003: CALL_OW 67
// YouLost ( GensherScisDead ) ;
11007: LD_STRING GensherScisDead
11009: PPUSH
11010: CALL_OW 104
// ExclusiveOff ;
11014: CALL_OW 5
// end ; for base in ai_bases do
11018: LD_ADDR_VAR 0 4
11022: PUSH
11023: LD_EXP 59
11027: PUSH
11028: FOR_IN
11029: IFFALSE 11080
// begin temp_list = ai_captured_buildings [ base ] diff un ;
11031: LD_ADDR_VAR 0 3
11035: PUSH
11036: LD_EXP 79
11040: PUSH
11041: LD_VAR 0 4
11045: ARRAY
11046: PUSH
11047: LD_VAR 0 1
11051: DIFF
11052: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
11053: LD_ADDR_EXP 79
11057: PUSH
11058: LD_EXP 79
11062: PPUSH
11063: LD_VAR 0 4
11067: PPUSH
11068: LD_VAR 0 3
11072: PPUSH
11073: CALL_OW 1
11077: ST_TO_ADDR
// end ;
11078: GO 11028
11080: POP
11081: POP
// side = GetSide ( un ) ;
11082: LD_ADDR_VAR 0 2
11086: PUSH
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL_OW 255
11096: ST_TO_ADDR
// if side = you then
11097: LD_VAR 0 2
11101: PUSH
11102: LD_EXP 3
11106: EQUAL
11107: IFFALSE 11111
// exit ;
11109: GO 11334
// if side = you_alt and game_phase = 1 then
11111: LD_VAR 0 2
11115: PUSH
11116: LD_EXP 6
11120: EQUAL
11121: PUSH
11122: LD_EXP 89
11126: PUSH
11127: LD_INT 1
11129: EQUAL
11130: AND
11131: IFFALSE 11194
// begin case GetType ( un ) of unit_human :
11133: LD_VAR 0 1
11137: PPUSH
11138: CALL_OW 247
11142: PUSH
11143: LD_INT 1
11145: DOUBLE
11146: EQUAL
11147: IFTRUE 11151
11149: GO 11168
11151: POP
// russian_interference_points = russian_interference_points + 3 ; unit_building :
11152: LD_ADDR_EXP 97
11156: PUSH
11157: LD_EXP 97
11161: PUSH
11162: LD_INT 3
11164: PLUS
11165: ST_TO_ADDR
11166: GO 11194
11168: LD_INT 3
11170: DOUBLE
11171: EQUAL
11172: IFTRUE 11176
11174: GO 11193
11176: POP
// russian_interference_points = russian_interference_points + 2 ; end ;
11177: LD_ADDR_EXP 97
11181: PUSH
11182: LD_EXP 97
11186: PUSH
11187: LD_INT 2
11189: PLUS
11190: ST_TO_ADDR
11191: GO 11194
11193: POP
// end ; case GetType ( un ) of unit_human :
11194: LD_VAR 0 1
11198: PPUSH
11199: CALL_OW 247
11203: PUSH
11204: LD_INT 1
11206: DOUBLE
11207: EQUAL
11208: IFTRUE 11212
11210: GO 11249
11212: POP
// for base in ai_bases do
11213: LD_ADDR_VAR 0 4
11217: PUSH
11218: LD_EXP 59
11222: PUSH
11223: FOR_IN
11224: IFFALSE 11245
// RemoveHumanFromVariables ( base , un , true ) ; unit_vehicle :
11226: LD_VAR 0 4
11230: PPUSH
11231: LD_VAR 0 1
11235: PPUSH
11236: LD_INT 1
11238: PPUSH
11239: CALL 11890 0 3
11243: GO 11223
11245: POP
11246: POP
11247: GO 11334
11249: LD_INT 2
11251: DOUBLE
11252: EQUAL
11253: IFTRUE 11257
11255: GO 11291
11257: POP
// for base in ai_bases do
11258: LD_ADDR_VAR 0 4
11262: PUSH
11263: LD_EXP 59
11267: PUSH
11268: FOR_IN
11269: IFFALSE 11287
// RemoveVehicleFromVariables ( base , un ) ; unit_building :
11271: LD_VAR 0 4
11275: PPUSH
11276: LD_VAR 0 1
11280: PPUSH
11281: CALL 11498 0 2
11285: GO 11268
11287: POP
11288: POP
11289: GO 11334
11291: LD_INT 3
11293: DOUBLE
11294: EQUAL
11295: IFTRUE 11299
11297: GO 11333
11299: POP
// for base in ai_bases do
11300: LD_ADDR_VAR 0 4
11304: PUSH
11305: LD_EXP 59
11309: PUSH
11310: FOR_IN
11311: IFFALSE 11329
// RemoveBuildingFromVariables ( base , un ) ; end ;
11313: LD_VAR 0 4
11317: PPUSH
11318: LD_VAR 0 1
11322: PPUSH
11323: CALL 11337 0 2
11327: GO 11310
11329: POP
11330: POP
11331: GO 11334
11333: POP
// end ;
11334: PPOPN 4
11336: END
// function RemoveBuildingFromVariables ( base , building ) ; var temp_list ; begin
11337: LD_INT 0
11339: PPUSH
11340: PPUSH
// temp_list = ai_all_buildings [ base ] diff building ;
11341: LD_ADDR_VAR 0 4
11345: PUSH
11346: LD_EXP 45
11350: PUSH
11351: LD_VAR 0 1
11355: ARRAY
11356: PUSH
11357: LD_VAR 0 2
11361: DIFF
11362: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
11363: LD_ADDR_EXP 45
11367: PUSH
11368: LD_EXP 45
11372: PPUSH
11373: LD_VAR 0 1
11377: PPUSH
11378: LD_VAR 0 4
11382: PPUSH
11383: CALL_OW 1
11387: ST_TO_ADDR
// temp_list = ai_excepted_buildings [ base ] diff building ;
11388: LD_ADDR_VAR 0 4
11392: PUSH
11393: LD_EXP 69
11397: PUSH
11398: LD_VAR 0 1
11402: ARRAY
11403: PUSH
11404: LD_VAR 0 2
11408: DIFF
11409: ST_TO_ADDR
// ai_excepted_buildings = Replace ( ai_excepted_buildings , base , temp_list ) ;
11410: LD_ADDR_EXP 69
11414: PUSH
11415: LD_EXP 69
11419: PPUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: LD_VAR 0 4
11429: PPUSH
11430: CALL_OW 1
11434: ST_TO_ADDR
// if building = ai_building_under_construction [ base ] then
11435: LD_VAR 0 2
11439: PUSH
11440: LD_EXP 43
11444: PUSH
11445: LD_VAR 0 1
11449: ARRAY
11450: EQUAL
11451: IFFALSE 11476
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
11453: LD_ADDR_EXP 43
11457: PUSH
11458: LD_EXP 43
11462: PPUSH
11463: LD_VAR 0 1
11467: PPUSH
11468: LD_INT 0
11470: PPUSH
11471: CALL_OW 1
11475: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , building , false ) ;
11476: LD_VAR 0 1
11480: PPUSH
11481: LD_VAR 0 2
11485: PPUSH
11486: LD_INT 0
11488: PPUSH
11489: CALL 7109 0 3
// end ;
11493: LD_VAR 0 3
11497: RET
// function RemoveVehicleFromVariables ( base , vehicle ) ; var temp_list ; begin
11498: LD_INT 0
11500: PPUSH
11501: PPUSH
// if vehicle in ai_vehicles_defend [ base ] then
11502: LD_VAR 0 2
11506: PUSH
11507: LD_EXP 40
11511: PUSH
11512: LD_VAR 0 1
11516: ARRAY
11517: IN
11518: IFFALSE 11567
// begin temp_list = ai_vehicles_defend [ base ] diff vehicle ;
11520: LD_ADDR_VAR 0 4
11524: PUSH
11525: LD_EXP 40
11529: PUSH
11530: LD_VAR 0 1
11534: ARRAY
11535: PUSH
11536: LD_VAR 0 2
11540: DIFF
11541: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list ) ;
11542: LD_ADDR_EXP 40
11546: PUSH
11547: LD_EXP 40
11551: PPUSH
11552: LD_VAR 0 1
11556: PPUSH
11557: LD_VAR 0 4
11561: PPUSH
11562: CALL_OW 1
11566: ST_TO_ADDR
// end ; if vehicle in ai_vehicles_attack [ base ] then
11567: LD_VAR 0 2
11571: PUSH
11572: LD_EXP 41
11576: PUSH
11577: LD_VAR 0 1
11581: ARRAY
11582: IN
11583: IFFALSE 11632
// begin temp_list = ai_vehicles_attack [ base ] diff vehicle ;
11585: LD_ADDR_VAR 0 4
11589: PUSH
11590: LD_EXP 41
11594: PUSH
11595: LD_VAR 0 1
11599: ARRAY
11600: PUSH
11601: LD_VAR 0 2
11605: DIFF
11606: ST_TO_ADDR
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , temp_list ) ;
11607: LD_ADDR_EXP 41
11611: PUSH
11612: LD_EXP 41
11616: PPUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: LD_VAR 0 4
11626: PPUSH
11627: CALL_OW 1
11631: ST_TO_ADDR
// end ; if vehicle = ai_cargo_bay [ base ] then
11632: LD_VAR 0 2
11636: PUSH
11637: LD_EXP 61
11641: PUSH
11642: LD_VAR 0 1
11646: ARRAY
11647: EQUAL
11648: IFFALSE 11673
// begin ai_cargo_bay = Replace ( ai_cargo_bay , base , 0 ) ;
11650: LD_ADDR_EXP 61
11654: PUSH
11655: LD_EXP 61
11659: PPUSH
11660: LD_VAR 0 1
11664: PPUSH
11665: LD_INT 0
11667: PPUSH
11668: CALL_OW 1
11672: ST_TO_ADDR
// end ; if vehicle = ai_crane [ base ] then
11673: LD_VAR 0 2
11677: PUSH
11678: LD_EXP 71
11682: PUSH
11683: LD_VAR 0 1
11687: ARRAY
11688: EQUAL
11689: IFFALSE 11755
// begin ai_crane = Replace ( ai_crane , base , 0 ) ;
11691: LD_ADDR_EXP 71
11695: PUSH
11696: LD_EXP 71
11700: PPUSH
11701: LD_VAR 0 1
11705: PPUSH
11706: LD_INT 0
11708: PPUSH
11709: CALL_OW 1
11713: ST_TO_ADDR
// if vehicle = ai_building_constructor [ base ] then
11714: LD_VAR 0 2
11718: PUSH
11719: LD_EXP 46
11723: PUSH
11724: LD_VAR 0 1
11728: ARRAY
11729: EQUAL
11730: IFFALSE 11755
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
11732: LD_ADDR_EXP 46
11736: PUSH
11737: LD_EXP 46
11741: PPUSH
11742: LD_VAR 0 1
11746: PPUSH
11747: LD_INT 0
11749: PPUSH
11750: CALL_OW 1
11754: ST_TO_ADDR
// end ; if vehicle in ai_vehicles_being_repaired [ base ] then
11755: LD_VAR 0 2
11759: PUSH
11760: LD_EXP 80
11764: PUSH
11765: LD_VAR 0 1
11769: ARRAY
11770: IN
11771: IFFALSE 11820
// begin temp_list = ai_vehicles_being_repaired [ base ] diff vehicle ;
11773: LD_ADDR_VAR 0 4
11777: PUSH
11778: LD_EXP 80
11782: PUSH
11783: LD_VAR 0 1
11787: ARRAY
11788: PUSH
11789: LD_VAR 0 2
11793: DIFF
11794: ST_TO_ADDR
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
11795: LD_ADDR_EXP 80
11799: PUSH
11800: LD_EXP 80
11804: PPUSH
11805: LD_VAR 0 1
11809: PPUSH
11810: LD_VAR 0 4
11814: PPUSH
11815: CALL_OW 1
11819: ST_TO_ADDR
// end ; if vehicle in ai_refuel_vehicles_list [ base ] then
11820: LD_VAR 0 2
11824: PUSH
11825: LD_EXP 55
11829: PUSH
11830: LD_VAR 0 1
11834: ARRAY
11835: IN
11836: IFFALSE 11885
// begin temp_list = ai_refuel_vehicles_list [ base ] diff vehicle ;
11838: LD_ADDR_VAR 0 4
11842: PUSH
11843: LD_EXP 55
11847: PUSH
11848: LD_VAR 0 1
11852: ARRAY
11853: PUSH
11854: LD_VAR 0 2
11858: DIFF
11859: ST_TO_ADDR
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
11860: LD_ADDR_EXP 55
11864: PUSH
11865: LD_EXP 55
11869: PPUSH
11870: LD_VAR 0 1
11874: PPUSH
11875: LD_VAR 0 4
11879: PPUSH
11880: CALL_OW 1
11884: ST_TO_ADDR
// end ; end ;
11885: LD_VAR 0 3
11889: RET
// function RemoveHumanFromVariables ( base , human , check_if_base_is_dead ) ; var temp_list ; begin
11890: LD_INT 0
11892: PPUSH
11893: PPUSH
// if human in ai_soldiers [ base ] then
11894: LD_VAR 0 2
11898: PUSH
11899: LD_EXP 30
11903: PUSH
11904: LD_VAR 0 1
11908: ARRAY
11909: IN
11910: IFFALSE 11959
// begin temp_list = ai_soldiers [ base ] diff human ;
11912: LD_ADDR_VAR 0 5
11916: PUSH
11917: LD_EXP 30
11921: PUSH
11922: LD_VAR 0 1
11926: ARRAY
11927: PUSH
11928: LD_VAR 0 2
11932: DIFF
11933: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , base , temp_list ) ;
11934: LD_ADDR_EXP 30
11938: PUSH
11939: LD_EXP 30
11943: PPUSH
11944: LD_VAR 0 1
11948: PPUSH
11949: LD_VAR 0 5
11953: PPUSH
11954: CALL_OW 1
11958: ST_TO_ADDR
// end ; if human in ai_attacking_soldiers [ base ] then
11959: LD_VAR 0 2
11963: PUSH
11964: LD_EXP 64
11968: PUSH
11969: LD_VAR 0 1
11973: ARRAY
11974: IN
11975: IFFALSE 12024
// begin temp_list = ai_attacking_soldiers [ base ] diff human ;
11977: LD_ADDR_VAR 0 5
11981: PUSH
11982: LD_EXP 64
11986: PUSH
11987: LD_VAR 0 1
11991: ARRAY
11992: PUSH
11993: LD_VAR 0 2
11997: DIFF
11998: ST_TO_ADDR
// ai_attacking_soldiers = Replace ( ai_attacking_soldiers , base , temp_list ) ;
11999: LD_ADDR_EXP 64
12003: PUSH
12004: LD_EXP 64
12008: PPUSH
12009: LD_VAR 0 1
12013: PPUSH
12014: LD_VAR 0 5
12018: PPUSH
12019: CALL_OW 1
12023: ST_TO_ADDR
// end ; if human in ai_engineers [ base ] then
12024: LD_VAR 0 2
12028: PUSH
12029: LD_EXP 31
12033: PUSH
12034: LD_VAR 0 1
12038: ARRAY
12039: IN
12040: IFFALSE 12089
// begin temp_list = ai_engineers [ base ] diff human ;
12042: LD_ADDR_VAR 0 5
12046: PUSH
12047: LD_EXP 31
12051: PUSH
12052: LD_VAR 0 1
12056: ARRAY
12057: PUSH
12058: LD_VAR 0 2
12062: DIFF
12063: ST_TO_ADDR
// ai_engineers = Replace ( ai_engineers , base , temp_list ) ;
12064: LD_ADDR_EXP 31
12068: PUSH
12069: LD_EXP 31
12073: PPUSH
12074: LD_VAR 0 1
12078: PPUSH
12079: LD_VAR 0 5
12083: PPUSH
12084: CALL_OW 1
12088: ST_TO_ADDR
// end ; if human in ai_apemen_engineers [ base ] then
12089: LD_VAR 0 2
12093: PUSH
12094: LD_EXP 63
12098: PUSH
12099: LD_VAR 0 1
12103: ARRAY
12104: IN
12105: IFFALSE 12154
// begin temp_list = ai_apemen_engineers [ base ] diff human ;
12107: LD_ADDR_VAR 0 5
12111: PUSH
12112: LD_EXP 63
12116: PUSH
12117: LD_VAR 0 1
12121: ARRAY
12122: PUSH
12123: LD_VAR 0 2
12127: DIFF
12128: ST_TO_ADDR
// ai_apemen_engineers = Replace ( ai_apemen_engineers , base , temp_list ) ;
12129: LD_ADDR_EXP 63
12133: PUSH
12134: LD_EXP 63
12138: PPUSH
12139: LD_VAR 0 1
12143: PPUSH
12144: LD_VAR 0 5
12148: PPUSH
12149: CALL_OW 1
12153: ST_TO_ADDR
// end ; if human in ai_mechanics_defend [ base ] then
12154: LD_VAR 0 2
12158: PUSH
12159: LD_EXP 32
12163: PUSH
12164: LD_VAR 0 1
12168: ARRAY
12169: IN
12170: IFFALSE 12219
// begin temp_list = ai_mechanics_defend [ base ] diff human ;
12172: LD_ADDR_VAR 0 5
12176: PUSH
12177: LD_EXP 32
12181: PUSH
12182: LD_VAR 0 1
12186: ARRAY
12187: PUSH
12188: LD_VAR 0 2
12192: DIFF
12193: ST_TO_ADDR
// ai_mechanics_defend = Replace ( ai_mechanics_defend , base , temp_list ) ;
12194: LD_ADDR_EXP 32
12198: PUSH
12199: LD_EXP 32
12203: PPUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: LD_VAR 0 5
12213: PPUSH
12214: CALL_OW 1
12218: ST_TO_ADDR
// end ; if human in ai_scientists [ base ] then
12219: LD_VAR 0 2
12223: PUSH
12224: LD_EXP 33
12228: PUSH
12229: LD_VAR 0 1
12233: ARRAY
12234: IN
12235: IFFALSE 12284
// begin temp_list = ai_scientists [ base ] diff human ;
12237: LD_ADDR_VAR 0 5
12241: PUSH
12242: LD_EXP 33
12246: PUSH
12247: LD_VAR 0 1
12251: ARRAY
12252: PUSH
12253: LD_VAR 0 2
12257: DIFF
12258: ST_TO_ADDR
// ai_scientists = Replace ( ai_scientists , base , temp_list ) ;
12259: LD_ADDR_EXP 33
12263: PUSH
12264: LD_EXP 33
12268: PPUSH
12269: LD_VAR 0 1
12273: PPUSH
12274: LD_VAR 0 5
12278: PPUSH
12279: CALL_OW 1
12283: ST_TO_ADDR
// end ; if human in ai_attacking_scientists [ base ] then
12284: LD_VAR 0 2
12288: PUSH
12289: LD_EXP 65
12293: PUSH
12294: LD_VAR 0 1
12298: ARRAY
12299: IN
12300: IFFALSE 12349
// begin temp_list = ai_attacking_scientists [ base ] diff human ;
12302: LD_ADDR_VAR 0 5
12306: PUSH
12307: LD_EXP 65
12311: PUSH
12312: LD_VAR 0 1
12316: ARRAY
12317: PUSH
12318: LD_VAR 0 2
12322: DIFF
12323: ST_TO_ADDR
// ai_attacking_scientists = Replace ( ai_attacking_scientists , base , temp_list ) ;
12324: LD_ADDR_EXP 65
12328: PUSH
12329: LD_EXP 65
12333: PPUSH
12334: LD_VAR 0 1
12338: PPUSH
12339: LD_VAR 0 5
12343: PPUSH
12344: CALL_OW 1
12348: ST_TO_ADDR
// end ; if human in ai_heal_these_humans [ base ] then
12349: LD_VAR 0 2
12353: PUSH
12354: LD_EXP 44
12358: PUSH
12359: LD_VAR 0 1
12363: ARRAY
12364: IN
12365: IFFALSE 12414
// begin temp_list = ai_heal_these_humans [ base ] diff human ;
12367: LD_ADDR_VAR 0 5
12371: PUSH
12372: LD_EXP 44
12376: PUSH
12377: LD_VAR 0 1
12381: ARRAY
12382: PUSH
12383: LD_VAR 0 2
12387: DIFF
12388: ST_TO_ADDR
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12389: LD_ADDR_EXP 44
12393: PUSH
12394: LD_EXP 44
12398: PPUSH
12399: LD_VAR 0 1
12403: PPUSH
12404: LD_VAR 0 5
12408: PPUSH
12409: CALL_OW 1
12413: ST_TO_ADDR
// end ; if human = ai_building_constructor [ base ] then
12414: LD_VAR 0 2
12418: PUSH
12419: LD_EXP 46
12423: PUSH
12424: LD_VAR 0 1
12428: ARRAY
12429: EQUAL
12430: IFFALSE 12455
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
12432: LD_ADDR_EXP 46
12436: PUSH
12437: LD_EXP 46
12441: PPUSH
12442: LD_VAR 0 1
12446: PPUSH
12447: LD_INT 0
12449: PPUSH
12450: CALL_OW 1
12454: ST_TO_ADDR
// if human in ai_retreating_attacking_humans [ base ] then
12455: LD_VAR 0 2
12459: PUSH
12460: LD_EXP 67
12464: PUSH
12465: LD_VAR 0 1
12469: ARRAY
12470: IN
12471: IFFALSE 12520
// begin temp_list = ai_retreating_attacking_humans [ base ] diff human ;
12473: LD_ADDR_VAR 0 5
12477: PUSH
12478: LD_EXP 67
12482: PUSH
12483: LD_VAR 0 1
12487: ARRAY
12488: PUSH
12489: LD_VAR 0 2
12493: DIFF
12494: ST_TO_ADDR
// ai_retreating_attacking_humans = Replace ( ai_retreating_attacking_humans , base , temp_list ) ;
12495: LD_ADDR_EXP 67
12499: PUSH
12500: LD_EXP 67
12504: PPUSH
12505: LD_VAR 0 1
12509: PPUSH
12510: LD_VAR 0 5
12514: PPUSH
12515: CALL_OW 1
12519: ST_TO_ADDR
// end ; if check_if_base_is_dead then
12520: LD_VAR 0 3
12524: IFFALSE 12634
// if ( ( ai_soldiers [ base ] ^ ai_attacking_soldiers [ base ] ^ ai_engineers [ base ] ^ ai_apemen_engineers [ base ] ^ ai_mechanics_defend [ base ] ^ ai_scientists [ base ] ^ ai_attacking_scientists [ base ] ) diff 0 ) = 0 then
12526: LD_EXP 30
12530: PUSH
12531: LD_VAR 0 1
12535: ARRAY
12536: PUSH
12537: LD_EXP 64
12541: PUSH
12542: LD_VAR 0 1
12546: ARRAY
12547: ADD
12548: PUSH
12549: LD_EXP 31
12553: PUSH
12554: LD_VAR 0 1
12558: ARRAY
12559: ADD
12560: PUSH
12561: LD_EXP 63
12565: PUSH
12566: LD_VAR 0 1
12570: ARRAY
12571: ADD
12572: PUSH
12573: LD_EXP 32
12577: PUSH
12578: LD_VAR 0 1
12582: ARRAY
12583: ADD
12584: PUSH
12585: LD_EXP 33
12589: PUSH
12590: LD_VAR 0 1
12594: ARRAY
12595: ADD
12596: PUSH
12597: LD_EXP 65
12601: PUSH
12602: LD_VAR 0 1
12606: ARRAY
12607: ADD
12608: PUSH
12609: LD_INT 0
12611: DIFF
12612: PUSH
12613: LD_INT 0
12615: EQUAL
12616: IFFALSE 12634
// ai_bases = ai_bases diff base ;
12618: LD_ADDR_EXP 59
12622: PUSH
12623: LD_EXP 59
12627: PUSH
12628: LD_VAR 0 1
12632: DIFF
12633: ST_TO_ADDR
// end ;
12634: LD_VAR 0 4
12638: RET
// function GetBaseArea ( base ) ; begin
12639: LD_INT 0
12641: PPUSH
// case base of 1 :
12642: LD_VAR 0 1
12646: PUSH
12647: LD_INT 1
12649: DOUBLE
12650: EQUAL
12651: IFTRUE 12655
12653: GO 12666
12655: POP
// result = Am_base ; 2 :
12656: LD_ADDR_VAR 0 2
12660: PUSH
12661: LD_INT 4
12663: ST_TO_ADDR
12664: GO 12705
12666: LD_INT 2
12668: DOUBLE
12669: EQUAL
12670: IFTRUE 12674
12672: GO 12685
12674: POP
// result = Gensher_base ; 3 :
12675: LD_ADDR_VAR 0 2
12679: PUSH
12680: LD_INT 7
12682: ST_TO_ADDR
12683: GO 12705
12685: LD_INT 3
12687: DOUBLE
12688: EQUAL
12689: IFTRUE 12693
12691: GO 12704
12693: POP
// result = Ru_base ; end ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_INT 3
12701: ST_TO_ADDR
12702: GO 12705
12704: POP
// end ;
12705: LD_VAR 0 2
12709: RET
// function GetBaseSide ( base ) ; begin
12710: LD_INT 0
12712: PPUSH
// case base of 1 :
12713: LD_VAR 0 1
12717: PUSH
12718: LD_INT 1
12720: DOUBLE
12721: EQUAL
12722: IFTRUE 12726
12724: GO 12739
12726: POP
// result = americans ; 2 :
12727: LD_ADDR_VAR 0 2
12731: PUSH
12732: LD_EXP 7
12736: ST_TO_ADDR
12737: GO 12782
12739: LD_INT 2
12741: DOUBLE
12742: EQUAL
12743: IFTRUE 12747
12745: GO 12760
12747: POP
// result = you_alt ; 3 :
12748: LD_ADDR_VAR 0 2
12752: PUSH
12753: LD_EXP 6
12757: ST_TO_ADDR
12758: GO 12782
12760: LD_INT 3
12762: DOUBLE
12763: EQUAL
12764: IFTRUE 12768
12766: GO 12781
12768: POP
// result = russians ; end ;
12769: LD_ADDR_VAR 0 2
12773: PUSH
12774: LD_EXP 4
12778: ST_TO_ADDR
12779: GO 12782
12781: POP
// end ;
12782: LD_VAR 0 2
12786: RET
// function GetBaseNation ( base ) ; begin
12787: LD_INT 0
12789: PPUSH
// case base of 1 :
12790: LD_VAR 0 1
12794: PUSH
12795: LD_INT 1
12797: DOUBLE
12798: EQUAL
12799: IFTRUE 12803
12801: GO 12814
12803: POP
// result = nation_american ; 2 :
12804: LD_ADDR_VAR 0 2
12808: PUSH
12809: LD_INT 1
12811: ST_TO_ADDR
12812: GO 12853
12814: LD_INT 2
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 12833
12822: POP
// result = nation_arabian ; 3 :
12823: LD_ADDR_VAR 0 2
12827: PUSH
12828: LD_INT 2
12830: ST_TO_ADDR
12831: GO 12853
12833: LD_INT 3
12835: DOUBLE
12836: EQUAL
12837: IFTRUE 12841
12839: GO 12852
12841: POP
// result = nation_russian ; end ;
12842: LD_ADDR_VAR 0 2
12846: PUSH
12847: LD_INT 3
12849: ST_TO_ADDR
12850: GO 12853
12852: POP
// end ;
12853: LD_VAR 0 2
12857: RET
// function FindBase ( un ) ; var base ; begin
12858: LD_INT 0
12860: PPUSH
12861: PPUSH
// for base in ai_bases do
12862: LD_ADDR_VAR 0 3
12866: PUSH
12867: LD_EXP 59
12871: PUSH
12872: FOR_IN
12873: IFFALSE 12912
// if IsInArea ( un , GetBaseArea ( base ) ) then
12875: LD_VAR 0 1
12879: PPUSH
12880: LD_VAR 0 3
12884: PPUSH
12885: CALL 12639 0 1
12889: PPUSH
12890: CALL_OW 308
12894: IFFALSE 12910
// begin result = base ;
12896: LD_ADDR_VAR 0 2
12900: PUSH
12901: LD_VAR 0 3
12905: ST_TO_ADDR
// exit ;
12906: POP
12907: POP
12908: GO 12923
// end ;
12910: GO 12872
12912: POP
12913: POP
// result = - 1 ;
12914: LD_ADDR_VAR 0 2
12918: PUSH
12919: LD_INT 1
12921: NEG
12922: ST_TO_ADDR
// end ;
12923: LD_VAR 0 2
12927: RET
// every 0 0$1 do var side , i , temp_list , buildings_list , soldiers_list , temp_unit , base , val , special_units , bunkers , under_attack , j ; var am_snipers , temp_list_2 ;
12928: GO 12930
12930: DISABLE
12931: LD_INT 0
12933: PPUSH
12934: PPUSH
12935: PPUSH
12936: PPUSH
12937: PPUSH
12938: PPUSH
12939: PPUSH
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
// begin for base in ai_bases do
12947: LD_ADDR_VAR 0 7
12951: PUSH
12952: LD_EXP 59
12956: PUSH
12957: FOR_IN
12958: IFFALSE 14342
// begin side = GetBaseSide ( base ) ;
12960: LD_ADDR_VAR 0 1
12964: PUSH
12965: LD_VAR 0 7
12969: PPUSH
12970: CALL 12710 0 1
12974: ST_TO_ADDR
// soldiers_list = ai_soldiers [ base ] ;
12975: LD_ADDR_VAR 0 5
12979: PUSH
12980: LD_EXP 30
12984: PUSH
12985: LD_VAR 0 7
12989: ARRAY
12990: ST_TO_ADDR
// under_attack := BaseUnderAttack ( base , - 1 ) ;
12991: LD_ADDR_VAR 0 11
12995: PUSH
12996: LD_VAR 0 7
13000: PPUSH
13001: LD_INT 1
13003: NEG
13004: PPUSH
13005: CALL 23630 0 2
13009: ST_TO_ADDR
// if base = 1 and under_attack and game_phase > 1 then
13010: LD_VAR 0 7
13014: PUSH
13015: LD_INT 1
13017: EQUAL
13018: PUSH
13019: LD_VAR 0 11
13023: AND
13024: PUSH
13025: LD_EXP 89
13029: PUSH
13030: LD_INT 1
13032: GREATER
13033: AND
13034: IFFALSE 13069
// am_snipers = UnitFilter ( ai_soldiers [ base ] , [ f_class , class_sniper ] ) else
13036: LD_ADDR_VAR 0 13
13040: PUSH
13041: LD_EXP 30
13045: PUSH
13046: LD_VAR 0 7
13050: ARRAY
13051: PPUSH
13052: LD_INT 25
13054: PUSH
13055: LD_INT 5
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PPUSH
13062: CALL_OW 72
13066: ST_TO_ADDR
13067: GO 13076
// am_snipers = [ ] ;
13069: LD_ADDR_VAR 0 13
13073: PUSH
13074: EMPTY
13075: ST_TO_ADDR
// if under_attack then
13076: LD_VAR 0 11
13080: IFFALSE 13137
// begin temp_list = ai_heal_these_humans [ base ] diff ( soldiers_list diff am_snipers ) ;
13082: LD_ADDR_VAR 0 3
13086: PUSH
13087: LD_EXP 44
13091: PUSH
13092: LD_VAR 0 7
13096: ARRAY
13097: PUSH
13098: LD_VAR 0 5
13102: PUSH
13103: LD_VAR 0 13
13107: DIFF
13108: DIFF
13109: ST_TO_ADDR
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
13110: LD_ADDR_EXP 44
13114: PUSH
13115: LD_EXP 44
13119: PPUSH
13120: LD_VAR 0 7
13124: PPUSH
13125: LD_VAR 0 3
13129: PPUSH
13130: CALL_OW 1
13134: ST_TO_ADDR
// end else
13135: GO 13351
// begin temp_list = ai_heal_these_humans [ base ] ;
13137: LD_ADDR_VAR 0 3
13141: PUSH
13142: LD_EXP 44
13146: PUSH
13147: LD_VAR 0 7
13151: ARRAY
13152: ST_TO_ADDR
// for i in soldiers_list diff ai_heal_these_humans [ base ] do
13153: LD_ADDR_VAR 0 2
13157: PUSH
13158: LD_VAR 0 5
13162: PUSH
13163: LD_EXP 44
13167: PUSH
13168: LD_VAR 0 7
13172: ARRAY
13173: DIFF
13174: PUSH
13175: FOR_IN
13176: IFFALSE 13211
// if GetLives ( i ) < 800 then
13178: LD_VAR 0 2
13182: PPUSH
13183: CALL_OW 256
13187: PUSH
13188: LD_INT 800
13190: LESS
13191: IFFALSE 13209
// temp_list = temp_list ^ i ;
13193: LD_ADDR_VAR 0 3
13197: PUSH
13198: LD_VAR 0 3
13202: PUSH
13203: LD_VAR 0 2
13207: ADD
13208: ST_TO_ADDR
13209: GO 13175
13211: POP
13212: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
13213: LD_ADDR_EXP 44
13217: PUSH
13218: LD_EXP 44
13222: PPUSH
13223: LD_VAR 0 7
13227: PPUSH
13228: LD_VAR 0 3
13232: PPUSH
13233: CALL_OW 1
13237: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
13238: LD_ADDR_VAR 0 2
13242: PUSH
13243: LD_EXP 44
13247: PUSH
13248: LD_VAR 0 7
13252: ARRAY
13253: PUSH
13254: FOR_IN
13255: IFFALSE 13327
// if i in soldiers_list then
13257: LD_VAR 0 2
13261: PUSH
13262: LD_VAR 0 5
13266: IN
13267: IFFALSE 13325
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
13269: LD_VAR 0 2
13273: PPUSH
13274: CALL_OW 310
13278: PPUSH
13279: CALL_OW 247
13283: PUSH
13284: LD_INT 2
13286: DOUBLE
13287: EQUAL
13288: IFTRUE 13292
13290: GO 13304
13292: POP
// ComExitVehicle ( i ) ; unit_building :
13293: LD_VAR 0 2
13297: PPUSH
13298: CALL_OW 121
13302: GO 13325
13304: LD_INT 3
13306: DOUBLE
13307: EQUAL
13308: IFTRUE 13312
13310: GO 13324
13312: POP
// ComExitBuilding ( i ) ; end ;
13313: LD_VAR 0 2
13317: PPUSH
13318: CALL_OW 122
13322: GO 13325
13324: POP
13325: GO 13254
13327: POP
13328: POP
// soldiers_list = soldiers_list diff ai_heal_these_humans [ base ] ;
13329: LD_ADDR_VAR 0 5
13333: PUSH
13334: LD_VAR 0 5
13338: PUSH
13339: LD_EXP 44
13343: PUSH
13344: LD_VAR 0 7
13348: ARRAY
13349: DIFF
13350: ST_TO_ADDR
// end ; temp_list = ai_heal_these_humans [ base ] ;
13351: LD_ADDR_VAR 0 3
13355: PUSH
13356: LD_EXP 44
13360: PUSH
13361: LD_VAR 0 7
13365: ARRAY
13366: ST_TO_ADDR
// for i in am_snipers diff ai_heal_these_humans [ base ] do
13367: LD_ADDR_VAR 0 2
13371: PUSH
13372: LD_VAR 0 13
13376: PUSH
13377: LD_EXP 44
13381: PUSH
13382: LD_VAR 0 7
13386: ARRAY
13387: DIFF
13388: PUSH
13389: FOR_IN
13390: IFFALSE 13425
// if GetLives ( i ) <= 500 then
13392: LD_VAR 0 2
13396: PPUSH
13397: CALL_OW 256
13401: PUSH
13402: LD_INT 500
13404: LESSEQUAL
13405: IFFALSE 13423
// temp_list = temp_list ^ i ;
13407: LD_ADDR_VAR 0 3
13411: PUSH
13412: LD_VAR 0 3
13416: PUSH
13417: LD_VAR 0 2
13421: ADD
13422: ST_TO_ADDR
13423: GO 13389
13425: POP
13426: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
13427: LD_ADDR_EXP 44
13431: PUSH
13432: LD_EXP 44
13436: PPUSH
13437: LD_VAR 0 7
13441: PPUSH
13442: LD_VAR 0 3
13446: PPUSH
13447: CALL_OW 1
13451: ST_TO_ADDR
// am_snipers = am_snipers diff ai_heal_these_humans [ base ] ;
13452: LD_ADDR_VAR 0 13
13456: PUSH
13457: LD_VAR 0 13
13461: PUSH
13462: LD_EXP 44
13466: PUSH
13467: LD_VAR 0 7
13471: ARRAY
13472: DIFF
13473: ST_TO_ADDR
// if soldiers_list = 0 then
13474: LD_VAR 0 5
13478: PUSH
13479: LD_INT 0
13481: EQUAL
13482: IFFALSE 13486
// continue ;
13484: GO 12957
// if am_snipers > 0 then
13486: LD_VAR 0 13
13490: PUSH
13491: LD_INT 0
13493: GREATER
13494: IFFALSE 13611
// begin temp_list_2 = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_human ] , [ f_inarea , am_sniper_defend_area ] ] ) ;
13496: LD_ADDR_VAR 0 14
13500: PUSH
13501: LD_INT 81
13503: PUSH
13504: LD_VAR 0 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 21
13515: PUSH
13516: LD_INT 1
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 95
13525: PUSH
13526: LD_INT 12
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: PPUSH
13538: CALL_OW 69
13542: ST_TO_ADDR
// if temp_list_2 > 0 then
13543: LD_VAR 0 14
13547: PUSH
13548: LD_INT 0
13550: GREATER
13551: IFFALSE 13611
// begin soldiers_list = soldiers_list diff am_snipers ;
13553: LD_ADDR_VAR 0 5
13557: PUSH
13558: LD_VAR 0 5
13562: PUSH
13563: LD_VAR 0 13
13567: DIFF
13568: ST_TO_ADDR
// ComAgressiveMove ( GetHumansOutOfUnits ( am_snipers ) , GetX ( temp_list_2 [ 1 ] ) , GetY ( temp_list_2 [ 1 ] ) ) ;
13569: LD_VAR 0 13
13573: PPUSH
13574: CALL 23525 0 1
13578: PPUSH
13579: LD_VAR 0 14
13583: PUSH
13584: LD_INT 1
13586: ARRAY
13587: PPUSH
13588: CALL_OW 250
13592: PPUSH
13593: LD_VAR 0 14
13597: PUSH
13598: LD_INT 1
13600: ARRAY
13601: PPUSH
13602: CALL_OW 251
13606: PPUSH
13607: CALL_OW 114
// end ; end ; i = false ;
13611: LD_ADDR_VAR 0 2
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// if IsOk ( ai_depot [ base ] ) then
13619: LD_EXP 35
13623: PUSH
13624: LD_VAR 0 7
13628: ARRAY
13629: PPUSH
13630: CALL_OW 302
13634: IFFALSE 13674
// if GetEnergy ( GetBase ( ai_depot [ base ] ) ) [ 4 ] > 0 then
13636: LD_EXP 35
13640: PUSH
13641: LD_VAR 0 7
13645: ARRAY
13646: PPUSH
13647: CALL_OW 274
13651: PPUSH
13652: CALL_OW 278
13656: PUSH
13657: LD_INT 4
13659: ARRAY
13660: PUSH
13661: LD_INT 0
13663: GREATER
13664: IFFALSE 13674
// i = true ;
13666: LD_ADDR_VAR 0 2
13670: PUSH
13671: LD_INT 1
13673: ST_TO_ADDR
// if i then
13674: LD_VAR 0 2
13678: IFFALSE 13698
// bunkers = ai_bunkers [ base ] else
13680: LD_ADDR_VAR 0 10
13684: PUSH
13685: LD_EXP 50
13689: PUSH
13690: LD_VAR 0 7
13694: ARRAY
13695: ST_TO_ADDR
13696: GO 13759
// begin bunkers = [ ] ;
13698: LD_ADDR_VAR 0 10
13702: PUSH
13703: EMPTY
13704: ST_TO_ADDR
// for i in ai_bunkers [ base ] do
13705: LD_ADDR_VAR 0 2
13709: PUSH
13710: LD_EXP 50
13714: PUSH
13715: LD_VAR 0 7
13719: ARRAY
13720: PUSH
13721: FOR_IN
13722: IFFALSE 13757
// if GetBType ( i ) = b_breastwork then
13724: LD_VAR 0 2
13728: PPUSH
13729: CALL_OW 266
13733: PUSH
13734: LD_INT 31
13736: EQUAL
13737: IFFALSE 13755
// bunkers = bunkers ^ i ;
13739: LD_ADDR_VAR 0 10
13743: PUSH
13744: LD_VAR 0 10
13748: PUSH
13749: LD_VAR 0 2
13753: ADD
13754: ST_TO_ADDR
13755: GO 13721
13757: POP
13758: POP
// end ; buildings_list = [ ] ;
13759: LD_ADDR_VAR 0 4
13763: PUSH
13764: EMPTY
13765: ST_TO_ADDR
// for i in UnitFilter ( bunkers , [ f_ok ] ) do
13766: LD_ADDR_VAR 0 2
13770: PUSH
13771: LD_VAR 0 10
13775: PPUSH
13776: LD_INT 50
13778: PUSH
13779: EMPTY
13780: LIST
13781: PPUSH
13782: CALL_OW 72
13786: PUSH
13787: FOR_IN
13788: IFFALSE 13851
// begin temp_unit = UnitsInside ( i ) ;
13790: LD_ADDR_VAR 0 6
13794: PUSH
13795: LD_VAR 0 2
13799: PPUSH
13800: CALL_OW 313
13804: ST_TO_ADDR
// if temp_unit = 0 then
13805: LD_VAR 0 6
13809: PUSH
13810: LD_INT 0
13812: EQUAL
13813: IFFALSE 13833
// buildings_list = buildings_list ^ i else
13815: LD_ADDR_VAR 0 4
13819: PUSH
13820: LD_VAR 0 4
13824: PUSH
13825: LD_VAR 0 2
13829: ADD
13830: ST_TO_ADDR
13831: GO 13849
// soldiers_list = soldiers_list diff temp_unit ;
13833: LD_ADDR_VAR 0 5
13837: PUSH
13838: LD_VAR 0 5
13842: PUSH
13843: LD_VAR 0 6
13847: DIFF
13848: ST_TO_ADDR
// end ;
13849: GO 13787
13851: POP
13852: POP
// soldiers_list = soldiers_list diff Gensher ;
13853: LD_ADDR_VAR 0 5
13857: PUSH
13858: LD_VAR 0 5
13862: PUSH
13863: LD_EXP 24
13867: DIFF
13868: ST_TO_ADDR
// if buildings_list > 0 then
13869: LD_VAR 0 4
13873: PUSH
13874: LD_INT 0
13876: GREATER
13877: IFFALSE 14222
// begin if not under_attack then
13879: LD_VAR 0 11
13883: NOT
13884: IFFALSE 13954
// begin temp_list = [ ] ;
13886: LD_ADDR_VAR 0 3
13890: PUSH
13891: EMPTY
13892: ST_TO_ADDR
// for i in soldiers_list do
13893: LD_ADDR_VAR 0 2
13897: PUSH
13898: LD_VAR 0 5
13902: PUSH
13903: FOR_IN
13904: IFFALSE 13932
// temp_list = temp_list ^ GetSkill ( i , skill_combat ) ;
13906: LD_ADDR_VAR 0 3
13910: PUSH
13911: LD_VAR 0 3
13915: PUSH
13916: LD_VAR 0 2
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: CALL_OW 259
13928: ADD
13929: ST_TO_ADDR
13930: GO 13903
13932: POP
13933: POP
// soldiers_list = SortListByListDesc ( soldiers_list , temp_list ) ;
13934: LD_ADDR_VAR 0 5
13938: PUSH
13939: LD_VAR 0 5
13943: PPUSH
13944: LD_VAR 0 3
13948: PPUSH
13949: CALL_OW 77
13953: ST_TO_ADDR
// end ; special_units = UnitFilter ( soldiers_list , [ f_or , [ f_class , class_bazooker ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] ) ;
13954: LD_ADDR_VAR 0 9
13958: PUSH
13959: LD_VAR 0 5
13963: PPUSH
13964: LD_INT 2
13966: PUSH
13967: LD_INT 25
13969: PUSH
13970: LD_INT 9
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 25
13979: PUSH
13980: LD_INT 5
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 25
13989: PUSH
13990: LD_INT 8
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: PPUSH
14003: CALL_OW 72
14007: ST_TO_ADDR
// soldiers_list = soldiers_list diff special_units ;
14008: LD_ADDR_VAR 0 5
14012: PUSH
14013: LD_VAR 0 5
14017: PUSH
14018: LD_VAR 0 9
14022: DIFF
14023: ST_TO_ADDR
// for i = 1 to buildings_list do
14024: LD_ADDR_VAR 0 2
14028: PUSH
14029: DOUBLE
14030: LD_INT 1
14032: DEC
14033: ST_TO_ADDR
14034: LD_VAR 0 4
14038: PUSH
14039: FOR_TO
14040: IFFALSE 14218
// begin if soldiers_list = 0 then
14042: LD_VAR 0 5
14046: PUSH
14047: LD_INT 0
14049: EQUAL
14050: IFFALSE 14081
// begin if special_units = 0 then
14052: LD_VAR 0 9
14056: PUSH
14057: LD_INT 0
14059: EQUAL
14060: IFFALSE 14064
// break ;
14062: GO 14218
// soldiers_list = special_units ;
14064: LD_ADDR_VAR 0 5
14068: PUSH
14069: LD_VAR 0 9
14073: ST_TO_ADDR
// special_units = [ ] ;
14074: LD_ADDR_VAR 0 9
14078: PUSH
14079: EMPTY
14080: ST_TO_ADDR
// end ; if not under_attack then
14081: LD_VAR 0 11
14085: NOT
14086: IFFALSE 14104
// temp_unit = soldiers_list [ 1 ] else
14088: LD_ADDR_VAR 0 6
14092: PUSH
14093: LD_VAR 0 5
14097: PUSH
14098: LD_INT 1
14100: ARRAY
14101: ST_TO_ADDR
14102: GO 14180
// begin temp_list = [ ] ;
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: EMPTY
14110: ST_TO_ADDR
// for j in soldiers_list do
14111: LD_ADDR_VAR 0 12
14115: PUSH
14116: LD_VAR 0 5
14120: PUSH
14121: FOR_IN
14122: IFFALSE 14158
// temp_list = temp_list ^ GetDistUnits ( j , buildings_list [ i ] ) ;
14124: LD_ADDR_VAR 0 3
14128: PUSH
14129: LD_VAR 0 3
14133: PUSH
14134: LD_VAR 0 12
14138: PPUSH
14139: LD_VAR 0 4
14143: PUSH
14144: LD_VAR 0 2
14148: ARRAY
14149: PPUSH
14150: CALL_OW 296
14154: ADD
14155: ST_TO_ADDR
14156: GO 14121
14158: POP
14159: POP
// temp_unit = WorstFromListByList ( soldiers_list , temp_list ) ;
14160: LD_ADDR_VAR 0 6
14164: PUSH
14165: LD_VAR 0 5
14169: PPUSH
14170: LD_VAR 0 3
14174: PPUSH
14175: CALL_OW 78
14179: ST_TO_ADDR
// end ; ComEnterUnit ( temp_unit , buildings_list [ i ] ) ;
14180: LD_VAR 0 6
14184: PPUSH
14185: LD_VAR 0 4
14189: PUSH
14190: LD_VAR 0 2
14194: ARRAY
14195: PPUSH
14196: CALL_OW 120
// soldiers_list = soldiers_list diff temp_unit ;
14200: LD_ADDR_VAR 0 5
14204: PUSH
14205: LD_VAR 0 5
14209: PUSH
14210: LD_VAR 0 6
14214: DIFF
14215: ST_TO_ADDR
// end ;
14216: GO 14039
14218: POP
14219: POP
// end else
14220: GO 14229
// special_units = [ ] ;
14222: LD_ADDR_VAR 0 9
14226: PUSH
14227: EMPTY
14228: ST_TO_ADDR
// if base = 2 then
14229: LD_VAR 0 7
14233: PUSH
14234: LD_INT 2
14236: EQUAL
14237: IFFALSE 14269
// soldiers_list = soldiers_list ^ UnitFilter ( [ Gensher ] , [ f_alive ] ) ;
14239: LD_ADDR_VAR 0 5
14243: PUSH
14244: LD_VAR 0 5
14248: PUSH
14249: LD_EXP 24
14253: PUSH
14254: EMPTY
14255: LIST
14256: PPUSH
14257: LD_INT 51
14259: PUSH
14260: EMPTY
14261: LIST
14262: PPUSH
14263: CALL_OW 72
14267: ADD
14268: ST_TO_ADDR
// DistributeHumansToBuildings ( base , soldiers_list ^ special_units , UnitFilter ( ai_armouries [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , false , 6 , true , true ) ;
14269: LD_VAR 0 7
14273: PPUSH
14274: LD_VAR 0 5
14278: PUSH
14279: LD_VAR 0 9
14283: ADD
14284: PPUSH
14285: LD_EXP 49
14289: PUSH
14290: LD_VAR 0 7
14294: ARRAY
14295: PPUSH
14296: LD_INT 50
14298: PUSH
14299: EMPTY
14300: LIST
14301: PUSH
14302: LD_INT 3
14304: PUSH
14305: LD_INT 57
14307: PUSH
14308: EMPTY
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PPUSH
14319: CALL_OW 72
14323: PPUSH
14324: LD_INT 0
14326: PPUSH
14327: LD_INT 6
14329: PPUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 1
14335: PPUSH
14336: CALL 15596 0 7
// end ;
14340: GO 12957
14342: POP
14343: POP
// enable ;
14344: ENABLE
// end ;
14345: PPOPN 14
14347: END
// every 0 0$1 + 0 0$0.1 do var side , base , i , temp_list , un1 , temp_list_2 , temp_value , val ;
14348: GO 14350
14350: DISABLE
14351: LD_INT 0
14353: PPUSH
14354: PPUSH
14355: PPUSH
14356: PPUSH
14357: PPUSH
14358: PPUSH
14359: PPUSH
14360: PPUSH
// begin repeat wait ( 0 0$1 ) ;
14361: LD_INT 35
14363: PPUSH
14364: CALL_OW 67
// for base in ai_bases do
14368: LD_ADDR_VAR 0 2
14372: PUSH
14373: LD_EXP 59
14377: PUSH
14378: FOR_IN
14379: IFFALSE 14830
// begin if base in [ 1 , 2 ] then
14381: LD_VAR 0 2
14385: PUSH
14386: LD_INT 1
14388: PUSH
14389: LD_INT 2
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: IN
14396: IFFALSE 14400
// continue ;
14398: GO 14378
// side = GetBaseSide ( base ) ;
14400: LD_ADDR_VAR 0 1
14404: PUSH
14405: LD_VAR 0 2
14409: PPUSH
14410: CALL 12710 0 1
14414: ST_TO_ADDR
// for i in ai_soldiers [ base ] diff ai_heal_these_humans [ base ] do
14415: LD_ADDR_VAR 0 3
14419: PUSH
14420: LD_EXP 30
14424: PUSH
14425: LD_VAR 0 2
14429: ARRAY
14430: PUSH
14431: LD_EXP 44
14435: PUSH
14436: LD_VAR 0 2
14440: ARRAY
14441: DIFF
14442: PUSH
14443: FOR_IN
14444: IFFALSE 14826
// if GetClass ( i ) = class_bazooker then
14446: LD_VAR 0 3
14450: PPUSH
14451: CALL_OW 257
14455: PUSH
14456: LD_INT 9
14458: EQUAL
14459: IFFALSE 14824
// begin temp_list = GetTaskList ( i ) ;
14461: LD_ADDR_VAR 0 4
14465: PUSH
14466: LD_VAR 0 3
14470: PPUSH
14471: CALL_OW 437
14475: ST_TO_ADDR
// if temp_list > 0 then
14476: LD_VAR 0 4
14480: PUSH
14481: LD_INT 0
14483: GREATER
14484: IFFALSE 14524
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
14486: LD_VAR 0 4
14490: PUSH
14491: LD_INT 1
14493: ARRAY
14494: PUSH
14495: LD_INT 1
14497: ARRAY
14498: PUSH
14499: LD_STRING &
14501: EQUAL
14502: PUSH
14503: LD_VAR 0 4
14507: PUSH
14508: LD_INT 1
14510: ARRAY
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PUSH
14516: LD_STRING %
14518: EQUAL
14519: OR
14520: IFFALSE 14524
// continue ;
14522: GO 14443
// un1 = Attacks ( i ) ;
14524: LD_ADDR_VAR 0 5
14528: PUSH
14529: LD_VAR 0 3
14533: PPUSH
14534: CALL_OW 320
14538: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
14539: LD_VAR 0 5
14543: PUSH
14544: LD_INT 0
14546: GREATER
14547: PUSH
14548: LD_VAR 0 5
14552: PUSH
14553: EMPTY
14554: LIST
14555: PPUSH
14556: CALL 40978 0 1
14560: PUSH
14561: LD_INT 0
14563: GREATER
14564: AND
14565: IFFALSE 14824
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
14567: LD_ADDR_VAR 0 6
14571: PUSH
14572: LD_VAR 0 5
14576: PPUSH
14577: CALL_OW 250
14581: PUSH
14582: LD_VAR 0 5
14586: PPUSH
14587: CALL_OW 251
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: ST_TO_ADDR
// temp_value = false ;
14596: LD_ADDR_VAR 0 7
14600: PUSH
14601: LD_INT 0
14603: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
14604: LD_ADDR_VAR 0 8
14608: PUSH
14609: LD_EXP 73
14613: PUSH
14614: LD_VAR 0 2
14618: ARRAY
14619: PUSH
14620: LD_EXP 74
14624: PUSH
14625: LD_VAR 0 2
14629: ARRAY
14630: ADD
14631: PUSH
14632: FOR_IN
14633: IFFALSE 14705
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
14635: LD_VAR 0 6
14639: PUSH
14640: LD_INT 1
14642: ARRAY
14643: PPUSH
14644: LD_VAR 0 6
14648: PUSH
14649: LD_INT 2
14651: ARRAY
14652: PPUSH
14653: LD_VAR 0 8
14657: PUSH
14658: LD_INT 1
14660: ARRAY
14661: PPUSH
14662: LD_VAR 0 8
14666: PUSH
14667: LD_INT 2
14669: ARRAY
14670: PPUSH
14671: CALL_OW 298
14675: PUSH
14676: LD_EXP 72
14680: PUSH
14681: LD_VAR 0 1
14685: ARRAY
14686: PUSH
14687: LD_INT 2
14689: ARRAY
14690: LESSEQUAL
14691: IFFALSE 14703
// begin temp_value = true ;
14693: LD_ADDR_VAR 0 7
14697: PUSH
14698: LD_INT 1
14700: ST_TO_ADDR
// break ;
14701: GO 14705
// end ;
14703: GO 14632
14705: POP
14706: POP
// if not temp_value then
14707: LD_VAR 0 7
14711: NOT
14712: IFFALSE 14824
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
14714: LD_VAR 0 3
14718: PPUSH
14719: LD_VAR 0 6
14723: PUSH
14724: LD_INT 1
14726: ARRAY
14727: PPUSH
14728: LD_VAR 0 6
14732: PUSH
14733: LD_INT 2
14735: ARRAY
14736: PPUSH
14737: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
14741: LD_ADDR_VAR 0 4
14745: PUSH
14746: LD_EXP 74
14750: PUSH
14751: LD_VAR 0 2
14755: ARRAY
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: LD_VAR 0 6
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PUSH
14769: LD_VAR 0 6
14773: PUSH
14774: LD_INT 2
14776: ARRAY
14777: PUSH
14778: LD_VAR 0 3
14782: PUSH
14783: LD_OWVAR 1
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: PPUSH
14794: CALL_OW 2
14798: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
14799: LD_ADDR_EXP 74
14803: PUSH
14804: LD_EXP 74
14808: PPUSH
14809: LD_VAR 0 2
14813: PPUSH
14814: LD_VAR 0 4
14818: PPUSH
14819: CALL_OW 1
14823: ST_TO_ADDR
// end ; end ; end ;
14824: GO 14443
14826: POP
14827: POP
// end ;
14828: GO 14378
14830: POP
14831: POP
// until false ;
14832: LD_INT 0
14834: IFFALSE 14361
// end ;
14836: PPOPN 8
14838: END
// every 0 0$1 + 0 0$0.2 do var base , i , temp_list , un1 , temp_list_2 , temp_value ; var shooting_delay ;
14839: GO 14841
14841: DISABLE
14842: LD_INT 0
14844: PPUSH
14845: PPUSH
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
// begin shooting_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
14851: LD_ADDR_VAR 0 7
14855: PUSH
14856: LD_INT 0
14858: PUSH
14859: LD_INT 0
14861: PUSH
14862: LD_INT 0
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: ST_TO_ADDR
// if not yashin_alive then
14870: LD_EXP 86
14874: NOT
14875: IFFALSE 14879
// exit ;
14877: GO 15375
// repeat wait ( 0 0$1 ) ;
14879: LD_INT 35
14881: PPUSH
14882: CALL_OW 67
// for base in ai_bases do
14886: LD_ADDR_VAR 0 1
14890: PUSH
14891: LD_EXP 59
14895: PUSH
14896: FOR_IN
14897: IFFALSE 15369
// begin if base in [ 1 , 2 ] then
14899: LD_VAR 0 1
14903: PUSH
14904: LD_INT 1
14906: PUSH
14907: LD_INT 2
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: IN
14914: IFFALSE 14918
// continue ;
14916: GO 14896
// if shooting_delay [ base ] > 0 0$0 then
14918: LD_VAR 0 7
14922: PUSH
14923: LD_VAR 0 1
14927: ARRAY
14928: PUSH
14929: LD_INT 0
14931: GREATER
14932: IFFALSE 14971
// begin shooting_delay = Replace ( shooting_delay , base , shooting_delay [ base ] - 0 0$1 ) ;
14934: LD_ADDR_VAR 0 7
14938: PUSH
14939: LD_VAR 0 7
14943: PPUSH
14944: LD_VAR 0 1
14948: PPUSH
14949: LD_VAR 0 7
14953: PUSH
14954: LD_VAR 0 1
14958: ARRAY
14959: PUSH
14960: LD_INT 35
14962: MINUS
14963: PPUSH
14964: CALL_OW 1
14968: ST_TO_ADDR
// continue ;
14969: GO 14896
// end ; if Rand ( 1 , 15 ) > 1 then
14971: LD_INT 1
14973: PPUSH
14974: LD_INT 15
14976: PPUSH
14977: CALL_OW 12
14981: PUSH
14982: LD_INT 1
14984: GREATER
14985: IFFALSE 14989
// continue ;
14987: GO 14896
// temp_list = [ ] ;
14989: LD_ADDR_VAR 0 3
14993: PUSH
14994: EMPTY
14995: ST_TO_ADDR
// for i in ai_soldiers [ base ] diff ai_heal_these_humans [ base ] do
14996: LD_ADDR_VAR 0 2
15000: PUSH
15001: LD_EXP 30
15005: PUSH
15006: LD_VAR 0 1
15010: ARRAY
15011: PUSH
15012: LD_EXP 44
15016: PUSH
15017: LD_VAR 0 1
15021: ARRAY
15022: DIFF
15023: PUSH
15024: FOR_IN
15025: IFFALSE 15068
// if IsInUnit ( i ) in ai_armouries [ base ] then
15027: LD_VAR 0 2
15031: PPUSH
15032: CALL_OW 310
15036: PUSH
15037: LD_EXP 49
15041: PUSH
15042: LD_VAR 0 1
15046: ARRAY
15047: IN
15048: IFFALSE 15066
// temp_list = temp_list ^ i ;
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_VAR 0 3
15059: PUSH
15060: LD_VAR 0 2
15064: ADD
15065: ST_TO_ADDR
15066: GO 15024
15068: POP
15069: POP
// for i in temp_list do
15070: LD_ADDR_VAR 0 2
15074: PUSH
15075: LD_VAR 0 3
15079: PUSH
15080: FOR_IN
15081: IFFALSE 15365
// if GetClass ( i ) = class_bazooker then
15083: LD_VAR 0 2
15087: PPUSH
15088: CALL_OW 257
15092: PUSH
15093: LD_INT 9
15095: EQUAL
15096: IFFALSE 15363
// begin temp_list = GetTaskList ( i ) ;
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: LD_VAR 0 2
15107: PPUSH
15108: CALL_OW 437
15112: ST_TO_ADDR
// if temp_list > 0 then
15113: LD_VAR 0 3
15117: PUSH
15118: LD_INT 0
15120: GREATER
15121: IFFALSE 15161
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
15123: LD_VAR 0 3
15127: PUSH
15128: LD_INT 1
15130: ARRAY
15131: PUSH
15132: LD_INT 1
15134: ARRAY
15135: PUSH
15136: LD_STRING &
15138: EQUAL
15139: PUSH
15140: LD_VAR 0 3
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PUSH
15149: LD_INT 1
15151: ARRAY
15152: PUSH
15153: LD_STRING %
15155: EQUAL
15156: OR
15157: IFFALSE 15161
// continue ;
15159: GO 15080
// un1 = Attacks ( i ) ;
15161: LD_ADDR_VAR 0 4
15165: PUSH
15166: LD_VAR 0 2
15170: PPUSH
15171: CALL_OW 320
15175: ST_TO_ADDR
// if un1 > 0 and not IsInArea ( un1 , GetBaseArea ( base ) ) then
15176: LD_VAR 0 4
15180: PUSH
15181: LD_INT 0
15183: GREATER
15184: PUSH
15185: LD_VAR 0 4
15189: PPUSH
15190: LD_VAR 0 1
15194: PPUSH
15195: CALL 12639 0 1
15199: PPUSH
15200: CALL_OW 308
15204: NOT
15205: AND
15206: IFFALSE 15363
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
15208: LD_ADDR_VAR 0 5
15212: PUSH
15213: LD_VAR 0 4
15217: PPUSH
15218: CALL_OW 250
15222: PUSH
15223: LD_VAR 0 4
15227: PPUSH
15228: CALL_OW 251
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: ST_TO_ADDR
// temp_value = AI_GetTurnDirection ( GetX ( i ) , GetY ( i ) , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
15237: LD_ADDR_VAR 0 6
15241: PUSH
15242: LD_VAR 0 2
15246: PPUSH
15247: CALL_OW 250
15251: PPUSH
15252: LD_VAR 0 2
15256: PPUSH
15257: CALL_OW 251
15261: PPUSH
15262: LD_VAR 0 5
15266: PUSH
15267: LD_INT 1
15269: ARRAY
15270: PPUSH
15271: LD_VAR 0 5
15275: PUSH
15276: LD_INT 2
15278: ARRAY
15279: PPUSH
15280: CALL 15378 0 4
15284: ST_TO_ADDR
// ComSpaceShift ( i , ShiftX ( temp_list_2 [ 1 ] , temp_value , 1 ) , ShiftY ( temp_list_2 [ 2 ] , temp_value , 1 ) ) ;
15285: LD_VAR 0 2
15289: PPUSH
15290: LD_VAR 0 5
15294: PUSH
15295: LD_INT 1
15297: ARRAY
15298: PPUSH
15299: LD_VAR 0 6
15303: PPUSH
15304: LD_INT 1
15306: PPUSH
15307: CALL_OW 272
15311: PPUSH
15312: LD_VAR 0 5
15316: PUSH
15317: LD_INT 2
15319: ARRAY
15320: PPUSH
15321: LD_VAR 0 6
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: CALL_OW 273
15333: PPUSH
15334: CALL_OW 153
// shooting_delay = Replace ( shooting_delay , base , 0 0$5 ) ;
15338: LD_ADDR_VAR 0 7
15342: PUSH
15343: LD_VAR 0 7
15347: PPUSH
15348: LD_VAR 0 1
15352: PPUSH
15353: LD_INT 175
15355: PPUSH
15356: CALL_OW 1
15360: ST_TO_ADDR
// break ;
15361: GO 15365
// end ; end ;
15363: GO 15080
15365: POP
15366: POP
// end ;
15367: GO 14896
15369: POP
15370: POP
// until false ;
15371: LD_INT 0
15373: IFFALSE 14879
// end ;
15375: PPOPN 7
15377: END
// function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
15378: LD_INT 0
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
15386: LD_VAR 0 1
15390: PPUSH
15391: LD_VAR 0 2
15395: PPUSH
15396: CALL_OW 488
15400: NOT
15401: PUSH
15402: LD_VAR 0 3
15406: PPUSH
15407: LD_VAR 0 4
15411: PPUSH
15412: CALL_OW 488
15416: NOT
15417: OR
15418: IFFALSE 15431
// begin result = - 1 ;
15420: LD_ADDR_VAR 0 5
15424: PUSH
15425: LD_INT 1
15427: NEG
15428: ST_TO_ADDR
// exit ;
15429: GO 15591
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
15431: LD_ADDR_VAR 0 6
15435: PUSH
15436: LD_VAR 0 1
15440: PPUSH
15441: LD_VAR 0 2
15445: PPUSH
15446: LD_VAR 0 3
15450: PPUSH
15451: LD_VAR 0 4
15455: PPUSH
15456: CALL_OW 298
15460: ST_TO_ADDR
// dist_2 = 99999 ;
15461: LD_ADDR_VAR 0 7
15465: PUSH
15466: LD_INT 99999
15468: ST_TO_ADDR
// for b = 0 to 5 do
15469: LD_ADDR_VAR 0 8
15473: PUSH
15474: DOUBLE
15475: LD_INT 0
15477: DEC
15478: ST_TO_ADDR
15479: LD_INT 5
15481: PUSH
15482: FOR_TO
15483: IFFALSE 15579
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
15485: LD_ADDR_VAR 0 9
15489: PUSH
15490: LD_VAR 0 1
15494: PPUSH
15495: LD_VAR 0 8
15499: PPUSH
15500: LD_VAR 0 6
15504: PPUSH
15505: CALL_OW 272
15509: PPUSH
15510: LD_VAR 0 2
15514: PPUSH
15515: LD_VAR 0 8
15519: PPUSH
15520: LD_VAR 0 6
15524: PPUSH
15525: CALL_OW 273
15529: PPUSH
15530: LD_VAR 0 3
15534: PPUSH
15535: LD_VAR 0 4
15539: PPUSH
15540: CALL_OW 298
15544: ST_TO_ADDR
// if temp_dist < dist_2 then
15545: LD_VAR 0 9
15549: PUSH
15550: LD_VAR 0 7
15554: LESS
15555: IFFALSE 15577
// begin dist_2 = temp_dist ;
15557: LD_ADDR_VAR 0 7
15561: PUSH
15562: LD_VAR 0 9
15566: ST_TO_ADDR
// dir = b ;
15567: LD_ADDR_VAR 0 10
15571: PUSH
15572: LD_VAR 0 8
15576: ST_TO_ADDR
// end ; end ;
15577: GO 15482
15579: POP
15580: POP
// result = dir ;
15581: LD_ADDR_VAR 0 5
15585: PUSH
15586: LD_VAR 0 10
15590: ST_TO_ADDR
// end ;
15591: LD_VAR 0 5
15595: RET
// function DistributeHumansToBuildings ( base , human_list , building_list , change_to_this_class , building_capacity , help_building , aggressive_pullback ) ; var i , temp_list , val , temp_unit , area , special_un_count , counter , k , under_attack ; begin
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
15606: PPUSH
15607: PPUSH
// if human_list = 0 then
15608: LD_VAR 0 2
15612: PUSH
15613: LD_INT 0
15615: EQUAL
15616: IFFALSE 15620
// exit ;
15618: GO 16898
// area = GetBaseArea ( base ) ;
15620: LD_ADDR_VAR 0 13
15624: PUSH
15625: LD_VAR 0 1
15629: PPUSH
15630: CALL 12639 0 1
15634: ST_TO_ADDR
// under_attack = BaseUnderAttack ( base , - 1 ) ;
15635: LD_ADDR_VAR 0 17
15639: PUSH
15640: LD_VAR 0 1
15644: PPUSH
15645: LD_INT 1
15647: NEG
15648: PPUSH
15649: CALL 23630 0 2
15653: ST_TO_ADDR
// if not GetClass ( human_list [ 1 ] ) in [ class_engineer , class_apeman_engineer , class_mechanic , class_scientistic ] and building_list > 0 then
15654: LD_VAR 0 2
15658: PUSH
15659: LD_INT 1
15661: ARRAY
15662: PPUSH
15663: CALL_OW 257
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: LD_INT 16
15673: PUSH
15674: LD_INT 3
15676: PUSH
15677: LD_INT 4
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: IN
15686: NOT
15687: PUSH
15688: LD_VAR 0 3
15692: PUSH
15693: LD_INT 0
15695: GREATER
15696: AND
15697: IFFALSE 15786
// begin val = 0 ;
15699: LD_ADDR_VAR 0 11
15703: PUSH
15704: LD_INT 0
15706: ST_TO_ADDR
// for i in human_list do
15707: LD_ADDR_VAR 0 9
15711: PUSH
15712: LD_VAR 0 2
15716: PUSH
15717: FOR_IN
15718: IFFALSE 15762
// if GetClass ( i ) in [ class_sniper , class_mortar , class_bazooker ] then
15720: LD_VAR 0 9
15724: PPUSH
15725: CALL_OW 257
15729: PUSH
15730: LD_INT 5
15732: PUSH
15733: LD_INT 8
15735: PUSH
15736: LD_INT 9
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: IN
15744: IFFALSE 15760
// val = val + 1 ;
15746: LD_ADDR_VAR 0 11
15750: PUSH
15751: LD_VAR 0 11
15755: PUSH
15756: LD_INT 1
15758: PLUS
15759: ST_TO_ADDR
15760: GO 15717
15762: POP
15763: POP
// special_un_count = val div ( building_list + 0 ) ;
15764: LD_ADDR_VAR 0 14
15768: PUSH
15769: LD_VAR 0 11
15773: PUSH
15774: LD_VAR 0 3
15778: PUSH
15779: LD_INT 0
15781: PLUS
15782: DIV
15783: ST_TO_ADDR
// end else
15784: GO 15794
// special_un_count = 0 ;
15786: LD_ADDR_VAR 0 14
15790: PUSH
15791: LD_INT 0
15793: ST_TO_ADDR
// val = building_list + 0 ;
15794: LD_ADDR_VAR 0 11
15798: PUSH
15799: LD_VAR 0 3
15803: PUSH
15804: LD_INT 0
15806: PLUS
15807: ST_TO_ADDR
// while val > 0 and human_list > 0 do
15808: LD_VAR 0 11
15812: PUSH
15813: LD_INT 0
15815: GREATER
15816: PUSH
15817: LD_VAR 0 2
15821: PUSH
15822: LD_INT 0
15824: GREATER
15825: AND
15826: IFFALSE 16632
// begin temp_list = [ ] ;
15828: LD_ADDR_VAR 0 10
15832: PUSH
15833: EMPTY
15834: ST_TO_ADDR
// for i in human_list do
15835: LD_ADDR_VAR 0 9
15839: PUSH
15840: LD_VAR 0 2
15844: PUSH
15845: FOR_IN
15846: IFFALSE 15889
// if IsInUnit ( i ) = building_list [ val ] then
15848: LD_VAR 0 9
15852: PPUSH
15853: CALL_OW 310
15857: PUSH
15858: LD_VAR 0 3
15862: PUSH
15863: LD_VAR 0 11
15867: ARRAY
15868: EQUAL
15869: IFFALSE 15887
// temp_list = temp_list ^ i ;
15871: LD_ADDR_VAR 0 10
15875: PUSH
15876: LD_VAR 0 10
15880: PUSH
15881: LD_VAR 0 9
15885: ADD
15886: ST_TO_ADDR
15887: GO 15845
15889: POP
15890: POP
// human_list = temp_list ^ ( human_list diff temp_list ) ;
15891: LD_ADDR_VAR 0 2
15895: PUSH
15896: LD_VAR 0 10
15900: PUSH
15901: LD_VAR 0 2
15905: PUSH
15906: LD_VAR 0 10
15910: DIFF
15911: ADD
15912: ST_TO_ADDR
// counter = 0 ;
15913: LD_ADDR_VAR 0 15
15917: PUSH
15918: LD_INT 0
15920: ST_TO_ADDR
// temp_list = [ ] ;
15921: LD_ADDR_VAR 0 10
15925: PUSH
15926: EMPTY
15927: ST_TO_ADDR
// for i = 1 to human_list div val do
15928: LD_ADDR_VAR 0 9
15932: PUSH
15933: DOUBLE
15934: LD_INT 1
15936: DEC
15937: ST_TO_ADDR
15938: LD_VAR 0 2
15942: PUSH
15943: LD_VAR 0 11
15947: DIV
15948: PUSH
15949: FOR_TO
15950: IFFALSE 16315
// begin if i > building_capacity then
15952: LD_VAR 0 9
15956: PUSH
15957: LD_VAR 0 5
15961: GREATER
15962: IFFALSE 15966
// break ;
15964: GO 16315
// if special_un_count = 0 then
15966: LD_VAR 0 14
15970: PUSH
15971: LD_INT 0
15973: EQUAL
15974: IFFALSE 16016
// begin temp_list = temp_list ^ human_list [ 1 ] ;
15976: LD_ADDR_VAR 0 10
15980: PUSH
15981: LD_VAR 0 10
15985: PUSH
15986: LD_VAR 0 2
15990: PUSH
15991: LD_INT 1
15993: ARRAY
15994: ADD
15995: ST_TO_ADDR
// human_list = Delete ( human_list , 1 ) ;
15996: LD_ADDR_VAR 0 2
16000: PUSH
16001: LD_VAR 0 2
16005: PPUSH
16006: LD_INT 1
16008: PPUSH
16009: CALL_OW 3
16013: ST_TO_ADDR
// end else
16014: GO 16313
// if counter = special_un_count then
16016: LD_VAR 0 15
16020: PUSH
16021: LD_VAR 0 14
16025: EQUAL
16026: IFFALSE 16165
// begin temp_unit = 0 ;
16028: LD_ADDR_VAR 0 12
16032: PUSH
16033: LD_INT 0
16035: ST_TO_ADDR
// for k = 1 to human_list do
16036: LD_ADDR_VAR 0 16
16040: PUSH
16041: DOUBLE
16042: LD_INT 1
16044: DEC
16045: ST_TO_ADDR
16046: LD_VAR 0 2
16050: PUSH
16051: FOR_TO
16052: IFFALSE 16101
// if not GetClass ( human_list [ k ] ) in [ class_sniper , class_mortar , class_bazooker ] then
16054: LD_VAR 0 2
16058: PUSH
16059: LD_VAR 0 16
16063: ARRAY
16064: PPUSH
16065: CALL_OW 257
16069: PUSH
16070: LD_INT 5
16072: PUSH
16073: LD_INT 8
16075: PUSH
16076: LD_INT 9
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: IN
16084: NOT
16085: IFFALSE 16099
// begin temp_unit = k ;
16087: LD_ADDR_VAR 0 12
16091: PUSH
16092: LD_VAR 0 16
16096: ST_TO_ADDR
// break ;
16097: GO 16101
// end ;
16099: GO 16051
16101: POP
16102: POP
// if temp_unit = 0 then
16103: LD_VAR 0 12
16107: PUSH
16108: LD_INT 0
16110: EQUAL
16111: IFFALSE 16121
// temp_unit = 1 ;
16113: LD_ADDR_VAR 0 12
16117: PUSH
16118: LD_INT 1
16120: ST_TO_ADDR
// temp_list = temp_list ^ human_list [ temp_unit ] ;
16121: LD_ADDR_VAR 0 10
16125: PUSH
16126: LD_VAR 0 10
16130: PUSH
16131: LD_VAR 0 2
16135: PUSH
16136: LD_VAR 0 12
16140: ARRAY
16141: ADD
16142: ST_TO_ADDR
// human_list = Delete ( human_list , temp_unit ) ;
16143: LD_ADDR_VAR 0 2
16147: PUSH
16148: LD_VAR 0 2
16152: PPUSH
16153: LD_VAR 0 12
16157: PPUSH
16158: CALL_OW 3
16162: ST_TO_ADDR
// end else
16163: GO 16313
// begin counter = counter + 1 ;
16165: LD_ADDR_VAR 0 15
16169: PUSH
16170: LD_VAR 0 15
16174: PUSH
16175: LD_INT 1
16177: PLUS
16178: ST_TO_ADDR
// temp_unit = 0 ;
16179: LD_ADDR_VAR 0 12
16183: PUSH
16184: LD_INT 0
16186: ST_TO_ADDR
// for k = 1 to human_list do
16187: LD_ADDR_VAR 0 16
16191: PUSH
16192: DOUBLE
16193: LD_INT 1
16195: DEC
16196: ST_TO_ADDR
16197: LD_VAR 0 2
16201: PUSH
16202: FOR_TO
16203: IFFALSE 16251
// if GetClass ( human_list [ k ] ) in [ class_sniper , class_mortar , class_bazooker ] then
16205: LD_VAR 0 2
16209: PUSH
16210: LD_VAR 0 16
16214: ARRAY
16215: PPUSH
16216: CALL_OW 257
16220: PUSH
16221: LD_INT 5
16223: PUSH
16224: LD_INT 8
16226: PUSH
16227: LD_INT 9
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: LIST
16234: IN
16235: IFFALSE 16249
// begin temp_unit = k ;
16237: LD_ADDR_VAR 0 12
16241: PUSH
16242: LD_VAR 0 16
16246: ST_TO_ADDR
// break ;
16247: GO 16251
// end ;
16249: GO 16202
16251: POP
16252: POP
// if temp_unit = 0 then
16253: LD_VAR 0 12
16257: PUSH
16258: LD_INT 0
16260: EQUAL
16261: IFFALSE 16271
// temp_unit = 1 ;
16263: LD_ADDR_VAR 0 12
16267: PUSH
16268: LD_INT 1
16270: ST_TO_ADDR
// temp_list = temp_list ^ human_list [ temp_unit ] ;
16271: LD_ADDR_VAR 0 10
16275: PUSH
16276: LD_VAR 0 10
16280: PUSH
16281: LD_VAR 0 2
16285: PUSH
16286: LD_VAR 0 12
16290: ARRAY
16291: ADD
16292: ST_TO_ADDR
// human_list = Delete ( human_list , temp_unit ) ;
16293: LD_ADDR_VAR 0 2
16297: PUSH
16298: LD_VAR 0 2
16302: PPUSH
16303: LD_VAR 0 12
16307: PPUSH
16308: CALL_OW 3
16312: ST_TO_ADDR
// end ; end ;
16313: GO 15949
16315: POP
16316: POP
// for i in temp_list do
16317: LD_ADDR_VAR 0 9
16321: PUSH
16322: LD_VAR 0 10
16326: PUSH
16327: FOR_IN
16328: IFFALSE 16614
// begin temp_unit = IsInUnit ( i ) ;
16330: LD_ADDR_VAR 0 12
16334: PUSH
16335: LD_VAR 0 9
16339: PPUSH
16340: CALL_OW 310
16344: ST_TO_ADDR
// if temp_unit <> building_list [ val ] then
16345: LD_VAR 0 12
16349: PUSH
16350: LD_VAR 0 3
16354: PUSH
16355: LD_VAR 0 11
16359: ARRAY
16360: NONEQUAL
16361: IFFALSE 16612
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
16363: LD_VAR 0 9
16367: PPUSH
16368: CALL_OW 310
16372: PPUSH
16373: CALL_OW 247
16377: PUSH
16378: LD_INT 2
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 16398
16386: POP
// ComExitVehicle ( i ) ; unit_building :
16387: LD_VAR 0 9
16391: PPUSH
16392: CALL_OW 121
16396: GO 16612
16398: LD_INT 3
16400: DOUBLE
16401: EQUAL
16402: IFTRUE 16406
16404: GO 16418
16406: POP
// ComExitBuilding ( i ) ; else
16407: LD_VAR 0 9
16411: PPUSH
16412: CALL_OW 122
16416: GO 16612
16418: POP
// begin if IsInArea ( i , area ) or not aggressive_pullback then
16419: LD_VAR 0 9
16423: PPUSH
16424: LD_VAR 0 13
16428: PPUSH
16429: CALL_OW 308
16433: PUSH
16434: LD_VAR 0 7
16438: NOT
16439: OR
16440: IFFALSE 16464
// ComEnterUnit ( i , building_list [ val ] ) else
16442: LD_VAR 0 9
16446: PPUSH
16447: LD_VAR 0 3
16451: PUSH
16452: LD_VAR 0 11
16456: ARRAY
16457: PPUSH
16458: CALL_OW 120
16462: GO 16505
// ComAgressiveMove ( i , GetX ( building_list [ val ] ) , GetY ( building_list [ val ] ) ) ;
16464: LD_VAR 0 9
16468: PPUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_VAR 0 11
16478: ARRAY
16479: PPUSH
16480: CALL_OW 250
16484: PPUSH
16485: LD_VAR 0 3
16489: PUSH
16490: LD_VAR 0 11
16494: ARRAY
16495: PPUSH
16496: CALL_OW 251
16500: PPUSH
16501: CALL_OW 114
// if change_to_this_class > 0 then
16505: LD_VAR 0 4
16509: PUSH
16510: LD_INT 0
16512: GREATER
16513: IFFALSE 16612
// begin if GetClass ( i ) <> change_to_this_class and GetNation ( i ) <> nation_nature then
16515: LD_VAR 0 9
16519: PPUSH
16520: CALL_OW 257
16524: PUSH
16525: LD_VAR 0 4
16529: NONEQUAL
16530: PUSH
16531: LD_VAR 0 9
16535: PPUSH
16536: CALL_OW 248
16540: PUSH
16541: LD_INT 0
16543: NONEQUAL
16544: AND
16545: IFFALSE 16612
// if not ( change_to_this_class in [ class_sniper , class_mortar , class_bazooker ] and not GetBType ( building_list [ val ] ) in [ b_barracks , b_fort ] ) then
16547: LD_VAR 0 4
16551: PUSH
16552: LD_INT 5
16554: PUSH
16555: LD_INT 8
16557: PUSH
16558: LD_INT 9
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: LIST
16565: IN
16566: PUSH
16567: LD_VAR 0 3
16571: PUSH
16572: LD_VAR 0 11
16576: ARRAY
16577: PPUSH
16578: CALL_OW 266
16582: PUSH
16583: LD_INT 5
16585: PUSH
16586: LD_INT 35
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: IN
16593: NOT
16594: AND
16595: NOT
16596: IFFALSE 16612
// AddComChangeProfession ( i , change_to_this_class ) ;
16598: LD_VAR 0 9
16602: PPUSH
16603: LD_VAR 0 4
16607: PPUSH
16608: CALL_OW 183
// end ; end ; end ; end ;
16612: GO 16327
16614: POP
16615: POP
// val = val - 1 ;
16616: LD_ADDR_VAR 0 11
16620: PUSH
16621: LD_VAR 0 11
16625: PUSH
16626: LD_INT 1
16628: MINUS
16629: ST_TO_ADDR
// end ;
16630: GO 15808
// if human_list > 0 then
16632: LD_VAR 0 2
16636: PUSH
16637: LD_INT 0
16639: GREATER
16640: IFFALSE 16898
// if ai_building_under_construction [ base ] > 0 and help_building and not under_attack then
16642: LD_EXP 43
16646: PUSH
16647: LD_VAR 0 1
16651: ARRAY
16652: PUSH
16653: LD_INT 0
16655: GREATER
16656: PUSH
16657: LD_VAR 0 6
16661: AND
16662: PUSH
16663: LD_VAR 0 17
16667: NOT
16668: AND
16669: IFFALSE 16745
// begin for i in GetHumansOutOfUnits ( human_list ) do
16671: LD_ADDR_VAR 0 9
16675: PUSH
16676: LD_VAR 0 2
16680: PPUSH
16681: CALL 23525 0 1
16685: PUSH
16686: FOR_IN
16687: IFFALSE 16741
// SetTaskList ( i , [ [ h , 0 , 0 , ai_building_under_construction [ base ] , 0 , 0 , 0 ] ] ) ;
16689: LD_VAR 0 9
16693: PPUSH
16694: LD_STRING h
16696: PUSH
16697: LD_INT 0
16699: PUSH
16700: LD_INT 0
16702: PUSH
16703: LD_EXP 43
16707: PUSH
16708: LD_VAR 0 1
16712: ARRAY
16713: PUSH
16714: LD_INT 0
16716: PUSH
16717: LD_INT 0
16719: PUSH
16720: LD_INT 0
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: PPUSH
16735: CALL_OW 446
16739: GO 16686
16741: POP
16742: POP
// end else
16743: GO 16898
// for i in GetHumansOutOfUnits ( human_list ) do
16745: LD_ADDR_VAR 0 9
16749: PUSH
16750: LD_VAR 0 2
16754: PPUSH
16755: CALL 23525 0 1
16759: PUSH
16760: FOR_IN
16761: IFFALSE 16896
// if GetDistUnitXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 4 then
16763: LD_VAR 0 9
16767: PPUSH
16768: LD_EXP 42
16772: PUSH
16773: LD_VAR 0 1
16777: ARRAY
16778: PUSH
16779: LD_INT 1
16781: ARRAY
16782: PPUSH
16783: LD_EXP 42
16787: PUSH
16788: LD_VAR 0 1
16792: ARRAY
16793: PUSH
16794: LD_INT 2
16796: ARRAY
16797: PPUSH
16798: CALL_OW 297
16802: PUSH
16803: LD_INT 4
16805: GREATER
16806: IFFALSE 16894
// if aggressive_pullback then
16808: LD_VAR 0 7
16812: IFFALSE 16855
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) else
16814: LD_VAR 0 9
16818: PPUSH
16819: LD_EXP 42
16823: PUSH
16824: LD_VAR 0 1
16828: ARRAY
16829: PUSH
16830: LD_INT 1
16832: ARRAY
16833: PPUSH
16834: LD_EXP 42
16838: PUSH
16839: LD_VAR 0 1
16843: ARRAY
16844: PUSH
16845: LD_INT 2
16847: ARRAY
16848: PPUSH
16849: CALL_OW 114
16853: GO 16894
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
16855: LD_VAR 0 9
16859: PPUSH
16860: LD_EXP 42
16864: PUSH
16865: LD_VAR 0 1
16869: ARRAY
16870: PUSH
16871: LD_INT 1
16873: ARRAY
16874: PPUSH
16875: LD_EXP 42
16879: PUSH
16880: LD_VAR 0 1
16884: ARRAY
16885: PUSH
16886: LD_INT 2
16888: ARRAY
16889: PPUSH
16890: CALL_OW 111
16894: GO 16760
16896: POP
16897: POP
// end ;
16898: LD_VAR 0 8
16902: RET
// every 0 0$1 do var side , i , engineers_list , temp_list , buildings_list , temp_unit , away_dist , temp_list_2 , base , apemen_engineers_list ; var humans_list , crane_usable , b_value , k ; var crane_being_repaired ;
16903: GO 16905
16905: DISABLE
16906: LD_INT 0
16908: PPUSH
16909: PPUSH
16910: PPUSH
16911: PPUSH
16912: PPUSH
16913: PPUSH
16914: PPUSH
16915: PPUSH
16916: PPUSH
16917: PPUSH
16918: PPUSH
16919: PPUSH
16920: PPUSH
16921: PPUSH
16922: PPUSH
// begin crane_being_repaired = false ;
16923: LD_ADDR_VAR 0 15
16927: PUSH
16928: LD_INT 0
16930: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16931: LD_INT 35
16933: PPUSH
16934: CALL_OW 67
// for base in ai_bases do
16938: LD_ADDR_VAR 0 9
16942: PUSH
16943: LD_EXP 59
16947: PUSH
16948: FOR_IN
16949: IFFALSE 22183
// begin side = GetBaseSide ( base ) ;
16951: LD_ADDR_VAR 0 1
16955: PUSH
16956: LD_VAR 0 9
16960: PPUSH
16961: CALL 12710 0 1
16965: ST_TO_ADDR
// engineers_list = ai_engineers [ base ] diff ai_heal_these_humans [ base ] ;
16966: LD_ADDR_VAR 0 3
16970: PUSH
16971: LD_EXP 31
16975: PUSH
16976: LD_VAR 0 9
16980: ARRAY
16981: PUSH
16982: LD_EXP 44
16986: PUSH
16987: LD_VAR 0 9
16991: ARRAY
16992: DIFF
16993: ST_TO_ADDR
// apemen_engineers_list = ai_apemen_engineers [ base ] diff ai_heal_these_humans [ base ] ;
16994: LD_ADDR_VAR 0 10
16998: PUSH
16999: LD_EXP 63
17003: PUSH
17004: LD_VAR 0 9
17008: ARRAY
17009: PUSH
17010: LD_EXP 44
17014: PUSH
17015: LD_VAR 0 9
17019: ARRAY
17020: DIFF
17021: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
17022: LD_ADDR_VAR 0 4
17026: PUSH
17027: LD_EXP 44
17031: PUSH
17032: LD_VAR 0 9
17036: ARRAY
17037: ST_TO_ADDR
// humans_list = engineers_list ^ apemen_engineers_list ;
17038: LD_ADDR_VAR 0 11
17042: PUSH
17043: LD_VAR 0 3
17047: PUSH
17048: LD_VAR 0 10
17052: ADD
17053: ST_TO_ADDR
// i = 1 ;
17054: LD_ADDR_VAR 0 2
17058: PUSH
17059: LD_INT 1
17061: ST_TO_ADDR
// while i <= humans_list do
17062: LD_VAR 0 2
17066: PUSH
17067: LD_VAR 0 11
17071: LESSEQUAL
17072: IFFALSE 17211
// begin if GetLives ( humans_list [ i ] ) <= 700 then
17074: LD_VAR 0 11
17078: PUSH
17079: LD_VAR 0 2
17083: ARRAY
17084: PPUSH
17085: CALL_OW 256
17089: PUSH
17090: LD_INT 700
17092: LESSEQUAL
17093: IFFALSE 17195
// begin temp_list = temp_list ^ humans_list [ i ] ;
17095: LD_ADDR_VAR 0 4
17099: PUSH
17100: LD_VAR 0 4
17104: PUSH
17105: LD_VAR 0 11
17109: PUSH
17110: LD_VAR 0 2
17114: ARRAY
17115: ADD
17116: ST_TO_ADDR
// engineers_list = engineers_list diff humans_list [ i ] ;
17117: LD_ADDR_VAR 0 3
17121: PUSH
17122: LD_VAR 0 3
17126: PUSH
17127: LD_VAR 0 11
17131: PUSH
17132: LD_VAR 0 2
17136: ARRAY
17137: DIFF
17138: ST_TO_ADDR
// apemen_engineers_list = apemen_engineers_list diff humans_list [ i ] ;
17139: LD_ADDR_VAR 0 10
17143: PUSH
17144: LD_VAR 0 10
17148: PUSH
17149: LD_VAR 0 11
17153: PUSH
17154: LD_VAR 0 2
17158: ARRAY
17159: DIFF
17160: ST_TO_ADDR
// humans_list = Delete ( humans_list , i ) ;
17161: LD_ADDR_VAR 0 11
17165: PUSH
17166: LD_VAR 0 11
17170: PPUSH
17171: LD_VAR 0 2
17175: PPUSH
17176: CALL_OW 3
17180: ST_TO_ADDR
// i = i - 1 ;
17181: LD_ADDR_VAR 0 2
17185: PUSH
17186: LD_VAR 0 2
17190: PUSH
17191: LD_INT 1
17193: MINUS
17194: ST_TO_ADDR
// end ; i = i + 1 ;
17195: LD_ADDR_VAR 0 2
17199: PUSH
17200: LD_VAR 0 2
17204: PUSH
17205: LD_INT 1
17207: PLUS
17208: ST_TO_ADDR
// end ;
17209: GO 17062
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
17211: LD_ADDR_EXP 44
17215: PUSH
17216: LD_EXP 44
17220: PPUSH
17221: LD_VAR 0 9
17225: PPUSH
17226: LD_VAR 0 4
17230: PPUSH
17231: CALL_OW 1
17235: ST_TO_ADDR
// crane_usable = false ;
17236: LD_ADDR_VAR 0 12
17240: PUSH
17241: LD_INT 0
17243: ST_TO_ADDR
// if ai_crane [ base ] > 0 then
17244: LD_EXP 71
17248: PUSH
17249: LD_VAR 0 9
17253: ARRAY
17254: PUSH
17255: LD_INT 0
17257: GREATER
17258: IFFALSE 17430
// if GetLives ( ai_crane [ base ] ) <= 500 or ( crane_being_repaired and GetLives ( ai_crane [ base ] ) < 1000 ) then
17260: LD_EXP 71
17264: PUSH
17265: LD_VAR 0 9
17269: ARRAY
17270: PPUSH
17271: CALL_OW 256
17275: PUSH
17276: LD_INT 500
17278: LESSEQUAL
17279: PUSH
17280: LD_VAR 0 15
17284: PUSH
17285: LD_EXP 71
17289: PUSH
17290: LD_VAR 0 9
17294: ARRAY
17295: PPUSH
17296: CALL_OW 256
17300: PUSH
17301: LD_INT 1000
17303: LESS
17304: AND
17305: OR
17306: IFFALSE 17414
// begin crane_being_repaired = true ;
17308: LD_ADDR_VAR 0 15
17312: PUSH
17313: LD_INT 1
17315: ST_TO_ADDR
// if GetDistUnitXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 6 then
17316: LD_EXP 71
17320: PUSH
17321: LD_VAR 0 9
17325: ARRAY
17326: PPUSH
17327: LD_EXP 42
17331: PUSH
17332: LD_VAR 0 9
17336: ARRAY
17337: PUSH
17338: LD_INT 1
17340: ARRAY
17341: PPUSH
17342: LD_EXP 42
17346: PUSH
17347: LD_VAR 0 9
17351: ARRAY
17352: PUSH
17353: LD_INT 2
17355: ARRAY
17356: PPUSH
17357: CALL_OW 297
17361: PUSH
17362: LD_INT 6
17364: GREATER
17365: IFFALSE 17412
// ComMoveXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
17367: LD_EXP 71
17371: PUSH
17372: LD_VAR 0 9
17376: ARRAY
17377: PPUSH
17378: LD_EXP 42
17382: PUSH
17383: LD_VAR 0 9
17387: ARRAY
17388: PUSH
17389: LD_INT 1
17391: ARRAY
17392: PPUSH
17393: LD_EXP 42
17397: PUSH
17398: LD_VAR 0 9
17402: ARRAY
17403: PUSH
17404: LD_INT 2
17406: ARRAY
17407: PPUSH
17408: CALL_OW 111
// end else
17412: GO 17430
// begin crane_usable = true ;
17414: LD_ADDR_VAR 0 12
17418: PUSH
17419: LD_INT 1
17421: ST_TO_ADDR
// crane_being_repaired = false ;
17422: LD_ADDR_VAR 0 15
17426: PUSH
17427: LD_INT 0
17429: ST_TO_ADDR
// end ; if engineers_list = 0 and apemen_engineers_list = 0 and not crane_usable then
17430: LD_VAR 0 3
17434: PUSH
17435: LD_INT 0
17437: EQUAL
17438: PUSH
17439: LD_VAR 0 10
17443: PUSH
17444: LD_INT 0
17446: EQUAL
17447: AND
17448: PUSH
17449: LD_VAR 0 12
17453: NOT
17454: AND
17455: IFFALSE 17459
// continue ;
17457: GO 16948
// temp_list_2 = UnitFilter ( engineers_list , [ f_class , class_engineer ] ) ;
17459: LD_ADDR_VAR 0 8
17463: PUSH
17464: LD_VAR 0 3
17468: PPUSH
17469: LD_INT 25
17471: PUSH
17472: LD_INT 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PPUSH
17479: CALL_OW 72
17483: ST_TO_ADDR
// if ai_captured_buildings [ base ] > 0 and temp_list_2 > 0 then
17484: LD_EXP 79
17488: PUSH
17489: LD_VAR 0 9
17493: ARRAY
17494: PUSH
17495: LD_INT 0
17497: GREATER
17498: PUSH
17499: LD_VAR 0 8
17503: PUSH
17504: LD_INT 0
17506: GREATER
17507: AND
17508: IFFALSE 17779
// begin temp_list = [ ] ;
17510: LD_ADDR_VAR 0 4
17514: PUSH
17515: EMPTY
17516: ST_TO_ADDR
// for i in ai_captured_buildings [ base ] do
17517: LD_ADDR_VAR 0 2
17521: PUSH
17522: LD_EXP 79
17526: PUSH
17527: LD_VAR 0 9
17531: ARRAY
17532: PUSH
17533: FOR_IN
17534: IFFALSE 17590
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
17536: LD_VAR 0 2
17540: PPUSH
17541: CALL_OW 266
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: IN
17556: IFFALSE 17574
// temp_list = temp_list ^ 1 else
17558: LD_ADDR_VAR 0 4
17562: PUSH
17563: LD_VAR 0 4
17567: PUSH
17568: LD_INT 1
17570: ADD
17571: ST_TO_ADDR
17572: GO 17588
// temp_list = temp_list ^ 0 ;
17574: LD_ADDR_VAR 0 4
17578: PUSH
17579: LD_VAR 0 4
17583: PUSH
17584: LD_INT 0
17586: ADD
17587: ST_TO_ADDR
17588: GO 17533
17590: POP
17591: POP
// temp_list = SortListByListDesc ( ai_captured_buildings [ base ] , temp_list ) ;
17592: LD_ADDR_VAR 0 4
17596: PUSH
17597: LD_EXP 79
17601: PUSH
17602: LD_VAR 0 9
17606: ARRAY
17607: PPUSH
17608: LD_VAR 0 4
17612: PPUSH
17613: CALL_OW 77
17617: ST_TO_ADDR
// temp_list_2 = GetHumansOutOfUnits ( temp_list_2 ) ;
17618: LD_ADDR_VAR 0 8
17622: PUSH
17623: LD_VAR 0 8
17627: PPUSH
17628: CALL 23525 0 1
17632: ST_TO_ADDR
// if temp_list_2 > 0 then
17633: LD_VAR 0 8
17637: PUSH
17638: LD_INT 0
17640: GREATER
17641: IFFALSE 17757
// begin temp_list_2 = SortListByListDesc ( temp_list_2 , temp_list_2 ) ;
17643: LD_ADDR_VAR 0 8
17647: PUSH
17648: LD_VAR 0 8
17652: PPUSH
17653: LD_VAR 0 8
17657: PPUSH
17658: CALL_OW 77
17662: ST_TO_ADDR
// SetTaskList ( temp_list_2 [ 1 ] , [ [ e , GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) , temp_list [ 1 ] , 0 , 0 , 0 ] ] ) ;
17663: LD_VAR 0 8
17667: PUSH
17668: LD_INT 1
17670: ARRAY
17671: PPUSH
17672: LD_STRING e
17674: PUSH
17675: LD_VAR 0 4
17679: PUSH
17680: LD_INT 1
17682: ARRAY
17683: PPUSH
17684: CALL_OW 250
17688: PUSH
17689: LD_VAR 0 4
17693: PUSH
17694: LD_INT 1
17696: ARRAY
17697: PPUSH
17698: CALL_OW 251
17702: PUSH
17703: LD_VAR 0 4
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PUSH
17712: LD_INT 0
17714: PUSH
17715: LD_INT 0
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: PUSH
17730: EMPTY
17731: LIST
17732: PPUSH
17733: CALL_OW 446
// engineers_list = engineers_list diff temp_list_2 [ 1 ] ;
17737: LD_ADDR_VAR 0 3
17741: PUSH
17742: LD_VAR 0 3
17746: PUSH
17747: LD_VAR 0 8
17751: PUSH
17752: LD_INT 1
17754: ARRAY
17755: DIFF
17756: ST_TO_ADDR
// end ; if engineers_list = 0 and apemen_engineers_list = 0 then
17757: LD_VAR 0 3
17761: PUSH
17762: LD_INT 0
17764: EQUAL
17765: PUSH
17766: LD_VAR 0 10
17770: PUSH
17771: LD_INT 0
17773: EQUAL
17774: AND
17775: IFFALSE 17779
// continue ;
17777: GO 16948
// end ; i = 1 ;
17779: LD_ADDR_VAR 0 2
17783: PUSH
17784: LD_INT 1
17786: ST_TO_ADDR
// buildings_list = [ ] ;
17787: LD_ADDR_VAR 0 5
17791: PUSH
17792: EMPTY
17793: ST_TO_ADDR
// repeat case i of 1 :
17794: LD_VAR 0 2
17798: PUSH
17799: LD_INT 1
17801: DOUBLE
17802: EQUAL
17803: IFTRUE 17807
17805: GO 17844
17807: POP
// buildings_list = UnitFilter ( ai_all_buildings [ base ] , [ f_not , [ f_ok ] ] ) ; 2 :
17808: LD_ADDR_VAR 0 5
17812: PUSH
17813: LD_EXP 45
17817: PUSH
17818: LD_VAR 0 9
17822: ARRAY
17823: PPUSH
17824: LD_INT 3
17826: PUSH
17827: LD_INT 50
17829: PUSH
17830: EMPTY
17831: LIST
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PPUSH
17837: CALL_OW 72
17841: ST_TO_ADDR
17842: GO 17894
17844: LD_INT 2
17846: DOUBLE
17847: EQUAL
17848: IFTRUE 17852
17850: GO 17893
17852: POP
// buildings_list = UnitFilter ( ai_all_buildings [ base ] , [ f_not , [ f_lives , 1000 ] ] ) ; end ;
17853: LD_ADDR_VAR 0 5
17857: PUSH
17858: LD_EXP 45
17862: PUSH
17863: LD_VAR 0 9
17867: ARRAY
17868: PPUSH
17869: LD_INT 3
17871: PUSH
17872: LD_INT 24
17874: PUSH
17875: LD_INT 1000
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PPUSH
17886: CALL_OW 72
17890: ST_TO_ADDR
17891: GO 17894
17893: POP
// i = i + 1 ;
17894: LD_ADDR_VAR 0 2
17898: PUSH
17899: LD_VAR 0 2
17903: PUSH
17904: LD_INT 1
17906: PLUS
17907: ST_TO_ADDR
// until buildings_list > 0 or i > 2 ;
17908: LD_VAR 0 5
17912: PUSH
17913: LD_INT 0
17915: GREATER
17916: PUSH
17917: LD_VAR 0 2
17921: PUSH
17922: LD_INT 2
17924: GREATER
17925: OR
17926: IFFALSE 17794
// if buildings_list > 0 then
17928: LD_VAR 0 5
17932: PUSH
17933: LD_INT 0
17935: GREATER
17936: IFFALSE 18159
// begin humans_list = engineers_list ^ apemen_engineers_list ;
17938: LD_ADDR_VAR 0 11
17942: PUSH
17943: LD_VAR 0 3
17947: PUSH
17948: LD_VAR 0 10
17952: ADD
17953: ST_TO_ADDR
// humans_list = GetHumansOutOfUnits ( humans_list ) ;
17954: LD_ADDR_VAR 0 11
17958: PUSH
17959: LD_VAR 0 11
17963: PPUSH
17964: CALL 23525 0 1
17968: ST_TO_ADDR
// if crane_usable then
17969: LD_VAR 0 12
17973: IFFALSE 18005
// begin humans_list = humans_list ^ ai_crane [ base ] ;
17975: LD_ADDR_VAR 0 11
17979: PUSH
17980: LD_VAR 0 11
17984: PUSH
17985: LD_EXP 71
17989: PUSH
17990: LD_VAR 0 9
17994: ARRAY
17995: ADD
17996: ST_TO_ADDR
// crane_usable = false ;
17997: LD_ADDR_VAR 0 12
18001: PUSH
18002: LD_INT 0
18004: ST_TO_ADDR
// end ; repeat i = 1 ;
18005: LD_ADDR_VAR 0 2
18009: PUSH
18010: LD_INT 1
18012: ST_TO_ADDR
// while i <= buildings_list do
18013: LD_VAR 0 2
18017: PUSH
18018: LD_VAR 0 5
18022: LESSEQUAL
18023: IFFALSE 18147
// begin if humans_list = 0 then
18025: LD_VAR 0 11
18029: PUSH
18030: LD_INT 0
18032: EQUAL
18033: IFFALSE 18037
// break ;
18035: GO 18147
// temp_unit = NearestUnitToUnit ( humans_list , buildings_list [ i ] ) ;
18037: LD_ADDR_VAR 0 6
18041: PUSH
18042: LD_VAR 0 11
18046: PPUSH
18047: LD_VAR 0 5
18051: PUSH
18052: LD_VAR 0 2
18056: ARRAY
18057: PPUSH
18058: CALL_OW 74
18062: ST_TO_ADDR
// ComRepairBuilding ( temp_unit , buildings_list [ i ] ) ;
18063: LD_VAR 0 6
18067: PPUSH
18068: LD_VAR 0 5
18072: PUSH
18073: LD_VAR 0 2
18077: ARRAY
18078: PPUSH
18079: CALL_OW 130
// humans_list = humans_list diff temp_unit ;
18083: LD_ADDR_VAR 0 11
18087: PUSH
18088: LD_VAR 0 11
18092: PUSH
18093: LD_VAR 0 6
18097: DIFF
18098: ST_TO_ADDR
// engineers_list = engineers_list diff temp_unit ;
18099: LD_ADDR_VAR 0 3
18103: PUSH
18104: LD_VAR 0 3
18108: PUSH
18109: LD_VAR 0 6
18113: DIFF
18114: ST_TO_ADDR
// apemen_engineers_list = apemen_engineers_list diff temp_unit ;
18115: LD_ADDR_VAR 0 10
18119: PUSH
18120: LD_VAR 0 10
18124: PUSH
18125: LD_VAR 0 6
18129: DIFF
18130: ST_TO_ADDR
// i = i + 1 ;
18131: LD_ADDR_VAR 0 2
18135: PUSH
18136: LD_VAR 0 2
18140: PUSH
18141: LD_INT 1
18143: PLUS
18144: ST_TO_ADDR
// end ;
18145: GO 18013
// until humans_list = 0 ;
18147: LD_VAR 0 11
18151: PUSH
18152: LD_INT 0
18154: EQUAL
18155: IFFALSE 18005
// continue ;
18157: GO 16948
// end ; if not BaseUnderAttack ( base , - 1 ) then
18159: LD_VAR 0 9
18163: PPUSH
18164: LD_INT 1
18166: NEG
18167: PPUSH
18168: CALL 23630 0 2
18172: NOT
18173: IFFALSE 22007
// begin if ai_building_under_construction [ base ] > 0 then
18175: LD_EXP 43
18179: PUSH
18180: LD_VAR 0 9
18184: ARRAY
18185: PUSH
18186: LD_INT 0
18188: GREATER
18189: IFFALSE 18340
// if BuildingStatus ( ai_building_under_construction [ base ] ) = bs_build then
18191: LD_EXP 43
18195: PUSH
18196: LD_VAR 0 9
18200: ARRAY
18201: PPUSH
18202: CALL_OW 461
18206: PUSH
18207: LD_INT 1
18209: EQUAL
18210: IFFALSE 18302
// begin temp_list_2 = GetHumansOutOfUnits ( engineers_list ^ apemen_engineers_list ) ;
18212: LD_ADDR_VAR 0 8
18216: PUSH
18217: LD_VAR 0 3
18221: PUSH
18222: LD_VAR 0 10
18226: ADD
18227: PPUSH
18228: CALL 23525 0 1
18232: ST_TO_ADDR
// if crane_usable then
18233: LD_VAR 0 12
18237: IFFALSE 18261
// temp_list_2 = temp_list_2 ^ ai_crane [ base ] ;
18239: LD_ADDR_VAR 0 8
18243: PUSH
18244: LD_VAR 0 8
18248: PUSH
18249: LD_EXP 71
18253: PUSH
18254: LD_VAR 0 9
18258: ARRAY
18259: ADD
18260: ST_TO_ADDR
// for i in temp_list_2 do
18261: LD_ADDR_VAR 0 2
18265: PUSH
18266: LD_VAR 0 8
18270: PUSH
18271: FOR_IN
18272: IFFALSE 18296
// ComRepairBuilding ( i , ai_building_under_construction [ base ] ) ;
18274: LD_VAR 0 2
18278: PPUSH
18279: LD_EXP 43
18283: PUSH
18284: LD_VAR 0 9
18288: ARRAY
18289: PPUSH
18290: CALL_OW 130
18294: GO 18271
18296: POP
18297: POP
// continue ;
18298: GO 16948
// end else
18300: GO 18340
// begin ComCancel ( ai_building_under_construction [ base ] ) ;
18302: LD_EXP 43
18306: PUSH
18307: LD_VAR 0 9
18311: ARRAY
18312: PPUSH
18313: CALL_OW 127
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
18317: LD_ADDR_EXP 43
18321: PUSH
18322: LD_EXP 43
18326: PPUSH
18327: LD_VAR 0 9
18331: PPUSH
18332: LD_INT 0
18334: PPUSH
18335: CALL_OW 1
18339: ST_TO_ADDR
// end ; if ai_all_buildings [ base ] - ai_excepted_buildings [ base ] < ai_buildings_locations [ base ] or ai_upcoming_building_data [ base ] > 0 then
18340: LD_EXP 45
18344: PUSH
18345: LD_VAR 0 9
18349: ARRAY
18350: PUSH
18351: LD_EXP 69
18355: PUSH
18356: LD_VAR 0 9
18360: ARRAY
18361: MINUS
18362: PUSH
18363: LD_EXP 39
18367: PUSH
18368: LD_VAR 0 9
18372: ARRAY
18373: LESS
18374: PUSH
18375: LD_EXP 47
18379: PUSH
18380: LD_VAR 0 9
18384: ARRAY
18385: PUSH
18386: LD_INT 0
18388: GREATER
18389: OR
18390: IFFALSE 21893
// begin if ai_upcoming_building_data [ base ] = 0 then
18392: LD_EXP 47
18396: PUSH
18397: LD_VAR 0 9
18401: ARRAY
18402: PUSH
18403: LD_INT 0
18405: EQUAL
18406: IFFALSE 18815
// begin temp_list = [ ] ;
18408: LD_ADDR_VAR 0 4
18412: PUSH
18413: EMPTY
18414: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
18415: LD_ADDR_VAR 0 2
18419: PUSH
18420: LD_EXP 39
18424: PUSH
18425: LD_VAR 0 9
18429: ARRAY
18430: PUSH
18431: FOR_IN
18432: IFFALSE 18482
// if GetBType ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) = - 1 then
18434: LD_VAR 0 2
18438: PUSH
18439: LD_INT 1
18441: ARRAY
18442: PPUSH
18443: LD_VAR 0 2
18447: PUSH
18448: LD_INT 2
18450: ARRAY
18451: PPUSH
18452: CALL_OW 428
18456: PPUSH
18457: CALL_OW 266
18461: PUSH
18462: LD_INT 1
18464: NEG
18465: EQUAL
18466: IFFALSE 18480
// begin temp_list = i ;
18468: LD_ADDR_VAR 0 4
18472: PUSH
18473: LD_VAR 0 2
18477: ST_TO_ADDR
// break ;
18478: GO 18482
// end ;
18480: GO 18431
18482: POP
18483: POP
// if temp_list > 0 then
18484: LD_VAR 0 4
18488: PUSH
18489: LD_INT 0
18491: GREATER
18492: IFFALSE 18815
// begin if temp_list [ 4 ] = b_bunker and GetBaseNation ( base ) in [ nation_american , nation_russian ] then
18494: LD_VAR 0 4
18498: PUSH
18499: LD_INT 4
18501: ARRAY
18502: PUSH
18503: LD_INT 32
18505: EQUAL
18506: PUSH
18507: LD_VAR 0 9
18511: PPUSH
18512: CALL 12787 0 1
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: LD_INT 3
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: IN
18527: AND
18528: IFFALSE 18790
// begin k = 0 ;
18530: LD_ADDR_VAR 0 14
18534: PUSH
18535: LD_INT 0
18537: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
18538: LD_ADDR_VAR 0 2
18542: PUSH
18543: LD_EXP 39
18547: PUSH
18548: LD_VAR 0 9
18552: ARRAY
18553: PUSH
18554: FOR_IN
18555: IFFALSE 18606
// if i [ 4 ] in [ b_breastwork , b_bunker , b_armoury , b_barracks , b_fort ] then
18557: LD_VAR 0 2
18561: PUSH
18562: LD_INT 4
18564: ARRAY
18565: PUSH
18566: LD_INT 31
18568: PUSH
18569: LD_INT 32
18571: PUSH
18572: LD_INT 4
18574: PUSH
18575: LD_INT 5
18577: PUSH
18578: LD_INT 35
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: IN
18588: IFFALSE 18604
// k = k + 1 ;
18590: LD_ADDR_VAR 0 14
18594: PUSH
18595: LD_VAR 0 14
18599: PUSH
18600: LD_INT 1
18602: PLUS
18603: ST_TO_ADDR
18604: GO 18554
18606: POP
18607: POP
// if k > ai_soldiers [ base ] then
18608: LD_VAR 0 14
18612: PUSH
18613: LD_EXP 30
18617: PUSH
18618: LD_VAR 0 9
18622: ARRAY
18623: GREATER
18624: IFFALSE 18790
// begin for i = 1 to ai_buildings_locations [ base ] do
18626: LD_ADDR_VAR 0 2
18630: PUSH
18631: DOUBLE
18632: LD_INT 1
18634: DEC
18635: ST_TO_ADDR
18636: LD_EXP 39
18640: PUSH
18641: LD_VAR 0 9
18645: ARRAY
18646: PUSH
18647: FOR_TO
18648: IFFALSE 18767
// if ai_buildings_locations [ base ] [ i ] = temp_list then
18650: LD_EXP 39
18654: PUSH
18655: LD_VAR 0 9
18659: ARRAY
18660: PUSH
18661: LD_VAR 0 2
18665: ARRAY
18666: PUSH
18667: LD_VAR 0 4
18671: EQUAL
18672: IFFALSE 18765
// begin temp_list_2 = Replace ( ai_buildings_locations [ base ] [ i ] , 4 , b_turret ) ;
18674: LD_ADDR_VAR 0 8
18678: PUSH
18679: LD_EXP 39
18683: PUSH
18684: LD_VAR 0 9
18688: ARRAY
18689: PUSH
18690: LD_VAR 0 2
18694: ARRAY
18695: PPUSH
18696: LD_INT 4
18698: PPUSH
18699: LD_INT 33
18701: PPUSH
18702: CALL_OW 1
18706: ST_TO_ADDR
// temp_list_2 = Replace ( ai_buildings_locations [ base ] , i , temp_list_2 ) ;
18707: LD_ADDR_VAR 0 8
18711: PUSH
18712: LD_EXP 39
18716: PUSH
18717: LD_VAR 0 9
18721: ARRAY
18722: PPUSH
18723: LD_VAR 0 2
18727: PPUSH
18728: LD_VAR 0 8
18732: PPUSH
18733: CALL_OW 1
18737: ST_TO_ADDR
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list_2 ) ;
18738: LD_ADDR_EXP 39
18742: PUSH
18743: LD_EXP 39
18747: PPUSH
18748: LD_VAR 0 9
18752: PPUSH
18753: LD_VAR 0 8
18757: PPUSH
18758: CALL_OW 1
18762: ST_TO_ADDR
// break ;
18763: GO 18767
// end ;
18765: GO 18647
18767: POP
18768: POP
// temp_list = Replace ( temp_list , 4 , b_turret ) ;
18769: LD_ADDR_VAR 0 4
18773: PUSH
18774: LD_VAR 0 4
18778: PPUSH
18779: LD_INT 4
18781: PPUSH
18782: LD_INT 33
18784: PPUSH
18785: CALL_OW 1
18789: ST_TO_ADDR
// end ; end ; ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , temp_list ) ;
18790: LD_ADDR_EXP 47
18794: PUSH
18795: LD_EXP 47
18799: PPUSH
18800: LD_VAR 0 9
18804: PPUSH
18805: LD_VAR 0 4
18809: PPUSH
18810: CALL_OW 1
18814: ST_TO_ADDR
// end ; end ; if ai_upcoming_building_data [ base ] > 0 then
18815: LD_EXP 47
18819: PUSH
18820: LD_VAR 0 9
18824: ARRAY
18825: PUSH
18826: LD_INT 0
18828: GREATER
18829: IFFALSE 21893
// begin if ai_building_constructor [ base ] = 0 then
18831: LD_EXP 46
18835: PUSH
18836: LD_VAR 0 9
18840: ARRAY
18841: PUSH
18842: LD_INT 0
18844: EQUAL
18845: IFFALSE 18999
// begin temp_list_2 = UnitFilter ( ai_engineers [ base ] , [ f_class , class_engineer ] ) ;
18847: LD_ADDR_VAR 0 8
18851: PUSH
18852: LD_EXP 31
18856: PUSH
18857: LD_VAR 0 9
18861: ARRAY
18862: PPUSH
18863: LD_INT 25
18865: PUSH
18866: LD_INT 2
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PPUSH
18873: CALL_OW 72
18877: ST_TO_ADDR
// if crane_usable then
18878: LD_VAR 0 12
18882: IFFALSE 18906
// temp_list_2 = temp_list_2 ^ ai_crane [ base ] ;
18884: LD_ADDR_VAR 0 8
18888: PUSH
18889: LD_VAR 0 8
18893: PUSH
18894: LD_EXP 71
18898: PUSH
18899: LD_VAR 0 9
18903: ARRAY
18904: ADD
18905: ST_TO_ADDR
// if temp_list_2 > 0 then
18906: LD_VAR 0 8
18910: PUSH
18911: LD_INT 0
18913: GREATER
18914: IFFALSE 18999
// begin temp_list = [ ] ;
18916: LD_ADDR_VAR 0 4
18920: PUSH
18921: EMPTY
18922: ST_TO_ADDR
// for i in temp_list_2 do
18923: LD_ADDR_VAR 0 2
18927: PUSH
18928: LD_VAR 0 8
18932: PUSH
18933: FOR_IN
18934: IFFALSE 18962
// temp_list = temp_list ^ GetSkill ( i , skill_engineering ) ;
18936: LD_ADDR_VAR 0 4
18940: PUSH
18941: LD_VAR 0 4
18945: PUSH
18946: LD_VAR 0 2
18950: PPUSH
18951: LD_INT 2
18953: PPUSH
18954: CALL_OW 259
18958: ADD
18959: ST_TO_ADDR
18960: GO 18933
18962: POP
18963: POP
// ai_building_constructor = Replace ( ai_building_constructor , base , BestFromListByList ( temp_list_2 , temp_list ) ) ;
18964: LD_ADDR_EXP 46
18968: PUSH
18969: LD_EXP 46
18973: PPUSH
18974: LD_VAR 0 9
18978: PPUSH
18979: LD_VAR 0 8
18983: PPUSH
18984: LD_VAR 0 4
18988: PPUSH
18989: CALL_OW 79
18993: PPUSH
18994: CALL_OW 1
18998: ST_TO_ADDR
// end ; end ; if ai_building_constructor [ base ] > 0 and ( ai_building_constructor [ base ] in engineers_list or ( ai_building_constructor [ base ] = ai_crane [ base ] and crane_usable ) ) then
18999: LD_EXP 46
19003: PUSH
19004: LD_VAR 0 9
19008: ARRAY
19009: PUSH
19010: LD_INT 0
19012: GREATER
19013: PUSH
19014: LD_EXP 46
19018: PUSH
19019: LD_VAR 0 9
19023: ARRAY
19024: PUSH
19025: LD_VAR 0 3
19029: IN
19030: PUSH
19031: LD_EXP 46
19035: PUSH
19036: LD_VAR 0 9
19040: ARRAY
19041: PUSH
19042: LD_EXP 71
19046: PUSH
19047: LD_VAR 0 9
19051: ARRAY
19052: EQUAL
19053: PUSH
19054: LD_VAR 0 12
19058: AND
19059: OR
19060: AND
19061: IFFALSE 21893
// begin engineers_list = engineers_list diff ai_building_constructor [ base ] ;
19063: LD_ADDR_VAR 0 3
19067: PUSH
19068: LD_VAR 0 3
19072: PUSH
19073: LD_EXP 46
19077: PUSH
19078: LD_VAR 0 9
19082: ARRAY
19083: DIFF
19084: ST_TO_ADDR
// case GetType ( IsInUnit ( ai_building_constructor [ base ] ) ) of unit_building :
19085: LD_EXP 46
19089: PUSH
19090: LD_VAR 0 9
19094: ARRAY
19095: PPUSH
19096: CALL_OW 310
19100: PPUSH
19101: CALL_OW 247
19105: PUSH
19106: LD_INT 3
19108: DOUBLE
19109: EQUAL
19110: IFTRUE 19114
19112: GO 19132
19114: POP
// ComExitBuilding ( ai_building_constructor [ base ] ) ; unit_vehicle :
19115: LD_EXP 46
19119: PUSH
19120: LD_VAR 0 9
19124: ARRAY
19125: PPUSH
19126: CALL_OW 122
19130: GO 21893
19132: LD_INT 2
19134: DOUBLE
19135: EQUAL
19136: IFTRUE 19140
19138: GO 19158
19140: POP
// ComExitVehicle ( ai_building_constructor [ base ] ) ; else
19141: LD_EXP 46
19145: PUSH
19146: LD_VAR 0 9
19150: ARRAY
19151: PPUSH
19152: CALL_OW 121
19156: GO 21893
19158: POP
// case GetBType ( HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ) of - 1 :
19159: LD_EXP 47
19163: PUSH
19164: LD_VAR 0 9
19168: ARRAY
19169: PUSH
19170: LD_INT 1
19172: ARRAY
19173: PPUSH
19174: LD_EXP 47
19178: PUSH
19179: LD_VAR 0 9
19183: ARRAY
19184: PUSH
19185: LD_INT 2
19187: ARRAY
19188: PPUSH
19189: CALL_OW 428
19193: PPUSH
19194: CALL_OW 266
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: DOUBLE
19203: EQUAL
19204: IFTRUE 19208
19206: GO 21398
19208: POP
// begin case ai_upcoming_building_data [ base ] [ 4 ] of b_warehouse :
19209: LD_EXP 47
19213: PUSH
19214: LD_VAR 0 9
19218: ARRAY
19219: PUSH
19220: LD_INT 4
19222: ARRAY
19223: PUSH
19224: LD_INT 1
19226: DOUBLE
19227: EQUAL
19228: IFTRUE 19232
19230: GO 19243
19232: POP
// i = b_depot ; b_factory :
19233: LD_ADDR_VAR 0 2
19237: PUSH
19238: LD_INT 0
19240: ST_TO_ADDR
19241: GO 19327
19243: LD_INT 3
19245: DOUBLE
19246: EQUAL
19247: IFTRUE 19251
19249: GO 19262
19251: POP
// i = b_workshop ; b_lab_half , b_lab_full :
19252: LD_ADDR_VAR 0 2
19256: PUSH
19257: LD_INT 2
19259: ST_TO_ADDR
19260: GO 19327
19262: LD_INT 7
19264: DOUBLE
19265: EQUAL
19266: IFTRUE 19276
19268: LD_INT 8
19270: DOUBLE
19271: EQUAL
19272: IFTRUE 19276
19274: GO 19287
19276: POP
// i = b_lab ; b_barracks :
19277: LD_ADDR_VAR 0 2
19281: PUSH
19282: LD_INT 6
19284: ST_TO_ADDR
19285: GO 19327
19287: LD_INT 5
19289: DOUBLE
19290: EQUAL
19291: IFTRUE 19295
19293: GO 19306
19295: POP
// i = b_armoury ; else
19296: LD_ADDR_VAR 0 2
19300: PUSH
19301: LD_INT 4
19303: ST_TO_ADDR
19304: GO 19327
19306: POP
// i = ai_upcoming_building_data [ base ] [ 4 ] ; end ;
19307: LD_ADDR_VAR 0 2
19311: PUSH
19312: LD_EXP 47
19316: PUSH
19317: LD_VAR 0 9
19321: ARRAY
19322: PUSH
19323: LD_INT 4
19325: ARRAY
19326: ST_TO_ADDR
// case i of b_depot :
19327: LD_VAR 0 2
19331: PUSH
19332: LD_INT 0
19334: DOUBLE
19335: EQUAL
19336: IFTRUE 19340
19338: GO 19417
19340: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19341: LD_EXP 46
19345: PUSH
19346: LD_VAR 0 9
19350: ARRAY
19351: PPUSH
19352: CALL_OW 248
19356: PUSH
19357: LD_INT 3
19359: DOUBLE
19360: EQUAL
19361: IFTRUE 19365
19363: GO 19376
19365: POP
// b_value = 64 ; nation_american :
19366: LD_ADDR_VAR 0 13
19370: PUSH
19371: LD_INT 64
19373: ST_TO_ADDR
19374: GO 19415
19376: LD_INT 1
19378: DOUBLE
19379: EQUAL
19380: IFTRUE 19384
19382: GO 19395
19384: POP
// b_value = 1 ; nation_arabian :
19385: LD_ADDR_VAR 0 13
19389: PUSH
19390: LD_INT 1
19392: ST_TO_ADDR
19393: GO 19415
19395: LD_INT 2
19397: DOUBLE
19398: EQUAL
19399: IFTRUE 19403
19401: GO 19414
19403: POP
// b_value = 34 ; end ;
19404: LD_ADDR_VAR 0 13
19408: PUSH
19409: LD_INT 34
19411: ST_TO_ADDR
19412: GO 19415
19414: POP
// end ; b_workshop :
19415: GO 21310
19417: LD_INT 2
19419: DOUBLE
19420: EQUAL
19421: IFTRUE 19425
19423: GO 19502
19425: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19426: LD_EXP 46
19430: PUSH
19431: LD_VAR 0 9
19435: ARRAY
19436: PPUSH
19437: CALL_OW 248
19441: PUSH
19442: LD_INT 3
19444: DOUBLE
19445: EQUAL
19446: IFTRUE 19450
19448: GO 19461
19450: POP
// b_value = 68 ; nation_american :
19451: LD_ADDR_VAR 0 13
19455: PUSH
19456: LD_INT 68
19458: ST_TO_ADDR
19459: GO 19500
19461: LD_INT 1
19463: DOUBLE
19464: EQUAL
19465: IFTRUE 19469
19467: GO 19480
19469: POP
// b_value = 5 ; nation_arabian :
19470: LD_ADDR_VAR 0 13
19474: PUSH
19475: LD_INT 5
19477: ST_TO_ADDR
19478: GO 19500
19480: LD_INT 2
19482: DOUBLE
19483: EQUAL
19484: IFTRUE 19488
19486: GO 19499
19488: POP
// b_value = 38 ; end ;
19489: LD_ADDR_VAR 0 13
19493: PUSH
19494: LD_INT 38
19496: ST_TO_ADDR
19497: GO 19500
19499: POP
// end ; b_armoury :
19500: GO 21310
19502: LD_INT 4
19504: DOUBLE
19505: EQUAL
19506: IFTRUE 19510
19508: GO 19587
19510: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19511: LD_EXP 46
19515: PUSH
19516: LD_VAR 0 9
19520: ARRAY
19521: PPUSH
19522: CALL_OW 248
19526: PUSH
19527: LD_INT 3
19529: DOUBLE
19530: EQUAL
19531: IFTRUE 19535
19533: GO 19546
19535: POP
// b_value = 66 ; nation_american :
19536: LD_ADDR_VAR 0 13
19540: PUSH
19541: LD_INT 66
19543: ST_TO_ADDR
19544: GO 19585
19546: LD_INT 1
19548: DOUBLE
19549: EQUAL
19550: IFTRUE 19554
19552: GO 19565
19554: POP
// b_value = 3 ; nation_arabian :
19555: LD_ADDR_VAR 0 13
19559: PUSH
19560: LD_INT 3
19562: ST_TO_ADDR
19563: GO 19585
19565: LD_INT 2
19567: DOUBLE
19568: EQUAL
19569: IFTRUE 19573
19571: GO 19584
19573: POP
// b_value = 36 ; end ;
19574: LD_ADDR_VAR 0 13
19578: PUSH
19579: LD_INT 36
19581: ST_TO_ADDR
19582: GO 19585
19584: POP
// end ; b_lab :
19585: GO 21310
19587: LD_INT 6
19589: DOUBLE
19590: EQUAL
19591: IFTRUE 19595
19593: GO 19672
19595: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19596: LD_EXP 46
19600: PUSH
19601: LD_VAR 0 9
19605: ARRAY
19606: PPUSH
19607: CALL_OW 248
19611: PUSH
19612: LD_INT 3
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19631
19620: POP
// b_value = 77 ; nation_american :
19621: LD_ADDR_VAR 0 13
19625: PUSH
19626: LD_INT 77
19628: ST_TO_ADDR
19629: GO 19670
19631: LD_INT 1
19633: DOUBLE
19634: EQUAL
19635: IFTRUE 19639
19637: GO 19650
19639: POP
// b_value = 17 ; nation_arabian :
19640: LD_ADDR_VAR 0 13
19644: PUSH
19645: LD_INT 17
19647: ST_TO_ADDR
19648: GO 19670
19650: LD_INT 2
19652: DOUBLE
19653: EQUAL
19654: IFTRUE 19658
19656: GO 19669
19658: POP
// b_value = 48 ; end ;
19659: LD_ADDR_VAR 0 13
19663: PUSH
19664: LD_INT 48
19666: ST_TO_ADDR
19667: GO 19670
19669: POP
// end ; b_oil_power :
19670: GO 21310
19672: LD_INT 26
19674: DOUBLE
19675: EQUAL
19676: IFTRUE 19680
19678: GO 19757
19680: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19681: LD_EXP 46
19685: PUSH
19686: LD_VAR 0 9
19690: ARRAY
19691: PPUSH
19692: CALL_OW 248
19696: PUSH
19697: LD_INT 3
19699: DOUBLE
19700: EQUAL
19701: IFTRUE 19705
19703: GO 19716
19705: POP
// b_value = 85 ; nation_american :
19706: LD_ADDR_VAR 0 13
19710: PUSH
19711: LD_INT 85
19713: ST_TO_ADDR
19714: GO 19755
19716: LD_INT 1
19718: DOUBLE
19719: EQUAL
19720: IFTRUE 19724
19722: GO 19735
19724: POP
// b_value = 25 ; nation_arabian :
19725: LD_ADDR_VAR 0 13
19729: PUSH
19730: LD_INT 25
19732: ST_TO_ADDR
19733: GO 19755
19735: LD_INT 2
19737: DOUBLE
19738: EQUAL
19739: IFTRUE 19743
19741: GO 19754
19743: POP
// b_value = 56 ; end ;
19744: LD_ADDR_VAR 0 13
19748: PUSH
19749: LD_INT 56
19751: ST_TO_ADDR
19752: GO 19755
19754: POP
// end ; b_solar_power :
19755: GO 21310
19757: LD_INT 27
19759: DOUBLE
19760: EQUAL
19761: IFTRUE 19765
19763: GO 19843
19765: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19766: LD_EXP 46
19770: PUSH
19771: LD_VAR 0 9
19775: ARRAY
19776: PPUSH
19777: CALL_OW 248
19781: PUSH
19782: LD_INT 3
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19802
19790: POP
// b_value = - 7 ; nation_american :
19791: LD_ADDR_VAR 0 13
19795: PUSH
19796: LD_INT 7
19798: NEG
19799: ST_TO_ADDR
19800: GO 19841
19802: LD_INT 1
19804: DOUBLE
19805: EQUAL
19806: IFTRUE 19810
19808: GO 19821
19810: POP
// b_value = 26 ; nation_arabian :
19811: LD_ADDR_VAR 0 13
19815: PUSH
19816: LD_INT 26
19818: ST_TO_ADDR
19819: GO 19841
19821: LD_INT 2
19823: DOUBLE
19824: EQUAL
19825: IFTRUE 19829
19827: GO 19840
19829: POP
// b_value = 57 ; end ;
19830: LD_ADDR_VAR 0 13
19834: PUSH
19835: LD_INT 57
19837: ST_TO_ADDR
19838: GO 19841
19840: POP
// end ; b_siberite_power :
19841: GO 21310
19843: LD_INT 28
19845: DOUBLE
19846: EQUAL
19847: IFTRUE 19851
19849: GO 19928
19851: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19852: LD_EXP 46
19856: PUSH
19857: LD_VAR 0 9
19861: ARRAY
19862: PPUSH
19863: CALL_OW 248
19867: PUSH
19868: LD_INT 3
19870: DOUBLE
19871: EQUAL
19872: IFTRUE 19876
19874: GO 19887
19876: POP
// b_value = 86 ; nation_american :
19877: LD_ADDR_VAR 0 13
19881: PUSH
19882: LD_INT 86
19884: ST_TO_ADDR
19885: GO 19926
19887: LD_INT 1
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19895
19893: GO 19906
19895: POP
// b_value = 27 ; nation_arabian :
19896: LD_ADDR_VAR 0 13
19900: PUSH
19901: LD_INT 27
19903: ST_TO_ADDR
19904: GO 19926
19906: LD_INT 2
19908: DOUBLE
19909: EQUAL
19910: IFTRUE 19914
19912: GO 19925
19914: POP
// b_value = 58 ; end ;
19915: LD_ADDR_VAR 0 13
19919: PUSH
19920: LD_INT 58
19922: ST_TO_ADDR
19923: GO 19926
19925: POP
// end ; b_oil_mine :
19926: GO 21310
19928: LD_INT 29
19930: DOUBLE
19931: EQUAL
19932: IFTRUE 19936
19934: GO 20013
19936: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19937: LD_EXP 46
19941: PUSH
19942: LD_VAR 0 9
19946: ARRAY
19947: PPUSH
19948: CALL_OW 248
19952: PUSH
19953: LD_INT 3
19955: DOUBLE
19956: EQUAL
19957: IFTRUE 19961
19959: GO 19972
19961: POP
// b_value = 87 ; nation_american :
19962: LD_ADDR_VAR 0 13
19966: PUSH
19967: LD_INT 87
19969: ST_TO_ADDR
19970: GO 20011
19972: LD_INT 1
19974: DOUBLE
19975: EQUAL
19976: IFTRUE 19980
19978: GO 19991
19980: POP
// b_value = 28 ; nation_arabian :
19981: LD_ADDR_VAR 0 13
19985: PUSH
19986: LD_INT 28
19988: ST_TO_ADDR
19989: GO 20011
19991: LD_INT 2
19993: DOUBLE
19994: EQUAL
19995: IFTRUE 19999
19997: GO 20010
19999: POP
// b_value = 59 ; end ;
20000: LD_ADDR_VAR 0 13
20004: PUSH
20005: LD_INT 59
20007: ST_TO_ADDR
20008: GO 20011
20010: POP
// end ; b_siberite_mine :
20011: GO 21310
20013: LD_INT 30
20015: DOUBLE
20016: EQUAL
20017: IFTRUE 20021
20019: GO 20098
20021: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20022: LD_EXP 46
20026: PUSH
20027: LD_VAR 0 9
20031: ARRAY
20032: PPUSH
20033: CALL_OW 248
20037: PUSH
20038: LD_INT 3
20040: DOUBLE
20041: EQUAL
20042: IFTRUE 20046
20044: GO 20057
20046: POP
// b_value = 88 ; nation_american :
20047: LD_ADDR_VAR 0 13
20051: PUSH
20052: LD_INT 88
20054: ST_TO_ADDR
20055: GO 20096
20057: LD_INT 1
20059: DOUBLE
20060: EQUAL
20061: IFTRUE 20065
20063: GO 20076
20065: POP
// b_value = 29 ; nation_arabian :
20066: LD_ADDR_VAR 0 13
20070: PUSH
20071: LD_INT 29
20073: ST_TO_ADDR
20074: GO 20096
20076: LD_INT 2
20078: DOUBLE
20079: EQUAL
20080: IFTRUE 20084
20082: GO 20095
20084: POP
// b_value = 60 ; end ;
20085: LD_ADDR_VAR 0 13
20089: PUSH
20090: LD_INT 60
20092: ST_TO_ADDR
20093: GO 20096
20095: POP
// end ; b_breastwork :
20096: GO 21310
20098: LD_INT 31
20100: DOUBLE
20101: EQUAL
20102: IFTRUE 20106
20104: GO 20183
20106: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20107: LD_EXP 46
20111: PUSH
20112: LD_VAR 0 9
20116: ARRAY
20117: PPUSH
20118: CALL_OW 248
20122: PUSH
20123: LD_INT 3
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20142
20131: POP
// b_value = 89 ; nation_american :
20132: LD_ADDR_VAR 0 13
20136: PUSH
20137: LD_INT 89
20139: ST_TO_ADDR
20140: GO 20181
20142: LD_INT 1
20144: DOUBLE
20145: EQUAL
20146: IFTRUE 20150
20148: GO 20161
20150: POP
// b_value = 30 ; nation_arabian :
20151: LD_ADDR_VAR 0 13
20155: PUSH
20156: LD_INT 30
20158: ST_TO_ADDR
20159: GO 20181
20161: LD_INT 2
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20180
20169: POP
// b_value = 61 ; end ;
20170: LD_ADDR_VAR 0 13
20174: PUSH
20175: LD_INT 61
20177: ST_TO_ADDR
20178: GO 20181
20180: POP
// end ; b_bunker :
20181: GO 21310
20183: LD_INT 32
20185: DOUBLE
20186: EQUAL
20187: IFTRUE 20191
20189: GO 20268
20191: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20192: LD_EXP 46
20196: PUSH
20197: LD_VAR 0 9
20201: ARRAY
20202: PPUSH
20203: CALL_OW 248
20207: PUSH
20208: LD_INT 3
20210: DOUBLE
20211: EQUAL
20212: IFTRUE 20216
20214: GO 20227
20216: POP
// b_value = 90 ; nation_american :
20217: LD_ADDR_VAR 0 13
20221: PUSH
20222: LD_INT 90
20224: ST_TO_ADDR
20225: GO 20266
20227: LD_INT 1
20229: DOUBLE
20230: EQUAL
20231: IFTRUE 20235
20233: GO 20246
20235: POP
// b_value = 31 ; nation_arabian :
20236: LD_ADDR_VAR 0 13
20240: PUSH
20241: LD_INT 31
20243: ST_TO_ADDR
20244: GO 20266
20246: LD_INT 2
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20265
20254: POP
// b_value = 62 ; end ;
20255: LD_ADDR_VAR 0 13
20259: PUSH
20260: LD_INT 62
20262: ST_TO_ADDR
20263: GO 20266
20265: POP
// end ; b_turret :
20266: GO 21310
20268: LD_INT 33
20270: DOUBLE
20271: EQUAL
20272: IFTRUE 20276
20274: GO 20354
20276: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20277: LD_EXP 46
20281: PUSH
20282: LD_VAR 0 9
20286: ARRAY
20287: PPUSH
20288: CALL_OW 248
20292: PUSH
20293: LD_INT 3
20295: DOUBLE
20296: EQUAL
20297: IFTRUE 20301
20299: GO 20312
20301: POP
// b_value = 91 ; nation_american :
20302: LD_ADDR_VAR 0 13
20306: PUSH
20307: LD_INT 91
20309: ST_TO_ADDR
20310: GO 20352
20312: LD_INT 1
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20331
20320: POP
// b_value = 32 ; nation_arabian :
20321: LD_ADDR_VAR 0 13
20325: PUSH
20326: LD_INT 32
20328: ST_TO_ADDR
20329: GO 20352
20331: LD_INT 2
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20351
20339: POP
// b_value = - 7 ; end ;
20340: LD_ADDR_VAR 0 13
20344: PUSH
20345: LD_INT 7
20347: NEG
20348: ST_TO_ADDR
20349: GO 20352
20351: POP
// end ; b_teleport :
20352: GO 21310
20354: LD_INT 34
20356: DOUBLE
20357: EQUAL
20358: IFTRUE 20362
20360: GO 20441
20362: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20363: LD_EXP 46
20367: PUSH
20368: LD_VAR 0 9
20372: ARRAY
20373: PPUSH
20374: CALL_OW 248
20378: PUSH
20379: LD_INT 3
20381: DOUBLE
20382: EQUAL
20383: IFTRUE 20387
20385: GO 20398
20387: POP
// b_value = 92 ; nation_american :
20388: LD_ADDR_VAR 0 13
20392: PUSH
20393: LD_INT 92
20395: ST_TO_ADDR
20396: GO 20439
20398: LD_INT 1
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20418
20406: POP
// b_value = - 7 ; nation_arabian :
20407: LD_ADDR_VAR 0 13
20411: PUSH
20412: LD_INT 7
20414: NEG
20415: ST_TO_ADDR
20416: GO 20439
20418: LD_INT 2
20420: DOUBLE
20421: EQUAL
20422: IFTRUE 20426
20424: GO 20438
20426: POP
// b_value = - 7 ; end ;
20427: LD_ADDR_VAR 0 13
20431: PUSH
20432: LD_INT 7
20434: NEG
20435: ST_TO_ADDR
20436: GO 20439
20438: POP
// end ; b_control_tower :
20439: GO 21310
20441: LD_INT 36
20443: DOUBLE
20444: EQUAL
20445: IFTRUE 20449
20447: GO 20528
20449: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20450: LD_EXP 46
20454: PUSH
20455: LD_VAR 0 9
20459: ARRAY
20460: PPUSH
20461: CALL_OW 248
20465: PUSH
20466: LD_INT 3
20468: DOUBLE
20469: EQUAL
20470: IFTRUE 20474
20472: GO 20486
20474: POP
// b_value = - 7 ; nation_american :
20475: LD_ADDR_VAR 0 13
20479: PUSH
20480: LD_INT 7
20482: NEG
20483: ST_TO_ADDR
20484: GO 20526
20486: LD_INT 1
20488: DOUBLE
20489: EQUAL
20490: IFTRUE 20494
20492: GO 20505
20494: POP
// b_value = 94 ; nation_arabian :
20495: LD_ADDR_VAR 0 13
20499: PUSH
20500: LD_INT 94
20502: ST_TO_ADDR
20503: GO 20526
20505: LD_INT 2
20507: DOUBLE
20508: EQUAL
20509: IFTRUE 20513
20511: GO 20525
20513: POP
// b_value = - 7 ; end ;
20514: LD_ADDR_VAR 0 13
20518: PUSH
20519: LD_INT 7
20521: NEG
20522: ST_TO_ADDR
20523: GO 20526
20525: POP
// end ; b_ext_track :
20526: GO 21310
20528: LD_INT 16
20530: DOUBLE
20531: EQUAL
20532: IFTRUE 20536
20534: GO 20613
20536: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20537: LD_EXP 46
20541: PUSH
20542: LD_VAR 0 9
20546: ARRAY
20547: PPUSH
20548: CALL_OW 248
20552: PUSH
20553: LD_INT 3
20555: DOUBLE
20556: EQUAL
20557: IFTRUE 20561
20559: GO 20572
20561: POP
// b_value = 70 ; nation_american :
20562: LD_ADDR_VAR 0 13
20566: PUSH
20567: LD_INT 70
20569: ST_TO_ADDR
20570: GO 20611
20572: LD_INT 1
20574: DOUBLE
20575: EQUAL
20576: IFTRUE 20580
20578: GO 20591
20580: POP
// b_value = 7 ; nation_arabian :
20581: LD_ADDR_VAR 0 13
20585: PUSH
20586: LD_INT 7
20588: ST_TO_ADDR
20589: GO 20611
20591: LD_INT 2
20593: DOUBLE
20594: EQUAL
20595: IFTRUE 20599
20597: GO 20610
20599: POP
// b_value = 40 ; end ;
20600: LD_ADDR_VAR 0 13
20604: PUSH
20605: LD_INT 40
20607: ST_TO_ADDR
20608: GO 20611
20610: POP
// end ; b_ext_gun :
20611: GO 21310
20613: LD_INT 17
20615: DOUBLE
20616: EQUAL
20617: IFTRUE 20621
20619: GO 20698
20621: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20622: LD_EXP 46
20626: PUSH
20627: LD_VAR 0 9
20631: ARRAY
20632: PPUSH
20633: CALL_OW 248
20637: PUSH
20638: LD_INT 3
20640: DOUBLE
20641: EQUAL
20642: IFTRUE 20646
20644: GO 20657
20646: POP
// b_value = 71 ; nation_american :
20647: LD_ADDR_VAR 0 13
20651: PUSH
20652: LD_INT 71
20654: ST_TO_ADDR
20655: GO 20696
20657: LD_INT 1
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20676
20665: POP
// b_value = 8 ; nation_arabian :
20666: LD_ADDR_VAR 0 13
20670: PUSH
20671: LD_INT 8
20673: ST_TO_ADDR
20674: GO 20696
20676: LD_INT 2
20678: DOUBLE
20679: EQUAL
20680: IFTRUE 20684
20682: GO 20695
20684: POP
// b_value = 41 ; end ;
20685: LD_ADDR_VAR 0 13
20689: PUSH
20690: LD_INT 41
20692: ST_TO_ADDR
20693: GO 20696
20695: POP
// end ; b_ext_rocket :
20696: GO 21310
20698: LD_INT 18
20700: DOUBLE
20701: EQUAL
20702: IFTRUE 20706
20704: GO 20783
20706: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20707: LD_EXP 46
20711: PUSH
20712: LD_VAR 0 9
20716: ARRAY
20717: PPUSH
20718: CALL_OW 248
20722: PUSH
20723: LD_INT 3
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20742
20731: POP
// b_value = 72 ; nation_american :
20732: LD_ADDR_VAR 0 13
20736: PUSH
20737: LD_INT 72
20739: ST_TO_ADDR
20740: GO 20781
20742: LD_INT 1
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20761
20750: POP
// b_value = 9 ; nation_arabian :
20751: LD_ADDR_VAR 0 13
20755: PUSH
20756: LD_INT 9
20758: ST_TO_ADDR
20759: GO 20781
20761: LD_INT 2
20763: DOUBLE
20764: EQUAL
20765: IFTRUE 20769
20767: GO 20780
20769: POP
// b_value = 42 ; end ;
20770: LD_ADDR_VAR 0 13
20774: PUSH
20775: LD_INT 42
20777: ST_TO_ADDR
20778: GO 20781
20780: POP
// end ; b_ext_noncombat :
20781: GO 21310
20783: LD_INT 19
20785: DOUBLE
20786: EQUAL
20787: IFTRUE 20791
20789: GO 20869
20791: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20792: LD_EXP 46
20796: PUSH
20797: LD_VAR 0 9
20801: ARRAY
20802: PPUSH
20803: CALL_OW 248
20807: PUSH
20808: LD_INT 3
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20827
20816: POP
// b_value = 73 ; nation_american :
20817: LD_ADDR_VAR 0 13
20821: PUSH
20822: LD_INT 73
20824: ST_TO_ADDR
20825: GO 20867
20827: LD_INT 1
20829: DOUBLE
20830: EQUAL
20831: IFTRUE 20835
20833: GO 20846
20835: POP
// b_value = 10 ; nation_arabian :
20836: LD_ADDR_VAR 0 13
20840: PUSH
20841: LD_INT 10
20843: ST_TO_ADDR
20844: GO 20867
20846: LD_INT 2
20848: DOUBLE
20849: EQUAL
20850: IFTRUE 20854
20852: GO 20866
20854: POP
// b_value = - 7 ; end ;
20855: LD_ADDR_VAR 0 13
20859: PUSH
20860: LD_INT 7
20862: NEG
20863: ST_TO_ADDR
20864: GO 20867
20866: POP
// end ; b_ext_radar :
20867: GO 21310
20869: LD_INT 20
20871: DOUBLE
20872: EQUAL
20873: IFTRUE 20877
20875: GO 20955
20877: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20878: LD_EXP 46
20882: PUSH
20883: LD_VAR 0 9
20887: ARRAY
20888: PPUSH
20889: CALL_OW 248
20893: PUSH
20894: LD_INT 3
20896: DOUBLE
20897: EQUAL
20898: IFTRUE 20902
20900: GO 20914
20902: POP
// b_value = - 7 ; nation_american :
20903: LD_ADDR_VAR 0 13
20907: PUSH
20908: LD_INT 7
20910: NEG
20911: ST_TO_ADDR
20912: GO 20953
20914: LD_INT 1
20916: DOUBLE
20917: EQUAL
20918: IFTRUE 20922
20920: GO 20933
20922: POP
// b_value = 11 ; nation_arabian :
20923: LD_ADDR_VAR 0 13
20927: PUSH
20928: LD_INT 11
20930: ST_TO_ADDR
20931: GO 20953
20933: LD_INT 2
20935: DOUBLE
20936: EQUAL
20937: IFTRUE 20941
20939: GO 20952
20941: POP
// b_value = 44 ; end ;
20942: LD_ADDR_VAR 0 13
20946: PUSH
20947: LD_INT 44
20949: ST_TO_ADDR
20950: GO 20953
20952: POP
// end ; b_ext_siberium :
20953: GO 21310
20955: LD_INT 21
20957: DOUBLE
20958: EQUAL
20959: IFTRUE 20963
20961: GO 21040
20963: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20964: LD_EXP 46
20968: PUSH
20969: LD_VAR 0 9
20973: ARRAY
20974: PPUSH
20975: CALL_OW 248
20979: PUSH
20980: LD_INT 3
20982: DOUBLE
20983: EQUAL
20984: IFTRUE 20988
20986: GO 20999
20988: POP
// b_value = 75 ; nation_american :
20989: LD_ADDR_VAR 0 13
20993: PUSH
20994: LD_INT 75
20996: ST_TO_ADDR
20997: GO 21038
20999: LD_INT 1
21001: DOUBLE
21002: EQUAL
21003: IFTRUE 21007
21005: GO 21018
21007: POP
// b_value = 12 ; nation_arabian :
21008: LD_ADDR_VAR 0 13
21012: PUSH
21013: LD_INT 12
21015: ST_TO_ADDR
21016: GO 21038
21018: LD_INT 2
21020: DOUBLE
21021: EQUAL
21022: IFTRUE 21026
21024: GO 21037
21026: POP
// b_value = 45 ; end ;
21027: LD_ADDR_VAR 0 13
21031: PUSH
21032: LD_INT 45
21034: ST_TO_ADDR
21035: GO 21038
21037: POP
// end ; b_ext_stitch :
21038: GO 21310
21040: LD_INT 23
21042: DOUBLE
21043: EQUAL
21044: IFTRUE 21048
21046: GO 21127
21048: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
21049: LD_EXP 46
21053: PUSH
21054: LD_VAR 0 9
21058: ARRAY
21059: PPUSH
21060: CALL_OW 248
21064: PUSH
21065: LD_INT 3
21067: DOUBLE
21068: EQUAL
21069: IFTRUE 21073
21071: GO 21085
21073: POP
// b_value = - 7 ; nation_american :
21074: LD_ADDR_VAR 0 13
21078: PUSH
21079: LD_INT 7
21081: NEG
21082: ST_TO_ADDR
21083: GO 21125
21085: LD_INT 1
21087: DOUBLE
21088: EQUAL
21089: IFTRUE 21093
21091: GO 21105
21093: POP
// b_value = - 7 ; nation_arabian :
21094: LD_ADDR_VAR 0 13
21098: PUSH
21099: LD_INT 7
21101: NEG
21102: ST_TO_ADDR
21103: GO 21125
21105: LD_INT 2
21107: DOUBLE
21108: EQUAL
21109: IFTRUE 21113
21111: GO 21124
21113: POP
// b_value = 43 ; end ;
21114: LD_ADDR_VAR 0 13
21118: PUSH
21119: LD_INT 43
21121: ST_TO_ADDR
21122: GO 21125
21124: POP
// end ; b_ext_computer :
21125: GO 21310
21127: LD_INT 24
21129: DOUBLE
21130: EQUAL
21131: IFTRUE 21135
21133: GO 21213
21135: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
21136: LD_EXP 46
21140: PUSH
21141: LD_VAR 0 9
21145: ARRAY
21146: PPUSH
21147: CALL_OW 248
21151: PUSH
21152: LD_INT 3
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21171
21160: POP
// b_value = 76 ; nation_american :
21161: LD_ADDR_VAR 0 13
21165: PUSH
21166: LD_INT 76
21168: ST_TO_ADDR
21169: GO 21211
21171: LD_INT 1
21173: DOUBLE
21174: EQUAL
21175: IFTRUE 21179
21177: GO 21190
21179: POP
// b_value = 15 ; nation_arabian :
21180: LD_ADDR_VAR 0 13
21184: PUSH
21185: LD_INT 15
21187: ST_TO_ADDR
21188: GO 21211
21190: LD_INT 2
21192: DOUBLE
21193: EQUAL
21194: IFTRUE 21198
21196: GO 21210
21198: POP
// b_value = - 7 ; end ;
21199: LD_ADDR_VAR 0 13
21203: PUSH
21204: LD_INT 7
21206: NEG
21207: ST_TO_ADDR
21208: GO 21211
21210: POP
// end ; b_ext_laser :
21211: GO 21310
21213: LD_INT 25
21215: DOUBLE
21216: EQUAL
21217: IFTRUE 21221
21219: GO 21300
21221: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
21222: LD_EXP 46
21226: PUSH
21227: LD_VAR 0 9
21231: ARRAY
21232: PPUSH
21233: CALL_OW 248
21237: PUSH
21238: LD_INT 3
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21258
21246: POP
// b_value = - 7 ; nation_american :
21247: LD_ADDR_VAR 0 13
21251: PUSH
21252: LD_INT 7
21254: NEG
21255: ST_TO_ADDR
21256: GO 21298
21258: LD_INT 1
21260: DOUBLE
21261: EQUAL
21262: IFTRUE 21266
21264: GO 21277
21266: POP
// b_value = 16 ; nation_arabian :
21267: LD_ADDR_VAR 0 13
21271: PUSH
21272: LD_INT 16
21274: ST_TO_ADDR
21275: GO 21298
21277: LD_INT 2
21279: DOUBLE
21280: EQUAL
21281: IFTRUE 21285
21283: GO 21297
21285: POP
// b_value = - 7 ; end ;
21286: LD_ADDR_VAR 0 13
21290: PUSH
21291: LD_INT 7
21293: NEG
21294: ST_TO_ADDR
21295: GO 21298
21297: POP
// end ; else
21298: GO 21310
21300: POP
// b_value = - 42 ; end ;
21301: LD_ADDR_VAR 0 13
21305: PUSH
21306: LD_INT 42
21308: NEG
21309: ST_TO_ADDR
// SetTaskList ( ai_building_constructor [ base ] , [ [ B , ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] , 0 , b_value , ai_upcoming_building_data [ base ] [ 3 ] , 0 ] ] ) ;
21310: LD_EXP 46
21314: PUSH
21315: LD_VAR 0 9
21319: ARRAY
21320: PPUSH
21321: LD_STRING B
21323: PUSH
21324: LD_EXP 47
21328: PUSH
21329: LD_VAR 0 9
21333: ARRAY
21334: PUSH
21335: LD_INT 1
21337: ARRAY
21338: PUSH
21339: LD_EXP 47
21343: PUSH
21344: LD_VAR 0 9
21348: ARRAY
21349: PUSH
21350: LD_INT 2
21352: ARRAY
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: LD_VAR 0 13
21361: PUSH
21362: LD_EXP 47
21366: PUSH
21367: LD_VAR 0 9
21371: ARRAY
21372: PUSH
21373: LD_INT 3
21375: ARRAY
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: PPUSH
21392: CALL_OW 446
// end ; b_depot :
21396: GO 21893
21398: LD_INT 0
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21455
21406: POP
// begin ComUpgrade ( ai_depot [ base ] ) ;
21407: LD_EXP 35
21411: PUSH
21412: LD_VAR 0 9
21416: ARRAY
21417: PPUSH
21418: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , ai_depot [ base ] ) ;
21422: LD_ADDR_EXP 43
21426: PUSH
21427: LD_EXP 43
21431: PPUSH
21432: LD_VAR 0 9
21436: PPUSH
21437: LD_EXP 35
21441: PUSH
21442: LD_VAR 0 9
21446: ARRAY
21447: PPUSH
21448: CALL_OW 1
21452: ST_TO_ADDR
// end ; b_workshop :
21453: GO 21893
21455: LD_INT 2
21457: DOUBLE
21458: EQUAL
21459: IFTRUE 21463
21461: GO 21540
21463: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21464: LD_ADDR_VAR 0 6
21468: PUSH
21469: LD_EXP 47
21473: PUSH
21474: LD_VAR 0 9
21478: ARRAY
21479: PUSH
21480: LD_INT 1
21482: ARRAY
21483: PPUSH
21484: LD_EXP 47
21488: PUSH
21489: LD_VAR 0 9
21493: ARRAY
21494: PUSH
21495: LD_INT 2
21497: ARRAY
21498: PPUSH
21499: CALL_OW 428
21503: ST_TO_ADDR
// ComUpgrade ( temp_unit ) ;
21504: LD_VAR 0 6
21508: PPUSH
21509: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21513: LD_ADDR_EXP 43
21517: PUSH
21518: LD_EXP 43
21522: PPUSH
21523: LD_VAR 0 9
21527: PPUSH
21528: LD_VAR 0 6
21532: PPUSH
21533: CALL_OW 1
21537: ST_TO_ADDR
// end ; b_lab , b_lab_half :
21538: GO 21893
21540: LD_INT 6
21542: DOUBLE
21543: EQUAL
21544: IFTRUE 21554
21546: LD_INT 7
21548: DOUBLE
21549: EQUAL
21550: IFTRUE 21554
21552: GO 21807
21554: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21555: LD_ADDR_VAR 0 6
21559: PUSH
21560: LD_EXP 47
21564: PUSH
21565: LD_VAR 0 9
21569: ARRAY
21570: PUSH
21571: LD_INT 1
21573: ARRAY
21574: PPUSH
21575: LD_EXP 47
21579: PUSH
21580: LD_VAR 0 9
21584: ARRAY
21585: PUSH
21586: LD_INT 2
21588: ARRAY
21589: PPUSH
21590: CALL_OW 428
21594: ST_TO_ADDR
// if ai_upcoming_building_data [ base ] [ 5 ] <> b_lab_basic and not ai_upcoming_building_data [ base ] [ 5 ] in [ GetLabKind ( temp_unit , 1 ) , GetLabKind ( temp_unit , 2 ) ] then
21595: LD_EXP 47
21599: PUSH
21600: LD_VAR 0 9
21604: ARRAY
21605: PUSH
21606: LD_INT 5
21608: ARRAY
21609: PUSH
21610: LD_INT 9
21612: NONEQUAL
21613: PUSH
21614: LD_EXP 47
21618: PUSH
21619: LD_VAR 0 9
21623: ARRAY
21624: PUSH
21625: LD_INT 5
21627: ARRAY
21628: PUSH
21629: LD_VAR 0 6
21633: PPUSH
21634: LD_INT 1
21636: PPUSH
21637: CALL_OW 268
21641: PUSH
21642: LD_VAR 0 6
21646: PPUSH
21647: LD_INT 2
21649: PPUSH
21650: CALL_OW 268
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: IN
21659: NOT
21660: AND
21661: IFFALSE 21689
// ComUpgradeLab ( temp_unit , ai_upcoming_building_data [ base ] [ 5 ] ) else
21663: LD_VAR 0 6
21667: PPUSH
21668: LD_EXP 47
21672: PUSH
21673: LD_VAR 0 9
21677: ARRAY
21678: PUSH
21679: LD_INT 5
21681: ARRAY
21682: PPUSH
21683: CALL_OW 147
21687: GO 21780
// if ai_upcoming_building_data [ base ] [ 6 ] <> b_lab_basic then
21689: LD_EXP 47
21693: PUSH
21694: LD_VAR 0 9
21698: ARRAY
21699: PUSH
21700: LD_INT 6
21702: ARRAY
21703: PUSH
21704: LD_INT 9
21706: NONEQUAL
21707: IFFALSE 21735
// ComUpgradeLab ( temp_unit , ai_upcoming_building_data [ base ] [ 6 ] ) else
21709: LD_VAR 0 6
21713: PPUSH
21714: LD_EXP 47
21718: PUSH
21719: LD_VAR 0 9
21723: ARRAY
21724: PUSH
21725: LD_INT 6
21727: ARRAY
21728: PPUSH
21729: CALL_OW 147
21733: GO 21780
// begin ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
21735: LD_ADDR_EXP 46
21739: PUSH
21740: LD_EXP 46
21744: PPUSH
21745: LD_VAR 0 9
21749: PPUSH
21750: LD_INT 0
21752: PPUSH
21753: CALL_OW 1
21757: ST_TO_ADDR
// ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , [ ] ) ;
21758: LD_ADDR_EXP 47
21762: PUSH
21763: LD_EXP 47
21767: PPUSH
21768: LD_VAR 0 9
21772: PPUSH
21773: EMPTY
21774: PPUSH
21775: CALL_OW 1
21779: ST_TO_ADDR
// end ; ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21780: LD_ADDR_EXP 43
21784: PUSH
21785: LD_EXP 43
21789: PPUSH
21790: LD_VAR 0 9
21794: PPUSH
21795: LD_VAR 0 6
21799: PPUSH
21800: CALL_OW 1
21804: ST_TO_ADDR
// end ; b_armoury :
21805: GO 21893
21807: LD_INT 4
21809: DOUBLE
21810: EQUAL
21811: IFTRUE 21815
21813: GO 21892
21815: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21816: LD_ADDR_VAR 0 6
21820: PUSH
21821: LD_EXP 47
21825: PUSH
21826: LD_VAR 0 9
21830: ARRAY
21831: PUSH
21832: LD_INT 1
21834: ARRAY
21835: PPUSH
21836: LD_EXP 47
21840: PUSH
21841: LD_VAR 0 9
21845: ARRAY
21846: PUSH
21847: LD_INT 2
21849: ARRAY
21850: PPUSH
21851: CALL_OW 428
21855: ST_TO_ADDR
// ComUpgrade ( temp_unit ) ;
21856: LD_VAR 0 6
21860: PPUSH
21861: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21865: LD_ADDR_EXP 43
21869: PUSH
21870: LD_EXP 43
21874: PPUSH
21875: LD_VAR 0 9
21879: PPUSH
21880: LD_VAR 0 6
21884: PPUSH
21885: CALL_OW 1
21889: ST_TO_ADDR
// end ; end ; end ;
21890: GO 21893
21892: POP
// end ; end ; end ; if ( engineers_list ^ apemen_engineers_list ) > 0 and ai_depot [ base ] > 0 then
21893: LD_VAR 0 3
21897: PUSH
21898: LD_VAR 0 10
21902: ADD
21903: PUSH
21904: LD_INT 0
21906: GREATER
21907: PUSH
21908: LD_EXP 35
21912: PUSH
21913: LD_VAR 0 9
21917: ARRAY
21918: PUSH
21919: LD_INT 0
21921: GREATER
21922: AND
21923: IFFALSE 22007
// begin temp_list = GetListOfCratesInArea ( GetBaseArea ( base ) ) ;
21925: LD_ADDR_VAR 0 4
21929: PUSH
21930: LD_VAR 0 9
21934: PPUSH
21935: CALL 12639 0 1
21939: PPUSH
21940: CALL_OW 435
21944: ST_TO_ADDR
// if temp_list > 0 then
21945: LD_VAR 0 4
21949: PUSH
21950: LD_INT 0
21952: GREATER
21953: IFFALSE 22007
// begin ComCollect ( GetHumansOutOfUnits ( engineers_list ^ apemen_engineers_list ) , temp_list [ 1 ] , temp_list [ 2 ] ) ;
21955: LD_VAR 0 3
21959: PUSH
21960: LD_VAR 0 10
21964: ADD
21965: PPUSH
21966: CALL 23525 0 1
21970: PPUSH
21971: LD_VAR 0 4
21975: PUSH
21976: LD_INT 1
21978: ARRAY
21979: PPUSH
21980: LD_VAR 0 4
21984: PUSH
21985: LD_INT 2
21987: ARRAY
21988: PPUSH
21989: CALL_OW 117
// engineers_list = [ ] ;
21993: LD_ADDR_VAR 0 3
21997: PUSH
21998: EMPTY
21999: ST_TO_ADDR
// apemen_engineers_list = [ ] ;
22000: LD_ADDR_VAR 0 10
22004: PUSH
22005: EMPTY
22006: ST_TO_ADDR
// end ; end ; end ; DistributeHumansToBuildings ( base , engineers_list ^ apemen_engineers_list , UnitFilter ( ai_depot [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_engineer , 6 , false , false ) ;
22007: LD_VAR 0 9
22011: PPUSH
22012: LD_VAR 0 3
22016: PUSH
22017: LD_VAR 0 10
22021: ADD
22022: PPUSH
22023: LD_EXP 35
22027: PUSH
22028: LD_VAR 0 9
22032: ARRAY
22033: PPUSH
22034: LD_INT 50
22036: PUSH
22037: EMPTY
22038: LIST
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: LD_INT 57
22045: PUSH
22046: EMPTY
22047: LIST
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PPUSH
22057: CALL_OW 72
22061: PPUSH
22062: LD_INT 2
22064: PPUSH
22065: LD_INT 6
22067: PPUSH
22068: LD_INT 0
22070: PPUSH
22071: LD_INT 0
22073: PPUSH
22074: CALL 15596 0 7
// if crane_usable and ai_crane [ base ] <> ai_building_constructor [ base ] then
22078: LD_VAR 0 12
22082: PUSH
22083: LD_EXP 71
22087: PUSH
22088: LD_VAR 0 9
22092: ARRAY
22093: PUSH
22094: LD_EXP 46
22098: PUSH
22099: LD_VAR 0 9
22103: ARRAY
22104: NONEQUAL
22105: AND
22106: IFFALSE 22181
// if not IsInArea ( ai_crane [ base ] , GetBaseArea ( base ) ) then
22108: LD_EXP 71
22112: PUSH
22113: LD_VAR 0 9
22117: ARRAY
22118: PPUSH
22119: LD_VAR 0 9
22123: PPUSH
22124: CALL 12639 0 1
22128: PPUSH
22129: CALL_OW 308
22133: NOT
22134: IFFALSE 22181
// ComMoveXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
22136: LD_EXP 71
22140: PUSH
22141: LD_VAR 0 9
22145: ARRAY
22146: PPUSH
22147: LD_EXP 42
22151: PUSH
22152: LD_VAR 0 9
22156: ARRAY
22157: PUSH
22158: LD_INT 1
22160: ARRAY
22161: PPUSH
22162: LD_EXP 42
22166: PUSH
22167: LD_VAR 0 9
22171: ARRAY
22172: PUSH
22173: LD_INT 2
22175: ARRAY
22176: PPUSH
22177: CALL_OW 111
// end ;
22181: GO 16948
22183: POP
22184: POP
// until false ;
22185: LD_INT 0
22187: IFFALSE 16931
// end ;
22189: PPOPN 15
22191: END
// on BuildingStarted ( building , builder ) do var side , temp_list , base , i ;
22192: LD_INT 0
22194: PPUSH
22195: PPUSH
22196: PPUSH
22197: PPUSH
// begin side = GetSide ( building ) ;
22198: LD_ADDR_VAR 0 3
22202: PUSH
22203: LD_VAR 0 1
22207: PPUSH
22208: CALL_OW 255
22212: ST_TO_ADDR
// if side = you then
22213: LD_VAR 0 3
22217: PUSH
22218: LD_EXP 3
22222: EQUAL
22223: IFFALSE 22227
// exit ;
22225: GO 22302
// base = FindBase ( building ) ;
22227: LD_ADDR_VAR 0 5
22231: PUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL 12858 0 1
22241: ST_TO_ADDR
// if base = 0 then
22242: LD_VAR 0 5
22246: PUSH
22247: LD_INT 0
22249: EQUAL
22250: IFFALSE 22254
// exit ;
22252: GO 22302
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
22254: LD_ADDR_EXP 46
22258: PUSH
22259: LD_EXP 46
22263: PPUSH
22264: LD_VAR 0 5
22268: PPUSH
22269: LD_INT 0
22271: PPUSH
22272: CALL_OW 1
22276: ST_TO_ADDR
// ai_building_under_construction = Replace ( ai_building_under_construction , base , building ) ;
22277: LD_ADDR_EXP 43
22281: PUSH
22282: LD_EXP 43
22286: PPUSH
22287: LD_VAR 0 5
22291: PPUSH
22292: LD_VAR 0 1
22296: PPUSH
22297: CALL_OW 1
22301: ST_TO_ADDR
// end ;
22302: PPOPN 6
22304: END
// on BuildingComplete ( building ) do var side , temp_list , temp_unit , base , i ;
22305: LD_INT 0
22307: PPUSH
22308: PPUSH
22309: PPUSH
22310: PPUSH
22311: PPUSH
// begin side = GetSide ( building ) ;
22312: LD_ADDR_VAR 0 2
22316: PUSH
22317: LD_VAR 0 1
22321: PPUSH
22322: CALL_OW 255
22326: ST_TO_ADDR
// if side = you then
22327: LD_VAR 0 2
22331: PUSH
22332: LD_EXP 3
22336: EQUAL
22337: IFFALSE 22341
// exit ;
22339: GO 22446
// base = FindBase ( building ) ;
22341: LD_ADDR_VAR 0 5
22345: PUSH
22346: LD_VAR 0 1
22350: PPUSH
22351: CALL 12858 0 1
22355: ST_TO_ADDR
// if base = 0 then
22356: LD_VAR 0 5
22360: PUSH
22361: LD_INT 0
22363: EQUAL
22364: IFFALSE 22368
// exit ;
22366: GO 22446
// BuildUpgradeCommon ( base , building ) ;
22368: LD_VAR 0 5
22372: PPUSH
22373: LD_VAR 0 1
22377: PPUSH
22378: CALL 22527 0 2
// temp_list = ai_all_buildings [ base ] ^ building ;
22382: LD_ADDR_VAR 0 3
22386: PUSH
22387: LD_EXP 45
22391: PUSH
22392: LD_VAR 0 5
22396: ARRAY
22397: PUSH
22398: LD_VAR 0 1
22402: ADD
22403: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
22404: LD_ADDR_EXP 45
22408: PUSH
22409: LD_EXP 45
22413: PPUSH
22414: LD_VAR 0 5
22418: PPUSH
22419: LD_VAR 0 3
22423: PPUSH
22424: CALL_OW 1
22428: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , building , true ) ;
22429: LD_VAR 0 5
22433: PPUSH
22434: LD_VAR 0 1
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: CALL 7109 0 3
// end ;
22446: PPOPN 6
22448: END
// on UpgradeComplete ( building ) do var side , temp_list , base ;
22449: LD_INT 0
22451: PPUSH
22452: PPUSH
22453: PPUSH
// begin side = GetSide ( building ) ;
22454: LD_ADDR_VAR 0 2
22458: PUSH
22459: LD_VAR 0 1
22463: PPUSH
22464: CALL_OW 255
22468: ST_TO_ADDR
// if side = you then
22469: LD_VAR 0 2
22473: PUSH
22474: LD_EXP 3
22478: EQUAL
22479: IFFALSE 22483
// exit ;
22481: GO 22524
// base = FindBase ( building ) ;
22483: LD_ADDR_VAR 0 4
22487: PUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL 12858 0 1
22497: ST_TO_ADDR
// if base = 0 then
22498: LD_VAR 0 4
22502: PUSH
22503: LD_INT 0
22505: EQUAL
22506: IFFALSE 22510
// exit ;
22508: GO 22524
// BuildUpgradeCommon ( base , building ) ;
22510: LD_VAR 0 4
22514: PPUSH
22515: LD_VAR 0 1
22519: PPUSH
22520: CALL 22527 0 2
// end ;
22524: PPOPN 4
22526: END
// function BuildUpgradeCommon ( base , building ) ; begin
22527: LD_INT 0
22529: PPUSH
// if GetBType ( building ) = ai_upcoming_building_data [ base ] [ 4 ] then
22530: LD_VAR 0 2
22534: PPUSH
22535: CALL_OW 266
22539: PUSH
22540: LD_EXP 47
22544: PUSH
22545: LD_VAR 0 1
22549: ARRAY
22550: PUSH
22551: LD_INT 4
22553: ARRAY
22554: EQUAL
22555: IFFALSE 22579
// ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , [ ] ) ;
22557: LD_ADDR_EXP 47
22561: PUSH
22562: LD_EXP 47
22566: PPUSH
22567: LD_VAR 0 1
22571: PPUSH
22572: EMPTY
22573: PPUSH
22574: CALL_OW 1
22578: ST_TO_ADDR
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
22579: LD_ADDR_EXP 43
22583: PUSH
22584: LD_EXP 43
22588: PPUSH
22589: LD_VAR 0 1
22593: PPUSH
22594: LD_INT 0
22596: PPUSH
22597: CALL_OW 1
22601: ST_TO_ADDR
// end ;
22602: LD_VAR 0 3
22606: RET
// on BuildingCaptured ( captured_building , building_former_side , capturing_unit ) do var temp_list , base ;
22607: LD_INT 0
22609: PPUSH
22610: PPUSH
// begin if captured_building in ai_depot then
22611: LD_VAR 0 1
22615: PUSH
22616: LD_EXP 35
22620: IN
22621: IFFALSE 22936
// begin case captured_building of ai_depot [ 1 ] :
22623: LD_VAR 0 1
22627: PUSH
22628: LD_EXP 35
22632: PUSH
22633: LD_INT 1
22635: ARRAY
22636: DOUBLE
22637: EQUAL
22638: IFTRUE 22642
22640: GO 22737
22642: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22643: LD_VAR 0 1
22647: PPUSH
22648: CALL_OW 274
22652: PPUSH
22653: LD_INT 1
22655: PPUSH
22656: LD_INT 200
22658: PUSH
22659: LD_INT 0
22661: PPUSH
22662: LD_INT 7
22664: PPUSH
22665: CALL_OW 12
22669: PUSH
22670: LD_INT 10
22672: MUL
22673: PLUS
22674: PPUSH
22675: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 0 ) ;
22679: LD_VAR 0 1
22683: PPUSH
22684: CALL_OW 274
22688: PPUSH
22689: LD_INT 2
22691: PPUSH
22692: LD_INT 0
22694: PPUSH
22695: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22699: LD_VAR 0 1
22703: PPUSH
22704: CALL_OW 274
22708: PPUSH
22709: LD_INT 3
22711: PPUSH
22712: LD_INT 80
22714: PUSH
22715: LD_INT 0
22717: PPUSH
22718: LD_INT 10
22720: PPUSH
22721: CALL_OW 12
22725: PUSH
22726: LD_INT 5
22728: MUL
22729: PLUS
22730: PPUSH
22731: CALL_OW 277
// end ; ai_depot [ 2 ] :
22735: GO 22936
22737: LD_EXP 35
22741: PUSH
22742: LD_INT 2
22744: ARRAY
22745: DOUBLE
22746: EQUAL
22747: IFTRUE 22751
22749: GO 22814
22751: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 100 ) ;
22752: LD_VAR 0 1
22756: PPUSH
22757: CALL_OW 274
22761: PPUSH
22762: LD_INT 1
22764: PPUSH
22765: LD_INT 100
22767: PPUSH
22768: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 55 ) ;
22772: LD_VAR 0 1
22776: PPUSH
22777: CALL_OW 274
22781: PPUSH
22782: LD_INT 2
22784: PPUSH
22785: LD_INT 55
22787: PPUSH
22788: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 20 ) ;
22792: LD_VAR 0 1
22796: PPUSH
22797: CALL_OW 274
22801: PPUSH
22802: LD_INT 3
22804: PPUSH
22805: LD_INT 20
22807: PPUSH
22808: CALL_OW 277
// end ; ai_depot [ 3 ] :
22812: GO 22936
22814: LD_EXP 35
22818: PUSH
22819: LD_INT 3
22821: ARRAY
22822: DOUBLE
22823: EQUAL
22824: IFTRUE 22828
22826: GO 22935
22828: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22829: LD_VAR 0 1
22833: PPUSH
22834: CALL_OW 274
22838: PPUSH
22839: LD_INT 1
22841: PPUSH
22842: LD_INT 200
22844: PUSH
22845: LD_INT 0
22847: PPUSH
22848: LD_INT 7
22850: PPUSH
22851: CALL_OW 12
22855: PUSH
22856: LD_INT 10
22858: MUL
22859: PLUS
22860: PPUSH
22861: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 400 + Rand ( 0 , 100 ) ) ;
22865: LD_VAR 0 1
22869: PPUSH
22870: CALL_OW 274
22874: PPUSH
22875: LD_INT 2
22877: PPUSH
22878: LD_INT 400
22880: PUSH
22881: LD_INT 0
22883: PPUSH
22884: LD_INT 100
22886: PPUSH
22887: CALL_OW 12
22891: PLUS
22892: PPUSH
22893: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22897: LD_VAR 0 1
22901: PPUSH
22902: CALL_OW 274
22906: PPUSH
22907: LD_INT 3
22909: PPUSH
22910: LD_INT 80
22912: PUSH
22913: LD_INT 0
22915: PPUSH
22916: LD_INT 10
22918: PPUSH
22919: CALL_OW 12
22923: PUSH
22924: LD_INT 5
22926: MUL
22927: PLUS
22928: PPUSH
22929: CALL_OW 277
// end ; end ;
22933: GO 22936
22935: POP
// end ; base = FindBase ( captured_building ) ;
22936: LD_ADDR_VAR 0 5
22940: PUSH
22941: LD_VAR 0 1
22945: PPUSH
22946: CALL 12858 0 1
22950: ST_TO_ADDR
// if base = 0 then
22951: LD_VAR 0 5
22955: PUSH
22956: LD_INT 0
22958: EQUAL
22959: IFFALSE 22963
// exit ;
22961: GO 23194
// if building_former_side = GetBaseSide ( base ) then
22963: LD_VAR 0 2
22967: PUSH
22968: LD_VAR 0 5
22972: PPUSH
22973: CALL 12710 0 1
22977: EQUAL
22978: IFFALSE 23061
// begin if captured_building in ai_all_buildings [ base ] then
22980: LD_VAR 0 1
22984: PUSH
22985: LD_EXP 45
22989: PUSH
22990: LD_VAR 0 5
22994: ARRAY
22995: IN
22996: IFFALSE 23059
// begin RemoveBuildingFromVariables ( base , captured_building ) ;
22998: LD_VAR 0 5
23002: PPUSH
23003: LD_VAR 0 1
23007: PPUSH
23008: CALL 11337 0 2
// temp_list = ai_captured_buildings [ base ] ^ captured_building ;
23012: LD_ADDR_VAR 0 4
23016: PUSH
23017: LD_EXP 79
23021: PUSH
23022: LD_VAR 0 5
23026: ARRAY
23027: PUSH
23028: LD_VAR 0 1
23032: ADD
23033: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
23034: LD_ADDR_EXP 79
23038: PUSH
23039: LD_EXP 79
23043: PPUSH
23044: LD_VAR 0 5
23048: PPUSH
23049: LD_VAR 0 4
23053: PPUSH
23054: CALL_OW 1
23058: ST_TO_ADDR
// end ; end else
23059: GO 23194
// begin if GetSide ( captured_building ) = GetBaseSide ( base ) then
23061: LD_VAR 0 1
23065: PPUSH
23066: CALL_OW 255
23070: PUSH
23071: LD_VAR 0 5
23075: PPUSH
23076: CALL 12710 0 1
23080: EQUAL
23081: IFFALSE 23194
// begin temp_list = ai_all_buildings [ base ] ^ captured_building ;
23083: LD_ADDR_VAR 0 4
23087: PUSH
23088: LD_EXP 45
23092: PUSH
23093: LD_VAR 0 5
23097: ARRAY
23098: PUSH
23099: LD_VAR 0 1
23103: ADD
23104: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
23105: LD_ADDR_EXP 45
23109: PUSH
23110: LD_EXP 45
23114: PPUSH
23115: LD_VAR 0 5
23119: PPUSH
23120: LD_VAR 0 4
23124: PPUSH
23125: CALL_OW 1
23129: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , captured_building , true ) ;
23130: LD_VAR 0 5
23134: PPUSH
23135: LD_VAR 0 1
23139: PPUSH
23140: LD_INT 1
23142: PPUSH
23143: CALL 7109 0 3
// temp_list = ai_captured_buildings [ base ] diff captured_building ;
23147: LD_ADDR_VAR 0 4
23151: PUSH
23152: LD_EXP 79
23156: PUSH
23157: LD_VAR 0 5
23161: ARRAY
23162: PUSH
23163: LD_VAR 0 1
23167: DIFF
23168: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
23169: LD_ADDR_EXP 79
23173: PUSH
23174: LD_EXP 79
23178: PPUSH
23179: LD_VAR 0 5
23183: PPUSH
23184: LD_VAR 0 4
23188: PPUSH
23189: CALL_OW 1
23193: ST_TO_ADDR
// end ; end ; end ;
23194: PPOPN 5
23196: END
// on UnitGoesToRed ( un ) do begin if un in ai_depot then
23197: LD_VAR 0 1
23201: PUSH
23202: LD_EXP 35
23206: IN
23207: IFFALSE 23522
// begin case un of ai_depot [ 1 ] :
23209: LD_VAR 0 1
23213: PUSH
23214: LD_EXP 35
23218: PUSH
23219: LD_INT 1
23221: ARRAY
23222: DOUBLE
23223: EQUAL
23224: IFTRUE 23228
23226: GO 23323
23228: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
23229: LD_VAR 0 1
23233: PPUSH
23234: CALL_OW 274
23238: PPUSH
23239: LD_INT 1
23241: PPUSH
23242: LD_INT 200
23244: PUSH
23245: LD_INT 0
23247: PPUSH
23248: LD_INT 7
23250: PPUSH
23251: CALL_OW 12
23255: PUSH
23256: LD_INT 10
23258: MUL
23259: PLUS
23260: PPUSH
23261: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 0 ) ;
23265: LD_VAR 0 1
23269: PPUSH
23270: CALL_OW 274
23274: PPUSH
23275: LD_INT 2
23277: PPUSH
23278: LD_INT 0
23280: PPUSH
23281: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
23285: LD_VAR 0 1
23289: PPUSH
23290: CALL_OW 274
23294: PPUSH
23295: LD_INT 3
23297: PPUSH
23298: LD_INT 80
23300: PUSH
23301: LD_INT 0
23303: PPUSH
23304: LD_INT 10
23306: PPUSH
23307: CALL_OW 12
23311: PUSH
23312: LD_INT 5
23314: MUL
23315: PLUS
23316: PPUSH
23317: CALL_OW 277
// end ; ai_depot [ 2 ] :
23321: GO 23522
23323: LD_EXP 35
23327: PUSH
23328: LD_INT 2
23330: ARRAY
23331: DOUBLE
23332: EQUAL
23333: IFTRUE 23337
23335: GO 23400
23337: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 100 ) ;
23338: LD_VAR 0 1
23342: PPUSH
23343: CALL_OW 274
23347: PPUSH
23348: LD_INT 1
23350: PPUSH
23351: LD_INT 100
23353: PPUSH
23354: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 55 ) ;
23358: LD_VAR 0 1
23362: PPUSH
23363: CALL_OW 274
23367: PPUSH
23368: LD_INT 2
23370: PPUSH
23371: LD_INT 55
23373: PPUSH
23374: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 20 ) ;
23378: LD_VAR 0 1
23382: PPUSH
23383: CALL_OW 274
23387: PPUSH
23388: LD_INT 3
23390: PPUSH
23391: LD_INT 20
23393: PPUSH
23394: CALL_OW 277
// end ; ai_depot [ 3 ] :
23398: GO 23522
23400: LD_EXP 35
23404: PUSH
23405: LD_INT 3
23407: ARRAY
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23521
23414: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
23415: LD_VAR 0 1
23419: PPUSH
23420: CALL_OW 274
23424: PPUSH
23425: LD_INT 1
23427: PPUSH
23428: LD_INT 200
23430: PUSH
23431: LD_INT 0
23433: PPUSH
23434: LD_INT 7
23436: PPUSH
23437: CALL_OW 12
23441: PUSH
23442: LD_INT 10
23444: MUL
23445: PLUS
23446: PPUSH
23447: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 400 + Rand ( 0 , 100 ) ) ;
23451: LD_VAR 0 1
23455: PPUSH
23456: CALL_OW 274
23460: PPUSH
23461: LD_INT 2
23463: PPUSH
23464: LD_INT 400
23466: PUSH
23467: LD_INT 0
23469: PPUSH
23470: LD_INT 100
23472: PPUSH
23473: CALL_OW 12
23477: PLUS
23478: PPUSH
23479: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
23483: LD_VAR 0 1
23487: PPUSH
23488: CALL_OW 274
23492: PPUSH
23493: LD_INT 3
23495: PPUSH
23496: LD_INT 80
23498: PUSH
23499: LD_INT 0
23501: PPUSH
23502: LD_INT 10
23504: PPUSH
23505: CALL_OW 12
23509: PUSH
23510: LD_INT 5
23512: MUL
23513: PLUS
23514: PPUSH
23515: CALL_OW 277
// end ; end ;
23519: GO 23522
23521: POP
// end ; end ;
23522: PPOPN 1
23524: END
// export function GetHumansOutOfUnits ( un_list ) ; var i ; begin
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
// result = [ ] ;
23529: LD_ADDR_VAR 0 2
23533: PUSH
23534: EMPTY
23535: ST_TO_ADDR
// for i in un_list do
23536: LD_ADDR_VAR 0 3
23540: PUSH
23541: LD_VAR 0 1
23545: PUSH
23546: FOR_IN
23547: IFFALSE 23623
// case GetType ( IsInUnit ( i ) ) of unit_building :
23549: LD_VAR 0 3
23553: PPUSH
23554: CALL_OW 310
23558: PPUSH
23559: CALL_OW 247
23563: PUSH
23564: LD_INT 3
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23584
23572: POP
// ComExitBuilding ( i ) ; unit_vehicle :
23573: LD_VAR 0 3
23577: PPUSH
23578: CALL_OW 122
23582: GO 23621
23584: LD_INT 2
23586: DOUBLE
23587: EQUAL
23588: IFTRUE 23592
23590: GO 23604
23592: POP
// ComExitVehicle ( i ) ; else
23593: LD_VAR 0 3
23597: PPUSH
23598: CALL_OW 121
23602: GO 23621
23604: POP
// result = result ^ i ; end ;
23605: LD_ADDR_VAR 0 2
23609: PUSH
23610: LD_VAR 0 2
23614: PUSH
23615: LD_VAR 0 3
23619: ADD
23620: ST_TO_ADDR
23621: GO 23546
23623: POP
23624: POP
// end ;
23625: LD_VAR 0 2
23629: RET
// export function BaseUnderAttack ( base , attack_side ) ; var area , i , val , def_side , temp_list ; begin
23630: LD_INT 0
23632: PPUSH
23633: PPUSH
23634: PPUSH
23635: PPUSH
23636: PPUSH
23637: PPUSH
// result = false ;
23638: LD_ADDR_VAR 0 3
23642: PUSH
23643: LD_INT 0
23645: ST_TO_ADDR
// def_side = GetBaseSide ( base ) ;
23646: LD_ADDR_VAR 0 7
23650: PUSH
23651: LD_VAR 0 1
23655: PPUSH
23656: CALL 12710 0 1
23660: ST_TO_ADDR
// area = GetBaseArea ( base ) ;
23661: LD_ADDR_VAR 0 4
23665: PUSH
23666: LD_VAR 0 1
23670: PPUSH
23671: CALL 12639 0 1
23675: ST_TO_ADDR
// if attack_side = def_side then
23676: LD_VAR 0 2
23680: PUSH
23681: LD_VAR 0 7
23685: EQUAL
23686: IFFALSE 23690
// exit ;
23688: GO 24209
// if attack_side = - 1 then
23690: LD_VAR 0 2
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: EQUAL
23699: IFFALSE 23965
// begin if FilterAllUnits ( [ [ f_enemy , def_side ] , [ f_inarea , area ] ] ) > 0 then
23701: LD_INT 81
23703: PUSH
23704: LD_VAR 0 7
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 95
23715: PUSH
23716: LD_VAR 0 4
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PPUSH
23729: CALL_OW 69
23733: PUSH
23734: LD_INT 0
23736: GREATER
23737: IFFALSE 23749
// begin result = true ;
23739: LD_ADDR_VAR 0 3
23743: PUSH
23744: LD_INT 1
23746: ST_TO_ADDR
// exit ;
23747: GO 24209
// end ; val = true ;
23749: LD_ADDR_VAR 0 6
23753: PUSH
23754: LD_INT 1
23756: ST_TO_ADDR
// for i in ai_contact_time [ def_side ] do
23757: LD_ADDR_VAR 0 5
23761: PUSH
23762: LD_EXP 76
23766: PUSH
23767: LD_VAR 0 7
23771: ARRAY
23772: PUSH
23773: FOR_IN
23774: IFFALSE 23798
// if i < 0 0$10 then
23776: LD_VAR 0 5
23780: PUSH
23781: LD_INT 350
23783: LESS
23784: IFFALSE 23796
// begin val = false ;
23786: LD_ADDR_VAR 0 6
23790: PUSH
23791: LD_INT 0
23793: ST_TO_ADDR
// break ;
23794: GO 23798
// end ;
23796: GO 23773
23798: POP
23799: POP
// if ContactTime ( def_side ) >= 0 0$10 and val then
23800: LD_VAR 0 7
23804: PPUSH
23805: CALL_OW 462
23809: PUSH
23810: LD_INT 350
23812: GREATEREQUAL
23813: PUSH
23814: LD_VAR 0 6
23818: AND
23819: IFFALSE 23823
// exit ;
23821: GO 24209
// temp_list = [ ] ;
23823: LD_ADDR_VAR 0 8
23827: PUSH
23828: EMPTY
23829: ST_TO_ADDR
// for i in ( ai_bases diff base ) do
23830: LD_ADDR_VAR 0 5
23834: PUSH
23835: LD_EXP 59
23839: PUSH
23840: LD_VAR 0 1
23844: DIFF
23845: PUSH
23846: FOR_IN
23847: IFFALSE 23893
// temp_list = Insert ( temp_list , 1 , [ f_not , [ f_inarea , GetBaseArea ( i ) ] ] ) ;
23849: LD_ADDR_VAR 0 8
23853: PUSH
23854: LD_VAR 0 8
23858: PPUSH
23859: LD_INT 1
23861: PPUSH
23862: LD_INT 3
23864: PUSH
23865: LD_INT 95
23867: PUSH
23868: LD_VAR 0 5
23872: PPUSH
23873: CALL 12639 0 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PPUSH
23886: CALL_OW 2
23890: ST_TO_ADDR
23891: GO 23846
23893: POP
23894: POP
// temp_list = FilterAllUnits ( [ [ f_enemy , def_side ] , [ f_not , [ f_type , unit_building ] ] ] ^ temp_list ) ;
23895: LD_ADDR_VAR 0 8
23899: PUSH
23900: LD_INT 81
23902: PUSH
23903: LD_VAR 0 7
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 3
23914: PUSH
23915: LD_INT 21
23917: PUSH
23918: LD_INT 3
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_VAR 0 8
23937: ADD
23938: PPUSH
23939: CALL_OW 69
23943: ST_TO_ADDR
// if not AnyNearBaseArea ( temp_list , base ) then
23944: LD_VAR 0 8
23948: PPUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: CALL 24285 0 2
23958: NOT
23959: IFFALSE 23963
// exit ;
23961: GO 24209
// end else
23963: GO 24201
// begin if FilterAllUnits ( [ [ f_side , attack_side ] , [ f_inarea , area ] ] ) > 0 then
23965: LD_INT 22
23967: PUSH
23968: LD_VAR 0 2
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 95
23979: PUSH
23980: LD_VAR 0 4
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PPUSH
23993: CALL_OW 69
23997: PUSH
23998: LD_INT 0
24000: GREATER
24001: IFFALSE 24013
// begin result = true ;
24003: LD_ADDR_VAR 0 3
24007: PUSH
24008: LD_INT 1
24010: ST_TO_ADDR
// exit ;
24011: GO 24209
// end ; if ContactTime ( [ def_side , attack_side ] ) >= 0 0$10 and ai_contact_time [ def_side ] [ attack_side ] >= 0 0$10 then
24013: LD_VAR 0 7
24017: PUSH
24018: LD_VAR 0 2
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PPUSH
24027: CALL_OW 462
24031: PUSH
24032: LD_INT 350
24034: GREATEREQUAL
24035: PUSH
24036: LD_EXP 76
24040: PUSH
24041: LD_VAR 0 7
24045: ARRAY
24046: PUSH
24047: LD_VAR 0 2
24051: ARRAY
24052: PUSH
24053: LD_INT 350
24055: GREATEREQUAL
24056: AND
24057: IFFALSE 24061
// exit ;
24059: GO 24209
// temp_list = [ ] ;
24061: LD_ADDR_VAR 0 8
24065: PUSH
24066: EMPTY
24067: ST_TO_ADDR
// for i in ( ai_bases diff base ) do
24068: LD_ADDR_VAR 0 5
24072: PUSH
24073: LD_EXP 59
24077: PUSH
24078: LD_VAR 0 1
24082: DIFF
24083: PUSH
24084: FOR_IN
24085: IFFALSE 24131
// temp_list = Insert ( temp_list , 1 , [ f_not , [ f_inarea , GetBaseArea ( i ) ] ] ) ;
24087: LD_ADDR_VAR 0 8
24091: PUSH
24092: LD_VAR 0 8
24096: PPUSH
24097: LD_INT 1
24099: PPUSH
24100: LD_INT 3
24102: PUSH
24103: LD_INT 95
24105: PUSH
24106: LD_VAR 0 5
24110: PPUSH
24111: CALL 12639 0 1
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PPUSH
24124: CALL_OW 2
24128: ST_TO_ADDR
24129: GO 24084
24131: POP
24132: POP
// temp_list = FilterAllUnits ( [ [ f_side , attack_side ] , [ f_not , [ f_type , unit_building ] ] ] ^ temp_list ) ;
24133: LD_ADDR_VAR 0 8
24137: PUSH
24138: LD_INT 22
24140: PUSH
24141: LD_VAR 0 2
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 3
24152: PUSH
24153: LD_INT 21
24155: PUSH
24156: LD_INT 3
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_VAR 0 8
24175: ADD
24176: PPUSH
24177: CALL_OW 69
24181: ST_TO_ADDR
// if not AnyNearBaseArea ( temp_list , base ) then
24182: LD_VAR 0 8
24186: PPUSH
24187: LD_VAR 0 1
24191: PPUSH
24192: CALL 24285 0 2
24196: NOT
24197: IFFALSE 24201
// exit ;
24199: GO 24209
// end ; result = true ;
24201: LD_ADDR_VAR 0 3
24205: PUSH
24206: LD_INT 1
24208: ST_TO_ADDR
// end ;
24209: LD_VAR 0 3
24213: RET
// export function ListFilterNearArea ( list , area ) ; var i ; begin
24214: LD_INT 0
24216: PPUSH
24217: PPUSH
// result = [ ] ;
24218: LD_ADDR_VAR 0 3
24222: PUSH
24223: EMPTY
24224: ST_TO_ADDR
// for i in list do
24225: LD_ADDR_VAR 0 4
24229: PUSH
24230: LD_VAR 0 1
24234: PUSH
24235: FOR_IN
24236: IFFALSE 24278
// if GetDistUnitArea ( i , area ) <= ai_near_base_dist then
24238: LD_VAR 0 4
24242: PPUSH
24243: LD_VAR 0 2
24247: PPUSH
24248: CALL_OW 299
24252: PUSH
24253: LD_EXP 53
24257: LESSEQUAL
24258: IFFALSE 24276
// result = result ^ i ;
24260: LD_ADDR_VAR 0 3
24264: PUSH
24265: LD_VAR 0 3
24269: PUSH
24270: LD_VAR 0 4
24274: ADD
24275: ST_TO_ADDR
24276: GO 24235
24278: POP
24279: POP
// end ;
24280: LD_VAR 0 3
24284: RET
// function AnyNearBaseArea ( list , base ) ; var i , area ; begin
24285: LD_INT 0
24287: PPUSH
24288: PPUSH
24289: PPUSH
// result = false ;
24290: LD_ADDR_VAR 0 3
24294: PUSH
24295: LD_INT 0
24297: ST_TO_ADDR
// area = GetBaseArea ( base ) ;
24298: LD_ADDR_VAR 0 5
24302: PUSH
24303: LD_VAR 0 2
24307: PPUSH
24308: CALL 12639 0 1
24312: ST_TO_ADDR
// for i in list do
24313: LD_ADDR_VAR 0 4
24317: PUSH
24318: LD_VAR 0 1
24322: PUSH
24323: FOR_IN
24324: IFFALSE 24360
// if GetDistUnitArea ( i , area ) <= ai_near_base_dist then
24326: LD_VAR 0 4
24330: PPUSH
24331: LD_VAR 0 5
24335: PPUSH
24336: CALL_OW 299
24340: PUSH
24341: LD_EXP 53
24345: LESSEQUAL
24346: IFFALSE 24358
// begin result = true ;
24348: LD_ADDR_VAR 0 3
24352: PUSH
24353: LD_INT 1
24355: ST_TO_ADDR
// break ;
24356: GO 24360
// end ;
24358: GO 24323
24360: POP
24361: POP
// end ;
24362: LD_VAR 0 3
24366: RET
// on Command ( com ) do var i , temp_list , hex_list , un , k , target_hex ;
24367: LD_INT 0
24369: PPUSH
24370: PPUSH
24371: PPUSH
24372: PPUSH
24373: PPUSH
24374: PPUSH
// begin CheckCamerasOnCommand ( com ) ;
24375: LD_VAR 0 1
24379: PPUSH
24380: CALL 45547 0 1
// if com = 124 then
24384: LD_VAR 0 1
24388: PUSH
24389: LD_INT 124
24391: EQUAL
24392: IFFALSE 24803
// begin for i in FilterAllUnits ( [ f_side , you ] ) do
24394: LD_ADDR_VAR 0 2
24398: PUSH
24399: LD_INT 22
24401: PUSH
24402: LD_EXP 3
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PPUSH
24411: CALL_OW 69
24415: PUSH
24416: FOR_IN
24417: IFFALSE 24801
// if IsSelected ( i ) and HasTask ( i ) then
24419: LD_VAR 0 2
24423: PPUSH
24424: CALL_OW 306
24428: PUSH
24429: LD_VAR 0 2
24433: PPUSH
24434: CALL_OW 314
24438: AND
24439: IFFALSE 24799
// begin target_hex = [ ] ;
24441: LD_ADDR_VAR 0 7
24445: PUSH
24446: EMPTY
24447: ST_TO_ADDR
// for k in GetTaskList ( i ) do
24448: LD_ADDR_VAR 0 6
24452: PUSH
24453: LD_VAR 0 2
24457: PPUSH
24458: CALL_OW 437
24462: PUSH
24463: FOR_IN
24464: IFFALSE 24511
// if k [ 1 ] = | then
24466: LD_VAR 0 6
24470: PUSH
24471: LD_INT 1
24473: ARRAY
24474: PUSH
24475: LD_STRING |
24477: EQUAL
24478: IFFALSE 24509
// begin target_hex = [ k [ 2 ] , k [ 3 ] ] ;
24480: LD_ADDR_VAR 0 7
24484: PUSH
24485: LD_VAR 0 6
24489: PUSH
24490: LD_INT 2
24492: ARRAY
24493: PUSH
24494: LD_VAR 0 6
24498: PUSH
24499: LD_INT 3
24501: ARRAY
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: ST_TO_ADDR
// break ;
24507: GO 24511
// end ;
24509: GO 24463
24511: POP
24512: POP
// if target_hex > 0 then
24513: LD_VAR 0 7
24517: PUSH
24518: LD_INT 0
24520: GREATER
24521: IFFALSE 24799
// begin hex_list = target_hex ;
24523: LD_ADDR_VAR 0 4
24527: PUSH
24528: LD_VAR 0 7
24532: ST_TO_ADDR
// temp_list = [ ] ;
24533: LD_ADDR_VAR 0 3
24537: PUSH
24538: EMPTY
24539: ST_TO_ADDR
// for k = 0 to 5 do
24540: LD_ADDR_VAR 0 6
24544: PUSH
24545: DOUBLE
24546: LD_INT 0
24548: DEC
24549: ST_TO_ADDR
24550: LD_INT 5
24552: PUSH
24553: FOR_TO
24554: IFFALSE 24624
// temp_list = Insert ( temp_list , 1 , [ ShiftX ( hex_list [ 1 ] , k , 1 ) , ShiftY ( hex_list [ 2 ] , k , 1 ) ] ) ;
24556: LD_ADDR_VAR 0 3
24560: PUSH
24561: LD_VAR 0 3
24565: PPUSH
24566: LD_INT 1
24568: PPUSH
24569: LD_VAR 0 4
24573: PUSH
24574: LD_INT 1
24576: ARRAY
24577: PPUSH
24578: LD_VAR 0 6
24582: PPUSH
24583: LD_INT 1
24585: PPUSH
24586: CALL_OW 272
24590: PUSH
24591: LD_VAR 0 4
24595: PUSH
24596: LD_INT 2
24598: ARRAY
24599: PPUSH
24600: LD_VAR 0 6
24604: PPUSH
24605: LD_INT 1
24607: PPUSH
24608: CALL_OW 273
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PPUSH
24617: CALL_OW 2
24621: ST_TO_ADDR
24622: GO 24553
24624: POP
24625: POP
// hex_list = [ hex_list ] ^ temp_list ;
24626: LD_ADDR_VAR 0 4
24630: PUSH
24631: LD_VAR 0 4
24635: PUSH
24636: EMPTY
24637: LIST
24638: PUSH
24639: LD_VAR 0 3
24643: ADD
24644: ST_TO_ADDR
// temp_list = [ ] ;
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: EMPTY
24651: ST_TO_ADDR
// for k in hex_list do
24652: LD_ADDR_VAR 0 6
24656: PUSH
24657: LD_VAR 0 4
24661: PUSH
24662: FOR_IN
24663: IFFALSE 24797
// begin un = HexInfo ( k [ 1 ] , k [ 2 ] ) ;
24665: LD_ADDR_VAR 0 5
24669: PUSH
24670: LD_VAR 0 6
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PPUSH
24679: LD_VAR 0 6
24683: PUSH
24684: LD_INT 2
24686: ARRAY
24687: PPUSH
24688: CALL_OW 428
24692: ST_TO_ADDR
// if un > 0 and not un in temp_list then
24693: LD_VAR 0 5
24697: PUSH
24698: LD_INT 0
24700: GREATER
24701: PUSH
24702: LD_VAR 0 5
24706: PUSH
24707: LD_VAR 0 3
24711: IN
24712: NOT
24713: AND
24714: IFFALSE 24795
// begin ai_attack_ground_info_initial = Insert ( ai_attack_ground_info_initial , 1 , [ i , un , GetSide ( un ) , target_hex [ 1 ] , target_hex [ 2 ] ] ) ;
24716: LD_ADDR_EXP 77
24720: PUSH
24721: LD_EXP 77
24725: PPUSH
24726: LD_INT 1
24728: PPUSH
24729: LD_VAR 0 2
24733: PUSH
24734: LD_VAR 0 5
24738: PUSH
24739: LD_VAR 0 5
24743: PPUSH
24744: CALL_OW 255
24748: PUSH
24749: LD_VAR 0 7
24753: PUSH
24754: LD_INT 1
24756: ARRAY
24757: PUSH
24758: LD_VAR 0 7
24762: PUSH
24763: LD_INT 2
24765: ARRAY
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: PPUSH
24774: CALL_OW 2
24778: ST_TO_ADDR
// temp_list = temp_list ^ un ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 3
24788: PUSH
24789: LD_VAR 0 5
24793: ADD
24794: ST_TO_ADDR
// end ; end ;
24795: GO 24662
24797: POP
24798: POP
// end ; end ;
24799: GO 24416
24801: POP
24802: POP
// end ; end ;
24803: PPOPN 7
24805: END
// every 0 0$1 + 0 0$0.1 do var a , b , temp_list , temp_list_2 , yup , i , t ;
24806: GO 24808
24808: DISABLE
24809: LD_INT 0
24811: PPUSH
24812: PPUSH
24813: PPUSH
24814: PPUSH
24815: PPUSH
24816: PPUSH
24817: PPUSH
// begin repeat wait ( 0 0$0.5 ) ;
24818: LD_INT 18
24820: PPUSH
24821: CALL_OW 67
// i = 1 ;
24825: LD_ADDR_VAR 0 6
24829: PUSH
24830: LD_INT 1
24832: ST_TO_ADDR
// while i <= ai_attack_ground_info_initial do
24833: LD_VAR 0 6
24837: PUSH
24838: LD_EXP 77
24842: LESSEQUAL
24843: IFFALSE 25006
// begin yup = false ;
24845: LD_ADDR_VAR 0 5
24849: PUSH
24850: LD_INT 0
24852: ST_TO_ADDR
// for t in GetTaskList ( ai_attack_ground_info_initial [ i ] [ 1 ] ) do
24853: LD_ADDR_VAR 0 7
24857: PUSH
24858: LD_EXP 77
24862: PUSH
24863: LD_VAR 0 6
24867: ARRAY
24868: PUSH
24869: LD_INT 1
24871: ARRAY
24872: PPUSH
24873: CALL_OW 437
24877: PUSH
24878: FOR_IN
24879: IFFALSE 24959
// if t [ 1 ] = | then
24881: LD_VAR 0 7
24885: PUSH
24886: LD_INT 1
24888: ARRAY
24889: PUSH
24890: LD_STRING |
24892: EQUAL
24893: IFFALSE 24957
// if t [ 2 ] = ai_attack_ground_info_initial [ i ] [ 4 ] and t [ 3 ] = ai_attack_ground_info_initial [ i ] [ 5 ] then
24895: LD_VAR 0 7
24899: PUSH
24900: LD_INT 2
24902: ARRAY
24903: PUSH
24904: LD_EXP 77
24908: PUSH
24909: LD_VAR 0 6
24913: ARRAY
24914: PUSH
24915: LD_INT 4
24917: ARRAY
24918: EQUAL
24919: PUSH
24920: LD_VAR 0 7
24924: PUSH
24925: LD_INT 3
24927: ARRAY
24928: PUSH
24929: LD_EXP 77
24933: PUSH
24934: LD_VAR 0 6
24938: ARRAY
24939: PUSH
24940: LD_INT 5
24942: ARRAY
24943: EQUAL
24944: AND
24945: IFFALSE 24957
// begin yup = true ;
24947: LD_ADDR_VAR 0 5
24951: PUSH
24952: LD_INT 1
24954: ST_TO_ADDR
// break ;
24955: GO 24959
// end ;
24957: GO 24878
24959: POP
24960: POP
// if not yup then
24961: LD_VAR 0 5
24965: NOT
24966: IFFALSE 24990
// begin ai_attack_ground_info_initial = Delete ( ai_attack_ground_info_initial , i ) ;
24968: LD_ADDR_EXP 77
24972: PUSH
24973: LD_EXP 77
24977: PPUSH
24978: LD_VAR 0 6
24982: PPUSH
24983: CALL_OW 3
24987: ST_TO_ADDR
// continue ;
24988: GO 24833
// end ; i = i + 1 ;
24990: LD_ADDR_VAR 0 6
24994: PUSH
24995: LD_VAR 0 6
24999: PUSH
25000: LD_INT 1
25002: PLUS
25003: ST_TO_ADDR
// end ;
25004: GO 24833
// i = 1 ;
25006: LD_ADDR_VAR 0 6
25010: PUSH
25011: LD_INT 1
25013: ST_TO_ADDR
// while i <= ai_attack_ground_info_sustain do
25014: LD_VAR 0 6
25018: PUSH
25019: LD_EXP 78
25023: LESSEQUAL
25024: IFFALSE 25187
// begin yup = false ;
25026: LD_ADDR_VAR 0 5
25030: PUSH
25031: LD_INT 0
25033: ST_TO_ADDR
// for t in GetTaskList ( ai_attack_ground_info_sustain [ i ] [ 1 ] ) do
25034: LD_ADDR_VAR 0 7
25038: PUSH
25039: LD_EXP 78
25043: PUSH
25044: LD_VAR 0 6
25048: ARRAY
25049: PUSH
25050: LD_INT 1
25052: ARRAY
25053: PPUSH
25054: CALL_OW 437
25058: PUSH
25059: FOR_IN
25060: IFFALSE 25140
// if t [ 1 ] = | then
25062: LD_VAR 0 7
25066: PUSH
25067: LD_INT 1
25069: ARRAY
25070: PUSH
25071: LD_STRING |
25073: EQUAL
25074: IFFALSE 25138
// if t [ 2 ] = ai_attack_ground_info_sustain [ i ] [ 4 ] and t [ 3 ] = ai_attack_ground_info_sustain [ i ] [ 5 ] then
25076: LD_VAR 0 7
25080: PUSH
25081: LD_INT 2
25083: ARRAY
25084: PUSH
25085: LD_EXP 78
25089: PUSH
25090: LD_VAR 0 6
25094: ARRAY
25095: PUSH
25096: LD_INT 4
25098: ARRAY
25099: EQUAL
25100: PUSH
25101: LD_VAR 0 7
25105: PUSH
25106: LD_INT 3
25108: ARRAY
25109: PUSH
25110: LD_EXP 78
25114: PUSH
25115: LD_VAR 0 6
25119: ARRAY
25120: PUSH
25121: LD_INT 5
25123: ARRAY
25124: EQUAL
25125: AND
25126: IFFALSE 25138
// begin yup = true ;
25128: LD_ADDR_VAR 0 5
25132: PUSH
25133: LD_INT 1
25135: ST_TO_ADDR
// break ;
25136: GO 25140
// end ;
25138: GO 25059
25140: POP
25141: POP
// if not yup then
25142: LD_VAR 0 5
25146: NOT
25147: IFFALSE 25171
// begin ai_attack_ground_info_sustain = Delete ( ai_attack_ground_info_sustain , i ) ;
25149: LD_ADDR_EXP 78
25153: PUSH
25154: LD_EXP 78
25158: PPUSH
25159: LD_VAR 0 6
25163: PPUSH
25164: CALL_OW 3
25168: ST_TO_ADDR
// continue ;
25169: GO 25014
// end ; i = i + 1 ;
25171: LD_ADDR_VAR 0 6
25175: PUSH
25176: LD_VAR 0 6
25180: PUSH
25181: LD_INT 1
25183: PLUS
25184: ST_TO_ADDR
// end ;
25185: GO 25014
// temp_list = ai_contact_time ;
25187: LD_ADDR_VAR 0 3
25191: PUSH
25192: LD_EXP 76
25196: ST_TO_ADDR
// for a = 1 to temp_list do
25197: LD_ADDR_VAR 0 1
25201: PUSH
25202: DOUBLE
25203: LD_INT 1
25205: DEC
25206: ST_TO_ADDR
25207: LD_VAR 0 3
25211: PUSH
25212: FOR_TO
25213: IFFALSE 25339
// for b = 1 to temp_list [ a ] do
25215: LD_ADDR_VAR 0 2
25219: PUSH
25220: DOUBLE
25221: LD_INT 1
25223: DEC
25224: ST_TO_ADDR
25225: LD_VAR 0 3
25229: PUSH
25230: LD_VAR 0 1
25234: ARRAY
25235: PUSH
25236: FOR_TO
25237: IFFALSE 25335
// if temp_list [ a ] [ b ] < 100000 then
25239: LD_VAR 0 3
25243: PUSH
25244: LD_VAR 0 1
25248: ARRAY
25249: PUSH
25250: LD_VAR 0 2
25254: ARRAY
25255: PUSH
25256: LD_INT 100000
25258: LESS
25259: IFFALSE 25333
// begin temp_list_2 = Replace ( ai_contact_time [ a ] , b , temp_list [ a ] [ b ] + 0 0$0.5 ) ;
25261: LD_ADDR_VAR 0 4
25265: PUSH
25266: LD_EXP 76
25270: PUSH
25271: LD_VAR 0 1
25275: ARRAY
25276: PPUSH
25277: LD_VAR 0 2
25281: PPUSH
25282: LD_VAR 0 3
25286: PUSH
25287: LD_VAR 0 1
25291: ARRAY
25292: PUSH
25293: LD_VAR 0 2
25297: ARRAY
25298: PUSH
25299: LD_INT 18
25301: PLUS
25302: PPUSH
25303: CALL_OW 1
25307: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a , temp_list_2 ) ;
25308: LD_ADDR_EXP 76
25312: PUSH
25313: LD_EXP 76
25317: PPUSH
25318: LD_VAR 0 1
25322: PPUSH
25323: LD_VAR 0 4
25327: PPUSH
25328: CALL_OW 1
25332: ST_TO_ADDR
// end ;
25333: GO 25236
25335: POP
25336: POP
25337: GO 25212
25339: POP
25340: POP
// for a in ai_attack_ground_info_initial do
25341: LD_ADDR_VAR 0 1
25345: PUSH
25346: LD_EXP 77
25350: PUSH
25351: FOR_IN
25352: IFFALSE 25558
// begin if IsDead ( a [ 2 ] ) or UnitShoot ( a [ 2 ] ) = a [ 1 ] then
25354: LD_VAR 0 1
25358: PUSH
25359: LD_INT 2
25361: ARRAY
25362: PPUSH
25363: CALL_OW 301
25367: PUSH
25368: LD_VAR 0 1
25372: PUSH
25373: LD_INT 2
25375: ARRAY
25376: PPUSH
25377: CALL_OW 504
25381: PUSH
25382: LD_VAR 0 1
25386: PUSH
25387: LD_INT 1
25389: ARRAY
25390: EQUAL
25391: OR
25392: IFFALSE 25556
// begin temp_list = Replace ( ai_contact_time [ you ] , a [ 3 ] , 0 ) ;
25394: LD_ADDR_VAR 0 3
25398: PUSH
25399: LD_EXP 76
25403: PUSH
25404: LD_EXP 3
25408: ARRAY
25409: PPUSH
25410: LD_VAR 0 1
25414: PUSH
25415: LD_INT 3
25417: ARRAY
25418: PPUSH
25419: LD_INT 0
25421: PPUSH
25422: CALL_OW 1
25426: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , you , temp_list ) ;
25427: LD_ADDR_EXP 76
25431: PUSH
25432: LD_EXP 76
25436: PPUSH
25437: LD_EXP 3
25441: PPUSH
25442: LD_VAR 0 3
25446: PPUSH
25447: CALL_OW 1
25451: ST_TO_ADDR
// temp_list = Replace ( ai_contact_time [ a [ 3 ] ] , you , 0 ) ;
25452: LD_ADDR_VAR 0 3
25456: PUSH
25457: LD_EXP 76
25461: PUSH
25462: LD_VAR 0 1
25466: PUSH
25467: LD_INT 3
25469: ARRAY
25470: ARRAY
25471: PPUSH
25472: LD_EXP 3
25476: PPUSH
25477: LD_INT 0
25479: PPUSH
25480: CALL_OW 1
25484: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a [ 3 ] , temp_list ) ;
25485: LD_ADDR_EXP 76
25489: PUSH
25490: LD_EXP 76
25494: PPUSH
25495: LD_VAR 0 1
25499: PUSH
25500: LD_INT 3
25502: ARRAY
25503: PPUSH
25504: LD_VAR 0 3
25508: PPUSH
25509: CALL_OW 1
25513: ST_TO_ADDR
// ai_attack_ground_info_initial = ai_attack_ground_info_initial diff [ a ] ;
25514: LD_ADDR_EXP 77
25518: PUSH
25519: LD_EXP 77
25523: PUSH
25524: LD_VAR 0 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: DIFF
25532: ST_TO_ADDR
// ai_attack_ground_info_sustain = Insert ( ai_attack_ground_info_sustain , 1 , a ) ;
25533: LD_ADDR_EXP 78
25537: PUSH
25538: LD_EXP 78
25542: PPUSH
25543: LD_INT 1
25545: PPUSH
25546: LD_VAR 0 1
25550: PPUSH
25551: CALL_OW 2
25555: ST_TO_ADDR
// end ; end ;
25556: GO 25351
25558: POP
25559: POP
// for a in ai_attack_ground_info_sustain do
25560: LD_ADDR_VAR 0 1
25564: PUSH
25565: LD_EXP 78
25569: PUSH
25570: FOR_IN
25571: IFFALSE 25695
// begin temp_list = Replace ( ai_contact_time [ you ] , a [ 3 ] , 0 ) ;
25573: LD_ADDR_VAR 0 3
25577: PUSH
25578: LD_EXP 76
25582: PUSH
25583: LD_EXP 3
25587: ARRAY
25588: PPUSH
25589: LD_VAR 0 1
25593: PUSH
25594: LD_INT 3
25596: ARRAY
25597: PPUSH
25598: LD_INT 0
25600: PPUSH
25601: CALL_OW 1
25605: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , you , temp_list ) ;
25606: LD_ADDR_EXP 76
25610: PUSH
25611: LD_EXP 76
25615: PPUSH
25616: LD_EXP 3
25620: PPUSH
25621: LD_VAR 0 3
25625: PPUSH
25626: CALL_OW 1
25630: ST_TO_ADDR
// temp_list = Replace ( ai_contact_time [ a [ 3 ] ] , you , 0 ) ;
25631: LD_ADDR_VAR 0 3
25635: PUSH
25636: LD_EXP 76
25640: PUSH
25641: LD_VAR 0 1
25645: PUSH
25646: LD_INT 3
25648: ARRAY
25649: ARRAY
25650: PPUSH
25651: LD_EXP 3
25655: PPUSH
25656: LD_INT 0
25658: PPUSH
25659: CALL_OW 1
25663: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a [ 3 ] , temp_list ) ;
25664: LD_ADDR_EXP 76
25668: PUSH
25669: LD_EXP 76
25673: PPUSH
25674: LD_VAR 0 1
25678: PUSH
25679: LD_INT 3
25681: ARRAY
25682: PPUSH
25683: LD_VAR 0 3
25687: PPUSH
25688: CALL_OW 1
25692: ST_TO_ADDR
// end ;
25693: GO 25570
25695: POP
25696: POP
// until false ;
25697: LD_INT 0
25699: IFFALSE 24818
// end ;
25701: PPOPN 7
25703: END
// every 0 0$1 do var side , i , mechanics_list , temp_list , taken_vehicles , temp_list_3 , temp_unit , vehicles_list , allowed_to_repair_vehicles ; var under_attack , free_parking_spots , k , ready_to_attack , base , area , free_spaces , temp_list_2 , remote_mechanics ; var destroy_gensher_base , temp_list_4 , temp_list_5 , n , a ; var remote_driver_vehicles ;
25704: GO 25706
25706: DISABLE
25707: LD_INT 0
25709: PPUSH
25710: PPUSH
25711: PPUSH
25712: PPUSH
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
25719: PPUSH
25720: PPUSH
25721: PPUSH
25722: PPUSH
25723: PPUSH
25724: PPUSH
25725: PPUSH
25726: PPUSH
25727: PPUSH
25728: PPUSH
25729: PPUSH
25730: PPUSH
25731: PPUSH
25732: PPUSH
// begin remote_driver_vehicles = [ [ ] , [ ] , [ ] ] ;
25733: LD_ADDR_VAR 0 24
25737: PUSH
25738: EMPTY
25739: PUSH
25740: EMPTY
25741: PUSH
25742: EMPTY
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: LIST
25748: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25749: LD_INT 35
25751: PPUSH
25752: CALL_OW 67
// for base in ai_bases do
25756: LD_ADDR_VAR 0 14
25760: PUSH
25761: LD_EXP 59
25765: PUSH
25766: FOR_IN
25767: IFFALSE 30381
// begin side = GetBaseSide ( base ) ;
25769: LD_ADDR_VAR 0 1
25773: PUSH
25774: LD_VAR 0 14
25778: PPUSH
25779: CALL 12710 0 1
25783: ST_TO_ADDR
// under_attack = BaseUnderAttack ( base , - 1 ) ;
25784: LD_ADDR_VAR 0 10
25788: PUSH
25789: LD_VAR 0 14
25793: PPUSH
25794: LD_INT 1
25796: NEG
25797: PPUSH
25798: CALL 23630 0 2
25802: ST_TO_ADDR
// ready_to_attack = not under_attack ;
25803: LD_ADDR_VAR 0 13
25807: PUSH
25808: LD_VAR 0 10
25812: NOT
25813: ST_TO_ADDR
// if base = 1 and GetAttitude ( americans , you_alt ) = att_enemy and FilterAllUnits ( [ [ f_inarea , Gensher_base ] , [ f_type , unit_building ] ] ) > 0 then
25814: LD_VAR 0 14
25818: PUSH
25819: LD_INT 1
25821: EQUAL
25822: PUSH
25823: LD_EXP 7
25827: PPUSH
25828: LD_EXP 6
25832: PPUSH
25833: CALL_OW 81
25837: PUSH
25838: LD_INT 2
25840: EQUAL
25841: AND
25842: PUSH
25843: LD_INT 95
25845: PUSH
25846: LD_INT 7
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 21
25855: PUSH
25856: LD_INT 3
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: PUSH
25872: LD_INT 0
25874: GREATER
25875: AND
25876: IFFALSE 25888
// destroy_gensher_base = true else
25878: LD_ADDR_VAR 0 19
25882: PUSH
25883: LD_INT 1
25885: ST_TO_ADDR
25886: GO 25896
// destroy_gensher_base = false ;
25888: LD_ADDR_VAR 0 19
25892: PUSH
25893: LD_INT 0
25895: ST_TO_ADDR
// mechanics_list = ai_mechanics_defend [ base ] diff ai_heal_these_humans [ base ] ;
25896: LD_ADDR_VAR 0 3
25900: PUSH
25901: LD_EXP 32
25905: PUSH
25906: LD_VAR 0 14
25910: ARRAY
25911: PUSH
25912: LD_EXP 44
25916: PUSH
25917: LD_VAR 0 14
25921: ARRAY
25922: DIFF
25923: ST_TO_ADDR
// remote_mechanics = [ ] ;
25924: LD_ADDR_VAR 0 18
25928: PUSH
25929: EMPTY
25930: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
25931: LD_ADDR_VAR 0 4
25935: PUSH
25936: LD_EXP 44
25940: PUSH
25941: LD_VAR 0 14
25945: ARRAY
25946: ST_TO_ADDR
// i = 1 ;
25947: LD_ADDR_VAR 0 2
25951: PUSH
25952: LD_INT 1
25954: ST_TO_ADDR
// while i <= mechanics_list do
25955: LD_VAR 0 2
25959: PUSH
25960: LD_VAR 0 3
25964: LESSEQUAL
25965: IFFALSE 26048
// begin if GetLives ( mechanics_list [ i ] ) <= 900 then
25967: LD_VAR 0 3
25971: PUSH
25972: LD_VAR 0 2
25976: ARRAY
25977: PPUSH
25978: CALL_OW 256
25982: PUSH
25983: LD_INT 900
25985: LESSEQUAL
25986: IFFALSE 26032
// begin temp_list = temp_list ^ mechanics_list [ i ] ;
25988: LD_ADDR_VAR 0 4
25992: PUSH
25993: LD_VAR 0 4
25997: PUSH
25998: LD_VAR 0 3
26002: PUSH
26003: LD_VAR 0 2
26007: ARRAY
26008: ADD
26009: ST_TO_ADDR
// mechanics_list = Delete ( mechanics_list , i ) ;
26010: LD_ADDR_VAR 0 3
26014: PUSH
26015: LD_VAR 0 3
26019: PPUSH
26020: LD_VAR 0 2
26024: PPUSH
26025: CALL_OW 3
26029: ST_TO_ADDR
// continue ;
26030: GO 25955
// end ; i = i + 1 ;
26032: LD_ADDR_VAR 0 2
26036: PUSH
26037: LD_VAR 0 2
26041: PUSH
26042: LD_INT 1
26044: PLUS
26045: ST_TO_ADDR
// end ;
26046: GO 25955
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
26048: LD_ADDR_EXP 44
26052: PUSH
26053: LD_EXP 44
26057: PPUSH
26058: LD_VAR 0 14
26062: PPUSH
26063: LD_VAR 0 4
26067: PPUSH
26068: CALL_OW 1
26072: ST_TO_ADDR
// if ai_control_tower [ base ] > 0 then
26073: LD_EXP 57
26077: PUSH
26078: LD_VAR 0 14
26082: ARRAY
26083: PUSH
26084: LD_INT 0
26086: GREATER
26087: IFFALSE 27025
// begin temp_list = remote_driver_vehicles [ base ] ;
26089: LD_ADDR_VAR 0 4
26093: PUSH
26094: LD_VAR 0 24
26098: PUSH
26099: LD_VAR 0 14
26103: ARRAY
26104: ST_TO_ADDR
// vehicles_list = [ ] ;
26105: LD_ADDR_VAR 0 8
26109: PUSH
26110: EMPTY
26111: ST_TO_ADDR
// i = 1 ;
26112: LD_ADDR_VAR 0 2
26116: PUSH
26117: LD_INT 1
26119: ST_TO_ADDR
// while i <= temp_list do
26120: LD_VAR 0 2
26124: PUSH
26125: LD_VAR 0 4
26129: LESSEQUAL
26130: IFFALSE 26402
// begin if IsDead ( temp_list [ i ] [ 1 ] ) then
26132: LD_VAR 0 4
26136: PUSH
26137: LD_VAR 0 2
26141: ARRAY
26142: PUSH
26143: LD_INT 1
26145: ARRAY
26146: PPUSH
26147: CALL_OW 301
26151: IFFALSE 26177
// begin temp_list = Delete ( temp_list , i ) ;
26153: LD_ADDR_VAR 0 4
26157: PUSH
26158: LD_VAR 0 4
26162: PPUSH
26163: LD_VAR 0 2
26167: PPUSH
26168: CALL_OW 3
26172: ST_TO_ADDR
// continue ;
26173: GO 26120
// end else
26175: GO 26360
// begin temp_list_3 = temp_list [ i ] [ 2 ] ;
26177: LD_ADDR_VAR 0 6
26181: PUSH
26182: LD_VAR 0 4
26186: PUSH
26187: LD_VAR 0 2
26191: ARRAY
26192: PUSH
26193: LD_INT 2
26195: ARRAY
26196: ST_TO_ADDR
// k = 1 ;
26197: LD_ADDR_VAR 0 12
26201: PUSH
26202: LD_INT 1
26204: ST_TO_ADDR
// while k <= temp_list_3 do
26205: LD_VAR 0 12
26209: PUSH
26210: LD_VAR 0 6
26214: LESSEQUAL
26215: IFFALSE 26272
// begin if IsDead ( temp_list_3 [ k ] ) then
26217: LD_VAR 0 6
26221: PUSH
26222: LD_VAR 0 12
26226: ARRAY
26227: PPUSH
26228: CALL_OW 301
26232: IFFALSE 26256
// begin temp_list_3 = Delete ( temp_list_3 , k ) ;
26234: LD_ADDR_VAR 0 6
26238: PUSH
26239: LD_VAR 0 6
26243: PPUSH
26244: LD_VAR 0 12
26248: PPUSH
26249: CALL_OW 3
26253: ST_TO_ADDR
// continue ;
26254: GO 26205
// end ; k = k + 1 ;
26256: LD_ADDR_VAR 0 12
26260: PUSH
26261: LD_VAR 0 12
26265: PUSH
26266: LD_INT 1
26268: PLUS
26269: ST_TO_ADDR
// end ;
26270: GO 26205
// if temp_list_3 > 0 then
26272: LD_VAR 0 6
26276: PUSH
26277: LD_INT 0
26279: GREATER
26280: IFFALSE 26338
// begin temp_list_2 = Replace ( temp_list [ i ] , 2 , temp_list_3 ) ;
26282: LD_ADDR_VAR 0 17
26286: PUSH
26287: LD_VAR 0 4
26291: PUSH
26292: LD_VAR 0 2
26296: ARRAY
26297: PPUSH
26298: LD_INT 2
26300: PPUSH
26301: LD_VAR 0 6
26305: PPUSH
26306: CALL_OW 1
26310: ST_TO_ADDR
// temp_list = Replace ( temp_list , i , temp_list_2 ) ;
26311: LD_ADDR_VAR 0 4
26315: PUSH
26316: LD_VAR 0 4
26320: PPUSH
26321: LD_VAR 0 2
26325: PPUSH
26326: LD_VAR 0 17
26330: PPUSH
26331: CALL_OW 1
26335: ST_TO_ADDR
// end else
26336: GO 26360
// begin temp_list = Delete ( temp_list , i ) ;
26338: LD_ADDR_VAR 0 4
26342: PUSH
26343: LD_VAR 0 4
26347: PPUSH
26348: LD_VAR 0 2
26352: PPUSH
26353: CALL_OW 3
26357: ST_TO_ADDR
// continue ;
26358: GO 26120
// end ; end ; vehicles_list = vehicles_list ^ temp_list [ i ] [ 2 ] ;
26360: LD_ADDR_VAR 0 8
26364: PUSH
26365: LD_VAR 0 8
26369: PUSH
26370: LD_VAR 0 4
26374: PUSH
26375: LD_VAR 0 2
26379: ARRAY
26380: PUSH
26381: LD_INT 2
26383: ARRAY
26384: ADD
26385: ST_TO_ADDR
// i = i + 1 ;
26386: LD_ADDR_VAR 0 2
26390: PUSH
26391: LD_VAR 0 2
26395: PUSH
26396: LD_INT 1
26398: PLUS
26399: ST_TO_ADDR
// end ;
26400: GO 26120
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list ) ;
26402: LD_ADDR_VAR 0 24
26406: PUSH
26407: LD_VAR 0 24
26411: PPUSH
26412: LD_VAR 0 14
26416: PPUSH
26417: LD_VAR 0 4
26421: PPUSH
26422: CALL_OW 1
26426: ST_TO_ADDR
// temp_list = ai_vehicles_defend [ base ] diff vehicles_list ;
26427: LD_ADDR_VAR 0 4
26431: PUSH
26432: LD_EXP 40
26436: PUSH
26437: LD_VAR 0 14
26441: ARRAY
26442: PUSH
26443: LD_VAR 0 8
26447: DIFF
26448: ST_TO_ADDR
// if temp_list > 0 then
26449: LD_VAR 0 4
26453: PUSH
26454: LD_INT 0
26456: GREATER
26457: IFFALSE 26681
// begin temp_list_3 = ai_mechanics_defend [ base ] ;
26459: LD_ADDR_VAR 0 6
26463: PUSH
26464: LD_EXP 32
26468: PUSH
26469: LD_VAR 0 14
26473: ARRAY
26474: ST_TO_ADDR
// for i in remote_driver_vehicles [ base ] do
26475: LD_ADDR_VAR 0 2
26479: PUSH
26480: LD_VAR 0 24
26484: PUSH
26485: LD_VAR 0 14
26489: ARRAY
26490: PUSH
26491: FOR_IN
26492: IFFALSE 26516
// temp_list_3 = temp_list_3 diff i [ 1 ] ;
26494: LD_ADDR_VAR 0 6
26498: PUSH
26499: LD_VAR 0 6
26503: PUSH
26504: LD_VAR 0 2
26508: PUSH
26509: LD_INT 1
26511: ARRAY
26512: DIFF
26513: ST_TO_ADDR
26514: GO 26491
26516: POP
26517: POP
// if temp_list_3 > 0 then
26518: LD_VAR 0 6
26522: PUSH
26523: LD_INT 0
26525: GREATER
26526: IFFALSE 26552
// temp_list_3 = temp_list_3 diff FindMinSkill ( temp_list_3 , skill_mechanical ) ;
26528: LD_ADDR_VAR 0 6
26532: PUSH
26533: LD_VAR 0 6
26537: PUSH
26538: LD_VAR 0 6
26542: PPUSH
26543: LD_INT 3
26545: PPUSH
26546: CALL_OW 443
26550: DIFF
26551: ST_TO_ADDR
// for i in temp_list do
26552: LD_ADDR_VAR 0 2
26556: PUSH
26557: LD_VAR 0 4
26561: PUSH
26562: FOR_IN
26563: IFFALSE 26679
// begin if temp_list_3 = 0 then
26565: LD_VAR 0 6
26569: PUSH
26570: LD_INT 0
26572: EQUAL
26573: IFFALSE 26577
// break ;
26575: GO 26679
// temp_unit = FindMaxSkill ( temp_list_3 , skill_mechanical ) ;
26577: LD_ADDR_VAR 0 7
26581: PUSH
26582: LD_VAR 0 6
26586: PPUSH
26587: LD_INT 3
26589: PPUSH
26590: CALL_OW 433
26594: ST_TO_ADDR
// temp_list_3 = temp_list_3 diff temp_unit ;
26595: LD_ADDR_VAR 0 6
26599: PUSH
26600: LD_VAR 0 6
26604: PUSH
26605: LD_VAR 0 7
26609: DIFF
26610: ST_TO_ADDR
// temp_list_2 = Insert ( remote_driver_vehicles [ base ] , 1 , [ temp_unit , [ i ] ] ) ;
26611: LD_ADDR_VAR 0 17
26615: PUSH
26616: LD_VAR 0 24
26620: PUSH
26621: LD_VAR 0 14
26625: ARRAY
26626: PPUSH
26627: LD_INT 1
26629: PPUSH
26630: LD_VAR 0 7
26634: PUSH
26635: LD_VAR 0 2
26639: PUSH
26640: EMPTY
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PPUSH
26647: CALL_OW 2
26651: ST_TO_ADDR
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list_2 ) ;
26652: LD_ADDR_VAR 0 24
26656: PUSH
26657: LD_VAR 0 24
26661: PPUSH
26662: LD_VAR 0 14
26666: PPUSH
26667: LD_VAR 0 17
26671: PPUSH
26672: CALL_OW 1
26676: ST_TO_ADDR
// end ;
26677: GO 26562
26679: POP
26680: POP
// end ; for i in remote_driver_vehicles [ base ] do
26681: LD_ADDR_VAR 0 2
26685: PUSH
26686: LD_VAR 0 24
26690: PUSH
26691: LD_VAR 0 14
26695: ARRAY
26696: PUSH
26697: FOR_IN
26698: IFFALSE 26722
// remote_mechanics = remote_mechanics ^ i [ 1 ] ;
26700: LD_ADDR_VAR 0 18
26704: PUSH
26705: LD_VAR 0 18
26709: PUSH
26710: LD_VAR 0 2
26714: PUSH
26715: LD_INT 1
26717: ARRAY
26718: ADD
26719: ST_TO_ADDR
26720: GO 26697
26722: POP
26723: POP
// mechanics_list = mechanics_list diff remote_mechanics ;
26724: LD_ADDR_VAR 0 3
26728: PUSH
26729: LD_VAR 0 3
26733: PUSH
26734: LD_VAR 0 18
26738: DIFF
26739: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff ai_heal_these_humans [ base ] ;
26740: LD_ADDR_VAR 0 18
26744: PUSH
26745: LD_VAR 0 18
26749: PUSH
26750: LD_EXP 44
26754: PUSH
26755: LD_VAR 0 14
26759: ARRAY
26760: DIFF
26761: ST_TO_ADDR
// if mechanics_list = 0 and remote_driver_vehicles [ base ] > 0 then
26762: LD_VAR 0 3
26766: PUSH
26767: LD_INT 0
26769: EQUAL
26770: PUSH
26771: LD_VAR 0 24
26775: PUSH
26776: LD_VAR 0 14
26780: ARRAY
26781: PUSH
26782: LD_INT 0
26784: GREATER
26785: AND
26786: IFFALSE 27023
// begin n = 0 ;
26788: LD_ADDR_VAR 0 22
26792: PUSH
26793: LD_INT 0
26795: ST_TO_ADDR
// a = 9999 ;
26796: LD_ADDR_VAR 0 23
26800: PUSH
26801: LD_INT 9999
26803: ST_TO_ADDR
// for i = 1 to ( remote_driver_vehicles [ base ] + 0 ) do
26804: LD_ADDR_VAR 0 2
26808: PUSH
26809: DOUBLE
26810: LD_INT 1
26812: DEC
26813: ST_TO_ADDR
26814: LD_VAR 0 24
26818: PUSH
26819: LD_VAR 0 14
26823: ARRAY
26824: PUSH
26825: LD_INT 0
26827: PLUS
26828: PUSH
26829: FOR_TO
26830: IFFALSE 26906
// begin if remote_driver_vehicles [ base ] [ i ] [ 2 ] + 0 < a then
26832: LD_VAR 0 24
26836: PUSH
26837: LD_VAR 0 14
26841: ARRAY
26842: PUSH
26843: LD_VAR 0 2
26847: ARRAY
26848: PUSH
26849: LD_INT 2
26851: ARRAY
26852: PUSH
26853: LD_INT 0
26855: PLUS
26856: PUSH
26857: LD_VAR 0 23
26861: LESS
26862: IFFALSE 26904
// begin a = remote_driver_vehicles [ base ] [ i ] [ 2 ] + 0 ;
26864: LD_ADDR_VAR 0 23
26868: PUSH
26869: LD_VAR 0 24
26873: PUSH
26874: LD_VAR 0 14
26878: ARRAY
26879: PUSH
26880: LD_VAR 0 2
26884: ARRAY
26885: PUSH
26886: LD_INT 2
26888: ARRAY
26889: PUSH
26890: LD_INT 0
26892: PLUS
26893: ST_TO_ADDR
// n = i ;
26894: LD_ADDR_VAR 0 22
26898: PUSH
26899: LD_VAR 0 2
26903: ST_TO_ADDR
// end ; end ;
26904: GO 26829
26906: POP
26907: POP
// mechanics_list = mechanics_list ^ remote_driver_vehicles [ base ] [ n ] [ 1 ] ;
26908: LD_ADDR_VAR 0 3
26912: PUSH
26913: LD_VAR 0 3
26917: PUSH
26918: LD_VAR 0 24
26922: PUSH
26923: LD_VAR 0 14
26927: ARRAY
26928: PUSH
26929: LD_VAR 0 22
26933: ARRAY
26934: PUSH
26935: LD_INT 1
26937: ARRAY
26938: ADD
26939: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff remote_driver_vehicles [ base ] [ n ] [ 1 ] ;
26940: LD_ADDR_VAR 0 18
26944: PUSH
26945: LD_VAR 0 18
26949: PUSH
26950: LD_VAR 0 24
26954: PUSH
26955: LD_VAR 0 14
26959: ARRAY
26960: PUSH
26961: LD_VAR 0 22
26965: ARRAY
26966: PUSH
26967: LD_INT 1
26969: ARRAY
26970: DIFF
26971: ST_TO_ADDR
// temp_list_2 = Delete ( remote_driver_vehicles [ base ] , n ) ;
26972: LD_ADDR_VAR 0 17
26976: PUSH
26977: LD_VAR 0 24
26981: PUSH
26982: LD_VAR 0 14
26986: ARRAY
26987: PPUSH
26988: LD_VAR 0 22
26992: PPUSH
26993: CALL_OW 3
26997: ST_TO_ADDR
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list_2 ) ;
26998: LD_ADDR_VAR 0 24
27002: PUSH
27003: LD_VAR 0 24
27007: PPUSH
27008: LD_VAR 0 14
27012: PPUSH
27013: LD_VAR 0 17
27017: PPUSH
27018: CALL_OW 1
27022: ST_TO_ADDR
// end ; end else
27023: GO 27047
// begin remote_driver_vehicles = Replace ( remote_driver_vehicles , base , [ ] ) ;
27025: LD_ADDR_VAR 0 24
27029: PUSH
27030: LD_VAR 0 24
27034: PPUSH
27035: LD_VAR 0 14
27039: PPUSH
27040: EMPTY
27041: PPUSH
27042: CALL_OW 1
27046: ST_TO_ADDR
// end ; temp_list = [ ] ;
27047: LD_ADDR_VAR 0 4
27051: PUSH
27052: EMPTY
27053: ST_TO_ADDR
// for i in ai_vehicles_being_repaired [ base ] do
27054: LD_ADDR_VAR 0 2
27058: PUSH
27059: LD_EXP 80
27063: PUSH
27064: LD_VAR 0 14
27068: ARRAY
27069: PUSH
27070: FOR_IN
27071: IFFALSE 27106
// if GetLives ( i ) < 1000 then
27073: LD_VAR 0 2
27077: PPUSH
27078: CALL_OW 256
27082: PUSH
27083: LD_INT 1000
27085: LESS
27086: IFFALSE 27104
// temp_list = temp_list ^ i ;
27088: LD_ADDR_VAR 0 4
27092: PUSH
27093: LD_VAR 0 4
27097: PUSH
27098: LD_VAR 0 2
27102: ADD
27103: ST_TO_ADDR
27104: GO 27070
27106: POP
27107: POP
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
27108: LD_ADDR_EXP 80
27112: PUSH
27113: LD_EXP 80
27117: PPUSH
27118: LD_VAR 0 14
27122: PPUSH
27123: LD_VAR 0 4
27127: PPUSH
27128: CALL_OW 1
27132: ST_TO_ADDR
// temp_list = [ ] ;
27133: LD_ADDR_VAR 0 4
27137: PUSH
27138: EMPTY
27139: ST_TO_ADDR
// for i in ai_refuel_vehicles_list [ base ] diff ai_vehicles_being_repaired [ base ] do
27140: LD_ADDR_VAR 0 2
27144: PUSH
27145: LD_EXP 55
27149: PUSH
27150: LD_VAR 0 14
27154: ARRAY
27155: PUSH
27156: LD_EXP 80
27160: PUSH
27161: LD_VAR 0 14
27165: ARRAY
27166: DIFF
27167: PUSH
27168: FOR_IN
27169: IFFALSE 27204
// if GetFuel ( i ) < 95 then
27171: LD_VAR 0 2
27175: PPUSH
27176: CALL_OW 261
27180: PUSH
27181: LD_INT 95
27183: LESS
27184: IFFALSE 27202
// temp_list = temp_list ^ i ;
27186: LD_ADDR_VAR 0 4
27190: PUSH
27191: LD_VAR 0 4
27195: PUSH
27196: LD_VAR 0 2
27200: ADD
27201: ST_TO_ADDR
27202: GO 27168
27204: POP
27205: POP
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
27206: LD_ADDR_EXP 55
27210: PUSH
27211: LD_EXP 55
27215: PPUSH
27216: LD_VAR 0 14
27220: PPUSH
27221: LD_VAR 0 4
27225: PPUSH
27226: CALL_OW 1
27230: ST_TO_ADDR
// if under_attack or destroy_gensher_base then
27231: LD_VAR 0 10
27235: PUSH
27236: LD_VAR 0 19
27240: OR
27241: IFFALSE 28644
// begin vehicles_list = ai_vehicles_defend [ base ] diff ai_vehicles_being_repaired [ base ] ;
27243: LD_ADDR_VAR 0 8
27247: PUSH
27248: LD_EXP 40
27252: PUSH
27253: LD_VAR 0 14
27257: ARRAY
27258: PUSH
27259: LD_EXP 80
27263: PUSH
27264: LD_VAR 0 14
27268: ARRAY
27269: DIFF
27270: ST_TO_ADDR
// case base of 1 :
27271: LD_VAR 0 14
27275: PUSH
27276: LD_INT 1
27278: DOUBLE
27279: EQUAL
27280: IFTRUE 27284
27282: GO 27926
27284: POP
// begin repeat if game_phase = 1 then
27285: LD_EXP 89
27289: PUSH
27290: LD_INT 1
27292: EQUAL
27293: IFFALSE 27297
// break ;
27295: GO 27924
// temp_list = [ ] ;
27297: LD_ADDR_VAR 0 4
27301: PUSH
27302: EMPTY
27303: ST_TO_ADDR
// if destroy_gensher_base then
27304: LD_VAR 0 19
27308: IFFALSE 27375
// for i in original_gensher_people ^ Gensher do
27310: LD_ADDR_VAR 0 2
27314: PUSH
27315: LD_EXP 83
27319: PUSH
27320: LD_EXP 24
27324: ADD
27325: PUSH
27326: FOR_IN
27327: IFFALSE 27373
// if IsPlaced ( i ) and GetY ( i ) <= 70 then
27329: LD_VAR 0 2
27333: PPUSH
27334: CALL_OW 305
27338: PUSH
27339: LD_VAR 0 2
27343: PPUSH
27344: CALL_OW 251
27348: PUSH
27349: LD_INT 70
27351: LESSEQUAL
27352: AND
27353: IFFALSE 27371
// temp_list = temp_list ^ i ;
27355: LD_ADDR_VAR 0 4
27359: PUSH
27360: LD_VAR 0 4
27364: PUSH
27365: LD_VAR 0 2
27369: ADD
27370: ST_TO_ADDR
27371: GO 27326
27373: POP
27374: POP
// if temp_list > 0 then
27375: LD_VAR 0 4
27379: PUSH
27380: LD_INT 0
27382: GREATER
27383: IFFALSE 27595
// begin temp_list_3 = [ [ 105 , 40 ] , [ 98 , 44 ] , [ 90 , 44 ] , [ 82 , 46 ] , [ 78 , 52 ] , [ 79 , 61 ] ] ;
27385: LD_ADDR_VAR 0 6
27389: PUSH
27390: LD_INT 105
27392: PUSH
27393: LD_INT 40
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 98
27402: PUSH
27403: LD_INT 44
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 90
27412: PUSH
27413: LD_INT 44
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 82
27422: PUSH
27423: LD_INT 46
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 78
27432: PUSH
27433: LD_INT 52
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 79
27442: PUSH
27443: LD_INT 61
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// for i in vehicles_list do
27458: LD_ADDR_VAR 0 2
27462: PUSH
27463: LD_VAR 0 8
27467: PUSH
27468: FOR_IN
27469: IFFALSE 27591
// begin temp_unit = AllNearestUnitToUnit ( temp_list , i ) ;
27471: LD_ADDR_VAR 0 7
27475: PUSH
27476: LD_VAR 0 4
27480: PPUSH
27481: LD_VAR 0 2
27485: PPUSH
27486: CALL_OW 75
27490: ST_TO_ADDR
// if GetDistUnits ( i , temp_unit ) <= 6 then
27491: LD_VAR 0 2
27495: PPUSH
27496: LD_VAR 0 7
27500: PPUSH
27501: CALL_OW 296
27505: PUSH
27506: LD_INT 6
27508: LESSEQUAL
27509: IFFALSE 27542
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) else
27511: LD_VAR 0 2
27515: PPUSH
27516: LD_VAR 0 7
27520: PPUSH
27521: CALL_OW 250
27525: PPUSH
27526: LD_VAR 0 7
27530: PPUSH
27531: CALL_OW 251
27535: PPUSH
27536: CALL_OW 114
27540: GO 27589
// begin temp_list = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
27542: LD_ADDR_VAR 0 4
27546: PUSH
27547: LD_VAR 0 6
27551: PPUSH
27552: LD_VAR 0 2
27556: PPUSH
27557: CALL 30524 0 2
27561: ST_TO_ADDR
// ComMoveXY ( i , temp_list [ 1 ] , temp_list [ 2 ] ) ;
27562: LD_VAR 0 2
27566: PPUSH
27567: LD_VAR 0 4
27571: PUSH
27572: LD_INT 1
27574: ARRAY
27575: PPUSH
27576: LD_VAR 0 4
27580: PUSH
27581: LD_INT 2
27583: ARRAY
27584: PPUSH
27585: CALL_OW 111
// end ; end ;
27589: GO 27468
27591: POP
27592: POP
// end else
27593: GO 27920
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , am_vehicle_defend_area ] ] ) ;
27595: LD_ADDR_VAR 0 4
27599: PUSH
27600: LD_INT 81
27602: PUSH
27603: LD_VAR 0 1
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 95
27614: PUSH
27615: LD_INT 11
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PPUSH
27626: CALL_OW 69
27630: ST_TO_ADDR
// temp_list = DangerousUnits ( temp_list ) ;
27631: LD_ADDR_VAR 0 4
27635: PUSH
27636: LD_VAR 0 4
27640: PPUSH
27641: CALL 40978 0 1
27645: ST_TO_ADDR
// if temp_list > 0 then
27646: LD_VAR 0 4
27650: PUSH
27651: LD_INT 0
27653: GREATER
27654: IFFALSE 27724
// begin for i in vehicles_list do
27656: LD_ADDR_VAR 0 2
27660: PUSH
27661: LD_VAR 0 8
27665: PUSH
27666: FOR_IN
27667: IFFALSE 27720
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
27669: LD_ADDR_VAR 0 7
27673: PUSH
27674: LD_VAR 0 4
27678: PPUSH
27679: LD_VAR 0 2
27683: PPUSH
27684: CALL_OW 74
27688: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27689: LD_VAR 0 2
27693: PPUSH
27694: LD_VAR 0 7
27698: PPUSH
27699: CALL_OW 250
27703: PPUSH
27704: LD_VAR 0 7
27708: PPUSH
27709: CALL_OW 251
27713: PPUSH
27714: CALL_OW 114
// end ;
27718: GO 27666
27720: POP
27721: POP
// end else
27722: GO 27920
// if destroy_gensher_base then
27724: LD_VAR 0 19
27728: IFFALSE 27920
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , gensher_base ] ] ) ;
27730: LD_ADDR_VAR 0 4
27734: PUSH
27735: LD_INT 81
27737: PUSH
27738: LD_VAR 0 1
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 95
27749: PUSH
27750: LD_INT 7
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PPUSH
27761: CALL_OW 69
27765: ST_TO_ADDR
// temp_list_2 = DangerousUnits ( temp_list ) ;
27766: LD_ADDR_VAR 0 17
27770: PUSH
27771: LD_VAR 0 4
27775: PPUSH
27776: CALL 40978 0 1
27780: ST_TO_ADDR
// if temp_list_2 > 0 then
27781: LD_VAR 0 17
27785: PUSH
27786: LD_INT 0
27788: GREATER
27789: IFFALSE 27859
// begin for i in vehicles_list do
27791: LD_ADDR_VAR 0 2
27795: PUSH
27796: LD_VAR 0 8
27800: PUSH
27801: FOR_IN
27802: IFFALSE 27855
// begin temp_unit = NearestUnitToUnit ( temp_list_2 , i ) ;
27804: LD_ADDR_VAR 0 7
27808: PUSH
27809: LD_VAR 0 17
27813: PPUSH
27814: LD_VAR 0 2
27818: PPUSH
27819: CALL_OW 74
27823: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27824: LD_VAR 0 2
27828: PPUSH
27829: LD_VAR 0 7
27833: PPUSH
27834: CALL_OW 250
27838: PPUSH
27839: LD_VAR 0 7
27843: PPUSH
27844: CALL_OW 251
27848: PPUSH
27849: CALL_OW 114
// end ;
27853: GO 27801
27855: POP
27856: POP
// end else
27857: GO 27920
// if temp_list > 0 then
27859: LD_VAR 0 4
27863: PUSH
27864: LD_INT 0
27866: GREATER
27867: IFFALSE 27920
// begin for i in vehicles_list do
27869: LD_ADDR_VAR 0 2
27873: PUSH
27874: LD_VAR 0 8
27878: PUSH
27879: FOR_IN
27880: IFFALSE 27918
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
27882: LD_ADDR_VAR 0 7
27886: PUSH
27887: LD_VAR 0 4
27891: PPUSH
27892: LD_VAR 0 2
27896: PPUSH
27897: CALL_OW 74
27901: ST_TO_ADDR
// ComAttackUnit ( i , temp_unit ) ;
27902: LD_VAR 0 2
27906: PPUSH
27907: LD_VAR 0 7
27911: PPUSH
27912: CALL_OW 115
// end ;
27916: GO 27879
27918: POP
27919: POP
// end ; end ; end ; until true ;
27920: LD_INT 1
27922: IFFALSE 27285
// end ; 2 :
27924: GO 28642
27926: LD_INT 2
27928: DOUBLE
27929: EQUAL
27930: IFTRUE 27934
27932: GO 27937
27934: POP
// begin end ; 3 :
27935: GO 28642
27937: LD_INT 3
27939: DOUBLE
27940: EQUAL
27941: IFTRUE 27945
27943: GO 28641
27945: POP
// begin temp_list = FilterAllUnits ( [ f_enemy , side ] ) ;
27946: LD_ADDR_VAR 0 4
27950: PUSH
27951: LD_INT 81
27953: PUSH
27954: LD_VAR 0 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PPUSH
27963: CALL_OW 69
27967: ST_TO_ADDR
// temp_list = ListFilterNearArea ( temp_list , GetBaseArea ( base ) ) ;
27968: LD_ADDR_VAR 0 4
27972: PUSH
27973: LD_VAR 0 4
27977: PPUSH
27978: LD_VAR 0 14
27982: PPUSH
27983: CALL 12639 0 1
27987: PPUSH
27988: CALL 24214 0 2
27992: ST_TO_ADDR
// temp_list = DangerousUnits ( temp_list ) ;
27993: LD_ADDR_VAR 0 4
27997: PUSH
27998: LD_VAR 0 4
28002: PPUSH
28003: CALL 40978 0 1
28007: ST_TO_ADDR
// temp_list_2 = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , Ru_backdoor_area ] ] ) ;
28008: LD_ADDR_VAR 0 17
28012: PUSH
28013: LD_INT 81
28015: PUSH
28016: LD_VAR 0 1
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 95
28027: PUSH
28028: LD_INT 13
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PPUSH
28039: CALL_OW 69
28043: ST_TO_ADDR
// temp_list_2 = DangerousUnits ( temp_list_2 ) ;
28044: LD_ADDR_VAR 0 17
28048: PUSH
28049: LD_VAR 0 17
28053: PPUSH
28054: CALL 40978 0 1
28058: ST_TO_ADDR
// temp_list_3 = [ [ 53 , 80 ] , [ 61 , 80 ] , [ 63 , 73 ] , [ 67 , 66 ] , [ 67 , 59 ] ] ;
28059: LD_ADDR_VAR 0 6
28063: PUSH
28064: LD_INT 53
28066: PUSH
28067: LD_INT 80
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 61
28076: PUSH
28077: LD_INT 80
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 63
28086: PUSH
28087: LD_INT 73
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 67
28096: PUSH
28097: LD_INT 66
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 67
28106: PUSH
28107: LD_INT 59
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: ST_TO_ADDR
// temp_list_4 = [ [ 53 , 80 ] , [ 61 , 91 ] , [ 70 , 97 ] , [ 78 , 99 ] , [ 88 , 98 ] ] ;
28121: LD_ADDR_VAR 0 20
28125: PUSH
28126: LD_INT 53
28128: PUSH
28129: LD_INT 80
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 61
28138: PUSH
28139: LD_INT 91
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 70
28148: PUSH
28149: LD_INT 97
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 78
28158: PUSH
28159: LD_INT 99
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 88
28168: PUSH
28169: LD_INT 98
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: ST_TO_ADDR
// if temp_list_2 >= temp_list then
28183: LD_VAR 0 17
28187: PUSH
28188: LD_VAR 0 4
28192: GREATEREQUAL
28193: IFFALSE 28336
// begin if temp_list_2 > 0 then
28195: LD_VAR 0 17
28199: PUSH
28200: LD_INT 0
28202: GREATER
28203: IFFALSE 28334
// begin for i in vehicles_list do
28205: LD_ADDR_VAR 0 2
28209: PUSH
28210: LD_VAR 0 8
28214: PUSH
28215: FOR_IN
28216: IFFALSE 28332
// if IsInArea ( i , Ru_base ) then
28218: LD_VAR 0 2
28222: PPUSH
28223: LD_INT 3
28225: PPUSH
28226: CALL_OW 308
28230: IFFALSE 28281
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
28232: LD_ADDR_VAR 0 21
28236: PUSH
28237: LD_VAR 0 6
28241: PPUSH
28242: LD_VAR 0 2
28246: PPUSH
28247: CALL 30524 0 2
28251: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28252: LD_VAR 0 2
28256: PPUSH
28257: LD_VAR 0 21
28261: PUSH
28262: LD_INT 1
28264: ARRAY
28265: PPUSH
28266: LD_VAR 0 21
28270: PUSH
28271: LD_INT 2
28273: ARRAY
28274: PPUSH
28275: CALL_OW 114
// end else
28279: GO 28330
// begin temp_unit = NearestUnitToUnit ( temp_list_2 , i ) ;
28281: LD_ADDR_VAR 0 7
28285: PUSH
28286: LD_VAR 0 17
28290: PPUSH
28291: LD_VAR 0 2
28295: PPUSH
28296: CALL_OW 74
28300: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28301: LD_VAR 0 2
28305: PPUSH
28306: LD_VAR 0 7
28310: PPUSH
28311: CALL_OW 250
28315: PPUSH
28316: LD_VAR 0 7
28320: PPUSH
28321: CALL_OW 251
28325: PPUSH
28326: CALL_OW 114
// end ;
28330: GO 28215
28332: POP
28333: POP
// end ; end else
28334: GO 28639
// begin if temp_list > 0 then
28336: LD_VAR 0 4
28340: PUSH
28341: LD_INT 0
28343: GREATER
28344: IFFALSE 28639
// begin k = 0 ;
28346: LD_ADDR_VAR 0 12
28350: PUSH
28351: LD_INT 0
28353: ST_TO_ADDR
// for i in vehicles_list do
28354: LD_ADDR_VAR 0 2
28358: PUSH
28359: LD_VAR 0 8
28363: PUSH
28364: FOR_IN
28365: IFFALSE 28637
// begin k = k + 1 ;
28367: LD_ADDR_VAR 0 12
28371: PUSH
28372: LD_VAR 0 12
28376: PUSH
28377: LD_INT 1
28379: PLUS
28380: ST_TO_ADDR
// if k mod 2 = 0 then
28381: LD_VAR 0 12
28385: PUSH
28386: LD_INT 2
28388: MOD
28389: PUSH
28390: LD_INT 0
28392: EQUAL
28393: IFFALSE 28509
// begin if IsInArea ( i , Ru_base ) then
28395: LD_VAR 0 2
28399: PPUSH
28400: LD_INT 3
28402: PPUSH
28403: CALL_OW 308
28407: IFFALSE 28458
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
28409: LD_ADDR_VAR 0 21
28413: PUSH
28414: LD_VAR 0 6
28418: PPUSH
28419: LD_VAR 0 2
28423: PPUSH
28424: CALL 30524 0 2
28428: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_VAR 0 21
28438: PUSH
28439: LD_INT 1
28441: ARRAY
28442: PPUSH
28443: LD_VAR 0 21
28447: PUSH
28448: LD_INT 2
28450: ARRAY
28451: PPUSH
28452: CALL_OW 114
// end else
28456: GO 28507
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
28458: LD_ADDR_VAR 0 7
28462: PUSH
28463: LD_VAR 0 4
28467: PPUSH
28468: LD_VAR 0 2
28472: PPUSH
28473: CALL_OW 74
28477: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28478: LD_VAR 0 2
28482: PPUSH
28483: LD_VAR 0 7
28487: PPUSH
28488: CALL_OW 250
28492: PPUSH
28493: LD_VAR 0 7
28497: PPUSH
28498: CALL_OW 251
28502: PPUSH
28503: CALL_OW 114
// end ; end else
28507: GO 28635
// begin if IsInArea ( i , Ru_base ) or IsInArea ( i , Ru_base_south ) then
28509: LD_VAR 0 2
28513: PPUSH
28514: LD_INT 3
28516: PPUSH
28517: CALL_OW 308
28521: PUSH
28522: LD_VAR 0 2
28526: PPUSH
28527: LD_INT 19
28529: PPUSH
28530: CALL_OW 308
28534: OR
28535: IFFALSE 28586
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_4 , i ) ;
28537: LD_ADDR_VAR 0 21
28541: PUSH
28542: LD_VAR 0 20
28546: PPUSH
28547: LD_VAR 0 2
28551: PPUSH
28552: CALL 30524 0 2
28556: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28557: LD_VAR 0 2
28561: PPUSH
28562: LD_VAR 0 21
28566: PUSH
28567: LD_INT 1
28569: ARRAY
28570: PPUSH
28571: LD_VAR 0 21
28575: PUSH
28576: LD_INT 2
28578: ARRAY
28579: PPUSH
28580: CALL_OW 114
// end else
28584: GO 28635
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
28586: LD_ADDR_VAR 0 7
28590: PUSH
28591: LD_VAR 0 4
28595: PPUSH
28596: LD_VAR 0 2
28600: PPUSH
28601: CALL_OW 74
28605: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28606: LD_VAR 0 2
28610: PPUSH
28611: LD_VAR 0 7
28615: PPUSH
28616: CALL_OW 250
28620: PPUSH
28621: LD_VAR 0 7
28625: PPUSH
28626: CALL_OW 251
28630: PPUSH
28631: CALL_OW 114
// end ; end ; end ;
28635: GO 28364
28637: POP
28638: POP
// end ; end ; end ; end ;
28639: GO 28642
28641: POP
// end else
28642: GO 29031
// begin area = GetBaseArea ( base ) ;
28644: LD_ADDR_VAR 0 15
28648: PUSH
28649: LD_VAR 0 14
28653: PPUSH
28654: CALL 12639 0 1
28658: ST_TO_ADDR
// if IsOk ( ai_depot [ base ] ) then
28659: LD_EXP 35
28663: PUSH
28664: LD_VAR 0 14
28668: ARRAY
28669: PPUSH
28670: CALL_OW 302
28674: IFFALSE 28940
// begin temp_list = ai_refuel_vehicles_list [ base ] ;
28676: LD_ADDR_VAR 0 4
28680: PUSH
28681: LD_EXP 55
28685: PUSH
28686: LD_VAR 0 14
28690: ARRAY
28691: ST_TO_ADDR
// for i in ai_vehicles_defend [ base ] diff ai_refuel_vehicles_list [ base ] do
28692: LD_ADDR_VAR 0 2
28696: PUSH
28697: LD_EXP 40
28701: PUSH
28702: LD_VAR 0 14
28706: ARRAY
28707: PUSH
28708: LD_EXP 55
28712: PUSH
28713: LD_VAR 0 14
28717: ARRAY
28718: DIFF
28719: PUSH
28720: FOR_IN
28721: IFFALSE 28771
// if GetFuel ( i ) < 70 and GetEngine ( i ) = engine_combustion then
28723: LD_VAR 0 2
28727: PPUSH
28728: CALL_OW 261
28732: PUSH
28733: LD_INT 70
28735: LESS
28736: PUSH
28737: LD_VAR 0 2
28741: PPUSH
28742: CALL_OW 262
28746: PUSH
28747: LD_INT 1
28749: EQUAL
28750: AND
28751: IFFALSE 28769
// temp_list = temp_list ^ i ;
28753: LD_ADDR_VAR 0 4
28757: PUSH
28758: LD_VAR 0 4
28762: PUSH
28763: LD_VAR 0 2
28767: ADD
28768: ST_TO_ADDR
28769: GO 28720
28771: POP
28772: POP
// temp_list = temp_list diff ai_vehicles_being_repaired [ base ] ;
28773: LD_ADDR_VAR 0 4
28777: PUSH
28778: LD_VAR 0 4
28782: PUSH
28783: LD_EXP 80
28787: PUSH
28788: LD_VAR 0 14
28792: ARRAY
28793: DIFF
28794: ST_TO_ADDR
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
28795: LD_ADDR_EXP 55
28799: PUSH
28800: LD_EXP 55
28804: PPUSH
28805: LD_VAR 0 14
28809: PPUSH
28810: LD_VAR 0 4
28814: PPUSH
28815: CALL_OW 1
28819: ST_TO_ADDR
// for i in ai_refuel_vehicles_list [ base ] do
28820: LD_ADDR_VAR 0 2
28824: PUSH
28825: LD_EXP 55
28829: PUSH
28830: LD_VAR 0 14
28834: ARRAY
28835: PUSH
28836: FOR_IN
28837: IFFALSE 28938
// begin if IsInArea ( i , area ) then
28839: LD_VAR 0 2
28843: PPUSH
28844: LD_VAR 0 15
28848: PPUSH
28849: CALL_OW 308
28853: IFFALSE 28897
// begin ComMoveUnit ( i , ai_depot [ base ] ) ;
28855: LD_VAR 0 2
28859: PPUSH
28860: LD_EXP 35
28864: PUSH
28865: LD_VAR 0 14
28869: ARRAY
28870: PPUSH
28871: CALL_OW 112
// AddComRefuel ( i , ai_depot [ base ] ) ;
28875: LD_VAR 0 2
28879: PPUSH
28880: LD_EXP 35
28884: PUSH
28885: LD_VAR 0 14
28889: ARRAY
28890: PPUSH
28891: CALL_OW 210
// end else
28895: GO 28936
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
28897: LD_VAR 0 2
28901: PPUSH
28902: LD_EXP 42
28906: PUSH
28907: LD_VAR 0 14
28911: ARRAY
28912: PUSH
28913: LD_INT 1
28915: ARRAY
28916: PPUSH
28917: LD_EXP 42
28921: PUSH
28922: LD_VAR 0 14
28926: ARRAY
28927: PUSH
28928: LD_INT 2
28930: ARRAY
28931: PPUSH
28932: CALL_OW 114
// end ;
28936: GO 28836
28938: POP
28939: POP
// end ; for i in ai_vehicles_defend [ base ] diff ai_refuel_vehicles_list [ base ] do
28940: LD_ADDR_VAR 0 2
28944: PUSH
28945: LD_EXP 40
28949: PUSH
28950: LD_VAR 0 14
28954: ARRAY
28955: PUSH
28956: LD_EXP 55
28960: PUSH
28961: LD_VAR 0 14
28965: ARRAY
28966: DIFF
28967: PUSH
28968: FOR_IN
28969: IFFALSE 29029
// if not IsInArea ( i , area ) then
28971: LD_VAR 0 2
28975: PPUSH
28976: LD_VAR 0 15
28980: PPUSH
28981: CALL_OW 308
28985: NOT
28986: IFFALSE 29027
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
28988: LD_VAR 0 2
28992: PPUSH
28993: LD_EXP 42
28997: PUSH
28998: LD_VAR 0 14
29002: ARRAY
29003: PUSH
29004: LD_INT 1
29006: ARRAY
29007: PPUSH
29008: LD_EXP 42
29012: PUSH
29013: LD_VAR 0 14
29017: ARRAY
29018: PUSH
29019: LD_INT 2
29021: ARRAY
29022: PPUSH
29023: CALL_OW 114
29027: GO 28968
29029: POP
29030: POP
// end ; if mechanics_list = 0 and remote_mechanics = 0 then
29031: LD_VAR 0 3
29035: PUSH
29036: LD_INT 0
29038: EQUAL
29039: PUSH
29040: LD_VAR 0 18
29044: PUSH
29045: LD_INT 0
29047: EQUAL
29048: AND
29049: IFFALSE 29053
// continue ;
29051: GO 25766
// allowed_to_repair_vehicles = UnitFilter ( ai_vehicles_defend [ base ] ^ ( ai_crane [ base ] diff 0 ) , [ [ f_not , [ f_lives , 1000 ] ] , [ f_inarea , GetBaseArea ( base ) ] ] ) ;
29053: LD_ADDR_VAR 0 9
29057: PUSH
29058: LD_EXP 40
29062: PUSH
29063: LD_VAR 0 14
29067: ARRAY
29068: PUSH
29069: LD_EXP 71
29073: PUSH
29074: LD_VAR 0 14
29078: ARRAY
29079: PUSH
29080: LD_INT 0
29082: DIFF
29083: ADD
29084: PPUSH
29085: LD_INT 3
29087: PUSH
29088: LD_INT 24
29090: PUSH
29091: LD_INT 1000
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 95
29104: PUSH
29105: LD_VAR 0 14
29109: PPUSH
29110: CALL 12639 0 1
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PPUSH
29123: CALL_OW 72
29127: ST_TO_ADDR
// if not under_attack then
29128: LD_VAR 0 10
29132: NOT
29133: IFFALSE 29204
// allowed_to_repair_vehicles = allowed_to_repair_vehicles ^ UnitFilter ( ai_cargo_bay [ base ] diff 0 , [ [ f_not , [ f_lives , 1000 ] ] , [ f_inarea , GetBaseArea ( base ) ] ] ) ;
29135: LD_ADDR_VAR 0 9
29139: PUSH
29140: LD_VAR 0 9
29144: PUSH
29145: LD_EXP 61
29149: PUSH
29150: LD_VAR 0 14
29154: ARRAY
29155: PUSH
29156: LD_INT 0
29158: DIFF
29159: PPUSH
29160: LD_INT 3
29162: PUSH
29163: LD_INT 24
29165: PUSH
29166: LD_INT 1000
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 95
29179: PUSH
29180: LD_VAR 0 14
29184: PPUSH
29185: CALL 12639 0 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PPUSH
29198: CALL_OW 72
29202: ADD
29203: ST_TO_ADDR
// allowed_to_repair_vehicles = allowed_to_repair_vehicles diff ( ai_refuel_vehicles_list [ base ] ^ ai_vehicles_being_repaired [ base ] ) ;
29204: LD_ADDR_VAR 0 9
29208: PUSH
29209: LD_VAR 0 9
29213: PUSH
29214: LD_EXP 55
29218: PUSH
29219: LD_VAR 0 14
29223: ARRAY
29224: PUSH
29225: LD_EXP 80
29229: PUSH
29230: LD_VAR 0 14
29234: ARRAY
29235: ADD
29236: DIFF
29237: ST_TO_ADDR
// if allowed_to_repair_vehicles > 0 or ai_vehicles_being_repaired [ base ] > 0 then
29238: LD_VAR 0 9
29242: PUSH
29243: LD_INT 0
29245: GREATER
29246: PUSH
29247: LD_EXP 80
29251: PUSH
29252: LD_VAR 0 14
29256: ARRAY
29257: PUSH
29258: LD_INT 0
29260: GREATER
29261: OR
29262: IFFALSE 29764
// begin if remote_mechanics > 0 then
29264: LD_VAR 0 18
29268: PUSH
29269: LD_INT 0
29271: GREATER
29272: IFFALSE 29508
// begin if under_attack then
29274: LD_VAR 0 10
29278: IFFALSE 29386
// begin for i in remote_driver_vehicles [ base ] do
29280: LD_ADDR_VAR 0 2
29284: PUSH
29285: LD_VAR 0 24
29289: PUSH
29290: LD_VAR 0 14
29294: ARRAY
29295: PUSH
29296: FOR_IN
29297: IFFALSE 29382
// if UnitFilter ( i [ 2 ] , [ f_ok ] ) = 0 and i [ 1 ] in remote_mechanics then
29299: LD_VAR 0 2
29303: PUSH
29304: LD_INT 2
29306: ARRAY
29307: PPUSH
29308: LD_INT 50
29310: PUSH
29311: EMPTY
29312: LIST
29313: PPUSH
29314: CALL_OW 72
29318: PUSH
29319: LD_INT 0
29321: EQUAL
29322: PUSH
29323: LD_VAR 0 2
29327: PUSH
29328: LD_INT 1
29330: ARRAY
29331: PUSH
29332: LD_VAR 0 18
29336: IN
29337: AND
29338: IFFALSE 29380
// begin mechanics_list = mechanics_list ^ i [ 1 ] ;
29340: LD_ADDR_VAR 0 3
29344: PUSH
29345: LD_VAR 0 3
29349: PUSH
29350: LD_VAR 0 2
29354: PUSH
29355: LD_INT 1
29357: ARRAY
29358: ADD
29359: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff i [ 1 ] ;
29360: LD_ADDR_VAR 0 18
29364: PUSH
29365: LD_VAR 0 18
29369: PUSH
29370: LD_VAR 0 2
29374: PUSH
29375: LD_INT 1
29377: ARRAY
29378: DIFF
29379: ST_TO_ADDR
// end ;
29380: GO 29296
29382: POP
29383: POP
// end else
29384: GO 29508
// begin temp_unit = true ;
29386: LD_ADDR_VAR 0 7
29390: PUSH
29391: LD_INT 1
29393: ST_TO_ADDR
// for i in remote_driver_vehicles [ base ] do
29394: LD_ADDR_VAR 0 2
29398: PUSH
29399: LD_VAR 0 24
29403: PUSH
29404: LD_VAR 0 14
29408: ARRAY
29409: PUSH
29410: FOR_IN
29411: IFFALSE 29477
// begin for k in i [ 2 ] do
29413: LD_ADDR_VAR 0 12
29417: PUSH
29418: LD_VAR 0 2
29422: PUSH
29423: LD_INT 2
29425: ARRAY
29426: PUSH
29427: FOR_IN
29428: IFFALSE 29464
// if not IsInArea ( k , GetBaseArea ( base ) ) then
29430: LD_VAR 0 12
29434: PPUSH
29435: LD_VAR 0 14
29439: PPUSH
29440: CALL 12639 0 1
29444: PPUSH
29445: CALL_OW 308
29449: NOT
29450: IFFALSE 29462
// begin temp_unit = false ;
29452: LD_ADDR_VAR 0 7
29456: PUSH
29457: LD_INT 0
29459: ST_TO_ADDR
// break ;
29460: GO 29464
// end ;
29462: GO 29427
29464: POP
29465: POP
// if not temp_unit then
29466: LD_VAR 0 7
29470: NOT
29471: IFFALSE 29475
// break ;
29473: GO 29477
// end ;
29475: GO 29410
29477: POP
29478: POP
// if temp_unit then
29479: LD_VAR 0 7
29483: IFFALSE 29508
// begin mechanics_list = mechanics_list ^ remote_mechanics ;
29485: LD_ADDR_VAR 0 3
29489: PUSH
29490: LD_VAR 0 3
29494: PUSH
29495: LD_VAR 0 18
29499: ADD
29500: ST_TO_ADDR
// remote_mechanics = [ ] ;
29501: LD_ADDR_VAR 0 18
29505: PUSH
29506: EMPTY
29507: ST_TO_ADDR
// end ; end ; end ; if allowed_to_repair_vehicles > 0 then
29508: LD_VAR 0 9
29512: PUSH
29513: LD_INT 0
29515: GREATER
29516: IFFALSE 29733
// begin k = false ;
29518: LD_ADDR_VAR 0 12
29522: PUSH
29523: LD_INT 0
29525: ST_TO_ADDR
// if ai_vehicles_being_repaired [ base ] = 0 then
29526: LD_EXP 80
29530: PUSH
29531: LD_VAR 0 14
29535: ARRAY
29536: PUSH
29537: LD_INT 0
29539: EQUAL
29540: IFFALSE 29552
// k = true else
29542: LD_ADDR_VAR 0 12
29546: PUSH
29547: LD_INT 1
29549: ST_TO_ADDR
29550: GO 29615
// if IsOk ( ai_vehicles_being_repaired [ base ] [ 1 ] ) then
29552: LD_EXP 80
29556: PUSH
29557: LD_VAR 0 14
29561: ARRAY
29562: PUSH
29563: LD_INT 1
29565: ARRAY
29566: PPUSH
29567: CALL_OW 302
29571: IFFALSE 29615
// begin allowed_to_repair_vehicles = UnitFilter ( allowed_to_repair_vehicles , [ f_not , [ f_ok ] ] ) ;
29573: LD_ADDR_VAR 0 9
29577: PUSH
29578: LD_VAR 0 9
29582: PPUSH
29583: LD_INT 3
29585: PUSH
29586: LD_INT 50
29588: PUSH
29589: EMPTY
29590: LIST
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PPUSH
29596: CALL_OW 72
29600: ST_TO_ADDR
// k := allowed_to_repair_vehicles > 0 ;
29601: LD_ADDR_VAR 0 12
29605: PUSH
29606: LD_VAR 0 9
29610: PUSH
29611: LD_INT 0
29613: GREATER
29614: ST_TO_ADDR
// end ; if k then
29615: LD_VAR 0 12
29619: IFFALSE 29733
// begin temp_list = [ ] ;
29621: LD_ADDR_VAR 0 4
29625: PUSH
29626: EMPTY
29627: ST_TO_ADDR
// for i in allowed_to_repair_vehicles do
29628: LD_ADDR_VAR 0 2
29632: PUSH
29633: LD_VAR 0 9
29637: PUSH
29638: FOR_IN
29639: IFFALSE 29664
// temp_list = temp_list ^ GetLives ( i ) ;
29641: LD_ADDR_VAR 0 4
29645: PUSH
29646: LD_VAR 0 4
29650: PUSH
29651: LD_VAR 0 2
29655: PPUSH
29656: CALL_OW 256
29660: ADD
29661: ST_TO_ADDR
29662: GO 29638
29664: POP
29665: POP
// temp_unit = WorstFromListByList ( allowed_to_repair_vehicles , temp_list ) ;
29666: LD_ADDR_VAR 0 7
29670: PUSH
29671: LD_VAR 0 9
29675: PPUSH
29676: LD_VAR 0 4
29680: PPUSH
29681: CALL_OW 78
29685: ST_TO_ADDR
// temp_list = temp_unit ^ ai_vehicles_being_repaired [ base ] ;
29686: LD_ADDR_VAR 0 4
29690: PUSH
29691: LD_VAR 0 7
29695: PUSH
29696: LD_EXP 80
29700: PUSH
29701: LD_VAR 0 14
29705: ARRAY
29706: ADD
29707: ST_TO_ADDR
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
29708: LD_ADDR_EXP 80
29712: PUSH
29713: LD_EXP 80
29717: PPUSH
29718: LD_VAR 0 14
29722: PPUSH
29723: LD_VAR 0 4
29727: PPUSH
29728: CALL_OW 1
29732: ST_TO_ADDR
// end ; end ; ComRepairVehicle ( GetHumansOutOfUnits ( mechanics_list ) , ai_vehicles_being_repaired [ base ] [ 1 ] ) ;
29733: LD_VAR 0 3
29737: PPUSH
29738: CALL 23525 0 1
29742: PPUSH
29743: LD_EXP 80
29747: PUSH
29748: LD_VAR 0 14
29752: ARRAY
29753: PUSH
29754: LD_INT 1
29756: ARRAY
29757: PPUSH
29758: CALL_OW 129
// end else
29762: GO 29829
// begin DistributeHumansToBuildings ( base , mechanics_list , UnitFilter ( ai_facts [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_mechanic , 6 , true , false ) ;
29764: LD_VAR 0 14
29768: PPUSH
29769: LD_VAR 0 3
29773: PPUSH
29774: LD_EXP 48
29778: PUSH
29779: LD_VAR 0 14
29783: ARRAY
29784: PPUSH
29785: LD_INT 50
29787: PUSH
29788: EMPTY
29789: LIST
29790: PUSH
29791: LD_INT 3
29793: PUSH
29794: LD_INT 57
29796: PUSH
29797: EMPTY
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PPUSH
29808: CALL_OW 72
29812: PPUSH
29813: LD_INT 3
29815: PPUSH
29816: LD_INT 6
29818: PPUSH
29819: LD_INT 1
29821: PPUSH
29822: LD_INT 0
29824: PPUSH
29825: CALL 15596 0 7
// end ; if remote_driver_vehicles [ base ] > 0 then
29829: LD_VAR 0 24
29833: PUSH
29834: LD_VAR 0 14
29838: ARRAY
29839: PUSH
29840: LD_INT 0
29842: GREATER
29843: IFFALSE 30379
// begin if not IsOk ( ai_control_tower [ base ] ) then
29845: LD_EXP 57
29849: PUSH
29850: LD_VAR 0 14
29854: ARRAY
29855: PPUSH
29856: CALL_OW 302
29860: NOT
29861: IFFALSE 29930
// begin DistributeHumansToBuildings ( base , remote_mechanics , UnitFilter ( ai_facts [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_mechanic , 6 , true , false ) ;
29863: LD_VAR 0 14
29867: PPUSH
29868: LD_VAR 0 18
29872: PPUSH
29873: LD_EXP 48
29877: PUSH
29878: LD_VAR 0 14
29882: ARRAY
29883: PPUSH
29884: LD_INT 50
29886: PUSH
29887: EMPTY
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 57
29895: PUSH
29896: EMPTY
29897: LIST
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PPUSH
29907: CALL_OW 72
29911: PPUSH
29912: LD_INT 3
29914: PPUSH
29915: LD_INT 6
29917: PPUSH
29918: LD_INT 1
29920: PPUSH
29921: LD_INT 0
29923: PPUSH
29924: CALL 15596 0 7
// end else
29928: GO 30379
// begin for i in remote_driver_vehicles [ base ] do
29930: LD_ADDR_VAR 0 2
29934: PUSH
29935: LD_VAR 0 24
29939: PUSH
29940: LD_VAR 0 14
29944: ARRAY
29945: PUSH
29946: FOR_IN
29947: IFFALSE 30377
// begin if not i [ 1 ] in remote_mechanics then
29949: LD_VAR 0 2
29953: PUSH
29954: LD_INT 1
29956: ARRAY
29957: PUSH
29958: LD_VAR 0 18
29962: IN
29963: NOT
29964: IFFALSE 29968
// continue ;
29966: GO 29946
// if GetClass ( i [ 1 ] ) <> class_mechanic then
29968: LD_VAR 0 2
29972: PUSH
29973: LD_INT 1
29975: ARRAY
29976: PPUSH
29977: CALL_OW 257
29981: PUSH
29982: LD_INT 3
29984: NONEQUAL
29985: IFFALSE 30193
// begin temp_unit = 0 ;
29987: LD_ADDR_VAR 0 7
29991: PUSH
29992: LD_INT 0
29994: ST_TO_ADDR
// for k in ai_facts [ base ] do
29995: LD_ADDR_VAR 0 12
29999: PUSH
30000: LD_EXP 48
30004: PUSH
30005: LD_VAR 0 14
30009: ARRAY
30010: PUSH
30011: FOR_IN
30012: IFFALSE 30054
// if IsOk ( k ) and UnitsInside ( k ) < 6 then
30014: LD_VAR 0 12
30018: PPUSH
30019: CALL_OW 302
30023: PUSH
30024: LD_VAR 0 12
30028: PPUSH
30029: CALL_OW 313
30033: PUSH
30034: LD_INT 6
30036: LESS
30037: AND
30038: IFFALSE 30052
// begin temp_unit = k ;
30040: LD_ADDR_VAR 0 7
30044: PUSH
30045: LD_VAR 0 12
30049: ST_TO_ADDR
// break ;
30050: GO 30054
// end ;
30052: GO 30011
30054: POP
30055: POP
// if temp_unit > 0 then
30056: LD_VAR 0 7
30060: PUSH
30061: LD_INT 0
30063: GREATER
30064: IFFALSE 30191
// begin if IsInUnit ( i [ 1 ] ) = temp_unit then
30066: LD_VAR 0 2
30070: PUSH
30071: LD_INT 1
30073: ARRAY
30074: PPUSH
30075: CALL_OW 310
30079: PUSH
30080: LD_VAR 0 7
30084: EQUAL
30085: IFFALSE 30105
// ComChangeProfession ( i [ 1 ] , class_mechanic ) else
30087: LD_VAR 0 2
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: LD_INT 3
30098: PPUSH
30099: CALL_OW 123
30103: GO 30191
// begin case GetType ( IsInUnit ( i [ 1 ] ) ) of unit_building :
30105: LD_VAR 0 2
30109: PUSH
30110: LD_INT 1
30112: ARRAY
30113: PPUSH
30114: CALL_OW 310
30118: PPUSH
30119: CALL_OW 247
30123: PUSH
30124: LD_INT 3
30126: DOUBLE
30127: EQUAL
30128: IFTRUE 30132
30130: GO 30148
30132: POP
// ComExitBuilding ( i [ 1 ] ) ; unit_vehicle :
30133: LD_VAR 0 2
30137: PUSH
30138: LD_INT 1
30140: ARRAY
30141: PPUSH
30142: CALL_OW 122
30146: GO 30191
30148: LD_INT 2
30150: DOUBLE
30151: EQUAL
30152: IFTRUE 30156
30154: GO 30172
30156: POP
// ComExitVehicle ( i [ 1 ] ) ; else
30157: LD_VAR 0 2
30161: PUSH
30162: LD_INT 1
30164: ARRAY
30165: PPUSH
30166: CALL_OW 121
30170: GO 30191
30172: POP
// ComEnterUnit ( i [ 1 ] , temp_unit ) ; end ;
30173: LD_VAR 0 2
30177: PUSH
30178: LD_INT 1
30180: ARRAY
30181: PPUSH
30182: LD_VAR 0 7
30186: PPUSH
30187: CALL_OW 120
// end ; end ; end else
30191: GO 30375
// begin temp_unit = IsInUnit ( i [ 1 ] ) ;
30193: LD_ADDR_VAR 0 7
30197: PUSH
30198: LD_VAR 0 2
30202: PUSH
30203: LD_INT 1
30205: ARRAY
30206: PPUSH
30207: CALL_OW 310
30211: ST_TO_ADDR
// if temp_unit <> ai_control_tower [ base ] then
30212: LD_VAR 0 7
30216: PUSH
30217: LD_EXP 57
30221: PUSH
30222: LD_VAR 0 14
30226: ARRAY
30227: NONEQUAL
30228: IFFALSE 30315
// begin case GetType ( temp_unit ) of unit_building :
30230: LD_VAR 0 7
30234: PPUSH
30235: CALL_OW 247
30239: PUSH
30240: LD_INT 3
30242: DOUBLE
30243: EQUAL
30244: IFTRUE 30248
30246: GO 30264
30248: POP
// ComExitBuilding ( i [ 1 ] ) ; unit_vehicle :
30249: LD_VAR 0 2
30253: PUSH
30254: LD_INT 1
30256: ARRAY
30257: PPUSH
30258: CALL_OW 122
30262: GO 30313
30264: LD_INT 2
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30288
30272: POP
// ComExitVehicle ( i [ 1 ] ) ; else
30273: LD_VAR 0 2
30277: PUSH
30278: LD_INT 1
30280: ARRAY
30281: PPUSH
30282: CALL_OW 121
30286: GO 30313
30288: POP
// ComEnterUnit ( i [ 1 ] , ai_control_tower [ base ] ) ; end ;
30289: LD_VAR 0 2
30293: PUSH
30294: LD_INT 1
30296: ARRAY
30297: PPUSH
30298: LD_EXP 57
30302: PUSH
30303: LD_VAR 0 14
30307: ARRAY
30308: PPUSH
30309: CALL_OW 120
// end else
30313: GO 30375
// for k in i [ 2 ] do
30315: LD_ADDR_VAR 0 12
30319: PUSH
30320: LD_VAR 0 2
30324: PUSH
30325: LD_INT 2
30327: ARRAY
30328: PUSH
30329: FOR_IN
30330: IFFALSE 30373
// if IsControledBy ( k ) <> i [ 1 ] then
30332: LD_VAR 0 12
30336: PPUSH
30337: CALL_OW 312
30341: PUSH
30342: LD_VAR 0 2
30346: PUSH
30347: LD_INT 1
30349: ARRAY
30350: NONEQUAL
30351: IFFALSE 30371
// ComLinkTo ( k , i [ 1 ] ) ;
30353: LD_VAR 0 12
30357: PPUSH
30358: LD_VAR 0 2
30362: PUSH
30363: LD_INT 1
30365: ARRAY
30366: PPUSH
30367: CALL_OW 135
30371: GO 30329
30373: POP
30374: POP
// end ; end ;
30375: GO 29946
30377: POP
30378: POP
// end ; end ; end ;
30379: GO 25766
30381: POP
30382: POP
// until false ;
30383: LD_INT 0
30385: IFFALSE 25749
// end ;
30387: PPOPN 24
30389: END
// function MaxNumWarVehicles ( base ) ; begin
30390: LD_INT 0
30392: PPUSH
// case base of 1 :
30393: LD_VAR 0 1
30397: PUSH
30398: LD_INT 1
30400: DOUBLE
30401: EQUAL
30402: IFTRUE 30406
30404: GO 30463
30406: POP
// result = WorstFromListByList ( [ ai_mechanics_defend [ base ] + 0 , 3 ] , [ ai_mechanics_defend [ base ] + 0 , 3 ] ) ; 2 :
30407: LD_ADDR_VAR 0 2
30411: PUSH
30412: LD_EXP 32
30416: PUSH
30417: LD_VAR 0 1
30421: ARRAY
30422: PUSH
30423: LD_INT 0
30425: PLUS
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PPUSH
30434: LD_EXP 32
30438: PUSH
30439: LD_VAR 0 1
30443: ARRAY
30444: PUSH
30445: LD_INT 0
30447: PLUS
30448: PUSH
30449: LD_INT 3
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PPUSH
30456: CALL_OW 78
30460: ST_TO_ADDR
30461: GO 30519
30463: LD_INT 2
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30471
30469: GO 30482
30471: POP
// result = 0 ; 3 :
30472: LD_ADDR_VAR 0 2
30476: PUSH
30477: LD_INT 0
30479: ST_TO_ADDR
30480: GO 30519
30482: LD_INT 3
30484: DOUBLE
30485: EQUAL
30486: IFTRUE 30490
30488: GO 30518
30490: POP
// result = [ 3 , 4 , 5 ] [ difficulty ] ; end ;
30491: LD_ADDR_VAR 0 2
30495: PUSH
30496: LD_INT 3
30498: PUSH
30499: LD_INT 4
30501: PUSH
30502: LD_INT 5
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: PUSH
30510: LD_OWVAR 67
30514: ARRAY
30515: ST_TO_ADDR
30516: GO 30519
30518: POP
// end ;
30519: LD_VAR 0 2
30523: RET
// function FindNextHexOldWaypointSystem ( waypoints , un ) ; var dist , k , num , temp ; begin
30524: LD_INT 0
30526: PPUSH
30527: PPUSH
30528: PPUSH
30529: PPUSH
30530: PPUSH
// dist = GetDistUnitXY ( un , waypoints [ 1 ] [ 1 ] , waypoints [ 1 ] [ 2 ] ) ;
30531: LD_ADDR_VAR 0 4
30535: PUSH
30536: LD_VAR 0 2
30540: PPUSH
30541: LD_VAR 0 1
30545: PUSH
30546: LD_INT 1
30548: ARRAY
30549: PUSH
30550: LD_INT 1
30552: ARRAY
30553: PPUSH
30554: LD_VAR 0 1
30558: PUSH
30559: LD_INT 1
30561: ARRAY
30562: PUSH
30563: LD_INT 2
30565: ARRAY
30566: PPUSH
30567: CALL_OW 297
30571: ST_TO_ADDR
// num = 1 ;
30572: LD_ADDR_VAR 0 6
30576: PUSH
30577: LD_INT 1
30579: ST_TO_ADDR
// for k = 2 to waypoints do
30580: LD_ADDR_VAR 0 5
30584: PUSH
30585: DOUBLE
30586: LD_INT 2
30588: DEC
30589: ST_TO_ADDR
30590: LD_VAR 0 1
30594: PUSH
30595: FOR_TO
30596: IFFALSE 30677
// begin temp = GetDistUnitXY ( un , waypoints [ k ] [ 1 ] , waypoints [ k ] [ 2 ] ) ;
30598: LD_ADDR_VAR 0 7
30602: PUSH
30603: LD_VAR 0 2
30607: PPUSH
30608: LD_VAR 0 1
30612: PUSH
30613: LD_VAR 0 5
30617: ARRAY
30618: PUSH
30619: LD_INT 1
30621: ARRAY
30622: PPUSH
30623: LD_VAR 0 1
30627: PUSH
30628: LD_VAR 0 5
30632: ARRAY
30633: PUSH
30634: LD_INT 2
30636: ARRAY
30637: PPUSH
30638: CALL_OW 297
30642: ST_TO_ADDR
// if temp < dist then
30643: LD_VAR 0 7
30647: PUSH
30648: LD_VAR 0 4
30652: LESS
30653: IFFALSE 30675
// begin dist = temp ;
30655: LD_ADDR_VAR 0 4
30659: PUSH
30660: LD_VAR 0 7
30664: ST_TO_ADDR
// num = k ;
30665: LD_ADDR_VAR 0 6
30669: PUSH
30670: LD_VAR 0 5
30674: ST_TO_ADDR
// end ; end ;
30675: GO 30595
30677: POP
30678: POP
// if num < waypoints + 0 then
30679: LD_VAR 0 6
30683: PUSH
30684: LD_VAR 0 1
30688: PUSH
30689: LD_INT 0
30691: PLUS
30692: LESS
30693: IFFALSE 30709
// num = num + 1 ;
30695: LD_ADDR_VAR 0 6
30699: PUSH
30700: LD_VAR 0 6
30704: PUSH
30705: LD_INT 1
30707: PLUS
30708: ST_TO_ADDR
// result = waypoints [ num ] ;
30709: LD_ADDR_VAR 0 3
30713: PUSH
30714: LD_VAR 0 1
30718: PUSH
30719: LD_VAR 0 6
30723: ARRAY
30724: ST_TO_ADDR
// end ;
30725: LD_VAR 0 3
30729: RET
// every 0 0$1 + 0 0$0.1 do var i , temp_value , temp_unit , temp_list , base , idle_factories , fact ; var vehicle_prod_delay ;
30730: GO 30732
30732: DISABLE
30733: LD_INT 0
30735: PPUSH
30736: PPUSH
30737: PPUSH
30738: PPUSH
30739: PPUSH
30740: PPUSH
30741: PPUSH
30742: PPUSH
// begin vehicle_prod_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
30743: LD_ADDR_VAR 0 8
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: LIST
30761: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30762: LD_INT 35
30764: PPUSH
30765: CALL_OW 67
// for base in ai_bases do
30769: LD_ADDR_VAR 0 5
30773: PUSH
30774: LD_EXP 59
30778: PUSH
30779: FOR_IN
30780: IFFALSE 31606
// begin if ContactTime ( GetBaseSide ( base ) ) <= 0 0$10 and ai_vehicles_defend [ base ] >= [ 0 , 1 , 2 ] [ difficulty ] then
30782: LD_VAR 0 5
30786: PPUSH
30787: CALL 12710 0 1
30791: PPUSH
30792: CALL_OW 462
30796: PUSH
30797: LD_INT 350
30799: LESSEQUAL
30800: PUSH
30801: LD_EXP 40
30805: PUSH
30806: LD_VAR 0 5
30810: ARRAY
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: PUSH
30826: LD_OWVAR 67
30830: ARRAY
30831: GREATEREQUAL
30832: AND
30833: IFFALSE 30875
// begin vehicle_prod_delay = Replace ( vehicle_prod_delay , base , [ 1 1$15 , 0 0$45 , 0 0$30 ] [ difficulty ] ) ;
30835: LD_ADDR_VAR 0 8
30839: PUSH
30840: LD_VAR 0 8
30844: PPUSH
30845: LD_VAR 0 5
30849: PPUSH
30850: LD_INT 2625
30852: PUSH
30853: LD_INT 1575
30855: PUSH
30856: LD_INT 1050
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: LIST
30863: PUSH
30864: LD_OWVAR 67
30868: ARRAY
30869: PPUSH
30870: CALL_OW 1
30874: ST_TO_ADDR
// end ; idle_factories = [ ] ;
30875: LD_ADDR_VAR 0 6
30879: PUSH
30880: EMPTY
30881: ST_TO_ADDR
// for i in ai_facts [ base ] do
30882: LD_ADDR_VAR 0 1
30886: PUSH
30887: LD_EXP 48
30891: PUSH
30892: LD_VAR 0 5
30896: ARRAY
30897: PUSH
30898: FOR_IN
30899: IFFALSE 30960
// if BuildingStatus ( i ) = bs_idle and IsOk ( i ) and GetBType ( i ) = b_factory then
30901: LD_VAR 0 1
30905: PPUSH
30906: CALL_OW 461
30910: PUSH
30911: LD_INT 2
30913: EQUAL
30914: PUSH
30915: LD_VAR 0 1
30919: PPUSH
30920: CALL_OW 302
30924: AND
30925: PUSH
30926: LD_VAR 0 1
30930: PPUSH
30931: CALL_OW 266
30935: PUSH
30936: LD_INT 3
30938: EQUAL
30939: AND
30940: IFFALSE 30958
// idle_factories = idle_factories ^ i ;
30942: LD_ADDR_VAR 0 6
30946: PUSH
30947: LD_VAR 0 6
30951: PUSH
30952: LD_VAR 0 1
30956: ADD
30957: ST_TO_ADDR
30958: GO 30898
30960: POP
30961: POP
// if idle_factories = 0 then
30962: LD_VAR 0 6
30966: PUSH
30967: LD_INT 0
30969: EQUAL
30970: IFFALSE 30974
// continue ;
30972: GO 30779
// temp_value = false ;
30974: LD_ADDR_VAR 0 2
30978: PUSH
30979: LD_INT 0
30981: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
30982: LD_ADDR_VAR 0 1
30986: PUSH
30987: LD_EXP 39
30991: PUSH
30992: LD_VAR 0 5
30996: ARRAY
30997: PUSH
30998: FOR_IN
30999: IFFALSE 31171
// if i [ 4 ] in [ b_bunker , b_turret ] then
31001: LD_VAR 0 1
31005: PUSH
31006: LD_INT 4
31008: ARRAY
31009: PUSH
31010: LD_INT 32
31012: PUSH
31013: LD_INT 33
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: IN
31020: IFFALSE 31169
// begin temp_unit = HexInfo ( i [ 1 ] , i [ 2 ] ) ;
31022: LD_ADDR_VAR 0 3
31026: PUSH
31027: LD_VAR 0 1
31031: PUSH
31032: LD_INT 1
31034: ARRAY
31035: PPUSH
31036: LD_VAR 0 1
31040: PUSH
31041: LD_INT 2
31043: ARRAY
31044: PPUSH
31045: CALL_OW 428
31049: ST_TO_ADDR
// if GetBType ( temp_unit ) in [ b_bunker , b_turret ] and not IsConstructed ( temp_unit ) and GetBWeapon ( temp_unit ) <> i [ 7 ] then
31050: LD_VAR 0 3
31054: PPUSH
31055: CALL_OW 266
31059: PUSH
31060: LD_INT 32
31062: PUSH
31063: LD_INT 33
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: IN
31070: PUSH
31071: LD_VAR 0 3
31075: PPUSH
31076: CALL_OW 304
31080: NOT
31081: AND
31082: PUSH
31083: LD_VAR 0 3
31087: PPUSH
31088: CALL_OW 269
31092: PUSH
31093: LD_VAR 0 1
31097: PUSH
31098: LD_INT 7
31100: ARRAY
31101: NONEQUAL
31102: AND
31103: IFFALSE 31161
// for fact in idle_factories do
31105: LD_ADDR_VAR 0 7
31109: PUSH
31110: LD_VAR 0 6
31114: PUSH
31115: FOR_IN
31116: IFFALSE 31159
// if IsWeaponFactory ( fact ) then
31118: LD_VAR 0 7
31122: PPUSH
31123: CALL 31615 0 1
31127: IFFALSE 31157
// begin ComPlaceWeapon ( temp_unit , i [ 7 ] ) ;
31129: LD_VAR 0 3
31133: PPUSH
31134: LD_VAR 0 1
31138: PUSH
31139: LD_INT 7
31141: ARRAY
31142: PPUSH
31143: CALL_OW 148
// temp_value = true ;
31147: LD_ADDR_VAR 0 2
31151: PUSH
31152: LD_INT 1
31154: ST_TO_ADDR
// break ;
31155: GO 31159
// end ;
31157: GO 31115
31159: POP
31160: POP
// if temp_value then
31161: LD_VAR 0 2
31165: IFFALSE 31169
// break ;
31167: GO 31171
// end ;
31169: GO 30998
31171: POP
31172: POP
// if temp_value then
31173: LD_VAR 0 2
31177: IFFALSE 31181
// continue ;
31179: GO 30779
// if vehicle_prod_delay [ base ] > 0 0$0 or game_phase = 2 then
31181: LD_VAR 0 8
31185: PUSH
31186: LD_VAR 0 5
31190: ARRAY
31191: PUSH
31192: LD_INT 0
31194: GREATER
31195: PUSH
31196: LD_EXP 89
31200: PUSH
31201: LD_INT 2
31203: EQUAL
31204: OR
31205: IFFALSE 31244
// begin vehicle_prod_delay = Replace ( vehicle_prod_delay , base , vehicle_prod_delay [ base ] - 0 0$1 ) ;
31207: LD_ADDR_VAR 0 8
31211: PUSH
31212: LD_VAR 0 8
31216: PPUSH
31217: LD_VAR 0 5
31221: PPUSH
31222: LD_VAR 0 8
31226: PUSH
31227: LD_VAR 0 5
31231: ARRAY
31232: PUSH
31233: LD_INT 35
31235: MINUS
31236: PPUSH
31237: CALL_OW 1
31241: ST_TO_ADDR
// continue ;
31242: GO 30779
// end ; if ai_vehicles_defend [ base ] < MaxNumWarVehicles ( base ) then
31244: LD_EXP 40
31248: PUSH
31249: LD_VAR 0 5
31253: ARRAY
31254: PUSH
31255: LD_VAR 0 5
31259: PPUSH
31260: CALL 30390 0 1
31264: LESS
31265: IFFALSE 31604
// begin case base of 1 :
31267: LD_VAR 0 5
31271: PUSH
31272: LD_INT 1
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31280
31278: GO 31398
31280: POP
// begin case Rand ( 1 , 4 ) of 1 :
31281: LD_INT 1
31283: PPUSH
31284: LD_INT 4
31286: PPUSH
31287: CALL_OW 12
31291: PUSH
31292: LD_INT 1
31294: DOUBLE
31295: EQUAL
31296: IFTRUE 31300
31298: GO 31311
31300: POP
// temp_value = us_gatling_gun ; 2 :
31301: LD_ADDR_VAR 0 2
31305: PUSH
31306: LD_INT 4
31308: ST_TO_ADDR
31309: GO 31369
31311: LD_INT 2
31313: DOUBLE
31314: EQUAL
31315: IFTRUE 31319
31317: GO 31330
31319: POP
// temp_value = us_laser ; 3 :
31320: LD_ADDR_VAR 0 2
31324: PUSH
31325: LD_INT 9
31327: ST_TO_ADDR
31328: GO 31369
31330: LD_INT 3
31332: DOUBLE
31333: EQUAL
31334: IFTRUE 31338
31336: GO 31349
31338: POP
// temp_value = us_double_gun ; 4 :
31339: LD_ADDR_VAR 0 2
31343: PUSH
31344: LD_INT 5
31346: ST_TO_ADDR
31347: GO 31369
31349: LD_INT 4
31351: DOUBLE
31352: EQUAL
31353: IFTRUE 31357
31355: GO 31368
31357: POP
// temp_value = us_rocket_launcher ; end ;
31358: LD_ADDR_VAR 0 2
31362: PUSH
31363: LD_INT 7
31365: ST_TO_ADDR
31366: GO 31369
31368: POP
// ComConstruct ( idle_factories [ 1 ] , us_medium_wheeled , engine_siberite , control_remote , temp_value ) ;
31369: LD_VAR 0 6
31373: PUSH
31374: LD_INT 1
31376: ARRAY
31377: PPUSH
31378: LD_INT 2
31380: PPUSH
31381: LD_INT 3
31383: PPUSH
31384: LD_INT 2
31386: PPUSH
31387: LD_VAR 0 2
31391: PPUSH
31392: CALL_OW 125
// end ; 2 :
31396: GO 31604
31398: LD_INT 2
31400: DOUBLE
31401: EQUAL
31402: IFTRUE 31406
31404: GO 31409
31406: POP
// begin end ; 3 :
31407: GO 31604
31409: LD_INT 3
31411: DOUBLE
31412: EQUAL
31413: IFTRUE 31417
31415: GO 31603
31417: POP
// begin if PlayerAtEasternBorder then
31418: CALL 31921 0 0
31422: IFFALSE 31445
// temp_list = [ ru_heavy_machine_gun , ru_gun , ru_rocket_launcher ] else
31424: LD_ADDR_VAR 0 4
31428: PUSH
31429: LD_INT 42
31431: PUSH
31432: LD_INT 44
31434: PUSH
31435: LD_INT 45
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: ST_TO_ADDR
31443: GO 31464
// temp_list = [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
31445: LD_ADDR_VAR 0 4
31449: PUSH
31450: LD_INT 43
31452: PUSH
31453: LD_INT 46
31455: PUSH
31456: LD_INT 45
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: LIST
31463: ST_TO_ADDR
// temp_value = temp_list [ Rand ( 1 , temp_list + 0 ) ] ;
31464: LD_ADDR_VAR 0 2
31468: PUSH
31469: LD_VAR 0 4
31473: PUSH
31474: LD_INT 1
31476: PPUSH
31477: LD_VAR 0 4
31481: PUSH
31482: LD_INT 0
31484: PLUS
31485: PPUSH
31486: CALL_OW 12
31490: ARRAY
31491: ST_TO_ADDR
// if not IsWeaponFactory ( idle_factories [ 1 ] ) then
31492: LD_VAR 0 6
31496: PUSH
31497: LD_INT 1
31499: ARRAY
31500: PPUSH
31501: CALL 31615 0 1
31505: NOT
31506: IFFALSE 31516
// temp_value = ru_heavy_machine_gun ;
31508: LD_ADDR_VAR 0 2
31512: PUSH
31513: LD_INT 42
31515: ST_TO_ADDR
// if temp_value = ru_heavy_gun then
31516: LD_VAR 0 2
31520: PUSH
31521: LD_INT 46
31523: EQUAL
31524: IFFALSE 31536
// i = ru_heavy_tracked else
31526: LD_ADDR_VAR 0 1
31530: PUSH
31531: LD_INT 24
31533: ST_TO_ADDR
31534: GO 31572
// if Rand ( difficulty , 4 ) = 4 then
31536: LD_OWVAR 67
31540: PPUSH
31541: LD_INT 4
31543: PPUSH
31544: CALL_OW 12
31548: PUSH
31549: LD_INT 4
31551: EQUAL
31552: IFFALSE 31564
// i = ru_heavy_tracked else
31554: LD_ADDR_VAR 0 1
31558: PUSH
31559: LD_INT 24
31561: ST_TO_ADDR
31562: GO 31572
// i = ru_medium_tracked ;
31564: LD_ADDR_VAR 0 1
31568: PUSH
31569: LD_INT 22
31571: ST_TO_ADDR
// ComConstruct ( idle_factories [ 1 ] , i , engine_siberite , control_computer , temp_value ) ;
31572: LD_VAR 0 6
31576: PUSH
31577: LD_INT 1
31579: ARRAY
31580: PPUSH
31581: LD_VAR 0 1
31585: PPUSH
31586: LD_INT 3
31588: PPUSH
31589: LD_INT 3
31591: PPUSH
31592: LD_VAR 0 2
31596: PPUSH
31597: CALL_OW 125
// end ; end ;
31601: GO 31604
31603: POP
// end ; end ;
31604: GO 30779
31606: POP
31607: POP
// until false ;
31608: LD_INT 0
31610: IFFALSE 30762
// end ;
31612: PPOPN 8
31614: END
// function IsWeaponFactory ( factory ) ; begin
31615: LD_INT 0
31617: PPUSH
// if FilterAllUnits ( [ [ f_dist , factory , 4 ] , [ f_btype , b_ext_gun ] ] ) > 0 then
31618: LD_INT 91
31620: PUSH
31621: LD_VAR 0 1
31625: PUSH
31626: LD_INT 4
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 30
31636: PUSH
31637: LD_INT 17
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PPUSH
31648: CALL_OW 69
31652: PUSH
31653: LD_INT 0
31655: GREATER
31656: IFFALSE 31668
// result = true else
31658: LD_ADDR_VAR 0 2
31662: PUSH
31663: LD_INT 1
31665: ST_TO_ADDR
31666: GO 31676
// result = false ;
31668: LD_ADDR_VAR 0 2
31672: PUSH
31673: LD_INT 0
31675: ST_TO_ADDR
// end ;
31676: LD_VAR 0 2
31680: RET
// on VehicleCaptured ( new_identifier , old_identifier , old_side , capturing_unit ) do var temp_list , base ;
31681: LD_INT 0
31683: PPUSH
31684: PPUSH
// begin if old_side = you then
31685: LD_VAR 0 3
31689: PUSH
31690: LD_EXP 3
31694: EQUAL
31695: IFFALSE 31699
// exit ;
31697: GO 31730
// for base in ai_bases do
31699: LD_ADDR_VAR 0 6
31703: PUSH
31704: LD_EXP 59
31708: PUSH
31709: FOR_IN
31710: IFFALSE 31728
// RemoveVehicleFromVariables ( base , old_identifier ) ;
31712: LD_VAR 0 6
31716: PPUSH
31717: LD_VAR 0 2
31721: PPUSH
31722: CALL 11498 0 2
31726: GO 31709
31728: POP
31729: POP
// end ;
31730: PPOPN 6
31732: END
// on VehicleConstructed ( vehicle , factory ) do var side , temp_list , base ;
31733: LD_INT 0
31735: PPUSH
31736: PPUSH
31737: PPUSH
// begin side = GetSide ( vehicle ) ;
31738: LD_ADDR_VAR 0 3
31742: PUSH
31743: LD_VAR 0 1
31747: PPUSH
31748: CALL_OW 255
31752: ST_TO_ADDR
// if side = you then
31753: LD_VAR 0 3
31757: PUSH
31758: LD_EXP 3
31762: EQUAL
31763: IFFALSE 31767
// exit ;
31765: GO 31918
// base = FindBase ( vehicle ) ;
31767: LD_ADDR_VAR 0 5
31771: PUSH
31772: LD_VAR 0 1
31776: PPUSH
31777: CALL 12858 0 1
31781: ST_TO_ADDR
// if base = 0 then
31782: LD_VAR 0 5
31786: PUSH
31787: LD_INT 0
31789: EQUAL
31790: IFFALSE 31794
// exit ;
31792: GO 31918
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] then
31794: LD_VAR 0 1
31798: PPUSH
31799: CALL_OW 264
31803: PUSH
31804: LD_INT 12
31806: PUSH
31807: LD_INT 32
31809: PUSH
31810: LD_INT 51
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: LIST
31817: IN
31818: NOT
31819: IFFALSE 31870
// begin temp_list = ai_vehicles_defend [ base ] ^ vehicle ;
31821: LD_ADDR_VAR 0 4
31825: PUSH
31826: LD_EXP 40
31830: PUSH
31831: LD_VAR 0 5
31835: ARRAY
31836: PUSH
31837: LD_VAR 0 1
31841: ADD
31842: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list ) ;
31843: LD_ADDR_EXP 40
31847: PUSH
31848: LD_EXP 40
31852: PPUSH
31853: LD_VAR 0 5
31857: PPUSH
31858: LD_VAR 0 4
31862: PPUSH
31863: CALL_OW 1
31867: ST_TO_ADDR
// end else
31868: GO 31918
// begin ai_cargo_bay = Replace ( ai_cargo_bay , base , vehicle ) ;
31870: LD_ADDR_EXP 61
31874: PUSH
31875: LD_EXP 61
31879: PPUSH
31880: LD_VAR 0 5
31884: PPUSH
31885: LD_VAR 0 1
31889: PPUSH
31890: CALL_OW 1
31894: ST_TO_ADDR
// ai_cargo_bay_under_construction = Replace ( ai_cargo_bay_under_construction , base , false ) ;
31895: LD_ADDR_EXP 62
31899: PUSH
31900: LD_EXP 62
31904: PPUSH
31905: LD_VAR 0 5
31909: PPUSH
31910: LD_INT 0
31912: PPUSH
31913: CALL_OW 1
31917: ST_TO_ADDR
// end ; end ;
31918: PPOPN 5
31920: END
// export function PlayerAtEasternBorder ; var temp_list ; begin
31921: LD_INT 0
31923: PPUSH
31924: PPUSH
// result = false ;
31925: LD_ADDR_VAR 0 1
31929: PUSH
31930: LD_INT 0
31932: ST_TO_ADDR
// temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31933: LD_ADDR_VAR 0 2
31937: PUSH
31938: LD_INT 22
31940: PUSH
31941: LD_EXP 3
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 30
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 30
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PPUSH
31982: CALL_OW 69
31986: ST_TO_ADDR
// if temp_list = 0 then
31987: LD_VAR 0 2
31991: PUSH
31992: LD_INT 0
31994: EQUAL
31995: IFFALSE 32007
// result = true else
31997: LD_ADDR_VAR 0 1
32001: PUSH
32002: LD_INT 1
32004: ST_TO_ADDR
32005: GO 32040
// if UnitFilter ( temp_list , [ f_inarea , player_base_outer ] ) > 0 then
32007: LD_VAR 0 2
32011: PPUSH
32012: LD_INT 95
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PPUSH
32022: CALL_OW 72
32026: PUSH
32027: LD_INT 0
32029: GREATER
32030: IFFALSE 32040
// result = true ;
32032: LD_ADDR_VAR 0 1
32036: PUSH
32037: LD_INT 1
32039: ST_TO_ADDR
// end ;
32040: LD_VAR 0 1
32044: RET
// every 0 0$1 + 0 0$0.3 do var i , temp_list , human_list , num_sol , num_baz , num_sci , temp_list_2 , temp_list_3 , k ; var base , side , attack_strat_history , first_time_attack_gensher ; var spawnedSci , spawnedSol , spawnedBaz ;
32045: GO 32047
32047: DISABLE
32048: LD_INT 0
32050: PPUSH
32051: PPUSH
32052: PPUSH
32053: PPUSH
32054: PPUSH
32055: PPUSH
32056: PPUSH
32057: PPUSH
32058: PPUSH
32059: PPUSH
32060: PPUSH
32061: PPUSH
32062: PPUSH
32063: PPUSH
32064: PPUSH
32065: PPUSH
// begin base = 3 ;
32066: LD_ADDR_VAR 0 10
32070: PUSH
32071: LD_INT 3
32073: ST_TO_ADDR
// side = russians ;
32074: LD_ADDR_VAR 0 11
32078: PUSH
32079: LD_EXP 4
32083: ST_TO_ADDR
// attack_strat_history = [ ] ;
32084: LD_ADDR_VAR 0 12
32088: PUSH
32089: EMPTY
32090: ST_TO_ADDR
// first_time_attack_gensher = true ;
32091: LD_ADDR_VAR 0 13
32095: PUSH
32096: LD_INT 1
32098: ST_TO_ADDR
// while not scout_event_over do
32099: LD_EXP 93
32103: NOT
32104: IFFALSE 32115
// wait ( 0 0$1 ) ;
32106: LD_INT 35
32108: PPUSH
32109: CALL_OW 67
32113: GO 32099
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , ai_vehicle_attack_delay [ base ] - 2 2$0 ) ;
32115: LD_ADDR_EXP 58
32119: PUSH
32120: LD_EXP 58
32124: PPUSH
32125: LD_VAR 0 10
32129: PPUSH
32130: LD_EXP 58
32134: PUSH
32135: LD_VAR 0 10
32139: ARRAY
32140: PUSH
32141: LD_INT 4200
32143: MINUS
32144: PPUSH
32145: CALL_OW 1
32149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32150: LD_INT 35
32152: PPUSH
32153: CALL_OW 67
// if UnitFilter ( ai_attacking_soldiers [ base ] , [ f_ok ] ) > 0 or UnitFilter ( ai_attacking_scientists [ base ] , [ f_ok ] ) > 0 or UnitFilter ( ai_vehicles_attack [ base ] , [ f_ok ] ) > 0 then
32157: LD_EXP 64
32161: PUSH
32162: LD_VAR 0 10
32166: ARRAY
32167: PPUSH
32168: LD_INT 50
32170: PUSH
32171: EMPTY
32172: LIST
32173: PPUSH
32174: CALL_OW 72
32178: PUSH
32179: LD_INT 0
32181: GREATER
32182: PUSH
32183: LD_EXP 65
32187: PUSH
32188: LD_VAR 0 10
32192: ARRAY
32193: PPUSH
32194: LD_INT 50
32196: PUSH
32197: EMPTY
32198: LIST
32199: PPUSH
32200: CALL_OW 72
32204: PUSH
32205: LD_INT 0
32207: GREATER
32208: OR
32209: PUSH
32210: LD_EXP 41
32214: PUSH
32215: LD_VAR 0 10
32219: ARRAY
32220: PPUSH
32221: LD_INT 50
32223: PUSH
32224: EMPTY
32225: LIST
32226: PPUSH
32227: CALL_OW 72
32231: PUSH
32232: LD_INT 0
32234: GREATER
32235: OR
32236: IFFALSE 32240
// continue ;
32238: GO 32150
// if IsPlaced ( Cornell ) and not IsDead ( Cornell ) then
32240: LD_EXP 26
32244: PPUSH
32245: CALL_OW 305
32249: PUSH
32250: LD_EXP 26
32254: PPUSH
32255: CALL_OW 301
32259: NOT
32260: AND
32261: IFFALSE 32265
// continue ;
32263: GO 32150
// if IsPlaced ( Khattam ) and not ( IsDead ( Khattam ) or GetSide ( Khattam ) = you ) then
32265: LD_EXP 27
32269: PPUSH
32270: CALL_OW 305
32274: PUSH
32275: LD_EXP 27
32279: PPUSH
32280: CALL_OW 301
32284: PUSH
32285: LD_EXP 27
32289: PPUSH
32290: CALL_OW 255
32294: PUSH
32295: LD_EXP 3
32299: EQUAL
32300: OR
32301: NOT
32302: AND
32303: IFFALSE 32307
// continue ;
32305: GO 32150
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , ai_vehicle_attack_delay [ base ] - 0 0$1 ) ;
32307: LD_ADDR_EXP 58
32311: PUSH
32312: LD_EXP 58
32316: PPUSH
32317: LD_VAR 0 10
32321: PPUSH
32322: LD_EXP 58
32326: PUSH
32327: LD_VAR 0 10
32331: ARRAY
32332: PUSH
32333: LD_INT 35
32335: MINUS
32336: PPUSH
32337: CALL_OW 1
32341: ST_TO_ADDR
// if ai_vehicle_attack_delay [ base ] > 0 0$0 then
32342: LD_EXP 58
32346: PUSH
32347: LD_VAR 0 10
32351: ARRAY
32352: PUSH
32353: LD_INT 0
32355: GREATER
32356: IFFALSE 32360
// continue ;
32358: GO 32150
// if BaseUnderAttack ( base , - 1 ) then
32360: LD_VAR 0 10
32364: PPUSH
32365: LD_INT 1
32367: NEG
32368: PPUSH
32369: CALL 23630 0 2
32373: IFFALSE 32377
// continue ;
32375: GO 32150
// if ai_vehicles_defend [ base ] < MaxNumWarVehiclesForAttack ( base ) then
32377: LD_EXP 40
32381: PUSH
32382: LD_VAR 0 10
32386: ARRAY
32387: PUSH
32388: LD_VAR 0 10
32392: PPUSH
32393: CALL 34370 0 1
32397: LESS
32398: IFFALSE 32402
// continue ;
32400: GO 32150
// temp_list = [ ] ;
32402: LD_ADDR_VAR 0 2
32406: PUSH
32407: EMPTY
32408: ST_TO_ADDR
// temp_list_2 = ai_vehicles_defend [ base ] ;
32409: LD_ADDR_VAR 0 7
32413: PUSH
32414: LD_EXP 40
32418: PUSH
32419: LD_VAR 0 10
32423: ARRAY
32424: ST_TO_ADDR
// for i = 1 to MaxNumWarVehiclesForAttack ( base ) do
32425: LD_ADDR_VAR 0 1
32429: PUSH
32430: DOUBLE
32431: LD_INT 1
32433: DEC
32434: ST_TO_ADDR
32435: LD_VAR 0 10
32439: PPUSH
32440: CALL 34370 0 1
32444: PUSH
32445: FOR_TO
32446: IFFALSE 32492
// begin temp_list = temp_list ^ temp_list_2 [ i ] ;
32448: LD_ADDR_VAR 0 2
32452: PUSH
32453: LD_VAR 0 2
32457: PUSH
32458: LD_VAR 0 7
32462: PUSH
32463: LD_VAR 0 1
32467: ARRAY
32468: ADD
32469: ST_TO_ADDR
// RemoveVehicleFromVariables ( base , temp_list_2 [ i ] ) ;
32470: LD_VAR 0 10
32474: PPUSH
32475: LD_VAR 0 7
32479: PUSH
32480: LD_VAR 0 1
32484: ARRAY
32485: PPUSH
32486: CALL 11498 0 2
// end ;
32490: GO 32445
32492: POP
32493: POP
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , temp_list ) ;
32494: LD_ADDR_EXP 41
32498: PUSH
32499: LD_EXP 41
32503: PPUSH
32504: LD_VAR 0 10
32508: PPUSH
32509: LD_VAR 0 2
32513: PPUSH
32514: CALL_OW 1
32518: ST_TO_ADDR
// human_list = [ ] ;
32519: LD_ADDR_VAR 0 3
32523: PUSH
32524: EMPTY
32525: ST_TO_ADDR
// num_sci = difficulty + Rand ( 0 , 1 ) ;
32526: LD_ADDR_VAR 0 6
32530: PUSH
32531: LD_OWVAR 67
32535: PUSH
32536: LD_INT 0
32538: PPUSH
32539: LD_INT 1
32541: PPUSH
32542: CALL_OW 12
32546: PLUS
32547: ST_TO_ADDR
// num_sol = difficulty + 1 + Rand ( 0 , 1 ) ;
32548: LD_ADDR_VAR 0 4
32552: PUSH
32553: LD_OWVAR 67
32557: PUSH
32558: LD_INT 1
32560: PLUS
32561: PUSH
32562: LD_INT 0
32564: PPUSH
32565: LD_INT 1
32567: PPUSH
32568: CALL_OW 12
32572: PLUS
32573: ST_TO_ADDR
// num_baz = difficulty + Rand ( 0 , 1 ) ;
32574: LD_ADDR_VAR 0 5
32578: PUSH
32579: LD_OWVAR 67
32583: PUSH
32584: LD_INT 0
32586: PPUSH
32587: LD_INT 1
32589: PPUSH
32590: CALL_OW 12
32594: PLUS
32595: ST_TO_ADDR
// case num_russian_attacks of 0 :
32596: LD_EXP 87
32600: PUSH
32601: LD_INT 0
32603: DOUBLE
32604: EQUAL
32605: IFTRUE 32609
32607: GO 32662
32609: POP
// begin if num_sci > 1 then
32610: LD_VAR 0 6
32614: PUSH
32615: LD_INT 1
32617: GREATER
32618: IFFALSE 32628
// num_sci = 1 ;
32620: LD_ADDR_VAR 0 6
32624: PUSH
32625: LD_INT 1
32627: ST_TO_ADDR
// if num_sol > 2 then
32628: LD_VAR 0 4
32632: PUSH
32633: LD_INT 2
32635: GREATER
32636: IFFALSE 32646
// num_sol = 2 ;
32638: LD_ADDR_VAR 0 4
32642: PUSH
32643: LD_INT 2
32645: ST_TO_ADDR
// num_baz = num_baz - 1 ;
32646: LD_ADDR_VAR 0 5
32650: PUSH
32651: LD_VAR 0 5
32655: PUSH
32656: LD_INT 1
32658: MINUS
32659: ST_TO_ADDR
// end ; 1 :
32660: GO 32749
32662: LD_INT 1
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32715
32670: POP
// begin if num_sol > 3 then
32671: LD_VAR 0 4
32675: PUSH
32676: LD_INT 3
32678: GREATER
32679: IFFALSE 32689
// num_sol = 3 ;
32681: LD_ADDR_VAR 0 4
32685: PUSH
32686: LD_INT 3
32688: ST_TO_ADDR
// if num_baz > 1 then
32689: LD_VAR 0 5
32693: PUSH
32694: LD_INT 1
32696: GREATER
32697: IFFALSE 32713
// num_baz = num_baz - 1 ;
32699: LD_ADDR_VAR 0 5
32703: PUSH
32704: LD_VAR 0 5
32708: PUSH
32709: LD_INT 1
32711: MINUS
32712: ST_TO_ADDR
// end ; 2 :
32713: GO 32749
32715: LD_INT 2
32717: DOUBLE
32718: EQUAL
32719: IFTRUE 32723
32721: GO 32726
32723: POP
// begin end ; else
32724: GO 32749
32726: POP
// begin num_baz = num_baz + Rand ( 0 , 1 ) ;
32727: LD_ADDR_VAR 0 5
32731: PUSH
32732: LD_VAR 0 5
32736: PUSH
32737: LD_INT 0
32739: PPUSH
32740: LD_INT 1
32742: PPUSH
32743: CALL_OW 12
32747: PLUS
32748: ST_TO_ADDR
// end ; end ; if yashin_alive then
32749: LD_EXP 86
32753: IFFALSE 32787
// begin num_baz = num_baz + num_sol ;
32755: LD_ADDR_VAR 0 5
32759: PUSH
32760: LD_VAR 0 5
32764: PUSH
32765: LD_VAR 0 4
32769: PLUS
32770: ST_TO_ADDR
// num_sol = Rand ( 1 , 2 ) ;
32771: LD_ADDR_VAR 0 4
32775: PUSH
32776: LD_INT 1
32778: PPUSH
32779: LD_INT 2
32781: PPUSH
32782: CALL_OW 12
32786: ST_TO_ADDR
// end ; if russian_reserve_troops > 0 then
32787: LD_EXP 102
32791: PUSH
32792: LD_INT 0
32794: GREATER
32795: IFFALSE 32927
// begin if logsenabled then
32797: LD_EXP 2
32801: IFFALSE 32814
// display_strings = [ Spawning russian scrientists!  ] ;
32803: LD_ADDR_OWVAR 47
32807: PUSH
32808: LD_STRING Spawning russian scrientists! 
32810: PUSH
32811: EMPTY
32812: LIST
32813: ST_TO_ADDR
// temp_list = CreateUnitsWithClassLimited ( num_sci , class_scientistic , side , russian_reserve_troops ) ;
32814: LD_ADDR_VAR 0 2
32818: PUSH
32819: LD_VAR 0 6
32823: PPUSH
32824: LD_INT 4
32826: PPUSH
32827: LD_VAR 0 11
32831: PPUSH
32832: LD_EXP 102
32836: PPUSH
32837: CALL 9900 0 4
32841: ST_TO_ADDR
// russian_reserve_troops = russian_reserve_troops - sizeof ( temp_list ) ;
32842: LD_ADDR_EXP 102
32846: PUSH
32847: LD_EXP 102
32851: PUSH
32852: LD_VAR 0 2
32856: PPUSH
32857: CALL 10409 0 1
32861: MINUS
32862: ST_TO_ADDR
// human_list = human_list ^ temp_list ;
32863: LD_ADDR_VAR 0 3
32867: PUSH
32868: LD_VAR 0 3
32872: PUSH
32873: LD_VAR 0 2
32877: ADD
32878: ST_TO_ADDR
// ai_attacking_scientists = Replace ( ai_attacking_scientists , base , temp_list ) ;
32879: LD_ADDR_EXP 65
32883: PUSH
32884: LD_EXP 65
32888: PPUSH
32889: LD_VAR 0 10
32893: PPUSH
32894: LD_VAR 0 2
32898: PPUSH
32899: CALL_OW 1
32903: ST_TO_ADDR
// if logsenabled then
32904: LD_EXP 2
32908: IFFALSE 32927
// display_strings = [ Remaining russian reserves  , russian_reserve_troops ] ;
32910: LD_ADDR_OWVAR 47
32914: PUSH
32915: LD_STRING Remaining russian reserves 
32917: PUSH
32918: LD_EXP 102
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: ST_TO_ADDR
// end ; if russian_reserve_troops > 0 then
32927: LD_EXP 102
32931: PUSH
32932: LD_INT 0
32934: GREATER
32935: IFFALSE 33132
// begin if logsenabled then
32937: LD_EXP 2
32941: IFFALSE 32954
// display_strings = [ Spawning russian soldiers!  ] ;
32943: LD_ADDR_OWVAR 47
32947: PUSH
32948: LD_STRING Spawning russian soldiers! 
32950: PUSH
32951: EMPTY
32952: LIST
32953: ST_TO_ADDR
// temp_list = CreateUnitsWithClassLimited ( num_sol , class_soldier , side , russian_reserve_troops ) ;
32954: LD_ADDR_VAR 0 2
32958: PUSH
32959: LD_VAR 0 4
32963: PPUSH
32964: LD_INT 1
32966: PPUSH
32967: LD_VAR 0 11
32971: PPUSH
32972: LD_EXP 102
32976: PPUSH
32977: CALL 9900 0 4
32981: ST_TO_ADDR
// russian_reserve_troops = russian_reserve_troops - sizeof ( temp_list ) ;
32982: LD_ADDR_EXP 102
32986: PUSH
32987: LD_EXP 102
32991: PUSH
32992: LD_VAR 0 2
32996: PPUSH
32997: CALL 10409 0 1
33001: MINUS
33002: ST_TO_ADDR
// temp_list_2 = CreateUnitsWithClassLimited ( num_baz , class_bazooker , side , russian_reserve_troops ) ;
33003: LD_ADDR_VAR 0 7
33007: PUSH
33008: LD_VAR 0 5
33012: PPUSH
33013: LD_INT 9
33015: PPUSH
33016: LD_VAR 0 11
33020: PPUSH
33021: LD_EXP 102
33025: PPUSH
33026: CALL 9900 0 4
33030: ST_TO_ADDR
// russian_reserve_troops = russian_reserve_troops - sizeof ( temp_list_2 ) ;
33031: LD_ADDR_EXP 102
33035: PUSH
33036: LD_EXP 102
33040: PUSH
33041: LD_VAR 0 7
33045: PPUSH
33046: CALL 10409 0 1
33050: MINUS
33051: ST_TO_ADDR
// temp_list = temp_list ^ temp_list_2 ;
33052: LD_ADDR_VAR 0 2
33056: PUSH
33057: LD_VAR 0 2
33061: PUSH
33062: LD_VAR 0 7
33066: ADD
33067: ST_TO_ADDR
// human_list = human_list ^ temp_list ;
33068: LD_ADDR_VAR 0 3
33072: PUSH
33073: LD_VAR 0 3
33077: PUSH
33078: LD_VAR 0 2
33082: ADD
33083: ST_TO_ADDR
// ai_attacking_soldiers = Replace ( ai_attacking_soldiers , base , temp_list ) ;
33084: LD_ADDR_EXP 64
33088: PUSH
33089: LD_EXP 64
33093: PPUSH
33094: LD_VAR 0 10
33098: PPUSH
33099: LD_VAR 0 2
33103: PPUSH
33104: CALL_OW 1
33108: ST_TO_ADDR
// if logsenabled then
33109: LD_EXP 2
33113: IFFALSE 33132
// display_strings = [ Remaining russian reserves  , russian_reserve_troops ] ;
33115: LD_ADDR_OWVAR 47
33119: PUSH
33120: LD_STRING Remaining russian reserves 
33122: PUSH
33123: LD_EXP 102
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: ST_TO_ADDR
// end ; for i in human_list do
33132: LD_ADDR_VAR 0 1
33136: PUSH
33137: LD_VAR 0 3
33141: PUSH
33142: FOR_IN
33143: IFFALSE 33162
// PlaceUnitArea ( i , russian_reinforcements_area , false ) ;
33145: LD_VAR 0 1
33149: PPUSH
33150: LD_INT 14
33152: PPUSH
33153: LD_INT 0
33155: PPUSH
33156: CALL_OW 49
33160: GO 33142
33162: POP
33163: POP
// if MayAttackGensherBase and Rand ( 1 , 2 ) = 1 then
33164: CALL 34319 0 0
33168: PUSH
33169: LD_INT 1
33171: PPUSH
33172: LD_INT 2
33174: PPUSH
33175: CALL_OW 12
33179: PUSH
33180: LD_INT 1
33182: EQUAL
33183: AND
33184: IFFALSE 33196
// russian_attack_strategy = 1 else
33186: LD_ADDR_EXP 84
33190: PUSH
33191: LD_INT 1
33193: ST_TO_ADDR
33194: GO 33220
// if PlayerAtEasternBorder then
33196: CALL 31921 0 0
33200: IFFALSE 33212
// russian_attack_strategy = 2 else
33202: LD_ADDR_EXP 84
33206: PUSH
33207: LD_INT 2
33209: ST_TO_ADDR
33210: GO 33220
// russian_attack_strategy = 3 ;
33212: LD_ADDR_EXP 84
33216: PUSH
33217: LD_INT 3
33219: ST_TO_ADDR
// if russian_attack_strategy <> 1 and not 1 in attack_strat_history then
33220: LD_EXP 84
33224: PUSH
33225: LD_INT 1
33227: NONEQUAL
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: LD_VAR 0 12
33236: IN
33237: NOT
33238: AND
33239: IFFALSE 33282
// if attack_strat_history >= [ 5 , 4 , 3 ] [ difficulty ] and MayAttackGensherBase then
33241: LD_VAR 0 12
33245: PUSH
33246: LD_INT 5
33248: PUSH
33249: LD_INT 4
33251: PUSH
33252: LD_INT 3
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: PUSH
33260: LD_OWVAR 67
33264: ARRAY
33265: GREATEREQUAL
33266: PUSH
33267: CALL 34319 0 0
33271: AND
33272: IFFALSE 33282
// russian_attack_strategy = 1 ;
33274: LD_ADDR_EXP 84
33278: PUSH
33279: LD_INT 1
33281: ST_TO_ADDR
// attack_strat_history = attack_strat_history ^ russian_attack_strategy ;
33282: LD_ADDR_VAR 0 12
33286: PUSH
33287: LD_VAR 0 12
33291: PUSH
33292: LD_EXP 84
33296: ADD
33297: ST_TO_ADDR
// if russian_attack_strategy = 1 then
33298: LD_EXP 84
33302: PUSH
33303: LD_INT 1
33305: EQUAL
33306: IFFALSE 34155
// begin if first_time_attack_gensher or difficulty = 1 then
33308: LD_VAR 0 13
33312: PUSH
33313: LD_OWVAR 67
33317: PUSH
33318: LD_INT 1
33320: EQUAL
33321: OR
33322: IFFALSE 33716
// begin first_time_attack_gensher = false ;
33324: LD_ADDR_VAR 0 13
33328: PUSH
33329: LD_INT 0
33331: ST_TO_ADDR
// temp_list = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_class , class_bazooker ] ) ;
33332: LD_ADDR_VAR 0 2
33336: PUSH
33337: LD_EXP 64
33341: PUSH
33342: LD_VAR 0 10
33346: ARRAY
33347: PPUSH
33348: LD_INT 25
33350: PUSH
33351: LD_INT 9
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PPUSH
33358: CALL_OW 72
33362: ST_TO_ADDR
// for i in temp_list do
33363: LD_ADDR_VAR 0 1
33367: PUSH
33368: LD_VAR 0 2
33372: PUSH
33373: FOR_IN
33374: IFFALSE 33404
// begin RemoveHumanFromVariables ( base , i , false ) ;
33376: LD_VAR 0 10
33380: PPUSH
33381: LD_VAR 0 1
33385: PPUSH
33386: LD_INT 0
33388: PPUSH
33389: CALL 11890 0 3
// DestroyUnit ( i ) ;
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL_OW 65
// end ;
33402: GO 33373
33404: POP
33405: POP
// temp_list = UnitFilter ( ai_vehicles_attack [ base ] , [ f_weapon , ru_rocket_launcher ] ) ;
33406: LD_ADDR_VAR 0 2
33410: PUSH
33411: LD_EXP 41
33415: PUSH
33416: LD_VAR 0 10
33420: ARRAY
33421: PPUSH
33422: LD_INT 34
33424: PUSH
33425: LD_INT 45
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PPUSH
33432: CALL_OW 72
33436: ST_TO_ADDR
// temp_list_2 = [ ] ;
33437: LD_ADDR_VAR 0 7
33441: PUSH
33442: EMPTY
33443: ST_TO_ADDR
// InitUc ;
33444: CALL_OW 18
// InitVc ;
33448: CALL_OW 20
// uc_side = side ;
33452: LD_ADDR_OWVAR 20
33456: PUSH
33457: LD_VAR 0 11
33461: ST_TO_ADDR
// uc_nation = nation_russian ;
33462: LD_ADDR_OWVAR 21
33466: PUSH
33467: LD_INT 3
33469: ST_TO_ADDR
// for i in temp_list do
33470: LD_ADDR_VAR 0 1
33474: PUSH
33475: LD_VAR 0 2
33479: PUSH
33480: FOR_IN
33481: IFFALSE 33675
// begin RemoveVehicleFromVariables ( base , i ) ;
33483: LD_VAR 0 10
33487: PPUSH
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL 11498 0 2
// vc_chassis = GetChassis ( i ) ;
33497: LD_ADDR_OWVAR 37
33501: PUSH
33502: LD_VAR 0 1
33506: PPUSH
33507: CALL_OW 265
33511: ST_TO_ADDR
// vc_control = GetControl ( i ) ;
33512: LD_ADDR_OWVAR 38
33516: PUSH
33517: LD_VAR 0 1
33521: PPUSH
33522: CALL_OW 263
33526: ST_TO_ADDR
// vc_engine = GetEngine ( i ) ;
33527: LD_ADDR_OWVAR 39
33531: PUSH
33532: LD_VAR 0 1
33536: PPUSH
33537: CALL_OW 262
33541: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
33542: LD_ADDR_OWVAR 40
33546: PUSH
33547: LD_INT 42
33549: ST_TO_ADDR
// temp_list_3 = [ GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ;
33550: LD_ADDR_VAR 0 8
33554: PUSH
33555: LD_VAR 0 1
33559: PPUSH
33560: CALL_OW 250
33564: PUSH
33565: LD_VAR 0 1
33569: PPUSH
33570: CALL_OW 251
33574: PUSH
33575: LD_VAR 0 1
33579: PPUSH
33580: CALL_OW 254
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: ST_TO_ADDR
// DestroyUnit ( i ) ;
33590: LD_VAR 0 1
33594: PPUSH
33595: CALL_OW 65
// i = CreateVehicle ;
33599: LD_ADDR_VAR 0 1
33603: PUSH
33604: CALL_OW 45
33608: ST_TO_ADDR
// SetDir ( i , temp_list_3 [ 3 ] ) ;
33609: LD_VAR 0 1
33613: PPUSH
33614: LD_VAR 0 8
33618: PUSH
33619: LD_INT 3
33621: ARRAY
33622: PPUSH
33623: CALL_OW 233
// PlaceUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] , false ) ;
33627: LD_VAR 0 1
33631: PPUSH
33632: LD_VAR 0 8
33636: PUSH
33637: LD_INT 1
33639: ARRAY
33640: PPUSH
33641: LD_VAR 0 8
33645: PUSH
33646: LD_INT 2
33648: ARRAY
33649: PPUSH
33650: LD_INT 0
33652: PPUSH
33653: CALL_OW 48
// temp_list_2 = temp_list_2 ^ i ;
33657: LD_ADDR_VAR 0 7
33661: PUSH
33662: LD_VAR 0 7
33666: PUSH
33667: LD_VAR 0 1
33671: ADD
33672: ST_TO_ADDR
// end ;
33673: GO 33480
33675: POP
33676: POP
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , ai_vehicles_attack [ base ] ^ temp_list_2 ) ;
33677: LD_ADDR_EXP 41
33681: PUSH
33682: LD_EXP 41
33686: PPUSH
33687: LD_VAR 0 10
33691: PPUSH
33692: LD_EXP 41
33696: PUSH
33697: LD_VAR 0 10
33701: ARRAY
33702: PUSH
33703: LD_VAR 0 7
33707: ADD
33708: PPUSH
33709: CALL_OW 1
33713: ST_TO_ADDR
// end else
33714: GO 33945
// begin temp_list = [ ] ;
33716: LD_ADDR_VAR 0 2
33720: PUSH
33721: EMPTY
33722: ST_TO_ADDR
// temp_list_2 = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_class , class_bazooker ] ) ;
33723: LD_ADDR_VAR 0 7
33727: PUSH
33728: LD_EXP 64
33732: PUSH
33733: LD_VAR 0 10
33737: ARRAY
33738: PPUSH
33739: LD_INT 25
33741: PUSH
33742: LD_INT 9
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PPUSH
33749: CALL_OW 72
33753: ST_TO_ADDR
// temp_list_3 = ai_attacking_soldiers [ base ] diff temp_list_2 ;
33754: LD_ADDR_VAR 0 8
33758: PUSH
33759: LD_EXP 64
33763: PUSH
33764: LD_VAR 0 10
33768: ARRAY
33769: PUSH
33770: LD_VAR 0 7
33774: DIFF
33775: ST_TO_ADDR
// if temp_list_2 > 0 then
33776: LD_VAR 0 7
33780: PUSH
33781: LD_INT 0
33783: GREATER
33784: IFFALSE 33816
// temp_list = temp_list ^ temp_list_2 [ Rand ( 1 , temp_list_2 ) ] ;
33786: LD_ADDR_VAR 0 2
33790: PUSH
33791: LD_VAR 0 2
33795: PUSH
33796: LD_VAR 0 7
33800: PUSH
33801: LD_INT 1
33803: PPUSH
33804: LD_VAR 0 7
33808: PPUSH
33809: CALL_OW 12
33813: ARRAY
33814: ADD
33815: ST_TO_ADDR
// if temp_list_3 > 0 then
33816: LD_VAR 0 8
33820: PUSH
33821: LD_INT 0
33823: GREATER
33824: IFFALSE 33856
// temp_list = temp_list ^ temp_list_3 [ Rand ( 1 , temp_list_3 ) ] ;
33826: LD_ADDR_VAR 0 2
33830: PUSH
33831: LD_VAR 0 2
33835: PUSH
33836: LD_VAR 0 8
33840: PUSH
33841: LD_INT 1
33843: PPUSH
33844: LD_VAR 0 8
33848: PPUSH
33849: CALL_OW 12
33853: ARRAY
33854: ADD
33855: ST_TO_ADDR
// temp_list_2 = ai_attacking_scientists [ base ] ;
33856: LD_ADDR_VAR 0 7
33860: PUSH
33861: LD_EXP 65
33865: PUSH
33866: LD_VAR 0 10
33870: ARRAY
33871: ST_TO_ADDR
// temp_list = temp_list ^ temp_list_2 [ Rand ( 1 , temp_list_2 ) ] ;
33872: LD_ADDR_VAR 0 2
33876: PUSH
33877: LD_VAR 0 2
33881: PUSH
33882: LD_VAR 0 7
33886: PUSH
33887: LD_INT 1
33889: PPUSH
33890: LD_VAR 0 7
33894: PPUSH
33895: CALL_OW 12
33899: ARRAY
33900: ADD
33901: ST_TO_ADDR
// for i in temp_list do
33902: LD_ADDR_VAR 0 1
33906: PUSH
33907: LD_VAR 0 2
33911: PUSH
33912: FOR_IN
33913: IFFALSE 33943
// begin RemoveHumanFromVariables ( base , i , false ) ;
33915: LD_VAR 0 10
33919: PPUSH
33920: LD_VAR 0 1
33924: PPUSH
33925: LD_INT 0
33927: PPUSH
33928: CALL 11890 0 3
// DestroyUnit ( i ) ;
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL_OW 65
// end ;
33941: GO 33912
33943: POP
33944: POP
// end ; temp_list_2 = ai_vehicles_attack [ base ] ;
33945: LD_ADDR_VAR 0 7
33949: PUSH
33950: LD_EXP 41
33954: PUSH
33955: LD_VAR 0 10
33959: ARRAY
33960: ST_TO_ADDR
// temp_list = [ ] ;
33961: LD_ADDR_VAR 0 2
33965: PUSH
33966: EMPTY
33967: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 1 ] [ difficulty ] do
33968: LD_ADDR_VAR 0 1
33972: PUSH
33973: DOUBLE
33974: LD_INT 1
33976: DEC
33977: ST_TO_ADDR
33978: LD_INT 2
33980: PUSH
33981: LD_INT 2
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: PUSH
33992: LD_OWVAR 67
33996: ARRAY
33997: PUSH
33998: FOR_TO
33999: IFFALSE 34075
// begin if temp_list_2 = 0 then
34001: LD_VAR 0 7
34005: PUSH
34006: LD_INT 0
34008: EQUAL
34009: IFFALSE 34013
// break ;
34011: GO 34075
// k = temp_list_2 [ Rand ( 1 , temp_list_2 + 0 ) ] ;
34013: LD_ADDR_VAR 0 9
34017: PUSH
34018: LD_VAR 0 7
34022: PUSH
34023: LD_INT 1
34025: PPUSH
34026: LD_VAR 0 7
34030: PUSH
34031: LD_INT 0
34033: PLUS
34034: PPUSH
34035: CALL_OW 12
34039: ARRAY
34040: ST_TO_ADDR
// temp_list = temp_list ^ k ;
34041: LD_ADDR_VAR 0 2
34045: PUSH
34046: LD_VAR 0 2
34050: PUSH
34051: LD_VAR 0 9
34055: ADD
34056: ST_TO_ADDR
// temp_list_2 = temp_list_2 diff k ;
34057: LD_ADDR_VAR 0 7
34061: PUSH
34062: LD_VAR 0 7
34066: PUSH
34067: LD_VAR 0 9
34071: DIFF
34072: ST_TO_ADDR
// end ;
34073: GO 33998
34075: POP
34076: POP
// for i in temp_list do
34077: LD_ADDR_VAR 0 1
34081: PUSH
34082: LD_VAR 0 2
34086: PUSH
34087: FOR_IN
34088: IFFALSE 34153
// begin RemoveVehicleFromVariables ( base , i ) ;
34090: LD_VAR 0 10
34094: PPUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL 11498 0 2
// temp_list_2 = ai_vehicles_defend [ base ] ^ i ;
34104: LD_ADDR_VAR 0 7
34108: PUSH
34109: LD_EXP 40
34113: PUSH
34114: LD_VAR 0 10
34118: ARRAY
34119: PUSH
34120: LD_VAR 0 1
34124: ADD
34125: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list_2 ) ;
34126: LD_ADDR_EXP 40
34130: PUSH
34131: LD_EXP 40
34135: PPUSH
34136: LD_VAR 0 10
34140: PPUSH
34141: LD_VAR 0 7
34145: PPUSH
34146: CALL_OW 1
34150: ST_TO_ADDR
// end ;
34151: GO 34087
34153: POP
34154: POP
// end ; temp_list = ai_attacking_unit_hex_index [ base ] ;
34155: LD_ADDR_VAR 0 2
34159: PUSH
34160: LD_EXP 75
34164: PUSH
34165: LD_VAR 0 10
34169: ARRAY
34170: ST_TO_ADDR
// for i in ai_vehicles_attack [ base ] ^ ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
34171: LD_ADDR_VAR 0 1
34175: PUSH
34176: LD_EXP 41
34180: PUSH
34181: LD_VAR 0 10
34185: ARRAY
34186: PUSH
34187: LD_EXP 64
34191: PUSH
34192: LD_VAR 0 10
34196: ARRAY
34197: ADD
34198: PUSH
34199: LD_EXP 65
34203: PUSH
34204: LD_VAR 0 10
34208: ARRAY
34209: ADD
34210: PUSH
34211: FOR_IN
34212: IFFALSE 34239
// temp_list = Replace ( temp_list , i , 1 ) ;
34214: LD_ADDR_VAR 0 2
34218: PUSH
34219: LD_VAR 0 2
34223: PPUSH
34224: LD_VAR 0 1
34228: PPUSH
34229: LD_INT 1
34231: PPUSH
34232: CALL_OW 1
34236: ST_TO_ADDR
34237: GO 34211
34239: POP
34240: POP
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
34241: LD_ADDR_EXP 75
34245: PUSH
34246: LD_EXP 75
34250: PPUSH
34251: LD_VAR 0 10
34255: PPUSH
34256: LD_VAR 0 2
34260: PPUSH
34261: CALL_OW 1
34265: ST_TO_ADDR
// num_russian_attacks = num_russian_attacks + 1 ;
34266: LD_ADDR_EXP 87
34270: PUSH
34271: LD_EXP 87
34275: PUSH
34276: LD_INT 1
34278: PLUS
34279: ST_TO_ADDR
// ai_new_attack_commencing = Replace ( ai_new_attack_commencing , base , true ) ;
34280: LD_ADDR_EXP 70
34284: PUSH
34285: LD_EXP 70
34289: PPUSH
34290: LD_VAR 0 10
34294: PPUSH
34295: LD_INT 1
34297: PPUSH
34298: CALL_OW 1
34302: ST_TO_ADDR
// ResetVehicleAttackDelay ( base ) ;
34303: LD_VAR 0 10
34307: PPUSH
34308: CALL 10311 0 1
// until false ;
34312: LD_INT 0
34314: IFFALSE 32150
// end ;
34316: PPOPN 16
34318: END
// function MayAttackGensherBase ; begin
34319: LD_INT 0
34321: PPUSH
// if not scout_event_over or game_phase > 1 then
34322: LD_EXP 93
34326: NOT
34327: PUSH
34328: LD_EXP 89
34332: PUSH
34333: LD_INT 1
34335: GREATER
34336: OR
34337: IFFALSE 34349
// result = false else
34339: LD_ADDR_VAR 0 1
34343: PUSH
34344: LD_INT 0
34346: ST_TO_ADDR
34347: GO 34365
// result := tick >= russians_allowed_to_attack_gensher_time ;
34349: LD_ADDR_VAR 0 1
34353: PUSH
34354: LD_OWVAR 1
34358: PUSH
34359: LD_EXP 94
34363: GREATEREQUAL
34364: ST_TO_ADDR
// end ;
34365: LD_VAR 0 1
34369: RET
// function MaxNumWarVehiclesForAttack ( base ) ; begin
34370: LD_INT 0
34372: PPUSH
// case base of 1 , 2 :
34373: LD_VAR 0 1
34377: PUSH
34378: LD_INT 1
34380: DOUBLE
34381: EQUAL
34382: IFTRUE 34392
34384: LD_INT 2
34386: DOUBLE
34387: EQUAL
34388: IFTRUE 34392
34390: GO 34410
34392: POP
// result = MaxNumWarVehicles ( base ) ; 3 :
34393: LD_ADDR_VAR 0 2
34397: PUSH
34398: LD_VAR 0 1
34402: PPUSH
34403: CALL 30390 0 1
34407: ST_TO_ADDR
34408: GO 34560
34410: LD_INT 3
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34418
34416: GO 34559
34418: POP
// begin result = [ 0 , 1 , 2 ] [ difficulty ] ;
34419: LD_ADDR_VAR 0 2
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: LD_INT 2
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: PUSH
34438: LD_OWVAR 67
34442: ARRAY
34443: ST_TO_ADDR
// case num_russian_attacks of 0 :
34444: LD_EXP 87
34448: PUSH
34449: LD_INT 0
34451: DOUBLE
34452: EQUAL
34453: IFTRUE 34457
34455: GO 34460
34457: POP
// begin end ; 1 :
34458: GO 34525
34460: LD_INT 1
34462: DOUBLE
34463: EQUAL
34464: IFTRUE 34468
34466: GO 34485
34468: POP
// result = result + 1 ; 2 :
34469: LD_ADDR_VAR 0 2
34473: PUSH
34474: LD_VAR 0 2
34478: PUSH
34479: LD_INT 1
34481: PLUS
34482: ST_TO_ADDR
34483: GO 34525
34485: LD_INT 2
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34493
34491: GO 34510
34493: POP
// result = result + 2 ; else
34494: LD_ADDR_VAR 0 2
34498: PUSH
34499: LD_VAR 0 2
34503: PUSH
34504: LD_INT 2
34506: PLUS
34507: ST_TO_ADDR
34508: GO 34525
34510: POP
// result = result + 3 ; end ;
34511: LD_ADDR_VAR 0 2
34515: PUSH
34516: LD_VAR 0 2
34520: PUSH
34521: LD_INT 3
34523: PLUS
34524: ST_TO_ADDR
// if result > MaxNumWarVehicles ( base ) then
34525: LD_VAR 0 2
34529: PUSH
34530: LD_VAR 0 1
34534: PPUSH
34535: CALL 30390 0 1
34539: GREATER
34540: IFFALSE 34557
// result = MaxNumWarVehicles ( base ) ;
34542: LD_ADDR_VAR 0 2
34546: PUSH
34547: LD_VAR 0 1
34551: PPUSH
34552: CALL 30390 0 1
34556: ST_TO_ADDR
// end ; end ;
34557: GO 34560
34559: POP
// end ;
34560: LD_VAR 0 2
34564: RET
// every 0 0$1 + 0 0$0.2 do var i , temp_list ; var base , side ;
34565: GO 34567
34567: DISABLE
34568: LD_INT 0
34570: PPUSH
34571: PPUSH
34572: PPUSH
34573: PPUSH
// begin base = 3 ;
34574: LD_ADDR_VAR 0 3
34578: PUSH
34579: LD_INT 3
34581: ST_TO_ADDR
// side = russians ;
34582: LD_ADDR_VAR 0 4
34586: PUSH
34587: LD_EXP 4
34591: ST_TO_ADDR
// while not scout_event_over do
34592: LD_EXP 93
34596: NOT
34597: IFFALSE 34608
// wait ( 0 0$1 ) ;
34599: LD_INT 35
34601: PPUSH
34602: CALL_OW 67
34606: GO 34592
// repeat wait ( 0 0$1 ) ;
34608: LD_INT 35
34610: PPUSH
34611: CALL_OW 67
// if game_phase > 1 then
34615: LD_EXP 89
34619: PUSH
34620: LD_INT 1
34622: GREATER
34623: IFFALSE 34627
// exit ;
34625: GO 34930
// if special_russian_attackers > 0 or not MayAttackGensherBase then
34627: LD_EXP 85
34631: PUSH
34632: LD_INT 0
34634: GREATER
34635: PUSH
34636: CALL 34319 0 0
34640: NOT
34641: OR
34642: IFFALSE 34646
// continue ;
34644: GO 34608
// ai_human_attack_delay = Replace ( ai_human_attack_delay , base , ai_human_attack_delay [ base ] - 0 0$1 ) ;
34646: LD_ADDR_EXP 68
34650: PUSH
34651: LD_EXP 68
34655: PPUSH
34656: LD_VAR 0 3
34660: PPUSH
34661: LD_EXP 68
34665: PUSH
34666: LD_VAR 0 3
34670: ARRAY
34671: PUSH
34672: LD_INT 35
34674: MINUS
34675: PPUSH
34676: CALL_OW 1
34680: ST_TO_ADDR
// if ai_human_attack_delay [ base ] > 0 0$0 then
34681: LD_EXP 68
34685: PUSH
34686: LD_VAR 0 3
34690: ARRAY
34691: PUSH
34692: LD_INT 0
34694: GREATER
34695: IFFALSE 34699
// continue ;
34697: GO 34608
// if BaseUnderAttack ( base , - 1 ) then
34699: LD_VAR 0 3
34703: PPUSH
34704: LD_INT 1
34706: NEG
34707: PPUSH
34708: CALL 23630 0 2
34712: IFFALSE 34716
// continue ;
34714: GO 34608
// if russian_reserve_troops > 0 then
34716: LD_EXP 102
34720: PUSH
34721: LD_INT 0
34723: GREATER
34724: IFFALSE 34926
// begin if logsenabled then
34726: LD_EXP 2
34730: IFFALSE 34743
// display_strings = [ Spawning russian special troops that attack Gensher!  ] ;
34732: LD_ADDR_OWVAR 47
34736: PUSH
34737: LD_STRING Spawning russian special troops that attack Gensher! 
34739: PUSH
34740: EMPTY
34741: LIST
34742: ST_TO_ADDR
// special_russian_attackers = CreateUnitsWithClassLimited ( difficulty + yashin_alive , class_bazooker , side , russian_reserve_troops ) ;
34743: LD_ADDR_EXP 85
34747: PUSH
34748: LD_OWVAR 67
34752: PUSH
34753: LD_EXP 86
34757: PLUS
34758: PPUSH
34759: LD_INT 9
34761: PPUSH
34762: LD_VAR 0 4
34766: PPUSH
34767: LD_EXP 102
34771: PPUSH
34772: CALL 9900 0 4
34776: ST_TO_ADDR
// russian_reserve_troops = russian_reserve_troops - sizeof ( special_russian_attackers ) ;
34777: LD_ADDR_EXP 102
34781: PUSH
34782: LD_EXP 102
34786: PUSH
34787: LD_EXP 85
34791: PPUSH
34792: CALL 10409 0 1
34796: MINUS
34797: ST_TO_ADDR
// if logsenabled then
34798: LD_EXP 2
34802: IFFALSE 34821
// display_strings = [ Remaining russian reserves !  , russian_reserve_troops ] ;
34804: LD_ADDR_OWVAR 47
34808: PUSH
34809: LD_STRING Remaining russian reserves ! 
34811: PUSH
34812: LD_EXP 102
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: ST_TO_ADDR
// temp_list = ai_attacking_unit_hex_index [ base ] ;
34821: LD_ADDR_VAR 0 2
34825: PUSH
34826: LD_EXP 75
34830: PUSH
34831: LD_VAR 0 3
34835: ARRAY
34836: ST_TO_ADDR
// for i in special_russian_attackers do
34837: LD_ADDR_VAR 0 1
34841: PUSH
34842: LD_EXP 85
34846: PUSH
34847: FOR_IN
34848: IFFALSE 34890
// begin PlaceUnitArea ( i , russian_reinforcements_area , false ) ;
34850: LD_VAR 0 1
34854: PPUSH
34855: LD_INT 14
34857: PPUSH
34858: LD_INT 0
34860: PPUSH
34861: CALL_OW 49
// temp_list = Replace ( temp_list , i , 1 ) ;
34865: LD_ADDR_VAR 0 2
34869: PUSH
34870: LD_VAR 0 2
34874: PPUSH
34875: LD_VAR 0 1
34879: PPUSH
34880: LD_INT 1
34882: PPUSH
34883: CALL_OW 1
34887: ST_TO_ADDR
// end ;
34888: GO 34847
34890: POP
34891: POP
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
34892: LD_ADDR_EXP 75
34896: PUSH
34897: LD_EXP 75
34901: PPUSH
34902: LD_VAR 0 3
34906: PPUSH
34907: LD_VAR 0 2
34911: PPUSH
34912: CALL_OW 1
34916: ST_TO_ADDR
// ResetHumanAttackDelay ( base ) ;
34917: LD_VAR 0 3
34921: PPUSH
34922: CALL 10360 0 1
// end ; until false ;
34926: LD_INT 0
34928: IFFALSE 34608
// end ;
34930: PPOPN 4
34932: END
// every 0 0$1 do var side , i , temp_value , base , temp_list , temp_unit , temp_list_2 , k , human_attack_hexes , vehicle_attack_hexes , temp_list_3 ; var center_hex , center_dist , attacking_humans , area , x , y , all_done , un1 , val , attacking_vehicles ; var human_prepare_hexes , vehicle_prepare_hexes ; var human_dist , vehicle_dist , all_are_ready , strat_2_attack_permitted , vehs_to_move_to_start_pos , prepare_veh_movement ; var wait_indexes , wait_indexes_pos ;
34933: GO 34935
34935: DISABLE
34936: LD_INT 0
34938: PPUSH
34939: PPUSH
34940: PPUSH
34941: PPUSH
34942: PPUSH
34943: PPUSH
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
// begin side = russians ;
34969: LD_ADDR_VAR 0 1
34973: PUSH
34974: LD_EXP 4
34978: ST_TO_ADDR
// human_dist = 3 ;
34979: LD_ADDR_VAR 0 24
34983: PUSH
34984: LD_INT 3
34986: ST_TO_ADDR
// vehicle_dist = 6 ;
34987: LD_ADDR_VAR 0 25
34991: PUSH
34992: LD_INT 6
34994: ST_TO_ADDR
// vehs_to_move_to_start_pos = [ ] ;
34995: LD_ADDR_VAR 0 28
34999: PUSH
35000: EMPTY
35001: ST_TO_ADDR
// all_are_ready = false ;
35002: LD_ADDR_VAR 0 26
35006: PUSH
35007: LD_INT 0
35009: ST_TO_ADDR
// strat_2_attack_permitted = false ;
35010: LD_ADDR_VAR 0 27
35014: PUSH
35015: LD_INT 0
35017: ST_TO_ADDR
// prepare_veh_movement = true ;
35018: LD_ADDR_VAR 0 29
35022: PUSH
35023: LD_INT 1
35025: ST_TO_ADDR
// wait_indexes_pos = 1 ;
35026: LD_ADDR_VAR 0 31
35030: PUSH
35031: LD_INT 1
35033: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35034: LD_INT 35
35036: PPUSH
35037: CALL_OW 67
// for base in ai_bases do
35041: LD_ADDR_VAR 0 4
35045: PUSH
35046: LD_EXP 59
35050: PUSH
35051: FOR_IN
35052: IFFALSE 40847
// begin if base in [ 1 , 2 ] then
35054: LD_VAR 0 4
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: IN
35069: IFFALSE 35073
// continue ;
35071: GO 35051
// if ai_vehicles_attack [ base ] = 0 and ai_attacking_soldiers [ base ] = 0 and ai_attacking_scientists [ base ] = 0 then
35073: LD_EXP 41
35077: PUSH
35078: LD_VAR 0 4
35082: ARRAY
35083: PUSH
35084: LD_INT 0
35086: EQUAL
35087: PUSH
35088: LD_EXP 64
35092: PUSH
35093: LD_VAR 0 4
35097: ARRAY
35098: PUSH
35099: LD_INT 0
35101: EQUAL
35102: AND
35103: PUSH
35104: LD_EXP 65
35108: PUSH
35109: LD_VAR 0 4
35113: ARRAY
35114: PUSH
35115: LD_INT 0
35117: EQUAL
35118: AND
35119: IFFALSE 35123
// continue ;
35121: GO 35051
// if ai_new_attack_commencing [ base ] then
35123: LD_EXP 70
35127: PUSH
35128: LD_VAR 0 4
35132: ARRAY
35133: IFFALSE 35190
// begin all_are_ready = false ;
35135: LD_ADDR_VAR 0 26
35139: PUSH
35140: LD_INT 0
35142: ST_TO_ADDR
// strat_2_attack_permitted = false ;
35143: LD_ADDR_VAR 0 27
35147: PUSH
35148: LD_INT 0
35150: ST_TO_ADDR
// prepare_veh_movement = true ;
35151: LD_ADDR_VAR 0 29
35155: PUSH
35156: LD_INT 1
35158: ST_TO_ADDR
// wait_indexes_pos = 1 ;
35159: LD_ADDR_VAR 0 31
35163: PUSH
35164: LD_INT 1
35166: ST_TO_ADDR
// ai_new_attack_commencing = Replace ( ai_new_attack_commencing , base , false ) ;
35167: LD_ADDR_EXP 70
35171: PUSH
35172: LD_EXP 70
35176: PPUSH
35177: LD_VAR 0 4
35181: PPUSH
35182: LD_INT 0
35184: PPUSH
35185: CALL_OW 1
35189: ST_TO_ADDR
// end ; case russian_attack_strategy of 1 :
35190: LD_EXP 84
35194: PUSH
35195: LD_INT 1
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 35417
35203: POP
// begin vehicle_prepare_hexes = [ [ 64 , 51 ] ] ;
35204: LD_ADDR_VAR 0 23
35208: PUSH
35209: LD_INT 64
35211: PUSH
35212: LD_INT 51
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: EMPTY
35220: LIST
35221: ST_TO_ADDR
// human_prepare_hexes = [ [ 72 , 55 ] ] ;
35222: LD_ADDR_VAR 0 22
35226: PUSH
35227: LD_INT 72
35229: PUSH
35230: LD_INT 55
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: EMPTY
35238: LIST
35239: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 75 , 46 ] , [ 75 , 30 ] , [ 70 , 20 ] , [ 84 , 20 ] , [ 99 , 29 ] , [ 108 , 42 ] , [ 112 , 33 ] ] ;
35240: LD_ADDR_VAR 0 10
35244: PUSH
35245: LD_INT 75
35247: PUSH
35248: LD_INT 46
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 75
35257: PUSH
35258: LD_INT 30
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 70
35267: PUSH
35268: LD_INT 20
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 84
35277: PUSH
35278: LD_INT 20
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 99
35287: PUSH
35288: LD_INT 29
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 108
35297: PUSH
35298: LD_INT 42
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 112
35307: PUSH
35308: LD_INT 33
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: ST_TO_ADDR
// human_attack_hexes = [ [ 75 , 46 ] , [ 75 , 30 ] , [ 70 , 20 ] , [ 84 , 20 ] , [ 99 , 29 ] , [ 108 , 42 ] , [ 112 , 33 ] ] ;
35324: LD_ADDR_VAR 0 9
35328: PUSH
35329: LD_INT 75
35331: PUSH
35332: LD_INT 46
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 75
35341: PUSH
35342: LD_INT 30
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 70
35351: PUSH
35352: LD_INT 20
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 84
35361: PUSH
35362: LD_INT 20
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 99
35371: PUSH
35372: LD_INT 29
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 108
35381: PUSH
35382: LD_INT 42
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 112
35391: PUSH
35392: LD_INT 33
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: ST_TO_ADDR
// wait_indexes = [ ] ;
35408: LD_ADDR_VAR 0 30
35412: PUSH
35413: EMPTY
35414: ST_TO_ADDR
// end ; 2 :
35415: GO 36236
35417: LD_INT 2
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35425
35423: GO 35969
35425: POP
// begin vehicle_prepare_hexes = [ [ 70 , 100 ] ] ;
35426: LD_ADDR_VAR 0 23
35430: PUSH
35431: LD_INT 70
35433: PUSH
35434: LD_INT 100
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: EMPTY
35442: LIST
35443: ST_TO_ADDR
// human_prepare_hexes = [ [ 60 , 82 ] ] ;
35444: LD_ADDR_VAR 0 22
35448: PUSH
35449: LD_INT 60
35451: PUSH
35452: LD_INT 82
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: EMPTY
35460: LIST
35461: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 105 , 95 ] , [ 121 , 93 ] , [ 123 , 79 ] , [ 143 , 78 ] , [ 143 , 71 ] , [ 144 , 64 ] , [ 149 , 74 ] , [ 158 , 88 ] , [ 141 , 85 ] , [ 124 , 79 ] , [ 121 , 93 ] , [ 105 , 95 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35462: LD_ADDR_VAR 0 10
35466: PUSH
35467: LD_INT 105
35469: PUSH
35470: LD_INT 95
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 121
35479: PUSH
35480: LD_INT 93
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 123
35489: PUSH
35490: LD_INT 79
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 143
35499: PUSH
35500: LD_INT 78
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 143
35509: PUSH
35510: LD_INT 71
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 144
35519: PUSH
35520: LD_INT 64
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 149
35529: PUSH
35530: LD_INT 74
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 158
35539: PUSH
35540: LD_INT 88
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 141
35549: PUSH
35550: LD_INT 85
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 124
35559: PUSH
35560: LD_INT 79
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 121
35569: PUSH
35570: LD_INT 93
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 105
35579: PUSH
35580: LD_INT 95
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 88
35589: PUSH
35590: LD_INT 81
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 80
35599: PUSH
35600: LD_INT 63
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 78
35609: PUSH
35610: LD_INT 48
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 89
35619: PUSH
35620: LD_INT 43
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 108
35629: PUSH
35630: LD_INT 40
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 100
35639: PUSH
35640: LD_INT 28
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
// human_attack_hexes = [ [ 73 , 95 ] , [ 84 , 101 ] , [ 95 , 102 ] , [ 104 , 100 ] , [ 114 , 97 ] , [ 124 , 99 ] , [ 132 , 100 ] , [ 137 , 94 ] , [ 149 , 99 ] , [ 161 , 104 ] , [ 158 , 88 ] , [ 149 , 74 ] , [ 144 , 64 ] , [ 143 , 71 ] , [ 141 , 85 ] , [ 124 , 79 ] , [ 121 , 93 ] , [ 105 , 95 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35667: LD_ADDR_VAR 0 9
35671: PUSH
35672: LD_INT 73
35674: PUSH
35675: LD_INT 95
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 84
35684: PUSH
35685: LD_INT 101
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 95
35694: PUSH
35695: LD_INT 102
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 104
35704: PUSH
35705: LD_INT 100
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 114
35714: PUSH
35715: LD_INT 97
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 124
35724: PUSH
35725: LD_INT 99
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 132
35734: PUSH
35735: LD_INT 100
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 137
35744: PUSH
35745: LD_INT 94
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 149
35754: PUSH
35755: LD_INT 99
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 161
35764: PUSH
35765: LD_INT 104
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 158
35774: PUSH
35775: LD_INT 88
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 149
35784: PUSH
35785: LD_INT 74
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 144
35794: PUSH
35795: LD_INT 64
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 143
35804: PUSH
35805: LD_INT 71
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 141
35814: PUSH
35815: LD_INT 85
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 124
35824: PUSH
35825: LD_INT 79
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 121
35834: PUSH
35835: LD_INT 93
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 105
35844: PUSH
35845: LD_INT 95
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 88
35854: PUSH
35855: LD_INT 81
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 80
35864: PUSH
35865: LD_INT 63
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 78
35874: PUSH
35875: LD_INT 48
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 89
35884: PUSH
35885: LD_INT 43
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 108
35894: PUSH
35895: LD_INT 40
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 100
35904: PUSH
35905: LD_INT 28
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: ST_TO_ADDR
// wait_indexes = [ [ 1 , 5 ] , [ 3 , 8 ] ] ;
35938: LD_ADDR_VAR 0 30
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: LD_INT 5
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 3
35955: PUSH
35956: LD_INT 8
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: ST_TO_ADDR
// end ; 3 :
35967: GO 36236
35969: LD_INT 3
35971: DOUBLE
35972: EQUAL
35973: IFTRUE 35977
35975: GO 36235
35977: POP
// begin vehicle_prepare_hexes = [ [ 71 , 100 ] ] ;
35978: LD_ADDR_VAR 0 23
35982: PUSH
35983: LD_INT 71
35985: PUSH
35986: LD_INT 100
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: EMPTY
35994: LIST
35995: ST_TO_ADDR
// human_prepare_hexes = [ [ 69 , 76 ] ] ;
35996: LD_ADDR_VAR 0 22
36000: PUSH
36001: LD_INT 69
36003: PUSH
36004: LD_INT 76
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: EMPTY
36012: LIST
36013: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 94 , 97 ] , [ 99 , 109 ] , [ 103 , 94 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
36014: LD_ADDR_VAR 0 10
36018: PUSH
36019: LD_INT 94
36021: PUSH
36022: LD_INT 97
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 99
36031: PUSH
36032: LD_INT 109
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 103
36041: PUSH
36042: LD_INT 94
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 88
36051: PUSH
36052: LD_INT 81
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 80
36061: PUSH
36062: LD_INT 63
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 78
36071: PUSH
36072: LD_INT 48
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 89
36081: PUSH
36082: LD_INT 43
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 108
36091: PUSH
36092: LD_INT 40
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 100
36101: PUSH
36102: LD_INT 28
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: ST_TO_ADDR
// human_attack_hexes = [ [ 94 , 97 ] , [ 99 , 109 ] , [ 103 , 94 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
36120: LD_ADDR_VAR 0 9
36124: PUSH
36125: LD_INT 94
36127: PUSH
36128: LD_INT 97
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 99
36137: PUSH
36138: LD_INT 109
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 103
36147: PUSH
36148: LD_INT 94
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 88
36157: PUSH
36158: LD_INT 81
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 80
36167: PUSH
36168: LD_INT 63
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 78
36177: PUSH
36178: LD_INT 48
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 89
36187: PUSH
36188: LD_INT 43
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 108
36197: PUSH
36198: LD_INT 40
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 100
36207: PUSH
36208: LD_INT 28
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: ST_TO_ADDR
// wait_indexes = [ ] ;
36226: LD_ADDR_VAR 0 30
36230: PUSH
36231: EMPTY
36232: ST_TO_ADDR
// end ; end ;
36233: GO 36236
36235: POP
// area = GetBaseArea ( base ) ;
36236: LD_ADDR_VAR 0 15
36240: PUSH
36241: LD_VAR 0 4
36245: PPUSH
36246: CALL 12639 0 1
36250: ST_TO_ADDR
// attacking_humans = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_ok ] ) ;
36251: LD_ADDR_VAR 0 14
36255: PUSH
36256: LD_EXP 64
36260: PUSH
36261: LD_VAR 0 4
36265: ARRAY
36266: PPUSH
36267: LD_INT 50
36269: PUSH
36270: EMPTY
36271: LIST
36272: PPUSH
36273: CALL_OW 72
36277: ST_TO_ADDR
// attacking_vehicles = UnitFilter ( ai_vehicles_attack [ base ] , [ f_ok ] ) ;
36278: LD_ADDR_VAR 0 21
36282: PUSH
36283: LD_EXP 41
36287: PUSH
36288: LD_VAR 0 4
36292: ARRAY
36293: PPUSH
36294: LD_INT 50
36296: PUSH
36297: EMPTY
36298: LIST
36299: PPUSH
36300: CALL_OW 72
36304: ST_TO_ADDR
// if ai_attacking_scientists [ base ] > 0 then
36305: LD_EXP 65
36309: PUSH
36310: LD_VAR 0 4
36314: ARRAY
36315: PUSH
36316: LD_INT 0
36318: GREATER
36319: IFFALSE 36689
// if ai_attacking_soldiers [ base ] = 0 then
36321: LD_EXP 64
36325: PUSH
36326: LD_VAR 0 4
36330: ARRAY
36331: PUSH
36332: LD_INT 0
36334: EQUAL
36335: IFFALSE 36361
// begin attacking_humans = attacking_humans ^ ai_attacking_scientists [ base ] ;
36337: LD_ADDR_VAR 0 14
36341: PUSH
36342: LD_VAR 0 14
36346: PUSH
36347: LD_EXP 65
36351: PUSH
36352: LD_VAR 0 4
36356: ARRAY
36357: ADD
36358: ST_TO_ADDR
// end else
36359: GO 36689
// begin x = 0 ;
36361: LD_ADDR_VAR 0 16
36365: PUSH
36366: LD_INT 0
36368: ST_TO_ADDR
// y = 0 ;
36369: LD_ADDR_VAR 0 17
36373: PUSH
36374: LD_INT 0
36376: ST_TO_ADDR
// for i in ai_attacking_soldiers [ base ] do
36377: LD_ADDR_VAR 0 2
36381: PUSH
36382: LD_EXP 64
36386: PUSH
36387: LD_VAR 0 4
36391: ARRAY
36392: PUSH
36393: FOR_IN
36394: IFFALSE 36440
// begin x = x + GetX ( i ) ;
36396: LD_ADDR_VAR 0 16
36400: PUSH
36401: LD_VAR 0 16
36405: PUSH
36406: LD_VAR 0 2
36410: PPUSH
36411: CALL_OW 250
36415: PLUS
36416: ST_TO_ADDR
// y = y + GetY ( i ) ;
36417: LD_ADDR_VAR 0 17
36421: PUSH
36422: LD_VAR 0 17
36426: PUSH
36427: LD_VAR 0 2
36431: PPUSH
36432: CALL_OW 251
36436: PLUS
36437: ST_TO_ADDR
// end ;
36438: GO 36393
36440: POP
36441: POP
// x = x div ai_attacking_soldiers [ base ] ;
36442: LD_ADDR_VAR 0 16
36446: PUSH
36447: LD_VAR 0 16
36451: PUSH
36452: LD_EXP 64
36456: PUSH
36457: LD_VAR 0 4
36461: ARRAY
36462: DIV
36463: ST_TO_ADDR
// y = y div ai_attacking_soldiers [ base ] ;
36464: LD_ADDR_VAR 0 17
36468: PUSH
36469: LD_VAR 0 17
36473: PUSH
36474: LD_EXP 64
36478: PUSH
36479: LD_VAR 0 4
36483: ARRAY
36484: DIV
36485: ST_TO_ADDR
// temp_value = 0 ;
36486: LD_ADDR_VAR 0 3
36490: PUSH
36491: LD_INT 0
36493: ST_TO_ADDR
// for i in ai_attacking_soldiers [ base ] do
36494: LD_ADDR_VAR 0 2
36498: PUSH
36499: LD_EXP 64
36503: PUSH
36504: LD_VAR 0 4
36508: ARRAY
36509: PUSH
36510: FOR_IN
36511: IFFALSE 36562
// begin k = GetDistUnitXY ( i , x , y ) ;
36513: LD_ADDR_VAR 0 8
36517: PUSH
36518: LD_VAR 0 2
36522: PPUSH
36523: LD_VAR 0 16
36527: PPUSH
36528: LD_VAR 0 17
36532: PPUSH
36533: CALL_OW 297
36537: ST_TO_ADDR
// if k > temp_value then
36538: LD_VAR 0 8
36542: PUSH
36543: LD_VAR 0 3
36547: GREATER
36548: IFFALSE 36560
// temp_value = k ;
36550: LD_ADDR_VAR 0 3
36554: PUSH
36555: LD_VAR 0 8
36559: ST_TO_ADDR
// end ;
36560: GO 36510
36562: POP
36563: POP
// for i in ai_attacking_scientists [ base ] do
36564: LD_ADDR_VAR 0 2
36568: PUSH
36569: LD_EXP 65
36573: PUSH
36574: LD_VAR 0 4
36578: ARRAY
36579: PUSH
36580: FOR_IN
36581: IFFALSE 36687
// if GetDistUnitXY ( i , x , y ) > temp_value then
36583: LD_VAR 0 2
36587: PPUSH
36588: LD_VAR 0 16
36592: PPUSH
36593: LD_VAR 0 17
36597: PPUSH
36598: CALL_OW 297
36602: PUSH
36603: LD_VAR 0 3
36607: GREATER
36608: IFFALSE 36685
// case GetType ( IsInUnit ( i ) ) of unit_building :
36610: LD_VAR 0 2
36614: PPUSH
36615: CALL_OW 310
36619: PPUSH
36620: CALL_OW 247
36624: PUSH
36625: LD_INT 3
36627: DOUBLE
36628: EQUAL
36629: IFTRUE 36633
36631: GO 36645
36633: POP
// ComExitBuilding ( i ) ; unit_vehicle :
36634: LD_VAR 0 2
36638: PPUSH
36639: CALL_OW 122
36643: GO 36685
36645: LD_INT 2
36647: DOUBLE
36648: EQUAL
36649: IFTRUE 36653
36651: GO 36665
36653: POP
// ComExitVehicle ( i ) ; else
36654: LD_VAR 0 2
36658: PPUSH
36659: CALL_OW 121
36663: GO 36685
36665: POP
// ComMoveXY ( i , x , y ) ; end ;
36666: LD_VAR 0 2
36670: PPUSH
36671: LD_VAR 0 16
36675: PPUSH
36676: LD_VAR 0 17
36680: PPUSH
36681: CALL_OW 111
36685: GO 36580
36687: POP
36688: POP
// end ; if not all_are_ready then
36689: LD_VAR 0 26
36693: NOT
36694: IFFALSE 37418
// begin all_done = true ;
36696: LD_ADDR_VAR 0 18
36700: PUSH
36701: LD_INT 1
36703: ST_TO_ADDR
// for k = 1 to 2 do
36704: LD_ADDR_VAR 0 8
36708: PUSH
36709: DOUBLE
36710: LD_INT 1
36712: DEC
36713: ST_TO_ADDR
36714: LD_INT 2
36716: PUSH
36717: FOR_TO
36718: IFFALSE 37305
// begin case k of 1 :
36720: LD_VAR 0 8
36724: PUSH
36725: LD_INT 1
36727: DOUBLE
36728: EQUAL
36729: IFTRUE 36733
36731: GO 36882
36733: POP
// begin temp_list = attacking_vehicles ;
36734: LD_ADDR_VAR 0 5
36738: PUSH
36739: LD_VAR 0 21
36743: ST_TO_ADDR
// temp_list_2 = vehicle_prepare_hexes ;
36744: LD_ADDR_VAR 0 7
36748: PUSH
36749: LD_VAR 0 23
36753: ST_TO_ADDR
// if russian_attack_strategy = 2 then
36754: LD_EXP 84
36758: PUSH
36759: LD_INT 2
36761: EQUAL
36762: IFFALSE 36880
// begin if prepare_veh_movement then
36764: LD_VAR 0 29
36768: IFFALSE 36822
// begin prepare_veh_movement = false ;
36770: LD_ADDR_VAR 0 29
36774: PUSH
36775: LD_INT 0
36777: ST_TO_ADDR
// for i in temp_list do
36778: LD_ADDR_VAR 0 2
36782: PUSH
36783: LD_VAR 0 5
36787: PUSH
36788: FOR_IN
36789: IFFALSE 36820
// if not IsInArea ( i , area ) then
36791: LD_VAR 0 2
36795: PPUSH
36796: LD_VAR 0 15
36800: PPUSH
36801: CALL_OW 308
36805: NOT
36806: IFFALSE 36818
// begin prepare_veh_movement = true ;
36808: LD_ADDR_VAR 0 29
36812: PUSH
36813: LD_INT 1
36815: ST_TO_ADDR
// break ;
36816: GO 36820
// end ;
36818: GO 36788
36820: POP
36821: POP
// end ; vehs_to_move_to_start_pos = [ ] ;
36822: LD_ADDR_VAR 0 28
36826: PUSH
36827: EMPTY
36828: ST_TO_ADDR
// for i in temp_list do
36829: LD_ADDR_VAR 0 2
36833: PUSH
36834: LD_VAR 0 5
36838: PUSH
36839: FOR_IN
36840: IFFALSE 36878
// begin vehs_to_move_to_start_pos = vehs_to_move_to_start_pos ^ i ;
36842: LD_ADDR_VAR 0 28
36846: PUSH
36847: LD_VAR 0 28
36851: PUSH
36852: LD_VAR 0 2
36856: ADD
36857: ST_TO_ADDR
// if IsInArea ( i , area ) then
36858: LD_VAR 0 2
36862: PPUSH
36863: LD_VAR 0 15
36867: PPUSH
36868: CALL_OW 308
36872: IFFALSE 36876
// break ;
36874: GO 36878
// end ;
36876: GO 36839
36878: POP
36879: POP
// end ; end ; 2 :
36880: GO 36914
36882: LD_INT 2
36884: DOUBLE
36885: EQUAL
36886: IFTRUE 36890
36888: GO 36913
36890: POP
// begin temp_list = attacking_humans ;
36891: LD_ADDR_VAR 0 5
36895: PUSH
36896: LD_VAR 0 14
36900: ST_TO_ADDR
// temp_list_2 = human_prepare_hexes ;
36901: LD_ADDR_VAR 0 7
36905: PUSH
36906: LD_VAR 0 22
36910: ST_TO_ADDR
// end ; end ;
36911: GO 36914
36913: POP
// temp_value = true ;
36914: LD_ADDR_VAR 0 3
36918: PUSH
36919: LD_INT 1
36921: ST_TO_ADDR
// for i in temp_list do
36922: LD_ADDR_VAR 0 2
36926: PUSH
36927: LD_VAR 0 5
36931: PUSH
36932: FOR_IN
36933: IFFALSE 37174
// begin if ai_attacking_unit_hex_index [ base ] [ i ] = temp_list_2 + 0 then
36935: LD_EXP 75
36939: PUSH
36940: LD_VAR 0 4
36944: ARRAY
36945: PUSH
36946: LD_VAR 0 2
36950: ARRAY
36951: PUSH
36952: LD_VAR 0 7
36956: PUSH
36957: LD_INT 0
36959: PLUS
36960: EQUAL
36961: IFFALSE 36973
// temp_value = false else
36963: LD_ADDR_VAR 0 3
36967: PUSH
36968: LD_INT 0
36970: ST_TO_ADDR
36971: GO 36981
// all_done = false ;
36973: LD_ADDR_VAR 0 18
36977: PUSH
36978: LD_INT 0
36980: ST_TO_ADDR
// temp_list_3 = temp_list_2 [ ai_attacking_unit_hex_index [ base ] [ i ] ] ;
36981: LD_ADDR_VAR 0 11
36985: PUSH
36986: LD_VAR 0 7
36990: PUSH
36991: LD_EXP 75
36995: PUSH
36996: LD_VAR 0 4
37000: ARRAY
37001: PUSH
37002: LD_VAR 0 2
37006: ARRAY
37007: ARRAY
37008: ST_TO_ADDR
// if k = 1 and russian_attack_strategy = 2 then
37009: LD_VAR 0 8
37013: PUSH
37014: LD_INT 1
37016: EQUAL
37017: PUSH
37018: LD_EXP 84
37022: PUSH
37023: LD_INT 2
37025: EQUAL
37026: AND
37027: IFFALSE 37054
// begin temp_list_3 = CalculateVehicleNotReadyHex ( temp_list_3 , i , attacking_vehicles ) ;
37029: LD_ADDR_VAR 0 11
37033: PUSH
37034: LD_VAR 0 11
37038: PPUSH
37039: LD_VAR 0 2
37043: PPUSH
37044: LD_VAR 0 21
37048: PPUSH
37049: CALL 41841 0 3
37053: ST_TO_ADDR
// end ; if GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) > [ vehicle_dist , human_dist + 1 ] [ k ] and not ( GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) <= 10 and not HasTask ( i ) ) then
37054: LD_VAR 0 2
37058: PPUSH
37059: LD_VAR 0 11
37063: PUSH
37064: LD_INT 1
37066: ARRAY
37067: PPUSH
37068: LD_VAR 0 11
37072: PUSH
37073: LD_INT 2
37075: ARRAY
37076: PPUSH
37077: CALL_OW 297
37081: PUSH
37082: LD_VAR 0 25
37086: PUSH
37087: LD_VAR 0 24
37091: PUSH
37092: LD_INT 1
37094: PLUS
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_VAR 0 8
37104: ARRAY
37105: GREATER
37106: PUSH
37107: LD_VAR 0 2
37111: PPUSH
37112: LD_VAR 0 11
37116: PUSH
37117: LD_INT 1
37119: ARRAY
37120: PPUSH
37121: LD_VAR 0 11
37125: PUSH
37126: LD_INT 2
37128: ARRAY
37129: PPUSH
37130: CALL_OW 297
37134: PUSH
37135: LD_INT 10
37137: LESSEQUAL
37138: PUSH
37139: LD_VAR 0 2
37143: PPUSH
37144: CALL_OW 314
37148: NOT
37149: AND
37150: NOT
37151: AND
37152: IFFALSE 37172
// begin temp_value = false ;
37154: LD_ADDR_VAR 0 3
37158: PUSH
37159: LD_INT 0
37161: ST_TO_ADDR
// all_done = false ;
37162: LD_ADDR_VAR 0 18
37166: PUSH
37167: LD_INT 0
37169: ST_TO_ADDR
// break ;
37170: GO 37174
// end ; end ;
37172: GO 36932
37174: POP
37175: POP
// if temp_value then
37176: LD_VAR 0 3
37180: IFFALSE 37303
// begin if k = 2 then
37182: LD_VAR 0 8
37186: PUSH
37187: LD_INT 2
37189: EQUAL
37190: IFFALSE 37214
// temp_list = temp_list union ai_attacking_scientists [ base ] ;
37192: LD_ADDR_VAR 0 5
37196: PUSH
37197: LD_VAR 0 5
37201: PUSH
37202: LD_EXP 65
37206: PUSH
37207: LD_VAR 0 4
37211: ARRAY
37212: UNION
37213: ST_TO_ADDR
// for i in temp_list do
37214: LD_ADDR_VAR 0 2
37218: PUSH
37219: LD_VAR 0 5
37223: PUSH
37224: FOR_IN
37225: IFFALSE 37301
// begin temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37227: LD_ADDR_VAR 0 7
37231: PUSH
37232: LD_EXP 75
37236: PUSH
37237: LD_VAR 0 4
37241: ARRAY
37242: PPUSH
37243: LD_VAR 0 2
37247: PPUSH
37248: LD_EXP 75
37252: PUSH
37253: LD_VAR 0 4
37257: ARRAY
37258: PUSH
37259: LD_VAR 0 2
37263: ARRAY
37264: PUSH
37265: LD_INT 1
37267: PLUS
37268: PPUSH
37269: CALL_OW 1
37273: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37274: LD_ADDR_EXP 75
37278: PUSH
37279: LD_EXP 75
37283: PPUSH
37284: LD_VAR 0 4
37288: PPUSH
37289: LD_VAR 0 7
37293: PPUSH
37294: CALL_OW 1
37298: ST_TO_ADDR
// end ;
37299: GO 37224
37301: POP
37302: POP
// end ; end ;
37303: GO 36717
37305: POP
37306: POP
// if all_done then
37307: LD_VAR 0 18
37311: IFFALSE 37416
// begin all_are_ready = true ;
37313: LD_ADDR_VAR 0 26
37317: PUSH
37318: LD_INT 1
37320: ST_TO_ADDR
// for i in attacking_vehicles ^ ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
37321: LD_ADDR_VAR 0 2
37325: PUSH
37326: LD_VAR 0 21
37330: PUSH
37331: LD_EXP 64
37335: PUSH
37336: LD_VAR 0 4
37340: ARRAY
37341: ADD
37342: PUSH
37343: LD_EXP 65
37347: PUSH
37348: LD_VAR 0 4
37352: ARRAY
37353: ADD
37354: PUSH
37355: FOR_IN
37356: IFFALSE 37414
// begin temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , 1 ) ;
37358: LD_ADDR_VAR 0 7
37362: PUSH
37363: LD_EXP 75
37367: PUSH
37368: LD_VAR 0 4
37372: ARRAY
37373: PPUSH
37374: LD_VAR 0 2
37378: PPUSH
37379: LD_INT 1
37381: PPUSH
37382: CALL_OW 1
37386: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37387: LD_ADDR_EXP 75
37391: PUSH
37392: LD_EXP 75
37396: PPUSH
37397: LD_VAR 0 4
37401: PPUSH
37402: LD_VAR 0 7
37406: PPUSH
37407: CALL_OW 1
37411: ST_TO_ADDR
// end ;
37412: GO 37355
37414: POP
37415: POP
// end ; end else
37416: GO 38070
// begin temp_list_3 = [ false , false ] ;
37418: LD_ADDR_VAR 0 11
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: ST_TO_ADDR
// for i in attacking_vehicles do
37433: LD_ADDR_VAR 0 2
37437: PUSH
37438: LD_VAR 0 21
37442: PUSH
37443: FOR_IN
37444: IFFALSE 37692
// if ai_attacking_unit_hex_index [ base ] [ i ] < vehicle_attack_hexes + 0 then
37446: LD_EXP 75
37450: PUSH
37451: LD_VAR 0 4
37455: ARRAY
37456: PUSH
37457: LD_VAR 0 2
37461: ARRAY
37462: PUSH
37463: LD_VAR 0 10
37467: PUSH
37468: LD_INT 0
37470: PLUS
37471: LESS
37472: IFFALSE 37690
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) <= vehicle_dist then
37474: LD_VAR 0 2
37478: PPUSH
37479: LD_VAR 0 10
37483: PUSH
37484: LD_EXP 75
37488: PUSH
37489: LD_VAR 0 4
37493: ARRAY
37494: PUSH
37495: LD_VAR 0 2
37499: ARRAY
37500: ARRAY
37501: PUSH
37502: LD_INT 1
37504: ARRAY
37505: PPUSH
37506: LD_VAR 0 10
37510: PUSH
37511: LD_EXP 75
37515: PUSH
37516: LD_VAR 0 4
37520: ARRAY
37521: PUSH
37522: LD_VAR 0 2
37526: ARRAY
37527: ARRAY
37528: PUSH
37529: LD_INT 2
37531: ARRAY
37532: PPUSH
37533: CALL_OW 297
37537: PUSH
37538: LD_VAR 0 25
37542: LESSEQUAL
37543: IFFALSE 37690
// begin if wait_indexes_pos <= wait_indexes + 0 then
37545: LD_VAR 0 31
37549: PUSH
37550: LD_VAR 0 30
37554: PUSH
37555: LD_INT 0
37557: PLUS
37558: LESSEQUAL
37559: IFFALSE 37618
// if ai_attacking_unit_hex_index [ base ] [ i ] = wait_indexes [ wait_indexes_pos ] [ 1 ] then
37561: LD_EXP 75
37565: PUSH
37566: LD_VAR 0 4
37570: ARRAY
37571: PUSH
37572: LD_VAR 0 2
37576: ARRAY
37577: PUSH
37578: LD_VAR 0 30
37582: PUSH
37583: LD_VAR 0 31
37587: ARRAY
37588: PUSH
37589: LD_INT 1
37591: ARRAY
37592: EQUAL
37593: IFFALSE 37618
// begin temp_list_3 = Replace ( temp_list_3 , 1 , true ) ;
37595: LD_ADDR_VAR 0 11
37599: PUSH
37600: LD_VAR 0 11
37604: PPUSH
37605: LD_INT 1
37607: PPUSH
37608: LD_INT 1
37610: PPUSH
37611: CALL_OW 1
37615: ST_TO_ADDR
// continue ;
37616: GO 37443
// end ; temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37618: LD_ADDR_VAR 0 7
37622: PUSH
37623: LD_EXP 75
37627: PUSH
37628: LD_VAR 0 4
37632: ARRAY
37633: PPUSH
37634: LD_VAR 0 2
37638: PPUSH
37639: LD_EXP 75
37643: PUSH
37644: LD_VAR 0 4
37648: ARRAY
37649: PUSH
37650: LD_VAR 0 2
37654: ARRAY
37655: PUSH
37656: LD_INT 1
37658: PLUS
37659: PPUSH
37660: CALL_OW 1
37664: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37665: LD_ADDR_EXP 75
37669: PUSH
37670: LD_EXP 75
37674: PPUSH
37675: LD_VAR 0 4
37679: PPUSH
37680: LD_VAR 0 7
37684: PPUSH
37685: CALL_OW 1
37689: ST_TO_ADDR
// end ; end ;
37690: GO 37443
37692: POP
37693: POP
// temp_value = true ;
37694: LD_ADDR_VAR 0 3
37698: PUSH
37699: LD_INT 1
37701: ST_TO_ADDR
// for i in attacking_humans do
37702: LD_ADDR_VAR 0 2
37706: PUSH
37707: LD_VAR 0 14
37711: PUSH
37712: FOR_IN
37713: IFFALSE 37826
// if ai_attacking_unit_hex_index [ base ] [ i ] <= human_attack_hexes + 0 then
37715: LD_EXP 75
37719: PUSH
37720: LD_VAR 0 4
37724: ARRAY
37725: PUSH
37726: LD_VAR 0 2
37730: ARRAY
37731: PUSH
37732: LD_VAR 0 9
37736: PUSH
37737: LD_INT 0
37739: PLUS
37740: LESSEQUAL
37741: IFFALSE 37824
// begin if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
37743: LD_VAR 0 2
37747: PPUSH
37748: LD_VAR 0 9
37752: PUSH
37753: LD_EXP 75
37757: PUSH
37758: LD_VAR 0 4
37762: ARRAY
37763: PUSH
37764: LD_VAR 0 2
37768: ARRAY
37769: ARRAY
37770: PUSH
37771: LD_INT 1
37773: ARRAY
37774: PPUSH
37775: LD_VAR 0 9
37779: PUSH
37780: LD_EXP 75
37784: PUSH
37785: LD_VAR 0 4
37789: ARRAY
37790: PUSH
37791: LD_VAR 0 2
37795: ARRAY
37796: ARRAY
37797: PUSH
37798: LD_INT 2
37800: ARRAY
37801: PPUSH
37802: CALL_OW 297
37806: PUSH
37807: LD_VAR 0 24
37811: GREATER
37812: IFFALSE 37824
// begin temp_value = false ;
37814: LD_ADDR_VAR 0 3
37818: PUSH
37819: LD_INT 0
37821: ST_TO_ADDR
// break ;
37822: GO 37826
// end ; end ;
37824: GO 37712
37826: POP
37827: POP
// if temp_value then
37828: LD_VAR 0 3
37832: IFFALSE 38042
// for i in ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
37834: LD_ADDR_VAR 0 2
37838: PUSH
37839: LD_EXP 64
37843: PUSH
37844: LD_VAR 0 4
37848: ARRAY
37849: PUSH
37850: LD_EXP 65
37854: PUSH
37855: LD_VAR 0 4
37859: ARRAY
37860: ADD
37861: PUSH
37862: FOR_IN
37863: IFFALSE 38040
// if ai_attacking_unit_hex_index [ base ] [ i ] < human_attack_hexes + 0 then
37865: LD_EXP 75
37869: PUSH
37870: LD_VAR 0 4
37874: ARRAY
37875: PUSH
37876: LD_VAR 0 2
37880: ARRAY
37881: PUSH
37882: LD_VAR 0 9
37886: PUSH
37887: LD_INT 0
37889: PLUS
37890: LESS
37891: IFFALSE 38038
// begin if wait_indexes_pos <= wait_indexes + 0 then
37893: LD_VAR 0 31
37897: PUSH
37898: LD_VAR 0 30
37902: PUSH
37903: LD_INT 0
37905: PLUS
37906: LESSEQUAL
37907: IFFALSE 37966
// if ai_attacking_unit_hex_index [ base ] [ i ] = wait_indexes [ wait_indexes_pos ] [ 2 ] then
37909: LD_EXP 75
37913: PUSH
37914: LD_VAR 0 4
37918: ARRAY
37919: PUSH
37920: LD_VAR 0 2
37924: ARRAY
37925: PUSH
37926: LD_VAR 0 30
37930: PUSH
37931: LD_VAR 0 31
37935: ARRAY
37936: PUSH
37937: LD_INT 2
37939: ARRAY
37940: EQUAL
37941: IFFALSE 37966
// begin temp_list_3 = Replace ( temp_list_3 , 2 , true ) ;
37943: LD_ADDR_VAR 0 11
37947: PUSH
37948: LD_VAR 0 11
37952: PPUSH
37953: LD_INT 2
37955: PPUSH
37956: LD_INT 1
37958: PPUSH
37959: CALL_OW 1
37963: ST_TO_ADDR
// break ;
37964: GO 38040
// end ; temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37966: LD_ADDR_VAR 0 7
37970: PUSH
37971: LD_EXP 75
37975: PUSH
37976: LD_VAR 0 4
37980: ARRAY
37981: PPUSH
37982: LD_VAR 0 2
37986: PPUSH
37987: LD_EXP 75
37991: PUSH
37992: LD_VAR 0 4
37996: ARRAY
37997: PUSH
37998: LD_VAR 0 2
38002: ARRAY
38003: PUSH
38004: LD_INT 1
38006: PLUS
38007: PPUSH
38008: CALL_OW 1
38012: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
38013: LD_ADDR_EXP 75
38017: PUSH
38018: LD_EXP 75
38022: PPUSH
38023: LD_VAR 0 4
38027: PPUSH
38028: LD_VAR 0 7
38032: PPUSH
38033: CALL_OW 1
38037: ST_TO_ADDR
// end ;
38038: GO 37862
38040: POP
38041: POP
// if ( temp_list_3 diff true ) = 0 then
38042: LD_VAR 0 11
38046: PUSH
38047: LD_INT 1
38049: DIFF
38050: PUSH
38051: LD_INT 0
38053: EQUAL
38054: IFFALSE 38070
// wait_indexes_pos = wait_indexes_pos + 1 ;
38056: LD_ADDR_VAR 0 31
38060: PUSH
38061: LD_VAR 0 31
38065: PUSH
38066: LD_INT 1
38068: PLUS
38069: ST_TO_ADDR
// end ; if russian_attack_strategy = 2 and not strat_2_attack_permitted then
38070: LD_EXP 84
38074: PUSH
38075: LD_INT 2
38077: EQUAL
38078: PUSH
38079: LD_VAR 0 27
38083: NOT
38084: AND
38085: IFFALSE 38220
// begin temp_list = UnitFilter ( attacking_vehicles , [ f_inarea , player_base_1 ] ) ;
38087: LD_ADDR_VAR 0 5
38091: PUSH
38092: LD_VAR 0 21
38096: PPUSH
38097: LD_INT 95
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PPUSH
38107: CALL_OW 72
38111: ST_TO_ADDR
// if temp_list + 0 >= attacking_vehicles + 0 or temp_list + 0 >= 3 then
38112: LD_VAR 0 5
38116: PUSH
38117: LD_INT 0
38119: PLUS
38120: PUSH
38121: LD_VAR 0 21
38125: PUSH
38126: LD_INT 0
38128: PLUS
38129: GREATEREQUAL
38130: PUSH
38131: LD_VAR 0 5
38135: PUSH
38136: LD_INT 0
38138: PLUS
38139: PUSH
38140: LD_INT 3
38142: GREATEREQUAL
38143: OR
38144: IFFALSE 38156
// strat_2_attack_permitted = true else
38146: LD_ADDR_VAR 0 27
38150: PUSH
38151: LD_INT 1
38153: ST_TO_ADDR
38154: GO 38220
// begin temp_value = true ;
38156: LD_ADDR_VAR 0 3
38160: PUSH
38161: LD_INT 1
38163: ST_TO_ADDR
// for i in attacking_vehicles do
38164: LD_ADDR_VAR 0 2
38168: PUSH
38169: LD_VAR 0 21
38173: PUSH
38174: FOR_IN
38175: IFFALSE 38204
// if Attacks ( i ) = 0 then
38177: LD_VAR 0 2
38181: PPUSH
38182: CALL_OW 320
38186: PUSH
38187: LD_INT 0
38189: EQUAL
38190: IFFALSE 38202
// begin temp_value = false ;
38192: LD_ADDR_VAR 0 3
38196: PUSH
38197: LD_INT 0
38199: ST_TO_ADDR
// break ;
38200: GO 38204
// end ;
38202: GO 38174
38204: POP
38205: POP
// if temp_value then
38206: LD_VAR 0 3
38210: IFFALSE 38220
// strat_2_attack_permitted = true ;
38212: LD_ADDR_VAR 0 27
38216: PUSH
38217: LD_INT 1
38219: ST_TO_ADDR
// end ; end ; for i in attacking_vehicles ^ attacking_humans do
38220: LD_ADDR_VAR 0 2
38224: PUSH
38225: LD_VAR 0 21
38229: PUSH
38230: LD_VAR 0 14
38234: ADD
38235: PUSH
38236: FOR_IN
38237: IFFALSE 40843
// begin if GetClass ( i ) = class_bazooker then
38239: LD_VAR 0 2
38243: PPUSH
38244: CALL_OW 257
38248: PUSH
38249: LD_INT 9
38251: EQUAL
38252: IFFALSE 38619
// begin temp_list = GetTaskList ( i ) ;
38254: LD_ADDR_VAR 0 5
38258: PUSH
38259: LD_VAR 0 2
38263: PPUSH
38264: CALL_OW 437
38268: ST_TO_ADDR
// if temp_list > 0 then
38269: LD_VAR 0 5
38273: PUSH
38274: LD_INT 0
38276: GREATER
38277: IFFALSE 38317
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
38279: LD_VAR 0 5
38283: PUSH
38284: LD_INT 1
38286: ARRAY
38287: PUSH
38288: LD_INT 1
38290: ARRAY
38291: PUSH
38292: LD_STRING &
38294: EQUAL
38295: PUSH
38296: LD_VAR 0 5
38300: PUSH
38301: LD_INT 1
38303: ARRAY
38304: PUSH
38305: LD_INT 1
38307: ARRAY
38308: PUSH
38309: LD_STRING %
38311: EQUAL
38312: OR
38313: IFFALSE 38317
// continue ;
38315: GO 38236
// un1 = Attacks ( i ) ;
38317: LD_ADDR_VAR 0 19
38321: PUSH
38322: LD_VAR 0 2
38326: PPUSH
38327: CALL_OW 320
38331: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
38332: LD_VAR 0 19
38336: PUSH
38337: LD_INT 0
38339: GREATER
38340: PUSH
38341: LD_VAR 0 19
38345: PUSH
38346: EMPTY
38347: LIST
38348: PPUSH
38349: CALL 40978 0 1
38353: PUSH
38354: LD_INT 0
38356: GREATER
38357: AND
38358: IFFALSE 38619
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
38360: LD_ADDR_VAR 0 7
38364: PUSH
38365: LD_VAR 0 19
38369: PPUSH
38370: CALL_OW 250
38374: PUSH
38375: LD_VAR 0 19
38379: PPUSH
38380: CALL_OW 251
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: ST_TO_ADDR
// temp_value = false ;
38389: LD_ADDR_VAR 0 3
38393: PUSH
38394: LD_INT 0
38396: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
38397: LD_ADDR_VAR 0 20
38401: PUSH
38402: LD_EXP 73
38406: PUSH
38407: LD_VAR 0 4
38411: ARRAY
38412: PUSH
38413: LD_EXP 74
38417: PUSH
38418: LD_VAR 0 4
38422: ARRAY
38423: ADD
38424: PUSH
38425: FOR_IN
38426: IFFALSE 38498
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
38428: LD_VAR 0 7
38432: PUSH
38433: LD_INT 1
38435: ARRAY
38436: PPUSH
38437: LD_VAR 0 7
38441: PUSH
38442: LD_INT 2
38444: ARRAY
38445: PPUSH
38446: LD_VAR 0 20
38450: PUSH
38451: LD_INT 1
38453: ARRAY
38454: PPUSH
38455: LD_VAR 0 20
38459: PUSH
38460: LD_INT 2
38462: ARRAY
38463: PPUSH
38464: CALL_OW 298
38468: PUSH
38469: LD_EXP 72
38473: PUSH
38474: LD_VAR 0 1
38478: ARRAY
38479: PUSH
38480: LD_INT 2
38482: ARRAY
38483: LESSEQUAL
38484: IFFALSE 38496
// begin temp_value = true ;
38486: LD_ADDR_VAR 0 3
38490: PUSH
38491: LD_INT 1
38493: ST_TO_ADDR
// break ;
38494: GO 38498
// end ;
38496: GO 38425
38498: POP
38499: POP
// if not temp_value then
38500: LD_VAR 0 3
38504: NOT
38505: IFFALSE 38619
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
38507: LD_VAR 0 2
38511: PPUSH
38512: LD_VAR 0 7
38516: PUSH
38517: LD_INT 1
38519: ARRAY
38520: PPUSH
38521: LD_VAR 0 7
38525: PUSH
38526: LD_INT 2
38528: ARRAY
38529: PPUSH
38530: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
38534: LD_ADDR_VAR 0 5
38538: PUSH
38539: LD_EXP 74
38543: PUSH
38544: LD_VAR 0 4
38548: ARRAY
38549: PPUSH
38550: LD_INT 1
38552: PPUSH
38553: LD_VAR 0 7
38557: PUSH
38558: LD_INT 1
38560: ARRAY
38561: PUSH
38562: LD_VAR 0 7
38566: PUSH
38567: LD_INT 2
38569: ARRAY
38570: PUSH
38571: LD_VAR 0 2
38575: PUSH
38576: LD_OWVAR 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: PPUSH
38587: CALL_OW 2
38591: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
38592: LD_ADDR_EXP 74
38596: PUSH
38597: LD_EXP 74
38601: PPUSH
38602: LD_VAR 0 4
38606: PPUSH
38607: LD_VAR 0 5
38611: PPUSH
38612: CALL_OW 1
38616: ST_TO_ADDR
// continue ;
38617: GO 38236
// end ; end ; end ; if not all_are_ready then
38619: LD_VAR 0 26
38623: NOT
38624: IFFALSE 38988
// begin if i in attacking_vehicles then
38626: LD_VAR 0 2
38630: PUSH
38631: LD_VAR 0 21
38635: IN
38636: IFFALSE 38749
// begin if russian_attack_strategy = 2 then
38638: LD_EXP 84
38642: PUSH
38643: LD_INT 2
38645: EQUAL
38646: IFFALSE 38727
// begin if prepare_veh_movement then
38648: LD_VAR 0 29
38652: IFFALSE 38712
// begin if not IsInArea ( i , area ) then
38654: LD_VAR 0 2
38658: PPUSH
38659: LD_VAR 0 15
38663: PPUSH
38664: CALL_OW 308
38668: NOT
38669: IFFALSE 38710
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
38671: LD_VAR 0 2
38675: PPUSH
38676: LD_EXP 42
38680: PUSH
38681: LD_VAR 0 4
38685: ARRAY
38686: PUSH
38687: LD_INT 1
38689: ARRAY
38690: PPUSH
38691: LD_EXP 42
38695: PUSH
38696: LD_VAR 0 4
38700: ARRAY
38701: PUSH
38702: LD_INT 2
38704: ARRAY
38705: PPUSH
38706: CALL_OW 111
// continue ;
38710: GO 38236
// end ; if not i in vehs_to_move_to_start_pos then
38712: LD_VAR 0 2
38716: PUSH
38717: LD_VAR 0 28
38721: IN
38722: NOT
38723: IFFALSE 38727
// continue ;
38725: GO 38236
// end ; temp_list = vehicle_prepare_hexes ;
38727: LD_ADDR_VAR 0 5
38731: PUSH
38732: LD_VAR 0 23
38736: ST_TO_ADDR
// k = vehicle_dist ;
38737: LD_ADDR_VAR 0 8
38741: PUSH
38742: LD_VAR 0 25
38746: ST_TO_ADDR
// end else
38747: GO 38769
// begin temp_list = human_prepare_hexes ;
38749: LD_ADDR_VAR 0 5
38753: PUSH
38754: LD_VAR 0 22
38758: ST_TO_ADDR
// k = human_dist ;
38759: LD_ADDR_VAR 0 8
38763: PUSH
38764: LD_VAR 0 24
38768: ST_TO_ADDR
// end ; if ai_attacking_unit_hex_index [ base ] [ i ] <= temp_list then
38769: LD_EXP 75
38773: PUSH
38774: LD_VAR 0 4
38778: ARRAY
38779: PUSH
38780: LD_VAR 0 2
38784: ARRAY
38785: PUSH
38786: LD_VAR 0 5
38790: LESSEQUAL
38791: IFFALSE 38986
// begin temp_list_3 = temp_list [ ai_attacking_unit_hex_index [ base ] [ i ] ] ;
38793: LD_ADDR_VAR 0 11
38797: PUSH
38798: LD_VAR 0 5
38802: PUSH
38803: LD_EXP 75
38807: PUSH
38808: LD_VAR 0 4
38812: ARRAY
38813: PUSH
38814: LD_VAR 0 2
38818: ARRAY
38819: ARRAY
38820: ST_TO_ADDR
// if i in attacking_vehicles and russian_attack_strategy = 2 then
38821: LD_VAR 0 2
38825: PUSH
38826: LD_VAR 0 21
38830: IN
38831: PUSH
38832: LD_EXP 84
38836: PUSH
38837: LD_INT 2
38839: EQUAL
38840: AND
38841: IFFALSE 38868
// begin temp_list_3 = CalculateVehicleNotReadyHex ( temp_list_3 , i , attacking_vehicles ) ;
38843: LD_ADDR_VAR 0 11
38847: PUSH
38848: LD_VAR 0 11
38852: PPUSH
38853: LD_VAR 0 2
38857: PPUSH
38858: LD_VAR 0 21
38862: PPUSH
38863: CALL 41841 0 3
38867: ST_TO_ADDR
// end ; if GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) > k then
38868: LD_VAR 0 2
38872: PPUSH
38873: LD_VAR 0 11
38877: PUSH
38878: LD_INT 1
38880: ARRAY
38881: PPUSH
38882: LD_VAR 0 11
38886: PUSH
38887: LD_INT 2
38889: ARRAY
38890: PPUSH
38891: CALL_OW 297
38895: PUSH
38896: LD_VAR 0 8
38900: GREATER
38901: IFFALSE 38986
// begin case GetType ( IsInUnit ( i ) ) of unit_building :
38903: LD_VAR 0 2
38907: PPUSH
38908: CALL_OW 310
38912: PPUSH
38913: CALL_OW 247
38917: PUSH
38918: LD_INT 3
38920: DOUBLE
38921: EQUAL
38922: IFTRUE 38926
38924: GO 38938
38926: POP
// ComExitBuilding ( i ) ; unit_vehicle :
38927: LD_VAR 0 2
38931: PPUSH
38932: CALL_OW 122
38936: GO 38986
38938: LD_INT 2
38940: DOUBLE
38941: EQUAL
38942: IFTRUE 38946
38944: GO 38958
38946: POP
// ComExitVehicle ( i ) ; else
38947: LD_VAR 0 2
38951: PPUSH
38952: CALL_OW 121
38956: GO 38986
38958: POP
// ComMoveXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) ; end ;
38959: LD_VAR 0 2
38963: PPUSH
38964: LD_VAR 0 11
38968: PUSH
38969: LD_INT 1
38971: ARRAY
38972: PPUSH
38973: LD_VAR 0 11
38977: PUSH
38978: LD_INT 2
38980: ARRAY
38981: PPUSH
38982: CALL_OW 111
// end ; end ; end else
38986: GO 40841
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_human ] , [ f_dist , i , 20 ] , [ f_see , side ] ] ) ;
38988: LD_ADDR_VAR 0 5
38992: PUSH
38993: LD_INT 81
38995: PUSH
38996: LD_VAR 0 1
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 21
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 91
39017: PUSH
39018: LD_VAR 0 2
39022: PUSH
39023: LD_INT 20
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 101
39033: PUSH
39034: LD_VAR 0 1
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: PPUSH
39049: CALL_OW 69
39053: ST_TO_ADDR
// if russian_attack_strategy = 2 and GetY ( i ) >= 59 then
39054: LD_EXP 84
39058: PUSH
39059: LD_INT 2
39061: EQUAL
39062: PUSH
39063: LD_VAR 0 2
39067: PPUSH
39068: CALL_OW 251
39072: PUSH
39073: LD_INT 59
39075: GREATEREQUAL
39076: AND
39077: IFFALSE 39162
// begin k = 1 ;
39079: LD_ADDR_VAR 0 8
39083: PUSH
39084: LD_INT 1
39086: ST_TO_ADDR
// while k <= temp_list + 0 do
39087: LD_VAR 0 8
39091: PUSH
39092: LD_VAR 0 5
39096: PUSH
39097: LD_INT 0
39099: PLUS
39100: LESSEQUAL
39101: IFFALSE 39162
// begin if GetY ( temp_list [ k ] ) >= 59 then
39103: LD_VAR 0 5
39107: PUSH
39108: LD_VAR 0 8
39112: ARRAY
39113: PPUSH
39114: CALL_OW 251
39118: PUSH
39119: LD_INT 59
39121: GREATEREQUAL
39122: IFFALSE 39146
// begin temp_list = Delete ( temp_list , k ) ;
39124: LD_ADDR_VAR 0 5
39128: PUSH
39129: LD_VAR 0 5
39133: PPUSH
39134: LD_VAR 0 8
39138: PPUSH
39139: CALL_OW 3
39143: ST_TO_ADDR
// continue ;
39144: GO 39087
// end ; k = k + 1 ;
39146: LD_ADDR_VAR 0 8
39150: PUSH
39151: LD_VAR 0 8
39155: PUSH
39156: LD_INT 1
39158: PLUS
39159: ST_TO_ADDR
// end ;
39160: GO 39087
// end ; temp_value := russian_attack_strategy = 2 and i in attacking_vehicles and not strat_2_attack_permitted ;
39162: LD_ADDR_VAR 0 3
39166: PUSH
39167: LD_EXP 84
39171: PUSH
39172: LD_INT 2
39174: EQUAL
39175: PUSH
39176: LD_VAR 0 2
39180: PUSH
39181: LD_VAR 0 21
39185: IN
39186: AND
39187: PUSH
39188: LD_VAR 0 27
39192: NOT
39193: AND
39194: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
39195: LD_VAR 0 5
39199: PUSH
39200: LD_INT 0
39202: GREATER
39203: PUSH
39204: LD_VAR 0 3
39208: NOT
39209: AND
39210: IFFALSE 39346
// begin temp_list_2 = UnitFilter ( temp_list , [ f_not , [ f_lives , 250 ] ] ) ;
39212: LD_ADDR_VAR 0 7
39216: PUSH
39217: LD_VAR 0 5
39221: PPUSH
39222: LD_INT 3
39224: PUSH
39225: LD_INT 24
39227: PUSH
39228: LD_INT 250
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PPUSH
39239: CALL_OW 72
39243: ST_TO_ADDR
// if temp_list_2 > 0 then
39244: LD_VAR 0 7
39248: PUSH
39249: LD_INT 0
39251: GREATER
39252: IFFALSE 39264
// temp_list = temp_list_2 ;
39254: LD_ADDR_VAR 0 5
39258: PUSH
39259: LD_VAR 0 7
39263: ST_TO_ADDR
// temp_unit = AllNearestUnitToUnit ( temp_list , i ) ;
39264: LD_ADDR_VAR 0 6
39268: PUSH
39269: LD_VAR 0 5
39273: PPUSH
39274: LD_VAR 0 2
39278: PPUSH
39279: CALL_OW 75
39283: ST_TO_ADDR
// if GetLives ( temp_unit ) > 250 then
39284: LD_VAR 0 6
39288: PPUSH
39289: CALL_OW 256
39293: PUSH
39294: LD_INT 250
39296: GREATER
39297: IFFALSE 39330
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) else
39299: LD_VAR 0 2
39303: PPUSH
39304: LD_VAR 0 6
39308: PPUSH
39309: CALL_OW 250
39313: PPUSH
39314: LD_VAR 0 6
39318: PPUSH
39319: CALL_OW 251
39323: PPUSH
39324: CALL_OW 114
39328: GO 39344
// ComAttackUnit ( i , temp_unit ) ;
39330: LD_VAR 0 2
39334: PPUSH
39335: LD_VAR 0 6
39339: PPUSH
39340: CALL_OW 115
// end else
39344: GO 40841
// begin temp_list = FindNonhumansNearUnit ( side , i , 20 , true ) ;
39346: LD_ADDR_VAR 0 5
39350: PUSH
39351: LD_VAR 0 1
39355: PPUSH
39356: LD_VAR 0 2
39360: PPUSH
39361: LD_INT 20
39363: PPUSH
39364: LD_INT 1
39366: PPUSH
39367: CALL 40856 0 4
39371: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
39372: LD_VAR 0 5
39376: PUSH
39377: LD_INT 0
39379: GREATER
39380: PUSH
39381: LD_VAR 0 3
39385: NOT
39386: AND
39387: IFFALSE 39673
// begin if i in attacking_vehicles then
39389: LD_VAR 0 2
39393: PUSH
39394: LD_VAR 0 21
39398: IN
39399: IFFALSE 39537
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
39401: LD_VAR 0 2
39405: PPUSH
39406: LD_VAR 0 10
39410: PUSH
39411: LD_EXP 75
39415: PUSH
39416: LD_VAR 0 4
39420: ARRAY
39421: PUSH
39422: LD_VAR 0 2
39426: ARRAY
39427: ARRAY
39428: PUSH
39429: LD_INT 1
39431: ARRAY
39432: PPUSH
39433: LD_VAR 0 10
39437: PUSH
39438: LD_EXP 75
39442: PUSH
39443: LD_VAR 0 4
39447: ARRAY
39448: PUSH
39449: LD_VAR 0 2
39453: ARRAY
39454: ARRAY
39455: PUSH
39456: LD_INT 2
39458: ARRAY
39459: PPUSH
39460: CALL_OW 297
39464: PUSH
39465: LD_VAR 0 25
39469: GREATER
39470: IFFALSE 39535
// ComAgressiveMove ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39472: LD_VAR 0 2
39476: PPUSH
39477: LD_VAR 0 10
39481: PUSH
39482: LD_EXP 75
39486: PUSH
39487: LD_VAR 0 4
39491: ARRAY
39492: PUSH
39493: LD_VAR 0 2
39497: ARRAY
39498: ARRAY
39499: PUSH
39500: LD_INT 1
39502: ARRAY
39503: PPUSH
39504: LD_VAR 0 10
39508: PUSH
39509: LD_EXP 75
39513: PUSH
39514: LD_VAR 0 4
39518: ARRAY
39519: PUSH
39520: LD_VAR 0 2
39524: ARRAY
39525: ARRAY
39526: PUSH
39527: LD_INT 2
39529: ARRAY
39530: PPUSH
39531: CALL_OW 114
// end else
39535: GO 39671
// if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
39537: LD_VAR 0 2
39541: PPUSH
39542: LD_VAR 0 9
39546: PUSH
39547: LD_EXP 75
39551: PUSH
39552: LD_VAR 0 4
39556: ARRAY
39557: PUSH
39558: LD_VAR 0 2
39562: ARRAY
39563: ARRAY
39564: PUSH
39565: LD_INT 1
39567: ARRAY
39568: PPUSH
39569: LD_VAR 0 9
39573: PUSH
39574: LD_EXP 75
39578: PUSH
39579: LD_VAR 0 4
39583: ARRAY
39584: PUSH
39585: LD_VAR 0 2
39589: ARRAY
39590: ARRAY
39591: PUSH
39592: LD_INT 2
39594: ARRAY
39595: PPUSH
39596: CALL_OW 297
39600: PUSH
39601: LD_VAR 0 24
39605: GREATER
39606: IFFALSE 39671
// ComAgressiveMove ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39608: LD_VAR 0 2
39612: PPUSH
39613: LD_VAR 0 9
39617: PUSH
39618: LD_EXP 75
39622: PUSH
39623: LD_VAR 0 4
39627: ARRAY
39628: PUSH
39629: LD_VAR 0 2
39633: ARRAY
39634: ARRAY
39635: PUSH
39636: LD_INT 1
39638: ARRAY
39639: PPUSH
39640: LD_VAR 0 9
39644: PUSH
39645: LD_EXP 75
39649: PUSH
39650: LD_VAR 0 4
39654: ARRAY
39655: PUSH
39656: LD_VAR 0 2
39660: ARRAY
39661: ARRAY
39662: PUSH
39663: LD_INT 2
39665: ARRAY
39666: PPUSH
39667: CALL_OW 114
// end else
39671: GO 40841
// begin temp_list = FindNonhumansNearUnit ( side , i , 20 , false ) ;
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: LD_VAR 0 2
39687: PPUSH
39688: LD_INT 20
39690: PPUSH
39691: LD_INT 0
39693: PPUSH
39694: CALL 40856 0 4
39698: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
39699: LD_VAR 0 5
39703: PUSH
39704: LD_INT 0
39706: GREATER
39707: PUSH
39708: LD_VAR 0 3
39712: NOT
39713: AND
39714: IFFALSE 39752
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
39716: LD_ADDR_VAR 0 6
39720: PUSH
39721: LD_VAR 0 5
39725: PPUSH
39726: LD_VAR 0 2
39730: PPUSH
39731: CALL_OW 74
39735: ST_TO_ADDR
// ComAttackUnit ( i , temp_unit ) ;
39736: LD_VAR 0 2
39740: PPUSH
39741: LD_VAR 0 6
39745: PPUSH
39746: CALL_OW 115
// end else
39750: GO 40841
// if i in attacking_vehicles and russian_attack_strategy = 2 and not strat_2_attack_permitted then
39752: LD_VAR 0 2
39756: PUSH
39757: LD_VAR 0 21
39761: IN
39762: PUSH
39763: LD_EXP 84
39767: PUSH
39768: LD_INT 2
39770: EQUAL
39771: AND
39772: PUSH
39773: LD_VAR 0 27
39777: NOT
39778: AND
39779: IFFALSE 40559
// begin if i = attacking_vehicles [ 1 ] then
39781: LD_VAR 0 2
39785: PUSH
39786: LD_VAR 0 21
39790: PUSH
39791: LD_INT 1
39793: ARRAY
39794: EQUAL
39795: IFFALSE 40039
// begin if ai_attacking_unit_hex_index [ base ] [ i ] <= vehicle_attack_hexes then
39797: LD_EXP 75
39801: PUSH
39802: LD_VAR 0 4
39806: ARRAY
39807: PUSH
39808: LD_VAR 0 2
39812: ARRAY
39813: PUSH
39814: LD_VAR 0 10
39818: LESSEQUAL
39819: IFFALSE 40037
// if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
39821: LD_VAR 0 2
39825: PPUSH
39826: LD_VAR 0 10
39830: PUSH
39831: LD_EXP 75
39835: PUSH
39836: LD_VAR 0 4
39840: ARRAY
39841: PUSH
39842: LD_VAR 0 2
39846: ARRAY
39847: ARRAY
39848: PUSH
39849: LD_INT 1
39851: ARRAY
39852: PPUSH
39853: LD_VAR 0 10
39857: PUSH
39858: LD_EXP 75
39862: PUSH
39863: LD_VAR 0 4
39867: ARRAY
39868: PUSH
39869: LD_VAR 0 2
39873: ARRAY
39874: ARRAY
39875: PUSH
39876: LD_INT 2
39878: ARRAY
39879: PPUSH
39880: CALL_OW 297
39884: PUSH
39885: LD_VAR 0 25
39889: GREATER
39890: IFFALSE 40037
// begin temp_value = true ;
39892: LD_ADDR_VAR 0 3
39896: PUSH
39897: LD_INT 1
39899: ST_TO_ADDR
// for k = 2 to attacking_vehicles do
39900: LD_ADDR_VAR 0 8
39904: PUSH
39905: DOUBLE
39906: LD_INT 2
39908: DEC
39909: ST_TO_ADDR
39910: LD_VAR 0 21
39914: PUSH
39915: FOR_TO
39916: IFFALSE 39966
// if GetDistUnits ( attacking_vehicles [ k ] , attacking_vehicles [ k - 1 ] ) > 7 then
39918: LD_VAR 0 21
39922: PUSH
39923: LD_VAR 0 8
39927: ARRAY
39928: PPUSH
39929: LD_VAR 0 21
39933: PUSH
39934: LD_VAR 0 8
39938: PUSH
39939: LD_INT 1
39941: MINUS
39942: ARRAY
39943: PPUSH
39944: CALL_OW 296
39948: PUSH
39949: LD_INT 7
39951: GREATER
39952: IFFALSE 39964
// begin temp_value = false ;
39954: LD_ADDR_VAR 0 3
39958: PUSH
39959: LD_INT 0
39961: ST_TO_ADDR
// break ;
39962: GO 39966
// end ;
39964: GO 39915
39966: POP
39967: POP
// if temp_value then
39968: LD_VAR 0 3
39972: IFFALSE 40037
// ComMoveXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39974: LD_VAR 0 2
39978: PPUSH
39979: LD_VAR 0 10
39983: PUSH
39984: LD_EXP 75
39988: PUSH
39989: LD_VAR 0 4
39993: ARRAY
39994: PUSH
39995: LD_VAR 0 2
39999: ARRAY
40000: ARRAY
40001: PUSH
40002: LD_INT 1
40004: ARRAY
40005: PPUSH
40006: LD_VAR 0 10
40010: PUSH
40011: LD_EXP 75
40015: PUSH
40016: LD_VAR 0 4
40020: ARRAY
40021: PUSH
40022: LD_VAR 0 2
40026: ARRAY
40027: ARRAY
40028: PUSH
40029: LD_INT 2
40031: ARRAY
40032: PPUSH
40033: CALL_OW 111
// end ; end else
40037: GO 40557
// begin temp_value = 2 ;
40039: LD_ADDR_VAR 0 3
40043: PUSH
40044: LD_INT 2
40046: ST_TO_ADDR
// for k = 2 to attacking_vehicles do
40047: LD_ADDR_VAR 0 8
40051: PUSH
40052: DOUBLE
40053: LD_INT 2
40055: DEC
40056: ST_TO_ADDR
40057: LD_VAR 0 21
40061: PUSH
40062: FOR_TO
40063: IFFALSE 40097
// if i = attacking_vehicles [ k ] then
40065: LD_VAR 0 2
40069: PUSH
40070: LD_VAR 0 21
40074: PUSH
40075: LD_VAR 0 8
40079: ARRAY
40080: EQUAL
40081: IFFALSE 40095
// begin temp_value = k ;
40083: LD_ADDR_VAR 0 3
40087: PUSH
40088: LD_VAR 0 8
40092: ST_TO_ADDR
// break ;
40093: GO 40097
// end ;
40095: GO 40062
40097: POP
40098: POP
// temp_value = temp_value - 1 ;
40099: LD_ADDR_VAR 0 3
40103: PUSH
40104: LD_VAR 0 3
40108: PUSH
40109: LD_INT 1
40111: MINUS
40112: ST_TO_ADDR
// x = GetX ( attacking_vehicles [ temp_value ] ) ;
40113: LD_ADDR_VAR 0 16
40117: PUSH
40118: LD_VAR 0 21
40122: PUSH
40123: LD_VAR 0 3
40127: ARRAY
40128: PPUSH
40129: CALL_OW 250
40133: ST_TO_ADDR
// y = GetY ( attacking_vehicles [ temp_value ] ) ;
40134: LD_ADDR_VAR 0 17
40138: PUSH
40139: LD_VAR 0 21
40143: PUSH
40144: LD_VAR 0 3
40148: ARRAY
40149: PPUSH
40150: CALL_OW 251
40154: ST_TO_ADDR
// if temp_value > 1 then
40155: LD_VAR 0 3
40159: PUSH
40160: LD_INT 1
40162: GREATER
40163: IFFALSE 40227
// begin k = AI_GetTurnDirection ( GetX ( attacking_vehicles [ temp_value - 1 ] ) , GetY ( attacking_vehicles [ temp_value - 1 ] ) , x , y ) ;
40165: LD_ADDR_VAR 0 8
40169: PUSH
40170: LD_VAR 0 21
40174: PUSH
40175: LD_VAR 0 3
40179: PUSH
40180: LD_INT 1
40182: MINUS
40183: ARRAY
40184: PPUSH
40185: CALL_OW 250
40189: PPUSH
40190: LD_VAR 0 21
40194: PUSH
40195: LD_VAR 0 3
40199: PUSH
40200: LD_INT 1
40202: MINUS
40203: ARRAY
40204: PPUSH
40205: CALL_OW 251
40209: PPUSH
40210: LD_VAR 0 16
40214: PPUSH
40215: LD_VAR 0 17
40219: PPUSH
40220: CALL 15378 0 4
40224: ST_TO_ADDR
// end else
40225: GO 40253
// k = AI_InvertDirection ( GetDir ( attacking_vehicles [ temp_value ] ) ) ;
40227: LD_ADDR_VAR 0 8
40231: PUSH
40232: LD_VAR 0 21
40236: PUSH
40237: LD_VAR 0 3
40241: ARRAY
40242: PPUSH
40243: CALL_OW 254
40247: PPUSH
40248: CALL 41566 0 1
40252: ST_TO_ADDR
// k = k - 1 ;
40253: LD_ADDR_VAR 0 8
40257: PUSH
40258: LD_VAR 0 8
40262: PUSH
40263: LD_INT 1
40265: MINUS
40266: ST_TO_ADDR
// if k = - 1 then
40267: LD_VAR 0 8
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: EQUAL
40276: IFFALSE 40286
// k = 5 ;
40278: LD_ADDR_VAR 0 8
40282: PUSH
40283: LD_INT 5
40285: ST_TO_ADDR
// temp_list_3 = [ ] ;
40286: LD_ADDR_VAR 0 11
40290: PUSH
40291: EMPTY
40292: ST_TO_ADDR
// for val = 1 to 3 do
40293: LD_ADDR_VAR 0 20
40297: PUSH
40298: DOUBLE
40299: LD_INT 1
40301: DEC
40302: ST_TO_ADDR
40303: LD_INT 3
40305: PUSH
40306: FOR_TO
40307: IFFALSE 40445
// begin temp_list_2 = [ ] ;
40309: LD_ADDR_VAR 0 7
40313: PUSH
40314: EMPTY
40315: ST_TO_ADDR
// temp_list_2 = Insert ( temp_list_2 , 1 , ShiftX ( x , k , 4 ) ) ;
40316: LD_ADDR_VAR 0 7
40320: PUSH
40321: LD_VAR 0 7
40325: PPUSH
40326: LD_INT 1
40328: PPUSH
40329: LD_VAR 0 16
40333: PPUSH
40334: LD_VAR 0 8
40338: PPUSH
40339: LD_INT 4
40341: PPUSH
40342: CALL_OW 272
40346: PPUSH
40347: CALL_OW 2
40351: ST_TO_ADDR
// temp_list_2 = Insert ( temp_list_2 , 2 , ShiftY ( y , k , 4 ) ) ;
40352: LD_ADDR_VAR 0 7
40356: PUSH
40357: LD_VAR 0 7
40361: PPUSH
40362: LD_INT 2
40364: PPUSH
40365: LD_VAR 0 17
40369: PPUSH
40370: LD_VAR 0 8
40374: PPUSH
40375: LD_INT 4
40377: PPUSH
40378: CALL_OW 273
40382: PPUSH
40383: CALL_OW 2
40387: ST_TO_ADDR
// temp_list_3 = Insert ( temp_list_3 , 1 , temp_list_2 ) ;
40388: LD_ADDR_VAR 0 11
40392: PUSH
40393: LD_VAR 0 11
40397: PPUSH
40398: LD_INT 1
40400: PPUSH
40401: LD_VAR 0 7
40405: PPUSH
40406: CALL_OW 2
40410: ST_TO_ADDR
// k = k + 1 ;
40411: LD_ADDR_VAR 0 8
40415: PUSH
40416: LD_VAR 0 8
40420: PUSH
40421: LD_INT 1
40423: PLUS
40424: ST_TO_ADDR
// if k = 6 then
40425: LD_VAR 0 8
40429: PUSH
40430: LD_INT 6
40432: EQUAL
40433: IFFALSE 40443
// k = 0 ;
40435: LD_ADDR_VAR 0 8
40439: PUSH
40440: LD_INT 0
40442: ST_TO_ADDR
// end ;
40443: GO 40306
40445: POP
40446: POP
// temp_list_2 = [ ] ;
40447: LD_ADDR_VAR 0 7
40451: PUSH
40452: EMPTY
40453: ST_TO_ADDR
// for val in temp_list_3 do
40454: LD_ADDR_VAR 0 20
40458: PUSH
40459: LD_VAR 0 11
40463: PUSH
40464: FOR_IN
40465: IFFALSE 40508
// temp_list_2 = temp_list_2 ^ GetDistUnitXY ( i , val [ 1 ] , val [ 2 ] ) ;
40467: LD_ADDR_VAR 0 7
40471: PUSH
40472: LD_VAR 0 7
40476: PUSH
40477: LD_VAR 0 2
40481: PPUSH
40482: LD_VAR 0 20
40486: PUSH
40487: LD_INT 1
40489: ARRAY
40490: PPUSH
40491: LD_VAR 0 20
40495: PUSH
40496: LD_INT 2
40498: ARRAY
40499: PPUSH
40500: CALL_OW 297
40504: ADD
40505: ST_TO_ADDR
40506: GO 40464
40508: POP
40509: POP
// temp_list_3 = WorstFromListByList ( temp_list_3 , temp_list_2 ) ;
40510: LD_ADDR_VAR 0 11
40514: PUSH
40515: LD_VAR 0 11
40519: PPUSH
40520: LD_VAR 0 7
40524: PPUSH
40525: CALL_OW 78
40529: ST_TO_ADDR
// ComMoveXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) ;
40530: LD_VAR 0 2
40534: PPUSH
40535: LD_VAR 0 11
40539: PUSH
40540: LD_INT 1
40542: ARRAY
40543: PPUSH
40544: LD_VAR 0 11
40548: PUSH
40549: LD_INT 2
40551: ARRAY
40552: PPUSH
40553: CALL_OW 111
// end ; end else
40557: GO 40841
// begin if i in attacking_vehicles then
40559: LD_VAR 0 2
40563: PUSH
40564: LD_VAR 0 21
40568: IN
40569: IFFALSE 40707
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
40571: LD_VAR 0 2
40575: PPUSH
40576: LD_VAR 0 10
40580: PUSH
40581: LD_EXP 75
40585: PUSH
40586: LD_VAR 0 4
40590: ARRAY
40591: PUSH
40592: LD_VAR 0 2
40596: ARRAY
40597: ARRAY
40598: PUSH
40599: LD_INT 1
40601: ARRAY
40602: PPUSH
40603: LD_VAR 0 10
40607: PUSH
40608: LD_EXP 75
40612: PUSH
40613: LD_VAR 0 4
40617: ARRAY
40618: PUSH
40619: LD_VAR 0 2
40623: ARRAY
40624: ARRAY
40625: PUSH
40626: LD_INT 2
40628: ARRAY
40629: PPUSH
40630: CALL_OW 297
40634: PUSH
40635: LD_VAR 0 25
40639: GREATER
40640: IFFALSE 40705
// ComAgressiveMove ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
40642: LD_VAR 0 2
40646: PPUSH
40647: LD_VAR 0 10
40651: PUSH
40652: LD_EXP 75
40656: PUSH
40657: LD_VAR 0 4
40661: ARRAY
40662: PUSH
40663: LD_VAR 0 2
40667: ARRAY
40668: ARRAY
40669: PUSH
40670: LD_INT 1
40672: ARRAY
40673: PPUSH
40674: LD_VAR 0 10
40678: PUSH
40679: LD_EXP 75
40683: PUSH
40684: LD_VAR 0 4
40688: ARRAY
40689: PUSH
40690: LD_VAR 0 2
40694: ARRAY
40695: ARRAY
40696: PUSH
40697: LD_INT 2
40699: ARRAY
40700: PPUSH
40701: CALL_OW 114
// end else
40705: GO 40841
// if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
40707: LD_VAR 0 2
40711: PPUSH
40712: LD_VAR 0 9
40716: PUSH
40717: LD_EXP 75
40721: PUSH
40722: LD_VAR 0 4
40726: ARRAY
40727: PUSH
40728: LD_VAR 0 2
40732: ARRAY
40733: ARRAY
40734: PUSH
40735: LD_INT 1
40737: ARRAY
40738: PPUSH
40739: LD_VAR 0 9
40743: PUSH
40744: LD_EXP 75
40748: PUSH
40749: LD_VAR 0 4
40753: ARRAY
40754: PUSH
40755: LD_VAR 0 2
40759: ARRAY
40760: ARRAY
40761: PUSH
40762: LD_INT 2
40764: ARRAY
40765: PPUSH
40766: CALL_OW 297
40770: PUSH
40771: LD_VAR 0 24
40775: GREATER
40776: IFFALSE 40841
// ComAgressiveMove ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
40778: LD_VAR 0 2
40782: PPUSH
40783: LD_VAR 0 9
40787: PUSH
40788: LD_EXP 75
40792: PUSH
40793: LD_VAR 0 4
40797: ARRAY
40798: PUSH
40799: LD_VAR 0 2
40803: ARRAY
40804: ARRAY
40805: PUSH
40806: LD_INT 1
40808: ARRAY
40809: PPUSH
40810: LD_VAR 0 9
40814: PUSH
40815: LD_EXP 75
40819: PUSH
40820: LD_VAR 0 4
40824: ARRAY
40825: PUSH
40826: LD_VAR 0 2
40830: ARRAY
40831: ARRAY
40832: PUSH
40833: LD_INT 2
40835: ARRAY
40836: PPUSH
40837: CALL_OW 114
// end ; end ; end ; end ; end ;
40841: GO 38236
40843: POP
40844: POP
// end ;
40845: GO 35051
40847: POP
40848: POP
// until false ;
40849: LD_INT 0
40851: IFFALSE 35034
// end ;
40853: PPOPN 31
40855: END
// function FindNonhumansNearUnit ( side , un , dist , only_dangerous ) ; var weapon_list , temp_list , i , btype , b , val ; begin
40856: LD_INT 0
40858: PPUSH
40859: PPUSH
40860: PPUSH
40861: PPUSH
40862: PPUSH
40863: PPUSH
40864: PPUSH
// temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_human ] ] , [ f_dist , un , dist ] , [ f_see , side ] ] ) ;
40865: LD_ADDR_VAR 0 7
40869: PUSH
40870: LD_INT 81
40872: PUSH
40873: LD_VAR 0 1
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 3
40884: PUSH
40885: LD_INT 21
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 91
40901: PUSH
40902: LD_VAR 0 2
40906: PUSH
40907: LD_VAR 0 3
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 101
40919: PUSH
40920: LD_VAR 0 1
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: PPUSH
40935: CALL_OW 69
40939: ST_TO_ADDR
// if only_dangerous then
40940: LD_VAR 0 4
40944: IFFALSE 40963
// begin result = DangerousUnits ( temp_list ) ;
40946: LD_ADDR_VAR 0 5
40950: PUSH
40951: LD_VAR 0 7
40955: PPUSH
40956: CALL 40978 0 1
40960: ST_TO_ADDR
// end else
40961: GO 40973
// result = temp_list end ;
40963: LD_ADDR_VAR 0 5
40967: PUSH
40968: LD_VAR 0 7
40972: ST_TO_ADDR
40973: LD_VAR 0 5
40977: RET
// function DangerousUnits ( list ) ; var weapon_list , i , btype , b , val ; begin
40978: LD_INT 0
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
// weapon_list = [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , ar_multimissile_ballista , ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_siberium_rocket , ru_time_lapser ] ;
40986: LD_ADDR_VAR 0 3
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: LD_INT 4
40999: PUSH
41000: LD_INT 5
41002: PUSH
41003: LD_INT 6
41005: PUSH
41006: LD_INT 7
41008: PUSH
41009: LD_INT 8
41011: PUSH
41012: LD_INT 9
41014: PUSH
41015: LD_INT 10
41017: PUSH
41018: LD_INT 22
41020: PUSH
41021: LD_INT 23
41023: PUSH
41024: LD_INT 24
41026: PUSH
41027: LD_INT 25
41029: PUSH
41030: LD_INT 26
41032: PUSH
41033: LD_INT 27
41035: PUSH
41036: LD_INT 28
41038: PUSH
41039: LD_INT 29
41041: PUSH
41042: LD_INT 42
41044: PUSH
41045: LD_INT 43
41047: PUSH
41048: LD_INT 44
41050: PUSH
41051: LD_INT 45
41053: PUSH
41054: LD_INT 46
41056: PUSH
41057: LD_INT 47
41059: PUSH
41060: LD_INT 48
41062: PUSH
41063: LD_INT 49
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: ST_TO_ADDR
// result = [ ] ;
41093: LD_ADDR_VAR 0 2
41097: PUSH
41098: EMPTY
41099: ST_TO_ADDR
// for i in list do
41100: LD_ADDR_VAR 0 4
41104: PUSH
41105: LD_VAR 0 1
41109: PUSH
41110: FOR_IN
41111: IFFALSE 41559
// case GetType ( i ) of unit_human :
41113: LD_VAR 0 4
41117: PPUSH
41118: CALL_OW 247
41122: PUSH
41123: LD_INT 1
41125: DOUBLE
41126: EQUAL
41127: IFTRUE 41131
41129: GO 41164
41131: POP
// begin if not IsOk ( i ) then
41132: LD_VAR 0 4
41136: PPUSH
41137: CALL_OW 302
41141: NOT
41142: IFFALSE 41146
// continue ;
41144: GO 41110
// result = result ^ i ;
41146: LD_ADDR_VAR 0 2
41150: PUSH
41151: LD_VAR 0 2
41155: PUSH
41156: LD_VAR 0 4
41160: ADD
41161: ST_TO_ADDR
// end ; unit_vehicle :
41162: GO 41557
41164: LD_INT 2
41166: DOUBLE
41167: EQUAL
41168: IFTRUE 41172
41170: GO 41312
41172: POP
// begin if not IsOk ( i ) then
41173: LD_VAR 0 4
41177: PPUSH
41178: CALL_OW 302
41182: NOT
41183: IFFALSE 41187
// continue ;
41185: GO 41110
// case GetControl ( i ) of control_manual , control_rider :
41187: LD_VAR 0 4
41191: PPUSH
41192: CALL_OW 263
41196: PUSH
41197: LD_INT 1
41199: DOUBLE
41200: EQUAL
41201: IFTRUE 41211
41203: LD_INT 4
41205: DOUBLE
41206: EQUAL
41207: IFTRUE 41211
41209: GO 41231
41211: POP
// begin if UnitsInside ( i ) = 0 then
41212: LD_VAR 0 4
41216: PPUSH
41217: CALL_OW 313
41221: PUSH
41222: LD_INT 0
41224: EQUAL
41225: IFFALSE 41229
// continue ;
41227: GO 41110
// end ; control_remote :
41229: GO 41277
41231: LD_INT 2
41233: DOUBLE
41234: EQUAL
41235: IFTRUE 41239
41237: GO 41259
41239: POP
// begin if IsControledBy ( i ) = 0 then
41240: LD_VAR 0 4
41244: PPUSH
41245: CALL_OW 312
41249: PUSH
41250: LD_INT 0
41252: EQUAL
41253: IFFALSE 41257
// continue ;
41255: GO 41110
// end ; control_computer , control_apeman :
41257: GO 41277
41259: LD_INT 3
41261: DOUBLE
41262: EQUAL
41263: IFTRUE 41273
41265: LD_INT 5
41267: DOUBLE
41268: EQUAL
41269: IFTRUE 41273
41271: GO 41276
41273: POP
// begin end ; end ;
41274: GO 41277
41276: POP
// if GetWeapon ( i ) in weapon_list then
41277: LD_VAR 0 4
41281: PPUSH
41282: CALL_OW 264
41286: PUSH
41287: LD_VAR 0 3
41291: IN
41292: IFFALSE 41310
// result = result ^ i ;
41294: LD_ADDR_VAR 0 2
41298: PUSH
41299: LD_VAR 0 2
41303: PUSH
41304: LD_VAR 0 4
41308: ADD
41309: ST_TO_ADDR
// end ; unit_building :
41310: GO 41557
41312: LD_INT 3
41314: DOUBLE
41315: EQUAL
41316: IFTRUE 41320
41318: GO 41556
41320: POP
// begin if not IsOk ( i ) then
41321: LD_VAR 0 4
41325: PPUSH
41326: CALL_OW 302
41330: NOT
41331: IFFALSE 41335
// continue ;
41333: GO 41110
// btype = GetBType ( i ) ;
41335: LD_ADDR_VAR 0 5
41339: PUSH
41340: LD_VAR 0 4
41344: PPUSH
41345: CALL_OW 266
41349: ST_TO_ADDR
// case btype of b_turret :
41350: LD_VAR 0 5
41354: PUSH
41355: LD_INT 33
41357: DOUBLE
41358: EQUAL
41359: IFTRUE 41363
41361: GO 41366
41363: POP
// begin end ; b_bunker , b_breastwork , b_armoury , b_barracks , b_fort :
41364: GO 41421
41366: LD_INT 32
41368: DOUBLE
41369: EQUAL
41370: IFTRUE 41398
41372: LD_INT 31
41374: DOUBLE
41375: EQUAL
41376: IFTRUE 41398
41378: LD_INT 4
41380: DOUBLE
41381: EQUAL
41382: IFTRUE 41398
41384: LD_INT 5
41386: DOUBLE
41387: EQUAL
41388: IFTRUE 41398
41390: LD_INT 35
41392: DOUBLE
41393: EQUAL
41394: IFTRUE 41398
41396: GO 41418
41398: POP
// begin if UnitsInside ( i ) = 0 then
41399: LD_VAR 0 4
41403: PPUSH
41404: CALL_OW 313
41408: PUSH
41409: LD_INT 0
41411: EQUAL
41412: IFFALSE 41416
// continue ;
41414: GO 41110
// end ; else
41416: GO 41421
41418: POP
// continue ; end ;
41419: GO 41110
// if btype in [ b_bunker , b_turret ] then
41421: LD_VAR 0 5
41425: PUSH
41426: LD_INT 32
41428: PUSH
41429: LD_INT 33
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: IN
41436: IFFALSE 41538
// if not GetBWeapon ( i ) in weapon_list then
41438: LD_VAR 0 4
41442: PPUSH
41443: CALL_OW 269
41447: PUSH
41448: LD_VAR 0 3
41452: IN
41453: NOT
41454: IFFALSE 41460
// continue else
41456: GO 41110
41458: GO 41538
// begin b = GetBase ( i ) ;
41460: LD_ADDR_VAR 0 6
41464: PUSH
41465: LD_VAR 0 4
41469: PPUSH
41470: CALL_OW 274
41474: ST_TO_ADDR
// val = false ;
41475: LD_ADDR_VAR 0 7
41479: PUSH
41480: LD_INT 0
41482: ST_TO_ADDR
// if b = 0 then
41483: LD_VAR 0 6
41487: PUSH
41488: LD_INT 0
41490: EQUAL
41491: IFFALSE 41503
// val = true else
41493: LD_ADDR_VAR 0 7
41497: PUSH
41498: LD_INT 1
41500: ST_TO_ADDR
41501: GO 41530
// if GetEnergy ( b ) [ 4 ] = 0 then
41503: LD_VAR 0 6
41507: PPUSH
41508: CALL_OW 278
41512: PUSH
41513: LD_INT 4
41515: ARRAY
41516: PUSH
41517: LD_INT 0
41519: EQUAL
41520: IFFALSE 41530
// val = true ;
41522: LD_ADDR_VAR 0 7
41526: PUSH
41527: LD_INT 1
41529: ST_TO_ADDR
// if val then
41530: LD_VAR 0 7
41534: IFFALSE 41538
// continue ;
41536: GO 41110
// end ; result = result ^ i ;
41538: LD_ADDR_VAR 0 2
41542: PUSH
41543: LD_VAR 0 2
41547: PUSH
41548: LD_VAR 0 4
41552: ADD
41553: ST_TO_ADDR
// end ; end ;
41554: GO 41557
41556: POP
41557: GO 41110
41559: POP
41560: POP
// end ;
41561: LD_VAR 0 2
41565: RET
// function AI_InvertDirection ( direction ) ; var dir ; begin
41566: LD_INT 0
41568: PPUSH
41569: PPUSH
// dir = direction - 3 ;
41570: LD_ADDR_VAR 0 3
41574: PUSH
41575: LD_VAR 0 1
41579: PUSH
41580: LD_INT 3
41582: MINUS
41583: ST_TO_ADDR
// if dir < 0 then
41584: LD_VAR 0 3
41588: PUSH
41589: LD_INT 0
41591: LESS
41592: IFFALSE 41608
// dir = dir + 6 ;
41594: LD_ADDR_VAR 0 3
41598: PUSH
41599: LD_VAR 0 3
41603: PUSH
41604: LD_INT 6
41606: PLUS
41607: ST_TO_ADDR
// result = dir ;
41608: LD_ADDR_VAR 0 2
41612: PUSH
41613: LD_VAR 0 3
41617: ST_TO_ADDR
// end ;
41618: LD_VAR 0 2
41622: RET
// export function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
41623: LD_INT 0
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
41631: LD_VAR 0 1
41635: PPUSH
41636: LD_VAR 0 2
41640: PPUSH
41641: CALL_OW 488
41645: NOT
41646: PUSH
41647: LD_VAR 0 3
41651: PPUSH
41652: LD_VAR 0 4
41656: PPUSH
41657: CALL_OW 488
41661: NOT
41662: OR
41663: IFFALSE 41676
// begin result = - 1 ;
41665: LD_ADDR_VAR 0 5
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: ST_TO_ADDR
// exit ;
41674: GO 41836
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
41676: LD_ADDR_VAR 0 6
41680: PUSH
41681: LD_VAR 0 1
41685: PPUSH
41686: LD_VAR 0 2
41690: PPUSH
41691: LD_VAR 0 3
41695: PPUSH
41696: LD_VAR 0 4
41700: PPUSH
41701: CALL_OW 298
41705: ST_TO_ADDR
// dist_2 = 99999 ;
41706: LD_ADDR_VAR 0 7
41710: PUSH
41711: LD_INT 99999
41713: ST_TO_ADDR
// for b = 0 to 5 do
41714: LD_ADDR_VAR 0 8
41718: PUSH
41719: DOUBLE
41720: LD_INT 0
41722: DEC
41723: ST_TO_ADDR
41724: LD_INT 5
41726: PUSH
41727: FOR_TO
41728: IFFALSE 41824
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
41730: LD_ADDR_VAR 0 9
41734: PUSH
41735: LD_VAR 0 1
41739: PPUSH
41740: LD_VAR 0 8
41744: PPUSH
41745: LD_VAR 0 6
41749: PPUSH
41750: CALL_OW 272
41754: PPUSH
41755: LD_VAR 0 2
41759: PPUSH
41760: LD_VAR 0 8
41764: PPUSH
41765: LD_VAR 0 6
41769: PPUSH
41770: CALL_OW 273
41774: PPUSH
41775: LD_VAR 0 3
41779: PPUSH
41780: LD_VAR 0 4
41784: PPUSH
41785: CALL_OW 298
41789: ST_TO_ADDR
// if temp_dist < dist_2 then
41790: LD_VAR 0 9
41794: PUSH
41795: LD_VAR 0 7
41799: LESS
41800: IFFALSE 41822
// begin dist_2 = temp_dist ;
41802: LD_ADDR_VAR 0 7
41806: PUSH
41807: LD_VAR 0 9
41811: ST_TO_ADDR
// dir = b ;
41812: LD_ADDR_VAR 0 10
41816: PUSH
41817: LD_VAR 0 8
41821: ST_TO_ADDR
// end ; end ;
41822: GO 41727
41824: POP
41825: POP
// result = dir ;
41826: LD_ADDR_VAR 0 5
41830: PUSH
41831: LD_VAR 0 10
41835: ST_TO_ADDR
// end ;
41836: LD_VAR 0 5
41840: RET
// function CalculateVehicleNotReadyHex ( hex , veh , attacking_vehicles ) ; var x , num ; begin
41841: LD_INT 0
41843: PPUSH
41844: PPUSH
41845: PPUSH
// for num = 1 to attacking_vehicles do
41846: LD_ADDR_VAR 0 6
41850: PUSH
41851: DOUBLE
41852: LD_INT 1
41854: DEC
41855: ST_TO_ADDR
41856: LD_VAR 0 3
41860: PUSH
41861: FOR_TO
41862: IFFALSE 41886
// if attacking_vehicles [ num ] = veh then
41864: LD_VAR 0 3
41868: PUSH
41869: LD_VAR 0 6
41873: ARRAY
41874: PUSH
41875: LD_VAR 0 2
41879: EQUAL
41880: IFFALSE 41884
// break ;
41882: GO 41886
41884: GO 41861
41886: POP
41887: POP
// x = ShiftX ( hex [ 1 ] , 1 , 5 * ( attacking_vehicles - num ) ) ;
41888: LD_ADDR_VAR 0 5
41892: PUSH
41893: LD_VAR 0 1
41897: PUSH
41898: LD_INT 1
41900: ARRAY
41901: PPUSH
41902: LD_INT 1
41904: PPUSH
41905: LD_INT 5
41907: PUSH
41908: LD_VAR 0 3
41912: PUSH
41913: LD_VAR 0 6
41917: MINUS
41918: MUL
41919: PPUSH
41920: CALL_OW 272
41924: ST_TO_ADDR
// result = Replace ( hex , 1 , x ) ;
41925: LD_ADDR_VAR 0 4
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: LD_INT 1
41937: PPUSH
41938: LD_VAR 0 5
41942: PPUSH
41943: CALL_OW 1
41947: ST_TO_ADDR
// end ;
41948: LD_VAR 0 4
41952: RET
// every 0 0$1 + 0 0$0.1 do var i , k , temp_list , un1 , temp_list_2 , temp_value , val ; var side , base , attack_hexes ;
41953: GO 41955
41955: DISABLE
41956: LD_INT 0
41958: PPUSH
41959: PPUSH
41960: PPUSH
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
// begin side = russians ;
41968: LD_ADDR_VAR 0 8
41972: PUSH
41973: LD_EXP 4
41977: ST_TO_ADDR
// base = 3 ;
41978: LD_ADDR_VAR 0 9
41982: PUSH
41983: LD_INT 3
41985: ST_TO_ADDR
// attack_hexes = [ [ 41 , 65 ] , [ 25 , 46 ] , [ 26 , 24 ] , [ 41 , 21 ] , [ 53 , 17 ] , [ 60 , 27 ] , [ 53 , 17 ] ] ;
41986: LD_ADDR_VAR 0 10
41990: PUSH
41991: LD_INT 41
41993: PUSH
41994: LD_INT 65
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 25
42003: PUSH
42004: LD_INT 46
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 26
42013: PUSH
42014: LD_INT 24
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 41
42023: PUSH
42024: LD_INT 21
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 53
42033: PUSH
42034: LD_INT 17
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 60
42043: PUSH
42044: LD_INT 27
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 53
42053: PUSH
42054: LD_INT 17
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42070: LD_INT 35
42072: PPUSH
42073: CALL_OW 67
// special_russian_attackers = UnitFilter ( special_russian_attackers , [ f_alive ] ) ;
42077: LD_ADDR_EXP 85
42081: PUSH
42082: LD_EXP 85
42086: PPUSH
42087: LD_INT 51
42089: PUSH
42090: EMPTY
42091: LIST
42092: PPUSH
42093: CALL_OW 72
42097: ST_TO_ADDR
// for i in special_russian_attackers do
42098: LD_ADDR_VAR 0 1
42102: PUSH
42103: LD_EXP 85
42107: PUSH
42108: FOR_IN
42109: IFFALSE 42779
// begin if GetClass ( i ) = class_bazooker then
42111: LD_VAR 0 1
42115: PPUSH
42116: CALL_OW 257
42120: PUSH
42121: LD_INT 9
42123: EQUAL
42124: IFFALSE 42473
// begin temp_list = GetTaskList ( i ) ;
42126: LD_ADDR_VAR 0 3
42130: PUSH
42131: LD_VAR 0 1
42135: PPUSH
42136: CALL_OW 437
42140: ST_TO_ADDR
// if temp_list > 0 then
42141: LD_VAR 0 3
42145: PUSH
42146: LD_INT 0
42148: GREATER
42149: IFFALSE 42171
// if temp_list [ 1 ] [ 1 ] = & then
42151: LD_VAR 0 3
42155: PUSH
42156: LD_INT 1
42158: ARRAY
42159: PUSH
42160: LD_INT 1
42162: ARRAY
42163: PUSH
42164: LD_STRING &
42166: EQUAL
42167: IFFALSE 42171
// continue ;
42169: GO 42108
// un1 = Attacks ( i ) ;
42171: LD_ADDR_VAR 0 4
42175: PUSH
42176: LD_VAR 0 1
42180: PPUSH
42181: CALL_OW 320
42185: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
42186: LD_VAR 0 4
42190: PUSH
42191: LD_INT 0
42193: GREATER
42194: PUSH
42195: LD_VAR 0 4
42199: PUSH
42200: EMPTY
42201: LIST
42202: PPUSH
42203: CALL 40978 0 1
42207: PUSH
42208: LD_INT 0
42210: GREATER
42211: AND
42212: IFFALSE 42473
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
42214: LD_ADDR_VAR 0 5
42218: PUSH
42219: LD_VAR 0 4
42223: PPUSH
42224: CALL_OW 250
42228: PUSH
42229: LD_VAR 0 4
42233: PPUSH
42234: CALL_OW 251
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: ST_TO_ADDR
// temp_value = false ;
42243: LD_ADDR_VAR 0 6
42247: PUSH
42248: LD_INT 0
42250: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
42251: LD_ADDR_VAR 0 7
42255: PUSH
42256: LD_EXP 73
42260: PUSH
42261: LD_VAR 0 9
42265: ARRAY
42266: PUSH
42267: LD_EXP 74
42271: PUSH
42272: LD_VAR 0 9
42276: ARRAY
42277: ADD
42278: PUSH
42279: FOR_IN
42280: IFFALSE 42352
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
42282: LD_VAR 0 5
42286: PUSH
42287: LD_INT 1
42289: ARRAY
42290: PPUSH
42291: LD_VAR 0 5
42295: PUSH
42296: LD_INT 2
42298: ARRAY
42299: PPUSH
42300: LD_VAR 0 7
42304: PUSH
42305: LD_INT 1
42307: ARRAY
42308: PPUSH
42309: LD_VAR 0 7
42313: PUSH
42314: LD_INT 2
42316: ARRAY
42317: PPUSH
42318: CALL_OW 298
42322: PUSH
42323: LD_EXP 72
42327: PUSH
42328: LD_VAR 0 8
42332: ARRAY
42333: PUSH
42334: LD_INT 2
42336: ARRAY
42337: LESSEQUAL
42338: IFFALSE 42350
// begin temp_value = true ;
42340: LD_ADDR_VAR 0 6
42344: PUSH
42345: LD_INT 1
42347: ST_TO_ADDR
// break ;
42348: GO 42352
// end ;
42350: GO 42279
42352: POP
42353: POP
// if not temp_value then
42354: LD_VAR 0 6
42358: NOT
42359: IFFALSE 42473
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
42361: LD_VAR 0 1
42365: PPUSH
42366: LD_VAR 0 5
42370: PUSH
42371: LD_INT 1
42373: ARRAY
42374: PPUSH
42375: LD_VAR 0 5
42379: PUSH
42380: LD_INT 2
42382: ARRAY
42383: PPUSH
42384: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
42388: LD_ADDR_VAR 0 3
42392: PUSH
42393: LD_EXP 74
42397: PUSH
42398: LD_VAR 0 9
42402: ARRAY
42403: PPUSH
42404: LD_INT 1
42406: PPUSH
42407: LD_VAR 0 5
42411: PUSH
42412: LD_INT 1
42414: ARRAY
42415: PUSH
42416: LD_VAR 0 5
42420: PUSH
42421: LD_INT 2
42423: ARRAY
42424: PUSH
42425: LD_VAR 0 1
42429: PUSH
42430: LD_OWVAR 1
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: PPUSH
42441: CALL_OW 2
42445: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
42446: LD_ADDR_EXP 74
42450: PUSH
42451: LD_EXP 74
42455: PPUSH
42456: LD_VAR 0 9
42460: PPUSH
42461: LD_VAR 0 3
42465: PPUSH
42466: CALL_OW 1
42470: ST_TO_ADDR
// continue ;
42471: GO 42108
// end ; end ; end ; k = ai_attacking_unit_hex_index [ base ] [ i ] ;
42473: LD_ADDR_VAR 0 2
42477: PUSH
42478: LD_EXP 75
42482: PUSH
42483: LD_VAR 0 9
42487: ARRAY
42488: PUSH
42489: LD_VAR 0 1
42493: ARRAY
42494: ST_TO_ADDR
// if GetDistUnitXY ( i , attack_hexes [ k ] [ 1 ] , attack_hexes [ k ] [ 2 ] ) > 1 then
42495: LD_VAR 0 1
42499: PPUSH
42500: LD_VAR 0 10
42504: PUSH
42505: LD_VAR 0 2
42509: ARRAY
42510: PUSH
42511: LD_INT 1
42513: ARRAY
42514: PPUSH
42515: LD_VAR 0 10
42519: PUSH
42520: LD_VAR 0 2
42524: ARRAY
42525: PUSH
42526: LD_INT 2
42528: ARRAY
42529: PPUSH
42530: CALL_OW 297
42534: PUSH
42535: LD_INT 1
42537: GREATER
42538: IFFALSE 42581
// ComAgressiveMove ( i , attack_hexes [ k ] [ 1 ] , attack_hexes [ k ] [ 2 ] ) else
42540: LD_VAR 0 1
42544: PPUSH
42545: LD_VAR 0 10
42549: PUSH
42550: LD_VAR 0 2
42554: ARRAY
42555: PUSH
42556: LD_INT 1
42558: ARRAY
42559: PPUSH
42560: LD_VAR 0 10
42564: PUSH
42565: LD_VAR 0 2
42569: ARRAY
42570: PUSH
42571: LD_INT 2
42573: ARRAY
42574: PPUSH
42575: CALL_OW 114
42579: GO 42777
// begin if k < attack_hexes - 1 then
42581: LD_VAR 0 2
42585: PUSH
42586: LD_VAR 0 10
42590: PUSH
42591: LD_INT 1
42593: MINUS
42594: LESS
42595: IFFALSE 42659
// begin temp_list = Replace ( ai_attacking_unit_hex_index [ base ] , i , k + 1 ) ;
42597: LD_ADDR_VAR 0 3
42601: PUSH
42602: LD_EXP 75
42606: PUSH
42607: LD_VAR 0 9
42611: ARRAY
42612: PPUSH
42613: LD_VAR 0 1
42617: PPUSH
42618: LD_VAR 0 2
42622: PUSH
42623: LD_INT 1
42625: PLUS
42626: PPUSH
42627: CALL_OW 1
42631: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
42632: LD_ADDR_EXP 75
42636: PUSH
42637: LD_EXP 75
42641: PPUSH
42642: LD_VAR 0 9
42646: PPUSH
42647: LD_VAR 0 3
42651: PPUSH
42652: CALL_OW 1
42656: ST_TO_ADDR
// end else
42657: GO 42777
// begin if Rand ( 1 , 6 ) = 1 then
42659: LD_INT 1
42661: PPUSH
42662: LD_INT 6
42664: PPUSH
42665: CALL_OW 12
42669: PUSH
42670: LD_INT 1
42672: EQUAL
42673: IFFALSE 42777
// begin if k = attack_hexes - 1 then
42675: LD_VAR 0 2
42679: PUSH
42680: LD_VAR 0 10
42684: PUSH
42685: LD_INT 1
42687: MINUS
42688: EQUAL
42689: IFFALSE 42707
// k = attack_hexes + 0 else
42691: LD_ADDR_VAR 0 2
42695: PUSH
42696: LD_VAR 0 10
42700: PUSH
42701: LD_INT 0
42703: PLUS
42704: ST_TO_ADDR
42705: GO 42721
// k = attack_hexes - 1 ;
42707: LD_ADDR_VAR 0 2
42711: PUSH
42712: LD_VAR 0 10
42716: PUSH
42717: LD_INT 1
42719: MINUS
42720: ST_TO_ADDR
// temp_list = Replace ( ai_attacking_unit_hex_index [ base ] , i , k ) ;
42721: LD_ADDR_VAR 0 3
42725: PUSH
42726: LD_EXP 75
42730: PUSH
42731: LD_VAR 0 9
42735: ARRAY
42736: PPUSH
42737: LD_VAR 0 1
42741: PPUSH
42742: LD_VAR 0 2
42746: PPUSH
42747: CALL_OW 1
42751: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
42752: LD_ADDR_EXP 75
42756: PUSH
42757: LD_EXP 75
42761: PPUSH
42762: LD_VAR 0 9
42766: PPUSH
42767: LD_VAR 0 3
42771: PPUSH
42772: CALL_OW 1
42776: ST_TO_ADDR
// end ; end ; end ; end ;
42777: GO 42108
42779: POP
42780: POP
// until false ;
42781: LD_INT 0
42783: IFFALSE 42070
// end ;
42785: PPOPN 10
42787: END
// every 0 0$1 do var base , side , val , temp_value , temp_list ;
42788: GO 42790
42790: DISABLE
42791: LD_INT 0
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
// begin repeat wait ( 1 ) ;
42798: LD_INT 1
42800: PPUSH
42801: CALL_OW 67
// for base in ai_bases do
42805: LD_ADDR_VAR 0 1
42809: PUSH
42810: LD_EXP 59
42814: PUSH
42815: FOR_IN
42816: IFFALSE 43278
// begin if base in [ 1 , 2 ] then
42818: LD_VAR 0 1
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: IN
42833: IFFALSE 42837
// continue ;
42835: GO 42815
// side = GetBaseSide ( base ) ;
42837: LD_ADDR_VAR 0 2
42841: PUSH
42842: LD_VAR 0 1
42846: PPUSH
42847: CALL 12710 0 1
42851: ST_TO_ADDR
// val = 1 ;
42852: LD_ADDR_VAR 0 3
42856: PUSH
42857: LD_INT 1
42859: ST_TO_ADDR
// while val <= ai_time_shift_hexes_underway [ base ] do
42860: LD_VAR 0 3
42864: PUSH
42865: LD_EXP 74
42869: PUSH
42870: LD_VAR 0 1
42874: ARRAY
42875: LESSEQUAL
42876: IFFALSE 43276
// begin if tick = ai_time_shift_hexes_underway [ base ] [ val ] [ 4 ] then
42878: LD_OWVAR 1
42882: PUSH
42883: LD_EXP 74
42887: PUSH
42888: LD_VAR 0 1
42892: ARRAY
42893: PUSH
42894: LD_VAR 0 3
42898: ARRAY
42899: PUSH
42900: LD_INT 4
42902: ARRAY
42903: EQUAL
42904: IFFALSE 42922
// begin val = val + 1 ;
42906: LD_ADDR_VAR 0 3
42910: PUSH
42911: LD_VAR 0 3
42915: PUSH
42916: LD_INT 1
42918: PLUS
42919: ST_TO_ADDR
// continue ;
42920: GO 42860
// end ; temp_value = false ;
42922: LD_ADDR_VAR 0 4
42926: PUSH
42927: LD_INT 0
42929: ST_TO_ADDR
// temp_list = GetTaskList ( ai_time_shift_hexes_underway [ base ] [ val ] [ 3 ] ) ;
42930: LD_ADDR_VAR 0 5
42934: PUSH
42935: LD_EXP 74
42939: PUSH
42940: LD_VAR 0 1
42944: ARRAY
42945: PUSH
42946: LD_VAR 0 3
42950: ARRAY
42951: PUSH
42952: LD_INT 3
42954: ARRAY
42955: PPUSH
42956: CALL_OW 437
42960: ST_TO_ADDR
// if IsOk ( ai_time_shift_hexes_underway [ base ] [ val ] [ 3 ] ) then
42961: LD_EXP 74
42965: PUSH
42966: LD_VAR 0 1
42970: ARRAY
42971: PUSH
42972: LD_VAR 0 3
42976: ARRAY
42977: PUSH
42978: LD_INT 3
42980: ARRAY
42981: PPUSH
42982: CALL_OW 302
42986: IFFALSE 43037
// begin if temp_list = 0 then
42988: LD_VAR 0 5
42992: PUSH
42993: LD_INT 0
42995: EQUAL
42996: IFFALSE 43008
// temp_value = true else
42998: LD_ADDR_VAR 0 4
43002: PUSH
43003: LD_INT 1
43005: ST_TO_ADDR
43006: GO 43035
// if not temp_list [ 1 ] [ 1 ] = & then
43008: LD_VAR 0 5
43012: PUSH
43013: LD_INT 1
43015: ARRAY
43016: PUSH
43017: LD_INT 1
43019: ARRAY
43020: PUSH
43021: LD_STRING &
43023: EQUAL
43024: NOT
43025: IFFALSE 43035
// temp_value = true ;
43027: LD_ADDR_VAR 0 4
43031: PUSH
43032: LD_INT 1
43034: ST_TO_ADDR
// end else
43035: GO 43090
// begin temp_list = Delete ( ai_time_shift_hexes_underway [ base ] , val ) ;
43037: LD_ADDR_VAR 0 5
43041: PUSH
43042: LD_EXP 74
43046: PUSH
43047: LD_VAR 0 1
43051: ARRAY
43052: PPUSH
43053: LD_VAR 0 3
43057: PPUSH
43058: CALL_OW 3
43062: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
43063: LD_ADDR_EXP 74
43067: PUSH
43068: LD_EXP 74
43072: PPUSH
43073: LD_VAR 0 1
43077: PPUSH
43078: LD_VAR 0 5
43082: PPUSH
43083: CALL_OW 1
43087: ST_TO_ADDR
// continue ;
43088: GO 42860
// end ; if temp_value then
43090: LD_VAR 0 4
43094: IFFALSE 43260
// begin temp_list = Insert ( ai_time_shift_hexes [ base ] , 1 , [ ai_time_shift_hexes_underway [ base ] [ val ] [ 1 ] , ai_time_shift_hexes_underway [ base ] [ val ] [ 2 ] , ai_time_shift_data [ side ] [ 1 ] ] ) ;
43096: LD_ADDR_VAR 0 5
43100: PUSH
43101: LD_EXP 73
43105: PUSH
43106: LD_VAR 0 1
43110: ARRAY
43111: PPUSH
43112: LD_INT 1
43114: PPUSH
43115: LD_EXP 74
43119: PUSH
43120: LD_VAR 0 1
43124: ARRAY
43125: PUSH
43126: LD_VAR 0 3
43130: ARRAY
43131: PUSH
43132: LD_INT 1
43134: ARRAY
43135: PUSH
43136: LD_EXP 74
43140: PUSH
43141: LD_VAR 0 1
43145: ARRAY
43146: PUSH
43147: LD_VAR 0 3
43151: ARRAY
43152: PUSH
43153: LD_INT 2
43155: ARRAY
43156: PUSH
43157: LD_EXP 72
43161: PUSH
43162: LD_VAR 0 2
43166: ARRAY
43167: PUSH
43168: LD_INT 1
43170: ARRAY
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: PPUSH
43177: CALL_OW 2
43181: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
43182: LD_ADDR_EXP 73
43186: PUSH
43187: LD_EXP 73
43191: PPUSH
43192: LD_VAR 0 1
43196: PPUSH
43197: LD_VAR 0 5
43201: PPUSH
43202: CALL_OW 1
43206: ST_TO_ADDR
// temp_list = Delete ( ai_time_shift_hexes_underway [ base ] , val ) ;
43207: LD_ADDR_VAR 0 5
43211: PUSH
43212: LD_EXP 74
43216: PUSH
43217: LD_VAR 0 1
43221: ARRAY
43222: PPUSH
43223: LD_VAR 0 3
43227: PPUSH
43228: CALL_OW 3
43232: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
43233: LD_ADDR_EXP 74
43237: PUSH
43238: LD_EXP 74
43242: PPUSH
43243: LD_VAR 0 1
43247: PPUSH
43248: LD_VAR 0 5
43252: PPUSH
43253: CALL_OW 1
43257: ST_TO_ADDR
// continue ;
43258: GO 42860
// end ; val = val + 1 ;
43260: LD_ADDR_VAR 0 3
43264: PUSH
43265: LD_VAR 0 3
43269: PUSH
43270: LD_INT 1
43272: PLUS
43273: ST_TO_ADDR
// end ;
43274: GO 42860
// end ;
43276: GO 42815
43278: POP
43279: POP
// until false ;
43280: LD_INT 0
43282: IFFALSE 42798
// end ;
43284: PPOPN 5
43286: END
// every 0 0$1 + 0 0$0.3 do var base , val , temp_list , time ;
43287: GO 43289
43289: DISABLE
43290: LD_INT 0
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
// begin repeat wait ( 0 0$1 ) ;
43296: LD_INT 35
43298: PPUSH
43299: CALL_OW 67
// for base in ai_bases do
43303: LD_ADDR_VAR 0 1
43307: PUSH
43308: LD_EXP 59
43312: PUSH
43313: FOR_IN
43314: IFFALSE 43565
// begin if base in [ 1 , 2 ] then
43316: LD_VAR 0 1
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: IN
43331: IFFALSE 43335
// continue ;
43333: GO 43313
// val = 1 ;
43335: LD_ADDR_VAR 0 2
43339: PUSH
43340: LD_INT 1
43342: ST_TO_ADDR
// while val <= ai_time_shift_hexes [ base ] do
43343: LD_VAR 0 2
43347: PUSH
43348: LD_EXP 73
43352: PUSH
43353: LD_VAR 0 1
43357: ARRAY
43358: LESSEQUAL
43359: IFFALSE 43563
// begin time = ai_time_shift_hexes [ base ] [ val ] [ 3 ] - 0 0$1 ;
43361: LD_ADDR_VAR 0 4
43365: PUSH
43366: LD_EXP 73
43370: PUSH
43371: LD_VAR 0 1
43375: ARRAY
43376: PUSH
43377: LD_VAR 0 2
43381: ARRAY
43382: PUSH
43383: LD_INT 3
43385: ARRAY
43386: PUSH
43387: LD_INT 35
43389: MINUS
43390: ST_TO_ADDR
// if time <= 0 0$0 then
43391: LD_VAR 0 4
43395: PUSH
43396: LD_INT 0
43398: LESSEQUAL
43399: IFFALSE 43456
// begin temp_list = Delete ( ai_time_shift_hexes [ base ] , val ) ;
43401: LD_ADDR_VAR 0 3
43405: PUSH
43406: LD_EXP 73
43410: PUSH
43411: LD_VAR 0 1
43415: ARRAY
43416: PPUSH
43417: LD_VAR 0 2
43421: PPUSH
43422: CALL_OW 3
43426: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
43427: LD_ADDR_EXP 73
43431: PUSH
43432: LD_EXP 73
43436: PPUSH
43437: LD_VAR 0 1
43441: PPUSH
43442: LD_VAR 0 3
43446: PPUSH
43447: CALL_OW 1
43451: ST_TO_ADDR
// continue ;
43452: GO 43343
// end else
43454: GO 43547
// begin temp_list = Replace ( ai_time_shift_hexes [ base ] [ val ] , 3 , time ) ;
43456: LD_ADDR_VAR 0 3
43460: PUSH
43461: LD_EXP 73
43465: PUSH
43466: LD_VAR 0 1
43470: ARRAY
43471: PUSH
43472: LD_VAR 0 2
43476: ARRAY
43477: PPUSH
43478: LD_INT 3
43480: PPUSH
43481: LD_VAR 0 4
43485: PPUSH
43486: CALL_OW 1
43490: ST_TO_ADDR
// temp_list = Replace ( ai_time_shift_hexes [ base ] , val , temp_list ) ;
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_EXP 73
43500: PUSH
43501: LD_VAR 0 1
43505: ARRAY
43506: PPUSH
43507: LD_VAR 0 2
43511: PPUSH
43512: LD_VAR 0 3
43516: PPUSH
43517: CALL_OW 1
43521: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
43522: LD_ADDR_EXP 73
43526: PUSH
43527: LD_EXP 73
43531: PPUSH
43532: LD_VAR 0 1
43536: PPUSH
43537: LD_VAR 0 3
43541: PPUSH
43542: CALL_OW 1
43546: ST_TO_ADDR
// end ; val = val + 1 ;
43547: LD_ADDR_VAR 0 2
43551: PUSH
43552: LD_VAR 0 2
43556: PUSH
43557: LD_INT 1
43559: PLUS
43560: ST_TO_ADDR
// end ;
43561: GO 43343
// end ;
43563: GO 43313
43565: POP
43566: POP
// until false ;
43567: LD_INT 0
43569: IFFALSE 43296
// end ;
43571: PPOPN 4
43573: END
// every 0 0$5 do var base , i ;
43574: GO 43576
43576: DISABLE
43577: LD_INT 0
43579: PPUSH
43580: PPUSH
// begin for base in ai_bases do
43581: LD_ADDR_VAR 0 1
43585: PUSH
43586: LD_EXP 59
43590: PUSH
43591: FOR_IN
43592: IFFALSE 43689
// for i in ( ai_vehicles_attack [ base ] ^ ai_vehicles_defend [ base ] ^ ai_cargo_bay [ base ] ) diff 0 do
43594: LD_ADDR_VAR 0 2
43598: PUSH
43599: LD_EXP 41
43603: PUSH
43604: LD_VAR 0 1
43608: ARRAY
43609: PUSH
43610: LD_EXP 40
43614: PUSH
43615: LD_VAR 0 1
43619: ARRAY
43620: ADD
43621: PUSH
43622: LD_EXP 61
43626: PUSH
43627: LD_VAR 0 1
43631: ARRAY
43632: ADD
43633: PUSH
43634: LD_INT 0
43636: DIFF
43637: PUSH
43638: FOR_IN
43639: IFFALSE 43685
// if GetFuel ( i ) < 10 and GetEngine ( i ) = engine_combustion then
43641: LD_VAR 0 2
43645: PPUSH
43646: CALL_OW 261
43650: PUSH
43651: LD_INT 10
43653: LESS
43654: PUSH
43655: LD_VAR 0 2
43659: PPUSH
43660: CALL_OW 262
43664: PUSH
43665: LD_INT 1
43667: EQUAL
43668: AND
43669: IFFALSE 43683
// SetFuel ( i , 10 ) ;
43671: LD_VAR 0 2
43675: PPUSH
43676: LD_INT 10
43678: PPUSH
43679: CALL_OW 240
43683: GO 43638
43685: POP
43686: POP
43687: GO 43591
43689: POP
43690: POP
// enable ;
43691: ENABLE
// end ;
43692: PPOPN 2
43694: END
// every 0 0$1 do var side , i , scientists_list , temp_list , temp_unit , base , k , temp_list_3 , free_spaces , area ;
43695: GO 43697
43697: DISABLE
43698: LD_INT 0
43700: PPUSH
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
43709: PPUSH
// begin for base in ai_bases do
43710: LD_ADDR_VAR 0 6
43714: PUSH
43715: LD_EXP 59
43719: PUSH
43720: FOR_IN
43721: IFFALSE 44416
// begin side = GetBaseSide ( base ) ;
43723: LD_ADDR_VAR 0 1
43727: PUSH
43728: LD_VAR 0 6
43732: PPUSH
43733: CALL 12710 0 1
43737: ST_TO_ADDR
// scientists_list = ai_scientists [ base ] diff ai_heal_these_humans [ base ] ;
43738: LD_ADDR_VAR 0 3
43742: PUSH
43743: LD_EXP 33
43747: PUSH
43748: LD_VAR 0 6
43752: ARRAY
43753: PUSH
43754: LD_EXP 44
43758: PUSH
43759: LD_VAR 0 6
43763: ARRAY
43764: DIFF
43765: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
43766: LD_ADDR_VAR 0 4
43770: PUSH
43771: LD_EXP 44
43775: PUSH
43776: LD_VAR 0 6
43780: ARRAY
43781: ST_TO_ADDR
// i = 1 ;
43782: LD_ADDR_VAR 0 2
43786: PUSH
43787: LD_INT 1
43789: ST_TO_ADDR
// while i <= scientists_list do
43790: LD_VAR 0 2
43794: PUSH
43795: LD_VAR 0 3
43799: LESSEQUAL
43800: IFFALSE 43895
// begin if GetLives ( scientists_list [ i ] ) <= 700 then
43802: LD_VAR 0 3
43806: PUSH
43807: LD_VAR 0 2
43811: ARRAY
43812: PPUSH
43813: CALL_OW 256
43817: PUSH
43818: LD_INT 700
43820: LESSEQUAL
43821: IFFALSE 43879
// begin temp_list = temp_list ^ scientists_list [ i ] ;
43823: LD_ADDR_VAR 0 4
43827: PUSH
43828: LD_VAR 0 4
43832: PUSH
43833: LD_VAR 0 3
43837: PUSH
43838: LD_VAR 0 2
43842: ARRAY
43843: ADD
43844: ST_TO_ADDR
// scientists_list = Delete ( scientists_list , i ) ;
43845: LD_ADDR_VAR 0 3
43849: PUSH
43850: LD_VAR 0 3
43854: PPUSH
43855: LD_VAR 0 2
43859: PPUSH
43860: CALL_OW 3
43864: ST_TO_ADDR
// i = i - 1 ;
43865: LD_ADDR_VAR 0 2
43869: PUSH
43870: LD_VAR 0 2
43874: PUSH
43875: LD_INT 1
43877: MINUS
43878: ST_TO_ADDR
// end ; i = i + 1 ;
43879: LD_ADDR_VAR 0 2
43883: PUSH
43884: LD_VAR 0 2
43888: PUSH
43889: LD_INT 1
43891: PLUS
43892: ST_TO_ADDR
// end ;
43893: GO 43790
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
43895: LD_ADDR_EXP 44
43899: PUSH
43900: LD_EXP 44
43904: PPUSH
43905: LD_VAR 0 6
43909: PPUSH
43910: LD_VAR 0 4
43914: PPUSH
43915: CALL_OW 1
43919: ST_TO_ADDR
// temp_list = [ ] ;
43920: LD_ADDR_VAR 0 4
43924: PUSH
43925: EMPTY
43926: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
43927: LD_ADDR_VAR 0 2
43931: PUSH
43932: LD_EXP 44
43936: PUSH
43937: LD_VAR 0 6
43941: ARRAY
43942: PUSH
43943: FOR_IN
43944: IFFALSE 43994
// if GetLives ( i ) < 1000 and IsInUnit ( i ) = 0 then
43946: LD_VAR 0 2
43950: PPUSH
43951: CALL_OW 256
43955: PUSH
43956: LD_INT 1000
43958: LESS
43959: PUSH
43960: LD_VAR 0 2
43964: PPUSH
43965: CALL_OW 310
43969: PUSH
43970: LD_INT 0
43972: EQUAL
43973: AND
43974: IFFALSE 43992
// temp_list = temp_list ^ i ;
43976: LD_ADDR_VAR 0 4
43980: PUSH
43981: LD_VAR 0 4
43985: PUSH
43986: LD_VAR 0 2
43990: ADD
43991: ST_TO_ADDR
43992: GO 43943
43994: POP
43995: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
43996: LD_ADDR_EXP 44
44000: PUSH
44001: LD_EXP 44
44005: PPUSH
44006: LD_VAR 0 6
44010: PPUSH
44011: LD_VAR 0 4
44015: PPUSH
44016: CALL_OW 1
44020: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
44021: LD_ADDR_VAR 0 2
44025: PUSH
44026: LD_EXP 44
44030: PUSH
44031: LD_VAR 0 6
44035: ARRAY
44036: PUSH
44037: FOR_IN
44038: IFFALSE 44126
// if GetDistUnitXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 4 then
44040: LD_VAR 0 2
44044: PPUSH
44045: LD_EXP 42
44049: PUSH
44050: LD_VAR 0 6
44054: ARRAY
44055: PUSH
44056: LD_INT 1
44058: ARRAY
44059: PPUSH
44060: LD_EXP 42
44064: PUSH
44065: LD_VAR 0 6
44069: ARRAY
44070: PUSH
44071: LD_INT 2
44073: ARRAY
44074: PPUSH
44075: CALL_OW 297
44079: PUSH
44080: LD_INT 4
44082: GREATER
44083: IFFALSE 44124
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
44085: LD_VAR 0 2
44089: PPUSH
44090: LD_EXP 42
44094: PUSH
44095: LD_VAR 0 6
44099: ARRAY
44100: PUSH
44101: LD_INT 1
44103: ARRAY
44104: PPUSH
44105: LD_EXP 42
44109: PUSH
44110: LD_VAR 0 6
44114: ARRAY
44115: PUSH
44116: LD_INT 2
44118: ARRAY
44119: PPUSH
44120: CALL_OW 111
44124: GO 44037
44126: POP
44127: POP
// if scientists_list = 0 then
44128: LD_VAR 0 3
44132: PUSH
44133: LD_INT 0
44135: EQUAL
44136: IFFALSE 44140
// continue ;
44138: GO 43720
// if ai_heal_these_humans [ base ] > 0 then
44140: LD_EXP 44
44144: PUSH
44145: LD_VAR 0 6
44149: ARRAY
44150: PUSH
44151: LD_INT 0
44153: GREATER
44154: IFFALSE 44349
// begin area = GetBaseArea ( base ) ;
44156: LD_ADDR_VAR 0 10
44160: PUSH
44161: LD_VAR 0 6
44165: PPUSH
44166: CALL 12639 0 1
44170: ST_TO_ADDR
// temp_list = UnitFilter ( ai_heal_these_humans [ base ] , [ f_inarea , area ] ) ;
44171: LD_ADDR_VAR 0 4
44175: PUSH
44176: LD_EXP 44
44180: PUSH
44181: LD_VAR 0 6
44185: ARRAY
44186: PPUSH
44187: LD_INT 95
44189: PUSH
44190: LD_VAR 0 10
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PPUSH
44199: CALL_OW 72
44203: ST_TO_ADDR
// if temp_list > 0 then
44204: LD_VAR 0 4
44208: PUSH
44209: LD_INT 0
44211: GREATER
44212: IFFALSE 44349
// begin scientists_list = GetHumansOutOfUnits ( scientists_list ) ;
44214: LD_ADDR_VAR 0 3
44218: PUSH
44219: LD_VAR 0 3
44223: PPUSH
44224: CALL 23525 0 1
44228: ST_TO_ADDR
// repeat i = 1 ;
44229: LD_ADDR_VAR 0 2
44233: PUSH
44234: LD_INT 1
44236: ST_TO_ADDR
// while i <= temp_list do
44237: LD_VAR 0 2
44241: PUSH
44242: LD_VAR 0 4
44246: LESSEQUAL
44247: IFFALSE 44339
// begin if scientists_list = 0 then
44249: LD_VAR 0 3
44253: PUSH
44254: LD_INT 0
44256: EQUAL
44257: IFFALSE 44261
// break ;
44259: GO 44339
// temp_unit = NearestUnitToUnit ( scientists_list , temp_list [ i ] ) ;
44261: LD_ADDR_VAR 0 5
44265: PUSH
44266: LD_VAR 0 3
44270: PPUSH
44271: LD_VAR 0 4
44275: PUSH
44276: LD_VAR 0 2
44280: ARRAY
44281: PPUSH
44282: CALL_OW 74
44286: ST_TO_ADDR
// ComHeal ( temp_unit , temp_list [ i ] ) ;
44287: LD_VAR 0 5
44291: PPUSH
44292: LD_VAR 0 4
44296: PUSH
44297: LD_VAR 0 2
44301: ARRAY
44302: PPUSH
44303: CALL_OW 128
// scientists_list = scientists_list diff temp_unit ;
44307: LD_ADDR_VAR 0 3
44311: PUSH
44312: LD_VAR 0 3
44316: PUSH
44317: LD_VAR 0 5
44321: DIFF
44322: ST_TO_ADDR
// i = i + 1 ;
44323: LD_ADDR_VAR 0 2
44327: PUSH
44328: LD_VAR 0 2
44332: PUSH
44333: LD_INT 1
44335: PLUS
44336: ST_TO_ADDR
// end ;
44337: GO 44237
// until scientists_list = 0 ;
44339: LD_VAR 0 3
44343: PUSH
44344: LD_INT 0
44346: EQUAL
44347: IFFALSE 44229
// end ; end ; DistributeHumansToBuildings ( base , scientists_list , UnitFilter ( ai_labs [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_scientistic , 6 , true , false ) ;
44349: LD_VAR 0 6
44353: PPUSH
44354: LD_VAR 0 3
44358: PPUSH
44359: LD_EXP 36
44363: PUSH
44364: LD_VAR 0 6
44368: ARRAY
44369: PPUSH
44370: LD_INT 50
44372: PUSH
44373: EMPTY
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 57
44381: PUSH
44382: EMPTY
44383: LIST
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PPUSH
44393: CALL_OW 72
44397: PPUSH
44398: LD_INT 4
44400: PPUSH
44401: LD_INT 6
44403: PPUSH
44404: LD_INT 1
44406: PPUSH
44407: LD_INT 0
44409: PPUSH
44410: CALL 15596 0 7
// end ;
44414: GO 43720
44416: POP
44417: POP
// enable ;
44418: ENABLE
// end ; end_of_file
44419: PPOPN 10
44421: END
// export function GetApes ( side ) ; begin
44422: LD_INT 0
44424: PPUSH
// result = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ;
44425: LD_ADDR_VAR 0 2
44429: PUSH
44430: LD_INT 22
44432: PUSH
44433: LD_VAR 0 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: LD_INT 25
44447: PUSH
44448: LD_INT 12
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 25
44457: PUSH
44458: LD_INT 15
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 25
44467: PUSH
44468: LD_INT 16
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 25
44477: PUSH
44478: LD_INT 17
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PPUSH
44496: CALL_OW 69
44500: ST_TO_ADDR
// end ;
44501: LD_VAR 0 2
44505: RET
// on ResearchComplete ( tech , lab ) do var temp_list , temp_unit , i , un_list ;
44506: LD_INT 0
44508: PPUSH
44509: PPUSH
44510: PPUSH
44511: PPUSH
// begin if GetSide ( lab ) = you then
44512: LD_VAR 0 2
44516: PPUSH
44517: CALL_OW 255
44521: PUSH
44522: LD_EXP 3
44526: EQUAL
44527: IFFALSE 45544
// begin SetTech ( tech , you_alt , state_researched ) ;
44529: LD_VAR 0 1
44533: PPUSH
44534: LD_EXP 6
44538: PPUSH
44539: LD_INT 2
44541: PPUSH
44542: CALL_OW 322
// if tech = tech_HidCam then
44546: LD_VAR 0 1
44550: PUSH
44551: LD_INT 17
44553: EQUAL
44554: IFFALSE 45544
// begin un_list = [ Sonya , MarkB , Aviradze ] diff 0 ;
44556: LD_ADDR_VAR 0 6
44560: PUSH
44561: LD_EXP 11
44565: PUSH
44566: LD_EXP 20
44570: PUSH
44571: LD_EXP 21
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: DIFF
44584: ST_TO_ADDR
// temp_list = [ ] ;
44585: LD_ADDR_VAR 0 3
44589: PUSH
44590: EMPTY
44591: ST_TO_ADDR
// for i in un_list do
44592: LD_ADDR_VAR 0 5
44596: PUSH
44597: LD_VAR 0 6
44601: PUSH
44602: FOR_IN
44603: IFFALSE 44640
// if IsInUnit ( i ) = lab then
44605: LD_VAR 0 5
44609: PPUSH
44610: CALL_OW 310
44614: PUSH
44615: LD_VAR 0 2
44619: EQUAL
44620: IFFALSE 44638
// temp_list = temp_list ^ i ;
44622: LD_ADDR_VAR 0 3
44626: PUSH
44627: LD_VAR 0 3
44631: PUSH
44632: LD_VAR 0 5
44636: ADD
44637: ST_TO_ADDR
44638: GO 44602
44640: POP
44641: POP
// if temp_list = 0 then
44642: LD_VAR 0 3
44646: PUSH
44647: LD_INT 0
44649: EQUAL
44650: IFFALSE 44759
// begin temp_list = UnitsInside ( lab ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
44652: LD_ADDR_VAR 0 3
44656: PUSH
44657: LD_VAR 0 2
44661: PPUSH
44662: CALL_OW 313
44666: PUSH
44667: LD_EXP 3
44671: PPUSH
44672: CALL 44422 0 1
44676: PUSH
44677: LD_EXP 10
44681: PUSH
44682: LD_EXP 11
44686: PUSH
44687: LD_EXP 12
44691: PUSH
44692: LD_EXP 13
44696: PUSH
44697: LD_EXP 14
44701: PUSH
44702: LD_EXP 15
44706: PUSH
44707: LD_EXP 16
44711: PUSH
44712: LD_EXP 17
44716: PUSH
44717: LD_EXP 18
44721: PUSH
44722: LD_EXP 19
44726: PUSH
44727: LD_EXP 20
44731: PUSH
44732: LD_EXP 21
44736: PUSH
44737: LD_EXP 22
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: ADD
44757: DIFF
44758: ST_TO_ADDR
// end ; if temp_list = 0 then
44759: LD_VAR 0 3
44763: PUSH
44764: LD_INT 0
44766: EQUAL
44767: IFFALSE 44794
// begin temp_list = UnitFilter ( un_list , [ f_class , class_scientistic ] ) ;
44769: LD_ADDR_VAR 0 3
44773: PUSH
44774: LD_VAR 0 6
44778: PPUSH
44779: LD_INT 25
44781: PUSH
44782: LD_INT 4
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PPUSH
44789: CALL_OW 72
44793: ST_TO_ADDR
// end ; if temp_list = 0 then
44794: LD_VAR 0 3
44798: PUSH
44799: LD_INT 0
44801: EQUAL
44802: IFFALSE 44921
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_class , class_scientistic ] ] ) diff [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ;
44804: LD_ADDR_VAR 0 3
44808: PUSH
44809: LD_INT 22
44811: PUSH
44812: LD_EXP 3
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 25
44823: PUSH
44824: LD_INT 4
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PPUSH
44835: CALL_OW 69
44839: PUSH
44840: LD_EXP 10
44844: PUSH
44845: LD_EXP 11
44849: PUSH
44850: LD_EXP 12
44854: PUSH
44855: LD_EXP 13
44859: PUSH
44860: LD_EXP 14
44864: PUSH
44865: LD_EXP 15
44869: PUSH
44870: LD_EXP 16
44874: PUSH
44875: LD_EXP 17
44879: PUSH
44880: LD_EXP 18
44884: PUSH
44885: LD_EXP 19
44889: PUSH
44890: LD_EXP 20
44894: PUSH
44895: LD_EXP 21
44899: PUSH
44900: LD_EXP 22
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: DIFF
44920: ST_TO_ADDR
// end ; if temp_list = 0 then
44921: LD_VAR 0 3
44925: PUSH
44926: LD_INT 0
44928: EQUAL
44929: IFFALSE 45059
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
44931: LD_ADDR_VAR 0 3
44935: PUSH
44936: LD_INT 22
44938: PUSH
44939: LD_EXP 3
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 21
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PPUSH
44962: CALL_OW 69
44966: PUSH
44967: LD_EXP 3
44971: PPUSH
44972: CALL 44422 0 1
44976: PUSH
44977: LD_EXP 10
44981: PUSH
44982: LD_EXP 11
44986: PUSH
44987: LD_EXP 12
44991: PUSH
44992: LD_EXP 13
44996: PUSH
44997: LD_EXP 14
45001: PUSH
45002: LD_EXP 15
45006: PUSH
45007: LD_EXP 16
45011: PUSH
45012: LD_EXP 17
45016: PUSH
45017: LD_EXP 18
45021: PUSH
45022: LD_EXP 19
45026: PUSH
45027: LD_EXP 20
45031: PUSH
45032: LD_EXP 21
45036: PUSH
45037: LD_EXP 22
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: ADD
45057: DIFF
45058: ST_TO_ADDR
// end ; if temp_list > 0 then
45059: LD_VAR 0 3
45063: PUSH
45064: LD_INT 0
45066: GREATER
45067: IFFALSE 45453
// begin DialogueOn ;
45069: CALL_OW 6
// temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
45073: LD_ADDR_VAR 0 4
45077: PUSH
45078: LD_VAR 0 3
45082: PUSH
45083: LD_INT 1
45085: PPUSH
45086: LD_VAR 0 3
45090: PPUSH
45091: CALL_OW 12
45095: ARRAY
45096: ST_TO_ADDR
// case temp_unit of Sonya :
45097: LD_VAR 0 4
45101: PUSH
45102: LD_EXP 11
45106: DOUBLE
45107: EQUAL
45108: IFTRUE 45112
45110: GO 45127
45112: POP
// Say ( temp_unit , D7-So-1 ) ; MarkB :
45113: LD_VAR 0 4
45117: PPUSH
45118: LD_STRING D7-So-1
45120: PPUSH
45121: CALL_OW 88
45125: GO 45315
45127: LD_EXP 20
45131: DOUBLE
45132: EQUAL
45133: IFTRUE 45137
45135: GO 45176
45137: POP
// begin Say ( temp_unit , D7-Ma-1 ) ;
45138: LD_VAR 0 4
45142: PPUSH
45143: LD_STRING D7-Ma-1
45145: PPUSH
45146: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
45150: LD_EXP 10
45154: PPUSH
45155: LD_STRING D7-H-1
45157: PPUSH
45158: CALL_OW 88
// Say ( temp_unit , D7-Ma-2 ) ;
45162: LD_VAR 0 4
45166: PPUSH
45167: LD_STRING D7-Ma-2
45169: PPUSH
45170: CALL_OW 88
// end ; Aviradze :
45174: GO 45315
45176: LD_EXP 21
45180: DOUBLE
45181: EQUAL
45182: IFTRUE 45186
45184: GO 45225
45186: POP
// begin Say ( temp_unit , D7-Av-1 ) ;
45187: LD_VAR 0 4
45191: PPUSH
45192: LD_STRING D7-Av-1
45194: PPUSH
45195: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
45199: LD_EXP 10
45203: PPUSH
45204: LD_STRING D7-H-1
45206: PPUSH
45207: CALL_OW 88
// Say ( temp_unit , D7-Av-2 ) ;
45211: LD_VAR 0 4
45215: PPUSH
45216: LD_STRING D7-Av-2
45218: PPUSH
45219: CALL_OW 88
// end ; else
45223: GO 45315
45225: POP
// if GetSex ( temp_unit ) = sex_male then
45226: LD_VAR 0 4
45230: PPUSH
45231: CALL_OW 258
45235: PUSH
45236: LD_INT 1
45238: EQUAL
45239: IFFALSE 45279
// begin Say ( temp_unit , D7-SciM-1 ) ;
45241: LD_VAR 0 4
45245: PPUSH
45246: LD_STRING D7-SciM-1
45248: PPUSH
45249: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
45253: LD_EXP 10
45257: PPUSH
45258: LD_STRING D7-H-1
45260: PPUSH
45261: CALL_OW 88
// Say ( temp_unit , D7-SciM-2 ) ;
45265: LD_VAR 0 4
45269: PPUSH
45270: LD_STRING D7-SciM-2
45272: PPUSH
45273: CALL_OW 88
// end else
45277: GO 45315
// begin Say ( temp_unit , D7-SciF-1 ) ;
45279: LD_VAR 0 4
45283: PPUSH
45284: LD_STRING D7-SciF-1
45286: PPUSH
45287: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
45291: LD_EXP 10
45295: PPUSH
45296: LD_STRING D7-H-1
45298: PPUSH
45299: CALL_OW 88
// Say ( temp_unit , D7-SciF-2 ) ;
45303: LD_VAR 0 4
45307: PPUSH
45308: LD_STRING D7-SciF-2
45310: PPUSH
45311: CALL_OW 88
// end ; end ; Say ( Heike , D7-H-2 ) ;
45315: LD_EXP 10
45319: PPUSH
45320: LD_STRING D7-H-2
45322: PPUSH
45323: CALL_OW 88
// case temp_unit of Sonya :
45327: LD_VAR 0 4
45331: PUSH
45332: LD_EXP 11
45336: DOUBLE
45337: EQUAL
45338: IFTRUE 45342
45340: GO 45357
45342: POP
// Say ( temp_unit , D7-So-2 ) ; MarkB :
45343: LD_VAR 0 4
45347: PPUSH
45348: LD_STRING D7-So-2
45350: PPUSH
45351: CALL_OW 88
45355: GO 45449
45357: LD_EXP 20
45361: DOUBLE
45362: EQUAL
45363: IFTRUE 45367
45365: GO 45382
45367: POP
// Say ( temp_unit , D7-Ma-3 ) ; Aviradze :
45368: LD_VAR 0 4
45372: PPUSH
45373: LD_STRING D7-Ma-3
45375: PPUSH
45376: CALL_OW 88
45380: GO 45449
45382: LD_EXP 21
45386: DOUBLE
45387: EQUAL
45388: IFTRUE 45392
45390: GO 45407
45392: POP
// Say ( temp_unit , D7-Av-3 ) ; else
45393: LD_VAR 0 4
45397: PPUSH
45398: LD_STRING D7-Av-3
45400: PPUSH
45401: CALL_OW 88
45405: GO 45449
45407: POP
// if GetSex ( temp_unit ) = sex_male then
45408: LD_VAR 0 4
45412: PPUSH
45413: CALL_OW 258
45417: PUSH
45418: LD_INT 1
45420: EQUAL
45421: IFFALSE 45437
// Say ( temp_unit , D7-SciM-3 ) else
45423: LD_VAR 0 4
45427: PPUSH
45428: LD_STRING D7-SciM-3
45430: PPUSH
45431: CALL_OW 88
45435: GO 45449
// Say ( temp_unit , D7-SciF-3 ) ; end ;
45437: LD_VAR 0 4
45441: PPUSH
45442: LD_STRING D7-SciF-3
45444: PPUSH
45445: CALL_OW 88
// DialogueOff ;
45449: CALL_OW 7
// end ; Wait ( 0 0$0.2 ) ;
45453: LD_INT 7
45455: PPUSH
45456: CALL_OW 67
// ChangeMissionObjectives ( MAddCameras ) ;
45460: LD_STRING MAddCameras
45462: PPUSH
45463: CALL_OW 337
// wait ( 0 0$0.2 ) ;
45467: LD_INT 7
45469: PPUSH
45470: CALL_OW 67
// SetAreaMapShow ( camera_area_2 , 1 ) ;
45474: LD_INT 15
45476: PPUSH
45477: LD_INT 1
45479: PPUSH
45480: CALL_OW 424
// SetAreaMapShow ( camera_area_3 , 1 ) ;
45484: LD_INT 16
45486: PPUSH
45487: LD_INT 1
45489: PPUSH
45490: CALL_OW 424
// SetAreaMapShow ( camera_area_4 , 1 ) ;
45494: LD_INT 17
45496: PPUSH
45497: LD_INT 1
45499: PPUSH
45500: CALL_OW 424
// SetAreaMapShow ( camera_area_5 , 1 ) ;
45504: LD_INT 18
45506: PPUSH
45507: LD_INT 1
45509: PPUSH
45510: CALL_OW 424
// SetAreaMapShow ( camera_area_6 , 1 ) ;
45514: LD_INT 20
45516: PPUSH
45517: LD_INT 1
45519: PPUSH
45520: CALL_OW 424
// SetAreaMapShow ( camera_area_7 , 1 ) ;
45524: LD_INT 21
45526: PPUSH
45527: LD_INT 1
45529: PPUSH
45530: CALL_OW 424
// SetAreaMapShow ( camera_area_8 , 1 ) ;
45534: LD_INT 22
45536: PPUSH
45537: LD_INT 1
45539: PPUSH
45540: CALL_OW 424
// end ; end ; end ;
45544: PPOPN 6
45546: END
// export function CheckCamerasOnCommand ( comm ) ; var i , task_list , x , y , k , temp_list ; begin
45547: LD_INT 0
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
45553: PPUSH
45554: PPUSH
45555: PPUSH
// if cameras_placed then
45556: LD_EXP 92
45560: IFFALSE 45564
// exit ;
45562: GO 45857
// case comm of 103 :
45564: LD_VAR 0 1
45568: PUSH
45569: LD_INT 103
45571: DOUBLE
45572: EQUAL
45573: IFTRUE 45577
45575: GO 45856
45577: POP
// begin for i in FilterAllUnits ( [ [ f_side , you ] , [ f_class , class_engineer ] ] ) do
45578: LD_ADDR_VAR 0 3
45582: PUSH
45583: LD_INT 22
45585: PUSH
45586: LD_EXP 3
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 25
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PPUSH
45609: CALL_OW 69
45613: PUSH
45614: FOR_IN
45615: IFFALSE 45852
// if IsSelected ( i ) then
45617: LD_VAR 0 3
45621: PPUSH
45622: CALL_OW 306
45626: IFFALSE 45850
// begin task_list = GetTaskList ( i ) ;
45628: LD_ADDR_VAR 0 4
45632: PUSH
45633: LD_VAR 0 3
45637: PPUSH
45638: CALL_OW 437
45642: ST_TO_ADDR
// if task_list > 0 then
45643: LD_VAR 0 4
45647: PUSH
45648: LD_INT 0
45650: GREATER
45651: IFFALSE 45850
// begin x = task_list [ task_list + 0 ] [ 2 ] ;
45653: LD_ADDR_VAR 0 5
45657: PUSH
45658: LD_VAR 0 4
45662: PUSH
45663: LD_VAR 0 4
45667: PUSH
45668: LD_INT 0
45670: PLUS
45671: ARRAY
45672: PUSH
45673: LD_INT 2
45675: ARRAY
45676: ST_TO_ADDR
// y = task_list [ task_list + 0 ] [ 3 ] ;
45677: LD_ADDR_VAR 0 6
45681: PUSH
45682: LD_VAR 0 4
45686: PUSH
45687: LD_VAR 0 4
45691: PUSH
45692: LD_INT 0
45694: PLUS
45695: ARRAY
45696: PUSH
45697: LD_INT 3
45699: ARRAY
45700: ST_TO_ADDR
// if InArea ( x , y , camera_area_2 ) or InArea ( x , y , camera_area_3 ) or InArea ( x , y , camera_area_4 ) or InArea ( x , y , camera_area_5 ) or InArea ( x , y , camera_area_6 ) or InArea ( x , y , camera_area_7 ) or InArea ( x , y , camera_area_8 ) then
45701: LD_VAR 0 5
45705: PPUSH
45706: LD_VAR 0 6
45710: PPUSH
45711: LD_INT 15
45713: PPUSH
45714: CALL_OW 309
45718: PUSH
45719: LD_VAR 0 5
45723: PPUSH
45724: LD_VAR 0 6
45728: PPUSH
45729: LD_INT 16
45731: PPUSH
45732: CALL_OW 309
45736: OR
45737: PUSH
45738: LD_VAR 0 5
45742: PPUSH
45743: LD_VAR 0 6
45747: PPUSH
45748: LD_INT 17
45750: PPUSH
45751: CALL_OW 309
45755: OR
45756: PUSH
45757: LD_VAR 0 5
45761: PPUSH
45762: LD_VAR 0 6
45766: PPUSH
45767: LD_INT 18
45769: PPUSH
45770: CALL_OW 309
45774: OR
45775: PUSH
45776: LD_VAR 0 5
45780: PPUSH
45781: LD_VAR 0 6
45785: PPUSH
45786: LD_INT 20
45788: PPUSH
45789: CALL_OW 309
45793: OR
45794: PUSH
45795: LD_VAR 0 5
45799: PPUSH
45800: LD_VAR 0 6
45804: PPUSH
45805: LD_INT 21
45807: PPUSH
45808: CALL_OW 309
45812: OR
45813: PUSH
45814: LD_VAR 0 5
45818: PPUSH
45819: LD_VAR 0 6
45823: PPUSH
45824: LD_INT 22
45826: PPUSH
45827: CALL_OW 309
45831: OR
45832: IFFALSE 45850
// begin camera_engineers = camera_engineers union i ;
45834: LD_ADDR_EXP 91
45838: PUSH
45839: LD_EXP 91
45843: PUSH
45844: LD_VAR 0 3
45848: UNION
45849: ST_TO_ADDR
// end ; end ; end ;
45850: GO 45614
45852: POP
45853: POP
// end ; end ;
45854: GO 45857
45856: POP
// end ;
45857: LD_VAR 0 2
45861: RET
// every 0 0$1 + 0 0$0.4 do var i , k , temp_list , x , y , task_list ; var need_area_list ;
45862: GO 45864
45864: DISABLE
45865: LD_INT 0
45867: PPUSH
45868: PPUSH
45869: PPUSH
45870: PPUSH
45871: PPUSH
45872: PPUSH
45873: PPUSH
// begin need_area_list = [ 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
45874: LD_ADDR_VAR 0 7
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: LD_INT 3
45884: PUSH
45885: LD_INT 4
45887: PUSH
45888: LD_INT 5
45890: PUSH
45891: LD_INT 6
45893: PUSH
45894: LD_INT 7
45896: PUSH
45897: LD_INT 8
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// repeat wait ( 0 0$0.1 ) ;
45909: LD_INT 4
45911: PPUSH
45912: CALL_OW 67
// temp_list = [ ] ;
45916: LD_ADDR_VAR 0 3
45920: PUSH
45921: EMPTY
45922: ST_TO_ADDR
// for i in camera_engineers do
45923: LD_ADDR_VAR 0 1
45927: PUSH
45928: LD_EXP 91
45932: PUSH
45933: FOR_IN
45934: IFFALSE 45965
// if HasTask ( i ) then
45936: LD_VAR 0 1
45940: PPUSH
45941: CALL_OW 314
45945: IFFALSE 45963
// temp_list = temp_list ^ i ;
45947: LD_ADDR_VAR 0 3
45951: PUSH
45952: LD_VAR 0 3
45956: PUSH
45957: LD_VAR 0 1
45961: ADD
45962: ST_TO_ADDR
45963: GO 45933
45965: POP
45966: POP
// camera_engineers = temp_list ;
45967: LD_ADDR_EXP 91
45971: PUSH
45972: LD_VAR 0 3
45976: ST_TO_ADDR
// for i in camera_engineers do
45977: LD_ADDR_VAR 0 1
45981: PUSH
45982: LD_EXP 91
45986: PUSH
45987: FOR_IN
45988: IFFALSE 46563
// begin task_list = GetTaskList ( i ) ;
45990: LD_ADDR_VAR 0 6
45994: PUSH
45995: LD_VAR 0 1
45999: PPUSH
46000: CALL_OW 437
46004: ST_TO_ADDR
// if task_list [ 1 ] [ 1 ] = g then
46005: LD_VAR 0 6
46009: PUSH
46010: LD_INT 1
46012: ARRAY
46013: PUSH
46014: LD_INT 1
46016: ARRAY
46017: PUSH
46018: LD_STRING g
46020: EQUAL
46021: IFFALSE 46561
// begin x = task_list [ 1 ] [ 2 ] ;
46023: LD_ADDR_VAR 0 4
46027: PUSH
46028: LD_VAR 0 6
46032: PUSH
46033: LD_INT 1
46035: ARRAY
46036: PUSH
46037: LD_INT 2
46039: ARRAY
46040: ST_TO_ADDR
// y = task_list [ 1 ] [ 3 ] ;
46041: LD_ADDR_VAR 0 5
46045: PUSH
46046: LD_VAR 0 6
46050: PUSH
46051: LD_INT 1
46053: ARRAY
46054: PUSH
46055: LD_INT 3
46057: ARRAY
46058: ST_TO_ADDR
// if GetDistUnitXY ( i , x , y ) > 2 then
46059: LD_VAR 0 1
46063: PPUSH
46064: LD_VAR 0 4
46068: PPUSH
46069: LD_VAR 0 5
46073: PPUSH
46074: CALL_OW 297
46078: PUSH
46079: LD_INT 2
46081: GREATER
46082: IFFALSE 46086
// continue ;
46084: GO 45987
// if InArea ( x , y , camera_area_2 ) then
46086: LD_VAR 0 4
46090: PPUSH
46091: LD_VAR 0 5
46095: PPUSH
46096: LD_INT 15
46098: PPUSH
46099: CALL_OW 309
46103: IFFALSE 46150
// begin HiddenCamera ( x , y , you ) ;
46105: LD_VAR 0 4
46109: PPUSH
46110: LD_VAR 0 5
46114: PPUSH
46115: LD_EXP 3
46119: PPUSH
46120: CALL_OW 244
// need_area_list = need_area_list diff 2 ;
46124: LD_ADDR_VAR 0 7
46128: PUSH
46129: LD_VAR 0 7
46133: PUSH
46134: LD_INT 2
46136: DIFF
46137: ST_TO_ADDR
// SetAreaMapShow ( camera_area_2 , 0 ) ;
46138: LD_INT 15
46140: PPUSH
46141: LD_INT 0
46143: PPUSH
46144: CALL_OW 424
// end else
46148: GO 46532
// if InArea ( x , y , camera_area_3 ) then
46150: LD_VAR 0 4
46154: PPUSH
46155: LD_VAR 0 5
46159: PPUSH
46160: LD_INT 16
46162: PPUSH
46163: CALL_OW 309
46167: IFFALSE 46214
// begin HiddenCamera ( x , y , you ) ;
46169: LD_VAR 0 4
46173: PPUSH
46174: LD_VAR 0 5
46178: PPUSH
46179: LD_EXP 3
46183: PPUSH
46184: CALL_OW 244
// need_area_list = need_area_list diff 3 ;
46188: LD_ADDR_VAR 0 7
46192: PUSH
46193: LD_VAR 0 7
46197: PUSH
46198: LD_INT 3
46200: DIFF
46201: ST_TO_ADDR
// SetAreaMapShow ( camera_area_3 , 0 ) ;
46202: LD_INT 16
46204: PPUSH
46205: LD_INT 0
46207: PPUSH
46208: CALL_OW 424
// end else
46212: GO 46532
// if InArea ( x , y , camera_area_4 ) then
46214: LD_VAR 0 4
46218: PPUSH
46219: LD_VAR 0 5
46223: PPUSH
46224: LD_INT 17
46226: PPUSH
46227: CALL_OW 309
46231: IFFALSE 46278
// begin HiddenCamera ( x , y , you ) ;
46233: LD_VAR 0 4
46237: PPUSH
46238: LD_VAR 0 5
46242: PPUSH
46243: LD_EXP 3
46247: PPUSH
46248: CALL_OW 244
// need_area_list = need_area_list diff 4 ;
46252: LD_ADDR_VAR 0 7
46256: PUSH
46257: LD_VAR 0 7
46261: PUSH
46262: LD_INT 4
46264: DIFF
46265: ST_TO_ADDR
// SetAreaMapShow ( camera_area_4 , 0 ) ;
46266: LD_INT 17
46268: PPUSH
46269: LD_INT 0
46271: PPUSH
46272: CALL_OW 424
// end else
46276: GO 46532
// if InArea ( x , y , camera_area_5 ) then
46278: LD_VAR 0 4
46282: PPUSH
46283: LD_VAR 0 5
46287: PPUSH
46288: LD_INT 18
46290: PPUSH
46291: CALL_OW 309
46295: IFFALSE 46342
// begin HiddenCamera ( x , y , you ) ;
46297: LD_VAR 0 4
46301: PPUSH
46302: LD_VAR 0 5
46306: PPUSH
46307: LD_EXP 3
46311: PPUSH
46312: CALL_OW 244
// need_area_list = need_area_list diff 5 ;
46316: LD_ADDR_VAR 0 7
46320: PUSH
46321: LD_VAR 0 7
46325: PUSH
46326: LD_INT 5
46328: DIFF
46329: ST_TO_ADDR
// SetAreaMapShow ( camera_area_5 , 0 ) ;
46330: LD_INT 18
46332: PPUSH
46333: LD_INT 0
46335: PPUSH
46336: CALL_OW 424
// end else
46340: GO 46532
// if InArea ( x , y , camera_area_6 ) then
46342: LD_VAR 0 4
46346: PPUSH
46347: LD_VAR 0 5
46351: PPUSH
46352: LD_INT 20
46354: PPUSH
46355: CALL_OW 309
46359: IFFALSE 46406
// begin HiddenCamera ( x , y , you ) ;
46361: LD_VAR 0 4
46365: PPUSH
46366: LD_VAR 0 5
46370: PPUSH
46371: LD_EXP 3
46375: PPUSH
46376: CALL_OW 244
// need_area_list = need_area_list diff 6 ;
46380: LD_ADDR_VAR 0 7
46384: PUSH
46385: LD_VAR 0 7
46389: PUSH
46390: LD_INT 6
46392: DIFF
46393: ST_TO_ADDR
// SetAreaMapShow ( camera_area_6 , 0 ) ;
46394: LD_INT 20
46396: PPUSH
46397: LD_INT 0
46399: PPUSH
46400: CALL_OW 424
// end else
46404: GO 46532
// if InArea ( x , y , camera_area_7 ) then
46406: LD_VAR 0 4
46410: PPUSH
46411: LD_VAR 0 5
46415: PPUSH
46416: LD_INT 21
46418: PPUSH
46419: CALL_OW 309
46423: IFFALSE 46470
// begin HiddenCamera ( x , y , you ) ;
46425: LD_VAR 0 4
46429: PPUSH
46430: LD_VAR 0 5
46434: PPUSH
46435: LD_EXP 3
46439: PPUSH
46440: CALL_OW 244
// need_area_list = need_area_list diff 7 ;
46444: LD_ADDR_VAR 0 7
46448: PUSH
46449: LD_VAR 0 7
46453: PUSH
46454: LD_INT 7
46456: DIFF
46457: ST_TO_ADDR
// SetAreaMapShow ( camera_area_7 , 0 ) ;
46458: LD_INT 21
46460: PPUSH
46461: LD_INT 0
46463: PPUSH
46464: CALL_OW 424
// end else
46468: GO 46532
// if InArea ( x , y , camera_area_8 ) then
46470: LD_VAR 0 4
46474: PPUSH
46475: LD_VAR 0 5
46479: PPUSH
46480: LD_INT 22
46482: PPUSH
46483: CALL_OW 309
46487: IFFALSE 46532
// begin HiddenCamera ( x , y , you ) ;
46489: LD_VAR 0 4
46493: PPUSH
46494: LD_VAR 0 5
46498: PPUSH
46499: LD_EXP 3
46503: PPUSH
46504: CALL_OW 244
// need_area_list = need_area_list diff 8 ;
46508: LD_ADDR_VAR 0 7
46512: PUSH
46513: LD_VAR 0 7
46517: PUSH
46518: LD_INT 8
46520: DIFF
46521: ST_TO_ADDR
// SetAreaMapShow ( camera_area_8 , 0 ) ;
46522: LD_INT 22
46524: PPUSH
46525: LD_INT 0
46527: PPUSH
46528: CALL_OW 424
// end ; if need_area_list = 0 then
46532: LD_VAR 0 7
46536: PUSH
46537: LD_INT 0
46539: EQUAL
46540: IFFALSE 46561
// begin ChangeMissionObjectives ( MOutCameras ) ;
46542: LD_STRING MOutCameras
46544: PPUSH
46545: CALL_OW 337
// cameras_placed = true ;
46549: LD_ADDR_EXP 92
46553: PUSH
46554: LD_INT 1
46556: ST_TO_ADDR
// exit ;
46557: POP
46558: POP
46559: GO 46569
// end ; end ; end ;
46561: GO 45987
46563: POP
46564: POP
// until false ;
46565: LD_INT 0
46567: IFFALSE 45909
// end ;
46569: PPOPN 7
46571: END
// on SpontaneousTeleported ( un ) do begin if first_teleport then
46572: LD_EXP 90
46576: IFFALSE 46706
// if See ( you , un ) then
46578: LD_EXP 3
46582: PPUSH
46583: LD_VAR 0 1
46587: PPUSH
46588: CALL_OW 292
46592: IFFALSE 46706
// begin CenterNowOnUnits ( un ) ;
46594: LD_VAR 0 1
46598: PPUSH
46599: CALL_OW 87
// first_teleport = false ;
46603: LD_ADDR_EXP 90
46607: PUSH
46608: LD_INT 0
46610: ST_TO_ADDR
// wait ( 0 0$1.8 ) ;
46611: LD_INT 63
46613: PPUSH
46614: CALL_OW 67
// DialogueOn ;
46618: CALL_OW 6
// ForceSay ( Heike , D6-H-1 ) ;
46622: LD_EXP 10
46626: PPUSH
46627: LD_STRING D6-H-1
46629: PPUSH
46630: CALL_OW 91
// if IsLive ( Ralph ) then
46634: LD_EXP 13
46638: PPUSH
46639: CALL_OW 300
46643: IFFALSE 46659
// ForceSay ( Ralph , D6-Ra-1 ) else
46645: LD_EXP 13
46649: PPUSH
46650: LD_STRING D6-Ra-1
46652: PPUSH
46653: CALL_OW 91
46657: GO 46702
// if IsLive ( Oswald ) then
46659: LD_EXP 12
46663: PPUSH
46664: CALL_OW 300
46668: IFFALSE 46702
// begin if oswald_is_substitute then
46670: LD_EXP 81
46674: IFFALSE 46690
// ForceSay ( Oswald , D6-Os_alt-1 ) else
46676: LD_EXP 12
46680: PPUSH
46681: LD_STRING D6-Os_alt-1
46683: PPUSH
46684: CALL_OW 91
46688: GO 46702
// ForceSay ( Oswald , D6-Os-1 ) ;
46690: LD_EXP 12
46694: PPUSH
46695: LD_STRING D6-Os-1
46697: PPUSH
46698: CALL_OW 91
// end ; DialogueOff ;
46702: CALL_OW 7
// end ; end ;
46706: PPOPN 1
46708: END
// every 0 0$1.6 do
46709: GO 46711
46711: DISABLE
// begin repeat wait ( 0 0$0.5 ) ;
46712: LD_INT 18
46714: PPUSH
46715: CALL_OW 67
// if game_phase = 3 then
46719: LD_EXP 89
46723: PUSH
46724: LD_INT 3
46726: EQUAL
46727: IFFALSE 46731
// exit ;
46729: GO 46817
// if ContactTime ( [ you , you_alt ] ) <= 0 0$1 or ai_contact_time [ you ] [ you_alt ] <= 0 0$1 then
46731: LD_EXP 3
46735: PUSH
46736: LD_EXP 6
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PPUSH
46745: CALL_OW 462
46749: PUSH
46750: LD_INT 35
46752: LESSEQUAL
46753: PUSH
46754: LD_EXP 76
46758: PUSH
46759: LD_EXP 3
46763: ARRAY
46764: PUSH
46765: LD_EXP 6
46769: ARRAY
46770: PUSH
46771: LD_INT 35
46773: LESSEQUAL
46774: OR
46775: IFFALSE 46813
// begin DialogueOn ;
46777: CALL_OW 6
// Say ( Gensher , D11-Ge-1 ) ;
46781: LD_EXP 24
46785: PPUSH
46786: LD_STRING D11-Ge-1
46788: PPUSH
46789: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
46793: LD_INT 18
46795: PPUSH
46796: CALL_OW 68
// YouLost ( AttackedGensher ) ;
46800: LD_STRING AttackedGensher
46802: PPUSH
46803: CALL_OW 104
// DialogueOff ;
46807: CALL_OW 7
// exit ;
46811: GO 46817
// end ; until false ;
46813: LD_INT 0
46815: IFFALSE 46712
// end ;
46817: END
// every 0 0$1 + 0 0$0.2 do var temp_list , i ;
46818: GO 46820
46820: DISABLE
46821: LD_INT 0
46823: PPUSH
46824: PPUSH
// begin repeat wait ( 0 0$1 ) ;
46825: LD_INT 35
46827: PPUSH
46828: CALL_OW 67
// if game_phase > 1 then
46832: LD_EXP 89
46836: PUSH
46837: LD_INT 1
46839: GREATER
46840: IFFALSE 46844
// exit ;
46842: GO 47288
// if ContactTime ( [ you , americans ] ) <= 0 0$2 or ai_contact_time [ americans ] [ you ] <= 0 0$2 then
46844: LD_EXP 3
46848: PUSH
46849: LD_EXP 7
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PPUSH
46858: CALL_OW 462
46862: PUSH
46863: LD_INT 70
46865: LESSEQUAL
46866: PUSH
46867: LD_EXP 76
46871: PUSH
46872: LD_EXP 7
46876: ARRAY
46877: PUSH
46878: LD_EXP 3
46882: ARRAY
46883: PUSH
46884: LD_INT 70
46886: LESSEQUAL
46887: OR
46888: IFFALSE 47284
// begin temp_list = [ ] ;
46890: LD_ADDR_VAR 0 1
46894: PUSH
46895: EMPTY
46896: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , americans ] ) do
46897: LD_ADDR_VAR 0 2
46901: PUSH
46902: LD_INT 22
46904: PUSH
46905: LD_EXP 7
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PPUSH
46914: CALL_OW 69
46918: PUSH
46919: FOR_IN
46920: IFFALSE 46958
// if GetSide ( Attacks ( i ) ) = you then
46922: LD_VAR 0 2
46926: PPUSH
46927: CALL_OW 320
46931: PPUSH
46932: CALL_OW 255
46936: PUSH
46937: LD_EXP 3
46941: EQUAL
46942: IFFALSE 46956
// begin temp_list = i ;
46944: LD_ADDR_VAR 0 1
46948: PUSH
46949: LD_VAR 0 2
46953: ST_TO_ADDR
// break ;
46954: GO 46958
// end ;
46956: GO 46919
46958: POP
46959: POP
// if temp_list = 0 then
46960: LD_VAR 0 1
46964: PUSH
46965: LD_INT 0
46967: EQUAL
46968: IFFALSE 47033
// for i in FilterAllUnits ( [ f_side , you ] ) do
46970: LD_ADDR_VAR 0 2
46974: PUSH
46975: LD_INT 22
46977: PUSH
46978: LD_EXP 3
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PPUSH
46987: CALL_OW 69
46991: PUSH
46992: FOR_IN
46993: IFFALSE 47031
// if GetSide ( Attacks ( i ) ) = americans then
46995: LD_VAR 0 2
46999: PPUSH
47000: CALL_OW 320
47004: PPUSH
47005: CALL_OW 255
47009: PUSH
47010: LD_EXP 7
47014: EQUAL
47015: IFFALSE 47029
// begin temp_list = i ;
47017: LD_ADDR_VAR 0 1
47021: PUSH
47022: LD_VAR 0 2
47026: ST_TO_ADDR
// break ;
47027: GO 47031
// end ;
47029: GO 46992
47031: POP
47032: POP
// if temp_list > 0 then
47033: LD_VAR 0 1
47037: PUSH
47038: LD_INT 0
47040: GREATER
47041: IFFALSE 47052
// CenterOnUnits ( temp_list ) ;
47043: LD_VAR 0 1
47047: PPUSH
47048: CALL_OW 85
// DialogueOn ;
47052: CALL_OW 6
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_class , class_soldier ] ] ) diff [ Simms , Cornell , Khattam ] ;
47056: LD_ADDR_VAR 0 1
47060: PUSH
47061: LD_INT 22
47063: PUSH
47064: LD_EXP 7
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 25
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PPUSH
47087: CALL_OW 69
47091: PUSH
47092: LD_EXP 25
47096: PUSH
47097: LD_EXP 26
47101: PUSH
47102: LD_EXP 27
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: DIFF
47112: ST_TO_ADDR
// if temp_list = 0 then
47113: LD_VAR 0 1
47117: PUSH
47118: LD_INT 0
47120: EQUAL
47121: IFFALSE 47191
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) diff ( GetApes ( americans ) ^ [ Simms , Cornell , Khattam ] ) ;
47123: LD_ADDR_VAR 0 1
47127: PUSH
47128: LD_INT 22
47130: PUSH
47131: LD_EXP 7
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 21
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PPUSH
47154: CALL_OW 69
47158: PUSH
47159: LD_EXP 7
47163: PPUSH
47164: CALL 44422 0 1
47168: PUSH
47169: LD_EXP 25
47173: PUSH
47174: LD_EXP 26
47178: PUSH
47179: LD_EXP 27
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: ADD
47189: DIFF
47190: ST_TO_ADDR
// if temp_list > 0 then
47191: LD_VAR 0 1
47195: PUSH
47196: LD_INT 0
47198: GREATER
47199: IFFALSE 47254
// if GetSex ( temp_list [ 1 ] ) = sex_male then
47201: LD_VAR 0 1
47205: PUSH
47206: LD_INT 1
47208: ARRAY
47209: PPUSH
47210: CALL_OW 258
47214: PUSH
47215: LD_INT 1
47217: EQUAL
47218: IFFALSE 47238
// SayRadio ( temp_list [ 1 ] , D4-SomeM-1 ) else
47220: LD_VAR 0 1
47224: PUSH
47225: LD_INT 1
47227: ARRAY
47228: PPUSH
47229: LD_STRING D4-SomeM-1
47231: PPUSH
47232: CALL_OW 94
47236: GO 47254
// SayRadio ( temp_list [ 1 ] , D4-SomeF-1 ) ;
47238: LD_VAR 0 1
47242: PUSH
47243: LD_INT 1
47245: ARRAY
47246: PPUSH
47247: LD_STRING D4-SomeF-1
47249: PPUSH
47250: CALL_OW 94
// SayRadio ( Simms , D4-Sim-1 ) ;
47254: LD_EXP 25
47258: PPUSH
47259: LD_STRING D4-Sim-1
47261: PPUSH
47262: CALL_OW 94
// dwait ( 0 0$0.5 ) ;
47266: LD_INT 18
47268: PPUSH
47269: CALL_OW 68
// YouLost ( PlayerSeen ) ;
47273: LD_STRING PlayerSeen
47275: PPUSH
47276: CALL_OW 104
// DialogueOff ;
47280: CALL_OW 7
// end ; until false ;
47284: LD_INT 0
47286: IFFALSE 46825
// end ;
47288: PPOPN 2
47290: END
// every 0 0$1 + 0 0$0.9 do var vehicle ;
47291: GO 47293
47293: DISABLE
47294: LD_INT 0
47296: PPUSH
// begin InitUc ;
47297: CALL_OW 18
// InitVc ;
47301: CALL_OW 20
// uc_side = americans ;
47305: LD_ADDR_OWVAR 20
47309: PUSH
47310: LD_EXP 7
47314: ST_TO_ADDR
// uc_nation = nation_american ;
47315: LD_ADDR_OWVAR 21
47319: PUSH
47320: LD_INT 1
47322: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
47323: LD_ADDR_OWVAR 37
47327: PUSH
47328: LD_INT 2
47330: ST_TO_ADDR
// vc_control = control_manual ;
47331: LD_ADDR_OWVAR 38
47335: PUSH
47336: LD_INT 1
47338: ST_TO_ADDR
// vc_engine = engine_siberite ;
47339: LD_ADDR_OWVAR 39
47343: PUSH
47344: LD_INT 3
47346: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
47347: LD_ADDR_OWVAR 40
47351: PUSH
47352: LD_INT 2
47354: ST_TO_ADDR
// vehicle = CreateVehicle ;
47355: LD_ADDR_VAR 0 1
47359: PUSH
47360: CALL_OW 45
47364: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , vehicle ) ;
47365: LD_EXP 28
47369: PPUSH
47370: LD_VAR 0 1
47374: PPUSH
47375: CALL_OW 52
// wait ( Rand ( 0 0$20 , 0 0$30 ) ) ;
47379: LD_INT 700
47381: PPUSH
47382: LD_INT 1050
47384: PPUSH
47385: CALL_OW 12
47389: PPUSH
47390: CALL_OW 67
// while not PlaceUnitXYR ( vehicle , 98 , 30 , 2 , false ) do
47394: LD_VAR 0 1
47398: PPUSH
47399: LD_INT 98
47401: PPUSH
47402: LD_INT 30
47404: PPUSH
47405: LD_INT 2
47407: PPUSH
47408: LD_INT 0
47410: PPUSH
47411: CALL_OW 50
47415: NOT
47416: IFFALSE 47427
// wait ( 0 0$2 ) ;
47418: LD_INT 70
47420: PPUSH
47421: CALL_OW 67
47425: GO 47394
// while IsPlaced ( Joan ) do
47427: LD_EXP 28
47431: PPUSH
47432: CALL_OW 305
47436: IFFALSE 47503
// begin wait ( 0 0$1 ) ;
47438: LD_INT 35
47440: PPUSH
47441: CALL_OW 67
// if GetDistUnitXY ( Joan , 56 , 3 ) > 1 then
47445: LD_EXP 28
47449: PPUSH
47450: LD_INT 56
47452: PPUSH
47453: LD_INT 3
47455: PPUSH
47456: CALL_OW 297
47460: PUSH
47461: LD_INT 1
47463: GREATER
47464: IFFALSE 47483
// ComMoveXY ( Joan , 56 , 3 ) else
47466: LD_EXP 28
47470: PPUSH
47471: LD_INT 56
47473: PPUSH
47474: LD_INT 3
47476: PPUSH
47477: CALL_OW 111
47481: GO 47501
// begin DestroyUnit ( Joan ) ;
47483: LD_EXP 28
47487: PPUSH
47488: CALL_OW 65
// DestroyUnit ( vehicle ) ;
47492: LD_VAR 0 1
47496: PPUSH
47497: CALL_OW 65
// end ; end ;
47501: GO 47427
// end ;
47503: PPOPN 1
47505: END
// every 0 0$1 + 0 0$0.1 do var i , temp_unit , temp_list , temp_list_2 ; var cargo_bay , special_player_units , scout , crate_hex ;
47506: GO 47508
47508: DISABLE
47509: LD_INT 0
47511: PPUSH
47512: PPUSH
47513: PPUSH
47514: PPUSH
47515: PPUSH
47516: PPUSH
47517: PPUSH
47518: PPUSH
// begin special_player_units = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ;
47519: LD_ADDR_VAR 0 6
47523: PUSH
47524: LD_EXP 10
47528: PUSH
47529: LD_EXP 11
47533: PUSH
47534: LD_EXP 12
47538: PUSH
47539: LD_EXP 13
47543: PUSH
47544: LD_EXP 14
47548: PUSH
47549: LD_EXP 15
47553: PUSH
47554: LD_EXP 16
47558: PUSH
47559: LD_EXP 17
47563: PUSH
47564: LD_EXP 18
47568: PUSH
47569: LD_EXP 19
47573: PUSH
47574: LD_EXP 20
47578: PUSH
47579: LD_EXP 21
47583: PUSH
47584: LD_EXP 22
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: ST_TO_ADDR
// InitUc ;
47604: CALL_OW 18
// InitVc ;
47608: CALL_OW 20
// uc_side = russians ;
47612: LD_ADDR_OWVAR 20
47616: PUSH
47617: LD_EXP 4
47621: ST_TO_ADDR
// uc_nation = nation_russian ;
47622: LD_ADDR_OWVAR 21
47626: PUSH
47627: LD_INT 3
47629: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
47630: LD_ADDR_OWVAR 37
47634: PUSH
47635: LD_INT 22
47637: ST_TO_ADDR
// vc_engine = engine_siberite ;
47638: LD_ADDR_OWVAR 39
47642: PUSH
47643: LD_INT 3
47645: ST_TO_ADDR
// vc_control = control_computer ;
47646: LD_ADDR_OWVAR 38
47650: PUSH
47651: LD_INT 3
47653: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
47654: LD_ADDR_OWVAR 40
47658: PUSH
47659: LD_INT 51
47661: ST_TO_ADDR
// cargo_bay = CreateVehicle ;
47662: LD_ADDR_VAR 0 5
47666: PUSH
47667: CALL_OW 45
47671: ST_TO_ADDR
// SetCargo ( cargo_bay , mat_cans , Rand ( 2 , 5 ) * 10 ) ;
47672: LD_VAR 0 5
47676: PPUSH
47677: LD_INT 1
47679: PPUSH
47680: LD_INT 2
47682: PPUSH
47683: LD_INT 5
47685: PPUSH
47686: CALL_OW 12
47690: PUSH
47691: LD_INT 10
47693: MUL
47694: PPUSH
47695: CALL_OW 290
// SetDir ( cargo_bay , 0 ) ;
47699: LD_VAR 0 5
47703: PPUSH
47704: LD_INT 0
47706: PPUSH
47707: CALL_OW 233
// PlaceUnitXY ( cargo_bay , 103 , 116 , false ) ;
47711: LD_VAR 0 5
47715: PPUSH
47716: LD_INT 103
47718: PPUSH
47719: LD_INT 116
47721: PPUSH
47722: LD_INT 0
47724: PPUSH
47725: CALL_OW 48
// crate_hex = RandHexXYR ( 122 , 93 , 4 , false ) ;
47729: LD_ADDR_VAR 0 8
47733: PUSH
47734: LD_INT 122
47736: PPUSH
47737: LD_INT 93
47739: PPUSH
47740: LD_INT 4
47742: PPUSH
47743: LD_INT 0
47745: PPUSH
47746: CALL_OW 17
47750: ST_TO_ADDR
// CreateCratesXY ( Rand ( 3 , 5 ) , crate_hex [ 1 ] , crate_hex [ 2 ] , false ) ;
47751: LD_INT 3
47753: PPUSH
47754: LD_INT 5
47756: PPUSH
47757: CALL_OW 12
47761: PPUSH
47762: LD_VAR 0 8
47766: PUSH
47767: LD_INT 1
47769: ARRAY
47770: PPUSH
47771: LD_VAR 0 8
47775: PUSH
47776: LD_INT 2
47778: ARRAY
47779: PPUSH
47780: LD_INT 0
47782: PPUSH
47783: CALL_OW 54
// ComMoveXY ( cargo_bay , 122 , 93 ) ;
47787: LD_VAR 0 5
47791: PPUSH
47792: LD_INT 122
47794: PPUSH
47795: LD_INT 93
47797: PPUSH
47798: CALL_OW 111
// AddComStand ( cargo_bay ) ;
47802: LD_VAR 0 5
47806: PPUSH
47807: CALL_OW 225
// i = Rand ( 1 1$30 , 2 2$0 ) ;
47811: LD_ADDR_VAR 0 1
47815: PUSH
47816: LD_INT 3150
47818: PPUSH
47819: LD_INT 4200
47821: PPUSH
47822: CALL_OW 12
47826: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
47827: LD_INT 18
47829: PPUSH
47830: CALL_OW 67
// i = i - 0 0$0.5 ;
47834: LD_ADDR_VAR 0 1
47838: PUSH
47839: LD_VAR 0 1
47843: PUSH
47844: LD_INT 18
47846: MINUS
47847: ST_TO_ADDR
// until i <= 0 0$0 or See ( you , cargo_bay ) ;
47848: LD_VAR 0 1
47852: PUSH
47853: LD_INT 0
47855: LESSEQUAL
47856: PUSH
47857: LD_EXP 3
47861: PPUSH
47862: LD_VAR 0 5
47866: PPUSH
47867: CALL_OW 292
47871: OR
47872: IFFALSE 47827
// while not See ( you , cargo_bay ) do
47874: LD_EXP 3
47878: PPUSH
47879: LD_VAR 0 5
47883: PPUSH
47884: CALL_OW 292
47888: NOT
47889: IFFALSE 47961
// begin wait ( 0 0$0.5 ) ;
47891: LD_INT 18
47893: PPUSH
47894: CALL_OW 67
// temp_unit = NearestUnitToUnit ( FilterAllUnits ( [ f_side , you ] ) , cargo_bay ) ;
47898: LD_ADDR_VAR 0 2
47902: PUSH
47903: LD_INT 22
47905: PUSH
47906: LD_EXP 3
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PPUSH
47915: CALL_OW 69
47919: PPUSH
47920: LD_VAR 0 5
47924: PPUSH
47925: CALL_OW 74
47929: ST_TO_ADDR
// ComMoveXY ( cargo_bay , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
47930: LD_VAR 0 5
47934: PPUSH
47935: LD_VAR 0 2
47939: PPUSH
47940: CALL_OW 250
47944: PPUSH
47945: LD_VAR 0 2
47949: PPUSH
47950: CALL_OW 251
47954: PPUSH
47955: CALL_OW 111
// end ;
47959: GO 47874
// CenterOnUnits ( cargo_bay ) ;
47961: LD_VAR 0 5
47965: PPUSH
47966: CALL_OW 85
// DialogueOn ;
47970: CALL_OW 6
// if IsOk ( Oswald ) then
47974: LD_EXP 12
47978: PPUSH
47979: CALL_OW 302
47983: IFFALSE 48019
// begin if oswald_is_substitute then
47985: LD_EXP 81
47989: IFFALSE 48005
// Say ( Oswald , D2-Os_alt-1 ) else
47991: LD_EXP 12
47995: PPUSH
47996: LD_STRING D2-Os_alt-1
47998: PPUSH
47999: CALL_OW 88
48003: GO 48017
// Say ( Oswald , D2-Os-1 ) ;
48005: LD_EXP 12
48009: PPUSH
48010: LD_STRING D2-Os-1
48012: PPUSH
48013: CALL_OW 88
// end else
48017: GO 48251
// if IsOk ( Olaf ) then
48019: LD_EXP 17
48023: PPUSH
48024: CALL_OW 302
48028: IFFALSE 48044
// Say ( Olaf , D2-Olaf-1 ) else
48030: LD_EXP 17
48034: PPUSH
48035: LD_STRING D2-Olaf-1
48037: PPUSH
48038: CALL_OW 88
48042: GO 48251
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ special_player_units ) ;
48044: LD_ADDR_VAR 0 3
48048: PUSH
48049: LD_INT 22
48051: PUSH
48052: LD_EXP 3
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 21
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PPUSH
48075: CALL_OW 69
48079: PUSH
48080: LD_EXP 3
48084: PPUSH
48085: CALL 44422 0 1
48089: PUSH
48090: LD_VAR 0 6
48094: ADD
48095: DIFF
48096: ST_TO_ADDR
// if temp_list > 0 then
48097: LD_VAR 0 3
48101: PUSH
48102: LD_INT 0
48104: GREATER
48105: IFFALSE 48123
// temp_unit = temp_list [ 1 ] else
48107: LD_ADDR_VAR 0 2
48111: PUSH
48112: LD_VAR 0 3
48116: PUSH
48117: LD_INT 1
48119: ARRAY
48120: ST_TO_ADDR
48121: GO 48210
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ Heike ) ;
48123: LD_ADDR_VAR 0 3
48127: PUSH
48128: LD_INT 22
48130: PUSH
48131: LD_EXP 3
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 21
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PPUSH
48154: CALL_OW 69
48158: PUSH
48159: LD_EXP 3
48163: PPUSH
48164: CALL 44422 0 1
48168: PUSH
48169: LD_EXP 10
48173: ADD
48174: DIFF
48175: ST_TO_ADDR
// if temp_list > 0 then
48176: LD_VAR 0 3
48180: PUSH
48181: LD_INT 0
48183: GREATER
48184: IFFALSE 48202
// temp_unit = temp_list [ 1 ] else
48186: LD_ADDR_VAR 0 2
48190: PUSH
48191: LD_VAR 0 3
48195: PUSH
48196: LD_INT 1
48198: ARRAY
48199: ST_TO_ADDR
48200: GO 48210
// temp_unit = 0 ;
48202: LD_ADDR_VAR 0 2
48206: PUSH
48207: LD_INT 0
48209: ST_TO_ADDR
// end ; if GetSex ( temp_unit ) = sex_male then
48210: LD_VAR 0 2
48214: PPUSH
48215: CALL_OW 258
48219: PUSH
48220: LD_INT 1
48222: EQUAL
48223: IFFALSE 48239
// Say ( temp_unit , D2-SomeM-1 ) else
48225: LD_VAR 0 2
48229: PPUSH
48230: LD_STRING D2-SomeM-1
48232: PPUSH
48233: CALL_OW 88
48237: GO 48251
// Say ( temp_unit , D2-SomeF-1 ) ;
48239: LD_VAR 0 2
48243: PPUSH
48244: LD_STRING D2-SomeF-1
48246: PPUSH
48247: CALL_OW 88
// end ; Say ( Heike , D2-H-1 ) ;
48251: LD_EXP 10
48255: PPUSH
48256: LD_STRING D2-H-1
48258: PPUSH
48259: CALL_OW 88
// if IsOk ( Kowalski ) then
48263: LD_EXP 14
48267: PPUSH
48268: CALL_OW 302
48272: IFFALSE 48300
// begin Say ( Kowalski , D2-Ko-a-1 ) ;
48274: LD_EXP 14
48278: PPUSH
48279: LD_STRING D2-Ko-a-1
48281: PPUSH
48282: CALL_OW 88
// Say ( Heike , D2-H-a-2 ) ;
48286: LD_EXP 10
48290: PPUSH
48291: LD_STRING D2-H-a-2
48293: PPUSH
48294: CALL_OW 88
// end else
48298: GO 48312
// begin Say ( Heike , D2-H-b-2 ) ;
48300: LD_EXP 10
48304: PPUSH
48305: LD_STRING D2-H-b-2
48307: PPUSH
48308: CALL_OW 88
// end ; dwait ( 0 0$0.2 ) ;
48312: LD_INT 7
48314: PPUSH
48315: CALL_OW 68
// temp_list_2 = FilterAllUnits ( [ f_side , you ] ) diff ( GetApes ( you ) ^ Heike ) ;
48319: LD_ADDR_VAR 0 4
48323: PUSH
48324: LD_INT 22
48326: PUSH
48327: LD_EXP 3
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PPUSH
48336: CALL_OW 69
48340: PUSH
48341: LD_EXP 3
48345: PPUSH
48346: CALL 44422 0 1
48350: PUSH
48351: LD_EXP 10
48355: ADD
48356: DIFF
48357: ST_TO_ADDR
// if UnitFilter ( temp_list_2 , [ f_class , class_soldier ] ) = 0 then
48358: LD_VAR 0 4
48362: PPUSH
48363: LD_INT 25
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PPUSH
48373: CALL_OW 72
48377: PUSH
48378: LD_INT 0
48380: EQUAL
48381: IFFALSE 48396
// temp_list = [ sel_change_class ] else
48383: LD_ADDR_VAR 0 3
48387: PUSH
48388: LD_INT -5
48390: PUSH
48391: EMPTY
48392: LIST
48393: ST_TO_ADDR
48394: GO 48407
// temp_list = [ sel_dont_change_class ] ;
48396: LD_ADDR_VAR 0 3
48400: PUSH
48401: LD_INT -6
48403: PUSH
48404: EMPTY
48405: LIST
48406: ST_TO_ADDR
// temp_list = CharacterSelection (  , 1 , 1 , [ sel_dont_change_class , sel_not_hired , sel_not_changeable , Heike , sel_changeable ] ^ temp_list ^ temp_list_2 , [ [ class_soldier , 1 ] ] ) ;
48407: LD_ADDR_VAR 0 3
48411: PUSH
48412: LD_STRING 
48414: PPUSH
48415: LD_INT 1
48417: PPUSH
48418: LD_INT 1
48420: PPUSH
48421: LD_INT -6
48423: PUSH
48424: LD_INT -2
48426: PUSH
48427: LD_INT -4
48429: PUSH
48430: LD_EXP 10
48434: PUSH
48435: LD_INT -3
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: PUSH
48445: LD_VAR 0 3
48449: ADD
48450: PUSH
48451: LD_VAR 0 4
48455: ADD
48456: PPUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: PPUSH
48470: CALL_OW 42
48474: ST_TO_ADDR
// temp_unit = temp_list [ 1 ] ;
48475: LD_ADDR_VAR 0 2
48479: PUSH
48480: LD_VAR 0 3
48484: PUSH
48485: LD_INT 1
48487: ARRAY
48488: ST_TO_ADDR
// scout = temp_unit ;
48489: LD_ADDR_VAR 0 7
48493: PUSH
48494: LD_VAR 0 2
48498: ST_TO_ADDR
// dwait ( 0 0$0.2 ) ;
48499: LD_INT 7
48501: PPUSH
48502: CALL_OW 68
// case temp_unit of Sonya :
48506: LD_VAR 0 2
48510: PUSH
48511: LD_EXP 11
48515: DOUBLE
48516: EQUAL
48517: IFTRUE 48521
48519: GO 48536
48521: POP
// Say ( temp_unit , D2-So-1 ) ; Oswald :
48522: LD_VAR 0 2
48526: PPUSH
48527: LD_STRING D2-So-1
48529: PPUSH
48530: CALL_OW 88
48534: GO 48905
48536: LD_EXP 12
48540: DOUBLE
48541: EQUAL
48542: IFTRUE 48546
48544: GO 48581
48546: POP
// begin if oswald_is_substitute then
48547: LD_EXP 81
48551: IFFALSE 48567
// Say ( temp_unit , D2-Os_alt-2 ) else
48553: LD_VAR 0 2
48557: PPUSH
48558: LD_STRING D2-Os_alt-2
48560: PPUSH
48561: CALL_OW 88
48565: GO 48579
// Say ( temp_unit , D2-Os-2 ) ;
48567: LD_VAR 0 2
48571: PPUSH
48572: LD_STRING D2-Os-2
48574: PPUSH
48575: CALL_OW 88
// end ; Ralph :
48579: GO 48905
48581: LD_EXP 13
48585: DOUBLE
48586: EQUAL
48587: IFTRUE 48591
48589: GO 48606
48591: POP
// Say ( temp_unit , D2-Ra-1 ) ; Kowalski :
48592: LD_VAR 0 2
48596: PPUSH
48597: LD_STRING D2-Ra-1
48599: PPUSH
48600: CALL_OW 88
48604: GO 48905
48606: LD_EXP 14
48610: DOUBLE
48611: EQUAL
48612: IFTRUE 48616
48614: GO 48631
48616: POP
// Say ( temp_unit , D2-Ko-1 ) ; Evelyn :
48617: LD_VAR 0 2
48621: PPUSH
48622: LD_STRING D2-Ko-1
48624: PPUSH
48625: CALL_OW 88
48629: GO 48905
48631: LD_EXP 15
48635: DOUBLE
48636: EQUAL
48637: IFTRUE 48641
48639: GO 48656
48641: POP
// Say ( temp_unit , D2-Ev-1 ) ; Suze :
48642: LD_VAR 0 2
48646: PPUSH
48647: LD_STRING D2-Ev-1
48649: PPUSH
48650: CALL_OW 88
48654: GO 48905
48656: LD_EXP 16
48660: DOUBLE
48661: EQUAL
48662: IFTRUE 48666
48664: GO 48681
48666: POP
// Say ( temp_unit , D2-Su-1 ) ; Olaf :
48667: LD_VAR 0 2
48671: PPUSH
48672: LD_STRING D2-Su-1
48674: PPUSH
48675: CALL_OW 88
48679: GO 48905
48681: LD_EXP 17
48685: DOUBLE
48686: EQUAL
48687: IFTRUE 48691
48689: GO 48706
48691: POP
// Say ( temp_unit , D2-Olaf-2 ) ; Kurt :
48692: LD_VAR 0 2
48696: PPUSH
48697: LD_STRING D2-Olaf-2
48699: PPUSH
48700: CALL_OW 88
48704: GO 48905
48706: LD_EXP 18
48710: DOUBLE
48711: EQUAL
48712: IFTRUE 48716
48714: GO 48751
48716: POP
// begin if kurt_is_substitute then
48717: LD_EXP 82
48721: IFFALSE 48737
// Say ( temp_unit , D2-Ku_alt-1 ) else
48723: LD_VAR 0 2
48727: PPUSH
48728: LD_STRING D2-Ku_alt-1
48730: PPUSH
48731: CALL_OW 88
48735: GO 48749
// Say ( temp_unit , D2-Ku-1 ) ;
48737: LD_VAR 0 2
48741: PPUSH
48742: LD_STRING D2-Ku-1
48744: PPUSH
48745: CALL_OW 88
// end ; Dwayne :
48749: GO 48905
48751: LD_EXP 19
48755: DOUBLE
48756: EQUAL
48757: IFTRUE 48761
48759: GO 48776
48761: POP
// Say ( temp_unit , D2-Dw-1 ) ; MarkB :
48762: LD_VAR 0 2
48766: PPUSH
48767: LD_STRING D2-Dw-1
48769: PPUSH
48770: CALL_OW 88
48774: GO 48905
48776: LD_EXP 20
48780: DOUBLE
48781: EQUAL
48782: IFTRUE 48786
48784: GO 48801
48786: POP
// Say ( temp_unit , D2-Ma-1 ) ; Aviradze :
48787: LD_VAR 0 2
48791: PPUSH
48792: LD_STRING D2-Ma-1
48794: PPUSH
48795: CALL_OW 88
48799: GO 48905
48801: LD_EXP 21
48805: DOUBLE
48806: EQUAL
48807: IFTRUE 48811
48809: GO 48838
48811: POP
// begin Say ( temp_unit , D2-Av-1 ) ;
48812: LD_VAR 0 2
48816: PPUSH
48817: LD_STRING D2-Av-1
48819: PPUSH
48820: CALL_OW 88
// Say ( Heike , D2-H-3 ) ;
48824: LD_EXP 10
48828: PPUSH
48829: LD_STRING D2-H-3
48831: PPUSH
48832: CALL_OW 88
// end ; Swansson :
48836: GO 48905
48838: LD_EXP 22
48842: DOUBLE
48843: EQUAL
48844: IFTRUE 48848
48846: GO 48863
48848: POP
// Say ( temp_unit , D2-Sw-1 ) ; else
48849: LD_VAR 0 2
48853: PPUSH
48854: LD_STRING D2-Sw-1
48856: PPUSH
48857: CALL_OW 88
48861: GO 48905
48863: POP
// begin if GetSex ( temp_unit ) = sex_male then
48864: LD_VAR 0 2
48868: PPUSH
48869: CALL_OW 258
48873: PUSH
48874: LD_INT 1
48876: EQUAL
48877: IFFALSE 48893
// Say ( temp_unit , D2-SomeM-2 ) else
48879: LD_VAR 0 2
48883: PPUSH
48884: LD_STRING D2-SomeM-2
48886: PPUSH
48887: CALL_OW 88
48891: GO 48905
// Say ( temp_unit , D2-SomeF-2 ) ;
48893: LD_VAR 0 2
48897: PPUSH
48898: LD_STRING D2-SomeF-2
48900: PPUSH
48901: CALL_OW 88
// end ; end ; DialogueOff ;
48905: CALL_OW 7
// SetSide ( scout , scout_side ) ;
48909: LD_VAR 0 7
48913: PPUSH
48914: LD_EXP 8
48918: PPUSH
48919: CALL_OW 235
// repeat wait ( 0 0$0.7 ) ;
48923: LD_INT 24
48925: PPUSH
48926: CALL_OW 67
// if IsPlaced ( scout ) then
48930: LD_VAR 0 7
48934: PPUSH
48935: CALL_OW 305
48939: IFFALSE 49044
// case GetType ( IsInUnit ( scout ) ) of unit_building :
48941: LD_VAR 0 7
48945: PPUSH
48946: CALL_OW 310
48950: PPUSH
48951: CALL_OW 247
48955: PUSH
48956: LD_INT 3
48958: DOUBLE
48959: EQUAL
48960: IFTRUE 48964
48962: GO 48976
48964: POP
// ComExitBuilding ( scout ) ; unit_vehicle :
48965: LD_VAR 0 7
48969: PPUSH
48970: CALL_OW 122
48974: GO 49044
48976: LD_INT 2
48978: DOUBLE
48979: EQUAL
48980: IFTRUE 48984
48982: GO 48996
48984: POP
// ComExitVehicle ( scout ) ; else
48985: LD_VAR 0 7
48989: PPUSH
48990: CALL_OW 121
48994: GO 49044
48996: POP
// begin if GetDistUnitXY ( scout , 143 , 117 ) > 1 then
48997: LD_VAR 0 7
49001: PPUSH
49002: LD_INT 143
49004: PPUSH
49005: LD_INT 117
49007: PPUSH
49008: CALL_OW 297
49012: PUSH
49013: LD_INT 1
49015: GREATER
49016: IFFALSE 49035
// ComMoveXY ( scout , 143 , 117 ) else
49018: LD_VAR 0 7
49022: PPUSH
49023: LD_INT 143
49025: PPUSH
49026: LD_INT 117
49028: PPUSH
49029: CALL_OW 111
49033: GO 49044
// RemoveUnit ( scout ) ;
49035: LD_VAR 0 7
49039: PPUSH
49040: CALL_OW 64
// end ; end ; if IsPlaced ( cargo_bay ) then
49044: LD_VAR 0 5
49048: PPUSH
49049: CALL_OW 305
49053: IFFALSE 49150
// if GetResourceAmountXY ( crate_hex [ 1 ] , crate_hex [ 2 ] ) > 0 then
49055: LD_VAR 0 8
49059: PUSH
49060: LD_INT 1
49062: ARRAY
49063: PPUSH
49064: LD_VAR 0 8
49068: PUSH
49069: LD_INT 2
49071: ARRAY
49072: PPUSH
49073: CALL_OW 284
49077: PUSH
49078: LD_INT 0
49080: GREATER
49081: IFFALSE 49112
// ComGet ( cargo_bay , crate_hex [ 1 ] , crate_hex [ 2 ] ) else
49083: LD_VAR 0 5
49087: PPUSH
49088: LD_VAR 0 8
49092: PUSH
49093: LD_INT 1
49095: ARRAY
49096: PPUSH
49097: LD_VAR 0 8
49101: PUSH
49102: LD_INT 2
49104: ARRAY
49105: PPUSH
49106: CALL_OW 160
49110: GO 49150
// if not IsInArea ( cargo_bay , ru_enter_area ) then
49112: LD_VAR 0 5
49116: PPUSH
49117: LD_INT 10
49119: PPUSH
49120: CALL_OW 308
49124: NOT
49125: IFFALSE 49141
// ComMoveToArea ( cargo_bay , ru_enter_area ) else
49127: LD_VAR 0 5
49131: PPUSH
49132: LD_INT 10
49134: PPUSH
49135: CALL_OW 113
49139: GO 49150
// DestroyUnit ( cargo_bay ) ;
49141: LD_VAR 0 5
49145: PPUSH
49146: CALL_OW 65
// until not IsPlaced ( scout ) and not IsPlaced ( cargo_bay ) ;
49150: LD_VAR 0 7
49154: PPUSH
49155: CALL_OW 305
49159: NOT
49160: PUSH
49161: LD_VAR 0 5
49165: PPUSH
49166: CALL_OW 305
49170: NOT
49171: AND
49172: IFFALSE 48923
// wait ( Rand ( 5 5$0 , 6 6$0 ) ) ;
49174: LD_INT 10500
49176: PPUSH
49177: LD_INT 12600
49179: PPUSH
49180: CALL_OW 12
49184: PPUSH
49185: CALL_OW 67
// SetDir ( scout , 5 ) ;
49189: LD_VAR 0 7
49193: PPUSH
49194: LD_INT 5
49196: PPUSH
49197: CALL_OW 233
// i = 1 ;
49201: LD_ADDR_VAR 0 1
49205: PUSH
49206: LD_INT 1
49208: ST_TO_ADDR
// while not IsPlaced ( scout ) do
49209: LD_VAR 0 7
49213: PPUSH
49214: CALL_OW 305
49218: NOT
49219: IFFALSE 49267
// begin PlaceUnitXYR ( scout , 143 , 117 , i , false ) ;
49221: LD_VAR 0 7
49225: PPUSH
49226: LD_INT 143
49228: PPUSH
49229: LD_INT 117
49231: PPUSH
49232: LD_VAR 0 1
49236: PPUSH
49237: LD_INT 0
49239: PPUSH
49240: CALL_OW 50
// i = i + 1 ;
49244: LD_ADDR_VAR 0 1
49248: PUSH
49249: LD_VAR 0 1
49253: PUSH
49254: LD_INT 1
49256: PLUS
49257: ST_TO_ADDR
// wait ( 0 0$2 ) ;
49258: LD_INT 70
49260: PPUSH
49261: CALL_OW 67
// end ;
49265: GO 49209
// while not See ( you , scout ) do
49267: LD_EXP 3
49271: PPUSH
49272: LD_VAR 0 7
49276: PPUSH
49277: CALL_OW 292
49281: NOT
49282: IFFALSE 49354
// begin wait ( 0 0$1 ) ;
49284: LD_INT 35
49286: PPUSH
49287: CALL_OW 67
// temp_unit = NearestUnitToUnit ( FilterAllUnits ( [ f_side , you ] ) , scout ) ;
49291: LD_ADDR_VAR 0 2
49295: PUSH
49296: LD_INT 22
49298: PUSH
49299: LD_EXP 3
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PPUSH
49308: CALL_OW 69
49312: PPUSH
49313: LD_VAR 0 7
49317: PPUSH
49318: CALL_OW 74
49322: ST_TO_ADDR
// ComMoveXY ( scout , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
49323: LD_VAR 0 7
49327: PPUSH
49328: LD_VAR 0 2
49332: PPUSH
49333: CALL_OW 250
49337: PPUSH
49338: LD_VAR 0 2
49342: PPUSH
49343: CALL_OW 251
49347: PPUSH
49348: CALL_OW 111
// end ;
49352: GO 49267
// CenterOnUnits ( scout ) ;
49354: LD_VAR 0 7
49358: PPUSH
49359: CALL_OW 85
// SetSide ( scout , you ) ;
49363: LD_VAR 0 7
49367: PPUSH
49368: LD_EXP 3
49372: PPUSH
49373: CALL_OW 235
// ComStop ( scout ) ;
49377: LD_VAR 0 7
49381: PPUSH
49382: CALL_OW 141
// DialogueOn ;
49386: CALL_OW 6
// Say ( Heike , D3-H-1 ) ;
49390: LD_EXP 10
49394: PPUSH
49395: LD_STRING D3-H-1
49397: PPUSH
49398: CALL_OW 88
// temp_unit = scout ;
49402: LD_ADDR_VAR 0 2
49406: PUSH
49407: LD_VAR 0 7
49411: ST_TO_ADDR
// case temp_unit of Sonya :
49412: LD_VAR 0 2
49416: PUSH
49417: LD_EXP 11
49421: DOUBLE
49422: EQUAL
49423: IFTRUE 49427
49425: GO 49442
49427: POP
// Say ( temp_unit , D3-So-1 ) ; Oswald :
49428: LD_VAR 0 2
49432: PPUSH
49433: LD_STRING D3-So-1
49435: PPUSH
49436: CALL_OW 88
49440: GO 49872
49442: LD_EXP 12
49446: DOUBLE
49447: EQUAL
49448: IFTRUE 49452
49450: GO 49487
49452: POP
// begin if oswald_is_substitute then
49453: LD_EXP 81
49457: IFFALSE 49473
// Say ( temp_unit , D3-Os_alt-1 ) else
49459: LD_VAR 0 2
49463: PPUSH
49464: LD_STRING D3-Os_alt-1
49466: PPUSH
49467: CALL_OW 88
49471: GO 49485
// Say ( temp_unit , D3-Os-1 ) ;
49473: LD_VAR 0 2
49477: PPUSH
49478: LD_STRING D3-Os-1
49480: PPUSH
49481: CALL_OW 88
// end ; Ralph :
49485: GO 49872
49487: LD_EXP 13
49491: DOUBLE
49492: EQUAL
49493: IFTRUE 49497
49495: GO 49561
49497: POP
// begin Say ( temp_unit , D3-Ra-1 ) ;
49498: LD_VAR 0 2
49502: PPUSH
49503: LD_STRING D3-Ra-1
49505: PPUSH
49506: CALL_OW 88
// if IsOk ( Sonya ) then
49510: LD_EXP 11
49514: PPUSH
49515: CALL_OW 302
49519: IFFALSE 49535
// Say ( Sonya , D3-So-2a ) else
49521: LD_EXP 11
49525: PPUSH
49526: LD_STRING D3-So-2a
49528: PPUSH
49529: CALL_OW 88
49533: GO 49547
// Say ( Heike , D3-H-2a ) ;
49535: LD_EXP 10
49539: PPUSH
49540: LD_STRING D3-H-2a
49542: PPUSH
49543: CALL_OW 88
// Say ( Ralph , D3-Ra-2 ) ;
49547: LD_EXP 13
49551: PPUSH
49552: LD_STRING D3-Ra-2
49554: PPUSH
49555: CALL_OW 88
// end ; Kowalski :
49559: GO 49872
49561: LD_EXP 14
49565: DOUBLE
49566: EQUAL
49567: IFTRUE 49571
49569: GO 49586
49571: POP
// Say ( temp_unit , D3-Ko-1 ) ; Evelyn :
49572: LD_VAR 0 2
49576: PPUSH
49577: LD_STRING D3-Ko-1
49579: PPUSH
49580: CALL_OW 88
49584: GO 49872
49586: LD_EXP 15
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49596
49594: GO 49611
49596: POP
// Say ( temp_unit , D3-Ev-1 ) ; Suze :
49597: LD_VAR 0 2
49601: PPUSH
49602: LD_STRING D3-Ev-1
49604: PPUSH
49605: CALL_OW 88
49609: GO 49872
49611: LD_EXP 16
49615: DOUBLE
49616: EQUAL
49617: IFTRUE 49621
49619: GO 49636
49621: POP
// Say ( temp_unit , D3-Su-1 ) ; Olaf :
49622: LD_VAR 0 2
49626: PPUSH
49627: LD_STRING D3-Su-1
49629: PPUSH
49630: CALL_OW 88
49634: GO 49872
49636: LD_EXP 17
49640: DOUBLE
49641: EQUAL
49642: IFTRUE 49646
49644: GO 49661
49646: POP
// Say ( temp_unit , D3-Olaf-1 ) ; Kurt :
49647: LD_VAR 0 2
49651: PPUSH
49652: LD_STRING D3-Olaf-1
49654: PPUSH
49655: CALL_OW 88
49659: GO 49872
49661: LD_EXP 18
49665: DOUBLE
49666: EQUAL
49667: IFTRUE 49671
49669: GO 49706
49671: POP
// begin if kurt_is_substitute then
49672: LD_EXP 82
49676: IFFALSE 49692
// Say ( temp_unit , D3-Ku_alt-1 ) else
49678: LD_VAR 0 2
49682: PPUSH
49683: LD_STRING D3-Ku_alt-1
49685: PPUSH
49686: CALL_OW 88
49690: GO 49704
// Say ( temp_unit , D3-Ku-1 ) ;
49692: LD_VAR 0 2
49696: PPUSH
49697: LD_STRING D3-Ku-1
49699: PPUSH
49700: CALL_OW 88
// end ; Dwayne :
49704: GO 49872
49706: LD_EXP 19
49710: DOUBLE
49711: EQUAL
49712: IFTRUE 49716
49714: GO 49731
49716: POP
// Say ( temp_unit , D3-Dw-1 ) ; MarkB :
49717: LD_VAR 0 2
49721: PPUSH
49722: LD_STRING D3-Dw-1
49724: PPUSH
49725: CALL_OW 88
49729: GO 49872
49731: LD_EXP 20
49735: DOUBLE
49736: EQUAL
49737: IFTRUE 49741
49739: GO 49756
49741: POP
// Say ( temp_unit , D3-Ma-1 ) ; Aviradze :
49742: LD_VAR 0 2
49746: PPUSH
49747: LD_STRING D3-Ma-1
49749: PPUSH
49750: CALL_OW 88
49754: GO 49872
49756: LD_EXP 21
49760: DOUBLE
49761: EQUAL
49762: IFTRUE 49766
49764: GO 49805
49766: POP
// begin Say ( temp_unit , D3-Av-1 ) ;
49767: LD_VAR 0 2
49771: PPUSH
49772: LD_STRING D3-Av-1
49774: PPUSH
49775: CALL_OW 88
// Say ( Heike , D3-H-2b ) ;
49779: LD_EXP 10
49783: PPUSH
49784: LD_STRING D3-H-2b
49786: PPUSH
49787: CALL_OW 88
// Say ( temp_unit , D3-Av-2 ) ;
49791: LD_VAR 0 2
49795: PPUSH
49796: LD_STRING D3-Av-2
49798: PPUSH
49799: CALL_OW 88
// end ; Swansson :
49803: GO 49872
49805: LD_EXP 22
49809: DOUBLE
49810: EQUAL
49811: IFTRUE 49815
49813: GO 49830
49815: POP
// Say ( temp_unit , D3-Sw-1 ) ; else
49816: LD_VAR 0 2
49820: PPUSH
49821: LD_STRING D3-Sw-1
49823: PPUSH
49824: CALL_OW 88
49828: GO 49872
49830: POP
// begin if GetSex ( temp_unit ) = sex_male then
49831: LD_VAR 0 2
49835: PPUSH
49836: CALL_OW 258
49840: PUSH
49841: LD_INT 1
49843: EQUAL
49844: IFFALSE 49860
// Say ( temp_unit , D3-SomeM-1 ) else
49846: LD_VAR 0 2
49850: PPUSH
49851: LD_STRING D3-SomeM-1
49853: PPUSH
49854: CALL_OW 88
49858: GO 49872
// Say ( temp_unit , D3-SomeF-1 ) ;
49860: LD_VAR 0 2
49864: PPUSH
49865: LD_STRING D3-SomeF-1
49867: PPUSH
49868: CALL_OW 88
// end ; end ; if SeeGreyArea ( you , Ru_base ) then
49872: LD_EXP 3
49876: PPUSH
49877: LD_INT 3
49879: PPUSH
49880: CALL_OW 452
49884: IFFALSE 49900
// begin Say ( Heike , D3-H-a-2 ) ;
49886: LD_EXP 10
49890: PPUSH
49891: LD_STRING D3-H-a-2
49893: PPUSH
49894: CALL_OW 88
// end else
49898: GO 49912
// begin Say ( Heike , D3-H-b-2 ) ;
49900: LD_EXP 10
49904: PPUSH
49905: LD_STRING D3-H-b-2
49907: PPUSH
49908: CALL_OW 88
// end ; case temp_unit of Sonya :
49912: LD_VAR 0 2
49916: PUSH
49917: LD_EXP 11
49921: DOUBLE
49922: EQUAL
49923: IFTRUE 49927
49925: GO 49942
49927: POP
// Say ( temp_unit , D3-So-2 ) ; Oswald :
49928: LD_VAR 0 2
49932: PPUSH
49933: LD_STRING D3-So-2
49935: PPUSH
49936: CALL_OW 88
49940: GO 50299
49942: LD_EXP 12
49946: DOUBLE
49947: EQUAL
49948: IFTRUE 49952
49950: GO 49987
49952: POP
// begin if oswald_is_substitute then
49953: LD_EXP 81
49957: IFFALSE 49973
// Say ( temp_unit , D3-Os_alt-2 ) else
49959: LD_VAR 0 2
49963: PPUSH
49964: LD_STRING D3-Os_alt-2
49966: PPUSH
49967: CALL_OW 88
49971: GO 49985
// Say ( temp_unit , D3-Os-2 ) ;
49973: LD_VAR 0 2
49977: PPUSH
49978: LD_STRING D3-Os-2
49980: PPUSH
49981: CALL_OW 88
// end ; Ralph :
49985: GO 50299
49987: LD_EXP 13
49991: DOUBLE
49992: EQUAL
49993: IFTRUE 49997
49995: GO 50012
49997: POP
// Say ( temp_unit , D3-Ra-3 ) ; Kowalski :
49998: LD_VAR 0 2
50002: PPUSH
50003: LD_STRING D3-Ra-3
50005: PPUSH
50006: CALL_OW 88
50010: GO 50299
50012: LD_EXP 14
50016: DOUBLE
50017: EQUAL
50018: IFTRUE 50022
50020: GO 50037
50022: POP
// Say ( temp_unit , D3-Ko-2 ) ; Evelyn :
50023: LD_VAR 0 2
50027: PPUSH
50028: LD_STRING D3-Ko-2
50030: PPUSH
50031: CALL_OW 88
50035: GO 50299
50037: LD_EXP 15
50041: DOUBLE
50042: EQUAL
50043: IFTRUE 50047
50045: GO 50062
50047: POP
// Say ( temp_unit , D3-Ev-2 ) ; Suze :
50048: LD_VAR 0 2
50052: PPUSH
50053: LD_STRING D3-Ev-2
50055: PPUSH
50056: CALL_OW 88
50060: GO 50299
50062: LD_EXP 16
50066: DOUBLE
50067: EQUAL
50068: IFTRUE 50072
50070: GO 50087
50072: POP
// Say ( temp_unit , D3-Su-2 ) ; Olaf :
50073: LD_VAR 0 2
50077: PPUSH
50078: LD_STRING D3-Su-2
50080: PPUSH
50081: CALL_OW 88
50085: GO 50299
50087: LD_EXP 17
50091: DOUBLE
50092: EQUAL
50093: IFTRUE 50097
50095: GO 50112
50097: POP
// Say ( temp_unit , D3-Olaf-2 ) ; Kurt :
50098: LD_VAR 0 2
50102: PPUSH
50103: LD_STRING D3-Olaf-2
50105: PPUSH
50106: CALL_OW 88
50110: GO 50299
50112: LD_EXP 18
50116: DOUBLE
50117: EQUAL
50118: IFTRUE 50122
50120: GO 50157
50122: POP
// begin if kurt_is_substitute then
50123: LD_EXP 82
50127: IFFALSE 50143
// Say ( temp_unit , D3-Ku_alt-2 ) else
50129: LD_VAR 0 2
50133: PPUSH
50134: LD_STRING D3-Ku_alt-2
50136: PPUSH
50137: CALL_OW 88
50141: GO 50155
// Say ( temp_unit , D3-Ku-2 ) ;
50143: LD_VAR 0 2
50147: PPUSH
50148: LD_STRING D3-Ku-2
50150: PPUSH
50151: CALL_OW 88
// end ; Dwayne :
50155: GO 50299
50157: LD_EXP 19
50161: DOUBLE
50162: EQUAL
50163: IFTRUE 50167
50165: GO 50182
50167: POP
// Say ( temp_unit , D3-Dw-2 ) ; MarkB :
50168: LD_VAR 0 2
50172: PPUSH
50173: LD_STRING D3-Dw-2
50175: PPUSH
50176: CALL_OW 88
50180: GO 50299
50182: LD_EXP 20
50186: DOUBLE
50187: EQUAL
50188: IFTRUE 50192
50190: GO 50207
50192: POP
// Say ( temp_unit , D3-Ma-2 ) ; Aviradze :
50193: LD_VAR 0 2
50197: PPUSH
50198: LD_STRING D3-Ma-2
50200: PPUSH
50201: CALL_OW 88
50205: GO 50299
50207: LD_EXP 21
50211: DOUBLE
50212: EQUAL
50213: IFTRUE 50217
50215: GO 50232
50217: POP
// Say ( temp_unit , D3-Av-3 ) ; Swansson :
50218: LD_VAR 0 2
50222: PPUSH
50223: LD_STRING D3-Av-3
50225: PPUSH
50226: CALL_OW 88
50230: GO 50299
50232: LD_EXP 22
50236: DOUBLE
50237: EQUAL
50238: IFTRUE 50242
50240: GO 50257
50242: POP
// Say ( temp_unit , D3-Sw-2 ) ; else
50243: LD_VAR 0 2
50247: PPUSH
50248: LD_STRING D3-Sw-2
50250: PPUSH
50251: CALL_OW 88
50255: GO 50299
50257: POP
// begin if GetSex ( temp_unit ) = sex_male then
50258: LD_VAR 0 2
50262: PPUSH
50263: CALL_OW 258
50267: PUSH
50268: LD_INT 1
50270: EQUAL
50271: IFFALSE 50287
// Say ( temp_unit , D3-SomeM-2 ) else
50273: LD_VAR 0 2
50277: PPUSH
50278: LD_STRING D3-SomeM-2
50280: PPUSH
50281: CALL_OW 88
50285: GO 50299
// Say ( temp_unit , D3-SomeF-2 ) ;
50287: LD_VAR 0 2
50291: PPUSH
50292: LD_STRING D3-SomeF-2
50294: PPUSH
50295: CALL_OW 88
// end ; end ; Say ( Heike , D3-H-3 ) ;
50299: LD_EXP 10
50303: PPUSH
50304: LD_STRING D3-H-3
50306: PPUSH
50307: CALL_OW 88
// temp_list = UnitFilter ( [ Sonya , Ralph , Kowalski , Suze , Olaf , Dwayne ] , [ f_ok ] ) ;
50311: LD_ADDR_VAR 0 3
50315: PUSH
50316: LD_EXP 11
50320: PUSH
50321: LD_EXP 13
50325: PUSH
50326: LD_EXP 14
50330: PUSH
50331: LD_EXP 16
50335: PUSH
50336: LD_EXP 17
50340: PUSH
50341: LD_EXP 19
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: PPUSH
50354: LD_INT 50
50356: PUSH
50357: EMPTY
50358: LIST
50359: PPUSH
50360: CALL_OW 72
50364: ST_TO_ADDR
// if temp_list > 0 then
50365: LD_VAR 0 3
50369: PUSH
50370: LD_INT 0
50372: GREATER
50373: IFFALSE 50604
// begin temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
50375: LD_ADDR_VAR 0 2
50379: PUSH
50380: LD_VAR 0 3
50384: PUSH
50385: LD_INT 1
50387: PPUSH
50388: LD_VAR 0 3
50392: PPUSH
50393: CALL_OW 12
50397: ARRAY
50398: ST_TO_ADDR
// case temp_unit of Sonya :
50399: LD_VAR 0 2
50403: PUSH
50404: LD_EXP 11
50408: DOUBLE
50409: EQUAL
50410: IFTRUE 50414
50412: GO 50429
50414: POP
// Say ( temp_unit , D3-So-3 ) ; Ralph :
50415: LD_VAR 0 2
50419: PPUSH
50420: LD_STRING D3-So-3
50422: PPUSH
50423: CALL_OW 88
50427: GO 50555
50429: LD_EXP 13
50433: DOUBLE
50434: EQUAL
50435: IFTRUE 50439
50437: GO 50454
50439: POP
// Say ( temp_unit , D3-Ra-4 ) ; Kowalski :
50440: LD_VAR 0 2
50444: PPUSH
50445: LD_STRING D3-Ra-4
50447: PPUSH
50448: CALL_OW 88
50452: GO 50555
50454: LD_EXP 14
50458: DOUBLE
50459: EQUAL
50460: IFTRUE 50464
50462: GO 50479
50464: POP
// Say ( temp_unit , D3-Ko-3 ) ; Suze :
50465: LD_VAR 0 2
50469: PPUSH
50470: LD_STRING D3-Ko-3
50472: PPUSH
50473: CALL_OW 88
50477: GO 50555
50479: LD_EXP 16
50483: DOUBLE
50484: EQUAL
50485: IFTRUE 50489
50487: GO 50504
50489: POP
// Say ( temp_unit , D3-Su-3 ) ; Olaf :
50490: LD_VAR 0 2
50494: PPUSH
50495: LD_STRING D3-Su-3
50497: PPUSH
50498: CALL_OW 88
50502: GO 50555
50504: LD_EXP 17
50508: DOUBLE
50509: EQUAL
50510: IFTRUE 50514
50512: GO 50529
50514: POP
// Say ( temp_unit , D3-Olaf-3 ) ; Dwayne :
50515: LD_VAR 0 2
50519: PPUSH
50520: LD_STRING D3-Olaf-3
50522: PPUSH
50523: CALL_OW 88
50527: GO 50555
50529: LD_EXP 19
50533: DOUBLE
50534: EQUAL
50535: IFTRUE 50539
50537: GO 50554
50539: POP
// Say ( temp_unit , D3-Dw-3 ) ; end ;
50540: LD_VAR 0 2
50544: PPUSH
50545: LD_STRING D3-Dw-3
50547: PPUSH
50548: CALL_OW 88
50552: GO 50555
50554: POP
// if temp_unit in [ Sonya , Olaf ] then
50555: LD_VAR 0 2
50559: PUSH
50560: LD_EXP 11
50564: PUSH
50565: LD_EXP 17
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: IN
50574: IFFALSE 50590
// Say ( Heike , D3-H-a-4 ) else
50576: LD_EXP 10
50580: PPUSH
50581: LD_STRING D3-H-a-4
50583: PPUSH
50584: CALL_OW 88
50588: GO 50602
// Say ( Heike , D3-H-b-4 ) ;
50590: LD_EXP 10
50594: PPUSH
50595: LD_STRING D3-H-b-4
50597: PPUSH
50598: CALL_OW 88
// end else
50602: GO 50616
// begin Say ( Heike , D3-H-c-4 ) ;
50604: LD_EXP 10
50608: PPUSH
50609: LD_STRING D3-H-c-4
50611: PPUSH
50612: CALL_OW 88
// end ; Say ( Heike , D3-H-5 ) ;
50616: LD_EXP 10
50620: PPUSH
50621: LD_STRING D3-H-5
50623: PPUSH
50624: CALL_OW 88
// if yashin_alive then
50628: LD_EXP 86
50632: IFFALSE 51033
// begin case temp_unit of Sonya :
50634: LD_VAR 0 2
50638: PUSH
50639: LD_EXP 11
50643: DOUBLE
50644: EQUAL
50645: IFTRUE 50649
50647: GO 50664
50649: POP
// Say ( temp_unit , D3-So-a-4 ) ; Oswald :
50650: LD_VAR 0 2
50654: PPUSH
50655: LD_STRING D3-So-a-4
50657: PPUSH
50658: CALL_OW 88
50662: GO 51021
50664: LD_EXP 12
50668: DOUBLE
50669: EQUAL
50670: IFTRUE 50674
50672: GO 50709
50674: POP
// begin if oswald_is_substitute then
50675: LD_EXP 81
50679: IFFALSE 50695
// Say ( temp_unit , D3-Os_alt-a-3 ) else
50681: LD_VAR 0 2
50685: PPUSH
50686: LD_STRING D3-Os_alt-a-3
50688: PPUSH
50689: CALL_OW 88
50693: GO 50707
// Say ( temp_unit , D3-Os-a-3 ) ;
50695: LD_VAR 0 2
50699: PPUSH
50700: LD_STRING D3-Os-a-3
50702: PPUSH
50703: CALL_OW 88
// end ; Ralph :
50707: GO 51021
50709: LD_EXP 13
50713: DOUBLE
50714: EQUAL
50715: IFTRUE 50719
50717: GO 50734
50719: POP
// Say ( temp_unit , D3-Ra-a-5 ) ; Kowalski :
50720: LD_VAR 0 2
50724: PPUSH
50725: LD_STRING D3-Ra-a-5
50727: PPUSH
50728: CALL_OW 88
50732: GO 51021
50734: LD_EXP 14
50738: DOUBLE
50739: EQUAL
50740: IFTRUE 50744
50742: GO 50759
50744: POP
// Say ( temp_unit , D3-Ko-a-4 ) ; Evelyn :
50745: LD_VAR 0 2
50749: PPUSH
50750: LD_STRING D3-Ko-a-4
50752: PPUSH
50753: CALL_OW 88
50757: GO 51021
50759: LD_EXP 15
50763: DOUBLE
50764: EQUAL
50765: IFTRUE 50769
50767: GO 50784
50769: POP
// Say ( temp_unit , D3-Ev-a-3 ) ; Suze :
50770: LD_VAR 0 2
50774: PPUSH
50775: LD_STRING D3-Ev-a-3
50777: PPUSH
50778: CALL_OW 88
50782: GO 51021
50784: LD_EXP 16
50788: DOUBLE
50789: EQUAL
50790: IFTRUE 50794
50792: GO 50809
50794: POP
// Say ( temp_unit , D3-Su-a-4 ) ; Olaf :
50795: LD_VAR 0 2
50799: PPUSH
50800: LD_STRING D3-Su-a-4
50802: PPUSH
50803: CALL_OW 88
50807: GO 51021
50809: LD_EXP 17
50813: DOUBLE
50814: EQUAL
50815: IFTRUE 50819
50817: GO 50834
50819: POP
// Say ( temp_unit , D3-Olaf-a-4 ) ; Kurt :
50820: LD_VAR 0 2
50824: PPUSH
50825: LD_STRING D3-Olaf-a-4
50827: PPUSH
50828: CALL_OW 88
50832: GO 51021
50834: LD_EXP 18
50838: DOUBLE
50839: EQUAL
50840: IFTRUE 50844
50842: GO 50879
50844: POP
// begin if kurt_is_substitute then
50845: LD_EXP 82
50849: IFFALSE 50865
// Say ( temp_unit , D3-Ku_alt-a-3 ) else
50851: LD_VAR 0 2
50855: PPUSH
50856: LD_STRING D3-Ku_alt-a-3
50858: PPUSH
50859: CALL_OW 88
50863: GO 50877
// Say ( temp_unit , D3-Ku-a-3 ) ;
50865: LD_VAR 0 2
50869: PPUSH
50870: LD_STRING D3-Ku-a-3
50872: PPUSH
50873: CALL_OW 88
// end ; Dwayne :
50877: GO 51021
50879: LD_EXP 19
50883: DOUBLE
50884: EQUAL
50885: IFTRUE 50889
50887: GO 50904
50889: POP
// Say ( temp_unit , D3-Dw-a-4 ) ; MarkB :
50890: LD_VAR 0 2
50894: PPUSH
50895: LD_STRING D3-Dw-a-4
50897: PPUSH
50898: CALL_OW 88
50902: GO 51021
50904: LD_EXP 20
50908: DOUBLE
50909: EQUAL
50910: IFTRUE 50914
50912: GO 50929
50914: POP
// Say ( temp_unit , D3-Ma-a-3 ) ; Aviradze :
50915: LD_VAR 0 2
50919: PPUSH
50920: LD_STRING D3-Ma-a-3
50922: PPUSH
50923: CALL_OW 88
50927: GO 51021
50929: LD_EXP 21
50933: DOUBLE
50934: EQUAL
50935: IFTRUE 50939
50937: GO 50954
50939: POP
// Say ( temp_unit , D3-Av-a-4 ) ; Swansson :
50940: LD_VAR 0 2
50944: PPUSH
50945: LD_STRING D3-Av-a-4
50947: PPUSH
50948: CALL_OW 88
50952: GO 51021
50954: LD_EXP 22
50958: DOUBLE
50959: EQUAL
50960: IFTRUE 50964
50962: GO 50979
50964: POP
// Say ( temp_unit , D3-Sw-a-3 ) ; else
50965: LD_VAR 0 2
50969: PPUSH
50970: LD_STRING D3-Sw-a-3
50972: PPUSH
50973: CALL_OW 88
50977: GO 51021
50979: POP
// begin if GetSex ( temp_unit ) = sex_male then
50980: LD_VAR 0 2
50984: PPUSH
50985: CALL_OW 258
50989: PUSH
50990: LD_INT 1
50992: EQUAL
50993: IFFALSE 51009
// Say ( temp_unit , D3-SomeM-a-3 ) else
50995: LD_VAR 0 2
50999: PPUSH
51000: LD_STRING D3-SomeM-a-3
51002: PPUSH
51003: CALL_OW 88
51007: GO 51021
// Say ( temp_unit , D3-SomeF-a-3 ) ;
51009: LD_VAR 0 2
51013: PPUSH
51014: LD_STRING D3-SomeF-a-3
51016: PPUSH
51017: CALL_OW 88
// end ; end ; Say ( Heike , D3-H-a-6 ) ;
51021: LD_EXP 10
51025: PPUSH
51026: LD_STRING D3-H-a-6
51028: PPUSH
51029: CALL_OW 88
// end ; DialogueOff ;
51033: CALL_OW 7
// wait ( 0 0$0.2 ) ;
51037: LD_INT 7
51039: PPUSH
51040: CALL_OW 67
// ChangeMissionObjectives ( M2 ) ;
51044: LD_STRING M2
51046: PPUSH
51047: CALL_OW 337
// scout_event_over = true ;
51051: LD_ADDR_EXP 93
51055: PUSH
51056: LD_INT 1
51058: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = russians_allowed_to_attack_gensher_time + tick ;
51059: LD_ADDR_EXP 94
51063: PUSH
51064: LD_EXP 94
51068: PUSH
51069: LD_OWVAR 1
51073: PLUS
51074: ST_TO_ADDR
// end ;
51075: PPOPN 8
51077: END
// every 0 0$1 + 0 0$0.6 do var i ; var ignore_yellow_list , ignore_red_list ;
51078: GO 51080
51080: DISABLE
51081: LD_INT 0
51083: PPUSH
51084: PPUSH
51085: PPUSH
// begin ignore_yellow_list = [ ] ;
51086: LD_ADDR_VAR 0 2
51090: PUSH
51091: EMPTY
51092: ST_TO_ADDR
// ignore_red_list = [ ] ;
51093: LD_ADDR_VAR 0 3
51097: PUSH
51098: EMPTY
51099: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51100: LD_INT 35
51102: PPUSH
51103: CALL_OW 67
// if game_phase > 1 then
51107: LD_EXP 89
51111: PUSH
51112: LD_INT 1
51114: GREATER
51115: IFFALSE 51119
// exit ;
51117: GO 51499
// if ContactTime ( [ you_alt , russians ] ) >= 0 0$8 then
51119: LD_EXP 6
51123: PUSH
51124: LD_EXP 4
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PPUSH
51133: CALL_OW 462
51137: PUSH
51138: LD_INT 280
51140: GREATEREQUAL
51141: IFFALSE 51159
// begin ignore_yellow_list = [ ] ;
51143: LD_ADDR_VAR 0 2
51147: PUSH
51148: EMPTY
51149: ST_TO_ADDR
// ignore_red_list = [ ] ;
51150: LD_ADDR_VAR 0 3
51154: PUSH
51155: EMPTY
51156: ST_TO_ADDR
// continue ;
51157: GO 51100
// end ; for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_human ] ] ) do
51159: LD_ADDR_VAR 0 1
51163: PUSH
51164: LD_INT 22
51166: PUSH
51167: LD_EXP 6
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 21
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PPUSH
51190: CALL_OW 69
51194: PUSH
51195: FOR_IN
51196: IFFALSE 51319
// if GetLives ( i ) <= 250 then
51198: LD_VAR 0 1
51202: PPUSH
51203: CALL_OW 256
51207: PUSH
51208: LD_INT 250
51210: LESSEQUAL
51211: IFFALSE 51258
// begin if not i in ignore_red_list then
51213: LD_VAR 0 1
51217: PUSH
51218: LD_VAR 0 3
51222: IN
51223: NOT
51224: IFFALSE 51256
// begin russian_interference_points = russian_interference_points + 1 ;
51226: LD_ADDR_EXP 97
51230: PUSH
51231: LD_EXP 97
51235: PUSH
51236: LD_INT 1
51238: PLUS
51239: ST_TO_ADDR
// ignore_red_list = ignore_red_list ^ i ;
51240: LD_ADDR_VAR 0 3
51244: PUSH
51245: LD_VAR 0 3
51249: PUSH
51250: LD_VAR 0 1
51254: ADD
51255: ST_TO_ADDR
// end ; end else
51256: GO 51317
// if i in ai_heal_these_humans [ 2 ] then
51258: LD_VAR 0 1
51262: PUSH
51263: LD_EXP 44
51267: PUSH
51268: LD_INT 2
51270: ARRAY
51271: IN
51272: IFFALSE 51317
// begin if not i in ignore_yellow_list then
51274: LD_VAR 0 1
51278: PUSH
51279: LD_VAR 0 2
51283: IN
51284: NOT
51285: IFFALSE 51317
// begin russian_interference_points = russian_interference_points + 1 ;
51287: LD_ADDR_EXP 97
51291: PUSH
51292: LD_EXP 97
51296: PUSH
51297: LD_INT 1
51299: PLUS
51300: ST_TO_ADDR
// ignore_yellow_list = ignore_yellow_list ^ i ;
51301: LD_ADDR_VAR 0 2
51305: PUSH
51306: LD_VAR 0 2
51310: PUSH
51311: LD_VAR 0 1
51315: ADD
51316: ST_TO_ADDR
// end ; end ;
51317: GO 51195
51319: POP
51320: POP
// for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_building ] ] ) do
51321: LD_ADDR_VAR 0 1
51325: PUSH
51326: LD_INT 22
51328: PUSH
51329: LD_EXP 6
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 21
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PPUSH
51352: CALL_OW 69
51356: PUSH
51357: FOR_IN
51358: IFFALSE 51493
// case GetLives ( i ) of 1 .. 250 :
51360: LD_VAR 0 1
51364: PPUSH
51365: CALL_OW 256
51369: PUSH
51370: LD_INT 1
51372: DOUBLE
51373: GREATEREQUAL
51374: IFFALSE 51382
51376: LD_INT 250
51378: DOUBLE
51379: LESSEQUAL
51380: IFTRUE 51384
51382: GO 51430
51384: POP
// begin if not i in ignore_red_list then
51385: LD_VAR 0 1
51389: PUSH
51390: LD_VAR 0 3
51394: IN
51395: NOT
51396: IFFALSE 51428
// begin russian_interference_points = russian_interference_points + 1 ;
51398: LD_ADDR_EXP 97
51402: PUSH
51403: LD_EXP 97
51407: PUSH
51408: LD_INT 1
51410: PLUS
51411: ST_TO_ADDR
// ignore_red_list = ignore_red_list ^ i ;
51412: LD_ADDR_VAR 0 3
51416: PUSH
51417: LD_VAR 0 3
51421: PUSH
51422: LD_VAR 0 1
51426: ADD
51427: ST_TO_ADDR
// end ; end ; 1 .. 500 :
51428: GO 51491
51430: LD_INT 1
51432: DOUBLE
51433: GREATEREQUAL
51434: IFFALSE 51442
51436: LD_INT 500
51438: DOUBLE
51439: LESSEQUAL
51440: IFTRUE 51444
51442: GO 51490
51444: POP
// begin if not i in ignore_yellow_list then
51445: LD_VAR 0 1
51449: PUSH
51450: LD_VAR 0 2
51454: IN
51455: NOT
51456: IFFALSE 51488
// begin russian_interference_points = russian_interference_points + 1 ;
51458: LD_ADDR_EXP 97
51462: PUSH
51463: LD_EXP 97
51467: PUSH
51468: LD_INT 1
51470: PLUS
51471: ST_TO_ADDR
// ignore_yellow_list = ignore_yellow_list ^ i ;
51472: LD_ADDR_VAR 0 2
51476: PUSH
51477: LD_VAR 0 2
51481: PUSH
51482: LD_VAR 0 1
51486: ADD
51487: ST_TO_ADDR
// end ; end ; end ;
51488: GO 51491
51490: POP
51491: GO 51357
51493: POP
51494: POP
// until false ;
51495: LD_INT 0
51497: IFFALSE 51100
// end ;
51499: PPOPN 3
51501: END
// every 0 0$1 + 0 0$0.3 do var temp_list , hex , time , i ; var hex_list_before , hex_list_after ;
51502: GO 51504
51504: DISABLE
51505: LD_INT 0
51507: PPUSH
51508: PPUSH
51509: PPUSH
51510: PPUSH
51511: PPUSH
51512: PPUSH
// begin time = Rand ( 20 20$0 , 23 23$0 ) ;
51513: LD_ADDR_VAR 0 3
51517: PUSH
51518: LD_INT 42000
51520: PPUSH
51521: LD_INT 48300
51523: PPUSH
51524: CALL_OW 12
51528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51529: LD_INT 35
51531: PPUSH
51532: CALL_OW 67
// time = time - 0 0$1 ;
51536: LD_ADDR_VAR 0 3
51540: PUSH
51541: LD_VAR 0 3
51545: PUSH
51546: LD_INT 35
51548: MINUS
51549: ST_TO_ADDR
// until time <= 0 0$0 or not 3 in ai_bases ;
51550: LD_VAR 0 3
51554: PUSH
51555: LD_INT 0
51557: LESSEQUAL
51558: PUSH
51559: LD_INT 3
51561: PUSH
51562: LD_EXP 59
51566: IN
51567: NOT
51568: OR
51569: IFFALSE 51529
// if difficulty <= 2 and 3 in ai_bases then
51571: LD_OWVAR 67
51575: PUSH
51576: LD_INT 2
51578: LESSEQUAL
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: LD_EXP 59
51587: IN
51588: AND
51589: IFFALSE 51598
// wait ( 4 4$0 ) ;
51591: LD_INT 8400
51593: PPUSH
51594: CALL_OW 67
// if difficulty = 1 and 3 in ai_bases then
51598: LD_OWVAR 67
51602: PUSH
51603: LD_INT 1
51605: EQUAL
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: LD_EXP 59
51614: IN
51615: AND
51616: IFFALSE 51625
// wait ( 4 4$0 ) ;
51618: LD_INT 8400
51620: PPUSH
51621: CALL_OW 67
// while ( ai_vehicles_attack [ 3 ] > 0 or ai_attacking_scientists [ 3 ] > 0 or ai_attacking_soldiers [ 3 ] > 0 ) and russian_attack_strategy <> 1 and 3 in ai_bases do
51625: LD_EXP 41
51629: PUSH
51630: LD_INT 3
51632: ARRAY
51633: PUSH
51634: LD_INT 0
51636: GREATER
51637: PUSH
51638: LD_EXP 65
51642: PUSH
51643: LD_INT 3
51645: ARRAY
51646: PUSH
51647: LD_INT 0
51649: GREATER
51650: OR
51651: PUSH
51652: LD_EXP 64
51656: PUSH
51657: LD_INT 3
51659: ARRAY
51660: PUSH
51661: LD_INT 0
51663: GREATER
51664: OR
51665: PUSH
51666: LD_EXP 84
51670: PUSH
51671: LD_INT 1
51673: NONEQUAL
51674: AND
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: LD_EXP 59
51683: IN
51684: AND
51685: IFFALSE 51696
// wait ( 0 0$2 ) ;
51687: LD_INT 70
51689: PPUSH
51690: CALL_OW 67
51694: GO 51625
// if PlayerAtEasternBorder then
51696: CALL 31921 0 0
51700: IFFALSE 51799
// begin hex_list_before = [ [ 148 , 99 ] , [ 153 , 99 ] ] ;
51702: LD_ADDR_VAR 0 5
51706: PUSH
51707: LD_INT 148
51709: PUSH
51710: LD_INT 99
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 153
51719: PUSH
51720: LD_INT 99
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: ST_TO_ADDR
// hex = [ 145 , 58 ] ;
51731: LD_ADDR_VAR 0 2
51735: PUSH
51736: LD_INT 145
51738: PUSH
51739: LD_INT 58
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: ST_TO_ADDR
// hex_list_after = [ [ 140 , 104 ] , [ 126 , 91 ] , [ 123 , 71 ] , [ 118 , 59 ] ] ;
51746: LD_ADDR_VAR 0 6
51750: PUSH
51751: LD_INT 140
51753: PUSH
51754: LD_INT 104
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 126
51763: PUSH
51764: LD_INT 91
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 123
51773: PUSH
51774: LD_INT 71
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 118
51783: PUSH
51784: LD_INT 59
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: ST_TO_ADDR
// end else
51797: GO 52049
// begin hex_list_before = [ [ 134 , 107 ] , [ 121 , 99 ] ] ;
51799: LD_ADDR_VAR 0 5
51803: PUSH
51804: LD_INT 134
51806: PUSH
51807: LD_INT 107
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 121
51816: PUSH
51817: LD_INT 99
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: ST_TO_ADDR
// hex = [ 99 , 108 ] ;
51828: LD_ADDR_VAR 0 2
51832: PUSH
51833: LD_INT 99
51835: PUSH
51836: LD_INT 108
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: ST_TO_ADDR
// hex_list_after = [ [ 122 , 80 ] ] ;
51843: LD_ADDR_VAR 0 6
51847: PUSH
51848: LD_INT 122
51850: PUSH
51851: LD_INT 80
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: ST_TO_ADDR
// case difficulty of 1 :
51861: LD_OWVAR 67
51865: PUSH
51866: LD_INT 1
51868: DOUBLE
51869: EQUAL
51870: IFTRUE 51874
51872: GO 51934
51874: POP
// hex_list_after = hex_list_after ^ [ [ 143 , 77 ] , [ 143 , 52 ] , [ 134 , 42 ] , [ 115 , 39 ] ] ; 2 :
51875: LD_ADDR_VAR 0 6
51879: PUSH
51880: LD_VAR 0 6
51884: PUSH
51885: LD_INT 143
51887: PUSH
51888: LD_INT 77
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 143
51897: PUSH
51898: LD_INT 52
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 134
51907: PUSH
51908: LD_INT 42
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 115
51917: PUSH
51918: LD_INT 39
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: ADD
51931: ST_TO_ADDR
51932: GO 52049
51934: LD_INT 2
51936: DOUBLE
51937: EQUAL
51938: IFTRUE 51942
51940: GO 52002
51942: POP
// hex_list_after = hex_list_after ^ [ [ 143 , 77 ] , [ 134 , 70 ] , [ 124 , 66 ] , [ 118 , 59 ] ] ; 3 :
51943: LD_ADDR_VAR 0 6
51947: PUSH
51948: LD_VAR 0 6
51952: PUSH
51953: LD_INT 143
51955: PUSH
51956: LD_INT 77
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 134
51965: PUSH
51966: LD_INT 70
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 124
51975: PUSH
51976: LD_INT 66
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 118
51985: PUSH
51986: LD_INT 59
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: ADD
51999: ST_TO_ADDR
52000: GO 52049
52002: LD_INT 3
52004: DOUBLE
52005: EQUAL
52006: IFTRUE 52010
52008: GO 52048
52010: POP
// hex_list_after = hex_list_after ^ [ [ 123 , 71 ] , [ 118 , 59 ] ] ; end ;
52011: LD_ADDR_VAR 0 6
52015: PUSH
52016: LD_VAR 0 6
52020: PUSH
52021: LD_INT 123
52023: PUSH
52024: LD_INT 71
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 118
52033: PUSH
52034: LD_INT 59
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: ADD
52045: ST_TO_ADDR
52046: GO 52049
52048: POP
// end ; temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52049: LD_ADDR_VAR 0 1
52053: PUSH
52054: LD_INT 22
52056: PUSH
52057: LD_EXP 3
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 30
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 30
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PPUSH
52098: CALL_OW 69
52102: ST_TO_ADDR
// if temp_list > 0 then
52103: LD_VAR 0 1
52107: PUSH
52108: LD_INT 0
52110: GREATER
52111: IFFALSE 52161
// hex_list_before = hex_list_before ^ [ [ GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ] ] else
52113: LD_ADDR_VAR 0 5
52117: PUSH
52118: LD_VAR 0 5
52122: PUSH
52123: LD_VAR 0 1
52127: PUSH
52128: LD_INT 1
52130: ARRAY
52131: PPUSH
52132: CALL_OW 250
52136: PUSH
52137: LD_VAR 0 1
52141: PUSH
52142: LD_INT 1
52144: ARRAY
52145: PPUSH
52146: CALL_OW 251
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: EMPTY
52156: LIST
52157: ADD
52158: ST_TO_ADDR
52159: GO 52180
// hex_list_before = hex_list_before ^ [ hex ] ;
52161: LD_ADDR_VAR 0 5
52165: PUSH
52166: LD_VAR 0 5
52170: PUSH
52171: LD_VAR 0 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: ADD
52179: ST_TO_ADDR
// SetDir ( Cornell , 5 ) ;
52180: LD_EXP 26
52184: PPUSH
52185: LD_INT 5
52187: PPUSH
52188: CALL_OW 233
// SetLives ( Cornell , [ 400 , 450 , 500 ] [ difficulty ] ) ;
52192: LD_EXP 26
52196: PPUSH
52197: LD_INT 400
52199: PUSH
52200: LD_INT 450
52202: PUSH
52203: LD_INT 500
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: PUSH
52211: LD_OWVAR 67
52215: ARRAY
52216: PPUSH
52217: CALL_OW 234
// while not PlaceUnitXYR ( Cornell , 146 , 117 , 1 , false ) do
52221: LD_EXP 26
52225: PPUSH
52226: LD_INT 146
52228: PPUSH
52229: LD_INT 117
52231: PPUSH
52232: LD_INT 1
52234: PPUSH
52235: LD_INT 0
52237: PPUSH
52238: CALL_OW 50
52242: NOT
52243: IFFALSE 52254
// wait ( 0 0$2 ) ;
52245: LD_INT 70
52247: PPUSH
52248: CALL_OW 67
52252: GO 52221
// hex = 1 ;
52254: LD_ADDR_VAR 0 2
52258: PUSH
52259: LD_INT 1
52261: ST_TO_ADDR
// time = 1 1$0 ;
52262: LD_ADDR_VAR 0 3
52266: PUSH
52267: LD_INT 2100
52269: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
52270: LD_INT 18
52272: PPUSH
52273: CALL_OW 67
// if GetDistUnitXY ( Cornell , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) > 2 then
52277: LD_EXP 26
52281: PPUSH
52282: LD_VAR 0 5
52286: PUSH
52287: LD_VAR 0 2
52291: ARRAY
52292: PUSH
52293: LD_INT 1
52295: ARRAY
52296: PPUSH
52297: LD_VAR 0 5
52301: PUSH
52302: LD_VAR 0 2
52306: ARRAY
52307: PUSH
52308: LD_INT 2
52310: ARRAY
52311: PPUSH
52312: CALL_OW 297
52316: PUSH
52317: LD_INT 2
52319: GREATER
52320: IFFALSE 52363
// ComMoveXY ( Cornell , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
52322: LD_EXP 26
52326: PPUSH
52327: LD_VAR 0 5
52331: PUSH
52332: LD_VAR 0 2
52336: ARRAY
52337: PUSH
52338: LD_INT 1
52340: ARRAY
52341: PPUSH
52342: LD_VAR 0 5
52346: PUSH
52347: LD_VAR 0 2
52351: ARRAY
52352: PUSH
52353: LD_INT 2
52355: ARRAY
52356: PPUSH
52357: CALL_OW 111
52361: GO 52424
// if hex < hex_list_before then
52363: LD_VAR 0 2
52367: PUSH
52368: LD_VAR 0 5
52372: LESS
52373: IFFALSE 52391
// hex = hex + 1 else
52375: LD_ADDR_VAR 0 2
52379: PUSH
52380: LD_VAR 0 2
52384: PUSH
52385: LD_INT 1
52387: PLUS
52388: ST_TO_ADDR
52389: GO 52424
// begin time = time - 0 0$0.5 ;
52391: LD_ADDR_VAR 0 3
52395: PUSH
52396: LD_VAR 0 3
52400: PUSH
52401: LD_INT 18
52403: MINUS
52404: ST_TO_ADDR
// if time <= 0 0$0 then
52405: LD_VAR 0 3
52409: PUSH
52410: LD_INT 0
52412: LESSEQUAL
52413: IFFALSE 52424
// KillUnit ( Cornell ) ;
52415: LD_EXP 26
52419: PPUSH
52420: CALL_OW 66
// end ; until ( See ( you , Cornell ) and FilterAllUnits ( [ [ f_side , you ] , [ f_see , americans_alt ] ] ) > 0 ) or IsDead ( Cornell ) ;
52424: LD_EXP 3
52428: PPUSH
52429: LD_EXP 26
52433: PPUSH
52434: CALL_OW 292
52438: PUSH
52439: LD_INT 22
52441: PUSH
52442: LD_EXP 3
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 101
52453: PUSH
52454: LD_EXP 9
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PPUSH
52467: CALL_OW 69
52471: PUSH
52472: LD_INT 0
52474: GREATER
52475: AND
52476: PUSH
52477: LD_EXP 26
52481: PPUSH
52482: CALL_OW 301
52486: OR
52487: IFFALSE 52270
// if See ( you , Cornell ) and FilterAllUnits ( [ [ f_side , you ] , [ f_see , americans_alt ] ] ) > 0 then
52489: LD_EXP 3
52493: PPUSH
52494: LD_EXP 26
52498: PPUSH
52499: CALL_OW 292
52503: PUSH
52504: LD_INT 22
52506: PUSH
52507: LD_EXP 3
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 101
52518: PUSH
52519: LD_EXP 9
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PPUSH
52532: CALL_OW 69
52536: PUSH
52537: LD_INT 0
52539: GREATER
52540: AND
52541: IFFALSE 52864
// begin CenterOnUnits ( Cornell ) ;
52543: LD_EXP 26
52547: PPUSH
52548: CALL_OW 85
// DialogueOn ;
52552: CALL_OW 6
// ForceSay ( Cornell , D5-Cor-1 ) ;
52556: LD_EXP 26
52560: PPUSH
52561: LD_STRING D5-Cor-1
52563: PPUSH
52564: CALL_OW 91
// ForceSay ( Heike , D5-H-1 ) ;
52568: LD_EXP 10
52572: PPUSH
52573: LD_STRING D5-H-1
52575: PPUSH
52576: CALL_OW 91
// DialogueOff ;
52580: CALL_OW 7
// hex = 1 ;
52584: LD_ADDR_VAR 0 2
52588: PUSH
52589: LD_INT 1
52591: ST_TO_ADDR
// repeat if GetDistUnitXY ( Cornell , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) > 3 then
52592: LD_EXP 26
52596: PPUSH
52597: LD_VAR 0 6
52601: PUSH
52602: LD_VAR 0 2
52606: ARRAY
52607: PUSH
52608: LD_INT 1
52610: ARRAY
52611: PPUSH
52612: LD_VAR 0 6
52616: PUSH
52617: LD_VAR 0 2
52621: ARRAY
52622: PUSH
52623: LD_INT 2
52625: ARRAY
52626: PPUSH
52627: CALL_OW 297
52631: PUSH
52632: LD_INT 3
52634: GREATER
52635: IFFALSE 52678
// ComMoveXY ( Cornell , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) else
52637: LD_EXP 26
52641: PPUSH
52642: LD_VAR 0 6
52646: PUSH
52647: LD_VAR 0 2
52651: ARRAY
52652: PUSH
52653: LD_INT 1
52655: ARRAY
52656: PPUSH
52657: LD_VAR 0 6
52661: PUSH
52662: LD_VAR 0 2
52666: ARRAY
52667: PUSH
52668: LD_INT 2
52670: ARRAY
52671: PPUSH
52672: CALL_OW 111
52676: GO 52704
// if hex < hex_list_after then
52678: LD_VAR 0 2
52682: PUSH
52683: LD_VAR 0 6
52687: LESS
52688: IFFALSE 52704
// hex = hex + 1 ;
52690: LD_ADDR_VAR 0 2
52694: PUSH
52695: LD_VAR 0 2
52699: PUSH
52700: LD_INT 1
52702: PLUS
52703: ST_TO_ADDR
// wait ( 0 0$0.5 ) ;
52704: LD_INT 18
52706: PPUSH
52707: CALL_OW 67
// until IsDead ( Cornell ) or ( See ( americans , Cornell ) and FilterAllUnits ( [ [ f_side , americans ] , [ f_see , americans_alt ] ] ) > 0 ) ;
52711: LD_EXP 26
52715: PPUSH
52716: CALL_OW 301
52720: PUSH
52721: LD_EXP 7
52725: PPUSH
52726: LD_EXP 26
52730: PPUSH
52731: CALL_OW 292
52735: PUSH
52736: LD_INT 22
52738: PUSH
52739: LD_EXP 7
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 101
52750: PUSH
52751: LD_EXP 9
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PPUSH
52764: CALL_OW 69
52768: PUSH
52769: LD_INT 0
52771: GREATER
52772: AND
52773: OR
52774: IFFALSE 52592
// if See ( americans , Cornell ) and FilterAllUnits ( [ [ f_side , americans ] , [ f_see , americans_alt ] ] ) > 0 then
52776: LD_EXP 7
52780: PPUSH
52781: LD_EXP 26
52785: PPUSH
52786: CALL_OW 292
52790: PUSH
52791: LD_INT 22
52793: PUSH
52794: LD_EXP 7
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 101
52805: PUSH
52806: LD_EXP 9
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PPUSH
52819: CALL_OW 69
52823: PUSH
52824: LD_INT 0
52826: GREATER
52827: AND
52828: IFFALSE 52864
// begin DialogueOn ;
52830: CALL_OW 6
// SayRadio ( Simms , D4-Sim-2 ) ;
52834: LD_EXP 25
52838: PPUSH
52839: LD_STRING D4-Sim-2
52841: PPUSH
52842: CALL_OW 94
// dwait ( 0 0$0.5 ) ;
52846: LD_INT 18
52848: PPUSH
52849: CALL_OW 68
// YouLost ( PlayerSeen ) ;
52853: LD_STRING PlayerSeen
52855: PPUSH
52856: CALL_OW 104
// DialogueOff ;
52860: CALL_OW 7
// end ; end ; time = Rand ( 22 22$0 , 24 24$0 ) ;
52864: LD_ADDR_VAR 0 3
52868: PUSH
52869: LD_INT 46200
52871: PPUSH
52872: LD_INT 50400
52874: PPUSH
52875: CALL_OW 12
52879: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52880: LD_INT 35
52882: PPUSH
52883: CALL_OW 67
// time = time - 0 0$1 ;
52887: LD_ADDR_VAR 0 3
52891: PUSH
52892: LD_VAR 0 3
52896: PUSH
52897: LD_INT 35
52899: MINUS
52900: ST_TO_ADDR
// until time <= 0 0$0 or not 3 in ai_bases ;
52901: LD_VAR 0 3
52905: PUSH
52906: LD_INT 0
52908: LESSEQUAL
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: LD_EXP 59
52917: IN
52918: NOT
52919: OR
52920: IFFALSE 52880
// DialogueOn ;
52922: CALL_OW 6
// SayRadio ( Gensher , D8-Ge-1 ) ;
52926: LD_EXP 24
52930: PPUSH
52931: LD_STRING D8-Ge-1
52933: PPUSH
52934: CALL_OW 94
// DialogueOff ;
52938: CALL_OW 7
// wait ( 0 0$0.2 ) ;
52942: LD_INT 7
52944: PPUSH
52945: CALL_OW 67
// time = 8 8$0 ;
52949: LD_ADDR_VAR 0 3
52953: PUSH
52954: LD_INT 16800
52956: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = tick + time + 1 1$0 ;
52957: LD_ADDR_EXP 94
52961: PUSH
52962: LD_OWVAR 1
52966: PUSH
52967: LD_VAR 0 3
52971: PLUS
52972: PUSH
52973: LD_INT 2100
52975: PLUS
52976: ST_TO_ADDR
// repeat display_strings = [ #Ar11-GensherCountdown , time ] ;
52977: LD_ADDR_OWVAR 47
52981: PUSH
52982: LD_STRING #Ar11-GensherCountdown
52984: PUSH
52985: LD_VAR 0 3
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: ST_TO_ADDR
// time = time - 0 0$1 ;
52994: LD_ADDR_VAR 0 3
52998: PUSH
52999: LD_VAR 0 3
53003: PUSH
53004: LD_INT 35
53006: MINUS
53007: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53008: LD_INT 35
53010: PPUSH
53011: CALL_OW 67
// until time <= 0 0$0 ;
53015: LD_VAR 0 3
53019: PUSH
53020: LD_INT 0
53022: LESSEQUAL
53023: IFFALSE 52977
// display_strings = [ ] ;
53025: LD_ADDR_OWVAR 47
53029: PUSH
53030: EMPTY
53031: ST_TO_ADDR
// game_phase = 2 ;
53032: LD_ADDR_EXP 89
53036: PUSH
53037: LD_INT 2
53039: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
53040: LD_STRING M3
53042: PPUSH
53043: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , americans ] ) do
53047: LD_ADDR_VAR 0 4
53051: PUSH
53052: LD_INT 22
53054: PUSH
53055: LD_EXP 7
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PPUSH
53064: CALL_OW 69
53068: PUSH
53069: FOR_IN
53070: IFFALSE 53088
// NormalAttack ( you , i ) ;
53072: LD_EXP 3
53076: PPUSH
53077: LD_VAR 0 4
53081: PPUSH
53082: CALL_OW 472
53086: GO 53069
53088: POP
53089: POP
// end ;
53090: PPOPN 6
53092: END
// every 0 0$1 do var i ;
53093: GO 53095
53095: DISABLE
53096: LD_INT 0
53098: PPUSH
// begin repeat wait ( 0 0$1 ) ;
53099: LD_INT 35
53101: PPUSH
53102: CALL_OW 67
// if game_phase > 1 then
53106: LD_EXP 89
53110: PUSH
53111: LD_INT 1
53113: GREATER
53114: IFFALSE 53118
// exit ;
53116: GO 53246
// for i in FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
53118: LD_ADDR_VAR 0 1
53122: PUSH
53123: LD_INT 22
53125: PUSH
53126: LD_EXP 3
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: LD_INT 21
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 21
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: LIST
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PPUSH
53167: CALL_OW 69
53171: PUSH
53172: FOR_IN
53173: IFFALSE 53240
// if GetDistUnitArea ( i , Gensher_base ) <= 9 then
53175: LD_VAR 0 1
53179: PPUSH
53180: LD_INT 7
53182: PPUSH
53183: CALL_OW 299
53187: PUSH
53188: LD_INT 9
53190: LESSEQUAL
53191: IFFALSE 53238
// begin CenterOnUnits ( i ) ;
53193: LD_VAR 0 1
53197: PPUSH
53198: CALL_OW 85
// DialogueOn ;
53202: CALL_OW 6
// Say ( Gensher , D12-Ge-1 ) ;
53206: LD_EXP 24
53210: PPUSH
53211: LD_STRING D12-Ge-1
53213: PPUSH
53214: CALL_OW 88
// ForceSay ( Heike , D12-H-1 ) ;
53218: LD_EXP 10
53222: PPUSH
53223: LD_STRING D12-H-1
53225: PPUSH
53226: CALL_OW 91
// DialogueOff ;
53230: CALL_OW 7
// exit ;
53234: POP
53235: POP
53236: GO 53246
// end ;
53238: GO 53172
53240: POP
53241: POP
// until false ;
53242: LD_INT 0
53244: IFFALSE 53099
// end ;
53246: PPOPN 1
53248: END
// every 0 0$1 + 0 0$0.8 trigger game_phase = 2 do var i , val , temp_list , k ; var un_list , scis_list , hex_list , hex , exit_hex , rand_hexes ; var attacking_units , american_base_hex ; var hex_status ;
53249: LD_EXP 89
53253: PUSH
53254: LD_INT 2
53256: EQUAL
53257: IFFALSE 54736
53259: GO 53261
53261: DISABLE
53262: LD_INT 0
53264: PPUSH
53265: PPUSH
53266: PPUSH
53267: PPUSH
53268: PPUSH
53269: PPUSH
53270: PPUSH
53271: PPUSH
53272: PPUSH
53273: PPUSH
53274: PPUSH
53275: PPUSH
53276: PPUSH
// begin ai_bases = ai_bases diff 2 ;
53277: LD_ADDR_EXP 59
53281: PUSH
53282: LD_EXP 59
53286: PUSH
53287: LD_INT 2
53289: DIFF
53290: ST_TO_ADDR
// hex = 1 ;
53291: LD_ADDR_VAR 0 8
53295: PUSH
53296: LD_INT 1
53298: ST_TO_ADDR
// hex_list = [ [ 75 , 23 ] , [ 76 , 36 ] , [ 78 , 43 ] , [ 79 , 51 ] , [ 81 , 61 ] , [ 84 , 71 ] , [ 90 , 81 ] , [ 97 , 88 ] , [ 105 , 93 ] , [ 113 , 95 ] , [ 119 , 92 ] , [ 122 , 87 ] , [ 123 , 79 ] , [ 132 , 82 ] , [ 141 , 88 ] , [ 160 , 104 ] , [ 168 , 109 ] ] ;
53299: LD_ADDR_VAR 0 7
53303: PUSH
53304: LD_INT 75
53306: PUSH
53307: LD_INT 23
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 76
53316: PUSH
53317: LD_INT 36
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 78
53326: PUSH
53327: LD_INT 43
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 79
53336: PUSH
53337: LD_INT 51
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 81
53346: PUSH
53347: LD_INT 61
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 84
53356: PUSH
53357: LD_INT 71
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 90
53366: PUSH
53367: LD_INT 81
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 97
53376: PUSH
53377: LD_INT 88
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 105
53386: PUSH
53387: LD_INT 93
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 113
53396: PUSH
53397: LD_INT 95
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 119
53406: PUSH
53407: LD_INT 92
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 122
53416: PUSH
53417: LD_INT 87
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 123
53426: PUSH
53427: LD_INT 79
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 132
53436: PUSH
53437: LD_INT 82
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 141
53446: PUSH
53447: LD_INT 88
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 160
53456: PUSH
53457: LD_INT 104
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 168
53466: PUSH
53467: LD_INT 109
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: ST_TO_ADDR
// exit_hex = [ 173 , 110 ] ;
53493: LD_ADDR_VAR 0 9
53497: PUSH
53498: LD_INT 173
53500: PUSH
53501: LD_INT 110
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: ST_TO_ADDR
// rand_hexes = [ ] ;
53508: LD_ADDR_VAR 0 10
53512: PUSH
53513: EMPTY
53514: ST_TO_ADDR
// american_base_hex = [ 113 , 36 ] ;
53515: LD_ADDR_VAR 0 12
53519: PUSH
53520: LD_INT 113
53522: PUSH
53523: LD_INT 36
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: ST_TO_ADDR
// attacking_units = [ ] ;
53530: LD_ADDR_VAR 0 11
53534: PUSH
53535: EMPTY
53536: ST_TO_ADDR
// attacking_units = FilterAllUnits ( [ [ f_placed ] , [ f_side , you_alt ] , [ f_type , unit_vehicle ] ] ) ;
53537: LD_ADDR_VAR 0 11
53541: PUSH
53542: LD_INT 52
53544: PUSH
53545: EMPTY
53546: LIST
53547: PUSH
53548: LD_INT 22
53550: PUSH
53551: LD_EXP 6
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 21
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: LIST
53574: PPUSH
53575: CALL_OW 69
53579: ST_TO_ADDR
// attacking_units = attacking_units ^ gensher_mortars ;
53580: LD_ADDR_VAR 0 11
53584: PUSH
53585: LD_VAR 0 11
53589: PUSH
53590: LD_EXP 100
53594: ADD
53595: ST_TO_ADDR
// SetAttitude ( you_alt , americans , att_enemy , false ) ;
53596: LD_EXP 6
53600: PPUSH
53601: LD_EXP 7
53605: PPUSH
53606: LD_INT 2
53608: PPUSH
53609: LD_INT 0
53611: PPUSH
53612: CALL_OW 80
// ComAgressiveMove ( attacking_units , american_base_hex [ 1 ] , american_base_hex [ 2 ] ) ;
53616: LD_VAR 0 11
53620: PPUSH
53621: LD_VAR 0 12
53625: PUSH
53626: LD_INT 1
53628: ARRAY
53629: PPUSH
53630: LD_VAR 0 12
53634: PUSH
53635: LD_INT 2
53637: ARRAY
53638: PPUSH
53639: CALL_OW 114
// un_list = original_gensher_people ^ Gensher ;
53643: LD_ADDR_VAR 0 5
53647: PUSH
53648: LD_EXP 83
53652: PUSH
53653: LD_EXP 24
53657: ADD
53658: ST_TO_ADDR
// un_list = un_list ^ gensher_bunker_apes ;
53659: LD_ADDR_VAR 0 5
53663: PUSH
53664: LD_VAR 0 5
53668: PUSH
53669: LD_EXP 99
53673: ADD
53674: ST_TO_ADDR
// scis_list = UnitFilter ( un_list , [ f_class , class_scientistic ] ) ;
53675: LD_ADDR_VAR 0 6
53679: PUSH
53680: LD_VAR 0 5
53684: PPUSH
53685: LD_INT 25
53687: PUSH
53688: LD_INT 4
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PPUSH
53695: CALL_OW 72
53699: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53700: LD_INT 35
53702: PPUSH
53703: CALL_OW 67
// val = true ;
53707: LD_ADDR_VAR 0 2
53711: PUSH
53712: LD_INT 1
53714: ST_TO_ADDR
// for i in un_list do
53715: LD_ADDR_VAR 0 1
53719: PUSH
53720: LD_VAR 0 5
53724: PUSH
53725: FOR_IN
53726: IFFALSE 53802
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
53728: LD_VAR 0 1
53732: PPUSH
53733: CALL_OW 310
53737: PPUSH
53738: CALL_OW 247
53742: PUSH
53743: LD_INT 2
53745: DOUBLE
53746: EQUAL
53747: IFTRUE 53751
53749: GO 53771
53751: POP
// begin ComExitVehicle ( i ) ;
53752: LD_VAR 0 1
53756: PPUSH
53757: CALL_OW 121
// val = false ;
53761: LD_ADDR_VAR 0 2
53765: PUSH
53766: LD_INT 0
53768: ST_TO_ADDR
// end ; unit_building :
53769: GO 53800
53771: LD_INT 3
53773: DOUBLE
53774: EQUAL
53775: IFTRUE 53779
53777: GO 53799
53779: POP
// begin ComExitBuilding ( i ) ;
53780: LD_VAR 0 1
53784: PPUSH
53785: CALL_OW 122
// val = false ;
53789: LD_ADDR_VAR 0 2
53793: PUSH
53794: LD_INT 0
53796: ST_TO_ADDR
// end ; end ;
53797: GO 53800
53799: POP
53800: GO 53725
53802: POP
53803: POP
// until val ;
53804: LD_VAR 0 2
53808: IFFALSE 53700
// for i in un_list do
53810: LD_ADDR_VAR 0 1
53814: PUSH
53815: LD_VAR 0 5
53819: PUSH
53820: FOR_IN
53821: IFFALSE 53856
// rand_hexes = Replace ( rand_hexes , i , hex_list [ hex ] ) ;
53823: LD_ADDR_VAR 0 10
53827: PUSH
53828: LD_VAR 0 10
53832: PPUSH
53833: LD_VAR 0 1
53837: PPUSH
53838: LD_VAR 0 7
53842: PUSH
53843: LD_VAR 0 8
53847: ARRAY
53848: PPUSH
53849: CALL_OW 1
53853: ST_TO_ADDR
53854: GO 53820
53856: POP
53857: POP
// repeat wait ( 0 0$0.3 ) ;
53858: LD_INT 10
53860: PPUSH
53861: CALL_OW 67
// un_list = UnitFilter ( un_list , [ f_alive ] ) ;
53865: LD_ADDR_VAR 0 5
53869: PUSH
53870: LD_VAR 0 5
53874: PPUSH
53875: LD_INT 51
53877: PUSH
53878: EMPTY
53879: LIST
53880: PPUSH
53881: CALL_OW 72
53885: ST_TO_ADDR
// scis_list = UnitFilter ( scis_list , [ f_alive ] ) ;
53886: LD_ADDR_VAR 0 6
53890: PUSH
53891: LD_VAR 0 6
53895: PPUSH
53896: LD_INT 51
53898: PUSH
53899: EMPTY
53900: LIST
53901: PPUSH
53902: CALL_OW 72
53906: ST_TO_ADDR
// temp_list = [ ] ;
53907: LD_ADDR_VAR 0 3
53911: PUSH
53912: EMPTY
53913: ST_TO_ADDR
// for i in un_list do
53914: LD_ADDR_VAR 0 1
53918: PUSH
53919: LD_VAR 0 5
53923: PUSH
53924: FOR_IN
53925: IFFALSE 53960
// if GetLives ( i ) <= 250 then
53927: LD_VAR 0 1
53931: PPUSH
53932: CALL_OW 256
53936: PUSH
53937: LD_INT 250
53939: LESSEQUAL
53940: IFFALSE 53958
// temp_list = temp_list ^ i ;
53942: LD_ADDR_VAR 0 3
53946: PUSH
53947: LD_VAR 0 3
53951: PUSH
53952: LD_VAR 0 1
53956: ADD
53957: ST_TO_ADDR
53958: GO 53924
53960: POP
53961: POP
// if temp_list > 0 and scis_list > 0 and UnitFilter ( un_list , [ f_lives , 501 ] ) > ( original_gensher_people + 1 ) div 2 then
53962: LD_VAR 0 3
53966: PUSH
53967: LD_INT 0
53969: GREATER
53970: PUSH
53971: LD_VAR 0 6
53975: PUSH
53976: LD_INT 0
53978: GREATER
53979: AND
53980: PUSH
53981: LD_VAR 0 5
53985: PPUSH
53986: LD_INT 24
53988: PUSH
53989: LD_INT 501
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PPUSH
53996: CALL_OW 72
54000: PUSH
54001: LD_EXP 83
54005: PUSH
54006: LD_INT 1
54008: PLUS
54009: PUSH
54010: LD_INT 2
54012: DIV
54013: GREATER
54014: AND
54015: IFFALSE 54138
// begin for i in scis_list do
54017: LD_ADDR_VAR 0 1
54021: PUSH
54022: LD_VAR 0 6
54026: PUSH
54027: FOR_IN
54028: IFFALSE 54050
// ComHeal ( i , temp_list [ 1 ] ) ;
54030: LD_VAR 0 1
54034: PPUSH
54035: LD_VAR 0 3
54039: PUSH
54040: LD_INT 1
54042: ARRAY
54043: PPUSH
54044: CALL_OW 128
54048: GO 54027
54050: POP
54051: POP
// for i in un_list diff scis_list do
54052: LD_ADDR_VAR 0 1
54056: PUSH
54057: LD_VAR 0 5
54061: PUSH
54062: LD_VAR 0 6
54066: DIFF
54067: PUSH
54068: FOR_IN
54069: IFFALSE 54134
// if GetDistUnits ( i , temp_list [ 1 ] ) > 4 then
54071: LD_VAR 0 1
54075: PPUSH
54076: LD_VAR 0 3
54080: PUSH
54081: LD_INT 1
54083: ARRAY
54084: PPUSH
54085: CALL_OW 296
54089: PUSH
54090: LD_INT 4
54092: GREATER
54093: IFFALSE 54132
// ComMoveXY ( i , GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ) ;
54095: LD_VAR 0 1
54099: PPUSH
54100: LD_VAR 0 3
54104: PUSH
54105: LD_INT 1
54107: ARRAY
54108: PPUSH
54109: CALL_OW 250
54113: PPUSH
54114: LD_VAR 0 3
54118: PUSH
54119: LD_INT 1
54121: ARRAY
54122: PPUSH
54123: CALL_OW 251
54127: PPUSH
54128: CALL_OW 111
54132: GO 54068
54134: POP
54135: POP
// end else
54136: GO 54704
// begin val = true ;
54138: LD_ADDR_VAR 0 2
54142: PUSH
54143: LD_INT 1
54145: ST_TO_ADDR
// for i in un_list do
54146: LD_ADDR_VAR 0 1
54150: PUSH
54151: LD_VAR 0 5
54155: PUSH
54156: FOR_IN
54157: IFFALSE 54477
// if hex <= hex_list then
54159: LD_VAR 0 8
54163: PUSH
54164: LD_VAR 0 7
54168: LESSEQUAL
54169: IFFALSE 54344
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 5 then
54171: LD_VAR 0 1
54175: PPUSH
54176: LD_VAR 0 10
54180: PUSH
54181: LD_VAR 0 1
54185: ARRAY
54186: PUSH
54187: LD_INT 1
54189: ARRAY
54190: PPUSH
54191: LD_VAR 0 10
54195: PUSH
54196: LD_VAR 0 1
54200: ARRAY
54201: PUSH
54202: LD_INT 2
54204: ARRAY
54205: PPUSH
54206: CALL_OW 297
54210: PUSH
54211: LD_INT 5
54213: GREATER
54214: IFFALSE 54342
// begin if logsenabled then
54216: LD_EXP 2
54220: IFFALSE 54295
// begin hex_status = HexInfo ( rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
54222: LD_ADDR_VAR 0 13
54226: PUSH
54227: LD_VAR 0 10
54231: PUSH
54232: LD_VAR 0 1
54236: ARRAY
54237: PUSH
54238: LD_INT 1
54240: ARRAY
54241: PPUSH
54242: LD_VAR 0 10
54246: PUSH
54247: LD_VAR 0 1
54251: ARRAY
54252: PUSH
54253: LD_INT 2
54255: ARRAY
54256: PPUSH
54257: CALL_OW 428
54261: ST_TO_ADDR
// display_strings = [ Hex at  , rand_hexes [ i ] ,  has status  , hex_status ] ;
54262: LD_ADDR_OWVAR 47
54266: PUSH
54267: LD_STRING Hex at 
54269: PUSH
54270: LD_VAR 0 10
54274: PUSH
54275: LD_VAR 0 1
54279: ARRAY
54280: PUSH
54281: LD_STRING  has status 
54283: PUSH
54284: LD_VAR 0 13
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: ST_TO_ADDR
// end ; ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
54295: LD_VAR 0 1
54299: PPUSH
54300: LD_VAR 0 10
54304: PUSH
54305: LD_VAR 0 1
54309: ARRAY
54310: PUSH
54311: LD_INT 1
54313: ARRAY
54314: PPUSH
54315: LD_VAR 0 10
54319: PUSH
54320: LD_VAR 0 1
54324: ARRAY
54325: PUSH
54326: LD_INT 2
54328: ARRAY
54329: PPUSH
54330: CALL_OW 111
// val = false ;
54334: LD_ADDR_VAR 0 2
54338: PUSH
54339: LD_INT 0
54341: ST_TO_ADDR
// end ; end else
54342: GO 54475
// if GetDistUnitXY ( i , exit_hex [ 1 ] , exit_hex [ 2 ] ) > 2 then
54344: LD_VAR 0 1
54348: PPUSH
54349: LD_VAR 0 9
54353: PUSH
54354: LD_INT 1
54356: ARRAY
54357: PPUSH
54358: LD_VAR 0 9
54362: PUSH
54363: LD_INT 2
54365: ARRAY
54366: PPUSH
54367: CALL_OW 297
54371: PUSH
54372: LD_INT 2
54374: GREATER
54375: IFFALSE 54406
// ComMoveXY ( i , exit_hex [ 1 ] , exit_hex [ 2 ] ) else
54377: LD_VAR 0 1
54381: PPUSH
54382: LD_VAR 0 9
54386: PUSH
54387: LD_INT 1
54389: ARRAY
54390: PPUSH
54391: LD_VAR 0 9
54395: PUSH
54396: LD_INT 2
54398: ARRAY
54399: PPUSH
54400: CALL_OW 111
54404: GO 54475
// begin if i <> Gensher then
54406: LD_VAR 0 1
54410: PUSH
54411: LD_EXP 24
54415: NONEQUAL
54416: IFFALSE 54434
// saved_gensher_people = saved_gensher_people ^ i ;
54418: LD_ADDR_EXP 95
54422: PUSH
54423: LD_EXP 95
54427: PUSH
54428: LD_VAR 0 1
54432: ADD
54433: ST_TO_ADDR
// un_list = un_list diff i ;
54434: LD_ADDR_VAR 0 5
54438: PUSH
54439: LD_VAR 0 5
54443: PUSH
54444: LD_VAR 0 1
54448: DIFF
54449: ST_TO_ADDR
// scis_list = scis_list diff i ;
54450: LD_ADDR_VAR 0 6
54454: PUSH
54455: LD_VAR 0 6
54459: PUSH
54460: LD_VAR 0 1
54464: DIFF
54465: ST_TO_ADDR
// RemoveUnit ( i ) ;
54466: LD_VAR 0 1
54470: PPUSH
54471: CALL_OW 64
// end ;
54475: GO 54156
54477: POP
54478: POP
// if val then
54479: LD_VAR 0 2
54483: IFFALSE 54704
// begin hex = hex + 1 ;
54485: LD_ADDR_VAR 0 8
54489: PUSH
54490: LD_VAR 0 8
54494: PUSH
54495: LD_INT 1
54497: PLUS
54498: ST_TO_ADDR
// if hex <= hex_list then
54499: LD_VAR 0 8
54503: PUSH
54504: LD_VAR 0 7
54508: LESSEQUAL
54509: IFFALSE 54704
// begin temp_list = [ ] ;
54511: LD_ADDR_VAR 0 3
54515: PUSH
54516: EMPTY
54517: ST_TO_ADDR
// for i in un_list do
54518: LD_ADDR_VAR 0 1
54522: PUSH
54523: LD_VAR 0 5
54527: PUSH
54528: FOR_IN
54529: IFFALSE 54702
// begin k = 0 ;
54531: LD_ADDR_VAR 0 4
54535: PUSH
54536: LD_INT 0
54538: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list [ hex ] [ 1 ] , hex_list [ hex ] [ 2 ] , 2 , false ) ;
54539: LD_ADDR_VAR 0 2
54543: PUSH
54544: LD_VAR 0 7
54548: PUSH
54549: LD_VAR 0 8
54553: ARRAY
54554: PUSH
54555: LD_INT 1
54557: ARRAY
54558: PPUSH
54559: LD_VAR 0 7
54563: PUSH
54564: LD_VAR 0 8
54568: ARRAY
54569: PUSH
54570: LD_INT 2
54572: ARRAY
54573: PPUSH
54574: LD_INT 2
54576: PPUSH
54577: LD_INT 0
54579: PPUSH
54580: CALL_OW 17
54584: ST_TO_ADDR
// k = k + 1 ;
54585: LD_ADDR_VAR 0 4
54589: PUSH
54590: LD_VAR 0 4
54594: PUSH
54595: LD_INT 1
54597: PLUS
54598: ST_TO_ADDR
// if ( not val in temp_list and HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 ) or k >= 10 then
54599: LD_VAR 0 2
54603: PUSH
54604: LD_VAR 0 3
54608: IN
54609: NOT
54610: PUSH
54611: LD_VAR 0 2
54615: PUSH
54616: LD_INT 1
54618: ARRAY
54619: PPUSH
54620: LD_VAR 0 2
54624: PUSH
54625: LD_INT 2
54627: ARRAY
54628: PPUSH
54629: CALL_OW 428
54633: PUSH
54634: LD_INT 0
54636: GREATEREQUAL
54637: AND
54638: PUSH
54639: LD_VAR 0 4
54643: PUSH
54644: LD_INT 10
54646: GREATEREQUAL
54647: OR
54648: IFFALSE 54696
// begin temp_list = temp_list ^ [ val ] ;
54650: LD_ADDR_VAR 0 3
54654: PUSH
54655: LD_VAR 0 3
54659: PUSH
54660: LD_VAR 0 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: ADD
54668: ST_TO_ADDR
// rand_hexes = Replace ( rand_hexes , i , val ) ;
54669: LD_ADDR_VAR 0 10
54673: PUSH
54674: LD_VAR 0 10
54678: PPUSH
54679: LD_VAR 0 1
54683: PPUSH
54684: LD_VAR 0 2
54688: PPUSH
54689: CALL_OW 1
54693: ST_TO_ADDR
// break ;
54694: GO 54700
// end ; until false ;
54696: LD_INT 0
54698: IFFALSE 54539
// end ;
54700: GO 54528
54702: POP
54703: POP
// end ; end ; end ; until un_list = 0 ;
54704: LD_VAR 0 5
54708: PUSH
54709: LD_INT 0
54711: EQUAL
54712: IFFALSE 53858
// wait ( 0 0$0.2 ) ;
54714: LD_INT 7
54716: PPUSH
54717: CALL_OW 67
// ChangeMissionObjectives ( M4 ) ;
54721: LD_STRING M4
54723: PPUSH
54724: CALL_OW 337
// game_phase = 3 ;
54728: LD_ADDR_EXP 89
54732: PUSH
54733: LD_INT 3
54735: ST_TO_ADDR
// end ;
54736: PPOPN 13
54738: END
// every 0 0$1 + 0 0$0.9 trigger game_phase = 2 do
54739: LD_EXP 89
54743: PUSH
54744: LD_INT 2
54746: EQUAL
54747: IFFALSE 54828
54749: GO 54751
54751: DISABLE
// begin wait ( [ 0 0$18 , 0 0$15 , 0 0$12 ] [ difficulty ] ) ;
54752: LD_INT 630
54754: PUSH
54755: LD_INT 525
54757: PUSH
54758: LD_INT 420
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: LIST
54765: PUSH
54766: LD_OWVAR 67
54770: ARRAY
54771: PPUSH
54772: CALL_OW 67
// DialogueOn ;
54776: CALL_OW 6
// SayRadio ( Simms , D8-Simm-1_v2 ) ;
54780: LD_EXP 25
54784: PPUSH
54785: LD_STRING D8-Simm-1_v2
54787: PPUSH
54788: CALL_OW 94
// SayRadio ( Powell , D8-Po-1 ) ;
54792: LD_EXP 29
54796: PPUSH
54797: LD_STRING D8-Po-1
54799: PPUSH
54800: CALL_OW 94
// DialogueOff ;
54804: CALL_OW 7
// SetAttitude ( americans , you_alt , att_enemy , true ) ;
54808: LD_EXP 7
54812: PPUSH
54813: LD_EXP 6
54817: PPUSH
54818: LD_INT 2
54820: PPUSH
54821: LD_INT 1
54823: PPUSH
54824: CALL_OW 80
// end ;
54828: END
// every 0 0$1 + 0 0$0.6 trigger GetAttitude ( americans , you_alt ) = att_enemy do var i , val ; var sniper_group_1 , sniper_group_2 , hex_list_1 , hex_list_2 , unit_hex , rand_hexes , k ;
54829: LD_EXP 7
54833: PPUSH
54834: LD_EXP 6
54838: PPUSH
54839: CALL_OW 81
54843: PUSH
54844: LD_INT 2
54846: EQUAL
54847: IFFALSE 56246
54849: GO 54851
54851: DISABLE
54852: LD_INT 0
54854: PPUSH
54855: PPUSH
54856: PPUSH
54857: PPUSH
54858: PPUSH
54859: PPUSH
54860: PPUSH
54861: PPUSH
54862: PPUSH
// begin sniper_group_1 = CreateUnitsWithClass ( difficulty , class_sniper , americans ) ;
54863: LD_ADDR_VAR 0 3
54867: PUSH
54868: LD_OWVAR 67
54872: PPUSH
54873: LD_INT 5
54875: PPUSH
54876: LD_EXP 7
54880: PPUSH
54881: CALL 9712 0 3
54885: ST_TO_ADDR
// sniper_group_2 = CreateUnitsWithClass ( difficulty , class_sniper , americans ) ;
54886: LD_ADDR_VAR 0 4
54890: PUSH
54891: LD_OWVAR 67
54895: PPUSH
54896: LD_INT 5
54898: PPUSH
54899: LD_EXP 7
54903: PPUSH
54904: CALL 9712 0 3
54908: ST_TO_ADDR
// for i in sniper_group_1 ^ sniper_group_2 do
54909: LD_ADDR_VAR 0 1
54913: PUSH
54914: LD_VAR 0 3
54918: PUSH
54919: LD_VAR 0 4
54923: ADD
54924: PUSH
54925: FOR_IN
54926: IFFALSE 54971
// PlaceUnitXYR ( i , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 7 , false ) ;
54928: LD_VAR 0 1
54932: PPUSH
54933: LD_EXP 42
54937: PUSH
54938: LD_INT 1
54940: ARRAY
54941: PUSH
54942: LD_INT 1
54944: ARRAY
54945: PPUSH
54946: LD_EXP 42
54950: PUSH
54951: LD_INT 1
54953: ARRAY
54954: PUSH
54955: LD_INT 2
54957: ARRAY
54958: PPUSH
54959: LD_INT 7
54961: PPUSH
54962: LD_INT 0
54964: PPUSH
54965: CALL_OW 50
54969: GO 54925
54971: POP
54972: POP
// unit_hex = [ ] ;
54973: LD_ADDR_VAR 0 7
54977: PUSH
54978: EMPTY
54979: ST_TO_ADDR
// for i in sniper_group_1 ^ sniper_group_2 do
54980: LD_ADDR_VAR 0 1
54984: PUSH
54985: LD_VAR 0 3
54989: PUSH
54990: LD_VAR 0 4
54994: ADD
54995: PUSH
54996: FOR_IN
54997: IFFALSE 55024
// unit_hex = Replace ( unit_hex , i , 1 ) ;
54999: LD_ADDR_VAR 0 7
55003: PUSH
55004: LD_VAR 0 7
55008: PPUSH
55009: LD_VAR 0 1
55013: PPUSH
55014: LD_INT 1
55016: PPUSH
55017: CALL_OW 1
55021: ST_TO_ADDR
55022: GO 54996
55024: POP
55025: POP
// if FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_inarea , player_base_1 ] ] ) > 0 then
55026: LD_INT 22
55028: PUSH
55029: LD_EXP 3
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: LD_INT 30
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 30
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 95
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: PPUSH
55081: CALL_OW 69
55085: PUSH
55086: LD_INT 0
55088: GREATER
55089: IFFALSE 55195
// begin hex_list_1 = [ [ 116 , 59 ] , [ 115 , 67 ] , [ 114 , 77 ] ] ;
55091: LD_ADDR_VAR 0 5
55095: PUSH
55096: LD_INT 116
55098: PUSH
55099: LD_INT 59
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 115
55108: PUSH
55109: LD_INT 67
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 114
55118: PUSH
55119: LD_INT 77
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// hex_list_2 = [ [ 116 , 59 ] , [ 124 , 77 ] , [ 123 , 86 ] , [ 135 , 96 ] , [ 128 , 87 ] ] ;
55131: LD_ADDR_VAR 0 6
55135: PUSH
55136: LD_INT 116
55138: PUSH
55139: LD_INT 59
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 124
55148: PUSH
55149: LD_INT 77
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 123
55158: PUSH
55159: LD_INT 86
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 135
55168: PUSH
55169: LD_INT 96
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 128
55178: PUSH
55179: LD_INT 87
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: ST_TO_ADDR
// end else
55193: GO 55286
// begin hex_list_1 = [ [ 116 , 59 ] , [ 117 , 66 ] , [ 116 , 72 ] ] ;
55195: LD_ADDR_VAR 0 5
55199: PUSH
55200: LD_INT 116
55202: PUSH
55203: LD_INT 59
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 117
55212: PUSH
55213: LD_INT 66
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 116
55222: PUSH
55223: LD_INT 72
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: ST_TO_ADDR
// hex_list_2 = [ [ 116 , 59 ] , [ 134 , 69 ] , [ 150 , 82 ] , [ 157 , 98 ] ] ;
55235: LD_ADDR_VAR 0 6
55239: PUSH
55240: LD_INT 116
55242: PUSH
55243: LD_INT 59
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 134
55252: PUSH
55253: LD_INT 69
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 150
55262: PUSH
55263: LD_INT 82
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 157
55272: PUSH
55273: LD_INT 98
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: ST_TO_ADDR
// end ; rand_hexes = [ ] ;
55286: LD_ADDR_VAR 0 8
55290: PUSH
55291: EMPTY
55292: ST_TO_ADDR
// for i in sniper_group_1 do
55293: LD_ADDR_VAR 0 1
55297: PUSH
55298: LD_VAR 0 3
55302: PUSH
55303: FOR_IN
55304: IFFALSE 55337
// rand_hexes = Replace ( rand_hexes , i , hex_list_1 [ 1 ] ) ;
55306: LD_ADDR_VAR 0 8
55310: PUSH
55311: LD_VAR 0 8
55315: PPUSH
55316: LD_VAR 0 1
55320: PPUSH
55321: LD_VAR 0 5
55325: PUSH
55326: LD_INT 1
55328: ARRAY
55329: PPUSH
55330: CALL_OW 1
55334: ST_TO_ADDR
55335: GO 55303
55337: POP
55338: POP
// for i in sniper_group_2 do
55339: LD_ADDR_VAR 0 1
55343: PUSH
55344: LD_VAR 0 4
55348: PUSH
55349: FOR_IN
55350: IFFALSE 55383
// rand_hexes = Replace ( rand_hexes , i , hex_list_2 [ 1 ] ) ;
55352: LD_ADDR_VAR 0 8
55356: PUSH
55357: LD_VAR 0 8
55361: PPUSH
55362: LD_VAR 0 1
55366: PPUSH
55367: LD_VAR 0 6
55371: PUSH
55372: LD_INT 1
55374: ARRAY
55375: PPUSH
55376: CALL_OW 1
55380: ST_TO_ADDR
55381: GO 55349
55383: POP
55384: POP
// repeat wait ( 0 0$1 ) ;
55385: LD_INT 35
55387: PPUSH
55388: CALL_OW 67
// sniper_group_1 = UnitFilter ( sniper_group_1 , [ f_ok ] ) ;
55392: LD_ADDR_VAR 0 3
55396: PUSH
55397: LD_VAR 0 3
55401: PPUSH
55402: LD_INT 50
55404: PUSH
55405: EMPTY
55406: LIST
55407: PPUSH
55408: CALL_OW 72
55412: ST_TO_ADDR
// sniper_group_2 = UnitFilter ( sniper_group_2 , [ f_ok ] ) ;
55413: LD_ADDR_VAR 0 4
55417: PUSH
55418: LD_VAR 0 4
55422: PPUSH
55423: LD_INT 50
55425: PUSH
55426: EMPTY
55427: LIST
55428: PPUSH
55429: CALL_OW 72
55433: ST_TO_ADDR
// if sniper_group_1 = 0 and sniper_group_2 = 0 then
55434: LD_VAR 0 3
55438: PUSH
55439: LD_INT 0
55441: EQUAL
55442: PUSH
55443: LD_VAR 0 4
55447: PUSH
55448: LD_INT 0
55450: EQUAL
55451: AND
55452: IFFALSE 55456
// exit ;
55454: GO 56246
// for i in sniper_group_1 do
55456: LD_ADDR_VAR 0 1
55460: PUSH
55461: LD_VAR 0 3
55465: PUSH
55466: FOR_IN
55467: IFFALSE 55847
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 2 then
55469: LD_VAR 0 1
55473: PPUSH
55474: LD_VAR 0 8
55478: PUSH
55479: LD_VAR 0 1
55483: ARRAY
55484: PUSH
55485: LD_INT 1
55487: ARRAY
55488: PPUSH
55489: LD_VAR 0 8
55493: PUSH
55494: LD_VAR 0 1
55498: ARRAY
55499: PUSH
55500: LD_INT 2
55502: ARRAY
55503: PPUSH
55504: CALL_OW 297
55508: PUSH
55509: LD_INT 2
55511: GREATER
55512: IFFALSE 55649
// begin if unit_hex [ i ] = hex_list_1 + 0 then
55514: LD_VAR 0 7
55518: PUSH
55519: LD_VAR 0 1
55523: ARRAY
55524: PUSH
55525: LD_VAR 0 5
55529: PUSH
55530: LD_INT 0
55532: PLUS
55533: EQUAL
55534: IFFALSE 55577
// ComAgressiveMove ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) else
55536: LD_VAR 0 1
55540: PPUSH
55541: LD_VAR 0 8
55545: PUSH
55546: LD_VAR 0 1
55550: ARRAY
55551: PUSH
55552: LD_INT 1
55554: ARRAY
55555: PPUSH
55556: LD_VAR 0 8
55560: PUSH
55561: LD_VAR 0 1
55565: ARRAY
55566: PUSH
55567: LD_INT 2
55569: ARRAY
55570: PPUSH
55571: CALL_OW 114
55575: GO 55616
// ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
55577: LD_VAR 0 1
55581: PPUSH
55582: LD_VAR 0 8
55586: PUSH
55587: LD_VAR 0 1
55591: ARRAY
55592: PUSH
55593: LD_INT 1
55595: ARRAY
55596: PPUSH
55597: LD_VAR 0 8
55601: PUSH
55602: LD_VAR 0 1
55606: ARRAY
55607: PUSH
55608: LD_INT 2
55610: ARRAY
55611: PPUSH
55612: CALL_OW 111
// if unit_hex [ i ] = hex_list_1 + 0 then
55616: LD_VAR 0 7
55620: PUSH
55621: LD_VAR 0 1
55625: ARRAY
55626: PUSH
55627: LD_VAR 0 5
55631: PUSH
55632: LD_INT 0
55634: PLUS
55635: EQUAL
55636: IFFALSE 55647
// AddComHold ( i ) ;
55638: LD_VAR 0 1
55642: PPUSH
55643: CALL_OW 200
// end else
55647: GO 55845
// if unit_hex [ i ] < hex_list_1 then
55649: LD_VAR 0 7
55653: PUSH
55654: LD_VAR 0 1
55658: ARRAY
55659: PUSH
55660: LD_VAR 0 5
55664: LESS
55665: IFFALSE 55845
// begin unit_hex = Replace ( unit_hex , i , unit_hex [ i ] + 1 ) ;
55667: LD_ADDR_VAR 0 7
55671: PUSH
55672: LD_VAR 0 7
55676: PPUSH
55677: LD_VAR 0 1
55681: PPUSH
55682: LD_VAR 0 7
55686: PUSH
55687: LD_VAR 0 1
55691: ARRAY
55692: PUSH
55693: LD_INT 1
55695: PLUS
55696: PPUSH
55697: CALL_OW 1
55701: ST_TO_ADDR
// k = 0 ;
55702: LD_ADDR_VAR 0 9
55706: PUSH
55707: LD_INT 0
55709: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list_1 [ unit_hex [ i ] ] [ 1 ] , hex_list_1 [ unit_hex [ i ] ] [ 2 ] , 1 , false ) ;
55710: LD_ADDR_VAR 0 2
55714: PUSH
55715: LD_VAR 0 5
55719: PUSH
55720: LD_VAR 0 7
55724: PUSH
55725: LD_VAR 0 1
55729: ARRAY
55730: ARRAY
55731: PUSH
55732: LD_INT 1
55734: ARRAY
55735: PPUSH
55736: LD_VAR 0 5
55740: PUSH
55741: LD_VAR 0 7
55745: PUSH
55746: LD_VAR 0 1
55750: ARRAY
55751: ARRAY
55752: PUSH
55753: LD_INT 2
55755: ARRAY
55756: PPUSH
55757: LD_INT 1
55759: PPUSH
55760: LD_INT 0
55762: PPUSH
55763: CALL_OW 17
55767: ST_TO_ADDR
// k = k + 1 ;
55768: LD_ADDR_VAR 0 9
55772: PUSH
55773: LD_VAR 0 9
55777: PUSH
55778: LD_INT 1
55780: PLUS
55781: ST_TO_ADDR
// until HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 or k >= 10 ;
55782: LD_VAR 0 2
55786: PUSH
55787: LD_INT 1
55789: ARRAY
55790: PPUSH
55791: LD_VAR 0 2
55795: PUSH
55796: LD_INT 2
55798: ARRAY
55799: PPUSH
55800: CALL_OW 428
55804: PUSH
55805: LD_INT 0
55807: GREATEREQUAL
55808: PUSH
55809: LD_VAR 0 9
55813: PUSH
55814: LD_INT 10
55816: GREATEREQUAL
55817: OR
55818: IFFALSE 55710
// rand_hexes = Replace ( rand_hexes , i , val ) ;
55820: LD_ADDR_VAR 0 8
55824: PUSH
55825: LD_VAR 0 8
55829: PPUSH
55830: LD_VAR 0 1
55834: PPUSH
55835: LD_VAR 0 2
55839: PPUSH
55840: CALL_OW 1
55844: ST_TO_ADDR
// end ; end ;
55845: GO 55466
55847: POP
55848: POP
// for i in sniper_group_2 do
55849: LD_ADDR_VAR 0 1
55853: PUSH
55854: LD_VAR 0 4
55858: PUSH
55859: FOR_IN
55860: IFFALSE 56240
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 2 then
55862: LD_VAR 0 1
55866: PPUSH
55867: LD_VAR 0 8
55871: PUSH
55872: LD_VAR 0 1
55876: ARRAY
55877: PUSH
55878: LD_INT 1
55880: ARRAY
55881: PPUSH
55882: LD_VAR 0 8
55886: PUSH
55887: LD_VAR 0 1
55891: ARRAY
55892: PUSH
55893: LD_INT 2
55895: ARRAY
55896: PPUSH
55897: CALL_OW 297
55901: PUSH
55902: LD_INT 2
55904: GREATER
55905: IFFALSE 56042
// begin if unit_hex [ i ] = hex_list_2 + 0 then
55907: LD_VAR 0 7
55911: PUSH
55912: LD_VAR 0 1
55916: ARRAY
55917: PUSH
55918: LD_VAR 0 6
55922: PUSH
55923: LD_INT 0
55925: PLUS
55926: EQUAL
55927: IFFALSE 55970
// ComAgressiveMove ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) else
55929: LD_VAR 0 1
55933: PPUSH
55934: LD_VAR 0 8
55938: PUSH
55939: LD_VAR 0 1
55943: ARRAY
55944: PUSH
55945: LD_INT 1
55947: ARRAY
55948: PPUSH
55949: LD_VAR 0 8
55953: PUSH
55954: LD_VAR 0 1
55958: ARRAY
55959: PUSH
55960: LD_INT 2
55962: ARRAY
55963: PPUSH
55964: CALL_OW 114
55968: GO 56009
// ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
55970: LD_VAR 0 1
55974: PPUSH
55975: LD_VAR 0 8
55979: PUSH
55980: LD_VAR 0 1
55984: ARRAY
55985: PUSH
55986: LD_INT 1
55988: ARRAY
55989: PPUSH
55990: LD_VAR 0 8
55994: PUSH
55995: LD_VAR 0 1
55999: ARRAY
56000: PUSH
56001: LD_INT 2
56003: ARRAY
56004: PPUSH
56005: CALL_OW 111
// if unit_hex [ i ] = hex_list_2 + 0 then
56009: LD_VAR 0 7
56013: PUSH
56014: LD_VAR 0 1
56018: ARRAY
56019: PUSH
56020: LD_VAR 0 6
56024: PUSH
56025: LD_INT 0
56027: PLUS
56028: EQUAL
56029: IFFALSE 56040
// AddComHold ( i ) ;
56031: LD_VAR 0 1
56035: PPUSH
56036: CALL_OW 200
// end else
56040: GO 56238
// if unit_hex [ i ] < hex_list_2 then
56042: LD_VAR 0 7
56046: PUSH
56047: LD_VAR 0 1
56051: ARRAY
56052: PUSH
56053: LD_VAR 0 6
56057: LESS
56058: IFFALSE 56238
// begin unit_hex = Replace ( unit_hex , i , unit_hex [ i ] + 1 ) ;
56060: LD_ADDR_VAR 0 7
56064: PUSH
56065: LD_VAR 0 7
56069: PPUSH
56070: LD_VAR 0 1
56074: PPUSH
56075: LD_VAR 0 7
56079: PUSH
56080: LD_VAR 0 1
56084: ARRAY
56085: PUSH
56086: LD_INT 1
56088: PLUS
56089: PPUSH
56090: CALL_OW 1
56094: ST_TO_ADDR
// k = 0 ;
56095: LD_ADDR_VAR 0 9
56099: PUSH
56100: LD_INT 0
56102: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list_2 [ unit_hex [ i ] ] [ 1 ] , hex_list_2 [ unit_hex [ i ] ] [ 2 ] , 1 , false ) ;
56103: LD_ADDR_VAR 0 2
56107: PUSH
56108: LD_VAR 0 6
56112: PUSH
56113: LD_VAR 0 7
56117: PUSH
56118: LD_VAR 0 1
56122: ARRAY
56123: ARRAY
56124: PUSH
56125: LD_INT 1
56127: ARRAY
56128: PPUSH
56129: LD_VAR 0 6
56133: PUSH
56134: LD_VAR 0 7
56138: PUSH
56139: LD_VAR 0 1
56143: ARRAY
56144: ARRAY
56145: PUSH
56146: LD_INT 2
56148: ARRAY
56149: PPUSH
56150: LD_INT 1
56152: PPUSH
56153: LD_INT 0
56155: PPUSH
56156: CALL_OW 17
56160: ST_TO_ADDR
// k = k + 1 ;
56161: LD_ADDR_VAR 0 9
56165: PUSH
56166: LD_VAR 0 9
56170: PUSH
56171: LD_INT 1
56173: PLUS
56174: ST_TO_ADDR
// until HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 or k >= 10 ;
56175: LD_VAR 0 2
56179: PUSH
56180: LD_INT 1
56182: ARRAY
56183: PPUSH
56184: LD_VAR 0 2
56188: PUSH
56189: LD_INT 2
56191: ARRAY
56192: PPUSH
56193: CALL_OW 428
56197: PUSH
56198: LD_INT 0
56200: GREATEREQUAL
56201: PUSH
56202: LD_VAR 0 9
56206: PUSH
56207: LD_INT 10
56209: GREATEREQUAL
56210: OR
56211: IFFALSE 56103
// rand_hexes = Replace ( rand_hexes , i , val ) ;
56213: LD_ADDR_VAR 0 8
56217: PUSH
56218: LD_VAR 0 8
56222: PPUSH
56223: LD_VAR 0 1
56227: PPUSH
56228: LD_VAR 0 2
56232: PPUSH
56233: CALL_OW 1
56237: ST_TO_ADDR
// end ; end ;
56238: GO 55859
56240: POP
56241: POP
// until false ;
56242: LD_INT 0
56244: IFFALSE 55385
// end ;
56246: PPOPN 9
56248: END
// every 0 0$1 + 0 0$0.9 trigger game_phase = 3 do var old_man , x , y , temp_list , dist ; var hex , hex_list_before , hex_list_after ;
56249: LD_EXP 89
56253: PUSH
56254: LD_INT 3
56256: EQUAL
56257: IFFALSE 57879
56259: GO 56261
56261: DISABLE
56262: LD_INT 0
56264: PPUSH
56265: PPUSH
56266: PPUSH
56267: PPUSH
56268: PPUSH
56269: PPUSH
56270: PPUSH
56271: PPUSH
// begin while ( ai_vehicles_attack [ 3 ] > 0 or ai_attacking_scientists [ 3 ] > 0 or ai_attacking_soldiers [ 3 ] > 0 ) and russian_attack_strategy <> 1 do
56272: LD_EXP 41
56276: PUSH
56277: LD_INT 3
56279: ARRAY
56280: PUSH
56281: LD_INT 0
56283: GREATER
56284: PUSH
56285: LD_EXP 65
56289: PUSH
56290: LD_INT 3
56292: ARRAY
56293: PUSH
56294: LD_INT 0
56296: GREATER
56297: OR
56298: PUSH
56299: LD_EXP 64
56303: PUSH
56304: LD_INT 3
56306: ARRAY
56307: PUSH
56308: LD_INT 0
56310: GREATER
56311: OR
56312: PUSH
56313: LD_EXP 84
56317: PUSH
56318: LD_INT 1
56320: NONEQUAL
56321: AND
56322: IFFALSE 56333
// wait ( 0 0$2 ) ;
56324: LD_INT 70
56326: PPUSH
56327: CALL_OW 67
56331: GO 56272
// if PlayerAtEasternBorder then
56333: CALL 31921 0 0
56337: IFFALSE 56399
// begin hex_list_before = [ [ 127 , 42 ] , [ 139 , 45 ] ] ;
56339: LD_ADDR_VAR 0 7
56343: PUSH
56344: LD_INT 127
56346: PUSH
56347: LD_INT 42
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 139
56356: PUSH
56357: LD_INT 45
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: ST_TO_ADDR
// hex_list_after = [ [ 139 , 45 ] , [ 138 , 39 ] ] ;
56368: LD_ADDR_VAR 0 8
56372: PUSH
56373: LD_INT 139
56375: PUSH
56376: LD_INT 45
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 138
56385: PUSH
56386: LD_INT 39
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: ST_TO_ADDR
// end else
56397: GO 56468
// begin hex_list_before = [ [ 119 , 55 ] , [ 124 , 73 ] , [ 121 , 86 ] ] ;
56399: LD_ADDR_VAR 0 7
56403: PUSH
56404: LD_INT 119
56406: PUSH
56407: LD_INT 55
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 124
56416: PUSH
56417: LD_INT 73
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 121
56426: PUSH
56427: LD_INT 86
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: ST_TO_ADDR
// hex_list_after = [ [ 121 , 99 ] , [ 141 , 118 ] ] ;
56439: LD_ADDR_VAR 0 8
56443: PUSH
56444: LD_INT 121
56446: PUSH
56447: LD_INT 99
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 141
56456: PUSH
56457: LD_INT 118
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: ST_TO_ADDR
// end ; temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56468: LD_ADDR_VAR 0 4
56472: PUSH
56473: LD_INT 22
56475: PUSH
56476: LD_EXP 3
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: LD_INT 30
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 30
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PPUSH
56517: CALL_OW 69
56521: ST_TO_ADDR
// if temp_list > 0 then
56522: LD_VAR 0 4
56526: PUSH
56527: LD_INT 0
56529: GREATER
56530: IFFALSE 56571
// hex = [ GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ] else
56532: LD_ADDR_VAR 0 6
56536: PUSH
56537: LD_VAR 0 4
56541: PUSH
56542: LD_INT 1
56544: ARRAY
56545: PPUSH
56546: CALL_OW 250
56550: PUSH
56551: LD_VAR 0 4
56555: PUSH
56556: LD_INT 1
56558: ARRAY
56559: PPUSH
56560: CALL_OW 251
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: ST_TO_ADDR
56569: GO 56609
// if PlayerAtEasternBorder then
56571: CALL 31921 0 0
56575: IFFALSE 56594
// hex = [ 144 , 65 ] else
56577: LD_ADDR_VAR 0 6
56581: PUSH
56582: LD_INT 144
56584: PUSH
56585: LD_INT 65
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: ST_TO_ADDR
56592: GO 56609
// hex = [ 99 , 110 ] ;
56594: LD_ADDR_VAR 0 6
56598: PUSH
56599: LD_INT 99
56601: PUSH
56602: LD_INT 110
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: ST_TO_ADDR
// hex_list_before = hex_list_before ^ [ hex ] ;
56609: LD_ADDR_VAR 0 7
56613: PUSH
56614: LD_VAR 0 7
56618: PUSH
56619: LD_VAR 0 6
56623: PUSH
56624: EMPTY
56625: LIST
56626: ADD
56627: ST_TO_ADDR
// SetDir ( Khattam , 5 ) ;
56628: LD_EXP 27
56632: PPUSH
56633: LD_INT 5
56635: PPUSH
56636: CALL_OW 233
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] , [ f_ok ] ] ) ;
56640: LD_ADDR_VAR 0 4
56644: PUSH
56645: LD_INT 22
56647: PUSH
56648: LD_EXP 7
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 30
56662: PUSH
56663: LD_INT 6
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 30
56672: PUSH
56673: LD_INT 7
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 30
56682: PUSH
56683: LD_INT 8
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 50
56698: PUSH
56699: EMPTY
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: PPUSH
56707: CALL_OW 69
56711: ST_TO_ADDR
// if temp_list > 0 then
56712: LD_VAR 0 4
56716: PUSH
56717: LD_INT 0
56719: GREATER
56720: IFFALSE 56848
// begin while not PlaceHumanInUnit ( Khattam , temp_list [ 1 ] ) do
56722: LD_EXP 27
56726: PPUSH
56727: LD_VAR 0 4
56731: PUSH
56732: LD_INT 1
56734: ARRAY
56735: PPUSH
56736: CALL_OW 52
56740: NOT
56741: IFFALSE 56846
// begin if not IsOk ( temp_list [ 1 ] ) or UnitsInside ( temp_list [ 1 ] ) + 0 = 6 then
56743: LD_VAR 0 4
56747: PUSH
56748: LD_INT 1
56750: ARRAY
56751: PPUSH
56752: CALL_OW 302
56756: NOT
56757: PUSH
56758: LD_VAR 0 4
56762: PUSH
56763: LD_INT 1
56765: ARRAY
56766: PPUSH
56767: CALL_OW 313
56771: PUSH
56772: LD_INT 0
56774: PLUS
56775: PUSH
56776: LD_INT 6
56778: EQUAL
56779: OR
56780: IFFALSE 56837
// begin while not PlaceUnitXYR ( Khattam , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 4 , false ) do
56782: LD_EXP 27
56786: PPUSH
56787: LD_EXP 42
56791: PUSH
56792: LD_INT 1
56794: ARRAY
56795: PUSH
56796: LD_INT 1
56798: ARRAY
56799: PPUSH
56800: LD_EXP 42
56804: PUSH
56805: LD_INT 1
56807: ARRAY
56808: PUSH
56809: LD_INT 2
56811: ARRAY
56812: PPUSH
56813: LD_INT 4
56815: PPUSH
56816: LD_INT 0
56818: PPUSH
56819: CALL_OW 50
56823: NOT
56824: IFFALSE 56835
// wait ( 0 0$2 ) ;
56826: LD_INT 70
56828: PPUSH
56829: CALL_OW 67
56833: GO 56782
// break ;
56835: GO 56846
// end ; wait ( 0 0$2 ) ;
56837: LD_INT 70
56839: PPUSH
56840: CALL_OW 67
// end ;
56844: GO 56722
// end else
56846: GO 56901
// begin while not PlaceUnitXYR ( Khattam , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 4 , false ) do
56848: LD_EXP 27
56852: PPUSH
56853: LD_EXP 42
56857: PUSH
56858: LD_INT 1
56860: ARRAY
56861: PUSH
56862: LD_INT 1
56864: ARRAY
56865: PPUSH
56866: LD_EXP 42
56870: PUSH
56871: LD_INT 1
56873: ARRAY
56874: PUSH
56875: LD_INT 2
56877: ARRAY
56878: PPUSH
56879: LD_INT 4
56881: PPUSH
56882: LD_INT 0
56884: PPUSH
56885: CALL_OW 50
56889: NOT
56890: IFFALSE 56901
// wait ( 0 0$2 ) ;
56892: LD_INT 70
56894: PPUSH
56895: CALL_OW 67
56899: GO 56848
// end ; SetAttitude ( you , americans_alt , att_neutral , true ) ;
56901: LD_EXP 3
56905: PPUSH
56906: LD_EXP 9
56910: PPUSH
56911: LD_INT 0
56913: PPUSH
56914: LD_INT 1
56916: PPUSH
56917: CALL_OW 80
// hex = 1 ;
56921: LD_ADDR_VAR 0 6
56925: PUSH
56926: LD_INT 1
56928: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56929: LD_INT 35
56931: PPUSH
56932: CALL_OW 67
// if GetDistUnitXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) > 3 then
56936: LD_EXP 27
56940: PPUSH
56941: LD_VAR 0 7
56945: PUSH
56946: LD_VAR 0 6
56950: ARRAY
56951: PUSH
56952: LD_INT 1
56954: ARRAY
56955: PPUSH
56956: LD_VAR 0 7
56960: PUSH
56961: LD_VAR 0 6
56965: ARRAY
56966: PUSH
56967: LD_INT 2
56969: ARRAY
56970: PPUSH
56971: CALL_OW 297
56975: PUSH
56976: LD_INT 3
56978: GREATER
56979: IFFALSE 57022
// ComMoveXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
56981: LD_EXP 27
56985: PPUSH
56986: LD_VAR 0 7
56990: PUSH
56991: LD_VAR 0 6
56995: ARRAY
56996: PUSH
56997: LD_INT 1
56999: ARRAY
57000: PPUSH
57001: LD_VAR 0 7
57005: PUSH
57006: LD_VAR 0 6
57010: ARRAY
57011: PUSH
57012: LD_INT 2
57014: ARRAY
57015: PPUSH
57016: CALL_OW 111
57020: GO 57048
// if hex < hex_list_before then
57022: LD_VAR 0 6
57026: PUSH
57027: LD_VAR 0 7
57031: LESS
57032: IFFALSE 57048
// hex = hex + 1 ;
57034: LD_ADDR_VAR 0 6
57038: PUSH
57039: LD_VAR 0 6
57043: PUSH
57044: LD_INT 1
57046: PLUS
57047: ST_TO_ADDR
// until See ( you , Khattam ) or IsDead ( Khattam ) ;
57048: LD_EXP 3
57052: PPUSH
57053: LD_EXP 27
57057: PPUSH
57058: CALL_OW 292
57062: PUSH
57063: LD_EXP 27
57067: PPUSH
57068: CALL_OW 301
57072: OR
57073: IFFALSE 56929
// if See ( you , Khattam ) then
57075: LD_EXP 3
57079: PPUSH
57080: LD_EXP 27
57084: PPUSH
57085: CALL_OW 292
57089: IFFALSE 57879
// begin CenterOnUnits ( Khattam ) ;
57091: LD_EXP 27
57095: PPUSH
57096: CALL_OW 85
// DialogueOn ;
57100: CALL_OW 6
// ForceSay ( Khattam , D9-Kh-1 ) ;
57104: LD_EXP 27
57108: PPUSH
57109: LD_STRING D9-Kh-1
57111: PPUSH
57112: CALL_OW 91
// if IsOk ( Oswald ) then
57116: LD_EXP 12
57120: PPUSH
57121: CALL_OW 302
57125: IFFALSE 57161
// begin if oswald_is_substitute then
57127: LD_EXP 81
57131: IFFALSE 57147
// Say ( Oswald , D9-Os_sub-1 ) else
57133: LD_EXP 12
57137: PPUSH
57138: LD_STRING D9-Os_sub-1
57140: PPUSH
57141: CALL_OW 88
57145: GO 57159
// Say ( Oswald , D9-Os-1 ) ;
57147: LD_EXP 12
57151: PPUSH
57152: LD_STRING D9-Os-1
57154: PPUSH
57155: CALL_OW 88
// end else
57159: GO 57173
// ForceSay ( Heike , D9-H-1 ) ;
57161: LD_EXP 10
57165: PPUSH
57166: LD_STRING D9-H-1
57168: PPUSH
57169: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-2 ) ;
57173: LD_EXP 27
57177: PPUSH
57178: LD_STRING D9-Kh-2
57180: PPUSH
57181: CALL_OW 91
// ForceSay ( Heike , D9-H-2 ) ;
57185: LD_EXP 10
57189: PPUSH
57190: LD_STRING D9-H-2
57192: PPUSH
57193: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-3 ) ;
57197: LD_EXP 27
57201: PPUSH
57202: LD_STRING D9-Kh-3
57204: PPUSH
57205: CALL_OW 91
// dwait ( 0 0$0.2 ) ;
57209: LD_INT 7
57211: PPUSH
57212: CALL_OW 68
// khattam_choice = Query ( QKhattamJoin ) ;
57216: LD_ADDR_EXP 96
57220: PUSH
57221: LD_STRING QKhattamJoin
57223: PPUSH
57224: CALL_OW 97
57228: ST_TO_ADDR
// case khattam_choice of 1 :
57229: LD_EXP 96
57233: PUSH
57234: LD_INT 1
57236: DOUBLE
57237: EQUAL
57238: IFTRUE 57242
57240: GO 57670
57242: POP
// begin ForceSay ( Heike , D9-H-1-1 ) ;
57243: LD_EXP 10
57247: PPUSH
57248: LD_STRING D9-H-1-1
57250: PPUSH
57251: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-1-1 ) ;
57255: LD_EXP 27
57259: PPUSH
57260: LD_STRING D9-Kh-1-1
57262: PPUSH
57263: CALL_OW 91
// DialogueOff ;
57267: CALL_OW 7
// SetAttitude ( you , americans_alt , att_friend , true ) ;
57271: LD_EXP 3
57275: PPUSH
57276: LD_EXP 9
57280: PPUSH
57281: LD_INT 1
57283: PPUSH
57284: LD_INT 1
57286: PPUSH
57287: CALL_OW 80
// while FilterAllUnits ( [ [ f_side , americans ] , [ f_ok ] , [ f_dist , Khattam , 17 ] ] ) > 0 do
57291: LD_INT 22
57293: PUSH
57294: LD_EXP 7
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 50
57305: PUSH
57306: EMPTY
57307: LIST
57308: PUSH
57309: LD_INT 91
57311: PUSH
57312: LD_EXP 27
57316: PUSH
57317: LD_INT 17
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: PPUSH
57330: CALL_OW 69
57334: PUSH
57335: LD_INT 0
57337: GREATER
57338: IFFALSE 57502
// begin dist = GetDistUnitXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) ;
57340: LD_ADDR_VAR 0 5
57344: PUSH
57345: LD_EXP 27
57349: PPUSH
57350: LD_VAR 0 7
57354: PUSH
57355: LD_VAR 0 6
57359: ARRAY
57360: PUSH
57361: LD_INT 1
57363: ARRAY
57364: PPUSH
57365: LD_VAR 0 7
57369: PUSH
57370: LD_VAR 0 6
57374: ARRAY
57375: PUSH
57376: LD_INT 2
57378: ARRAY
57379: PPUSH
57380: CALL_OW 297
57384: ST_TO_ADDR
// if not ( dist <= 3 or ( hex = hex_list_before + 0 and dist <= 7 ) ) then
57385: LD_VAR 0 5
57389: PUSH
57390: LD_INT 3
57392: LESSEQUAL
57393: PUSH
57394: LD_VAR 0 6
57398: PUSH
57399: LD_VAR 0 7
57403: PUSH
57404: LD_INT 0
57406: PLUS
57407: EQUAL
57408: PUSH
57409: LD_VAR 0 5
57413: PUSH
57414: LD_INT 7
57416: LESSEQUAL
57417: AND
57418: OR
57419: NOT
57420: IFFALSE 57463
// ComMoveXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
57422: LD_EXP 27
57426: PPUSH
57427: LD_VAR 0 7
57431: PUSH
57432: LD_VAR 0 6
57436: ARRAY
57437: PUSH
57438: LD_INT 1
57440: ARRAY
57441: PPUSH
57442: LD_VAR 0 7
57446: PUSH
57447: LD_VAR 0 6
57451: ARRAY
57452: PUSH
57453: LD_INT 2
57455: ARRAY
57456: PPUSH
57457: CALL_OW 111
57461: GO 57493
// if hex < hex_list_before then
57463: LD_VAR 0 6
57467: PUSH
57468: LD_VAR 0 7
57472: LESS
57473: IFFALSE 57491
// hex = hex + 1 else
57475: LD_ADDR_VAR 0 6
57479: PUSH
57480: LD_VAR 0 6
57484: PUSH
57485: LD_INT 1
57487: PLUS
57488: ST_TO_ADDR
57489: GO 57493
// break ;
57491: GO 57502
// wait ( 0 0$1 ) ;
57493: LD_INT 35
57495: PPUSH
57496: CALL_OW 67
// end ;
57500: GO 57291
// PrepareNewCharacter ( Khatam ) ;
57502: LD_STRING Khatam
57504: PPUSH
57505: CALL_OW 26
// uc_side = you ;
57509: LD_ADDR_OWVAR 20
57513: PUSH
57514: LD_EXP 3
57518: ST_TO_ADDR
// uc_nation = nation_american ;
57519: LD_ADDR_OWVAR 21
57523: PUSH
57524: LD_INT 1
57526: ST_TO_ADDR
// old_man = Khattam ;
57527: LD_ADDR_VAR 0 1
57531: PUSH
57532: LD_EXP 27
57536: ST_TO_ADDR
// Khattam = CreateHuman ;
57537: LD_ADDR_EXP 27
57541: PUSH
57542: CALL_OW 44
57546: ST_TO_ADDR
// hc_importance = 0 ;
57547: LD_ADDR_OWVAR 32
57551: PUSH
57552: LD_INT 0
57554: ST_TO_ADDR
// CopySkills ( old_man , Khattam ) ;
57555: LD_VAR 0 1
57559: PPUSH
57560: LD_EXP 27
57564: PPUSH
57565: CALL_OW 510
// x = GetX ( old_man ) ;
57569: LD_ADDR_VAR 0 2
57573: PUSH
57574: LD_VAR 0 1
57578: PPUSH
57579: CALL_OW 250
57583: ST_TO_ADDR
// y = GetY ( old_man ) ;
57584: LD_ADDR_VAR 0 3
57588: PUSH
57589: LD_VAR 0 1
57593: PPUSH
57594: CALL_OW 251
57598: ST_TO_ADDR
// SetDir ( Khattam , GetDir ( old_man ) ) ;
57599: LD_EXP 27
57603: PPUSH
57604: LD_VAR 0 1
57608: PPUSH
57609: CALL_OW 254
57613: PPUSH
57614: CALL_OW 233
// SetLives ( Khattam , GetLives ( old_man ) ) ;
57618: LD_EXP 27
57622: PPUSH
57623: LD_VAR 0 1
57627: PPUSH
57628: CALL_OW 256
57632: PPUSH
57633: CALL_OW 234
// RemoveUnit ( old_man ) ;
57637: LD_VAR 0 1
57641: PPUSH
57642: CALL_OW 64
// PlaceUnitXY ( Khattam , x , y , false ) ;
57646: LD_EXP 27
57650: PPUSH
57651: LD_VAR 0 2
57655: PPUSH
57656: LD_VAR 0 3
57660: PPUSH
57661: LD_INT 0
57663: PPUSH
57664: CALL_OW 48
// end ; 2 :
57668: GO 57710
57670: LD_INT 2
57672: DOUBLE
57673: EQUAL
57674: IFTRUE 57678
57676: GO 57709
57678: POP
// begin ForceSay ( Heike , D9-H-2-1 ) ;
57679: LD_EXP 10
57683: PPUSH
57684: LD_STRING D9-H-2-1
57686: PPUSH
57687: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-2-1 ) ;
57691: LD_EXP 27
57695: PPUSH
57696: LD_STRING D9-Kh-2-1
57698: PPUSH
57699: CALL_OW 91
// DialogueOff ;
57703: CALL_OW 7
// end ; end ;
57707: GO 57710
57709: POP
// ComStop ( Khattam ) ;
57710: LD_EXP 27
57714: PPUSH
57715: CALL_OW 141
// if khattam_choice = 2 then
57719: LD_EXP 96
57723: PUSH
57724: LD_INT 2
57726: EQUAL
57727: IFFALSE 57879
// begin hex = 1 ;
57729: LD_ADDR_VAR 0 6
57733: PUSH
57734: LD_INT 1
57736: ST_TO_ADDR
// repeat if GetDistUnitXY ( Khattam , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) > 3 then
57737: LD_EXP 27
57741: PPUSH
57742: LD_VAR 0 8
57746: PUSH
57747: LD_VAR 0 6
57751: ARRAY
57752: PUSH
57753: LD_INT 1
57755: ARRAY
57756: PPUSH
57757: LD_VAR 0 8
57761: PUSH
57762: LD_VAR 0 6
57766: ARRAY
57767: PUSH
57768: LD_INT 2
57770: ARRAY
57771: PPUSH
57772: CALL_OW 297
57776: PUSH
57777: LD_INT 3
57779: GREATER
57780: IFFALSE 57823
// ComMoveXY ( Khattam , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) else
57782: LD_EXP 27
57786: PPUSH
57787: LD_VAR 0 8
57791: PUSH
57792: LD_VAR 0 6
57796: ARRAY
57797: PUSH
57798: LD_INT 1
57800: ARRAY
57801: PPUSH
57802: LD_VAR 0 8
57806: PUSH
57807: LD_VAR 0 6
57811: ARRAY
57812: PUSH
57813: LD_INT 2
57815: ARRAY
57816: PPUSH
57817: CALL_OW 111
57821: GO 57860
// if hex < hex_list_after then
57823: LD_VAR 0 6
57827: PUSH
57828: LD_VAR 0 8
57832: LESS
57833: IFFALSE 57851
// hex = hex + 1 else
57835: LD_ADDR_VAR 0 6
57839: PUSH
57840: LD_VAR 0 6
57844: PUSH
57845: LD_INT 1
57847: PLUS
57848: ST_TO_ADDR
57849: GO 57860
// RemoveUnit ( Khattam ) ;
57851: LD_EXP 27
57855: PPUSH
57856: CALL_OW 64
// wait ( 0 0$1 ) ;
57860: LD_INT 35
57862: PPUSH
57863: CALL_OW 67
// until not IsPlaced ( Khattam ) ;
57867: LD_EXP 27
57871: PPUSH
57872: CALL_OW 305
57876: NOT
57877: IFFALSE 57737
// end ; end ; end ;
57879: PPOPN 8
57881: END
// every 0 0$1 + 0 0$0.8 trigger game_phase = 3 do var init_buildings , init_humans , temp_list , temp_unit ;
57882: LD_EXP 89
57886: PUSH
57887: LD_INT 3
57889: EQUAL
57890: IFFALSE 58463
57892: GO 57894
57894: DISABLE
57895: LD_INT 0
57897: PPUSH
57898: PPUSH
57899: PPUSH
57900: PPUSH
// begin init_buildings = GetAmBuildings ;
57901: LD_ADDR_VAR 0 1
57905: PUSH
57906: CALL 58466 0 0
57910: ST_TO_ADDR
// init_humans = GetAmHumans ;
57911: LD_ADDR_VAR 0 2
57915: PUSH
57916: CALL 58553 0 0
57920: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
57921: LD_INT 175
57923: PPUSH
57924: CALL_OW 67
// until init_buildings >= GetAmBuildings * 2 or init_humans >= GetAmHumans * 2 ;
57928: LD_VAR 0 1
57932: PUSH
57933: CALL 58466 0 0
57937: PUSH
57938: LD_INT 2
57940: MUL
57941: GREATEREQUAL
57942: PUSH
57943: LD_VAR 0 2
57947: PUSH
57948: CALL 58553 0 0
57952: PUSH
57953: LD_INT 2
57955: MUL
57956: GREATEREQUAL
57957: OR
57958: IFFALSE 57921
// DialogueOn ;
57960: CALL_OW 6
// SayRadio ( Simms , D10-Simm-1 ) ;
57964: LD_EXP 25
57968: PPUSH
57969: LD_STRING D10-Simm-1
57971: PPUSH
57972: CALL_OW 94
// ForceSay ( Heike , D10-H-1 ) ;
57976: LD_EXP 10
57980: PPUSH
57981: LD_STRING D10-H-1
57983: PPUSH
57984: CALL_OW 91
// SayRadio ( Simms , D10-Simm-2 ) ;
57988: LD_EXP 25
57992: PPUSH
57993: LD_STRING D10-Simm-2
57995: PPUSH
57996: CALL_OW 94
// ForceSay ( Heike , D10-H-2 ) ;
58000: LD_EXP 10
58004: PPUSH
58005: LD_STRING D10-H-2
58007: PPUSH
58008: CALL_OW 91
// SayRadio ( Simms , D10-Simm-3 ) ;
58012: LD_EXP 25
58016: PPUSH
58017: LD_STRING D10-Simm-3
58019: PPUSH
58020: CALL_OW 94
// ForceSay ( Heike , D10-H-3 ) ;
58024: LD_EXP 10
58028: PPUSH
58029: LD_STRING D10-H-3
58031: PPUSH
58032: CALL_OW 91
// SayRadio ( Simms , D10-Simm-4 ) ;
58036: LD_EXP 25
58040: PPUSH
58041: LD_STRING D10-Simm-4
58043: PPUSH
58044: CALL_OW 94
// temp_list = UnitFilter ( [ Kowalski , Suze , Kurt , Dwayne ] , [ f_alive ] ) ;
58048: LD_ADDR_VAR 0 3
58052: PUSH
58053: LD_EXP 14
58057: PUSH
58058: LD_EXP 16
58062: PUSH
58063: LD_EXP 18
58067: PUSH
58068: LD_EXP 19
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: PPUSH
58079: LD_INT 51
58081: PUSH
58082: EMPTY
58083: LIST
58084: PPUSH
58085: CALL_OW 72
58089: ST_TO_ADDR
// if temp_list = 0 then
58090: LD_VAR 0 3
58094: PUSH
58095: LD_INT 0
58097: EQUAL
58098: IFFALSE 58228
// temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
58100: LD_ADDR_VAR 0 3
58104: PUSH
58105: LD_INT 22
58107: PUSH
58108: LD_EXP 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 21
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PPUSH
58131: CALL_OW 69
58135: PUSH
58136: LD_EXP 3
58140: PPUSH
58141: CALL 44422 0 1
58145: PUSH
58146: LD_EXP 10
58150: PUSH
58151: LD_EXP 11
58155: PUSH
58156: LD_EXP 12
58160: PUSH
58161: LD_EXP 13
58165: PUSH
58166: LD_EXP 14
58170: PUSH
58171: LD_EXP 15
58175: PUSH
58176: LD_EXP 16
58180: PUSH
58181: LD_EXP 17
58185: PUSH
58186: LD_EXP 18
58190: PUSH
58191: LD_EXP 19
58195: PUSH
58196: LD_EXP 20
58200: PUSH
58201: LD_EXP 21
58205: PUSH
58206: LD_EXP 22
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: ADD
58226: DIFF
58227: ST_TO_ADDR
// if temp_list > 0 then
58228: LD_VAR 0 3
58232: PUSH
58233: LD_INT 0
58235: GREATER
58236: IFFALSE 58429
// begin temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
58238: LD_ADDR_VAR 0 4
58242: PUSH
58243: LD_VAR 0 3
58247: PUSH
58248: LD_INT 1
58250: PPUSH
58251: LD_VAR 0 3
58255: PPUSH
58256: CALL_OW 12
58260: ARRAY
58261: ST_TO_ADDR
// case temp_unit of Kowalski :
58262: LD_VAR 0 4
58266: PUSH
58267: LD_EXP 14
58271: DOUBLE
58272: EQUAL
58273: IFTRUE 58277
58275: GO 58292
58277: POP
// ForceSay ( temp_unit , D10-Ko-1 ) ; Suze :
58278: LD_VAR 0 4
58282: PPUSH
58283: LD_STRING D10-Ko-1
58285: PPUSH
58286: CALL_OW 91
58290: GO 58429
58292: LD_EXP 16
58296: DOUBLE
58297: EQUAL
58298: IFTRUE 58302
58300: GO 58317
58302: POP
// ForceSay ( temp_unit , D10-Su-1 ) ; Kurt :
58303: LD_VAR 0 4
58307: PPUSH
58308: LD_STRING D10-Su-1
58310: PPUSH
58311: CALL_OW 91
58315: GO 58429
58317: LD_EXP 18
58321: DOUBLE
58322: EQUAL
58323: IFTRUE 58327
58325: GO 58362
58327: POP
// begin if kurt_is_substitute then
58328: LD_EXP 82
58332: IFFALSE 58348
// ForceSay ( temp_unit , D10-Ku-1 ) else
58334: LD_VAR 0 4
58338: PPUSH
58339: LD_STRING D10-Ku-1
58341: PPUSH
58342: CALL_OW 91
58346: GO 58360
// ForceSay ( temp_unit , D10-Ku-1 ) ;
58348: LD_VAR 0 4
58352: PPUSH
58353: LD_STRING D10-Ku-1
58355: PPUSH
58356: CALL_OW 91
// end ; Dwayne :
58360: GO 58429
58362: LD_EXP 19
58366: DOUBLE
58367: EQUAL
58368: IFTRUE 58372
58370: GO 58387
58372: POP
// ForceSay ( temp_unit , D10-Dw-1 ) ; else
58373: LD_VAR 0 4
58377: PPUSH
58378: LD_STRING D10-Dw-1
58380: PPUSH
58381: CALL_OW 91
58385: GO 58429
58387: POP
// if GetSex ( temp_unit ) = sex_male then
58388: LD_VAR 0 4
58392: PPUSH
58393: CALL_OW 258
58397: PUSH
58398: LD_INT 1
58400: EQUAL
58401: IFFALSE 58417
// ForceSay ( temp_unit , D10-SomeM-1 ) else
58403: LD_VAR 0 4
58407: PPUSH
58408: LD_STRING D10-SomeM-1
58410: PPUSH
58411: CALL_OW 91
58415: GO 58429
// ForceSay ( temp_unit , D10-SomeF-1 ) ; end ;
58417: LD_VAR 0 4
58421: PPUSH
58422: LD_STRING D10-SomeF-1
58424: PPUSH
58425: CALL_OW 91
// end ; dwait ( 0 0$0.9 ) ;
58429: LD_INT 32
58431: PPUSH
58432: CALL_OW 68
// ForceSay ( Heike , D10-H-4 ) ;
58436: LD_EXP 10
58440: PPUSH
58441: LD_STRING D10-H-4
58443: PPUSH
58444: CALL_OW 91
// dwait ( 0 0$0.2 ) ;
58448: LD_INT 7
58450: PPUSH
58451: CALL_OW 68
// EndMission ;
58455: CALL 58597 0 0
// DialogueOff ;
58459: CALL_OW 7
// end ;
58463: PPOPN 4
58465: END
// function GetAmBuildings ; begin
58466: LD_INT 0
58468: PPUSH
// result = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_building ] ] ) diff [ b_ext_computer , b_ext_gun , b_ext_laser , b_ext_noncombat , b_ext_radar , b_ext_radio , b_ext_rocket , b_ext_siberium , b_ext_stitch , b_ext_track ] ;
58469: LD_ADDR_VAR 0 1
58473: PUSH
58474: LD_INT 22
58476: PUSH
58477: LD_EXP 7
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 21
58488: PUSH
58489: LD_INT 3
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PPUSH
58500: CALL_OW 69
58504: PUSH
58505: LD_INT 24
58507: PUSH
58508: LD_INT 17
58510: PUSH
58511: LD_INT 25
58513: PUSH
58514: LD_INT 19
58516: PUSH
58517: LD_INT 20
58519: PUSH
58520: LD_INT 22
58522: PUSH
58523: LD_INT 18
58525: PUSH
58526: LD_INT 21
58528: PUSH
58529: LD_INT 23
58531: PUSH
58532: LD_INT 16
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: DIFF
58547: ST_TO_ADDR
// end ;
58548: LD_VAR 0 1
58552: RET
// function GetAmHumans ; begin
58553: LD_INT 0
58555: PPUSH
// result = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
58556: LD_ADDR_VAR 0 1
58560: PUSH
58561: LD_INT 22
58563: PUSH
58564: LD_EXP 7
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 21
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PPUSH
58587: CALL_OW 69
58591: ST_TO_ADDR
// end ; end_of_file
58592: LD_VAR 0 1
58596: RET
// export function EndMission ; var val , all_list , un_list , name_list ; begin
58597: LD_INT 0
58599: PPUSH
58600: PPUSH
58601: PPUSH
58602: PPUSH
58603: PPUSH
// if original_gensher_people + 0 = saved_gensher_people + 0 then
58604: LD_EXP 83
58608: PUSH
58609: LD_INT 0
58611: PLUS
58612: PUSH
58613: LD_EXP 95
58617: PUSH
58618: LD_INT 0
58620: PLUS
58621: EQUAL
58622: IFFALSE 58634
// val = 1 else
58624: LD_ADDR_VAR 0 2
58628: PUSH
58629: LD_INT 1
58631: ST_TO_ADDR
58632: GO 58643
// val = - 1 ;
58634: LD_ADDR_VAR 0 2
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: ST_TO_ADDR
// AddMedal ( GensherPeople , val ) ;
58643: LD_STRING GensherPeople
58645: PPUSH
58646: LD_VAR 0 2
58650: PPUSH
58651: CALL_OW 101
// if val = 1 then
58655: LD_VAR 0 2
58659: PUSH
58660: LD_INT 1
58662: EQUAL
58663: IFFALSE 58677
// SaveVariable ( 1 , AllGensherPeopleSaved_11_cont ) else
58665: LD_INT 1
58667: PPUSH
58668: LD_STRING AllGensherPeopleSaved_11_cont
58670: PPUSH
58671: CALL_OW 39
58675: GO 58687
// SaveVariable ( 0 , AllGensherPeopleSaved_11_cont ) ;
58677: LD_INT 0
58679: PPUSH
58680: LD_STRING AllGensherPeopleSaved_11_cont
58682: PPUSH
58683: CALL_OW 39
// if cameras_placed then
58687: LD_EXP 92
58691: IFFALSE 58703
// val = 1 else
58693: LD_ADDR_VAR 0 2
58697: PUSH
58698: LD_INT 1
58700: ST_TO_ADDR
58701: GO 58737
// if Researched ( you , tech_HidCam ) then
58703: LD_EXP 3
58707: PPUSH
58708: LD_INT 17
58710: PPUSH
58711: CALL_OW 325
58715: IFFALSE 58728
// val = - 1 else
58717: LD_ADDR_VAR 0 2
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: ST_TO_ADDR
58726: GO 58737
// val = - 2 ;
58728: LD_ADDR_VAR 0 2
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: ST_TO_ADDR
// AddMedal ( HiddenCamera , val ) ;
58737: LD_STRING HiddenCamera
58739: PPUSH
58740: LD_VAR 0 2
58744: PPUSH
58745: CALL_OW 101
// if russian_interference_points <= [ 11 , 8 , 5 ] [ difficulty ] then
58749: LD_EXP 97
58753: PUSH
58754: LD_INT 11
58756: PUSH
58757: LD_INT 8
58759: PUSH
58760: LD_INT 5
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: LIST
58767: PUSH
58768: LD_OWVAR 67
58772: ARRAY
58773: LESSEQUAL
58774: IFFALSE 58786
// val = 1 else
58776: LD_ADDR_VAR 0 2
58780: PUSH
58781: LD_INT 1
58783: ST_TO_ADDR
58784: GO 58795
// val = - 1 ;
58786: LD_ADDR_VAR 0 2
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: ST_TO_ADDR
// AddMedal ( RussianInterference , val ) ;
58795: LD_STRING RussianInterference
58797: PPUSH
58798: LD_VAR 0 2
58802: PPUSH
58803: CALL_OW 101
// GiveMedals ( Medals ) ;
58807: LD_STRING Medals
58809: PPUSH
58810: CALL_OW 102
// all_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff GetApes ( you ) ;
58814: LD_ADDR_VAR 0 3
58818: PUSH
58819: LD_INT 22
58821: PUSH
58822: LD_EXP 3
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 21
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PPUSH
58845: CALL_OW 69
58849: PUSH
58850: LD_EXP 3
58854: PPUSH
58855: CALL 44422 0 1
58859: DIFF
58860: ST_TO_ADDR
// if IsLive ( Gonzo ) then
58861: LD_EXP 23
58865: PPUSH
58866: CALL_OW 300
58870: IFFALSE 58888
// all_list = all_list ^ Gonzo ;
58872: LD_ADDR_VAR 0 3
58876: PUSH
58877: LD_VAR 0 3
58881: PUSH
58882: LD_EXP 23
58886: ADD
58887: ST_TO_ADDR
// RewardPeople ( all_list ) ;
58888: LD_VAR 0 3
58892: PPUSH
58893: CALL_OW 43
// SetLastMission ( all_list , 16 ) ;
58897: LD_VAR 0 3
58901: PPUSH
58902: LD_INT 16
58904: PPUSH
58905: CALL_OW 245
// SaveCharacters ( Heike , Heike_11_cont ) ;
58909: LD_EXP 10
58913: PPUSH
58914: LD_STRING Heike_11_cont
58916: PPUSH
58917: CALL_OW 38
// SaveCharacters ( Gensher , Gensher_11_cont ) ;
58921: LD_EXP 24
58925: PPUSH
58926: LD_STRING Gensher_11_cont
58928: PPUSH
58929: CALL_OW 38
// SaveVariable ( oswald_is_substitute , Oswald_is_substitute_11_generic ) ;
58933: LD_EXP 81
58937: PPUSH
58938: LD_STRING Oswald_is_substitute_11_generic
58940: PPUSH
58941: CALL_OW 39
// SaveVariable ( kurt_is_substitute , Kurt_is_substitute_11_generic ) ;
58945: LD_EXP 82
58949: PPUSH
58950: LD_STRING Kurt_is_substitute_11_generic
58952: PPUSH
58953: CALL_OW 39
// un_list = [ Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ] ;
58957: LD_ADDR_VAR 0 4
58961: PUSH
58962: LD_EXP 11
58966: PUSH
58967: LD_EXP 12
58971: PUSH
58972: LD_EXP 13
58976: PUSH
58977: LD_EXP 14
58981: PUSH
58982: LD_EXP 15
58986: PUSH
58987: LD_EXP 16
58991: PUSH
58992: LD_EXP 17
58996: PUSH
58997: LD_EXP 18
59001: PUSH
59002: LD_EXP 19
59006: PUSH
59007: LD_EXP 20
59011: PUSH
59012: LD_EXP 21
59016: PUSH
59017: LD_EXP 22
59021: PUSH
59022: LD_EXP 23
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: ST_TO_ADDR
// name_list = [ Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ] ;
59042: LD_ADDR_VAR 0 5
59046: PUSH
59047: LD_STRING Sonya
59049: PUSH
59050: LD_STRING Oswald
59052: PUSH
59053: LD_STRING Ralph
59055: PUSH
59056: LD_STRING Kowalski
59058: PUSH
59059: LD_STRING Evelyn
59061: PUSH
59062: LD_STRING Suze
59064: PUSH
59065: LD_STRING Olaf
59067: PUSH
59068: LD_STRING Kurt
59070: PUSH
59071: LD_STRING Dwayne
59073: PUSH
59074: LD_STRING MarkB
59076: PUSH
59077: LD_STRING Aviradze
59079: PUSH
59080: LD_STRING Swansson
59082: PUSH
59083: LD_STRING Gonzo
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: ST_TO_ADDR
// for val = 1 to un_list do
59101: LD_ADDR_VAR 0 2
59105: PUSH
59106: DOUBLE
59107: LD_INT 1
59109: DEC
59110: ST_TO_ADDR
59111: LD_VAR 0 4
59115: PUSH
59116: FOR_TO
59117: IFFALSE 59169
// if un_list [ val ] in all_list then
59119: LD_VAR 0 4
59123: PUSH
59124: LD_VAR 0 2
59128: ARRAY
59129: PUSH
59130: LD_VAR 0 3
59134: IN
59135: IFFALSE 59167
// SaveCharacters ( un_list [ val ] , name_list [ val ] & _11_cont ) ;
59137: LD_VAR 0 4
59141: PUSH
59142: LD_VAR 0 2
59146: ARRAY
59147: PPUSH
59148: LD_VAR 0 5
59152: PUSH
59153: LD_VAR 0 2
59157: ARRAY
59158: PUSH
59159: LD_STRING _11_cont
59161: STR
59162: PPUSH
59163: CALL_OW 38
59167: GO 59116
59169: POP
59170: POP
// SaveCharacters ( all_list diff ( Heike ^ Khattam ^ un_list ) , Others_11_cont ) ;
59171: LD_VAR 0 3
59175: PUSH
59176: LD_EXP 10
59180: PUSH
59181: LD_EXP 27
59185: ADD
59186: PUSH
59187: LD_VAR 0 4
59191: ADD
59192: DIFF
59193: PPUSH
59194: LD_STRING Others_11_cont
59196: PPUSH
59197: CALL_OW 38
// if GetLives ( Khattam ) > 0 then
59201: LD_EXP 27
59205: PPUSH
59206: CALL_OW 256
59210: PUSH
59211: LD_INT 0
59213: GREATER
59214: IFFALSE 59228
// SaveCharacters ( Khattam , Khattam_11_cont ) ;
59216: LD_EXP 27
59220: PPUSH
59221: LD_STRING Khattam_11_cont
59223: PPUSH
59224: CALL_OW 38
// SaveVariable ( khattam_choice = 1 , Khattam_accepted_11_cont ) ;
59228: LD_EXP 96
59232: PUSH
59233: LD_INT 1
59235: EQUAL
59236: PPUSH
59237: LD_STRING Khattam_accepted_11_cont
59239: PPUSH
59240: CALL_OW 39
// InGameOn ;
59244: CALL_OW 8
// for val in all_units do
59248: LD_ADDR_VAR 0 2
59252: PUSH
59253: LD_OWVAR 3
59257: PUSH
59258: FOR_IN
59259: IFFALSE 59272
// DestroyUnit ( val ) ;
59261: LD_VAR 0 2
59265: PPUSH
59266: CALL_OW 65
59270: GO 59258
59272: POP
59273: POP
// ResetFog ;
59274: CALL_OW 335
// wait ( 0 0$0.5 ) ;
59278: LD_INT 18
59280: PPUSH
59281: CALL_OW 67
// repeat Query ( QCutscene1 ) ;
59285: LD_STRING QCutscene1
59287: PPUSH
59288: CALL_OW 97
// val = Query ( QCutscene2 ) ;
59292: LD_ADDR_VAR 0 2
59296: PUSH
59297: LD_STRING QCutscene2
59299: PPUSH
59300: CALL_OW 97
59304: ST_TO_ADDR
// until val = 3 or val = 2 ;
59305: LD_VAR 0 2
59309: PUSH
59310: LD_INT 3
59312: EQUAL
59313: PUSH
59314: LD_VAR 0 2
59318: PUSH
59319: LD_INT 2
59321: EQUAL
59322: OR
59323: IFFALSE 59285
// wait ( 0 0$0.5 ) ;
59325: LD_INT 18
59327: PPUSH
59328: CALL_OW 67
// SetNextMission ( val - 1 ) ;
59332: LD_VAR 0 2
59336: PUSH
59337: LD_INT 1
59339: MINUS
59340: PPUSH
59341: CALL_OW 536
// InGameOff ;
59345: CALL_OW 9
// YouWin ;
59349: CALL_OW 103
// end ;
59353: LD_VAR 0 1
59357: RET
