// export testing ; export you , russians , nature , you_alt , americans , scout_side , americans_alt ; export Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ; export Gensher ; export Simms , Cornell , Khattam , Joan , Powell ; export ai_soldiers , ai_engineers , ai_mechanics_defend , ai_scientists , ai_commander , ai_depot , ai_labs , ai_siberite_mines ; export ai_power_plants , ai_buildings_locations , ai_vehicles_defend , ai_vehicles_attack , ai_human_pullback_hex ; export ai_building_under_construction , ai_heal_these_humans , ai_all_buildings , ai_building_constructor ; export ai_upcoming_building_data , ai_facts , ai_armouries , ai_bunkers , ai_oil_mine , ai_fact_extensions ; export ai_near_base_dist , ai_going_to_attack_this_base , ai_refuel_vehicles_list , ai_turrets , ai_control_tower ; export ai_vehicle_attack_delay , ai_bases , ai_has_switched_base_target , ai_cargo_bay , ai_cargo_bay_under_construction , ai_apemen_engineers ; export ai_attacking_soldiers , ai_attacking_scientists , ai_humans_ready_to_attack , ai_retreating_attacking_humans , ai_human_attack_delay ; export ai_excepted_buildings , ai_new_attack_commencing ; export ai_crane , ai_time_shift_data , ai_time_shift_hexes , ai_time_shift_hexes_underway , ai_attacking_unit_hex_index ; export ai_contact_time , ai_attack_ground_info_initial , ai_attack_ground_info_sustain , ai_captured_buildings , ai_vehicles_being_repaired ; export oswald_is_substitute , kurt_is_substitute , original_gensher_people , russian_attack_strategy , special_russian_attackers ; export yashin_alive , num_russian_attacks , gensher_spec_research_progress , game_phase , first_teleport , camera_engineers ; export cameras_placed , scout_event_over , russians_allowed_to_attack_gensher_time , saved_gensher_people , khattam_choice ; export russian_interference_points , camera_engineers_task_map ; export gensher_bunker_apes , gensher_mortars ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// testing = false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// ai_bases = [ 1 , 2 , 3 ] ;
  16: LD_ADDR_EXP 58
  20: PUSH
  21: LD_INT 1
  23: PUSH
  24: LD_INT 2
  26: PUSH
  27: LD_INT 3
  29: PUSH
  30: EMPTY
  31: LIST
  32: LIST
  33: LIST
  34: ST_TO_ADDR
// ai_soldiers = [ [ ] , [ ] , [ ] ] ;
  35: LD_ADDR_EXP 29
  39: PUSH
  40: EMPTY
  41: PUSH
  42: EMPTY
  43: PUSH
  44: EMPTY
  45: PUSH
  46: EMPTY
  47: LIST
  48: LIST
  49: LIST
  50: ST_TO_ADDR
// ai_attacking_soldiers = [ [ ] , [ ] , [ ] ] ;
  51: LD_ADDR_EXP 63
  55: PUSH
  56: EMPTY
  57: PUSH
  58: EMPTY
  59: PUSH
  60: EMPTY
  61: PUSH
  62: EMPTY
  63: LIST
  64: LIST
  65: LIST
  66: ST_TO_ADDR
// ai_engineers = [ [ ] , [ ] , [ ] ] ;
  67: LD_ADDR_EXP 30
  71: PUSH
  72: EMPTY
  73: PUSH
  74: EMPTY
  75: PUSH
  76: EMPTY
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: LIST
  82: ST_TO_ADDR
// ai_mechanics_defend = [ [ ] , [ ] , [ ] ] ;
  83: LD_ADDR_EXP 31
  87: PUSH
  88: EMPTY
  89: PUSH
  90: EMPTY
  91: PUSH
  92: EMPTY
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: ST_TO_ADDR
// ai_scientists = [ [ ] , [ ] , [ ] ] ;
  99: LD_ADDR_EXP 32
 103: PUSH
 104: EMPTY
 105: PUSH
 106: EMPTY
 107: PUSH
 108: EMPTY
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: ST_TO_ADDR
// ai_attacking_scientists = [ [ ] , [ ] , [ ] ] ;
 115: LD_ADDR_EXP 64
 119: PUSH
 120: EMPTY
 121: PUSH
 122: EMPTY
 123: PUSH
 124: EMPTY
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: ST_TO_ADDR
// ai_apemen_engineers = [ [ ] , [ ] , [ ] ] ;
 131: LD_ADDR_EXP 62
 135: PUSH
 136: EMPTY
 137: PUSH
 138: EMPTY
 139: PUSH
 140: EMPTY
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: ST_TO_ADDR
// ai_depot = [ 0 , 0 , 0 ] ;
 147: LD_ADDR_EXP 34
 151: PUSH
 152: LD_INT 0
 154: PUSH
 155: LD_INT 0
 157: PUSH
 158: LD_INT 0
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// ai_labs = [ [ ] , [ ] , [ ] ] ;
 166: LD_ADDR_EXP 35
 170: PUSH
 171: EMPTY
 172: PUSH
 173: EMPTY
 174: PUSH
 175: EMPTY
 176: PUSH
 177: EMPTY
 178: LIST
 179: LIST
 180: LIST
 181: ST_TO_ADDR
// ai_facts = [ [ ] , [ ] , [ ] ] ;
 182: LD_ADDR_EXP 47
 186: PUSH
 187: EMPTY
 188: PUSH
 189: EMPTY
 190: PUSH
 191: EMPTY
 192: PUSH
 193: EMPTY
 194: LIST
 195: LIST
 196: LIST
 197: ST_TO_ADDR
// ai_armouries = [ [ ] , [ ] , [ ] ] ;
 198: LD_ADDR_EXP 48
 202: PUSH
 203: EMPTY
 204: PUSH
 205: EMPTY
 206: PUSH
 207: EMPTY
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: LIST
 213: ST_TO_ADDR
// ai_bunkers = [ [ ] , [ ] , [ ] ] ;
 214: LD_ADDR_EXP 49
 218: PUSH
 219: EMPTY
 220: PUSH
 221: EMPTY
 222: PUSH
 223: EMPTY
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: ST_TO_ADDR
// ai_turrets = [ [ ] , [ ] , [ ] ] ;
 230: LD_ADDR_EXP 55
 234: PUSH
 235: EMPTY
 236: PUSH
 237: EMPTY
 238: PUSH
 239: EMPTY
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: LIST
 245: ST_TO_ADDR
// ai_oil_mine = [ 0 , 0 , 0 ] ;
 246: LD_ADDR_EXP 50
 250: PUSH
 251: LD_INT 0
 253: PUSH
 254: LD_INT 0
 256: PUSH
 257: LD_INT 0
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: ST_TO_ADDR
// ai_siberite_mines = [ [ ] , [ ] , [ ] ] ;
 265: LD_ADDR_EXP 36
 269: PUSH
 270: EMPTY
 271: PUSH
 272: EMPTY
 273: PUSH
 274: EMPTY
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: LIST
 280: ST_TO_ADDR
// ai_fact_extensions = [ [ ] , [ ] , [ ] ] ;
 281: LD_ADDR_EXP 51
 285: PUSH
 286: EMPTY
 287: PUSH
 288: EMPTY
 289: PUSH
 290: EMPTY
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: ST_TO_ADDR
// ai_power_plants = [ [ ] , [ ] , [ ] ] ;
 297: LD_ADDR_EXP 37
 301: PUSH
 302: EMPTY
 303: PUSH
 304: EMPTY
 305: PUSH
 306: EMPTY
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: ST_TO_ADDR
// ai_control_tower = [ 0 , 0 , 0 ] ;
 313: LD_ADDR_EXP 56
 317: PUSH
 318: LD_INT 0
 320: PUSH
 321: LD_INT 0
 323: PUSH
 324: LD_INT 0
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// ai_buildings_locations = [ [ ] , [ ] , [ ] ] ;
 332: LD_ADDR_EXP 38
 336: PUSH
 337: EMPTY
 338: PUSH
 339: EMPTY
 340: PUSH
 341: EMPTY
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: LIST
 347: ST_TO_ADDR
// ai_captured_buildings = [ [ ] , [ ] , [ ] ] ;
 348: LD_ADDR_EXP 78
 352: PUSH
 353: EMPTY
 354: PUSH
 355: EMPTY
 356: PUSH
 357: EMPTY
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: LIST
 363: ST_TO_ADDR
// ai_vehicles_defend = [ [ ] , [ ] , [ ] ] ;
 364: LD_ADDR_EXP 39
 368: PUSH
 369: EMPTY
 370: PUSH
 371: EMPTY
 372: PUSH
 373: EMPTY
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: ST_TO_ADDR
// ai_vehicles_attack = [ [ ] , [ ] , [ ] ] ;
 380: LD_ADDR_EXP 40
 384: PUSH
 385: EMPTY
 386: PUSH
 387: EMPTY
 388: PUSH
 389: EMPTY
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: ST_TO_ADDR
// ai_vehicles_being_repaired = [ [ ] , [ ] , [ ] ] ;
 396: LD_ADDR_EXP 79
 400: PUSH
 401: EMPTY
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: LIST
 411: ST_TO_ADDR
// ai_refuel_vehicles_list = [ [ ] , [ ] , [ ] ] ;
 412: LD_ADDR_EXP 54
 416: PUSH
 417: EMPTY
 418: PUSH
 419: EMPTY
 420: PUSH
 421: EMPTY
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: LIST
 427: ST_TO_ADDR
// ai_human_pullback_hex = [ [ 106 , 40 ] , [ 75 , 22 ] , [ 60 , 81 ] ] ;
 428: LD_ADDR_EXP 41
 432: PUSH
 433: LD_INT 106
 435: PUSH
 436: LD_INT 40
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PUSH
 443: LD_INT 75
 445: PUSH
 446: LD_INT 22
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 60
 455: PUSH
 456: LD_INT 81
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: ST_TO_ADDR
// ai_building_under_construction = [ 0 , 0 , 0 ] ;
 468: LD_ADDR_EXP 42
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 0
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: LIST
 486: ST_TO_ADDR
// ai_heal_these_humans = [ [ ] , [ ] , [ ] ] ;
 487: LD_ADDR_EXP 43
 491: PUSH
 492: EMPTY
 493: PUSH
 494: EMPTY
 495: PUSH
 496: EMPTY
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: ST_TO_ADDR
// ai_all_buildings = [ [ ] , [ ] , [ ] ] ;
 503: LD_ADDR_EXP 44
 507: PUSH
 508: EMPTY
 509: PUSH
 510: EMPTY
 511: PUSH
 512: EMPTY
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: LIST
 518: ST_TO_ADDR
// ai_building_constructor = [ 0 , 0 , 0 ] ;
 519: LD_ADDR_EXP 45
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: LD_INT 0
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// ai_upcoming_building_data = [ [ ] , [ ] , [ ] ] ;
 538: LD_ADDR_EXP 46
 542: PUSH
 543: EMPTY
 544: PUSH
 545: EMPTY
 546: PUSH
 547: EMPTY
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: LIST
 553: ST_TO_ADDR
// ai_near_base_dist = 18 ;
 554: LD_ADDR_EXP 52
 558: PUSH
 559: LD_INT 18
 561: ST_TO_ADDR
// ai_vehicle_attack_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
 562: LD_ADDR_EXP 57
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: LD_INT 0
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// ai_human_attack_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
 581: LD_ADDR_EXP 67
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 0
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: LIST
 599: ST_TO_ADDR
// ai_cargo_bay = [ 0 , 0 , 0 ] ;
 600: LD_ADDR_EXP 60
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 0
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: LIST
 618: ST_TO_ADDR
// ai_cargo_bay_under_construction = [ false , false , false ] ;
 619: LD_ADDR_EXP 61
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: ST_TO_ADDR
// ai_crane = [ 0 , 0 , 0 ] ;
 638: LD_ADDR_EXP 70
 642: PUSH
 643: LD_INT 0
 645: PUSH
 646: LD_INT 0
 648: PUSH
 649: LD_INT 0
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: LIST
 656: ST_TO_ADDR
// ai_attacking_unit_hex_index = [ [ ] , [ ] , [ ] ] ;
 657: LD_ADDR_EXP 74
 661: PUSH
 662: EMPTY
 663: PUSH
 664: EMPTY
 665: PUSH
 666: EMPTY
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ai_retreating_attacking_humans = [ [ ] , [ ] , [ ] ] ;
 673: LD_ADDR_EXP 66
 677: PUSH
 678: EMPTY
 679: PUSH
 680: EMPTY
 681: PUSH
 682: EMPTY
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: ST_TO_ADDR
// ai_excepted_buildings = [ [ ] , [ ] , [ ] ] ;
 689: LD_ADDR_EXP 68
 693: PUSH
 694: EMPTY
 695: PUSH
 696: EMPTY
 697: PUSH
 698: EMPTY
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: ST_TO_ADDR
// ai_new_attack_commencing = [ false , false , false ] ;
 705: LD_ADDR_EXP 69
 709: PUSH
 710: LD_INT 0
 712: PUSH
 713: LD_INT 0
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: LIST
 723: ST_TO_ADDR
// ai_time_shift_data = [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 724: LD_ADDR_EXP 71
 728: PUSH
 729: EMPTY
 730: PUSH
 731: EMPTY
 732: PUSH
 733: EMPTY
 734: PUSH
 735: EMPTY
 736: PUSH
 737: EMPTY
 738: PUSH
 739: EMPTY
 740: PUSH
 741: EMPTY
 742: PUSH
 743: EMPTY
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// ai_time_shift_hexes = [ [ ] , [ ] , [ ] ] ;
 755: LD_ADDR_EXP 72
 759: PUSH
 760: EMPTY
 761: PUSH
 762: EMPTY
 763: PUSH
 764: EMPTY
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: LIST
 770: ST_TO_ADDR
// ai_time_shift_hexes_underway = [ [ ] , [ ] , [ ] ] ;
 771: LD_ADDR_EXP 73
 775: PUSH
 776: EMPTY
 777: PUSH
 778: EMPTY
 779: PUSH
 780: EMPTY
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: ST_TO_ADDR
// Initiate_ai_contact_time ;
 787: CALL 989 0 0
// ai_attack_ground_info_initial = [ ] ;
 791: LD_ADDR_EXP 76
 795: PUSH
 796: EMPTY
 797: ST_TO_ADDR
// ai_attack_ground_info_sustain = [ ] ;
 798: LD_ADDR_EXP 77
 802: PUSH
 803: EMPTY
 804: ST_TO_ADDR
// oswald_is_substitute = false ;
 805: LD_ADDR_EXP 80
 809: PUSH
 810: LD_INT 0
 812: ST_TO_ADDR
// kurt_is_substitute = false ;
 813: LD_ADDR_EXP 81
 817: PUSH
 818: LD_INT 0
 820: ST_TO_ADDR
// original_gensher_people = [ ] ;
 821: LD_ADDR_EXP 82
 825: PUSH
 826: EMPTY
 827: ST_TO_ADDR
// russian_attack_strategy = - 1 ;
 828: LD_ADDR_EXP 83
 832: PUSH
 833: LD_INT 1
 835: NEG
 836: ST_TO_ADDR
// special_russian_attackers = [ ] ;
 837: LD_ADDR_EXP 84
 841: PUSH
 842: EMPTY
 843: ST_TO_ADDR
// yashin_alive = TestCharacters ( Yashin_08 ) ;
 844: LD_ADDR_EXP 85
 848: PUSH
 849: LD_STRING Yashin_08
 851: PPUSH
 852: CALL_OW 28
 856: ST_TO_ADDR
// num_russian_attacks = 0 ;
 857: LD_ADDR_EXP 86
 861: PUSH
 862: LD_INT 0
 864: ST_TO_ADDR
// gensher_spec_research_progress = 0 ;
 865: LD_ADDR_EXP 87
 869: PUSH
 870: LD_INT 0
 872: ST_TO_ADDR
// game_phase = 1 ;
 873: LD_ADDR_EXP 88
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// first_teleport = true ;
 881: LD_ADDR_EXP 89
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// camera_engineers = [ ] ;
 889: LD_ADDR_EXP 90
 893: PUSH
 894: EMPTY
 895: ST_TO_ADDR
// cameras_placed = false ;
 896: LD_ADDR_EXP 91
 900: PUSH
 901: LD_INT 0
 903: ST_TO_ADDR
// scout_event_over = false ;
 904: LD_ADDR_EXP 92
 908: PUSH
 909: LD_INT 0
 911: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = [ 30 30$0 , 25 25$0 , 20 20$0 ] [ difficulty ] ;
 912: LD_ADDR_EXP 93
 916: PUSH
 917: LD_INT 63000
 919: PUSH
 920: LD_INT 52500
 922: PUSH
 923: LD_INT 42000
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_OWVAR 67
 935: ARRAY
 936: ST_TO_ADDR
// saved_gensher_people = [ ] ;
 937: LD_ADDR_EXP 94
 941: PUSH
 942: EMPTY
 943: ST_TO_ADDR
// khattam_choice = 0 ;
 944: LD_ADDR_EXP 95
 948: PUSH
 949: LD_INT 0
 951: ST_TO_ADDR
// russian_interference_points = 0 ;
 952: LD_ADDR_EXP 96
 956: PUSH
 957: LD_INT 0
 959: ST_TO_ADDR
// PrepareSides ;
 960: CALL 1270 0 0
// PrepareNature ;
 964: CALL 1723 0 0
// PrepareArabians ;
 968: CALL 2247 0 0
// ScanBuildings ;
 972: CALL 6058 0 0
// PrepareComputerSides ;
 976: CALL 8545 0 0
// InitiateTimeShiftData ;
 980: CALL 1073 0 0
// Action ;
 984: CALL 10074 0 0
// end ;
 988: END
// function Initiate_ai_contact_time ; var i ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
// ai_contact_time = [ ] ;
 993: LD_ADDR_EXP 75
 997: PUSH
 998: EMPTY
 999: ST_TO_ADDR
// for i = 1 to 8 do
1000: LD_ADDR_VAR 0 2
1004: PUSH
1005: DOUBLE
1006: LD_INT 1
1008: DEC
1009: ST_TO_ADDR
1010: LD_INT 8
1012: PUSH
1013: FOR_TO
1014: IFFALSE 1066
// ai_contact_time = ai_contact_time ^ [ [ 100000 , 100000 , 100000 , 100000 , 100000 , 100000 , 100000 , 100000 ] ] ;
1016: LD_ADDR_EXP 75
1020: PUSH
1021: LD_EXP 75
1025: PUSH
1026: LD_INT 100000
1028: PUSH
1029: LD_INT 100000
1031: PUSH
1032: LD_INT 100000
1034: PUSH
1035: LD_INT 100000
1037: PUSH
1038: LD_INT 100000
1040: PUSH
1041: LD_INT 100000
1043: PUSH
1044: LD_INT 100000
1046: PUSH
1047: LD_INT 100000
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: ADD
1063: ST_TO_ADDR
1064: GO 1013
1066: POP
1067: POP
// end ;
1068: LD_VAR 0 1
1072: RET
// function InitiateTimeShiftData ; var side ; begin
1073: LD_INT 0
1075: PPUSH
1076: PPUSH
// for side = 1 to 8 do
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: DOUBLE
1083: LD_INT 1
1085: DEC
1086: ST_TO_ADDR
1087: LD_INT 8
1089: PUSH
1090: FOR_TO
1091: IFFALSE 1263
// if Researched ( side , tech_st3 ) then
1093: LD_VAR 0 2
1097: PPUSH
1098: LD_INT 65
1100: PPUSH
1101: CALL_OW 325
1105: IFFALSE 1139
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 420 , 10 ] ) else
1107: LD_ADDR_EXP 71
1111: PUSH
1112: LD_EXP 71
1116: PPUSH
1117: LD_VAR 0 2
1121: PPUSH
1122: LD_INT 420
1124: PUSH
1125: LD_INT 10
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: PPUSH
1132: CALL_OW 1
1136: ST_TO_ADDR
1137: GO 1261
// if Researched ( side , tech_st2 ) then
1139: LD_VAR 0 2
1143: PPUSH
1144: LD_INT 64
1146: PPUSH
1147: CALL_OW 325
1151: IFFALSE 1185
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 420 , 10 ] ) else
1153: LD_ADDR_EXP 71
1157: PUSH
1158: LD_EXP 71
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_INT 420
1170: PUSH
1171: LD_INT 10
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 1
1182: ST_TO_ADDR
1183: GO 1261
// if Researched ( side , tech_st1 ) then
1185: LD_VAR 0 2
1189: PPUSH
1190: LD_INT 63
1192: PPUSH
1193: CALL_OW 325
1197: IFFALSE 1231
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 320 , 7 ] ) else
1199: LD_ADDR_EXP 71
1203: PUSH
1204: LD_EXP 71
1208: PPUSH
1209: LD_VAR 0 2
1213: PPUSH
1214: LD_INT 320
1216: PUSH
1217: LD_INT 7
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: PPUSH
1224: CALL_OW 1
1228: ST_TO_ADDR
1229: GO 1261
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 215 , 4 ] ) ;
1231: LD_ADDR_EXP 71
1235: PUSH
1236: LD_EXP 71
1240: PPUSH
1241: LD_VAR 0 2
1245: PPUSH
1246: LD_INT 215
1248: PUSH
1249: LD_INT 4
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 1
1260: ST_TO_ADDR
1261: GO 1090
1263: POP
1264: POP
// end ;
1265: LD_VAR 0 1
1269: RET
// function PrepareSides ; begin
1270: LD_INT 0
1272: PPUSH
// nature = 0 ;
1273: LD_ADDR_EXP 4
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// americans = 1 ;
1281: LD_ADDR_EXP 6
1285: PUSH
1286: LD_INT 1
1288: ST_TO_ADDR
// you = 2 ;
1289: LD_ADDR_EXP 2
1293: PUSH
1294: LD_INT 2
1296: ST_TO_ADDR
// russians = 3 ;
1297: LD_ADDR_EXP 3
1301: PUSH
1302: LD_INT 3
1304: ST_TO_ADDR
// americans_alt = 4 ;
1305: LD_ADDR_EXP 8
1309: PUSH
1310: LD_INT 4
1312: ST_TO_ADDR
// you_alt = 5 ;
1313: LD_ADDR_EXP 5
1317: PUSH
1318: LD_INT 5
1320: ST_TO_ADDR
// scout_side = 8 ;
1321: LD_ADDR_EXP 7
1325: PUSH
1326: LD_INT 8
1328: ST_TO_ADDR
// SetAttitude ( americans , you , att_enemy , true ) ;
1329: LD_EXP 6
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: LD_INT 2
1341: PPUSH
1342: LD_INT 1
1344: PPUSH
1345: CALL_OW 80
// SetAttitude ( americans , russians , att_enemy , true ) ;
1349: LD_EXP 6
1353: PPUSH
1354: LD_EXP 3
1358: PPUSH
1359: LD_INT 2
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: CALL_OW 80
// SetAttitude ( americans , americans_alt , att_friend , true ) ;
1369: LD_EXP 6
1373: PPUSH
1374: LD_EXP 8
1378: PPUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 1
1384: PPUSH
1385: CALL_OW 80
// SetAttitude ( americans , you_alt , att_friend , true ) ;
1389: LD_EXP 6
1393: PPUSH
1394: LD_EXP 5
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: CALL_OW 80
// SetAttitude ( americans , scout_side , att_friend , true ) ;
1409: LD_EXP 6
1413: PPUSH
1414: LD_EXP 7
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: LD_INT 1
1424: PPUSH
1425: CALL_OW 80
// SetAttitude ( you , russians , att_enemy , true ) ;
1429: LD_EXP 2
1433: PPUSH
1434: LD_EXP 3
1438: PPUSH
1439: LD_INT 2
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: CALL_OW 80
// SetAttitude ( you , americans_alt , att_enemy , true ) ;
1449: LD_EXP 2
1453: PPUSH
1454: LD_EXP 8
1458: PPUSH
1459: LD_INT 2
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: CALL_OW 80
// SetAttitude ( you , you_alt , att_friend , true ) ;
1469: LD_EXP 2
1473: PPUSH
1474: LD_EXP 5
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: CALL_OW 80
// SetAttitude ( you , scout_side , att_friend , true ) ;
1489: LD_EXP 2
1493: PPUSH
1494: LD_EXP 7
1498: PPUSH
1499: LD_INT 1
1501: PPUSH
1502: LD_INT 1
1504: PPUSH
1505: CALL_OW 80
// SetAttitude ( russians , americans_alt , att_enemy , true ) ;
1509: LD_EXP 3
1513: PPUSH
1514: LD_EXP 8
1518: PPUSH
1519: LD_INT 2
1521: PPUSH
1522: LD_INT 1
1524: PPUSH
1525: CALL_OW 80
// SetAttitude ( russians , you_alt , att_enemy , true ) ;
1529: LD_EXP 3
1533: PPUSH
1534: LD_EXP 5
1538: PPUSH
1539: LD_INT 2
1541: PPUSH
1542: LD_INT 1
1544: PPUSH
1545: CALL_OW 80
// SetAttitude ( russians , scout_side , att_friend , true ) ;
1549: LD_EXP 3
1553: PPUSH
1554: LD_EXP 7
1558: PPUSH
1559: LD_INT 1
1561: PPUSH
1562: LD_INT 1
1564: PPUSH
1565: CALL_OW 80
// SetAttitude ( americans_alt , you_alt , att_enemy , true ) ;
1569: LD_EXP 8
1573: PPUSH
1574: LD_EXP 5
1578: PPUSH
1579: LD_INT 2
1581: PPUSH
1582: LD_INT 1
1584: PPUSH
1585: CALL_OW 80
// SetAttitude ( americans_alt , scout_side , att_friend , true ) ;
1589: LD_EXP 8
1593: PPUSH
1594: LD_EXP 7
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL_OW 80
// SetAttitude ( you_alt , scout_side , att_friend , true ) ;
1609: LD_EXP 5
1613: PPUSH
1614: LD_EXP 7
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: LD_INT 1
1624: PPUSH
1625: CALL_OW 80
// ChangeSideFog ( you_alt , you ) ;
1629: LD_EXP 5
1633: PPUSH
1634: LD_EXP 2
1638: PPUSH
1639: CALL_OW 343
// if difficulty = 3 then
1643: LD_OWVAR 67
1647: PUSH
1648: LD_INT 3
1650: EQUAL
1651: IFFALSE 1668
// SetTech ( tech_opto1 , americans , state_researched ) ;
1653: LD_INT 60
1655: PPUSH
1656: LD_EXP 6
1660: PPUSH
1661: LD_INT 2
1663: PPUSH
1664: CALL_OW 322
// if difficulty = 3 then
1668: LD_OWVAR 67
1672: PUSH
1673: LD_INT 3
1675: EQUAL
1676: IFFALSE 1693
// SetTech ( tech_comp3 , russians , state_researched ) ;
1678: LD_INT 59
1680: PPUSH
1681: LD_EXP 3
1685: PPUSH
1686: LD_INT 2
1688: PPUSH
1689: CALL_OW 322
// if difficulty = 3 then
1693: LD_OWVAR 67
1697: PUSH
1698: LD_INT 3
1700: EQUAL
1701: IFFALSE 1718
// SetTech ( tech_st3 , russians , state_researched ) ;
1703: LD_INT 65
1705: PPUSH
1706: LD_EXP 3
1710: PPUSH
1711: LD_INT 2
1713: PPUSH
1714: CALL_OW 322
// end ;
1718: LD_VAR 0 1
1722: RET
// function PrepareNature ; var i , spots , num , agres , count , temp_unit ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
1727: PPUSH
1728: PPUSH
1729: PPUSH
1730: PPUSH
1731: PPUSH
// for i in FilterAllUnits ( [ f_side , nature ] ) do
1732: LD_ADDR_VAR 0 2
1736: PUSH
1737: LD_INT 22
1739: PUSH
1740: LD_EXP 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL_OW 69
1753: PUSH
1754: FOR_IN
1755: IFFALSE 1768
// DestroyUnit ( i ) ;
1757: LD_VAR 0 2
1761: PPUSH
1762: CALL_OW 65
1766: GO 1754
1768: POP
1769: POP
// spots = [ [ 158 , 91 ] , [ 140 , 107 ] , [ 37 , 27 ] , [ 22 , 4 ] , [ 38 , 10 ] , [ 50 , 23 ] , [ 40 , 20 ] , [ 158 , 110 ] , [ 159 , 118 ] , [ 146 , 115 ] , [ 135 , 100 ] , [ 155 , 115 ] ] ;
1770: LD_ADDR_VAR 0 3
1774: PUSH
1775: LD_INT 158
1777: PUSH
1778: LD_INT 91
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PUSH
1785: LD_INT 140
1787: PUSH
1788: LD_INT 107
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 37
1797: PUSH
1798: LD_INT 27
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 22
1807: PUSH
1808: LD_INT 4
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: LD_INT 38
1817: PUSH
1818: LD_INT 10
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 50
1827: PUSH
1828: LD_INT 23
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 40
1837: PUSH
1838: LD_INT 20
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 158
1847: PUSH
1848: LD_INT 110
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 159
1857: PUSH
1858: LD_INT 118
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 146
1867: PUSH
1868: LD_INT 115
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 135
1877: PUSH
1878: LD_INT 100
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 155
1887: PUSH
1888: LD_INT 115
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: ST_TO_ADDR
// InitUc ;
1909: CALL_OW 18
// InitHc ;
1913: CALL_OW 19
// uc_side = nature ;
1917: LD_ADDR_OWVAR 20
1921: PUSH
1922: LD_EXP 4
1926: ST_TO_ADDR
// uc_nation = nation_nature ;
1927: LD_ADDR_OWVAR 21
1931: PUSH
1932: LD_INT 0
1934: ST_TO_ADDR
// agres = - 10 + difficulty * 20 ;
1935: LD_ADDR_VAR 0 5
1939: PUSH
1940: LD_INT 10
1942: NEG
1943: PUSH
1944: LD_OWVAR 67
1948: PUSH
1949: LD_INT 20
1951: MUL
1952: PLUS
1953: ST_TO_ADDR
// count = [ 15 , 13 , 10 ] [ difficulty ] ;
1954: LD_ADDR_VAR 0 6
1958: PUSH
1959: LD_INT 15
1961: PUSH
1962: LD_INT 13
1964: PUSH
1965: LD_INT 10
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_OWVAR 67
1977: ARRAY
1978: ST_TO_ADDR
// hc_class = class_apeman ;
1979: LD_ADDR_OWVAR 28
1983: PUSH
1984: LD_INT 12
1986: ST_TO_ADDR
// for i = 1 to count do
1987: LD_ADDR_VAR 0 2
1991: PUSH
1992: DOUBLE
1993: LD_INT 1
1995: DEC
1996: ST_TO_ADDR
1997: LD_VAR 0 6
2001: PUSH
2002: FOR_TO
2003: IFFALSE 2240
// begin if spots = 0 then
2005: LD_VAR 0 3
2009: PUSH
2010: LD_INT 0
2012: EQUAL
2013: IFFALSE 2019
// exit ;
2015: POP
2016: POP
2017: GO 2242
// uc_direction = Rand ( 0 , 5 ) ;
2019: LD_ADDR_OWVAR 24
2023: PUSH
2024: LD_INT 0
2026: PPUSH
2027: LD_INT 5
2029: PPUSH
2030: CALL_OW 12
2034: ST_TO_ADDR
// hc_agressivity = Rand ( - 1 * agres , agres ) ;
2035: LD_ADDR_OWVAR 35
2039: PUSH
2040: LD_INT 1
2042: NEG
2043: PUSH
2044: LD_VAR 0 5
2048: MUL
2049: PPUSH
2050: LD_VAR 0 5
2054: PPUSH
2055: CALL_OW 12
2059: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
2060: LD_ADDR_OWVAR 29
2064: PUSH
2065: LD_INT 11
2067: PPUSH
2068: LD_INT 13
2070: PPUSH
2071: CALL_OW 12
2075: PUSH
2076: LD_INT 10
2078: PPUSH
2079: LD_INT 11
2081: PPUSH
2082: CALL_OW 12
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
2091: LD_ADDR_OWVAR 27
2095: PUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 12
2106: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , Rand ( 0 , 1 ) , 0 , 0 ] ;
2107: LD_ADDR_OWVAR 31
2111: PUSH
2112: LD_INT 0
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: CALL_OW 12
2122: PUSH
2123: LD_INT 0
2125: PPUSH
2126: LD_INT 1
2128: PPUSH
2129: CALL_OW 12
2133: PUSH
2134: LD_INT 0
2136: PUSH
2137: LD_INT 0
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: ST_TO_ADDR
// num = Rand ( 1 , spots ) ;
2146: LD_ADDR_VAR 0 4
2150: PUSH
2151: LD_INT 1
2153: PPUSH
2154: LD_VAR 0 3
2158: PPUSH
2159: CALL_OW 12
2163: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , spots [ num ] [ 1 ] , spots [ num ] [ 2 ] , 5 , false ) ;
2164: CALL_OW 44
2168: PPUSH
2169: LD_VAR 0 3
2173: PUSH
2174: LD_VAR 0 4
2178: ARRAY
2179: PUSH
2180: LD_INT 1
2182: ARRAY
2183: PPUSH
2184: LD_VAR 0 3
2188: PUSH
2189: LD_VAR 0 4
2193: ARRAY
2194: PUSH
2195: LD_INT 2
2197: ARRAY
2198: PPUSH
2199: LD_INT 5
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 50
// if Prob ( 50 ) then
2209: LD_INT 50
2211: PPUSH
2212: CALL_OW 13
2216: IFFALSE 2238
// spots = Delete ( spots , num ) ;
2218: LD_ADDR_VAR 0 3
2222: PUSH
2223: LD_VAR 0 3
2227: PPUSH
2228: LD_VAR 0 4
2232: PPUSH
2233: CALL_OW 3
2237: ST_TO_ADDR
// end ;
2238: GO 2002
2240: POP
2241: POP
// end ;
2242: LD_VAR 0 1
2246: RET
// function PrepareArabians ; var human_list , i , temp_unit , val , k , gensher_bunker_apes ; begin
2247: LD_INT 0
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
// InitHc ;
2256: CALL_OW 19
// InitUc ;
2260: CALL_OW 18
// uc_side = you ;
2264: LD_ADDR_OWVAR 20
2268: PUSH
2269: LD_EXP 2
2273: ST_TO_ADDR
// uc_nation = nation_arabian ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 2
2281: ST_TO_ADDR
// if not testing then
2282: LD_EXP 1
2286: NOT
2287: IFFALSE 2880
// begin Heike = CreateCharacter ( Heike_11_sel ) ;
2289: LD_ADDR_EXP 9
2293: PUSH
2294: LD_STRING Heike_11_sel
2296: PPUSH
2297: CALL_OW 34
2301: ST_TO_ADDR
// if TestCharacters ( Oswald_11_sel ) then
2302: LD_STRING Oswald_11_sel
2304: PPUSH
2305: CALL_OW 28
2309: IFFALSE 2326
// Oswald = CreateCharacter ( Oswald_11_sel ) else
2311: LD_ADDR_EXP 11
2315: PUSH
2316: LD_STRING Oswald_11_sel
2318: PPUSH
2319: CALL_OW 34
2323: ST_TO_ADDR
2324: GO 2334
// Oswald = 0 ;
2326: LD_ADDR_EXP 11
2330: PUSH
2331: LD_INT 0
2333: ST_TO_ADDR
// oswald_is_substitute = LoadVariable ( Oswald_is_substitute_10 , false ) ;
2334: LD_ADDR_EXP 80
2338: PUSH
2339: LD_STRING Oswald_is_substitute_10
2341: PPUSH
2342: LD_INT 0
2344: PPUSH
2345: CALL_OW 30
2349: ST_TO_ADDR
// if TestCharacters ( Kurt_11_sel ) then
2350: LD_STRING Kurt_11_sel
2352: PPUSH
2353: CALL_OW 28
2357: IFFALSE 2374
// Kurt = CreateCharacter ( Kurt_11_sel ) else
2359: LD_ADDR_EXP 17
2363: PUSH
2364: LD_STRING Kurt_11_sel
2366: PPUSH
2367: CALL_OW 34
2371: ST_TO_ADDR
2372: GO 2382
// Kurt = 0 ;
2374: LD_ADDR_EXP 17
2378: PUSH
2379: LD_INT 0
2381: ST_TO_ADDR
// kurt_is_substitute = LoadVariable ( Kurt_is_substitute_10 , false ) ;
2382: LD_ADDR_EXP 81
2386: PUSH
2387: LD_STRING Kurt_is_substitute_10
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 30
2397: ST_TO_ADDR
// if TestCharacters ( Sonya_11_sel ) then
2398: LD_STRING Sonya_11_sel
2400: PPUSH
2401: CALL_OW 28
2405: IFFALSE 2422
// Sonya = CreateCharacter ( Sonya_11_sel ) else
2407: LD_ADDR_EXP 10
2411: PUSH
2412: LD_STRING Sonya_11_sel
2414: PPUSH
2415: CALL_OW 34
2419: ST_TO_ADDR
2420: GO 2430
// Sonya = 0 ;
2422: LD_ADDR_EXP 10
2426: PUSH
2427: LD_INT 0
2429: ST_TO_ADDR
// if TestCharacters ( Ralph_11_sel ) then
2430: LD_STRING Ralph_11_sel
2432: PPUSH
2433: CALL_OW 28
2437: IFFALSE 2454
// Ralph = CreateCharacter ( Ralph_11_sel ) else
2439: LD_ADDR_EXP 12
2443: PUSH
2444: LD_STRING Ralph_11_sel
2446: PPUSH
2447: CALL_OW 34
2451: ST_TO_ADDR
2452: GO 2462
// Ralph = 0 ;
2454: LD_ADDR_EXP 12
2458: PUSH
2459: LD_INT 0
2461: ST_TO_ADDR
// if TestCharacters ( Kowalski_11_sel ) then
2462: LD_STRING Kowalski_11_sel
2464: PPUSH
2465: CALL_OW 28
2469: IFFALSE 2486
// Kowalski = CreateCharacter ( Kowalski_11_sel ) else
2471: LD_ADDR_EXP 13
2475: PUSH
2476: LD_STRING Kowalski_11_sel
2478: PPUSH
2479: CALL_OW 34
2483: ST_TO_ADDR
2484: GO 2494
// Kowalski = 0 ;
2486: LD_ADDR_EXP 13
2490: PUSH
2491: LD_INT 0
2493: ST_TO_ADDR
// if TestCharacters ( Evelyn_11_sel ) then
2494: LD_STRING Evelyn_11_sel
2496: PPUSH
2497: CALL_OW 28
2501: IFFALSE 2518
// Evelyn = CreateCharacter ( Evelyn_11_sel ) else
2503: LD_ADDR_EXP 14
2507: PUSH
2508: LD_STRING Evelyn_11_sel
2510: PPUSH
2511: CALL_OW 34
2515: ST_TO_ADDR
2516: GO 2526
// Evelyn = 0 ;
2518: LD_ADDR_EXP 14
2522: PUSH
2523: LD_INT 0
2525: ST_TO_ADDR
// if TestCharacters ( Suze_11_sel ) then
2526: LD_STRING Suze_11_sel
2528: PPUSH
2529: CALL_OW 28
2533: IFFALSE 2550
// Suze = CreateCharacter ( Suze_11_sel ) else
2535: LD_ADDR_EXP 15
2539: PUSH
2540: LD_STRING Suze_11_sel
2542: PPUSH
2543: CALL_OW 34
2547: ST_TO_ADDR
2548: GO 2558
// Suze = 0 ;
2550: LD_ADDR_EXP 15
2554: PUSH
2555: LD_INT 0
2557: ST_TO_ADDR
// if TestCharacters ( Olaf_11_sel ) then
2558: LD_STRING Olaf_11_sel
2560: PPUSH
2561: CALL_OW 28
2565: IFFALSE 2582
// Olaf = CreateCharacter ( Olaf_11_sel ) else
2567: LD_ADDR_EXP 16
2571: PUSH
2572: LD_STRING Olaf_11_sel
2574: PPUSH
2575: CALL_OW 34
2579: ST_TO_ADDR
2580: GO 2590
// Olaf = 0 ;
2582: LD_ADDR_EXP 16
2586: PUSH
2587: LD_INT 0
2589: ST_TO_ADDR
// if TestCharacters ( Dwayne_11_sel ) then
2590: LD_STRING Dwayne_11_sel
2592: PPUSH
2593: CALL_OW 28
2597: IFFALSE 2614
// Dwayne = CreateCharacter ( Dwayne_11_sel ) else
2599: LD_ADDR_EXP 18
2603: PUSH
2604: LD_STRING Dwayne_11_sel
2606: PPUSH
2607: CALL_OW 34
2611: ST_TO_ADDR
2612: GO 2622
// Dwayne = 0 ;
2614: LD_ADDR_EXP 18
2618: PUSH
2619: LD_INT 0
2621: ST_TO_ADDR
// if TestCharacters ( MarkB_11_sel ) then
2622: LD_STRING MarkB_11_sel
2624: PPUSH
2625: CALL_OW 28
2629: IFFALSE 2646
// MarkB = CreateCharacter ( MarkB_11_sel ) else
2631: LD_ADDR_EXP 19
2635: PUSH
2636: LD_STRING MarkB_11_sel
2638: PPUSH
2639: CALL_OW 34
2643: ST_TO_ADDR
2644: GO 2654
// MarkB = 0 ;
2646: LD_ADDR_EXP 19
2650: PUSH
2651: LD_INT 0
2653: ST_TO_ADDR
// if TestCharacters ( Aviradze_11_sel ) then
2654: LD_STRING Aviradze_11_sel
2656: PPUSH
2657: CALL_OW 28
2661: IFFALSE 2678
// Aviradze = CreateCharacter ( Aviradze_11_sel ) else
2663: LD_ADDR_EXP 20
2667: PUSH
2668: LD_STRING Aviradze_11_sel
2670: PPUSH
2671: CALL_OW 34
2675: ST_TO_ADDR
2676: GO 2686
// Aviradze = 0 ;
2678: LD_ADDR_EXP 20
2682: PUSH
2683: LD_INT 0
2685: ST_TO_ADDR
// if TestCharacters ( Swansson_11_sel ) then
2686: LD_STRING Swansson_11_sel
2688: PPUSH
2689: CALL_OW 28
2693: IFFALSE 2710
// Swansson = CreateCharacter ( Swansson_11_sel ) else
2695: LD_ADDR_EXP 21
2699: PUSH
2700: LD_STRING Swansson_11_sel
2702: PPUSH
2703: CALL_OW 34
2707: ST_TO_ADDR
2708: GO 2718
// Swansson = 0 ;
2710: LD_ADDR_EXP 21
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
// human_list = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] diff 0 ;
2718: LD_ADDR_VAR 0 2
2722: PUSH
2723: LD_EXP 9
2727: PUSH
2728: LD_EXP 10
2732: PUSH
2733: LD_EXP 11
2737: PUSH
2738: LD_EXP 12
2742: PUSH
2743: LD_EXP 13
2747: PUSH
2748: LD_EXP 14
2752: PUSH
2753: LD_EXP 15
2757: PUSH
2758: LD_EXP 16
2762: PUSH
2763: LD_EXP 17
2767: PUSH
2768: LD_EXP 18
2772: PUSH
2773: LD_EXP 19
2777: PUSH
2778: LD_EXP 20
2782: PUSH
2783: LD_EXP 21
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 0
2805: DIFF
2806: ST_TO_ADDR
// human_list = human_list ^ ( CreateCharacterSet ( Others_11_sel ) diff 0 ) ;
2807: LD_ADDR_VAR 0 2
2811: PUSH
2812: LD_VAR 0 2
2816: PUSH
2817: LD_STRING Others_11_sel
2819: PPUSH
2820: CALL_OW 31
2824: PUSH
2825: LD_INT 0
2827: DIFF
2828: ADD
2829: ST_TO_ADDR
// if TestCharacters ( Gonzo_10 ) then
2830: LD_STRING Gonzo_10
2832: PPUSH
2833: CALL_OW 28
2837: IFFALSE 2870
// begin Gonzo = CreateCharacter ( Gonzo_10 ) ;
2839: LD_ADDR_EXP 22
2843: PUSH
2844: LD_STRING Gonzo_10
2846: PPUSH
2847: CALL_OW 34
2851: ST_TO_ADDR
// human_list = human_list ^ Gonzo ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_VAR 0 2
2861: PUSH
2862: LD_EXP 22
2866: ADD
2867: ST_TO_ADDR
// end else
2868: GO 2878
// Gonzo = 0 ;
2870: LD_ADDR_EXP 22
2874: PUSH
2875: LD_INT 0
2877: ST_TO_ADDR
// end else
2878: GO 3413
// begin InitHc ;
2880: CALL_OW 19
// PrepareSoldier ( sex_female , 7 ) ;
2884: LD_INT 2
2886: PPUSH
2887: LD_INT 7
2889: PPUSH
2890: CALL_OW 381
// hc_name = Heike ;
2894: LD_ADDR_OWVAR 26
2898: PUSH
2899: LD_STRING Heike
2901: ST_TO_ADDR
// Heike = CreateHuman ;
2902: LD_ADDR_EXP 9
2906: PUSH
2907: CALL_OW 44
2911: ST_TO_ADDR
// PrepareScientist ( sex_female , 7 ) ;
2912: LD_INT 2
2914: PPUSH
2915: LD_INT 7
2917: PPUSH
2918: CALL_OW 384
// hc_name = Sonya ;
2922: LD_ADDR_OWVAR 26
2926: PUSH
2927: LD_STRING Sonya
2929: ST_TO_ADDR
// Sonya = CreateHuman ;
2930: LD_ADDR_EXP 10
2934: PUSH
2935: CALL_OW 44
2939: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 7
2945: PPUSH
2946: CALL_OW 381
// hc_name = Oswald ;
2950: LD_ADDR_OWVAR 26
2954: PUSH
2955: LD_STRING Oswald
2957: ST_TO_ADDR
// Oswald = CreateHuman ;
2958: LD_ADDR_EXP 11
2962: PUSH
2963: CALL_OW 44
2967: ST_TO_ADDR
// oswald_is_substitute = false ;
2968: LD_ADDR_EXP 80
2972: PUSH
2973: LD_INT 0
2975: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
2976: LD_INT 1
2978: PPUSH
2979: LD_INT 7
2981: PPUSH
2982: CALL_OW 381
// hc_name = Ralph ;
2986: LD_ADDR_OWVAR 26
2990: PUSH
2991: LD_STRING Ralph
2993: ST_TO_ADDR
// Ralph = CreateHuman ;
2994: LD_ADDR_EXP 12
2998: PUSH
2999: CALL_OW 44
3003: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3004: LD_INT 1
3006: PPUSH
3007: LD_INT 7
3009: PPUSH
3010: CALL_OW 381
// hc_name = Kowalski ;
3014: LD_ADDR_OWVAR 26
3018: PUSH
3019: LD_STRING Kowalski
3021: ST_TO_ADDR
// Kowalski = CreateHuman ;
3022: LD_ADDR_EXP 13
3026: PUSH
3027: CALL_OW 44
3031: ST_TO_ADDR
// PrepareEngineer ( sex_female , 7 ) ;
3032: LD_INT 2
3034: PPUSH
3035: LD_INT 7
3037: PPUSH
3038: CALL_OW 382
// hc_name = Evelyn ;
3042: LD_ADDR_OWVAR 26
3046: PUSH
3047: LD_STRING Evelyn
3049: ST_TO_ADDR
// Evelyn = CreateHuman ;
3050: LD_ADDR_EXP 14
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// PrepareSoldier ( sex_female , 7 ) ;
3060: LD_INT 2
3062: PPUSH
3063: LD_INT 7
3065: PPUSH
3066: CALL_OW 381
// hc_name = Suze ;
3070: LD_ADDR_OWVAR 26
3074: PUSH
3075: LD_STRING Suze
3077: ST_TO_ADDR
// Suze = CreateHuman ;
3078: LD_ADDR_EXP 15
3082: PUSH
3083: CALL_OW 44
3087: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
3088: LD_INT 1
3090: PPUSH
3091: LD_INT 7
3093: PPUSH
3094: CALL_OW 383
// hc_name = Olaf ;
3098: LD_ADDR_OWVAR 26
3102: PUSH
3103: LD_STRING Olaf
3105: ST_TO_ADDR
// Olaf = CreateHuman ;
3106: LD_ADDR_EXP 16
3110: PUSH
3111: CALL_OW 44
3115: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3116: LD_INT 1
3118: PPUSH
3119: LD_INT 7
3121: PPUSH
3122: CALL_OW 381
// hc_name = Kurt ;
3126: LD_ADDR_OWVAR 26
3130: PUSH
3131: LD_STRING Kurt
3133: ST_TO_ADDR
// Kurt = CreateHuman ;
3134: LD_ADDR_EXP 17
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// kurt_is_substitute = false ;
3144: LD_ADDR_EXP 81
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
3152: LD_INT 1
3154: PPUSH
3155: LD_INT 7
3157: PPUSH
3158: CALL_OW 383
// hc_name = Dwayne ;
3162: LD_ADDR_OWVAR 26
3166: PUSH
3167: LD_STRING Dwayne
3169: ST_TO_ADDR
// Dwayne = CreateHuman ;
3170: LD_ADDR_EXP 18
3174: PUSH
3175: CALL_OW 44
3179: ST_TO_ADDR
// PrepareScientist ( sex_male , 7 ) ;
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 7
3185: PPUSH
3186: CALL_OW 384
// hc_name = Mark ;
3190: LD_ADDR_OWVAR 26
3194: PUSH
3195: LD_STRING Mark
3197: ST_TO_ADDR
// MarkB = CreateHuman ;
3198: LD_ADDR_EXP 19
3202: PUSH
3203: CALL_OW 44
3207: ST_TO_ADDR
// Aviradze = 0 ;
3208: LD_ADDR_EXP 20
3212: PUSH
3213: LD_INT 0
3215: ST_TO_ADDR
// Swansson = 0 ;
3216: LD_ADDR_EXP 21
3220: PUSH
3221: LD_INT 0
3223: ST_TO_ADDR
// human_list = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] diff 0 ;
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: LD_EXP 9
3233: PUSH
3234: LD_EXP 10
3238: PUSH
3239: LD_EXP 11
3243: PUSH
3244: LD_EXP 12
3248: PUSH
3249: LD_EXP 13
3253: PUSH
3254: LD_EXP 14
3258: PUSH
3259: LD_EXP 15
3263: PUSH
3264: LD_EXP 16
3268: PUSH
3269: LD_EXP 17
3273: PUSH
3274: LD_EXP 18
3278: PUSH
3279: LD_EXP 19
3283: PUSH
3284: LD_EXP 20
3288: PUSH
3289: LD_EXP 21
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 0
3311: DIFF
3312: ST_TO_ADDR
// InitHc ;
3313: CALL_OW 19
// uc_nation = nation_nature ;
3317: LD_ADDR_OWVAR 21
3321: PUSH
3322: LD_INT 0
3324: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
3325: LD_ADDR_OWVAR 28
3329: PUSH
3330: LD_INT 15
3332: ST_TO_ADDR
// hc_name = Gonzo ;
3333: LD_ADDR_OWVAR 26
3337: PUSH
3338: LD_STRING Gonzo
3340: ST_TO_ADDR
// hc_skills = [ 3 , 1 , 0 , 0 ] ;
3341: LD_ADDR_OWVAR 31
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: LD_INT 0
3354: PUSH
3355: LD_INT 0
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: ST_TO_ADDR
// hc_attr = [ 13 , 12 ] ;
3364: LD_ADDR_OWVAR 29
3368: PUSH
3369: LD_INT 13
3371: PUSH
3372: LD_INT 12
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: ST_TO_ADDR
// hc_sex = sex_male ;
3379: LD_ADDR_OWVAR 27
3383: PUSH
3384: LD_INT 1
3386: ST_TO_ADDR
// Gonzo = CreateHuman ;
3387: LD_ADDR_EXP 22
3391: PUSH
3392: CALL_OW 44
3396: ST_TO_ADDR
// human_list = human_list ^ Gonzo ;
3397: LD_ADDR_VAR 0 2
3401: PUSH
3402: LD_VAR 0 2
3406: PUSH
3407: LD_EXP 22
3411: ADD
3412: ST_TO_ADDR
// end ; InitVc ;
3413: CALL_OW 20
// uc_direction = 5 ;
3417: LD_ADDR_OWVAR 24
3421: PUSH
3422: LD_INT 5
3424: ST_TO_ADDR
// uc_nation = nation_arabian ;
3425: LD_ADDR_OWVAR 21
3429: PUSH
3430: LD_INT 2
3432: ST_TO_ADDR
// vc_engine = engine_combustion ;
3433: LD_ADDR_OWVAR 39
3437: PUSH
3438: LD_INT 1
3440: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
3441: LD_ADDR_OWVAR 37
3445: PUSH
3446: LD_INT 14
3448: ST_TO_ADDR
// vc_control = control_manual ;
3449: LD_ADDR_OWVAR 38
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// vc_weapon = ar_cargo_bay ;
3457: LD_ADDR_OWVAR 40
3461: PUSH
3462: LD_INT 32
3464: ST_TO_ADDR
// for i = 1 to 2 do
3465: LD_ADDR_VAR 0 3
3469: PUSH
3470: DOUBLE
3471: LD_INT 1
3473: DEC
3474: ST_TO_ADDR
3475: LD_INT 2
3477: PUSH
3478: FOR_TO
3479: IFFALSE 3800
// begin temp_unit = CreateVehicle ;
3481: LD_ADDR_VAR 0 4
3485: PUSH
3486: CALL_OW 45
3490: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
3491: LD_VAR 0 4
3495: PPUSH
3496: LD_INT 50
3498: PPUSH
3499: LD_INT 70
3501: PPUSH
3502: CALL_OW 12
3506: PPUSH
3507: CALL_OW 240
// val = Rand ( 1 , human_list - 1 ) ;
3511: LD_ADDR_VAR 0 5
3515: PUSH
3516: LD_INT 1
3518: PPUSH
3519: LD_VAR 0 2
3523: PUSH
3524: LD_INT 1
3526: MINUS
3527: PPUSH
3528: CALL_OW 12
3532: ST_TO_ADDR
// PlaceHumanInUnit ( human_list [ val ] , temp_unit ) ;
3533: LD_VAR 0 2
3537: PUSH
3538: LD_VAR 0 5
3542: ARRAY
3543: PPUSH
3544: LD_VAR 0 4
3548: PPUSH
3549: CALL_OW 52
// human_list = Delete ( human_list , val ) ;
3553: LD_ADDR_VAR 0 2
3557: PUSH
3558: LD_VAR 0 2
3562: PPUSH
3563: LD_VAR 0 5
3567: PPUSH
3568: CALL_OW 3
3572: ST_TO_ADDR
// case i of 1 :
3573: LD_VAR 0 3
3577: PUSH
3578: LD_INT 1
3580: DOUBLE
3581: EQUAL
3582: IFTRUE 3586
3584: GO 3604
3586: POP
// begin SetCargo ( temp_unit , mat_cans , 100 ) ;
3587: LD_VAR 0 4
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 100
3597: PPUSH
3598: CALL_OW 290
// end ; 2 :
3602: GO 3783
3604: LD_INT 2
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3612
3610: GO 3782
3612: POP
// begin val = [ 90 , 70 , 50 ] [ difficulty ] ;
3613: LD_ADDR_VAR 0 5
3617: PUSH
3618: LD_INT 90
3620: PUSH
3621: LD_INT 70
3623: PUSH
3624: LD_INT 50
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: PUSH
3632: LD_OWVAR 67
3636: ARRAY
3637: ST_TO_ADDR
// if LoadVariable ( Abdul_doubt_07 , false ) then
3638: LD_STRING Abdul_doubt_07
3640: PPUSH
3641: LD_INT 0
3643: PPUSH
3644: CALL_OW 30
3648: IFFALSE 3664
// val = val - 50 ;
3650: LD_ADDR_VAR 0 5
3654: PUSH
3655: LD_VAR 0 5
3659: PUSH
3660: LD_INT 50
3662: MINUS
3663: ST_TO_ADDR
// if LoadVariable ( Siberite_gathered_on_time_07_cont , true ) then
3664: LD_STRING Siberite_gathered_on_time_07_cont
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 30
3674: IFFALSE 3710
// begin val = val + 20 ;
3676: LD_ADDR_VAR 0 5
3680: PUSH
3681: LD_VAR 0 5
3685: PUSH
3686: LD_INT 20
3688: PLUS
3689: ST_TO_ADDR
// if val > 100 then
3690: LD_VAR 0 5
3694: PUSH
3695: LD_INT 100
3697: GREATER
3698: IFFALSE 3708
// val = 100 ;
3700: LD_ADDR_VAR 0 5
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// end else
3708: GO 3724
// val = val - 50 ;
3710: LD_ADDR_VAR 0 5
3714: PUSH
3715: LD_VAR 0 5
3719: PUSH
3720: LD_INT 50
3722: MINUS
3723: ST_TO_ADDR
// if val < 0 then
3724: LD_VAR 0 5
3728: PUSH
3729: LD_INT 0
3731: LESS
3732: IFFALSE 3742
// val = 0 ;
3734: LD_ADDR_VAR 0 5
3738: PUSH
3739: LD_INT 0
3741: ST_TO_ADDR
// SetCargo ( temp_unit , mat_cans , val ) ;
3742: LD_VAR 0 4
3746: PPUSH
3747: LD_INT 1
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: CALL_OW 290
// AddCargo ( temp_unit , mat_oil , 100 - val ) ;
3759: LD_VAR 0 4
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: LD_INT 100
3769: PUSH
3770: LD_VAR 0 5
3774: MINUS
3775: PPUSH
3776: CALL_OW 291
// end ; end ;
3780: GO 3783
3782: POP
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_INT 8
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
// end ;
3798: GO 3478
3800: POP
3801: POP
// val = 0 ;
3802: LD_ADDR_VAR 0 5
3806: PUSH
3807: LD_INT 0
3809: ST_TO_ADDR
// for i = 1 to [ 3 , 2 , 1 ] [ difficulty ] - LoadVariable ( Abdul_doubt_07 , false ) do
3810: LD_ADDR_VAR 0 3
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_INT 3
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: LD_INT 1
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: LIST
3833: PUSH
3834: LD_OWVAR 67
3838: ARRAY
3839: PUSH
3840: LD_STRING Abdul_doubt_07
3842: PPUSH
3843: LD_INT 0
3845: PPUSH
3846: CALL_OW 30
3850: MINUS
3851: PUSH
3852: FOR_TO
3853: IFFALSE 4399
// begin vc_engine = engine_combustion ;
3855: LD_ADDR_OWVAR 39
3859: PUSH
3860: LD_INT 1
3862: ST_TO_ADDR
// if val = 0 then
3863: LD_VAR 0 5
3867: PUSH
3868: LD_INT 0
3870: EQUAL
3871: IFFALSE 3963
// begin case Rand ( 1 , 4 ) of 1 :
3873: LD_INT 1
3875: PPUSH
3876: LD_INT 4
3878: PPUSH
3879: CALL_OW 12
3883: PUSH
3884: LD_INT 1
3886: DOUBLE
3887: EQUAL
3888: IFTRUE 3892
3890: GO 3903
3892: POP
// vc_chassis = ar_hovercraft ; 2 :
3893: LD_ADDR_OWVAR 37
3897: PUSH
3898: LD_INT 11
3900: ST_TO_ADDR
3901: GO 3961
3903: LD_INT 2
3905: DOUBLE
3906: EQUAL
3907: IFTRUE 3911
3909: GO 3922
3911: POP
// vc_chassis = ar_light_trike ; 3 :
3912: LD_ADDR_OWVAR 37
3916: PUSH
3917: LD_INT 12
3919: ST_TO_ADDR
3920: GO 3961
3922: LD_INT 3
3924: DOUBLE
3925: EQUAL
3926: IFTRUE 3930
3928: GO 3941
3930: POP
// vc_chassis = ar_medium_trike ; 4 :
3931: LD_ADDR_OWVAR 37
3935: PUSH
3936: LD_INT 13
3938: ST_TO_ADDR
3939: GO 3961
3941: LD_INT 4
3943: DOUBLE
3944: EQUAL
3945: IFTRUE 3949
3947: GO 3960
3949: POP
// vc_chassis = ar_half_tracked ; end ;
3950: LD_ADDR_OWVAR 37
3954: PUSH
3955: LD_INT 14
3957: ST_TO_ADDR
3958: GO 3961
3960: POP
// end else
3961: GO 4013
// begin case Rand ( 1 , 2 ) of 1 :
3963: LD_INT 1
3965: PPUSH
3966: LD_INT 2
3968: PPUSH
3969: CALL_OW 12
3973: PUSH
3974: LD_INT 1
3976: DOUBLE
3977: EQUAL
3978: IFTRUE 3982
3980: GO 3993
3982: POP
// vc_chassis = ar_medium_trike ; 2 :
3983: LD_ADDR_OWVAR 37
3987: PUSH
3988: LD_INT 13
3990: ST_TO_ADDR
3991: GO 4013
3993: LD_INT 2
3995: DOUBLE
3996: EQUAL
3997: IFTRUE 4001
3999: GO 4012
4001: POP
// vc_chassis = ar_half_tracked ; end ;
4002: LD_ADDR_OWVAR 37
4006: PUSH
4007: LD_INT 14
4009: ST_TO_ADDR
4010: GO 4013
4012: POP
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
4013: LD_OWVAR 37
4017: PUSH
4018: LD_INT 11
4020: PUSH
4021: LD_INT 12
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: IN
4028: IFFALSE 4158
// begin val = val + 1 ;
4030: LD_ADDR_VAR 0 5
4034: PUSH
4035: LD_VAR 0 5
4039: PUSH
4040: LD_INT 1
4042: PLUS
4043: ST_TO_ADDR
// case Rand ( 1 , 4 ) of 1 :
4044: LD_INT 1
4046: PPUSH
4047: LD_INT 4
4049: PPUSH
4050: CALL_OW 12
4054: PUSH
4055: LD_INT 1
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4074
4063: POP
// vc_weapon = ar_multimissile_ballista ; 2 :
4064: LD_ADDR_OWVAR 40
4068: PUSH
4069: LD_INT 22
4071: ST_TO_ADDR
4072: GO 4132
4074: LD_INT 2
4076: DOUBLE
4077: EQUAL
4078: IFTRUE 4082
4080: GO 4093
4082: POP
// vc_weapon = ar_light_gun ; 3 :
4083: LD_ADDR_OWVAR 40
4087: PUSH
4088: LD_INT 23
4090: ST_TO_ADDR
4091: GO 4132
4093: LD_INT 3
4095: DOUBLE
4096: EQUAL
4097: IFTRUE 4101
4099: GO 4112
4101: POP
// vc_weapon = ar_double_machine_gun ; 4 :
4102: LD_ADDR_OWVAR 40
4106: PUSH
4107: LD_INT 24
4109: ST_TO_ADDR
4110: GO 4132
4112: LD_INT 4
4114: DOUBLE
4115: EQUAL
4116: IFTRUE 4120
4118: GO 4131
4120: POP
// vc_weapon = ar_radar ; end ;
4121: LD_ADDR_OWVAR 40
4125: PUSH
4126: LD_INT 30
4128: ST_TO_ADDR
4129: GO 4132
4131: POP
// if Rand ( 1 , 2 ) = 1 then
4132: LD_INT 1
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: CALL_OW 12
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4156
// vc_engine = engine_solar ;
4148: LD_ADDR_OWVAR 39
4152: PUSH
4153: LD_INT 2
4155: ST_TO_ADDR
// end else
4156: GO 4246
// begin case Rand ( 1 , 4 ) of 1 :
4158: LD_INT 1
4160: PPUSH
4161: LD_INT 4
4163: PPUSH
4164: CALL_OW 12
4168: PUSH
4169: LD_INT 1
4171: DOUBLE
4172: EQUAL
4173: IFTRUE 4177
4175: GO 4188
4177: POP
// vc_weapon = ar_gatling_gun ; 2 :
4178: LD_ADDR_OWVAR 40
4182: PUSH
4183: LD_INT 25
4185: ST_TO_ADDR
4186: GO 4246
4188: LD_INT 2
4190: DOUBLE
4191: EQUAL
4192: IFTRUE 4196
4194: GO 4207
4196: POP
// vc_weapon = ar_gun ; 3 :
4197: LD_ADDR_OWVAR 40
4201: PUSH
4202: LD_INT 27
4204: ST_TO_ADDR
4205: GO 4246
4207: LD_INT 3
4209: DOUBLE
4210: EQUAL
4211: IFTRUE 4215
4213: GO 4226
4215: POP
// vc_weapon = ar_flame_thrower ; 4 :
4216: LD_ADDR_OWVAR 40
4220: PUSH
4221: LD_INT 26
4223: ST_TO_ADDR
4224: GO 4246
4226: LD_INT 4
4228: DOUBLE
4229: EQUAL
4230: IFTRUE 4234
4232: GO 4245
4234: POP
// vc_weapon = ar_rocket_launcher ; end ;
4235: LD_ADDR_OWVAR 40
4239: PUSH
4240: LD_INT 28
4242: ST_TO_ADDR
4243: GO 4246
4245: POP
// end ; if Rand ( 1 , 5 ) <= 2 then
4246: LD_INT 1
4248: PPUSH
4249: LD_INT 5
4251: PPUSH
4252: CALL_OW 12
4256: PUSH
4257: LD_INT 2
4259: LESSEQUAL
4260: IFFALSE 4272
// vc_control = control_apeman else
4262: LD_ADDR_OWVAR 38
4266: PUSH
4267: LD_INT 5
4269: ST_TO_ADDR
4270: GO 4280
// vc_control = control_manual ;
4272: LD_ADDR_OWVAR 38
4276: PUSH
4277: LD_INT 1
4279: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4280: LD_ADDR_VAR 0 4
4284: PUSH
4285: CALL_OW 45
4289: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 50
4297: PPUSH
4298: LD_INT 70
4300: PPUSH
4301: CALL_OW 12
4305: PPUSH
4306: CALL_OW 240
// if vc_control = control_manual then
4310: LD_OWVAR 38
4314: PUSH
4315: LD_INT 1
4317: EQUAL
4318: IFFALSE 4382
// begin val = Rand ( 1 , human_list - 1 ) ;
4320: LD_ADDR_VAR 0 5
4324: PUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_VAR 0 2
4332: PUSH
4333: LD_INT 1
4335: MINUS
4336: PPUSH
4337: CALL_OW 12
4341: ST_TO_ADDR
// PlaceHumanInUnit ( human_list [ val ] , temp_unit ) ;
4342: LD_VAR 0 2
4346: PUSH
4347: LD_VAR 0 5
4351: ARRAY
4352: PPUSH
4353: LD_VAR 0 4
4357: PPUSH
4358: CALL_OW 52
// human_list = Delete ( human_list , val ) ;
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: LD_VAR 0 2
4371: PPUSH
4372: LD_VAR 0 5
4376: PPUSH
4377: CALL_OW 3
4381: ST_TO_ADDR
// end ; PlaceUnitArea ( temp_unit , enter_area , false ) ;
4382: LD_VAR 0 4
4386: PPUSH
4387: LD_INT 8
4389: PPUSH
4390: LD_INT 0
4392: PPUSH
4393: CALL_OW 49
// end ;
4397: GO 3852
4399: POP
4400: POP
// for i in human_list do
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: LD_VAR 0 2
4410: PUSH
4411: FOR_IN
4412: IFFALSE 4431
// PlaceUnitArea ( i , enter_area , false ) ;
4414: LD_VAR 0 3
4418: PPUSH
4419: LD_INT 8
4421: PPUSH
4422: LD_INT 0
4424: PPUSH
4425: CALL_OW 49
4429: GO 4411
4431: POP
4432: POP
// vc_engine = engine_solar ;
4433: LD_ADDR_OWVAR 39
4437: PUSH
4438: LD_INT 2
4440: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
4441: LD_ADDR_OWVAR 37
4445: PUSH
4446: LD_INT 11
4448: ST_TO_ADDR
// vc_control = control_apeman ;
4449: LD_ADDR_OWVAR 38
4453: PUSH
4454: LD_INT 5
4456: ST_TO_ADDR
// vc_weapon = ar_radar ;
4457: LD_ADDR_OWVAR 40
4461: PUSH
4462: LD_INT 30
4464: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4465: LD_ADDR_VAR 0 4
4469: PUSH
4470: CALL_OW 45
4474: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 50
4482: PPUSH
4483: LD_INT 70
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: CALL_OW 240
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
4495: LD_VAR 0 4
4499: PPUSH
4500: LD_INT 8
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 49
// vc_engine = engine_solar ;
4510: LD_ADDR_OWVAR 39
4514: PUSH
4515: LD_INT 2
4517: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
4518: LD_ADDR_OWVAR 37
4522: PUSH
4523: LD_INT 14
4525: ST_TO_ADDR
// vc_control = control_apeman ;
4526: LD_ADDR_OWVAR 38
4530: PUSH
4531: LD_INT 5
4533: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
4534: LD_ADDR_OWVAR 40
4538: PUSH
4539: LD_INT 28
4541: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4542: LD_ADDR_VAR 0 4
4546: PUSH
4547: CALL_OW 45
4551: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4552: LD_VAR 0 4
4556: PPUSH
4557: LD_INT 50
4559: PPUSH
4560: LD_INT 70
4562: PPUSH
4563: CALL_OW 12
4567: PPUSH
4568: CALL_OW 240
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
4572: LD_VAR 0 4
4576: PPUSH
4577: LD_INT 8
4579: PPUSH
4580: LD_INT 0
4582: PPUSH
4583: CALL_OW 49
// Gensher = NewCharacter ( Dietrich ) ;
4587: LD_ADDR_EXP 23
4591: PUSH
4592: LD_STRING Dietrich
4594: PPUSH
4595: CALL_OW 25
4599: ST_TO_ADDR
// SetSide ( Gensher , you_alt ) ;
4600: LD_EXP 23
4604: PPUSH
4605: LD_EXP 5
4609: PPUSH
4610: CALL_OW 235
// PlaceHumanInUnit ( Gensher , ar_bar ) ;
4614: LD_EXP 23
4618: PPUSH
4619: LD_INT 61
4621: PPUSH
4622: CALL_OW 52
// InitHc ;
4626: CALL_OW 19
// uc_side = you_alt ;
4630: LD_ADDR_OWVAR 20
4634: PUSH
4635: LD_EXP 5
4639: ST_TO_ADDR
// for i = 1 to 4 do
4640: LD_ADDR_VAR 0 3
4644: PUSH
4645: DOUBLE
4646: LD_INT 1
4648: DEC
4649: ST_TO_ADDR
4650: LD_INT 4
4652: PUSH
4653: FOR_TO
4654: IFFALSE 4706
// begin PrepareScientist ( false , 7 ) ;
4656: LD_INT 0
4658: PPUSH
4659: LD_INT 7
4661: PPUSH
4662: CALL_OW 384
// temp_unit = CreateHuman ;
4666: LD_ADDR_VAR 0 4
4670: PUSH
4671: CALL_OW 44
4675: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ temp_unit ;
4676: LD_ADDR_EXP 82
4680: PUSH
4681: LD_EXP 82
4685: PUSH
4686: LD_VAR 0 4
4690: ADD
4691: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lab ) ;
4692: LD_VAR 0 4
4696: PPUSH
4697: LD_INT 59
4699: PPUSH
4700: CALL_OW 52
// end ;
4704: GO 4653
4706: POP
4707: POP
// ai_scientists = Replace ( ai_scientists , 2 , original_gensher_people ) ;
4708: LD_ADDR_EXP 32
4712: PUSH
4713: LD_EXP 32
4717: PPUSH
4718: LD_INT 2
4720: PPUSH
4721: LD_EXP 82
4725: PPUSH
4726: CALL_OW 1
4730: ST_TO_ADDR
// PrepareEngineer ( false , [ 7 , 6 , 5 ] [ difficulty ] ) ;
4731: LD_INT 0
4733: PPUSH
4734: LD_INT 7
4736: PUSH
4737: LD_INT 6
4739: PUSH
4740: LD_INT 5
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: LD_OWVAR 67
4752: ARRAY
4753: PPUSH
4754: CALL_OW 382
// temp_unit = CreateHuman ;
4758: LD_ADDR_VAR 0 4
4762: PUSH
4763: CALL_OW 44
4767: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ temp_unit ;
4768: LD_ADDR_EXP 82
4772: PUSH
4773: LD_EXP 82
4777: PUSH
4778: LD_VAR 0 4
4782: ADD
4783: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_dep ) ;
4784: LD_VAR 0 4
4788: PPUSH
4789: LD_INT 58
4791: PPUSH
4792: CALL_OW 52
// ai_engineers = Replace ( ai_engineers , 2 , [ temp_unit ] ) ;
4796: LD_ADDR_EXP 30
4800: PUSH
4801: LD_EXP 30
4805: PPUSH
4806: LD_INT 2
4808: PPUSH
4809: LD_VAR 0 4
4813: PUSH
4814: EMPTY
4815: LIST
4816: PPUSH
4817: CALL_OW 1
4821: ST_TO_ADDR
// InitHc ;
4822: CALL_OW 19
// uc_nation = nation_nature ;
4826: LD_ADDR_OWVAR 21
4830: PUSH
4831: LD_INT 0
4833: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
4834: LD_ADDR_OWVAR 28
4838: PUSH
4839: LD_INT 15
4841: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 2 ) , Rand ( 0 , 1 ) , 0 , 0 ] ;
4842: LD_ADDR_OWVAR 31
4846: PUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_INT 2
4852: PPUSH
4853: CALL_OW 12
4857: PUSH
4858: LD_INT 0
4860: PPUSH
4861: LD_INT 1
4863: PPUSH
4864: CALL_OW 12
4868: PUSH
4869: LD_INT 0
4871: PUSH
4872: LD_INT 0
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 12 ) ] ;
4881: LD_ADDR_OWVAR 29
4885: PUSH
4886: LD_INT 11
4888: PPUSH
4889: LD_INT 13
4891: PPUSH
4892: CALL_OW 12
4896: PUSH
4897: LD_INT 10
4899: PPUSH
4900: LD_INT 12
4902: PPUSH
4903: CALL_OW 12
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4912: LD_ADDR_OWVAR 27
4916: PUSH
4917: LD_INT 1
4919: PPUSH
4920: LD_INT 2
4922: PPUSH
4923: CALL_OW 12
4927: ST_TO_ADDR
// temp_unit = CreateHuman ;
4928: LD_ADDR_VAR 0 4
4932: PUSH
4933: CALL_OW 44
4937: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_bu1 ) ;
4938: LD_VAR 0 4
4942: PPUSH
4943: LD_INT 73
4945: PPUSH
4946: CALL_OW 52
// human_list = [ temp_unit ] ;
4950: LD_ADDR_VAR 0 2
4954: PUSH
4955: LD_VAR 0 4
4959: PUSH
4960: EMPTY
4961: LIST
4962: ST_TO_ADDR
// gensher_bunker_apes = [ temp_unit ] ;
4963: LD_ADDR_VAR 0 7
4967: PUSH
4968: LD_VAR 0 4
4972: PUSH
4973: EMPTY
4974: LIST
4975: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4976: LD_ADDR_OWVAR 27
4980: PUSH
4981: LD_INT 1
4983: PPUSH
4984: LD_INT 2
4986: PPUSH
4987: CALL_OW 12
4991: ST_TO_ADDR
// temp_unit = CreateHuman ;
4992: LD_ADDR_VAR 0 4
4996: PUSH
4997: CALL_OW 44
5001: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_bu2 ) ;
5002: LD_VAR 0 4
5006: PPUSH
5007: LD_INT 78
5009: PPUSH
5010: CALL_OW 52
// human_list = human_list ^ temp_unit ;
5014: LD_ADDR_VAR 0 2
5018: PUSH
5019: LD_VAR 0 2
5023: PUSH
5024: LD_VAR 0 4
5028: ADD
5029: ST_TO_ADDR
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5030: LD_ADDR_VAR 0 7
5034: PUSH
5035: LD_VAR 0 7
5039: PUSH
5040: LD_VAR 0 4
5044: ADD
5045: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5046: LD_ADDR_OWVAR 27
5050: PUSH
5051: LD_INT 1
5053: PPUSH
5054: LD_INT 2
5056: PPUSH
5057: CALL_OW 12
5061: ST_TO_ADDR
// temp_unit = CreateHuman ;
5062: LD_ADDR_VAR 0 4
5066: PUSH
5067: CALL_OW 44
5071: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill1 ) ;
5072: LD_VAR 0 4
5076: PPUSH
5077: LD_INT 298
5079: PPUSH
5080: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5084: LD_ADDR_VAR 0 7
5088: PUSH
5089: LD_VAR 0 7
5093: PUSH
5094: LD_VAR 0 4
5098: ADD
5099: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5100: LD_ADDR_OWVAR 27
5104: PUSH
5105: LD_INT 1
5107: PPUSH
5108: LD_INT 2
5110: PPUSH
5111: CALL_OW 12
5115: ST_TO_ADDR
// temp_unit = CreateHuman ;
5116: LD_ADDR_VAR 0 4
5120: PUSH
5121: CALL_OW 44
5125: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill2 ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 299
5133: PPUSH
5134: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5138: LD_ADDR_VAR 0 7
5142: PUSH
5143: LD_VAR 0 7
5147: PUSH
5148: LD_VAR 0 4
5152: ADD
5153: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5154: LD_ADDR_OWVAR 27
5158: PUSH
5159: LD_INT 1
5161: PPUSH
5162: LD_INT 2
5164: PPUSH
5165: CALL_OW 12
5169: ST_TO_ADDR
// temp_unit = CreateHuman ;
5170: LD_ADDR_VAR 0 4
5174: PUSH
5175: CALL_OW 44
5179: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill3 ) ;
5180: LD_VAR 0 4
5184: PPUSH
5185: LD_INT 300
5187: PPUSH
5188: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5192: LD_ADDR_VAR 0 7
5196: PUSH
5197: LD_VAR 0 7
5201: PUSH
5202: LD_VAR 0 4
5206: ADD
5207: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5208: LD_ADDR_OWVAR 27
5212: PUSH
5213: LD_INT 1
5215: PPUSH
5216: LD_INT 2
5218: PPUSH
5219: CALL_OW 12
5223: ST_TO_ADDR
// temp_unit = CreateHuman ;
5224: LD_ADDR_VAR 0 4
5228: PUSH
5229: CALL_OW 44
5233: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill4 ) ;
5234: LD_VAR 0 4
5238: PPUSH
5239: LD_INT 343
5241: PPUSH
5242: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5246: LD_ADDR_VAR 0 7
5250: PUSH
5251: LD_VAR 0 7
5255: PUSH
5256: LD_VAR 0 4
5260: ADD
5261: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5262: LD_ADDR_OWVAR 27
5266: PUSH
5267: LD_INT 1
5269: PPUSH
5270: LD_INT 2
5272: PPUSH
5273: CALL_OW 12
5277: ST_TO_ADDR
// temp_unit = CreateHuman ;
5278: LD_ADDR_VAR 0 4
5282: PUSH
5283: CALL_OW 44
5287: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu1 ) ;
5288: LD_VAR 0 4
5292: PPUSH
5293: LD_INT 308
5295: PPUSH
5296: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5300: LD_ADDR_VAR 0 7
5304: PUSH
5305: LD_VAR 0 7
5309: PUSH
5310: LD_VAR 0 4
5314: ADD
5315: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5316: LD_ADDR_OWVAR 27
5320: PUSH
5321: LD_INT 1
5323: PPUSH
5324: LD_INT 2
5326: PPUSH
5327: CALL_OW 12
5331: ST_TO_ADDR
// temp_unit = CreateHuman ;
5332: LD_ADDR_VAR 0 4
5336: PUSH
5337: CALL_OW 44
5341: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu2 ) ;
5342: LD_VAR 0 4
5346: PPUSH
5347: LD_INT 347
5349: PPUSH
5350: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5354: LD_ADDR_VAR 0 7
5358: PUSH
5359: LD_VAR 0 7
5363: PUSH
5364: LD_VAR 0 4
5368: ADD
5369: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5370: LD_ADDR_OWVAR 27
5374: PUSH
5375: LD_INT 1
5377: PPUSH
5378: LD_INT 2
5380: PPUSH
5381: CALL_OW 12
5385: ST_TO_ADDR
// temp_unit = CreateHuman ;
5386: LD_ADDR_VAR 0 4
5390: PUSH
5391: CALL_OW 44
5395: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu3 ) ;
5396: LD_VAR 0 4
5400: PPUSH
5401: LD_INT 346
5403: PPUSH
5404: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5408: LD_ADDR_VAR 0 7
5412: PUSH
5413: LD_VAR 0 7
5417: PUSH
5418: LD_VAR 0 4
5422: ADD
5423: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5424: LD_ADDR_OWVAR 27
5428: PUSH
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 2
5434: PPUSH
5435: CALL_OW 12
5439: ST_TO_ADDR
// temp_unit = CreateHuman ;
5440: LD_ADDR_VAR 0 4
5444: PUSH
5445: CALL_OW 44
5449: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu4 ) ;
5450: LD_VAR 0 4
5454: PPUSH
5455: LD_INT 345
5457: PPUSH
5458: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5462: LD_ADDR_VAR 0 7
5466: PUSH
5467: LD_VAR 0 7
5471: PUSH
5472: LD_VAR 0 4
5476: ADD
5477: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5478: LD_ADDR_OWVAR 27
5482: PUSH
5483: LD_INT 1
5485: PPUSH
5486: LD_INT 2
5488: PPUSH
5489: CALL_OW 12
5493: ST_TO_ADDR
// temp_unit = CreateHuman ;
5494: LD_ADDR_VAR 0 4
5498: PUSH
5499: CALL_OW 44
5503: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu1 ) ;
5504: LD_VAR 0 4
5508: PPUSH
5509: LD_INT 305
5511: PPUSH
5512: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5516: LD_ADDR_VAR 0 7
5520: PUSH
5521: LD_VAR 0 7
5525: PUSH
5526: LD_VAR 0 4
5530: ADD
5531: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5532: LD_ADDR_OWVAR 27
5536: PUSH
5537: LD_INT 1
5539: PPUSH
5540: LD_INT 2
5542: PPUSH
5543: CALL_OW 12
5547: ST_TO_ADDR
// temp_unit = CreateHuman ;
5548: LD_ADDR_VAR 0 4
5552: PUSH
5553: CALL_OW 44
5557: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu2 ) ;
5558: LD_VAR 0 4
5562: PPUSH
5563: LD_INT 304
5565: PPUSH
5566: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5570: LD_ADDR_VAR 0 7
5574: PUSH
5575: LD_VAR 0 7
5579: PUSH
5580: LD_VAR 0 4
5584: ADD
5585: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5586: LD_ADDR_OWVAR 27
5590: PUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 2
5596: PPUSH
5597: CALL_OW 12
5601: ST_TO_ADDR
// temp_unit = CreateHuman ;
5602: LD_ADDR_VAR 0 4
5606: PUSH
5607: CALL_OW 44
5611: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu3 ) ;
5612: LD_VAR 0 4
5616: PPUSH
5617: LD_INT 303
5619: PPUSH
5620: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5624: LD_ADDR_VAR 0 7
5628: PUSH
5629: LD_VAR 0 7
5633: PUSH
5634: LD_VAR 0 4
5638: ADD
5639: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5640: LD_ADDR_OWVAR 27
5644: PUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_INT 2
5650: PPUSH
5651: CALL_OW 12
5655: ST_TO_ADDR
// temp_unit = CreateHuman ;
5656: LD_ADDR_VAR 0 4
5660: PUSH
5661: CALL_OW 44
5665: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu4 ) ;
5666: LD_VAR 0 4
5670: PPUSH
5671: LD_INT 302
5673: PPUSH
5674: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5678: LD_ADDR_VAR 0 7
5682: PUSH
5683: LD_VAR 0 7
5687: PUSH
5688: LD_VAR 0 4
5692: ADD
5693: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5694: LD_ADDR_OWVAR 27
5698: PUSH
5699: LD_INT 1
5701: PPUSH
5702: LD_INT 2
5704: PPUSH
5705: CALL_OW 12
5709: ST_TO_ADDR
// temp_unit = CreateHuman ;
5710: LD_ADDR_VAR 0 4
5714: PUSH
5715: CALL_OW 44
5719: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu5 ) ;
5720: LD_VAR 0 4
5724: PPUSH
5725: LD_INT 374
5727: PPUSH
5728: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5732: LD_ADDR_VAR 0 7
5736: PUSH
5737: LD_VAR 0 7
5741: PUSH
5742: LD_VAR 0 4
5746: ADD
5747: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5748: LD_ADDR_OWVAR 27
5752: PUSH
5753: LD_INT 1
5755: PPUSH
5756: LD_INT 2
5758: PPUSH
5759: CALL_OW 12
5763: ST_TO_ADDR
// temp_unit = CreateHuman ;
5764: LD_ADDR_VAR 0 4
5768: PUSH
5769: CALL_OW 44
5773: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu6 ) ;
5774: LD_VAR 0 4
5778: PPUSH
5779: LD_INT 397
5781: PPUSH
5782: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5786: LD_ADDR_VAR 0 7
5790: PUSH
5791: LD_VAR 0 7
5795: PUSH
5796: LD_VAR 0 4
5800: ADD
5801: ST_TO_ADDR
// gensher_mortars = [ mortar1 ] ;
5802: LD_ADDR_EXP 99
5806: PUSH
5807: LD_INT 336
5809: PUSH
5810: EMPTY
5811: LIST
5812: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar2 ;
5813: LD_ADDR_EXP 99
5817: PUSH
5818: LD_EXP 99
5822: PUSH
5823: LD_INT 493
5825: ADD
5826: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar3 ;
5827: LD_ADDR_EXP 99
5831: PUSH
5832: LD_EXP 99
5836: PUSH
5837: LD_INT 338
5839: ADD
5840: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar4 ;
5841: LD_ADDR_EXP 99
5845: PUSH
5846: LD_EXP 99
5850: PUSH
5851: LD_INT 339
5853: ADD
5854: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar5 ;
5855: LD_ADDR_EXP 99
5859: PUSH
5860: LD_EXP 99
5864: PUSH
5865: LD_INT 340
5867: ADD
5868: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar6 ;
5869: LD_ADDR_EXP 99
5873: PUSH
5874: LD_EXP 99
5878: PUSH
5879: LD_INT 341
5881: ADD
5882: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , 2 , human_list ^ Gensher ) ;
5883: LD_ADDR_EXP 29
5887: PUSH
5888: LD_EXP 29
5892: PPUSH
5893: LD_INT 2
5895: PPUSH
5896: LD_VAR 0 2
5900: PUSH
5901: LD_EXP 23
5905: ADD
5906: PPUSH
5907: CALL_OW 1
5911: ST_TO_ADDR
// val = GetSkill ( ai_engineers [ 2 ] [ 1 ] , skill_engineering ) ;
5912: LD_ADDR_VAR 0 5
5916: PUSH
5917: LD_EXP 30
5921: PUSH
5922: LD_INT 2
5924: ARRAY
5925: PUSH
5926: LD_INT 1
5928: ARRAY
5929: PPUSH
5930: LD_INT 2
5932: PPUSH
5933: CALL_OW 259
5937: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_building ] ] ) do
5938: LD_ADDR_VAR 0 3
5942: PUSH
5943: LD_INT 22
5945: PUSH
5946: LD_EXP 5
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: LD_INT 21
5957: PUSH
5958: LD_INT 3
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PPUSH
5969: CALL_OW 69
5973: PUSH
5974: FOR_IN
5975: IFFALSE 5993
// SetBLevel ( i , val ) ;
5977: LD_VAR 0 3
5981: PPUSH
5982: LD_VAR 0 5
5986: PPUSH
5987: CALL_OW 241
5991: GO 5974
5993: POP
5994: POP
// for i in ai_engineers [ 2 ] do
5995: LD_ADDR_VAR 0 3
5999: PUSH
6000: LD_EXP 30
6004: PUSH
6005: LD_INT 2
6007: ARRAY
6008: PUSH
6009: FOR_IN
6010: IFFALSE 6051
// if GetSkill ( i , skill_engineering ) > val then
6012: LD_VAR 0 3
6016: PPUSH
6017: LD_INT 2
6019: PPUSH
6020: CALL_OW 259
6024: PUSH
6025: LD_VAR 0 5
6029: GREATER
6030: IFFALSE 6049
// SetSkill ( i , skill_engineering , val ) ;
6032: LD_VAR 0 3
6036: PPUSH
6037: LD_INT 2
6039: PPUSH
6040: LD_VAR 0 5
6044: PPUSH
6045: CALL_OW 237
6049: GO 6009
6051: POP
6052: POP
// end ;
6053: LD_VAR 0 1
6057: RET
// function ScanBuildings ; var side , i , temp_list , base , area , temp_list_2 ; begin
6058: LD_INT 0
6060: PPUSH
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
// if difficulty <= 2 then
6067: LD_OWVAR 67
6071: PUSH
6072: LD_INT 2
6074: LESSEQUAL
6075: IFFALSE 6216
// begin temp_list = [ GetX ( rub3 ) , GetY ( rub3 ) , GetDir ( rub3 ) , GetBWeapon ( rub3 ) ] ;
6077: LD_ADDR_VAR 0 4
6081: PUSH
6082: LD_INT 269
6084: PPUSH
6085: CALL_OW 250
6089: PUSH
6090: LD_INT 269
6092: PPUSH
6093: CALL_OW 251
6097: PUSH
6098: LD_INT 269
6100: PPUSH
6101: CALL_OW 254
6105: PUSH
6106: LD_INT 269
6108: PPUSH
6109: CALL_OW 269
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: ST_TO_ADDR
// DestroyUnit ( rub3 ) ;
6120: LD_INT 269
6122: PPUSH
6123: CALL_OW 65
// InitUc ;
6127: CALL_OW 18
// InitBc ;
6131: CALL_OW 21
// uc_nation = nation_russian ;
6135: LD_ADDR_OWVAR 21
6139: PUSH
6140: LD_INT 3
6142: ST_TO_ADDR
// uc_side = russians ;
6143: LD_ADDR_OWVAR 20
6147: PUSH
6148: LD_EXP 3
6152: ST_TO_ADDR
// bc_type = b_turret ;
6153: LD_ADDR_OWVAR 42
6157: PUSH
6158: LD_INT 33
6160: ST_TO_ADDR
// i = CreateAndPlaceBuildingXYD ( temp_list [ 1 ] , temp_list [ 2 ] , temp_list [ 3 ] ) ;
6161: LD_ADDR_VAR 0 3
6165: PUSH
6166: LD_VAR 0 4
6170: PUSH
6171: LD_INT 1
6173: ARRAY
6174: PPUSH
6175: LD_VAR 0 4
6179: PUSH
6180: LD_INT 2
6182: ARRAY
6183: PPUSH
6184: LD_VAR 0 4
6188: PUSH
6189: LD_INT 3
6191: ARRAY
6192: PPUSH
6193: CALL_OW 47
6197: ST_TO_ADDR
// PlaceWeaponTurret ( i , temp_list [ 4 ] ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_VAR 0 4
6207: PUSH
6208: LD_INT 4
6210: ARRAY
6211: PPUSH
6212: CALL_OW 431
// end ; if difficulty = 1 then
6216: LD_OWVAR 67
6220: PUSH
6221: LD_INT 1
6223: EQUAL
6224: IFFALSE 6365
// begin temp_list = [ GetX ( rub1 ) , GetY ( rub1 ) , GetDir ( rub1 ) , GetBWeapon ( rub1 ) ] ;
6226: LD_ADDR_VAR 0 4
6230: PUSH
6231: LD_INT 273
6233: PPUSH
6234: CALL_OW 250
6238: PUSH
6239: LD_INT 273
6241: PPUSH
6242: CALL_OW 251
6246: PUSH
6247: LD_INT 273
6249: PPUSH
6250: CALL_OW 254
6254: PUSH
6255: LD_INT 273
6257: PPUSH
6258: CALL_OW 269
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: ST_TO_ADDR
// DestroyUnit ( rub1 ) ;
6269: LD_INT 273
6271: PPUSH
6272: CALL_OW 65
// InitUc ;
6276: CALL_OW 18
// InitBc ;
6280: CALL_OW 21
// uc_nation = nation_russian ;
6284: LD_ADDR_OWVAR 21
6288: PUSH
6289: LD_INT 3
6291: ST_TO_ADDR
// uc_side = russians ;
6292: LD_ADDR_OWVAR 20
6296: PUSH
6297: LD_EXP 3
6301: ST_TO_ADDR
// bc_type = b_turret ;
6302: LD_ADDR_OWVAR 42
6306: PUSH
6307: LD_INT 33
6309: ST_TO_ADDR
// i = CreateAndPlaceBuildingXYD ( temp_list [ 1 ] , temp_list [ 2 ] , temp_list [ 3 ] ) ;
6310: LD_ADDR_VAR 0 3
6314: PUSH
6315: LD_VAR 0 4
6319: PUSH
6320: LD_INT 1
6322: ARRAY
6323: PPUSH
6324: LD_VAR 0 4
6328: PUSH
6329: LD_INT 2
6331: ARRAY
6332: PPUSH
6333: LD_VAR 0 4
6337: PUSH
6338: LD_INT 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 47
6346: ST_TO_ADDR
// PlaceWeaponTurret ( i , temp_list [ 4 ] ) ;
6347: LD_VAR 0 3
6351: PPUSH
6352: LD_VAR 0 4
6356: PUSH
6357: LD_INT 4
6359: ARRAY
6360: PPUSH
6361: CALL_OW 431
// end ; for base in ai_bases do
6365: LD_ADDR_VAR 0 5
6369: PUSH
6370: LD_EXP 58
6374: PUSH
6375: FOR_IN
6376: IFFALSE 7002
// begin case base of 1 :
6378: LD_VAR 0 5
6382: PUSH
6383: LD_INT 1
6385: DOUBLE
6386: EQUAL
6387: IFTRUE 6391
6389: GO 6412
6391: POP
// begin area = Am_base ;
6392: LD_ADDR_VAR 0 6
6396: PUSH
6397: LD_INT 4
6399: ST_TO_ADDR
// side = americans ;
6400: LD_ADDR_VAR 0 2
6404: PUSH
6405: LD_EXP 6
6409: ST_TO_ADDR
// end ; 2 :
6410: GO 6471
6412: LD_INT 2
6414: DOUBLE
6415: EQUAL
6416: IFTRUE 6420
6418: GO 6441
6420: POP
// begin area = Gensher_base ;
6421: LD_ADDR_VAR 0 6
6425: PUSH
6426: LD_INT 7
6428: ST_TO_ADDR
// side = you_alt ;
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: LD_EXP 5
6438: ST_TO_ADDR
// end ; 3 :
6439: GO 6471
6441: LD_INT 3
6443: DOUBLE
6444: EQUAL
6445: IFTRUE 6449
6447: GO 6470
6449: POP
// begin area = Ru_base ;
6450: LD_ADDR_VAR 0 6
6454: PUSH
6455: LD_INT 3
6457: ST_TO_ADDR
// side = russians ;
6458: LD_ADDR_VAR 0 2
6462: PUSH
6463: LD_EXP 3
6467: ST_TO_ADDR
// end ; end ;
6468: GO 6471
6470: POP
// ai_all_buildings = Replace ( ai_all_buildings , base , FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_inarea , area ] ] ) ) ;
6471: LD_ADDR_EXP 44
6475: PUSH
6476: LD_EXP 44
6480: PPUSH
6481: LD_VAR 0 5
6485: PPUSH
6486: LD_INT 22
6488: PUSH
6489: LD_VAR 0 2
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 21
6500: PUSH
6501: LD_INT 3
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 95
6510: PUSH
6511: LD_VAR 0 6
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 69
6529: PPUSH
6530: CALL_OW 1
6534: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
6535: LD_ADDR_VAR 0 3
6539: PUSH
6540: LD_EXP 44
6544: PUSH
6545: LD_VAR 0 5
6549: ARRAY
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6573
// UpdateBuildingBasicVariables ( base , i , true ) ;
6554: LD_VAR 0 5
6558: PPUSH
6559: LD_VAR 0 3
6563: PPUSH
6564: LD_INT 1
6566: PPUSH
6567: CALL 7009 0 3
6571: GO 6551
6573: POP
6574: POP
// if base = 1 then
6575: LD_VAR 0 5
6579: PUSH
6580: LD_INT 1
6582: EQUAL
6583: IFFALSE 6603
// SetBName ( ai_depot [ base ] , epsilon ) ;
6585: LD_EXP 34
6589: PUSH
6590: LD_VAR 0 5
6594: ARRAY
6595: PPUSH
6596: LD_STRING epsilon
6598: PPUSH
6599: CALL_OW 500
// temp_list = [ ] ;
6603: LD_ADDR_VAR 0 4
6607: PUSH
6608: EMPTY
6609: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
6610: LD_ADDR_VAR 0 3
6614: PUSH
6615: LD_EXP 44
6619: PUSH
6620: LD_VAR 0 5
6624: ARRAY
6625: PUSH
6626: FOR_IN
6627: IFFALSE 6900
// begin if base = 3 and i in [ rub1 , rub2 ] then
6629: LD_VAR 0 5
6633: PUSH
6634: LD_INT 3
6636: EQUAL
6637: PUSH
6638: LD_VAR 0 3
6642: PUSH
6643: LD_INT 273
6645: PUSH
6646: LD_INT 271
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: IN
6653: AND
6654: IFFALSE 6705
// begin temp_list_2 = ai_excepted_buildings [ base ] ^ i ;
6656: LD_ADDR_VAR 0 7
6660: PUSH
6661: LD_EXP 68
6665: PUSH
6666: LD_VAR 0 5
6670: ARRAY
6671: PUSH
6672: LD_VAR 0 3
6676: ADD
6677: ST_TO_ADDR
// ai_excepted_buildings = Replace ( ai_excepted_buildings , base , temp_list_2 ) ;
6678: LD_ADDR_EXP 68
6682: PUSH
6683: LD_EXP 68
6687: PPUSH
6688: LD_VAR 0 5
6692: PPUSH
6693: LD_VAR 0 7
6697: PPUSH
6698: CALL_OW 1
6702: ST_TO_ADDR
// continue ;
6703: GO 6626
// end ; temp_list = temp_list ^ [ [ GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBType ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6705: LD_ADDR_VAR 0 4
6709: PUSH
6710: LD_VAR 0 4
6714: PUSH
6715: LD_VAR 0 3
6719: PPUSH
6720: CALL_OW 250
6724: PUSH
6725: LD_VAR 0 3
6729: PPUSH
6730: CALL_OW 251
6734: PUSH
6735: LD_VAR 0 3
6739: PPUSH
6740: CALL_OW 254
6744: PUSH
6745: LD_VAR 0 3
6749: PPUSH
6750: CALL_OW 266
6754: PUSH
6755: LD_VAR 0 3
6759: PPUSH
6760: LD_INT 1
6762: PPUSH
6763: CALL_OW 268
6767: PUSH
6768: LD_VAR 0 3
6772: PPUSH
6773: LD_INT 2
6775: PPUSH
6776: CALL_OW 268
6780: PUSH
6781: LD_VAR 0 3
6785: PPUSH
6786: CALL_OW 269
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: PUSH
6800: EMPTY
6801: LIST
6802: ADD
6803: ST_TO_ADDR
// if base = 2 and temp_list [ temp_list + 0 ] [ 4 ] = b_bunker then
6804: LD_VAR 0 5
6808: PUSH
6809: LD_INT 2
6811: EQUAL
6812: PUSH
6813: LD_VAR 0 4
6817: PUSH
6818: LD_VAR 0 4
6822: PUSH
6823: LD_INT 0
6825: PLUS
6826: ARRAY
6827: PUSH
6828: LD_INT 4
6830: ARRAY
6831: PUSH
6832: LD_INT 32
6834: EQUAL
6835: AND
6836: IFFALSE 6898
// begin temp_list_2 = Replace ( temp_list [ temp_list + 0 ] , 4 , b_breastwork ) ;
6838: LD_ADDR_VAR 0 7
6842: PUSH
6843: LD_VAR 0 4
6847: PUSH
6848: LD_VAR 0 4
6852: PUSH
6853: LD_INT 0
6855: PLUS
6856: ARRAY
6857: PPUSH
6858: LD_INT 4
6860: PPUSH
6861: LD_INT 31
6863: PPUSH
6864: CALL_OW 1
6868: ST_TO_ADDR
// temp_list = Replace ( temp_list , temp_list + 0 , temp_list_2 ) ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 4
6878: PPUSH
6879: LD_VAR 0 4
6883: PUSH
6884: LD_INT 0
6886: PLUS
6887: PPUSH
6888: LD_VAR 0 7
6892: PPUSH
6893: CALL_OW 1
6897: ST_TO_ADDR
// end ; end ;
6898: GO 6626
6900: POP
6901: POP
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list ) ;
6902: LD_ADDR_EXP 38
6906: PUSH
6907: LD_EXP 38
6911: PPUSH
6912: LD_VAR 0 5
6916: PPUSH
6917: LD_VAR 0 4
6921: PPUSH
6922: CALL_OW 1
6926: ST_TO_ADDR
// SortBuildingLocationsListInCorrectOrder ( base ) ;
6927: LD_VAR 0 5
6931: PPUSH
6932: CALL 8084 0 1
// for i in ai_siberite_mines [ base ] ^ ai_oil_mine [ base ] do
6936: LD_ADDR_VAR 0 3
6940: PUSH
6941: LD_EXP 36
6945: PUSH
6946: LD_VAR 0 5
6950: ARRAY
6951: PUSH
6952: LD_EXP 50
6956: PUSH
6957: LD_VAR 0 5
6961: ARRAY
6962: ADD
6963: PUSH
6964: FOR_IN
6965: IFFALSE 6998
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
6967: LD_VAR 0 3
6971: PPUSH
6972: CALL_OW 250
6976: PPUSH
6977: LD_VAR 0 3
6981: PPUSH
6982: CALL_OW 251
6986: PPUSH
6987: LD_VAR 0 2
6991: PPUSH
6992: CALL_OW 441
6996: GO 6964
6998: POP
6999: POP
// end ;
7000: GO 6375
7002: POP
7003: POP
// end ;
7004: LD_VAR 0 1
7008: RET
// export function UpdateBuildingBasicVariables ( base , un , add ) ; var temp_list ; begin
7009: LD_INT 0
7011: PPUSH
7012: PPUSH
// case GetBType ( un ) of b_depot , b_warehouse :
7013: LD_VAR 0 2
7017: PPUSH
7018: CALL_OW 266
7022: PUSH
7023: LD_INT 0
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7037
7029: LD_INT 1
7031: DOUBLE
7032: EQUAL
7033: IFTRUE 7037
7035: GO 7114
7037: POP
// if add then
7038: LD_VAR 0 3
7042: IFFALSE 7071
// ai_depot = Replace ( ai_depot , base , un ) else
7044: LD_ADDR_EXP 34
7048: PUSH
7049: LD_EXP 34
7053: PPUSH
7054: LD_VAR 0 1
7058: PPUSH
7059: LD_VAR 0 2
7063: PPUSH
7064: CALL_OW 1
7068: ST_TO_ADDR
7069: GO 7112
// if un = ai_depot [ base ] then
7071: LD_VAR 0 2
7075: PUSH
7076: LD_EXP 34
7080: PUSH
7081: LD_VAR 0 1
7085: ARRAY
7086: EQUAL
7087: IFFALSE 7112
// ai_depot = Replace ( ai_depot , base , 0 ) ; b_lab , b_lab_half , b_lab_full :
7089: LD_ADDR_EXP 34
7093: PUSH
7094: LD_EXP 34
7098: PPUSH
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 0
7106: PPUSH
7107: CALL_OW 1
7111: ST_TO_ADDR
7112: GO 8079
7114: LD_INT 6
7116: DOUBLE
7117: EQUAL
7118: IFTRUE 7134
7120: LD_INT 7
7122: DOUBLE
7123: EQUAL
7124: IFTRUE 7134
7126: LD_INT 8
7128: DOUBLE
7129: EQUAL
7130: IFTRUE 7134
7132: GO 7214
7134: POP
// begin if add then
7135: LD_VAR 0 3
7139: IFFALSE 7165
// temp_list = ai_labs [ base ] ^ un else
7141: LD_ADDR_VAR 0 5
7145: PUSH
7146: LD_EXP 35
7150: PUSH
7151: LD_VAR 0 1
7155: ARRAY
7156: PUSH
7157: LD_VAR 0 2
7161: ADD
7162: ST_TO_ADDR
7163: GO 7187
// temp_list = ai_labs [ base ] diff un ;
7165: LD_ADDR_VAR 0 5
7169: PUSH
7170: LD_EXP 35
7174: PUSH
7175: LD_VAR 0 1
7179: ARRAY
7180: PUSH
7181: LD_VAR 0 2
7185: DIFF
7186: ST_TO_ADDR
// ai_labs = Replace ( ai_labs , base , temp_list ) ;
7187: LD_ADDR_EXP 35
7191: PUSH
7192: LD_EXP 35
7196: PPUSH
7197: LD_VAR 0 1
7201: PPUSH
7202: LD_VAR 0 5
7206: PPUSH
7207: CALL_OW 1
7211: ST_TO_ADDR
// end ; b_factory , b_workshop :
7212: GO 8079
7214: LD_INT 3
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7228
7220: LD_INT 2
7222: DOUBLE
7223: EQUAL
7224: IFTRUE 7228
7226: GO 7308
7228: POP
// begin if add then
7229: LD_VAR 0 3
7233: IFFALSE 7259
// temp_list = ai_facts [ base ] ^ un else
7235: LD_ADDR_VAR 0 5
7239: PUSH
7240: LD_EXP 47
7244: PUSH
7245: LD_VAR 0 1
7249: ARRAY
7250: PUSH
7251: LD_VAR 0 2
7255: ADD
7256: ST_TO_ADDR
7257: GO 7281
// temp_list = ai_facts [ base ] diff un ;
7259: LD_ADDR_VAR 0 5
7263: PUSH
7264: LD_EXP 47
7268: PUSH
7269: LD_VAR 0 1
7273: ARRAY
7274: PUSH
7275: LD_VAR 0 2
7279: DIFF
7280: ST_TO_ADDR
// ai_facts = Replace ( ai_facts , base , temp_list ) ;
7281: LD_ADDR_EXP 47
7285: PUSH
7286: LD_EXP 47
7290: PPUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: LD_VAR 0 5
7300: PPUSH
7301: CALL_OW 1
7305: ST_TO_ADDR
// end ; b_armoury , b_barracks :
7306: GO 8079
7308: LD_INT 4
7310: DOUBLE
7311: EQUAL
7312: IFTRUE 7322
7314: LD_INT 5
7316: DOUBLE
7317: EQUAL
7318: IFTRUE 7322
7320: GO 7402
7322: POP
// begin if add then
7323: LD_VAR 0 3
7327: IFFALSE 7353
// temp_list = ai_armouries [ base ] ^ un else
7329: LD_ADDR_VAR 0 5
7333: PUSH
7334: LD_EXP 48
7338: PUSH
7339: LD_VAR 0 1
7343: ARRAY
7344: PUSH
7345: LD_VAR 0 2
7349: ADD
7350: ST_TO_ADDR
7351: GO 7375
// temp_list = ai_armouries [ base ] diff un ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_EXP 48
7362: PUSH
7363: LD_VAR 0 1
7367: ARRAY
7368: PUSH
7369: LD_VAR 0 2
7373: DIFF
7374: ST_TO_ADDR
// ai_armouries = Replace ( ai_armouries , base , temp_list ) ;
7375: LD_ADDR_EXP 48
7379: PUSH
7380: LD_EXP 48
7384: PPUSH
7385: LD_VAR 0 1
7389: PPUSH
7390: LD_VAR 0 5
7394: PPUSH
7395: CALL_OW 1
7399: ST_TO_ADDR
// end ; b_breastwork , b_bunker :
7400: GO 8079
7402: LD_INT 31
7404: DOUBLE
7405: EQUAL
7406: IFTRUE 7416
7408: LD_INT 32
7410: DOUBLE
7411: EQUAL
7412: IFTRUE 7416
7414: GO 7496
7416: POP
// begin if add then
7417: LD_VAR 0 3
7421: IFFALSE 7447
// temp_list = ai_bunkers [ base ] ^ un else
7423: LD_ADDR_VAR 0 5
7427: PUSH
7428: LD_EXP 49
7432: PUSH
7433: LD_VAR 0 1
7437: ARRAY
7438: PUSH
7439: LD_VAR 0 2
7443: ADD
7444: ST_TO_ADDR
7445: GO 7469
// temp_list = ai_bunkers [ base ] diff un ;
7447: LD_ADDR_VAR 0 5
7451: PUSH
7452: LD_EXP 49
7456: PUSH
7457: LD_VAR 0 1
7461: ARRAY
7462: PUSH
7463: LD_VAR 0 2
7467: DIFF
7468: ST_TO_ADDR
// ai_bunkers = Replace ( ai_bunkers , base , temp_list ) ;
7469: LD_ADDR_EXP 49
7473: PUSH
7474: LD_EXP 49
7478: PPUSH
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_VAR 0 5
7488: PPUSH
7489: CALL_OW 1
7493: ST_TO_ADDR
// end ; b_turret :
7494: GO 8079
7496: LD_INT 33
7498: DOUBLE
7499: EQUAL
7500: IFTRUE 7504
7502: GO 7584
7504: POP
// begin if add then
7505: LD_VAR 0 3
7509: IFFALSE 7535
// temp_list = ai_turrets [ base ] ^ un else
7511: LD_ADDR_VAR 0 5
7515: PUSH
7516: LD_EXP 55
7520: PUSH
7521: LD_VAR 0 1
7525: ARRAY
7526: PUSH
7527: LD_VAR 0 2
7531: ADD
7532: ST_TO_ADDR
7533: GO 7557
// temp_list = ai_turrets [ base ] diff un ;
7535: LD_ADDR_VAR 0 5
7539: PUSH
7540: LD_EXP 55
7544: PUSH
7545: LD_VAR 0 1
7549: ARRAY
7550: PUSH
7551: LD_VAR 0 2
7555: DIFF
7556: ST_TO_ADDR
// ai_turrets = Replace ( ai_turrets , base , temp_list ) ;
7557: LD_ADDR_EXP 55
7561: PUSH
7562: LD_EXP 55
7566: PPUSH
7567: LD_VAR 0 1
7571: PPUSH
7572: LD_VAR 0 5
7576: PPUSH
7577: CALL_OW 1
7581: ST_TO_ADDR
// end ; b_oil_mine :
7582: GO 8079
7584: LD_INT 29
7586: DOUBLE
7587: EQUAL
7588: IFTRUE 7592
7590: GO 7669
7592: POP
// if add then
7593: LD_VAR 0 3
7597: IFFALSE 7626
// ai_oil_mine = Replace ( ai_oil_mine , base , un ) else
7599: LD_ADDR_EXP 50
7603: PUSH
7604: LD_EXP 50
7608: PPUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: LD_VAR 0 2
7618: PPUSH
7619: CALL_OW 1
7623: ST_TO_ADDR
7624: GO 7667
// if un = ai_oil_mine [ base ] then
7626: LD_VAR 0 2
7630: PUSH
7631: LD_EXP 50
7635: PUSH
7636: LD_VAR 0 1
7640: ARRAY
7641: EQUAL
7642: IFFALSE 7667
// ai_oil_mine = Replace ( ai_oil_mine , base , 0 ) ; b_siberite_mine :
7644: LD_ADDR_EXP 50
7648: PUSH
7649: LD_EXP 50
7653: PPUSH
7654: LD_VAR 0 1
7658: PPUSH
7659: LD_INT 0
7661: PPUSH
7662: CALL_OW 1
7666: ST_TO_ADDR
7667: GO 8079
7669: LD_INT 30
7671: DOUBLE
7672: EQUAL
7673: IFTRUE 7677
7675: GO 7757
7677: POP
// begin if add then
7678: LD_VAR 0 3
7682: IFFALSE 7708
// temp_list = ai_siberite_mines [ base ] ^ un else
7684: LD_ADDR_VAR 0 5
7688: PUSH
7689: LD_EXP 36
7693: PUSH
7694: LD_VAR 0 1
7698: ARRAY
7699: PUSH
7700: LD_VAR 0 2
7704: ADD
7705: ST_TO_ADDR
7706: GO 7730
// temp_list = ai_siberite_mines [ base ] diff un ;
7708: LD_ADDR_VAR 0 5
7712: PUSH
7713: LD_EXP 36
7717: PUSH
7718: LD_VAR 0 1
7722: ARRAY
7723: PUSH
7724: LD_VAR 0 2
7728: DIFF
7729: ST_TO_ADDR
// ai_siberite_mines = Replace ( ai_siberite_mines , base , temp_list ) ;
7730: LD_ADDR_EXP 36
7734: PUSH
7735: LD_EXP 36
7739: PPUSH
7740: LD_VAR 0 1
7744: PPUSH
7745: LD_VAR 0 5
7749: PPUSH
7750: CALL_OW 1
7754: ST_TO_ADDR
// end ; b_ext_gun , b_ext_noncombat , b_ext_laser , b_ext_computer , b_ext_radar , b_ext_rocket , b_ext_siberium , b_ext_track , b_ext_stitch :
7755: GO 8079
7757: LD_INT 17
7759: DOUBLE
7760: EQUAL
7761: IFTRUE 7813
7763: LD_INT 19
7765: DOUBLE
7766: EQUAL
7767: IFTRUE 7813
7769: LD_INT 25
7771: DOUBLE
7772: EQUAL
7773: IFTRUE 7813
7775: LD_INT 24
7777: DOUBLE
7778: EQUAL
7779: IFTRUE 7813
7781: LD_INT 20
7783: DOUBLE
7784: EQUAL
7785: IFTRUE 7813
7787: LD_INT 18
7789: DOUBLE
7790: EQUAL
7791: IFTRUE 7813
7793: LD_INT 21
7795: DOUBLE
7796: EQUAL
7797: IFTRUE 7813
7799: LD_INT 16
7801: DOUBLE
7802: EQUAL
7803: IFTRUE 7813
7805: LD_INT 23
7807: DOUBLE
7808: EQUAL
7809: IFTRUE 7813
7811: GO 7893
7813: POP
// begin if add then
7814: LD_VAR 0 3
7818: IFFALSE 7844
// temp_list = ai_fact_extensions [ base ] ^ un else
7820: LD_ADDR_VAR 0 5
7824: PUSH
7825: LD_EXP 51
7829: PUSH
7830: LD_VAR 0 1
7834: ARRAY
7835: PUSH
7836: LD_VAR 0 2
7840: ADD
7841: ST_TO_ADDR
7842: GO 7866
// temp_list = ai_fact_extensions [ base ] diff un ;
7844: LD_ADDR_VAR 0 5
7848: PUSH
7849: LD_EXP 51
7853: PUSH
7854: LD_VAR 0 1
7858: ARRAY
7859: PUSH
7860: LD_VAR 0 2
7864: DIFF
7865: ST_TO_ADDR
// ai_fact_extensions = Replace ( ai_fact_extensions , base , temp_list ) ;
7866: LD_ADDR_EXP 51
7870: PUSH
7871: LD_EXP 51
7875: PPUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: LD_VAR 0 5
7885: PPUSH
7886: CALL_OW 1
7890: ST_TO_ADDR
// end ; b_solar_power , b_oil_power , b_siberite_power :
7891: GO 8079
7893: LD_INT 27
7895: DOUBLE
7896: EQUAL
7897: IFTRUE 7913
7899: LD_INT 26
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7913
7905: LD_INT 28
7907: DOUBLE
7908: EQUAL
7909: IFTRUE 7913
7911: GO 7993
7913: POP
// begin if add then
7914: LD_VAR 0 3
7918: IFFALSE 7944
// temp_list = ai_power_plants [ base ] ^ un else
7920: LD_ADDR_VAR 0 5
7924: PUSH
7925: LD_EXP 37
7929: PUSH
7930: LD_VAR 0 1
7934: ARRAY
7935: PUSH
7936: LD_VAR 0 2
7940: ADD
7941: ST_TO_ADDR
7942: GO 7966
// temp_list = ai_power_plants [ base ] diff un ;
7944: LD_ADDR_VAR 0 5
7948: PUSH
7949: LD_EXP 37
7953: PUSH
7954: LD_VAR 0 1
7958: ARRAY
7959: PUSH
7960: LD_VAR 0 2
7964: DIFF
7965: ST_TO_ADDR
// ai_power_plants = Replace ( ai_power_plants , base , temp_list ) ;
7966: LD_ADDR_EXP 37
7970: PUSH
7971: LD_EXP 37
7975: PPUSH
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_VAR 0 5
7985: PPUSH
7986: CALL_OW 1
7990: ST_TO_ADDR
// end ; b_control_tower :
7991: GO 8079
7993: LD_INT 36
7995: DOUBLE
7996: EQUAL
7997: IFTRUE 8001
7999: GO 8078
8001: POP
// begin if add then
8002: LD_VAR 0 3
8006: IFFALSE 8035
// ai_control_tower = Replace ( ai_control_tower , base , un ) else
8008: LD_ADDR_EXP 56
8012: PUSH
8013: LD_EXP 56
8017: PPUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: LD_VAR 0 2
8027: PPUSH
8028: CALL_OW 1
8032: ST_TO_ADDR
8033: GO 8076
// if un = ai_control_tower [ base ] then
8035: LD_VAR 0 2
8039: PUSH
8040: LD_EXP 56
8044: PUSH
8045: LD_VAR 0 1
8049: ARRAY
8050: EQUAL
8051: IFFALSE 8076
// ai_control_tower = Replace ( ai_control_tower , base , 0 ) ;
8053: LD_ADDR_EXP 56
8057: PUSH
8058: LD_EXP 56
8062: PPUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: LD_INT 0
8070: PPUSH
8071: CALL_OW 1
8075: ST_TO_ADDR
// end ; end ;
8076: GO 8079
8078: POP
// end ;
8079: LD_VAR 0 4
8083: RET
// function SortBuildingLocationsListInCorrectOrder ( base ) ; var i , temp_list , p ; begin
8084: LD_INT 0
8086: PPUSH
8087: PPUSH
8088: PPUSH
8089: PPUSH
// temp_list = [ ] ;
8090: LD_ADDR_VAR 0 4
8094: PUSH
8095: EMPTY
8096: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
8097: LD_ADDR_VAR 0 3
8101: PUSH
8102: LD_EXP 38
8106: PUSH
8107: LD_VAR 0 1
8111: ARRAY
8112: PUSH
8113: FOR_IN
8114: IFFALSE 8487
// begin case i [ 4 ] of b_depot , b_warehouse :
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 4
8123: ARRAY
8124: PUSH
8125: LD_INT 0
8127: DOUBLE
8128: EQUAL
8129: IFTRUE 8139
8131: LD_INT 1
8133: DOUBLE
8134: EQUAL
8135: IFTRUE 8139
8137: GO 8150
8139: POP
// p = 100 ; b_armoury , b_barracks , b_fort :
8140: LD_ADDR_VAR 0 5
8144: PUSH
8145: LD_INT 100
8147: ST_TO_ADDR
8148: GO 8469
8150: LD_INT 4
8152: DOUBLE
8153: EQUAL
8154: IFTRUE 8170
8156: LD_INT 5
8158: DOUBLE
8159: EQUAL
8160: IFTRUE 8170
8162: LD_INT 35
8164: DOUBLE
8165: EQUAL
8166: IFTRUE 8170
8168: GO 8181
8170: POP
// p = 99 ; b_solar_power , b_oil_power , b_siberite_power :
8171: LD_ADDR_VAR 0 5
8175: PUSH
8176: LD_INT 99
8178: ST_TO_ADDR
8179: GO 8469
8181: LD_INT 27
8183: DOUBLE
8184: EQUAL
8185: IFTRUE 8201
8187: LD_INT 26
8189: DOUBLE
8190: EQUAL
8191: IFTRUE 8201
8193: LD_INT 28
8195: DOUBLE
8196: EQUAL
8197: IFTRUE 8201
8199: GO 8212
8201: POP
// p = 98 ; b_breastwork :
8202: LD_ADDR_VAR 0 5
8206: PUSH
8207: LD_INT 98
8209: ST_TO_ADDR
8210: GO 8469
8212: LD_INT 31
8214: DOUBLE
8215: EQUAL
8216: IFTRUE 8220
8218: GO 8231
8220: POP
// p = 97 ; b_factory , b_workshop :
8221: LD_ADDR_VAR 0 5
8225: PUSH
8226: LD_INT 97
8228: ST_TO_ADDR
8229: GO 8469
8231: LD_INT 3
8233: DOUBLE
8234: EQUAL
8235: IFTRUE 8245
8237: LD_INT 2
8239: DOUBLE
8240: EQUAL
8241: IFTRUE 8245
8243: GO 8256
8245: POP
// p = 96 ; b_ext_gun , b_ext_noncombat , b_ext_laser , b_ext_computer , b_ext_radar , b_ext_rocket , b_ext_siberium , b_ext_track , b_ext_stitch :
8246: LD_ADDR_VAR 0 5
8250: PUSH
8251: LD_INT 96
8253: ST_TO_ADDR
8254: GO 8469
8256: LD_INT 17
8258: DOUBLE
8259: EQUAL
8260: IFTRUE 8312
8262: LD_INT 19
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8312
8268: LD_INT 25
8270: DOUBLE
8271: EQUAL
8272: IFTRUE 8312
8274: LD_INT 24
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8312
8280: LD_INT 20
8282: DOUBLE
8283: EQUAL
8284: IFTRUE 8312
8286: LD_INT 18
8288: DOUBLE
8289: EQUAL
8290: IFTRUE 8312
8292: LD_INT 21
8294: DOUBLE
8295: EQUAL
8296: IFTRUE 8312
8298: LD_INT 16
8300: DOUBLE
8301: EQUAL
8302: IFTRUE 8312
8304: LD_INT 23
8306: DOUBLE
8307: EQUAL
8308: IFTRUE 8312
8310: GO 8323
8312: POP
// p = 95 ; b_bunker :
8313: LD_ADDR_VAR 0 5
8317: PUSH
8318: LD_INT 95
8320: ST_TO_ADDR
8321: GO 8469
8323: LD_INT 32
8325: DOUBLE
8326: EQUAL
8327: IFTRUE 8331
8329: GO 8342
8331: POP
// p = 94 ; b_control_tower :
8332: LD_ADDR_VAR 0 5
8336: PUSH
8337: LD_INT 94
8339: ST_TO_ADDR
8340: GO 8469
8342: LD_INT 36
8344: DOUBLE
8345: EQUAL
8346: IFTRUE 8350
8348: GO 8361
8350: POP
// p = 93 ; b_turret :
8351: LD_ADDR_VAR 0 5
8355: PUSH
8356: LD_INT 93
8358: ST_TO_ADDR
8359: GO 8469
8361: LD_INT 33
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8380
8369: POP
// p = 92 ; b_lab , b_lab_half , b_lab_full :
8370: LD_ADDR_VAR 0 5
8374: PUSH
8375: LD_INT 92
8377: ST_TO_ADDR
8378: GO 8469
8380: LD_INT 6
8382: DOUBLE
8383: EQUAL
8384: IFTRUE 8400
8386: LD_INT 7
8388: DOUBLE
8389: EQUAL
8390: IFTRUE 8400
8392: LD_INT 8
8394: DOUBLE
8395: EQUAL
8396: IFTRUE 8400
8398: GO 8411
8400: POP
// p = 91 ; b_teleport :
8401: LD_ADDR_VAR 0 5
8405: PUSH
8406: LD_INT 91
8408: ST_TO_ADDR
8409: GO 8469
8411: LD_INT 34
8413: DOUBLE
8414: EQUAL
8415: IFTRUE 8419
8417: GO 8430
8419: POP
// p = 90 ; b_siberite_mine :
8420: LD_ADDR_VAR 0 5
8424: PUSH
8425: LD_INT 90
8427: ST_TO_ADDR
8428: GO 8469
8430: LD_INT 30
8432: DOUBLE
8433: EQUAL
8434: IFTRUE 8438
8436: GO 8449
8438: POP
// p = 89 ; b_oil_mine :
8439: LD_ADDR_VAR 0 5
8443: PUSH
8444: LD_INT 89
8446: ST_TO_ADDR
8447: GO 8469
8449: LD_INT 29
8451: DOUBLE
8452: EQUAL
8453: IFTRUE 8457
8455: GO 8468
8457: POP
// p = 88 ; end ;
8458: LD_ADDR_VAR 0 5
8462: PUSH
8463: LD_INT 88
8465: ST_TO_ADDR
8466: GO 8469
8468: POP
// temp_list = temp_list ^ p ;
8469: LD_ADDR_VAR 0 4
8473: PUSH
8474: LD_VAR 0 4
8478: PUSH
8479: LD_VAR 0 5
8483: ADD
8484: ST_TO_ADDR
// end ;
8485: GO 8113
8487: POP
8488: POP
// temp_list = SortListByListDesc ( ai_buildings_locations [ base ] , temp_list ) ;
8489: LD_ADDR_VAR 0 4
8493: PUSH
8494: LD_EXP 38
8498: PUSH
8499: LD_VAR 0 1
8503: ARRAY
8504: PPUSH
8505: LD_VAR 0 4
8509: PPUSH
8510: CALL_OW 77
8514: ST_TO_ADDR
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list ) ;
8515: LD_ADDR_EXP 38
8519: PUSH
8520: LD_EXP 38
8524: PPUSH
8525: LD_VAR 0 1
8529: PPUSH
8530: LD_VAR 0 4
8534: PPUSH
8535: CALL_OW 1
8539: ST_TO_ADDR
// end ;
8540: LD_VAR 0 2
8544: RET
// function PrepareComputerSides ; var i , temp_list , side , base , num ; begin
8545: LD_INT 0
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
// for base in ai_bases do
8553: LD_ADDR_VAR 0 5
8557: PUSH
8558: LD_EXP 58
8562: PUSH
8563: FOR_IN
8564: IFFALSE 9477
// begin case base of 1 :
8566: LD_VAR 0 5
8570: PUSH
8571: LD_INT 1
8573: DOUBLE
8574: EQUAL
8575: IFTRUE 8579
8577: GO 8592
8579: POP
// begin side = americans ;
8580: LD_ADDR_VAR 0 4
8584: PUSH
8585: LD_EXP 6
8589: ST_TO_ADDR
// end ; 2 :
8590: GO 8627
8592: LD_INT 2
8594: DOUBLE
8595: EQUAL
8596: IFTRUE 8600
8598: GO 8605
8600: POP
// begin continue ;
8601: GO 8563
// end ; 3 :
8603: GO 8627
8605: LD_INT 3
8607: DOUBLE
8608: EQUAL
8609: IFTRUE 8613
8611: GO 8626
8613: POP
// begin side = russians ;
8614: LD_ADDR_VAR 0 4
8618: PUSH
8619: LD_EXP 3
8623: ST_TO_ADDR
// end ; end ;
8624: GO 8627
8626: POP
// InitUc ;
8627: CALL_OW 18
// InitHc ;
8631: CALL_OW 19
// uc_side = side ;
8635: LD_ADDR_OWVAR 20
8639: PUSH
8640: LD_VAR 0 4
8644: ST_TO_ADDR
// case side of americans :
8645: LD_VAR 0 4
8649: PUSH
8650: LD_EXP 6
8654: DOUBLE
8655: EQUAL
8656: IFTRUE 8660
8658: GO 8671
8660: POP
// uc_nation = nation_american ; russians :
8661: LD_ADDR_OWVAR 21
8665: PUSH
8666: LD_INT 1
8668: ST_TO_ADDR
8669: GO 8693
8671: LD_EXP 3
8675: DOUBLE
8676: EQUAL
8677: IFTRUE 8681
8679: GO 8692
8681: POP
// uc_nation = nation_russian ; end ;
8682: LD_ADDR_OWVAR 21
8686: PUSH
8687: LD_INT 3
8689: ST_TO_ADDR
8690: GO 8693
8692: POP
// temp_list = CreateUnitsWithClass ( ai_bunkers [ base ] + ai_armouries [ base ] , class_soldier , side ) ;
8693: LD_ADDR_VAR 0 3
8697: PUSH
8698: LD_EXP 49
8702: PUSH
8703: LD_VAR 0 5
8707: ARRAY
8708: PUSH
8709: LD_EXP 48
8713: PUSH
8714: LD_VAR 0 5
8718: ARRAY
8719: PLUS
8720: PPUSH
8721: LD_INT 1
8723: PPUSH
8724: LD_VAR 0 4
8728: PPUSH
8729: CALL 9612 0 3
8733: ST_TO_ADDR
// temp_list = temp_list ^ CreateUnitsWithClass ( [ 3 , 4 , 5 ] [ difficulty ] * ai_armouries [ base ] , [ class_sniper , 0 , class_bazooker ] [ base ] , side ) ;
8734: LD_ADDR_VAR 0 3
8738: PUSH
8739: LD_VAR 0 3
8743: PUSH
8744: LD_INT 3
8746: PUSH
8747: LD_INT 4
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: PUSH
8758: LD_OWVAR 67
8762: ARRAY
8763: PUSH
8764: LD_EXP 48
8768: PUSH
8769: LD_VAR 0 5
8773: ARRAY
8774: MUL
8775: PPUSH
8776: LD_INT 5
8778: PUSH
8779: LD_INT 0
8781: PUSH
8782: LD_INT 9
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: PUSH
8790: LD_VAR 0 5
8794: ARRAY
8795: PPUSH
8796: LD_VAR 0 4
8800: PPUSH
8801: CALL 9612 0 3
8805: ADD
8806: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , base , temp_list ) ;
8807: LD_ADDR_EXP 29
8811: PUSH
8812: LD_EXP 29
8816: PPUSH
8817: LD_VAR 0 5
8821: PPUSH
8822: LD_VAR 0 3
8826: PPUSH
8827: CALL_OW 1
8831: ST_TO_ADDR
// ai_engineers = Replace ( ai_engineers , base , CreateUnitsWithClass ( [ 2 , 3 , 4 ] [ difficulty ] , class_engineer , side ) ) ;
8832: LD_ADDR_EXP 30
8836: PUSH
8837: LD_EXP 30
8841: PPUSH
8842: LD_VAR 0 5
8846: PPUSH
8847: LD_INT 2
8849: PUSH
8850: LD_INT 3
8852: PUSH
8853: LD_INT 4
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: PUSH
8861: LD_OWVAR 67
8865: ARRAY
8866: PPUSH
8867: LD_INT 2
8869: PPUSH
8870: LD_VAR 0 4
8874: PPUSH
8875: CALL 9612 0 3
8879: PPUSH
8880: CALL_OW 1
8884: ST_TO_ADDR
// temp_list = [ ] ;
8885: LD_ADDR_VAR 0 3
8889: PUSH
8890: EMPTY
8891: ST_TO_ADDR
// for i in ai_engineers [ base ] do
8892: LD_ADDR_VAR 0 2
8896: PUSH
8897: LD_EXP 30
8901: PUSH
8902: LD_VAR 0 5
8906: ARRAY
8907: PUSH
8908: FOR_IN
8909: IFFALSE 8937
// temp_list = temp_list ^ GetSkill ( i , skill_engineering ) ;
8911: LD_ADDR_VAR 0 3
8915: PUSH
8916: LD_VAR 0 3
8920: PUSH
8921: LD_VAR 0 2
8925: PPUSH
8926: LD_INT 2
8928: PPUSH
8929: CALL_OW 259
8933: ADD
8934: ST_TO_ADDR
8935: GO 8908
8937: POP
8938: POP
// num = BestFromListByList ( temp_list , temp_list ) ;
8939: LD_ADDR_VAR 0 6
8943: PUSH
8944: LD_VAR 0 3
8948: PPUSH
8949: LD_VAR 0 3
8953: PPUSH
8954: CALL_OW 79
8958: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_EXP 44
8968: PUSH
8969: LD_VAR 0 5
8973: ARRAY
8974: PUSH
8975: FOR_IN
8976: IFFALSE 8994
// SetBLevel ( i , num ) ;
8978: LD_VAR 0 2
8982: PPUSH
8983: LD_VAR 0 6
8987: PPUSH
8988: CALL_OW 241
8992: GO 8975
8994: POP
8995: POP
// ai_apemen_engineers = Replace ( ai_apemen_engineers , base , CreateApemenWithClass ( 2 , class_apeman_engineer , side ) ) ;
8996: LD_ADDR_EXP 62
9000: PUSH
9001: LD_EXP 62
9005: PPUSH
9006: LD_VAR 0 5
9010: PPUSH
9011: LD_INT 2
9013: PPUSH
9014: LD_INT 16
9016: PPUSH
9017: LD_VAR 0 4
9021: PPUSH
9022: CALL 9800 0 3
9026: PPUSH
9027: CALL_OW 1
9031: ST_TO_ADDR
// ai_mechanics_defend = Replace ( ai_mechanics_defend , base , CreateUnitsWithClass ( [ 4 + Rand ( 0 , 1 ) , 5 + Rand ( 0 , 1 ) , 6 ] [ difficulty ] , class_mechanic , side ) ) ;
9032: LD_ADDR_EXP 31
9036: PUSH
9037: LD_EXP 31
9041: PPUSH
9042: LD_VAR 0 5
9046: PPUSH
9047: LD_INT 4
9049: PUSH
9050: LD_INT 0
9052: PPUSH
9053: LD_INT 1
9055: PPUSH
9056: CALL_OW 12
9060: PLUS
9061: PUSH
9062: LD_INT 5
9064: PUSH
9065: LD_INT 0
9067: PPUSH
9068: LD_INT 1
9070: PPUSH
9071: CALL_OW 12
9075: PLUS
9076: PUSH
9077: LD_INT 6
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: LIST
9084: PUSH
9085: LD_OWVAR 67
9089: ARRAY
9090: PPUSH
9091: LD_INT 3
9093: PPUSH
9094: LD_VAR 0 4
9098: PPUSH
9099: CALL 9612 0 3
9103: PPUSH
9104: CALL_OW 1
9108: ST_TO_ADDR
// num = [ 3 , 4 , 5 ] [ difficulty ] ;
9109: LD_ADDR_VAR 0 6
9113: PUSH
9114: LD_INT 3
9116: PUSH
9117: LD_INT 4
9119: PUSH
9120: LD_INT 5
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: PUSH
9128: LD_OWVAR 67
9132: ARRAY
9133: ST_TO_ADDR
// for i = 1 to ai_labs [ base ] do
9134: LD_ADDR_VAR 0 2
9138: PUSH
9139: DOUBLE
9140: LD_INT 1
9142: DEC
9143: ST_TO_ADDR
9144: LD_EXP 35
9148: PUSH
9149: LD_VAR 0 5
9153: ARRAY
9154: PUSH
9155: FOR_TO
9156: IFFALSE 9182
// num = num + Rand ( 0 , 1 ) ;
9158: LD_ADDR_VAR 0 6
9162: PUSH
9163: LD_VAR 0 6
9167: PUSH
9168: LD_INT 0
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 12
9178: PLUS
9179: ST_TO_ADDR
9180: GO 9155
9182: POP
9183: POP
// if base = 1 then
9184: LD_VAR 0 5
9188: PUSH
9189: LD_INT 1
9191: EQUAL
9192: IFFALSE 9225
// num = num + [ 3 , 4 , 5 ] [ difficulty ] ;
9194: LD_ADDR_VAR 0 6
9198: PUSH
9199: LD_VAR 0 6
9203: PUSH
9204: LD_INT 3
9206: PUSH
9207: LD_INT 4
9209: PUSH
9210: LD_INT 5
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: PUSH
9218: LD_OWVAR 67
9222: ARRAY
9223: PLUS
9224: ST_TO_ADDR
// ai_scientists = Replace ( ai_scientists , base , CreateUnitsWithClass ( num , class_scientistic , side ) ) ;
9225: LD_ADDR_EXP 32
9229: PUSH
9230: LD_EXP 32
9234: PPUSH
9235: LD_VAR 0 5
9239: PPUSH
9240: LD_VAR 0 6
9244: PPUSH
9245: LD_INT 4
9247: PPUSH
9248: LD_VAR 0 4
9252: PPUSH
9253: CALL 9612 0 3
9257: PPUSH
9258: CALL_OW 1
9262: ST_TO_ADDR
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_cans , 300 ) ;
9263: LD_EXP 34
9267: PUSH
9268: LD_VAR 0 5
9272: ARRAY
9273: PPUSH
9274: CALL_OW 274
9278: PPUSH
9279: LD_INT 1
9281: PPUSH
9282: LD_INT 300
9284: PPUSH
9285: CALL_OW 277
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_oil , 300 ) ;
9289: LD_EXP 34
9293: PUSH
9294: LD_VAR 0 5
9298: ARRAY
9299: PPUSH
9300: CALL_OW 274
9304: PPUSH
9305: LD_INT 2
9307: PPUSH
9308: LD_INT 300
9310: PPUSH
9311: CALL_OW 277
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_siberit , 300 ) ;
9315: LD_EXP 34
9319: PUSH
9320: LD_VAR 0 5
9324: ARRAY
9325: PPUSH
9326: CALL_OW 274
9330: PPUSH
9331: LD_INT 3
9333: PPUSH
9334: LD_INT 300
9336: PPUSH
9337: CALL_OW 277
// for i in ai_soldiers [ base ] ^ ai_engineers [ base ] ^ ai_mechanics_defend [ base ] ^ ai_scientists [ base ] ^ ai_apemen_engineers [ base ] do
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_EXP 29
9350: PUSH
9351: LD_VAR 0 5
9355: ARRAY
9356: PUSH
9357: LD_EXP 30
9361: PUSH
9362: LD_VAR 0 5
9366: ARRAY
9367: ADD
9368: PUSH
9369: LD_EXP 31
9373: PUSH
9374: LD_VAR 0 5
9378: ARRAY
9379: ADD
9380: PUSH
9381: LD_EXP 32
9385: PUSH
9386: LD_VAR 0 5
9390: ARRAY
9391: ADD
9392: PUSH
9393: LD_EXP 62
9397: PUSH
9398: LD_VAR 0 5
9402: ARRAY
9403: ADD
9404: PUSH
9405: FOR_IN
9406: IFFALSE 9455
// PlaceUnitXYR ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] , 7 , false ) ;
9408: LD_VAR 0 2
9412: PPUSH
9413: LD_EXP 41
9417: PUSH
9418: LD_VAR 0 5
9422: ARRAY
9423: PUSH
9424: LD_INT 1
9426: ARRAY
9427: PPUSH
9428: LD_EXP 41
9432: PUSH
9433: LD_VAR 0 5
9437: ARRAY
9438: PUSH
9439: LD_INT 2
9441: ARRAY
9442: PPUSH
9443: LD_INT 7
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: CALL_OW 50
9453: GO 9405
9455: POP
9456: POP
// ResetVehicleAttackDelay ( base ) ;
9457: LD_VAR 0 5
9461: PPUSH
9462: CALL 9976 0 1
// ResetHumanAttackDelay ( base ) ;
9466: LD_VAR 0 5
9470: PPUSH
9471: CALL 10025 0 1
// end ;
9475: GO 8563
9477: POP
9478: POP
// uc_side = americans ;
9479: LD_ADDR_OWVAR 20
9483: PUSH
9484: LD_EXP 6
9488: ST_TO_ADDR
// Simms = NewCharacter ( Simms ) ;
9489: LD_ADDR_EXP 24
9493: PUSH
9494: LD_STRING Simms
9496: PPUSH
9497: CALL_OW 25
9501: ST_TO_ADDR
// Joan = NewCharacter ( Joan ) ;
9502: LD_ADDR_EXP 27
9506: PUSH
9507: LD_STRING Joan
9509: PPUSH
9510: CALL_OW 25
9514: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
9515: LD_ADDR_EXP 28
9519: PUSH
9520: LD_STRING Powell
9522: PPUSH
9523: CALL_OW 25
9527: ST_TO_ADDR
// uc_side = americans_alt ;
9528: LD_ADDR_OWVAR 20
9532: PUSH
9533: LD_EXP 8
9537: ST_TO_ADDR
// Cornell = NewCharacter ( Cornell ) ;
9538: LD_ADDR_EXP 25
9542: PUSH
9543: LD_STRING Cornell
9545: PPUSH
9546: CALL_OW 25
9550: ST_TO_ADDR
// Khattam = NewCharacter ( Khatam ) ;
9551: LD_ADDR_EXP 26
9555: PUSH
9556: LD_STRING Khatam
9558: PPUSH
9559: CALL_OW 25
9563: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , americans ] ) do
9564: LD_ADDR_VAR 0 2
9568: PUSH
9569: LD_INT 22
9571: PUSH
9572: LD_EXP 6
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PPUSH
9581: CALL_OW 69
9585: PUSH
9586: FOR_IN
9587: IFFALSE 9605
// DoNotAttack ( you , i ) ;
9589: LD_EXP 2
9593: PPUSH
9594: LD_VAR 0 2
9598: PPUSH
9599: CALL_OW 471
9603: GO 9586
9605: POP
9606: POP
// end ;
9607: LD_VAR 0 1
9611: RET
// export function CreateUnitsWithClass ( num_units , un_class , side ) ; var i , overskill ; begin
9612: LD_INT 0
9614: PPUSH
9615: PPUSH
9616: PPUSH
// result = [ ] ;
9617: LD_ADDR_VAR 0 4
9621: PUSH
9622: EMPTY
9623: ST_TO_ADDR
// InitUc ;
9624: CALL_OW 18
// InitHc ;
9628: CALL_OW 19
// case side of americans :
9632: LD_VAR 0 3
9636: PUSH
9637: LD_EXP 6
9641: DOUBLE
9642: EQUAL
9643: IFTRUE 9647
9645: GO 9658
9647: POP
// begin uc_nation = nation_american ;
9648: LD_ADDR_OWVAR 21
9652: PUSH
9653: LD_INT 1
9655: ST_TO_ADDR
// end ; russians :
9656: GO 9680
9658: LD_EXP 3
9662: DOUBLE
9663: EQUAL
9664: IFTRUE 9668
9666: GO 9679
9668: POP
// begin uc_nation = nation_russian ;
9669: LD_ADDR_OWVAR 21
9673: PUSH
9674: LD_INT 3
9676: ST_TO_ADDR
// end ; end ;
9677: GO 9680
9679: POP
// uc_side = side ;
9680: LD_ADDR_OWVAR 20
9684: PUSH
9685: LD_VAR 0 3
9689: ST_TO_ADDR
// overskill = difficulty + 4 ;
9690: LD_ADDR_VAR 0 6
9694: PUSH
9695: LD_OWVAR 67
9699: PUSH
9700: LD_INT 4
9702: PLUS
9703: ST_TO_ADDR
// for i = 1 to num_units do
9704: LD_ADDR_VAR 0 5
9708: PUSH
9709: DOUBLE
9710: LD_INT 1
9712: DEC
9713: ST_TO_ADDR
9714: LD_VAR 0 1
9718: PUSH
9719: FOR_TO
9720: IFFALSE 9793
// begin if Rand ( 1 , 3 ) = 1 then
9722: LD_INT 1
9724: PPUSH
9725: LD_INT 3
9727: PPUSH
9728: CALL_OW 12
9732: PUSH
9733: LD_INT 1
9735: EQUAL
9736: IFFALSE 9758
// PrepareHuman ( false , un_class , - overskill ) else
9738: LD_INT 0
9740: PPUSH
9741: LD_VAR 0 2
9745: PPUSH
9746: LD_VAR 0 6
9750: NEG
9751: PPUSH
9752: CALL_OW 380
9756: GO 9775
// PrepareHuman ( false , un_class , overskill ) ;
9758: LD_INT 0
9760: PPUSH
9761: LD_VAR 0 2
9765: PPUSH
9766: LD_VAR 0 6
9770: PPUSH
9771: CALL_OW 380
// result = result ^ CreateHuman ;
9775: LD_ADDR_VAR 0 4
9779: PUSH
9780: LD_VAR 0 4
9784: PUSH
9785: CALL_OW 44
9789: ADD
9790: ST_TO_ADDR
// end ;
9791: GO 9719
9793: POP
9794: POP
// end ;
9795: LD_VAR 0 4
9799: RET
// export function CreateApemenWithClass ( num_units , un_class , side ) ; var i ; begin
9800: LD_INT 0
9802: PPUSH
9803: PPUSH
// result = [ ] ;
9804: LD_ADDR_VAR 0 4
9808: PUSH
9809: EMPTY
9810: ST_TO_ADDR
// InitUc ;
9811: CALL_OW 18
// InitHc ;
9815: CALL_OW 19
// uc_side = side ;
9819: LD_ADDR_OWVAR 20
9823: PUSH
9824: LD_VAR 0 3
9828: ST_TO_ADDR
// uc_nation = nation_nature ;
9829: LD_ADDR_OWVAR 21
9833: PUSH
9834: LD_INT 0
9836: ST_TO_ADDR
// hc_class = un_class ;
9837: LD_ADDR_OWVAR 28
9841: PUSH
9842: LD_VAR 0 2
9846: ST_TO_ADDR
// for i = 1 to num_units do
9847: LD_ADDR_VAR 0 5
9851: PUSH
9852: DOUBLE
9853: LD_INT 1
9855: DEC
9856: ST_TO_ADDR
9857: LD_VAR 0 1
9861: PUSH
9862: FOR_TO
9863: IFFALSE 9969
// begin hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
9865: LD_ADDR_OWVAR 29
9869: PUSH
9870: LD_INT 11
9872: PPUSH
9873: LD_INT 13
9875: PPUSH
9876: CALL_OW 12
9880: PUSH
9881: LD_INT 10
9883: PPUSH
9884: LD_INT 11
9886: PPUSH
9887: CALL_OW 12
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
9896: LD_ADDR_OWVAR 27
9900: PUSH
9901: LD_INT 1
9903: PPUSH
9904: LD_INT 2
9906: PPUSH
9907: CALL_OW 12
9911: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , 0 , 0 ] ;
9912: LD_ADDR_OWVAR 31
9916: PUSH
9917: LD_INT 0
9919: PPUSH
9920: LD_INT 2
9922: PPUSH
9923: CALL_OW 12
9927: PUSH
9928: LD_INT 0
9930: PPUSH
9931: LD_INT 2
9933: PPUSH
9934: CALL_OW 12
9938: PUSH
9939: LD_INT 0
9941: PUSH
9942: LD_INT 0
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: ST_TO_ADDR
// result = result ^ CreateHuman ;
9951: LD_ADDR_VAR 0 4
9955: PUSH
9956: LD_VAR 0 4
9960: PUSH
9961: CALL_OW 44
9965: ADD
9966: ST_TO_ADDR
// end ;
9967: GO 9862
9969: POP
9970: POP
// end ;
9971: LD_VAR 0 4
9975: RET
// export function ResetVehicleAttackDelay ( base ) ; begin
9976: LD_INT 0
9978: PPUSH
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , Rand ( 5 5$30 , 7 7$30 ) - 1 1$0 * difficulty ) ;
9979: LD_ADDR_EXP 57
9983: PUSH
9984: LD_EXP 57
9988: PPUSH
9989: LD_VAR 0 1
9993: PPUSH
9994: LD_INT 11550
9996: PPUSH
9997: LD_INT 15750
9999: PPUSH
10000: CALL_OW 12
10004: PUSH
10005: LD_INT 2100
10007: PUSH
10008: LD_OWVAR 67
10012: MUL
10013: MINUS
10014: PPUSH
10015: CALL_OW 1
10019: ST_TO_ADDR
// end ;
10020: LD_VAR 0 2
10024: RET
// export function ResetHumanAttackDelay ( base ) ; begin
10025: LD_INT 0
10027: PPUSH
// ai_human_attack_delay = Replace ( ai_human_attack_delay , base , Rand ( 6 6$30 , 8 8$30 ) - 0 0$45 * difficulty ) ;
10028: LD_ADDR_EXP 67
10032: PUSH
10033: LD_EXP 67
10037: PPUSH
10038: LD_VAR 0 1
10042: PPUSH
10043: LD_INT 13650
10045: PPUSH
10046: LD_INT 17850
10048: PPUSH
10049: CALL_OW 12
10053: PUSH
10054: LD_INT 1575
10056: PUSH
10057: LD_OWVAR 67
10061: MUL
10062: MINUS
10063: PPUSH
10064: CALL_OW 1
10068: ST_TO_ADDR
// end ;
10069: LD_VAR 0 2
10073: RET
// function Action ; begin
10074: LD_INT 0
10076: PPUSH
// wait ( 2 ) ;
10077: LD_INT 2
10079: PPUSH
10080: CALL_OW 67
// CenterNowOnXY ( 168 , 109 ) ;
10084: LD_INT 168
10086: PPUSH
10087: LD_INT 109
10089: PPUSH
10090: CALL_OW 86
// RevealFogArea ( you , Am_base ) ;
10094: LD_EXP 2
10098: PPUSH
10099: LD_INT 4
10101: PPUSH
10102: CALL_OW 332
// wait ( 0 0$0.2 ) ;
10106: LD_INT 7
10108: PPUSH
10109: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10113: LD_STRING M1
10115: PPUSH
10116: CALL_OW 337
// wait ( 0 0$0.2 ) ;
10120: LD_INT 7
10122: PPUSH
10123: CALL_OW 67
// SaveForQuickRestart ;
10127: CALL_OW 22
// end ; end_of_file
10131: LD_VAR 0 1
10135: RET
// every 0 0$1 + 0 0$0.4 do
10136: GO 10138
10138: DISABLE
// begin repeat wait ( Rand ( 1 1$10 , 2 2$40 ) ) ;
10139: LD_INT 2450
10141: PPUSH
10142: LD_INT 5600
10144: PPUSH
10145: CALL_OW 12
10149: PPUSH
10150: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 3 , 5 ) , true ) ;
10154: LD_INT 3
10156: PPUSH
10157: LD_INT 5
10159: PPUSH
10160: CALL_OW 12
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: CALL_OW 57
// if Rand ( 1 , 4 ) = 1 then
10172: LD_INT 1
10174: PPUSH
10175: LD_INT 4
10177: PPUSH
10178: CALL_OW 12
10182: PUSH
10183: LD_INT 1
10185: EQUAL
10186: IFFALSE 10221
// begin wait ( Rand ( 0 0$5 , 0 0$20 ) ) ;
10188: LD_INT 175
10190: PPUSH
10191: LD_INT 700
10193: PPUSH
10194: CALL_OW 12
10198: PPUSH
10199: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 2 , 4 ) , true ) ;
10203: LD_INT 2
10205: PPUSH
10206: LD_INT 4
10208: PPUSH
10209: CALL_OW 12
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: CALL_OW 57
// end ; until false ;
10221: LD_INT 0
10223: IFFALSE 10139
// end ;
10225: END
// every 0 0$1 + 0 0$0.5 do var count , time ;
10226: GO 10228
10228: DISABLE
10229: LD_INT 0
10231: PPUSH
10232: PPUSH
// begin count = 0 ;
10233: LD_ADDR_VAR 0 1
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// repeat if game_phase < 3 then
10241: LD_EXP 88
10245: PUSH
10246: LD_INT 3
10248: LESS
10249: IFFALSE 10298
// time = [ 1 1$0 , 1 1$15 , 1 1$30 ] [ difficulty ] + ( 0 0$45 * count / ( count + 6 ) ) else
10251: LD_ADDR_VAR 0 2
10255: PUSH
10256: LD_INT 2100
10258: PUSH
10259: LD_INT 2625
10261: PUSH
10262: LD_INT 3150
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: PUSH
10270: LD_OWVAR 67
10274: ARRAY
10275: PUSH
10276: LD_INT 1575
10278: PUSH
10279: LD_VAR 0 1
10283: MUL
10284: PUSH
10285: LD_VAR 0 1
10289: PUSH
10290: LD_INT 6
10292: PLUS
10293: DIVREAL
10294: PLUS
10295: ST_TO_ADDR
10296: GO 10323
// time = [ 1 1$40 , 1 1$55 , 2 2$10 ] [ difficulty ] ;
10298: LD_ADDR_VAR 0 2
10302: PUSH
10303: LD_INT 3500
10305: PUSH
10306: LD_INT 4025
10308: PUSH
10309: LD_INT 4550
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: PUSH
10317: LD_OWVAR 67
10321: ARRAY
10322: ST_TO_ADDR
// wait ( Rand ( time , time + 0 0$30 ) ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_VAR 0 2
10332: PUSH
10333: LD_INT 1050
10335: PLUS
10336: PPUSH
10337: CALL_OW 12
10341: PPUSH
10342: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , player_crate_area , true ) ;
10346: LD_INT 3
10348: PPUSH
10349: LD_INT 5
10351: PPUSH
10352: CALL_OW 12
10356: PPUSH
10357: LD_INT 9
10359: PPUSH
10360: LD_INT 1
10362: PPUSH
10363: CALL_OW 55
// count = count + 1 ;
10367: LD_ADDR_VAR 0 1
10371: PUSH
10372: LD_VAR 0 1
10376: PUSH
10377: LD_INT 1
10379: PLUS
10380: ST_TO_ADDR
// until false ;
10381: LD_INT 0
10383: IFFALSE 10241
// end ; end_of_file
10385: PPOPN 2
10387: END
// every 0 0$10 do var i , base ;
10388: GO 10390
10390: DISABLE
10391: LD_INT 0
10393: PPUSH
10394: PPUSH
// begin for i = 1 to ai_depot do
10395: LD_ADDR_VAR 0 1
10399: PUSH
10400: DOUBLE
10401: LD_INT 1
10403: DEC
10404: ST_TO_ADDR
10405: LD_EXP 34
10409: PUSH
10410: FOR_TO
10411: IFFALSE 10521
// if IsOk ( ai_depot [ i ] ) and GetSide ( ai_depot [ i ] ) <> you then
10413: LD_EXP 34
10417: PUSH
10418: LD_VAR 0 1
10422: ARRAY
10423: PPUSH
10424: CALL_OW 302
10428: PUSH
10429: LD_EXP 34
10433: PUSH
10434: LD_VAR 0 1
10438: ARRAY
10439: PPUSH
10440: CALL_OW 255
10444: PUSH
10445: LD_EXP 2
10449: NONEQUAL
10450: AND
10451: IFFALSE 10519
// begin base = GetBase ( ai_depot [ i ] ) ;
10453: LD_ADDR_VAR 0 2
10457: PUSH
10458: LD_EXP 34
10462: PUSH
10463: LD_VAR 0 1
10467: ARRAY
10468: PPUSH
10469: CALL_OW 274
10473: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 300 ) ;
10474: LD_VAR 0 2
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: LD_INT 300
10484: PPUSH
10485: CALL_OW 277
// SetResourceType ( base , mat_oil , 300 ) ;
10489: LD_VAR 0 2
10493: PPUSH
10494: LD_INT 2
10496: PPUSH
10497: LD_INT 300
10499: PPUSH
10500: CALL_OW 277
// SetResourceType ( base , mat_siberit , 300 ) ;
10504: LD_VAR 0 2
10508: PPUSH
10509: LD_INT 3
10511: PPUSH
10512: LD_INT 300
10514: PPUSH
10515: CALL_OW 277
// end ;
10519: GO 10410
10521: POP
10522: POP
// enable ;
10523: ENABLE
// end ;
10524: PPOPN 2
10526: END
// on UnitDestroyed ( un ) do var side , temp_list , base ;
10527: LD_INT 0
10529: PPUSH
10530: PPUSH
10531: PPUSH
// begin if un = Heike then
10532: LD_VAR 0 1
10536: PUSH
10537: LD_EXP 9
10541: EQUAL
10542: IFFALSE 10566
// begin ExclusiveOn ;
10544: CALL_OW 4
// Wait ( 0 0$1 ) ;
10548: LD_INT 35
10550: PPUSH
10551: CALL_OW 67
// YouLost ( HeikeDead ) ;
10555: LD_STRING HeikeDead
10557: PPUSH
10558: CALL_OW 104
// ExclusiveOff ;
10562: CALL_OW 5
// end ; if un = Gensher then
10566: LD_VAR 0 1
10570: PUSH
10571: LD_EXP 23
10575: EQUAL
10576: IFFALSE 10600
// begin ExclusiveOn ;
10578: CALL_OW 4
// Wait ( 0 0$1 ) ;
10582: LD_INT 35
10584: PPUSH
10585: CALL_OW 67
// YouLost ( GensherDead ) ;
10589: LD_STRING GensherDead
10591: PPUSH
10592: CALL_OW 104
// ExclusiveOff ;
10596: CALL_OW 5
// end ; if UnitFilter ( original_gensher_people , [ [ f_class , class_scientistic ] , [ f_lives , 1 ] ] ) = 0 then
10600: LD_EXP 82
10604: PPUSH
10605: LD_INT 25
10607: PUSH
10608: LD_INT 4
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 24
10617: PUSH
10618: LD_INT 1
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PPUSH
10629: CALL_OW 72
10633: PUSH
10634: LD_INT 0
10636: EQUAL
10637: IFFALSE 10661
// begin ExclusiveOn ;
10639: CALL_OW 4
// wait ( 0 0$1 ) ;
10643: LD_INT 35
10645: PPUSH
10646: CALL_OW 67
// YouLost ( GensherScisDead ) ;
10650: LD_STRING GensherScisDead
10652: PPUSH
10653: CALL_OW 104
// ExclusiveOff ;
10657: CALL_OW 5
// end ; for base in ai_bases do
10661: LD_ADDR_VAR 0 4
10665: PUSH
10666: LD_EXP 58
10670: PUSH
10671: FOR_IN
10672: IFFALSE 10723
// begin temp_list = ai_captured_buildings [ base ] diff un ;
10674: LD_ADDR_VAR 0 3
10678: PUSH
10679: LD_EXP 78
10683: PUSH
10684: LD_VAR 0 4
10688: ARRAY
10689: PUSH
10690: LD_VAR 0 1
10694: DIFF
10695: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
10696: LD_ADDR_EXP 78
10700: PUSH
10701: LD_EXP 78
10705: PPUSH
10706: LD_VAR 0 4
10710: PPUSH
10711: LD_VAR 0 3
10715: PPUSH
10716: CALL_OW 1
10720: ST_TO_ADDR
// end ;
10721: GO 10671
10723: POP
10724: POP
// side = GetSide ( un ) ;
10725: LD_ADDR_VAR 0 2
10729: PUSH
10730: LD_VAR 0 1
10734: PPUSH
10735: CALL_OW 255
10739: ST_TO_ADDR
// if side = you then
10740: LD_VAR 0 2
10744: PUSH
10745: LD_EXP 2
10749: EQUAL
10750: IFFALSE 10754
// exit ;
10752: GO 10977
// if side = you_alt and game_phase = 1 then
10754: LD_VAR 0 2
10758: PUSH
10759: LD_EXP 5
10763: EQUAL
10764: PUSH
10765: LD_EXP 88
10769: PUSH
10770: LD_INT 1
10772: EQUAL
10773: AND
10774: IFFALSE 10837
// begin case GetType ( un ) of unit_human :
10776: LD_VAR 0 1
10780: PPUSH
10781: CALL_OW 247
10785: PUSH
10786: LD_INT 1
10788: DOUBLE
10789: EQUAL
10790: IFTRUE 10794
10792: GO 10811
10794: POP
// russian_interference_points = russian_interference_points + 3 ; unit_building :
10795: LD_ADDR_EXP 96
10799: PUSH
10800: LD_EXP 96
10804: PUSH
10805: LD_INT 3
10807: PLUS
10808: ST_TO_ADDR
10809: GO 10837
10811: LD_INT 3
10813: DOUBLE
10814: EQUAL
10815: IFTRUE 10819
10817: GO 10836
10819: POP
// russian_interference_points = russian_interference_points + 2 ; end ;
10820: LD_ADDR_EXP 96
10824: PUSH
10825: LD_EXP 96
10829: PUSH
10830: LD_INT 2
10832: PLUS
10833: ST_TO_ADDR
10834: GO 10837
10836: POP
// end ; case GetType ( un ) of unit_human :
10837: LD_VAR 0 1
10841: PPUSH
10842: CALL_OW 247
10846: PUSH
10847: LD_INT 1
10849: DOUBLE
10850: EQUAL
10851: IFTRUE 10855
10853: GO 10892
10855: POP
// for base in ai_bases do
10856: LD_ADDR_VAR 0 4
10860: PUSH
10861: LD_EXP 58
10865: PUSH
10866: FOR_IN
10867: IFFALSE 10888
// RemoveHumanFromVariables ( base , un , true ) ; unit_vehicle :
10869: LD_VAR 0 4
10873: PPUSH
10874: LD_VAR 0 1
10878: PPUSH
10879: LD_INT 1
10881: PPUSH
10882: CALL 11533 0 3
10886: GO 10866
10888: POP
10889: POP
10890: GO 10977
10892: LD_INT 2
10894: DOUBLE
10895: EQUAL
10896: IFTRUE 10900
10898: GO 10934
10900: POP
// for base in ai_bases do
10901: LD_ADDR_VAR 0 4
10905: PUSH
10906: LD_EXP 58
10910: PUSH
10911: FOR_IN
10912: IFFALSE 10930
// RemoveVehicleFromVariables ( base , un ) ; unit_building :
10914: LD_VAR 0 4
10918: PPUSH
10919: LD_VAR 0 1
10923: PPUSH
10924: CALL 11141 0 2
10928: GO 10911
10930: POP
10931: POP
10932: GO 10977
10934: LD_INT 3
10936: DOUBLE
10937: EQUAL
10938: IFTRUE 10942
10940: GO 10976
10942: POP
// for base in ai_bases do
10943: LD_ADDR_VAR 0 4
10947: PUSH
10948: LD_EXP 58
10952: PUSH
10953: FOR_IN
10954: IFFALSE 10972
// RemoveBuildingFromVariables ( base , un ) ; end ;
10956: LD_VAR 0 4
10960: PPUSH
10961: LD_VAR 0 1
10965: PPUSH
10966: CALL 10980 0 2
10970: GO 10953
10972: POP
10973: POP
10974: GO 10977
10976: POP
// end ;
10977: PPOPN 4
10979: END
// function RemoveBuildingFromVariables ( base , building ) ; var temp_list ; begin
10980: LD_INT 0
10982: PPUSH
10983: PPUSH
// temp_list = ai_all_buildings [ base ] diff building ;
10984: LD_ADDR_VAR 0 4
10988: PUSH
10989: LD_EXP 44
10993: PUSH
10994: LD_VAR 0 1
10998: ARRAY
10999: PUSH
11000: LD_VAR 0 2
11004: DIFF
11005: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
11006: LD_ADDR_EXP 44
11010: PUSH
11011: LD_EXP 44
11015: PPUSH
11016: LD_VAR 0 1
11020: PPUSH
11021: LD_VAR 0 4
11025: PPUSH
11026: CALL_OW 1
11030: ST_TO_ADDR
// temp_list = ai_excepted_buildings [ base ] diff building ;
11031: LD_ADDR_VAR 0 4
11035: PUSH
11036: LD_EXP 68
11040: PUSH
11041: LD_VAR 0 1
11045: ARRAY
11046: PUSH
11047: LD_VAR 0 2
11051: DIFF
11052: ST_TO_ADDR
// ai_excepted_buildings = Replace ( ai_excepted_buildings , base , temp_list ) ;
11053: LD_ADDR_EXP 68
11057: PUSH
11058: LD_EXP 68
11062: PPUSH
11063: LD_VAR 0 1
11067: PPUSH
11068: LD_VAR 0 4
11072: PPUSH
11073: CALL_OW 1
11077: ST_TO_ADDR
// if building = ai_building_under_construction [ base ] then
11078: LD_VAR 0 2
11082: PUSH
11083: LD_EXP 42
11087: PUSH
11088: LD_VAR 0 1
11092: ARRAY
11093: EQUAL
11094: IFFALSE 11119
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
11096: LD_ADDR_EXP 42
11100: PUSH
11101: LD_EXP 42
11105: PPUSH
11106: LD_VAR 0 1
11110: PPUSH
11111: LD_INT 0
11113: PPUSH
11114: CALL_OW 1
11118: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , building , false ) ;
11119: LD_VAR 0 1
11123: PPUSH
11124: LD_VAR 0 2
11128: PPUSH
11129: LD_INT 0
11131: PPUSH
11132: CALL 7009 0 3
// end ;
11136: LD_VAR 0 3
11140: RET
// function RemoveVehicleFromVariables ( base , vehicle ) ; var temp_list ; begin
11141: LD_INT 0
11143: PPUSH
11144: PPUSH
// if vehicle in ai_vehicles_defend [ base ] then
11145: LD_VAR 0 2
11149: PUSH
11150: LD_EXP 39
11154: PUSH
11155: LD_VAR 0 1
11159: ARRAY
11160: IN
11161: IFFALSE 11210
// begin temp_list = ai_vehicles_defend [ base ] diff vehicle ;
11163: LD_ADDR_VAR 0 4
11167: PUSH
11168: LD_EXP 39
11172: PUSH
11173: LD_VAR 0 1
11177: ARRAY
11178: PUSH
11179: LD_VAR 0 2
11183: DIFF
11184: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list ) ;
11185: LD_ADDR_EXP 39
11189: PUSH
11190: LD_EXP 39
11194: PPUSH
11195: LD_VAR 0 1
11199: PPUSH
11200: LD_VAR 0 4
11204: PPUSH
11205: CALL_OW 1
11209: ST_TO_ADDR
// end ; if vehicle in ai_vehicles_attack [ base ] then
11210: LD_VAR 0 2
11214: PUSH
11215: LD_EXP 40
11219: PUSH
11220: LD_VAR 0 1
11224: ARRAY
11225: IN
11226: IFFALSE 11275
// begin temp_list = ai_vehicles_attack [ base ] diff vehicle ;
11228: LD_ADDR_VAR 0 4
11232: PUSH
11233: LD_EXP 40
11237: PUSH
11238: LD_VAR 0 1
11242: ARRAY
11243: PUSH
11244: LD_VAR 0 2
11248: DIFF
11249: ST_TO_ADDR
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , temp_list ) ;
11250: LD_ADDR_EXP 40
11254: PUSH
11255: LD_EXP 40
11259: PPUSH
11260: LD_VAR 0 1
11264: PPUSH
11265: LD_VAR 0 4
11269: PPUSH
11270: CALL_OW 1
11274: ST_TO_ADDR
// end ; if vehicle = ai_cargo_bay [ base ] then
11275: LD_VAR 0 2
11279: PUSH
11280: LD_EXP 60
11284: PUSH
11285: LD_VAR 0 1
11289: ARRAY
11290: EQUAL
11291: IFFALSE 11316
// begin ai_cargo_bay = Replace ( ai_cargo_bay , base , 0 ) ;
11293: LD_ADDR_EXP 60
11297: PUSH
11298: LD_EXP 60
11302: PPUSH
11303: LD_VAR 0 1
11307: PPUSH
11308: LD_INT 0
11310: PPUSH
11311: CALL_OW 1
11315: ST_TO_ADDR
// end ; if vehicle = ai_crane [ base ] then
11316: LD_VAR 0 2
11320: PUSH
11321: LD_EXP 70
11325: PUSH
11326: LD_VAR 0 1
11330: ARRAY
11331: EQUAL
11332: IFFALSE 11398
// begin ai_crane = Replace ( ai_crane , base , 0 ) ;
11334: LD_ADDR_EXP 70
11338: PUSH
11339: LD_EXP 70
11343: PPUSH
11344: LD_VAR 0 1
11348: PPUSH
11349: LD_INT 0
11351: PPUSH
11352: CALL_OW 1
11356: ST_TO_ADDR
// if vehicle = ai_building_constructor [ base ] then
11357: LD_VAR 0 2
11361: PUSH
11362: LD_EXP 45
11366: PUSH
11367: LD_VAR 0 1
11371: ARRAY
11372: EQUAL
11373: IFFALSE 11398
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
11375: LD_ADDR_EXP 45
11379: PUSH
11380: LD_EXP 45
11384: PPUSH
11385: LD_VAR 0 1
11389: PPUSH
11390: LD_INT 0
11392: PPUSH
11393: CALL_OW 1
11397: ST_TO_ADDR
// end ; if vehicle in ai_vehicles_being_repaired [ base ] then
11398: LD_VAR 0 2
11402: PUSH
11403: LD_EXP 79
11407: PUSH
11408: LD_VAR 0 1
11412: ARRAY
11413: IN
11414: IFFALSE 11463
// begin temp_list = ai_vehicles_being_repaired [ base ] diff vehicle ;
11416: LD_ADDR_VAR 0 4
11420: PUSH
11421: LD_EXP 79
11425: PUSH
11426: LD_VAR 0 1
11430: ARRAY
11431: PUSH
11432: LD_VAR 0 2
11436: DIFF
11437: ST_TO_ADDR
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
11438: LD_ADDR_EXP 79
11442: PUSH
11443: LD_EXP 79
11447: PPUSH
11448: LD_VAR 0 1
11452: PPUSH
11453: LD_VAR 0 4
11457: PPUSH
11458: CALL_OW 1
11462: ST_TO_ADDR
// end ; if vehicle in ai_refuel_vehicles_list [ base ] then
11463: LD_VAR 0 2
11467: PUSH
11468: LD_EXP 54
11472: PUSH
11473: LD_VAR 0 1
11477: ARRAY
11478: IN
11479: IFFALSE 11528
// begin temp_list = ai_refuel_vehicles_list [ base ] diff vehicle ;
11481: LD_ADDR_VAR 0 4
11485: PUSH
11486: LD_EXP 54
11490: PUSH
11491: LD_VAR 0 1
11495: ARRAY
11496: PUSH
11497: LD_VAR 0 2
11501: DIFF
11502: ST_TO_ADDR
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
11503: LD_ADDR_EXP 54
11507: PUSH
11508: LD_EXP 54
11512: PPUSH
11513: LD_VAR 0 1
11517: PPUSH
11518: LD_VAR 0 4
11522: PPUSH
11523: CALL_OW 1
11527: ST_TO_ADDR
// end ; end ;
11528: LD_VAR 0 3
11532: RET
// function RemoveHumanFromVariables ( base , human , check_if_base_is_dead ) ; var temp_list ; begin
11533: LD_INT 0
11535: PPUSH
11536: PPUSH
// if human in ai_soldiers [ base ] then
11537: LD_VAR 0 2
11541: PUSH
11542: LD_EXP 29
11546: PUSH
11547: LD_VAR 0 1
11551: ARRAY
11552: IN
11553: IFFALSE 11602
// begin temp_list = ai_soldiers [ base ] diff human ;
11555: LD_ADDR_VAR 0 5
11559: PUSH
11560: LD_EXP 29
11564: PUSH
11565: LD_VAR 0 1
11569: ARRAY
11570: PUSH
11571: LD_VAR 0 2
11575: DIFF
11576: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , base , temp_list ) ;
11577: LD_ADDR_EXP 29
11581: PUSH
11582: LD_EXP 29
11586: PPUSH
11587: LD_VAR 0 1
11591: PPUSH
11592: LD_VAR 0 5
11596: PPUSH
11597: CALL_OW 1
11601: ST_TO_ADDR
// end ; if human in ai_attacking_soldiers [ base ] then
11602: LD_VAR 0 2
11606: PUSH
11607: LD_EXP 63
11611: PUSH
11612: LD_VAR 0 1
11616: ARRAY
11617: IN
11618: IFFALSE 11667
// begin temp_list = ai_attacking_soldiers [ base ] diff human ;
11620: LD_ADDR_VAR 0 5
11624: PUSH
11625: LD_EXP 63
11629: PUSH
11630: LD_VAR 0 1
11634: ARRAY
11635: PUSH
11636: LD_VAR 0 2
11640: DIFF
11641: ST_TO_ADDR
// ai_attacking_soldiers = Replace ( ai_attacking_soldiers , base , temp_list ) ;
11642: LD_ADDR_EXP 63
11646: PUSH
11647: LD_EXP 63
11651: PPUSH
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_VAR 0 5
11661: PPUSH
11662: CALL_OW 1
11666: ST_TO_ADDR
// end ; if human in ai_engineers [ base ] then
11667: LD_VAR 0 2
11671: PUSH
11672: LD_EXP 30
11676: PUSH
11677: LD_VAR 0 1
11681: ARRAY
11682: IN
11683: IFFALSE 11732
// begin temp_list = ai_engineers [ base ] diff human ;
11685: LD_ADDR_VAR 0 5
11689: PUSH
11690: LD_EXP 30
11694: PUSH
11695: LD_VAR 0 1
11699: ARRAY
11700: PUSH
11701: LD_VAR 0 2
11705: DIFF
11706: ST_TO_ADDR
// ai_engineers = Replace ( ai_engineers , base , temp_list ) ;
11707: LD_ADDR_EXP 30
11711: PUSH
11712: LD_EXP 30
11716: PPUSH
11717: LD_VAR 0 1
11721: PPUSH
11722: LD_VAR 0 5
11726: PPUSH
11727: CALL_OW 1
11731: ST_TO_ADDR
// end ; if human in ai_apemen_engineers [ base ] then
11732: LD_VAR 0 2
11736: PUSH
11737: LD_EXP 62
11741: PUSH
11742: LD_VAR 0 1
11746: ARRAY
11747: IN
11748: IFFALSE 11797
// begin temp_list = ai_apemen_engineers [ base ] diff human ;
11750: LD_ADDR_VAR 0 5
11754: PUSH
11755: LD_EXP 62
11759: PUSH
11760: LD_VAR 0 1
11764: ARRAY
11765: PUSH
11766: LD_VAR 0 2
11770: DIFF
11771: ST_TO_ADDR
// ai_apemen_engineers = Replace ( ai_apemen_engineers , base , temp_list ) ;
11772: LD_ADDR_EXP 62
11776: PUSH
11777: LD_EXP 62
11781: PPUSH
11782: LD_VAR 0 1
11786: PPUSH
11787: LD_VAR 0 5
11791: PPUSH
11792: CALL_OW 1
11796: ST_TO_ADDR
// end ; if human in ai_mechanics_defend [ base ] then
11797: LD_VAR 0 2
11801: PUSH
11802: LD_EXP 31
11806: PUSH
11807: LD_VAR 0 1
11811: ARRAY
11812: IN
11813: IFFALSE 11862
// begin temp_list = ai_mechanics_defend [ base ] diff human ;
11815: LD_ADDR_VAR 0 5
11819: PUSH
11820: LD_EXP 31
11824: PUSH
11825: LD_VAR 0 1
11829: ARRAY
11830: PUSH
11831: LD_VAR 0 2
11835: DIFF
11836: ST_TO_ADDR
// ai_mechanics_defend = Replace ( ai_mechanics_defend , base , temp_list ) ;
11837: LD_ADDR_EXP 31
11841: PUSH
11842: LD_EXP 31
11846: PPUSH
11847: LD_VAR 0 1
11851: PPUSH
11852: LD_VAR 0 5
11856: PPUSH
11857: CALL_OW 1
11861: ST_TO_ADDR
// end ; if human in ai_scientists [ base ] then
11862: LD_VAR 0 2
11866: PUSH
11867: LD_EXP 32
11871: PUSH
11872: LD_VAR 0 1
11876: ARRAY
11877: IN
11878: IFFALSE 11927
// begin temp_list = ai_scientists [ base ] diff human ;
11880: LD_ADDR_VAR 0 5
11884: PUSH
11885: LD_EXP 32
11889: PUSH
11890: LD_VAR 0 1
11894: ARRAY
11895: PUSH
11896: LD_VAR 0 2
11900: DIFF
11901: ST_TO_ADDR
// ai_scientists = Replace ( ai_scientists , base , temp_list ) ;
11902: LD_ADDR_EXP 32
11906: PUSH
11907: LD_EXP 32
11911: PPUSH
11912: LD_VAR 0 1
11916: PPUSH
11917: LD_VAR 0 5
11921: PPUSH
11922: CALL_OW 1
11926: ST_TO_ADDR
// end ; if human in ai_attacking_scientists [ base ] then
11927: LD_VAR 0 2
11931: PUSH
11932: LD_EXP 64
11936: PUSH
11937: LD_VAR 0 1
11941: ARRAY
11942: IN
11943: IFFALSE 11992
// begin temp_list = ai_attacking_scientists [ base ] diff human ;
11945: LD_ADDR_VAR 0 5
11949: PUSH
11950: LD_EXP 64
11954: PUSH
11955: LD_VAR 0 1
11959: ARRAY
11960: PUSH
11961: LD_VAR 0 2
11965: DIFF
11966: ST_TO_ADDR
// ai_attacking_scientists = Replace ( ai_attacking_scientists , base , temp_list ) ;
11967: LD_ADDR_EXP 64
11971: PUSH
11972: LD_EXP 64
11976: PPUSH
11977: LD_VAR 0 1
11981: PPUSH
11982: LD_VAR 0 5
11986: PPUSH
11987: CALL_OW 1
11991: ST_TO_ADDR
// end ; if human in ai_heal_these_humans [ base ] then
11992: LD_VAR 0 2
11996: PUSH
11997: LD_EXP 43
12001: PUSH
12002: LD_VAR 0 1
12006: ARRAY
12007: IN
12008: IFFALSE 12057
// begin temp_list = ai_heal_these_humans [ base ] diff human ;
12010: LD_ADDR_VAR 0 5
12014: PUSH
12015: LD_EXP 43
12019: PUSH
12020: LD_VAR 0 1
12024: ARRAY
12025: PUSH
12026: LD_VAR 0 2
12030: DIFF
12031: ST_TO_ADDR
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12032: LD_ADDR_EXP 43
12036: PUSH
12037: LD_EXP 43
12041: PPUSH
12042: LD_VAR 0 1
12046: PPUSH
12047: LD_VAR 0 5
12051: PPUSH
12052: CALL_OW 1
12056: ST_TO_ADDR
// end ; if human = ai_building_constructor [ base ] then
12057: LD_VAR 0 2
12061: PUSH
12062: LD_EXP 45
12066: PUSH
12067: LD_VAR 0 1
12071: ARRAY
12072: EQUAL
12073: IFFALSE 12098
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
12075: LD_ADDR_EXP 45
12079: PUSH
12080: LD_EXP 45
12084: PPUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 1
12097: ST_TO_ADDR
// if human in ai_retreating_attacking_humans [ base ] then
12098: LD_VAR 0 2
12102: PUSH
12103: LD_EXP 66
12107: PUSH
12108: LD_VAR 0 1
12112: ARRAY
12113: IN
12114: IFFALSE 12163
// begin temp_list = ai_retreating_attacking_humans [ base ] diff human ;
12116: LD_ADDR_VAR 0 5
12120: PUSH
12121: LD_EXP 66
12125: PUSH
12126: LD_VAR 0 1
12130: ARRAY
12131: PUSH
12132: LD_VAR 0 2
12136: DIFF
12137: ST_TO_ADDR
// ai_retreating_attacking_humans = Replace ( ai_retreating_attacking_humans , base , temp_list ) ;
12138: LD_ADDR_EXP 66
12142: PUSH
12143: LD_EXP 66
12147: PPUSH
12148: LD_VAR 0 1
12152: PPUSH
12153: LD_VAR 0 5
12157: PPUSH
12158: CALL_OW 1
12162: ST_TO_ADDR
// end ; if check_if_base_is_dead then
12163: LD_VAR 0 3
12167: IFFALSE 12277
// if ( ( ai_soldiers [ base ] ^ ai_attacking_soldiers [ base ] ^ ai_engineers [ base ] ^ ai_apemen_engineers [ base ] ^ ai_mechanics_defend [ base ] ^ ai_scientists [ base ] ^ ai_attacking_scientists [ base ] ) diff 0 ) = 0 then
12169: LD_EXP 29
12173: PUSH
12174: LD_VAR 0 1
12178: ARRAY
12179: PUSH
12180: LD_EXP 63
12184: PUSH
12185: LD_VAR 0 1
12189: ARRAY
12190: ADD
12191: PUSH
12192: LD_EXP 30
12196: PUSH
12197: LD_VAR 0 1
12201: ARRAY
12202: ADD
12203: PUSH
12204: LD_EXP 62
12208: PUSH
12209: LD_VAR 0 1
12213: ARRAY
12214: ADD
12215: PUSH
12216: LD_EXP 31
12220: PUSH
12221: LD_VAR 0 1
12225: ARRAY
12226: ADD
12227: PUSH
12228: LD_EXP 32
12232: PUSH
12233: LD_VAR 0 1
12237: ARRAY
12238: ADD
12239: PUSH
12240: LD_EXP 64
12244: PUSH
12245: LD_VAR 0 1
12249: ARRAY
12250: ADD
12251: PUSH
12252: LD_INT 0
12254: DIFF
12255: PUSH
12256: LD_INT 0
12258: EQUAL
12259: IFFALSE 12277
// ai_bases = ai_bases diff base ;
12261: LD_ADDR_EXP 58
12265: PUSH
12266: LD_EXP 58
12270: PUSH
12271: LD_VAR 0 1
12275: DIFF
12276: ST_TO_ADDR
// end ;
12277: LD_VAR 0 4
12281: RET
// function GetBaseArea ( base ) ; begin
12282: LD_INT 0
12284: PPUSH
// case base of 1 :
12285: LD_VAR 0 1
12289: PUSH
12290: LD_INT 1
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12309
12298: POP
// result = Am_base ; 2 :
12299: LD_ADDR_VAR 0 2
12303: PUSH
12304: LD_INT 4
12306: ST_TO_ADDR
12307: GO 12348
12309: LD_INT 2
12311: DOUBLE
12312: EQUAL
12313: IFTRUE 12317
12315: GO 12328
12317: POP
// result = Gensher_base ; 3 :
12318: LD_ADDR_VAR 0 2
12322: PUSH
12323: LD_INT 7
12325: ST_TO_ADDR
12326: GO 12348
12328: LD_INT 3
12330: DOUBLE
12331: EQUAL
12332: IFTRUE 12336
12334: GO 12347
12336: POP
// result = Ru_base ; end ;
12337: LD_ADDR_VAR 0 2
12341: PUSH
12342: LD_INT 3
12344: ST_TO_ADDR
12345: GO 12348
12347: POP
// end ;
12348: LD_VAR 0 2
12352: RET
// function GetBaseSide ( base ) ; begin
12353: LD_INT 0
12355: PPUSH
// case base of 1 :
12356: LD_VAR 0 1
12360: PUSH
12361: LD_INT 1
12363: DOUBLE
12364: EQUAL
12365: IFTRUE 12369
12367: GO 12382
12369: POP
// result = americans ; 2 :
12370: LD_ADDR_VAR 0 2
12374: PUSH
12375: LD_EXP 6
12379: ST_TO_ADDR
12380: GO 12425
12382: LD_INT 2
12384: DOUBLE
12385: EQUAL
12386: IFTRUE 12390
12388: GO 12403
12390: POP
// result = you_alt ; 3 :
12391: LD_ADDR_VAR 0 2
12395: PUSH
12396: LD_EXP 5
12400: ST_TO_ADDR
12401: GO 12425
12403: LD_INT 3
12405: DOUBLE
12406: EQUAL
12407: IFTRUE 12411
12409: GO 12424
12411: POP
// result = russians ; end ;
12412: LD_ADDR_VAR 0 2
12416: PUSH
12417: LD_EXP 3
12421: ST_TO_ADDR
12422: GO 12425
12424: POP
// end ;
12425: LD_VAR 0 2
12429: RET
// function GetBaseNation ( base ) ; begin
12430: LD_INT 0
12432: PPUSH
// case base of 1 :
12433: LD_VAR 0 1
12437: PUSH
12438: LD_INT 1
12440: DOUBLE
12441: EQUAL
12442: IFTRUE 12446
12444: GO 12457
12446: POP
// result = nation_american ; 2 :
12447: LD_ADDR_VAR 0 2
12451: PUSH
12452: LD_INT 1
12454: ST_TO_ADDR
12455: GO 12496
12457: LD_INT 2
12459: DOUBLE
12460: EQUAL
12461: IFTRUE 12465
12463: GO 12476
12465: POP
// result = nation_arabian ; 3 :
12466: LD_ADDR_VAR 0 2
12470: PUSH
12471: LD_INT 2
12473: ST_TO_ADDR
12474: GO 12496
12476: LD_INT 3
12478: DOUBLE
12479: EQUAL
12480: IFTRUE 12484
12482: GO 12495
12484: POP
// result = nation_russian ; end ;
12485: LD_ADDR_VAR 0 2
12489: PUSH
12490: LD_INT 3
12492: ST_TO_ADDR
12493: GO 12496
12495: POP
// end ;
12496: LD_VAR 0 2
12500: RET
// function FindBase ( un ) ; var base ; begin
12501: LD_INT 0
12503: PPUSH
12504: PPUSH
// for base in ai_bases do
12505: LD_ADDR_VAR 0 3
12509: PUSH
12510: LD_EXP 58
12514: PUSH
12515: FOR_IN
12516: IFFALSE 12555
// if IsInArea ( un , GetBaseArea ( base ) ) then
12518: LD_VAR 0 1
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: CALL 12282 0 1
12532: PPUSH
12533: CALL_OW 308
12537: IFFALSE 12553
// begin result = base ;
12539: LD_ADDR_VAR 0 2
12543: PUSH
12544: LD_VAR 0 3
12548: ST_TO_ADDR
// exit ;
12549: POP
12550: POP
12551: GO 12566
// end ;
12553: GO 12515
12555: POP
12556: POP
// result = - 1 ;
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: LD_INT 1
12564: NEG
12565: ST_TO_ADDR
// end ;
12566: LD_VAR 0 2
12570: RET
// every 0 0$1 do var side , i , temp_list , buildings_list , soldiers_list , temp_unit , base , val , special_units , bunkers , under_attack , j ; var am_snipers , temp_list_2 ;
12571: GO 12573
12573: DISABLE
12574: LD_INT 0
12576: PPUSH
12577: PPUSH
12578: PPUSH
12579: PPUSH
12580: PPUSH
12581: PPUSH
12582: PPUSH
12583: PPUSH
12584: PPUSH
12585: PPUSH
12586: PPUSH
12587: PPUSH
12588: PPUSH
12589: PPUSH
// begin for base in ai_bases do
12590: LD_ADDR_VAR 0 7
12594: PUSH
12595: LD_EXP 58
12599: PUSH
12600: FOR_IN
12601: IFFALSE 13985
// begin side = GetBaseSide ( base ) ;
12603: LD_ADDR_VAR 0 1
12607: PUSH
12608: LD_VAR 0 7
12612: PPUSH
12613: CALL 12353 0 1
12617: ST_TO_ADDR
// soldiers_list = ai_soldiers [ base ] ;
12618: LD_ADDR_VAR 0 5
12622: PUSH
12623: LD_EXP 29
12627: PUSH
12628: LD_VAR 0 7
12632: ARRAY
12633: ST_TO_ADDR
// under_attack := BaseUnderAttack ( base , - 1 ) ;
12634: LD_ADDR_VAR 0 11
12638: PUSH
12639: LD_VAR 0 7
12643: PPUSH
12644: LD_INT 1
12646: NEG
12647: PPUSH
12648: CALL 23273 0 2
12652: ST_TO_ADDR
// if base = 1 and under_attack and game_phase > 1 then
12653: LD_VAR 0 7
12657: PUSH
12658: LD_INT 1
12660: EQUAL
12661: PUSH
12662: LD_VAR 0 11
12666: AND
12667: PUSH
12668: LD_EXP 88
12672: PUSH
12673: LD_INT 1
12675: GREATER
12676: AND
12677: IFFALSE 12712
// am_snipers = UnitFilter ( ai_soldiers [ base ] , [ f_class , class_sniper ] ) else
12679: LD_ADDR_VAR 0 13
12683: PUSH
12684: LD_EXP 29
12688: PUSH
12689: LD_VAR 0 7
12693: ARRAY
12694: PPUSH
12695: LD_INT 25
12697: PUSH
12698: LD_INT 5
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PPUSH
12705: CALL_OW 72
12709: ST_TO_ADDR
12710: GO 12719
// am_snipers = [ ] ;
12712: LD_ADDR_VAR 0 13
12716: PUSH
12717: EMPTY
12718: ST_TO_ADDR
// if under_attack then
12719: LD_VAR 0 11
12723: IFFALSE 12780
// begin temp_list = ai_heal_these_humans [ base ] diff ( soldiers_list diff am_snipers ) ;
12725: LD_ADDR_VAR 0 3
12729: PUSH
12730: LD_EXP 43
12734: PUSH
12735: LD_VAR 0 7
12739: ARRAY
12740: PUSH
12741: LD_VAR 0 5
12745: PUSH
12746: LD_VAR 0 13
12750: DIFF
12751: DIFF
12752: ST_TO_ADDR
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12753: LD_ADDR_EXP 43
12757: PUSH
12758: LD_EXP 43
12762: PPUSH
12763: LD_VAR 0 7
12767: PPUSH
12768: LD_VAR 0 3
12772: PPUSH
12773: CALL_OW 1
12777: ST_TO_ADDR
// end else
12778: GO 12994
// begin temp_list = ai_heal_these_humans [ base ] ;
12780: LD_ADDR_VAR 0 3
12784: PUSH
12785: LD_EXP 43
12789: PUSH
12790: LD_VAR 0 7
12794: ARRAY
12795: ST_TO_ADDR
// for i in soldiers_list diff ai_heal_these_humans [ base ] do
12796: LD_ADDR_VAR 0 2
12800: PUSH
12801: LD_VAR 0 5
12805: PUSH
12806: LD_EXP 43
12810: PUSH
12811: LD_VAR 0 7
12815: ARRAY
12816: DIFF
12817: PUSH
12818: FOR_IN
12819: IFFALSE 12854
// if GetLives ( i ) < 800 then
12821: LD_VAR 0 2
12825: PPUSH
12826: CALL_OW 256
12830: PUSH
12831: LD_INT 800
12833: LESS
12834: IFFALSE 12852
// temp_list = temp_list ^ i ;
12836: LD_ADDR_VAR 0 3
12840: PUSH
12841: LD_VAR 0 3
12845: PUSH
12846: LD_VAR 0 2
12850: ADD
12851: ST_TO_ADDR
12852: GO 12818
12854: POP
12855: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12856: LD_ADDR_EXP 43
12860: PUSH
12861: LD_EXP 43
12865: PPUSH
12866: LD_VAR 0 7
12870: PPUSH
12871: LD_VAR 0 3
12875: PPUSH
12876: CALL_OW 1
12880: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
12881: LD_ADDR_VAR 0 2
12885: PUSH
12886: LD_EXP 43
12890: PUSH
12891: LD_VAR 0 7
12895: ARRAY
12896: PUSH
12897: FOR_IN
12898: IFFALSE 12970
// if i in soldiers_list then
12900: LD_VAR 0 2
12904: PUSH
12905: LD_VAR 0 5
12909: IN
12910: IFFALSE 12968
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
12912: LD_VAR 0 2
12916: PPUSH
12917: CALL_OW 310
12921: PPUSH
12922: CALL_OW 247
12926: PUSH
12927: LD_INT 2
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 12947
12935: POP
// ComExitVehicle ( i ) ; unit_building :
12936: LD_VAR 0 2
12940: PPUSH
12941: CALL_OW 121
12945: GO 12968
12947: LD_INT 3
12949: DOUBLE
12950: EQUAL
12951: IFTRUE 12955
12953: GO 12967
12955: POP
// ComExitBuilding ( i ) ; end ;
12956: LD_VAR 0 2
12960: PPUSH
12961: CALL_OW 122
12965: GO 12968
12967: POP
12968: GO 12897
12970: POP
12971: POP
// soldiers_list = soldiers_list diff ai_heal_these_humans [ base ] ;
12972: LD_ADDR_VAR 0 5
12976: PUSH
12977: LD_VAR 0 5
12981: PUSH
12982: LD_EXP 43
12986: PUSH
12987: LD_VAR 0 7
12991: ARRAY
12992: DIFF
12993: ST_TO_ADDR
// end ; temp_list = ai_heal_these_humans [ base ] ;
12994: LD_ADDR_VAR 0 3
12998: PUSH
12999: LD_EXP 43
13003: PUSH
13004: LD_VAR 0 7
13008: ARRAY
13009: ST_TO_ADDR
// for i in am_snipers diff ai_heal_these_humans [ base ] do
13010: LD_ADDR_VAR 0 2
13014: PUSH
13015: LD_VAR 0 13
13019: PUSH
13020: LD_EXP 43
13024: PUSH
13025: LD_VAR 0 7
13029: ARRAY
13030: DIFF
13031: PUSH
13032: FOR_IN
13033: IFFALSE 13068
// if GetLives ( i ) <= 500 then
13035: LD_VAR 0 2
13039: PPUSH
13040: CALL_OW 256
13044: PUSH
13045: LD_INT 500
13047: LESSEQUAL
13048: IFFALSE 13066
// temp_list = temp_list ^ i ;
13050: LD_ADDR_VAR 0 3
13054: PUSH
13055: LD_VAR 0 3
13059: PUSH
13060: LD_VAR 0 2
13064: ADD
13065: ST_TO_ADDR
13066: GO 13032
13068: POP
13069: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
13070: LD_ADDR_EXP 43
13074: PUSH
13075: LD_EXP 43
13079: PPUSH
13080: LD_VAR 0 7
13084: PPUSH
13085: LD_VAR 0 3
13089: PPUSH
13090: CALL_OW 1
13094: ST_TO_ADDR
// am_snipers = am_snipers diff ai_heal_these_humans [ base ] ;
13095: LD_ADDR_VAR 0 13
13099: PUSH
13100: LD_VAR 0 13
13104: PUSH
13105: LD_EXP 43
13109: PUSH
13110: LD_VAR 0 7
13114: ARRAY
13115: DIFF
13116: ST_TO_ADDR
// if soldiers_list = 0 then
13117: LD_VAR 0 5
13121: PUSH
13122: LD_INT 0
13124: EQUAL
13125: IFFALSE 13129
// continue ;
13127: GO 12600
// if am_snipers > 0 then
13129: LD_VAR 0 13
13133: PUSH
13134: LD_INT 0
13136: GREATER
13137: IFFALSE 13254
// begin temp_list_2 = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_human ] , [ f_inarea , am_sniper_defend_area ] ] ) ;
13139: LD_ADDR_VAR 0 14
13143: PUSH
13144: LD_INT 81
13146: PUSH
13147: LD_VAR 0 1
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 21
13158: PUSH
13159: LD_INT 1
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 95
13168: PUSH
13169: LD_INT 12
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: PPUSH
13181: CALL_OW 69
13185: ST_TO_ADDR
// if temp_list_2 > 0 then
13186: LD_VAR 0 14
13190: PUSH
13191: LD_INT 0
13193: GREATER
13194: IFFALSE 13254
// begin soldiers_list = soldiers_list diff am_snipers ;
13196: LD_ADDR_VAR 0 5
13200: PUSH
13201: LD_VAR 0 5
13205: PUSH
13206: LD_VAR 0 13
13210: DIFF
13211: ST_TO_ADDR
// ComAgressiveMove ( GetHumansOutOfUnits ( am_snipers ) , GetX ( temp_list_2 [ 1 ] ) , GetY ( temp_list_2 [ 1 ] ) ) ;
13212: LD_VAR 0 13
13216: PPUSH
13217: CALL 23168 0 1
13221: PPUSH
13222: LD_VAR 0 14
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PPUSH
13231: CALL_OW 250
13235: PPUSH
13236: LD_VAR 0 14
13240: PUSH
13241: LD_INT 1
13243: ARRAY
13244: PPUSH
13245: CALL_OW 251
13249: PPUSH
13250: CALL_OW 114
// end ; end ; i = false ;
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_INT 0
13261: ST_TO_ADDR
// if IsOk ( ai_depot [ base ] ) then
13262: LD_EXP 34
13266: PUSH
13267: LD_VAR 0 7
13271: ARRAY
13272: PPUSH
13273: CALL_OW 302
13277: IFFALSE 13317
// if GetEnergy ( GetBase ( ai_depot [ base ] ) ) [ 4 ] > 0 then
13279: LD_EXP 34
13283: PUSH
13284: LD_VAR 0 7
13288: ARRAY
13289: PPUSH
13290: CALL_OW 274
13294: PPUSH
13295: CALL_OW 278
13299: PUSH
13300: LD_INT 4
13302: ARRAY
13303: PUSH
13304: LD_INT 0
13306: GREATER
13307: IFFALSE 13317
// i = true ;
13309: LD_ADDR_VAR 0 2
13313: PUSH
13314: LD_INT 1
13316: ST_TO_ADDR
// if i then
13317: LD_VAR 0 2
13321: IFFALSE 13341
// bunkers = ai_bunkers [ base ] else
13323: LD_ADDR_VAR 0 10
13327: PUSH
13328: LD_EXP 49
13332: PUSH
13333: LD_VAR 0 7
13337: ARRAY
13338: ST_TO_ADDR
13339: GO 13402
// begin bunkers = [ ] ;
13341: LD_ADDR_VAR 0 10
13345: PUSH
13346: EMPTY
13347: ST_TO_ADDR
// for i in ai_bunkers [ base ] do
13348: LD_ADDR_VAR 0 2
13352: PUSH
13353: LD_EXP 49
13357: PUSH
13358: LD_VAR 0 7
13362: ARRAY
13363: PUSH
13364: FOR_IN
13365: IFFALSE 13400
// if GetBType ( i ) = b_breastwork then
13367: LD_VAR 0 2
13371: PPUSH
13372: CALL_OW 266
13376: PUSH
13377: LD_INT 31
13379: EQUAL
13380: IFFALSE 13398
// bunkers = bunkers ^ i ;
13382: LD_ADDR_VAR 0 10
13386: PUSH
13387: LD_VAR 0 10
13391: PUSH
13392: LD_VAR 0 2
13396: ADD
13397: ST_TO_ADDR
13398: GO 13364
13400: POP
13401: POP
// end ; buildings_list = [ ] ;
13402: LD_ADDR_VAR 0 4
13406: PUSH
13407: EMPTY
13408: ST_TO_ADDR
// for i in UnitFilter ( bunkers , [ f_ok ] ) do
13409: LD_ADDR_VAR 0 2
13413: PUSH
13414: LD_VAR 0 10
13418: PPUSH
13419: LD_INT 50
13421: PUSH
13422: EMPTY
13423: LIST
13424: PPUSH
13425: CALL_OW 72
13429: PUSH
13430: FOR_IN
13431: IFFALSE 13494
// begin temp_unit = UnitsInside ( i ) ;
13433: LD_ADDR_VAR 0 6
13437: PUSH
13438: LD_VAR 0 2
13442: PPUSH
13443: CALL_OW 313
13447: ST_TO_ADDR
// if temp_unit = 0 then
13448: LD_VAR 0 6
13452: PUSH
13453: LD_INT 0
13455: EQUAL
13456: IFFALSE 13476
// buildings_list = buildings_list ^ i else
13458: LD_ADDR_VAR 0 4
13462: PUSH
13463: LD_VAR 0 4
13467: PUSH
13468: LD_VAR 0 2
13472: ADD
13473: ST_TO_ADDR
13474: GO 13492
// soldiers_list = soldiers_list diff temp_unit ;
13476: LD_ADDR_VAR 0 5
13480: PUSH
13481: LD_VAR 0 5
13485: PUSH
13486: LD_VAR 0 6
13490: DIFF
13491: ST_TO_ADDR
// end ;
13492: GO 13430
13494: POP
13495: POP
// soldiers_list = soldiers_list diff Gensher ;
13496: LD_ADDR_VAR 0 5
13500: PUSH
13501: LD_VAR 0 5
13505: PUSH
13506: LD_EXP 23
13510: DIFF
13511: ST_TO_ADDR
// if buildings_list > 0 then
13512: LD_VAR 0 4
13516: PUSH
13517: LD_INT 0
13519: GREATER
13520: IFFALSE 13865
// begin if not under_attack then
13522: LD_VAR 0 11
13526: NOT
13527: IFFALSE 13597
// begin temp_list = [ ] ;
13529: LD_ADDR_VAR 0 3
13533: PUSH
13534: EMPTY
13535: ST_TO_ADDR
// for i in soldiers_list do
13536: LD_ADDR_VAR 0 2
13540: PUSH
13541: LD_VAR 0 5
13545: PUSH
13546: FOR_IN
13547: IFFALSE 13575
// temp_list = temp_list ^ GetSkill ( i , skill_combat ) ;
13549: LD_ADDR_VAR 0 3
13553: PUSH
13554: LD_VAR 0 3
13558: PUSH
13559: LD_VAR 0 2
13563: PPUSH
13564: LD_INT 1
13566: PPUSH
13567: CALL_OW 259
13571: ADD
13572: ST_TO_ADDR
13573: GO 13546
13575: POP
13576: POP
// soldiers_list = SortListByListDesc ( soldiers_list , temp_list ) ;
13577: LD_ADDR_VAR 0 5
13581: PUSH
13582: LD_VAR 0 5
13586: PPUSH
13587: LD_VAR 0 3
13591: PPUSH
13592: CALL_OW 77
13596: ST_TO_ADDR
// end ; special_units = UnitFilter ( soldiers_list , [ f_or , [ f_class , class_bazooker ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] ) ;
13597: LD_ADDR_VAR 0 9
13601: PUSH
13602: LD_VAR 0 5
13606: PPUSH
13607: LD_INT 2
13609: PUSH
13610: LD_INT 25
13612: PUSH
13613: LD_INT 9
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 25
13622: PUSH
13623: LD_INT 5
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 25
13632: PUSH
13633: LD_INT 8
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: PPUSH
13646: CALL_OW 72
13650: ST_TO_ADDR
// soldiers_list = soldiers_list diff special_units ;
13651: LD_ADDR_VAR 0 5
13655: PUSH
13656: LD_VAR 0 5
13660: PUSH
13661: LD_VAR 0 9
13665: DIFF
13666: ST_TO_ADDR
// for i = 1 to buildings_list do
13667: LD_ADDR_VAR 0 2
13671: PUSH
13672: DOUBLE
13673: LD_INT 1
13675: DEC
13676: ST_TO_ADDR
13677: LD_VAR 0 4
13681: PUSH
13682: FOR_TO
13683: IFFALSE 13861
// begin if soldiers_list = 0 then
13685: LD_VAR 0 5
13689: PUSH
13690: LD_INT 0
13692: EQUAL
13693: IFFALSE 13724
// begin if special_units = 0 then
13695: LD_VAR 0 9
13699: PUSH
13700: LD_INT 0
13702: EQUAL
13703: IFFALSE 13707
// break ;
13705: GO 13861
// soldiers_list = special_units ;
13707: LD_ADDR_VAR 0 5
13711: PUSH
13712: LD_VAR 0 9
13716: ST_TO_ADDR
// special_units = [ ] ;
13717: LD_ADDR_VAR 0 9
13721: PUSH
13722: EMPTY
13723: ST_TO_ADDR
// end ; if not under_attack then
13724: LD_VAR 0 11
13728: NOT
13729: IFFALSE 13747
// temp_unit = soldiers_list [ 1 ] else
13731: LD_ADDR_VAR 0 6
13735: PUSH
13736: LD_VAR 0 5
13740: PUSH
13741: LD_INT 1
13743: ARRAY
13744: ST_TO_ADDR
13745: GO 13823
// begin temp_list = [ ] ;
13747: LD_ADDR_VAR 0 3
13751: PUSH
13752: EMPTY
13753: ST_TO_ADDR
// for j in soldiers_list do
13754: LD_ADDR_VAR 0 12
13758: PUSH
13759: LD_VAR 0 5
13763: PUSH
13764: FOR_IN
13765: IFFALSE 13801
// temp_list = temp_list ^ GetDistUnits ( j , buildings_list [ i ] ) ;
13767: LD_ADDR_VAR 0 3
13771: PUSH
13772: LD_VAR 0 3
13776: PUSH
13777: LD_VAR 0 12
13781: PPUSH
13782: LD_VAR 0 4
13786: PUSH
13787: LD_VAR 0 2
13791: ARRAY
13792: PPUSH
13793: CALL_OW 296
13797: ADD
13798: ST_TO_ADDR
13799: GO 13764
13801: POP
13802: POP
// temp_unit = WorstFromListByList ( soldiers_list , temp_list ) ;
13803: LD_ADDR_VAR 0 6
13807: PUSH
13808: LD_VAR 0 5
13812: PPUSH
13813: LD_VAR 0 3
13817: PPUSH
13818: CALL_OW 78
13822: ST_TO_ADDR
// end ; ComEnterUnit ( temp_unit , buildings_list [ i ] ) ;
13823: LD_VAR 0 6
13827: PPUSH
13828: LD_VAR 0 4
13832: PUSH
13833: LD_VAR 0 2
13837: ARRAY
13838: PPUSH
13839: CALL_OW 120
// soldiers_list = soldiers_list diff temp_unit ;
13843: LD_ADDR_VAR 0 5
13847: PUSH
13848: LD_VAR 0 5
13852: PUSH
13853: LD_VAR 0 6
13857: DIFF
13858: ST_TO_ADDR
// end ;
13859: GO 13682
13861: POP
13862: POP
// end else
13863: GO 13872
// special_units = [ ] ;
13865: LD_ADDR_VAR 0 9
13869: PUSH
13870: EMPTY
13871: ST_TO_ADDR
// if base = 2 then
13872: LD_VAR 0 7
13876: PUSH
13877: LD_INT 2
13879: EQUAL
13880: IFFALSE 13912
// soldiers_list = soldiers_list ^ UnitFilter ( [ Gensher ] , [ f_alive ] ) ;
13882: LD_ADDR_VAR 0 5
13886: PUSH
13887: LD_VAR 0 5
13891: PUSH
13892: LD_EXP 23
13896: PUSH
13897: EMPTY
13898: LIST
13899: PPUSH
13900: LD_INT 51
13902: PUSH
13903: EMPTY
13904: LIST
13905: PPUSH
13906: CALL_OW 72
13910: ADD
13911: ST_TO_ADDR
// DistributeHumansToBuildings ( base , soldiers_list ^ special_units , UnitFilter ( ai_armouries [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , false , 6 , true , true ) ;
13912: LD_VAR 0 7
13916: PPUSH
13917: LD_VAR 0 5
13921: PUSH
13922: LD_VAR 0 9
13926: ADD
13927: PPUSH
13928: LD_EXP 48
13932: PUSH
13933: LD_VAR 0 7
13937: ARRAY
13938: PPUSH
13939: LD_INT 50
13941: PUSH
13942: EMPTY
13943: LIST
13944: PUSH
13945: LD_INT 3
13947: PUSH
13948: LD_INT 57
13950: PUSH
13951: EMPTY
13952: LIST
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 72
13966: PPUSH
13967: LD_INT 0
13969: PPUSH
13970: LD_INT 6
13972: PPUSH
13973: LD_INT 1
13975: PPUSH
13976: LD_INT 1
13978: PPUSH
13979: CALL 15239 0 7
// end ;
13983: GO 12600
13985: POP
13986: POP
// enable ;
13987: ENABLE
// end ;
13988: PPOPN 14
13990: END
// every 0 0$1 + 0 0$0.1 do var side , base , i , temp_list , un1 , temp_list_2 , temp_value , val ;
13991: GO 13993
13993: DISABLE
13994: LD_INT 0
13996: PPUSH
13997: PPUSH
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
14003: PPUSH
// begin repeat wait ( 0 0$1 ) ;
14004: LD_INT 35
14006: PPUSH
14007: CALL_OW 67
// for base in ai_bases do
14011: LD_ADDR_VAR 0 2
14015: PUSH
14016: LD_EXP 58
14020: PUSH
14021: FOR_IN
14022: IFFALSE 14473
// begin if base in [ 1 , 2 ] then
14024: LD_VAR 0 2
14028: PUSH
14029: LD_INT 1
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: IN
14039: IFFALSE 14043
// continue ;
14041: GO 14021
// side = GetBaseSide ( base ) ;
14043: LD_ADDR_VAR 0 1
14047: PUSH
14048: LD_VAR 0 2
14052: PPUSH
14053: CALL 12353 0 1
14057: ST_TO_ADDR
// for i in ai_soldiers [ base ] diff ai_heal_these_humans [ base ] do
14058: LD_ADDR_VAR 0 3
14062: PUSH
14063: LD_EXP 29
14067: PUSH
14068: LD_VAR 0 2
14072: ARRAY
14073: PUSH
14074: LD_EXP 43
14078: PUSH
14079: LD_VAR 0 2
14083: ARRAY
14084: DIFF
14085: PUSH
14086: FOR_IN
14087: IFFALSE 14469
// if GetClass ( i ) = class_bazooker then
14089: LD_VAR 0 3
14093: PPUSH
14094: CALL_OW 257
14098: PUSH
14099: LD_INT 9
14101: EQUAL
14102: IFFALSE 14467
// begin temp_list = GetTaskList ( i ) ;
14104: LD_ADDR_VAR 0 4
14108: PUSH
14109: LD_VAR 0 3
14113: PPUSH
14114: CALL_OW 437
14118: ST_TO_ADDR
// if temp_list > 0 then
14119: LD_VAR 0 4
14123: PUSH
14124: LD_INT 0
14126: GREATER
14127: IFFALSE 14167
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
14129: LD_VAR 0 4
14133: PUSH
14134: LD_INT 1
14136: ARRAY
14137: PUSH
14138: LD_INT 1
14140: ARRAY
14141: PUSH
14142: LD_STRING &
14144: EQUAL
14145: PUSH
14146: LD_VAR 0 4
14150: PUSH
14151: LD_INT 1
14153: ARRAY
14154: PUSH
14155: LD_INT 1
14157: ARRAY
14158: PUSH
14159: LD_STRING %
14161: EQUAL
14162: OR
14163: IFFALSE 14167
// continue ;
14165: GO 14086
// un1 = Attacks ( i ) ;
14167: LD_ADDR_VAR 0 5
14171: PUSH
14172: LD_VAR 0 3
14176: PPUSH
14177: CALL_OW 320
14181: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
14182: LD_VAR 0 5
14186: PUSH
14187: LD_INT 0
14189: GREATER
14190: PUSH
14191: LD_VAR 0 5
14195: PUSH
14196: EMPTY
14197: LIST
14198: PPUSH
14199: CALL 40344 0 1
14203: PUSH
14204: LD_INT 0
14206: GREATER
14207: AND
14208: IFFALSE 14467
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
14210: LD_ADDR_VAR 0 6
14214: PUSH
14215: LD_VAR 0 5
14219: PPUSH
14220: CALL_OW 250
14224: PUSH
14225: LD_VAR 0 5
14229: PPUSH
14230: CALL_OW 251
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: ST_TO_ADDR
// temp_value = false ;
14239: LD_ADDR_VAR 0 7
14243: PUSH
14244: LD_INT 0
14246: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
14247: LD_ADDR_VAR 0 8
14251: PUSH
14252: LD_EXP 72
14256: PUSH
14257: LD_VAR 0 2
14261: ARRAY
14262: PUSH
14263: LD_EXP 73
14267: PUSH
14268: LD_VAR 0 2
14272: ARRAY
14273: ADD
14274: PUSH
14275: FOR_IN
14276: IFFALSE 14348
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
14278: LD_VAR 0 6
14282: PUSH
14283: LD_INT 1
14285: ARRAY
14286: PPUSH
14287: LD_VAR 0 6
14291: PUSH
14292: LD_INT 2
14294: ARRAY
14295: PPUSH
14296: LD_VAR 0 8
14300: PUSH
14301: LD_INT 1
14303: ARRAY
14304: PPUSH
14305: LD_VAR 0 8
14309: PUSH
14310: LD_INT 2
14312: ARRAY
14313: PPUSH
14314: CALL_OW 298
14318: PUSH
14319: LD_EXP 71
14323: PUSH
14324: LD_VAR 0 1
14328: ARRAY
14329: PUSH
14330: LD_INT 2
14332: ARRAY
14333: LESSEQUAL
14334: IFFALSE 14346
// begin temp_value = true ;
14336: LD_ADDR_VAR 0 7
14340: PUSH
14341: LD_INT 1
14343: ST_TO_ADDR
// break ;
14344: GO 14348
// end ;
14346: GO 14275
14348: POP
14349: POP
// if not temp_value then
14350: LD_VAR 0 7
14354: NOT
14355: IFFALSE 14467
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
14357: LD_VAR 0 3
14361: PPUSH
14362: LD_VAR 0 6
14366: PUSH
14367: LD_INT 1
14369: ARRAY
14370: PPUSH
14371: LD_VAR 0 6
14375: PUSH
14376: LD_INT 2
14378: ARRAY
14379: PPUSH
14380: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
14384: LD_ADDR_VAR 0 4
14388: PUSH
14389: LD_EXP 73
14393: PUSH
14394: LD_VAR 0 2
14398: ARRAY
14399: PPUSH
14400: LD_INT 1
14402: PPUSH
14403: LD_VAR 0 6
14407: PUSH
14408: LD_INT 1
14410: ARRAY
14411: PUSH
14412: LD_VAR 0 6
14416: PUSH
14417: LD_INT 2
14419: ARRAY
14420: PUSH
14421: LD_VAR 0 3
14425: PUSH
14426: LD_OWVAR 1
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: PPUSH
14437: CALL_OW 2
14441: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
14442: LD_ADDR_EXP 73
14446: PUSH
14447: LD_EXP 73
14451: PPUSH
14452: LD_VAR 0 2
14456: PPUSH
14457: LD_VAR 0 4
14461: PPUSH
14462: CALL_OW 1
14466: ST_TO_ADDR
// end ; end ; end ;
14467: GO 14086
14469: POP
14470: POP
// end ;
14471: GO 14021
14473: POP
14474: POP
// until false ;
14475: LD_INT 0
14477: IFFALSE 14004
// end ;
14479: PPOPN 8
14481: END
// every 0 0$1 + 0 0$0.2 do var base , i , temp_list , un1 , temp_list_2 , temp_value ; var shooting_delay ;
14482: GO 14484
14484: DISABLE
14485: LD_INT 0
14487: PPUSH
14488: PPUSH
14489: PPUSH
14490: PPUSH
14491: PPUSH
14492: PPUSH
14493: PPUSH
// begin shooting_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
14494: LD_ADDR_VAR 0 7
14498: PUSH
14499: LD_INT 0
14501: PUSH
14502: LD_INT 0
14504: PUSH
14505: LD_INT 0
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: ST_TO_ADDR
// if not yashin_alive then
14513: LD_EXP 85
14517: NOT
14518: IFFALSE 14522
// exit ;
14520: GO 15018
// repeat wait ( 0 0$1 ) ;
14522: LD_INT 35
14524: PPUSH
14525: CALL_OW 67
// for base in ai_bases do
14529: LD_ADDR_VAR 0 1
14533: PUSH
14534: LD_EXP 58
14538: PUSH
14539: FOR_IN
14540: IFFALSE 15012
// begin if base in [ 1 , 2 ] then
14542: LD_VAR 0 1
14546: PUSH
14547: LD_INT 1
14549: PUSH
14550: LD_INT 2
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: IN
14557: IFFALSE 14561
// continue ;
14559: GO 14539
// if shooting_delay [ base ] > 0 0$0 then
14561: LD_VAR 0 7
14565: PUSH
14566: LD_VAR 0 1
14570: ARRAY
14571: PUSH
14572: LD_INT 0
14574: GREATER
14575: IFFALSE 14614
// begin shooting_delay = Replace ( shooting_delay , base , shooting_delay [ base ] - 0 0$1 ) ;
14577: LD_ADDR_VAR 0 7
14581: PUSH
14582: LD_VAR 0 7
14586: PPUSH
14587: LD_VAR 0 1
14591: PPUSH
14592: LD_VAR 0 7
14596: PUSH
14597: LD_VAR 0 1
14601: ARRAY
14602: PUSH
14603: LD_INT 35
14605: MINUS
14606: PPUSH
14607: CALL_OW 1
14611: ST_TO_ADDR
// continue ;
14612: GO 14539
// end ; if Rand ( 1 , 15 ) > 1 then
14614: LD_INT 1
14616: PPUSH
14617: LD_INT 15
14619: PPUSH
14620: CALL_OW 12
14624: PUSH
14625: LD_INT 1
14627: GREATER
14628: IFFALSE 14632
// continue ;
14630: GO 14539
// temp_list = [ ] ;
14632: LD_ADDR_VAR 0 3
14636: PUSH
14637: EMPTY
14638: ST_TO_ADDR
// for i in ai_soldiers [ base ] diff ai_heal_these_humans [ base ] do
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: LD_EXP 29
14648: PUSH
14649: LD_VAR 0 1
14653: ARRAY
14654: PUSH
14655: LD_EXP 43
14659: PUSH
14660: LD_VAR 0 1
14664: ARRAY
14665: DIFF
14666: PUSH
14667: FOR_IN
14668: IFFALSE 14711
// if IsInUnit ( i ) in ai_armouries [ base ] then
14670: LD_VAR 0 2
14674: PPUSH
14675: CALL_OW 310
14679: PUSH
14680: LD_EXP 48
14684: PUSH
14685: LD_VAR 0 1
14689: ARRAY
14690: IN
14691: IFFALSE 14709
// temp_list = temp_list ^ i ;
14693: LD_ADDR_VAR 0 3
14697: PUSH
14698: LD_VAR 0 3
14702: PUSH
14703: LD_VAR 0 2
14707: ADD
14708: ST_TO_ADDR
14709: GO 14667
14711: POP
14712: POP
// for i in temp_list do
14713: LD_ADDR_VAR 0 2
14717: PUSH
14718: LD_VAR 0 3
14722: PUSH
14723: FOR_IN
14724: IFFALSE 15008
// if GetClass ( i ) = class_bazooker then
14726: LD_VAR 0 2
14730: PPUSH
14731: CALL_OW 257
14735: PUSH
14736: LD_INT 9
14738: EQUAL
14739: IFFALSE 15006
// begin temp_list = GetTaskList ( i ) ;
14741: LD_ADDR_VAR 0 3
14745: PUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: CALL_OW 437
14755: ST_TO_ADDR
// if temp_list > 0 then
14756: LD_VAR 0 3
14760: PUSH
14761: LD_INT 0
14763: GREATER
14764: IFFALSE 14804
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
14766: LD_VAR 0 3
14770: PUSH
14771: LD_INT 1
14773: ARRAY
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: PUSH
14779: LD_STRING &
14781: EQUAL
14782: PUSH
14783: LD_VAR 0 3
14787: PUSH
14788: LD_INT 1
14790: ARRAY
14791: PUSH
14792: LD_INT 1
14794: ARRAY
14795: PUSH
14796: LD_STRING %
14798: EQUAL
14799: OR
14800: IFFALSE 14804
// continue ;
14802: GO 14723
// un1 = Attacks ( i ) ;
14804: LD_ADDR_VAR 0 4
14808: PUSH
14809: LD_VAR 0 2
14813: PPUSH
14814: CALL_OW 320
14818: ST_TO_ADDR
// if un1 > 0 and not IsInArea ( un1 , GetBaseArea ( base ) ) then
14819: LD_VAR 0 4
14823: PUSH
14824: LD_INT 0
14826: GREATER
14827: PUSH
14828: LD_VAR 0 4
14832: PPUSH
14833: LD_VAR 0 1
14837: PPUSH
14838: CALL 12282 0 1
14842: PPUSH
14843: CALL_OW 308
14847: NOT
14848: AND
14849: IFFALSE 15006
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
14851: LD_ADDR_VAR 0 5
14855: PUSH
14856: LD_VAR 0 4
14860: PPUSH
14861: CALL_OW 250
14865: PUSH
14866: LD_VAR 0 4
14870: PPUSH
14871: CALL_OW 251
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: ST_TO_ADDR
// temp_value = AI_GetTurnDirection ( GetX ( i ) , GetY ( i ) , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
14880: LD_ADDR_VAR 0 6
14884: PUSH
14885: LD_VAR 0 2
14889: PPUSH
14890: CALL_OW 250
14894: PPUSH
14895: LD_VAR 0 2
14899: PPUSH
14900: CALL_OW 251
14904: PPUSH
14905: LD_VAR 0 5
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PPUSH
14914: LD_VAR 0 5
14918: PUSH
14919: LD_INT 2
14921: ARRAY
14922: PPUSH
14923: CALL 15021 0 4
14927: ST_TO_ADDR
// ComSpaceShift ( i , ShiftX ( temp_list_2 [ 1 ] , temp_value , 1 ) , ShiftY ( temp_list_2 [ 2 ] , temp_value , 1 ) ) ;
14928: LD_VAR 0 2
14932: PPUSH
14933: LD_VAR 0 5
14937: PUSH
14938: LD_INT 1
14940: ARRAY
14941: PPUSH
14942: LD_VAR 0 6
14946: PPUSH
14947: LD_INT 1
14949: PPUSH
14950: CALL_OW 272
14954: PPUSH
14955: LD_VAR 0 5
14959: PUSH
14960: LD_INT 2
14962: ARRAY
14963: PPUSH
14964: LD_VAR 0 6
14968: PPUSH
14969: LD_INT 1
14971: PPUSH
14972: CALL_OW 273
14976: PPUSH
14977: CALL_OW 153
// shooting_delay = Replace ( shooting_delay , base , 0 0$5 ) ;
14981: LD_ADDR_VAR 0 7
14985: PUSH
14986: LD_VAR 0 7
14990: PPUSH
14991: LD_VAR 0 1
14995: PPUSH
14996: LD_INT 175
14998: PPUSH
14999: CALL_OW 1
15003: ST_TO_ADDR
// break ;
15004: GO 15008
// end ; end ;
15006: GO 14723
15008: POP
15009: POP
// end ;
15010: GO 14539
15012: POP
15013: POP
// until false ;
15014: LD_INT 0
15016: IFFALSE 14522
// end ;
15018: PPOPN 7
15020: END
// function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
15021: LD_INT 0
15023: PPUSH
15024: PPUSH
15025: PPUSH
15026: PPUSH
15027: PPUSH
15028: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
15029: LD_VAR 0 1
15033: PPUSH
15034: LD_VAR 0 2
15038: PPUSH
15039: CALL_OW 488
15043: NOT
15044: PUSH
15045: LD_VAR 0 3
15049: PPUSH
15050: LD_VAR 0 4
15054: PPUSH
15055: CALL_OW 488
15059: NOT
15060: OR
15061: IFFALSE 15074
// begin result = - 1 ;
15063: LD_ADDR_VAR 0 5
15067: PUSH
15068: LD_INT 1
15070: NEG
15071: ST_TO_ADDR
// exit ;
15072: GO 15234
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
15074: LD_ADDR_VAR 0 6
15078: PUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: LD_VAR 0 2
15088: PPUSH
15089: LD_VAR 0 3
15093: PPUSH
15094: LD_VAR 0 4
15098: PPUSH
15099: CALL_OW 298
15103: ST_TO_ADDR
// dist_2 = 99999 ;
15104: LD_ADDR_VAR 0 7
15108: PUSH
15109: LD_INT 99999
15111: ST_TO_ADDR
// for b = 0 to 5 do
15112: LD_ADDR_VAR 0 8
15116: PUSH
15117: DOUBLE
15118: LD_INT 0
15120: DEC
15121: ST_TO_ADDR
15122: LD_INT 5
15124: PUSH
15125: FOR_TO
15126: IFFALSE 15222
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
15128: LD_ADDR_VAR 0 9
15132: PUSH
15133: LD_VAR 0 1
15137: PPUSH
15138: LD_VAR 0 8
15142: PPUSH
15143: LD_VAR 0 6
15147: PPUSH
15148: CALL_OW 272
15152: PPUSH
15153: LD_VAR 0 2
15157: PPUSH
15158: LD_VAR 0 8
15162: PPUSH
15163: LD_VAR 0 6
15167: PPUSH
15168: CALL_OW 273
15172: PPUSH
15173: LD_VAR 0 3
15177: PPUSH
15178: LD_VAR 0 4
15182: PPUSH
15183: CALL_OW 298
15187: ST_TO_ADDR
// if temp_dist < dist_2 then
15188: LD_VAR 0 9
15192: PUSH
15193: LD_VAR 0 7
15197: LESS
15198: IFFALSE 15220
// begin dist_2 = temp_dist ;
15200: LD_ADDR_VAR 0 7
15204: PUSH
15205: LD_VAR 0 9
15209: ST_TO_ADDR
// dir = b ;
15210: LD_ADDR_VAR 0 10
15214: PUSH
15215: LD_VAR 0 8
15219: ST_TO_ADDR
// end ; end ;
15220: GO 15125
15222: POP
15223: POP
// result = dir ;
15224: LD_ADDR_VAR 0 5
15228: PUSH
15229: LD_VAR 0 10
15233: ST_TO_ADDR
// end ;
15234: LD_VAR 0 5
15238: RET
// function DistributeHumansToBuildings ( base , human_list , building_list , change_to_this_class , building_capacity , help_building , aggressive_pullback ) ; var i , temp_list , val , temp_unit , area , special_un_count , counter , k , under_attack ; begin
15239: LD_INT 0
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
15249: PPUSH
15250: PPUSH
// if human_list = 0 then
15251: LD_VAR 0 2
15255: PUSH
15256: LD_INT 0
15258: EQUAL
15259: IFFALSE 15263
// exit ;
15261: GO 16541
// area = GetBaseArea ( base ) ;
15263: LD_ADDR_VAR 0 13
15267: PUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL 12282 0 1
15277: ST_TO_ADDR
// under_attack = BaseUnderAttack ( base , - 1 ) ;
15278: LD_ADDR_VAR 0 17
15282: PUSH
15283: LD_VAR 0 1
15287: PPUSH
15288: LD_INT 1
15290: NEG
15291: PPUSH
15292: CALL 23273 0 2
15296: ST_TO_ADDR
// if not GetClass ( human_list [ 1 ] ) in [ class_engineer , class_apeman_engineer , class_mechanic , class_scientistic ] and building_list > 0 then
15297: LD_VAR 0 2
15301: PUSH
15302: LD_INT 1
15304: ARRAY
15305: PPUSH
15306: CALL_OW 257
15310: PUSH
15311: LD_INT 2
15313: PUSH
15314: LD_INT 16
15316: PUSH
15317: LD_INT 3
15319: PUSH
15320: LD_INT 4
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: IN
15329: NOT
15330: PUSH
15331: LD_VAR 0 3
15335: PUSH
15336: LD_INT 0
15338: GREATER
15339: AND
15340: IFFALSE 15429
// begin val = 0 ;
15342: LD_ADDR_VAR 0 11
15346: PUSH
15347: LD_INT 0
15349: ST_TO_ADDR
// for i in human_list do
15350: LD_ADDR_VAR 0 9
15354: PUSH
15355: LD_VAR 0 2
15359: PUSH
15360: FOR_IN
15361: IFFALSE 15405
// if GetClass ( i ) in [ class_sniper , class_mortar , class_bazooker ] then
15363: LD_VAR 0 9
15367: PPUSH
15368: CALL_OW 257
15372: PUSH
15373: LD_INT 5
15375: PUSH
15376: LD_INT 8
15378: PUSH
15379: LD_INT 9
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: IN
15387: IFFALSE 15403
// val = val + 1 ;
15389: LD_ADDR_VAR 0 11
15393: PUSH
15394: LD_VAR 0 11
15398: PUSH
15399: LD_INT 1
15401: PLUS
15402: ST_TO_ADDR
15403: GO 15360
15405: POP
15406: POP
// special_un_count = val div ( building_list + 0 ) ;
15407: LD_ADDR_VAR 0 14
15411: PUSH
15412: LD_VAR 0 11
15416: PUSH
15417: LD_VAR 0 3
15421: PUSH
15422: LD_INT 0
15424: PLUS
15425: DIV
15426: ST_TO_ADDR
// end else
15427: GO 15437
// special_un_count = 0 ;
15429: LD_ADDR_VAR 0 14
15433: PUSH
15434: LD_INT 0
15436: ST_TO_ADDR
// val = building_list + 0 ;
15437: LD_ADDR_VAR 0 11
15441: PUSH
15442: LD_VAR 0 3
15446: PUSH
15447: LD_INT 0
15449: PLUS
15450: ST_TO_ADDR
// while val > 0 and human_list > 0 do
15451: LD_VAR 0 11
15455: PUSH
15456: LD_INT 0
15458: GREATER
15459: PUSH
15460: LD_VAR 0 2
15464: PUSH
15465: LD_INT 0
15467: GREATER
15468: AND
15469: IFFALSE 16275
// begin temp_list = [ ] ;
15471: LD_ADDR_VAR 0 10
15475: PUSH
15476: EMPTY
15477: ST_TO_ADDR
// for i in human_list do
15478: LD_ADDR_VAR 0 9
15482: PUSH
15483: LD_VAR 0 2
15487: PUSH
15488: FOR_IN
15489: IFFALSE 15532
// if IsInUnit ( i ) = building_list [ val ] then
15491: LD_VAR 0 9
15495: PPUSH
15496: CALL_OW 310
15500: PUSH
15501: LD_VAR 0 3
15505: PUSH
15506: LD_VAR 0 11
15510: ARRAY
15511: EQUAL
15512: IFFALSE 15530
// temp_list = temp_list ^ i ;
15514: LD_ADDR_VAR 0 10
15518: PUSH
15519: LD_VAR 0 10
15523: PUSH
15524: LD_VAR 0 9
15528: ADD
15529: ST_TO_ADDR
15530: GO 15488
15532: POP
15533: POP
// human_list = temp_list ^ ( human_list diff temp_list ) ;
15534: LD_ADDR_VAR 0 2
15538: PUSH
15539: LD_VAR 0 10
15543: PUSH
15544: LD_VAR 0 2
15548: PUSH
15549: LD_VAR 0 10
15553: DIFF
15554: ADD
15555: ST_TO_ADDR
// counter = 0 ;
15556: LD_ADDR_VAR 0 15
15560: PUSH
15561: LD_INT 0
15563: ST_TO_ADDR
// temp_list = [ ] ;
15564: LD_ADDR_VAR 0 10
15568: PUSH
15569: EMPTY
15570: ST_TO_ADDR
// for i = 1 to human_list div val do
15571: LD_ADDR_VAR 0 9
15575: PUSH
15576: DOUBLE
15577: LD_INT 1
15579: DEC
15580: ST_TO_ADDR
15581: LD_VAR 0 2
15585: PUSH
15586: LD_VAR 0 11
15590: DIV
15591: PUSH
15592: FOR_TO
15593: IFFALSE 15958
// begin if i > building_capacity then
15595: LD_VAR 0 9
15599: PUSH
15600: LD_VAR 0 5
15604: GREATER
15605: IFFALSE 15609
// break ;
15607: GO 15958
// if special_un_count = 0 then
15609: LD_VAR 0 14
15613: PUSH
15614: LD_INT 0
15616: EQUAL
15617: IFFALSE 15659
// begin temp_list = temp_list ^ human_list [ 1 ] ;
15619: LD_ADDR_VAR 0 10
15623: PUSH
15624: LD_VAR 0 10
15628: PUSH
15629: LD_VAR 0 2
15633: PUSH
15634: LD_INT 1
15636: ARRAY
15637: ADD
15638: ST_TO_ADDR
// human_list = Delete ( human_list , 1 ) ;
15639: LD_ADDR_VAR 0 2
15643: PUSH
15644: LD_VAR 0 2
15648: PPUSH
15649: LD_INT 1
15651: PPUSH
15652: CALL_OW 3
15656: ST_TO_ADDR
// end else
15657: GO 15956
// if counter = special_un_count then
15659: LD_VAR 0 15
15663: PUSH
15664: LD_VAR 0 14
15668: EQUAL
15669: IFFALSE 15808
// begin temp_unit = 0 ;
15671: LD_ADDR_VAR 0 12
15675: PUSH
15676: LD_INT 0
15678: ST_TO_ADDR
// for k = 1 to human_list do
15679: LD_ADDR_VAR 0 16
15683: PUSH
15684: DOUBLE
15685: LD_INT 1
15687: DEC
15688: ST_TO_ADDR
15689: LD_VAR 0 2
15693: PUSH
15694: FOR_TO
15695: IFFALSE 15744
// if not GetClass ( human_list [ k ] ) in [ class_sniper , class_mortar , class_bazooker ] then
15697: LD_VAR 0 2
15701: PUSH
15702: LD_VAR 0 16
15706: ARRAY
15707: PPUSH
15708: CALL_OW 257
15712: PUSH
15713: LD_INT 5
15715: PUSH
15716: LD_INT 8
15718: PUSH
15719: LD_INT 9
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: LIST
15726: IN
15727: NOT
15728: IFFALSE 15742
// begin temp_unit = k ;
15730: LD_ADDR_VAR 0 12
15734: PUSH
15735: LD_VAR 0 16
15739: ST_TO_ADDR
// break ;
15740: GO 15744
// end ;
15742: GO 15694
15744: POP
15745: POP
// if temp_unit = 0 then
15746: LD_VAR 0 12
15750: PUSH
15751: LD_INT 0
15753: EQUAL
15754: IFFALSE 15764
// temp_unit = 1 ;
15756: LD_ADDR_VAR 0 12
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// temp_list = temp_list ^ human_list [ temp_unit ] ;
15764: LD_ADDR_VAR 0 10
15768: PUSH
15769: LD_VAR 0 10
15773: PUSH
15774: LD_VAR 0 2
15778: PUSH
15779: LD_VAR 0 12
15783: ARRAY
15784: ADD
15785: ST_TO_ADDR
// human_list = Delete ( human_list , temp_unit ) ;
15786: LD_ADDR_VAR 0 2
15790: PUSH
15791: LD_VAR 0 2
15795: PPUSH
15796: LD_VAR 0 12
15800: PPUSH
15801: CALL_OW 3
15805: ST_TO_ADDR
// end else
15806: GO 15956
// begin counter = counter + 1 ;
15808: LD_ADDR_VAR 0 15
15812: PUSH
15813: LD_VAR 0 15
15817: PUSH
15818: LD_INT 1
15820: PLUS
15821: ST_TO_ADDR
// temp_unit = 0 ;
15822: LD_ADDR_VAR 0 12
15826: PUSH
15827: LD_INT 0
15829: ST_TO_ADDR
// for k = 1 to human_list do
15830: LD_ADDR_VAR 0 16
15834: PUSH
15835: DOUBLE
15836: LD_INT 1
15838: DEC
15839: ST_TO_ADDR
15840: LD_VAR 0 2
15844: PUSH
15845: FOR_TO
15846: IFFALSE 15894
// if GetClass ( human_list [ k ] ) in [ class_sniper , class_mortar , class_bazooker ] then
15848: LD_VAR 0 2
15852: PUSH
15853: LD_VAR 0 16
15857: ARRAY
15858: PPUSH
15859: CALL_OW 257
15863: PUSH
15864: LD_INT 5
15866: PUSH
15867: LD_INT 8
15869: PUSH
15870: LD_INT 9
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: IN
15878: IFFALSE 15892
// begin temp_unit = k ;
15880: LD_ADDR_VAR 0 12
15884: PUSH
15885: LD_VAR 0 16
15889: ST_TO_ADDR
// break ;
15890: GO 15894
// end ;
15892: GO 15845
15894: POP
15895: POP
// if temp_unit = 0 then
15896: LD_VAR 0 12
15900: PUSH
15901: LD_INT 0
15903: EQUAL
15904: IFFALSE 15914
// temp_unit = 1 ;
15906: LD_ADDR_VAR 0 12
15910: PUSH
15911: LD_INT 1
15913: ST_TO_ADDR
// temp_list = temp_list ^ human_list [ temp_unit ] ;
15914: LD_ADDR_VAR 0 10
15918: PUSH
15919: LD_VAR 0 10
15923: PUSH
15924: LD_VAR 0 2
15928: PUSH
15929: LD_VAR 0 12
15933: ARRAY
15934: ADD
15935: ST_TO_ADDR
// human_list = Delete ( human_list , temp_unit ) ;
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: LD_VAR 0 2
15945: PPUSH
15946: LD_VAR 0 12
15950: PPUSH
15951: CALL_OW 3
15955: ST_TO_ADDR
// end ; end ;
15956: GO 15592
15958: POP
15959: POP
// for i in temp_list do
15960: LD_ADDR_VAR 0 9
15964: PUSH
15965: LD_VAR 0 10
15969: PUSH
15970: FOR_IN
15971: IFFALSE 16257
// begin temp_unit = IsInUnit ( i ) ;
15973: LD_ADDR_VAR 0 12
15977: PUSH
15978: LD_VAR 0 9
15982: PPUSH
15983: CALL_OW 310
15987: ST_TO_ADDR
// if temp_unit <> building_list [ val ] then
15988: LD_VAR 0 12
15992: PUSH
15993: LD_VAR 0 3
15997: PUSH
15998: LD_VAR 0 11
16002: ARRAY
16003: NONEQUAL
16004: IFFALSE 16255
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
16006: LD_VAR 0 9
16010: PPUSH
16011: CALL_OW 310
16015: PPUSH
16016: CALL_OW 247
16020: PUSH
16021: LD_INT 2
16023: DOUBLE
16024: EQUAL
16025: IFTRUE 16029
16027: GO 16041
16029: POP
// ComExitVehicle ( i ) ; unit_building :
16030: LD_VAR 0 9
16034: PPUSH
16035: CALL_OW 121
16039: GO 16255
16041: LD_INT 3
16043: DOUBLE
16044: EQUAL
16045: IFTRUE 16049
16047: GO 16061
16049: POP
// ComExitBuilding ( i ) ; else
16050: LD_VAR 0 9
16054: PPUSH
16055: CALL_OW 122
16059: GO 16255
16061: POP
// begin if IsInArea ( i , area ) or not aggressive_pullback then
16062: LD_VAR 0 9
16066: PPUSH
16067: LD_VAR 0 13
16071: PPUSH
16072: CALL_OW 308
16076: PUSH
16077: LD_VAR 0 7
16081: NOT
16082: OR
16083: IFFALSE 16107
// ComEnterUnit ( i , building_list [ val ] ) else
16085: LD_VAR 0 9
16089: PPUSH
16090: LD_VAR 0 3
16094: PUSH
16095: LD_VAR 0 11
16099: ARRAY
16100: PPUSH
16101: CALL_OW 120
16105: GO 16148
// ComAgressiveMove ( i , GetX ( building_list [ val ] ) , GetY ( building_list [ val ] ) ) ;
16107: LD_VAR 0 9
16111: PPUSH
16112: LD_VAR 0 3
16116: PUSH
16117: LD_VAR 0 11
16121: ARRAY
16122: PPUSH
16123: CALL_OW 250
16127: PPUSH
16128: LD_VAR 0 3
16132: PUSH
16133: LD_VAR 0 11
16137: ARRAY
16138: PPUSH
16139: CALL_OW 251
16143: PPUSH
16144: CALL_OW 114
// if change_to_this_class > 0 then
16148: LD_VAR 0 4
16152: PUSH
16153: LD_INT 0
16155: GREATER
16156: IFFALSE 16255
// begin if GetClass ( i ) <> change_to_this_class and GetNation ( i ) <> nation_nature then
16158: LD_VAR 0 9
16162: PPUSH
16163: CALL_OW 257
16167: PUSH
16168: LD_VAR 0 4
16172: NONEQUAL
16173: PUSH
16174: LD_VAR 0 9
16178: PPUSH
16179: CALL_OW 248
16183: PUSH
16184: LD_INT 0
16186: NONEQUAL
16187: AND
16188: IFFALSE 16255
// if not ( change_to_this_class in [ class_sniper , class_mortar , class_bazooker ] and not GetBType ( building_list [ val ] ) in [ b_barracks , b_fort ] ) then
16190: LD_VAR 0 4
16194: PUSH
16195: LD_INT 5
16197: PUSH
16198: LD_INT 8
16200: PUSH
16201: LD_INT 9
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: LIST
16208: IN
16209: PUSH
16210: LD_VAR 0 3
16214: PUSH
16215: LD_VAR 0 11
16219: ARRAY
16220: PPUSH
16221: CALL_OW 266
16225: PUSH
16226: LD_INT 5
16228: PUSH
16229: LD_INT 35
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: IN
16236: NOT
16237: AND
16238: NOT
16239: IFFALSE 16255
// AddComChangeProfession ( i , change_to_this_class ) ;
16241: LD_VAR 0 9
16245: PPUSH
16246: LD_VAR 0 4
16250: PPUSH
16251: CALL_OW 183
// end ; end ; end ; end ;
16255: GO 15970
16257: POP
16258: POP
// val = val - 1 ;
16259: LD_ADDR_VAR 0 11
16263: PUSH
16264: LD_VAR 0 11
16268: PUSH
16269: LD_INT 1
16271: MINUS
16272: ST_TO_ADDR
// end ;
16273: GO 15451
// if human_list > 0 then
16275: LD_VAR 0 2
16279: PUSH
16280: LD_INT 0
16282: GREATER
16283: IFFALSE 16541
// if ai_building_under_construction [ base ] > 0 and help_building and not under_attack then
16285: LD_EXP 42
16289: PUSH
16290: LD_VAR 0 1
16294: ARRAY
16295: PUSH
16296: LD_INT 0
16298: GREATER
16299: PUSH
16300: LD_VAR 0 6
16304: AND
16305: PUSH
16306: LD_VAR 0 17
16310: NOT
16311: AND
16312: IFFALSE 16388
// begin for i in GetHumansOutOfUnits ( human_list ) do
16314: LD_ADDR_VAR 0 9
16318: PUSH
16319: LD_VAR 0 2
16323: PPUSH
16324: CALL 23168 0 1
16328: PUSH
16329: FOR_IN
16330: IFFALSE 16384
// SetTaskList ( i , [ [ h , 0 , 0 , ai_building_under_construction [ base ] , 0 , 0 , 0 ] ] ) ;
16332: LD_VAR 0 9
16336: PPUSH
16337: LD_STRING h
16339: PUSH
16340: LD_INT 0
16342: PUSH
16343: LD_INT 0
16345: PUSH
16346: LD_EXP 42
16350: PUSH
16351: LD_VAR 0 1
16355: ARRAY
16356: PUSH
16357: LD_INT 0
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: PUSH
16375: EMPTY
16376: LIST
16377: PPUSH
16378: CALL_OW 446
16382: GO 16329
16384: POP
16385: POP
// end else
16386: GO 16541
// for i in GetHumansOutOfUnits ( human_list ) do
16388: LD_ADDR_VAR 0 9
16392: PUSH
16393: LD_VAR 0 2
16397: PPUSH
16398: CALL 23168 0 1
16402: PUSH
16403: FOR_IN
16404: IFFALSE 16539
// if GetDistUnitXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 4 then
16406: LD_VAR 0 9
16410: PPUSH
16411: LD_EXP 41
16415: PUSH
16416: LD_VAR 0 1
16420: ARRAY
16421: PUSH
16422: LD_INT 1
16424: ARRAY
16425: PPUSH
16426: LD_EXP 41
16430: PUSH
16431: LD_VAR 0 1
16435: ARRAY
16436: PUSH
16437: LD_INT 2
16439: ARRAY
16440: PPUSH
16441: CALL_OW 297
16445: PUSH
16446: LD_INT 4
16448: GREATER
16449: IFFALSE 16537
// if aggressive_pullback then
16451: LD_VAR 0 7
16455: IFFALSE 16498
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) else
16457: LD_VAR 0 9
16461: PPUSH
16462: LD_EXP 41
16466: PUSH
16467: LD_VAR 0 1
16471: ARRAY
16472: PUSH
16473: LD_INT 1
16475: ARRAY
16476: PPUSH
16477: LD_EXP 41
16481: PUSH
16482: LD_VAR 0 1
16486: ARRAY
16487: PUSH
16488: LD_INT 2
16490: ARRAY
16491: PPUSH
16492: CALL_OW 114
16496: GO 16537
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
16498: LD_VAR 0 9
16502: PPUSH
16503: LD_EXP 41
16507: PUSH
16508: LD_VAR 0 1
16512: ARRAY
16513: PUSH
16514: LD_INT 1
16516: ARRAY
16517: PPUSH
16518: LD_EXP 41
16522: PUSH
16523: LD_VAR 0 1
16527: ARRAY
16528: PUSH
16529: LD_INT 2
16531: ARRAY
16532: PPUSH
16533: CALL_OW 111
16537: GO 16403
16539: POP
16540: POP
// end ;
16541: LD_VAR 0 8
16545: RET
// every 0 0$1 do var side , i , engineers_list , temp_list , buildings_list , temp_unit , away_dist , temp_list_2 , base , apemen_engineers_list ; var humans_list , crane_usable , b_value , k ; var crane_being_repaired ;
16546: GO 16548
16548: DISABLE
16549: LD_INT 0
16551: PPUSH
16552: PPUSH
16553: PPUSH
16554: PPUSH
16555: PPUSH
16556: PPUSH
16557: PPUSH
16558: PPUSH
16559: PPUSH
16560: PPUSH
16561: PPUSH
16562: PPUSH
16563: PPUSH
16564: PPUSH
16565: PPUSH
// begin crane_being_repaired = false ;
16566: LD_ADDR_VAR 0 15
16570: PUSH
16571: LD_INT 0
16573: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16574: LD_INT 35
16576: PPUSH
16577: CALL_OW 67
// for base in ai_bases do
16581: LD_ADDR_VAR 0 9
16585: PUSH
16586: LD_EXP 58
16590: PUSH
16591: FOR_IN
16592: IFFALSE 21826
// begin side = GetBaseSide ( base ) ;
16594: LD_ADDR_VAR 0 1
16598: PUSH
16599: LD_VAR 0 9
16603: PPUSH
16604: CALL 12353 0 1
16608: ST_TO_ADDR
// engineers_list = ai_engineers [ base ] diff ai_heal_these_humans [ base ] ;
16609: LD_ADDR_VAR 0 3
16613: PUSH
16614: LD_EXP 30
16618: PUSH
16619: LD_VAR 0 9
16623: ARRAY
16624: PUSH
16625: LD_EXP 43
16629: PUSH
16630: LD_VAR 0 9
16634: ARRAY
16635: DIFF
16636: ST_TO_ADDR
// apemen_engineers_list = ai_apemen_engineers [ base ] diff ai_heal_these_humans [ base ] ;
16637: LD_ADDR_VAR 0 10
16641: PUSH
16642: LD_EXP 62
16646: PUSH
16647: LD_VAR 0 9
16651: ARRAY
16652: PUSH
16653: LD_EXP 43
16657: PUSH
16658: LD_VAR 0 9
16662: ARRAY
16663: DIFF
16664: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
16665: LD_ADDR_VAR 0 4
16669: PUSH
16670: LD_EXP 43
16674: PUSH
16675: LD_VAR 0 9
16679: ARRAY
16680: ST_TO_ADDR
// humans_list = engineers_list ^ apemen_engineers_list ;
16681: LD_ADDR_VAR 0 11
16685: PUSH
16686: LD_VAR 0 3
16690: PUSH
16691: LD_VAR 0 10
16695: ADD
16696: ST_TO_ADDR
// i = 1 ;
16697: LD_ADDR_VAR 0 2
16701: PUSH
16702: LD_INT 1
16704: ST_TO_ADDR
// while i <= humans_list do
16705: LD_VAR 0 2
16709: PUSH
16710: LD_VAR 0 11
16714: LESSEQUAL
16715: IFFALSE 16854
// begin if GetLives ( humans_list [ i ] ) <= 700 then
16717: LD_VAR 0 11
16721: PUSH
16722: LD_VAR 0 2
16726: ARRAY
16727: PPUSH
16728: CALL_OW 256
16732: PUSH
16733: LD_INT 700
16735: LESSEQUAL
16736: IFFALSE 16838
// begin temp_list = temp_list ^ humans_list [ i ] ;
16738: LD_ADDR_VAR 0 4
16742: PUSH
16743: LD_VAR 0 4
16747: PUSH
16748: LD_VAR 0 11
16752: PUSH
16753: LD_VAR 0 2
16757: ARRAY
16758: ADD
16759: ST_TO_ADDR
// engineers_list = engineers_list diff humans_list [ i ] ;
16760: LD_ADDR_VAR 0 3
16764: PUSH
16765: LD_VAR 0 3
16769: PUSH
16770: LD_VAR 0 11
16774: PUSH
16775: LD_VAR 0 2
16779: ARRAY
16780: DIFF
16781: ST_TO_ADDR
// apemen_engineers_list = apemen_engineers_list diff humans_list [ i ] ;
16782: LD_ADDR_VAR 0 10
16786: PUSH
16787: LD_VAR 0 10
16791: PUSH
16792: LD_VAR 0 11
16796: PUSH
16797: LD_VAR 0 2
16801: ARRAY
16802: DIFF
16803: ST_TO_ADDR
// humans_list = Delete ( humans_list , i ) ;
16804: LD_ADDR_VAR 0 11
16808: PUSH
16809: LD_VAR 0 11
16813: PPUSH
16814: LD_VAR 0 2
16818: PPUSH
16819: CALL_OW 3
16823: ST_TO_ADDR
// i = i - 1 ;
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_VAR 0 2
16833: PUSH
16834: LD_INT 1
16836: MINUS
16837: ST_TO_ADDR
// end ; i = i + 1 ;
16838: LD_ADDR_VAR 0 2
16842: PUSH
16843: LD_VAR 0 2
16847: PUSH
16848: LD_INT 1
16850: PLUS
16851: ST_TO_ADDR
// end ;
16852: GO 16705
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
16854: LD_ADDR_EXP 43
16858: PUSH
16859: LD_EXP 43
16863: PPUSH
16864: LD_VAR 0 9
16868: PPUSH
16869: LD_VAR 0 4
16873: PPUSH
16874: CALL_OW 1
16878: ST_TO_ADDR
// crane_usable = false ;
16879: LD_ADDR_VAR 0 12
16883: PUSH
16884: LD_INT 0
16886: ST_TO_ADDR
// if ai_crane [ base ] > 0 then
16887: LD_EXP 70
16891: PUSH
16892: LD_VAR 0 9
16896: ARRAY
16897: PUSH
16898: LD_INT 0
16900: GREATER
16901: IFFALSE 17073
// if GetLives ( ai_crane [ base ] ) <= 500 or ( crane_being_repaired and GetLives ( ai_crane [ base ] ) < 1000 ) then
16903: LD_EXP 70
16907: PUSH
16908: LD_VAR 0 9
16912: ARRAY
16913: PPUSH
16914: CALL_OW 256
16918: PUSH
16919: LD_INT 500
16921: LESSEQUAL
16922: PUSH
16923: LD_VAR 0 15
16927: PUSH
16928: LD_EXP 70
16932: PUSH
16933: LD_VAR 0 9
16937: ARRAY
16938: PPUSH
16939: CALL_OW 256
16943: PUSH
16944: LD_INT 1000
16946: LESS
16947: AND
16948: OR
16949: IFFALSE 17057
// begin crane_being_repaired = true ;
16951: LD_ADDR_VAR 0 15
16955: PUSH
16956: LD_INT 1
16958: ST_TO_ADDR
// if GetDistUnitXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 6 then
16959: LD_EXP 70
16963: PUSH
16964: LD_VAR 0 9
16968: ARRAY
16969: PPUSH
16970: LD_EXP 41
16974: PUSH
16975: LD_VAR 0 9
16979: ARRAY
16980: PUSH
16981: LD_INT 1
16983: ARRAY
16984: PPUSH
16985: LD_EXP 41
16989: PUSH
16990: LD_VAR 0 9
16994: ARRAY
16995: PUSH
16996: LD_INT 2
16998: ARRAY
16999: PPUSH
17000: CALL_OW 297
17004: PUSH
17005: LD_INT 6
17007: GREATER
17008: IFFALSE 17055
// ComMoveXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
17010: LD_EXP 70
17014: PUSH
17015: LD_VAR 0 9
17019: ARRAY
17020: PPUSH
17021: LD_EXP 41
17025: PUSH
17026: LD_VAR 0 9
17030: ARRAY
17031: PUSH
17032: LD_INT 1
17034: ARRAY
17035: PPUSH
17036: LD_EXP 41
17040: PUSH
17041: LD_VAR 0 9
17045: ARRAY
17046: PUSH
17047: LD_INT 2
17049: ARRAY
17050: PPUSH
17051: CALL_OW 111
// end else
17055: GO 17073
// begin crane_usable = true ;
17057: LD_ADDR_VAR 0 12
17061: PUSH
17062: LD_INT 1
17064: ST_TO_ADDR
// crane_being_repaired = false ;
17065: LD_ADDR_VAR 0 15
17069: PUSH
17070: LD_INT 0
17072: ST_TO_ADDR
// end ; if engineers_list = 0 and apemen_engineers_list = 0 and not crane_usable then
17073: LD_VAR 0 3
17077: PUSH
17078: LD_INT 0
17080: EQUAL
17081: PUSH
17082: LD_VAR 0 10
17086: PUSH
17087: LD_INT 0
17089: EQUAL
17090: AND
17091: PUSH
17092: LD_VAR 0 12
17096: NOT
17097: AND
17098: IFFALSE 17102
// continue ;
17100: GO 16591
// temp_list_2 = UnitFilter ( engineers_list , [ f_class , class_engineer ] ) ;
17102: LD_ADDR_VAR 0 8
17106: PUSH
17107: LD_VAR 0 3
17111: PPUSH
17112: LD_INT 25
17114: PUSH
17115: LD_INT 2
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PPUSH
17122: CALL_OW 72
17126: ST_TO_ADDR
// if ai_captured_buildings [ base ] > 0 and temp_list_2 > 0 then
17127: LD_EXP 78
17131: PUSH
17132: LD_VAR 0 9
17136: ARRAY
17137: PUSH
17138: LD_INT 0
17140: GREATER
17141: PUSH
17142: LD_VAR 0 8
17146: PUSH
17147: LD_INT 0
17149: GREATER
17150: AND
17151: IFFALSE 17422
// begin temp_list = [ ] ;
17153: LD_ADDR_VAR 0 4
17157: PUSH
17158: EMPTY
17159: ST_TO_ADDR
// for i in ai_captured_buildings [ base ] do
17160: LD_ADDR_VAR 0 2
17164: PUSH
17165: LD_EXP 78
17169: PUSH
17170: LD_VAR 0 9
17174: ARRAY
17175: PUSH
17176: FOR_IN
17177: IFFALSE 17233
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
17179: LD_VAR 0 2
17183: PPUSH
17184: CALL_OW 266
17188: PUSH
17189: LD_INT 0
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: IN
17199: IFFALSE 17217
// temp_list = temp_list ^ 1 else
17201: LD_ADDR_VAR 0 4
17205: PUSH
17206: LD_VAR 0 4
17210: PUSH
17211: LD_INT 1
17213: ADD
17214: ST_TO_ADDR
17215: GO 17231
// temp_list = temp_list ^ 0 ;
17217: LD_ADDR_VAR 0 4
17221: PUSH
17222: LD_VAR 0 4
17226: PUSH
17227: LD_INT 0
17229: ADD
17230: ST_TO_ADDR
17231: GO 17176
17233: POP
17234: POP
// temp_list = SortListByListDesc ( ai_captured_buildings [ base ] , temp_list ) ;
17235: LD_ADDR_VAR 0 4
17239: PUSH
17240: LD_EXP 78
17244: PUSH
17245: LD_VAR 0 9
17249: ARRAY
17250: PPUSH
17251: LD_VAR 0 4
17255: PPUSH
17256: CALL_OW 77
17260: ST_TO_ADDR
// temp_list_2 = GetHumansOutOfUnits ( temp_list_2 ) ;
17261: LD_ADDR_VAR 0 8
17265: PUSH
17266: LD_VAR 0 8
17270: PPUSH
17271: CALL 23168 0 1
17275: ST_TO_ADDR
// if temp_list_2 > 0 then
17276: LD_VAR 0 8
17280: PUSH
17281: LD_INT 0
17283: GREATER
17284: IFFALSE 17400
// begin temp_list_2 = SortListByListDesc ( temp_list_2 , temp_list_2 ) ;
17286: LD_ADDR_VAR 0 8
17290: PUSH
17291: LD_VAR 0 8
17295: PPUSH
17296: LD_VAR 0 8
17300: PPUSH
17301: CALL_OW 77
17305: ST_TO_ADDR
// SetTaskList ( temp_list_2 [ 1 ] , [ [ e , GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) , temp_list [ 1 ] , 0 , 0 , 0 ] ] ) ;
17306: LD_VAR 0 8
17310: PUSH
17311: LD_INT 1
17313: ARRAY
17314: PPUSH
17315: LD_STRING e
17317: PUSH
17318: LD_VAR 0 4
17322: PUSH
17323: LD_INT 1
17325: ARRAY
17326: PPUSH
17327: CALL_OW 250
17331: PUSH
17332: LD_VAR 0 4
17336: PUSH
17337: LD_INT 1
17339: ARRAY
17340: PPUSH
17341: CALL_OW 251
17345: PUSH
17346: LD_VAR 0 4
17350: PUSH
17351: LD_INT 1
17353: ARRAY
17354: PUSH
17355: LD_INT 0
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: LD_INT 0
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: PUSH
17373: EMPTY
17374: LIST
17375: PPUSH
17376: CALL_OW 446
// engineers_list = engineers_list diff temp_list_2 [ 1 ] ;
17380: LD_ADDR_VAR 0 3
17384: PUSH
17385: LD_VAR 0 3
17389: PUSH
17390: LD_VAR 0 8
17394: PUSH
17395: LD_INT 1
17397: ARRAY
17398: DIFF
17399: ST_TO_ADDR
// end ; if engineers_list = 0 and apemen_engineers_list = 0 then
17400: LD_VAR 0 3
17404: PUSH
17405: LD_INT 0
17407: EQUAL
17408: PUSH
17409: LD_VAR 0 10
17413: PUSH
17414: LD_INT 0
17416: EQUAL
17417: AND
17418: IFFALSE 17422
// continue ;
17420: GO 16591
// end ; i = 1 ;
17422: LD_ADDR_VAR 0 2
17426: PUSH
17427: LD_INT 1
17429: ST_TO_ADDR
// buildings_list = [ ] ;
17430: LD_ADDR_VAR 0 5
17434: PUSH
17435: EMPTY
17436: ST_TO_ADDR
// repeat case i of 1 :
17437: LD_VAR 0 2
17441: PUSH
17442: LD_INT 1
17444: DOUBLE
17445: EQUAL
17446: IFTRUE 17450
17448: GO 17487
17450: POP
// buildings_list = UnitFilter ( ai_all_buildings [ base ] , [ f_not , [ f_ok ] ] ) ; 2 :
17451: LD_ADDR_VAR 0 5
17455: PUSH
17456: LD_EXP 44
17460: PUSH
17461: LD_VAR 0 9
17465: ARRAY
17466: PPUSH
17467: LD_INT 3
17469: PUSH
17470: LD_INT 50
17472: PUSH
17473: EMPTY
17474: LIST
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PPUSH
17480: CALL_OW 72
17484: ST_TO_ADDR
17485: GO 17537
17487: LD_INT 2
17489: DOUBLE
17490: EQUAL
17491: IFTRUE 17495
17493: GO 17536
17495: POP
// buildings_list = UnitFilter ( ai_all_buildings [ base ] , [ f_not , [ f_lives , 1000 ] ] ) ; end ;
17496: LD_ADDR_VAR 0 5
17500: PUSH
17501: LD_EXP 44
17505: PUSH
17506: LD_VAR 0 9
17510: ARRAY
17511: PPUSH
17512: LD_INT 3
17514: PUSH
17515: LD_INT 24
17517: PUSH
17518: LD_INT 1000
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PPUSH
17529: CALL_OW 72
17533: ST_TO_ADDR
17534: GO 17537
17536: POP
// i = i + 1 ;
17537: LD_ADDR_VAR 0 2
17541: PUSH
17542: LD_VAR 0 2
17546: PUSH
17547: LD_INT 1
17549: PLUS
17550: ST_TO_ADDR
// until buildings_list > 0 or i > 2 ;
17551: LD_VAR 0 5
17555: PUSH
17556: LD_INT 0
17558: GREATER
17559: PUSH
17560: LD_VAR 0 2
17564: PUSH
17565: LD_INT 2
17567: GREATER
17568: OR
17569: IFFALSE 17437
// if buildings_list > 0 then
17571: LD_VAR 0 5
17575: PUSH
17576: LD_INT 0
17578: GREATER
17579: IFFALSE 17802
// begin humans_list = engineers_list ^ apemen_engineers_list ;
17581: LD_ADDR_VAR 0 11
17585: PUSH
17586: LD_VAR 0 3
17590: PUSH
17591: LD_VAR 0 10
17595: ADD
17596: ST_TO_ADDR
// humans_list = GetHumansOutOfUnits ( humans_list ) ;
17597: LD_ADDR_VAR 0 11
17601: PUSH
17602: LD_VAR 0 11
17606: PPUSH
17607: CALL 23168 0 1
17611: ST_TO_ADDR
// if crane_usable then
17612: LD_VAR 0 12
17616: IFFALSE 17648
// begin humans_list = humans_list ^ ai_crane [ base ] ;
17618: LD_ADDR_VAR 0 11
17622: PUSH
17623: LD_VAR 0 11
17627: PUSH
17628: LD_EXP 70
17632: PUSH
17633: LD_VAR 0 9
17637: ARRAY
17638: ADD
17639: ST_TO_ADDR
// crane_usable = false ;
17640: LD_ADDR_VAR 0 12
17644: PUSH
17645: LD_INT 0
17647: ST_TO_ADDR
// end ; repeat i = 1 ;
17648: LD_ADDR_VAR 0 2
17652: PUSH
17653: LD_INT 1
17655: ST_TO_ADDR
// while i <= buildings_list do
17656: LD_VAR 0 2
17660: PUSH
17661: LD_VAR 0 5
17665: LESSEQUAL
17666: IFFALSE 17790
// begin if humans_list = 0 then
17668: LD_VAR 0 11
17672: PUSH
17673: LD_INT 0
17675: EQUAL
17676: IFFALSE 17680
// break ;
17678: GO 17790
// temp_unit = NearestUnitToUnit ( humans_list , buildings_list [ i ] ) ;
17680: LD_ADDR_VAR 0 6
17684: PUSH
17685: LD_VAR 0 11
17689: PPUSH
17690: LD_VAR 0 5
17694: PUSH
17695: LD_VAR 0 2
17699: ARRAY
17700: PPUSH
17701: CALL_OW 74
17705: ST_TO_ADDR
// ComRepairBuilding ( temp_unit , buildings_list [ i ] ) ;
17706: LD_VAR 0 6
17710: PPUSH
17711: LD_VAR 0 5
17715: PUSH
17716: LD_VAR 0 2
17720: ARRAY
17721: PPUSH
17722: CALL_OW 130
// humans_list = humans_list diff temp_unit ;
17726: LD_ADDR_VAR 0 11
17730: PUSH
17731: LD_VAR 0 11
17735: PUSH
17736: LD_VAR 0 6
17740: DIFF
17741: ST_TO_ADDR
// engineers_list = engineers_list diff temp_unit ;
17742: LD_ADDR_VAR 0 3
17746: PUSH
17747: LD_VAR 0 3
17751: PUSH
17752: LD_VAR 0 6
17756: DIFF
17757: ST_TO_ADDR
// apemen_engineers_list = apemen_engineers_list diff temp_unit ;
17758: LD_ADDR_VAR 0 10
17762: PUSH
17763: LD_VAR 0 10
17767: PUSH
17768: LD_VAR 0 6
17772: DIFF
17773: ST_TO_ADDR
// i = i + 1 ;
17774: LD_ADDR_VAR 0 2
17778: PUSH
17779: LD_VAR 0 2
17783: PUSH
17784: LD_INT 1
17786: PLUS
17787: ST_TO_ADDR
// end ;
17788: GO 17656
// until humans_list = 0 ;
17790: LD_VAR 0 11
17794: PUSH
17795: LD_INT 0
17797: EQUAL
17798: IFFALSE 17648
// continue ;
17800: GO 16591
// end ; if not BaseUnderAttack ( base , - 1 ) then
17802: LD_VAR 0 9
17806: PPUSH
17807: LD_INT 1
17809: NEG
17810: PPUSH
17811: CALL 23273 0 2
17815: NOT
17816: IFFALSE 21650
// begin if ai_building_under_construction [ base ] > 0 then
17818: LD_EXP 42
17822: PUSH
17823: LD_VAR 0 9
17827: ARRAY
17828: PUSH
17829: LD_INT 0
17831: GREATER
17832: IFFALSE 17983
// if BuildingStatus ( ai_building_under_construction [ base ] ) = bs_build then
17834: LD_EXP 42
17838: PUSH
17839: LD_VAR 0 9
17843: ARRAY
17844: PPUSH
17845: CALL_OW 461
17849: PUSH
17850: LD_INT 1
17852: EQUAL
17853: IFFALSE 17945
// begin temp_list_2 = GetHumansOutOfUnits ( engineers_list ^ apemen_engineers_list ) ;
17855: LD_ADDR_VAR 0 8
17859: PUSH
17860: LD_VAR 0 3
17864: PUSH
17865: LD_VAR 0 10
17869: ADD
17870: PPUSH
17871: CALL 23168 0 1
17875: ST_TO_ADDR
// if crane_usable then
17876: LD_VAR 0 12
17880: IFFALSE 17904
// temp_list_2 = temp_list_2 ^ ai_crane [ base ] ;
17882: LD_ADDR_VAR 0 8
17886: PUSH
17887: LD_VAR 0 8
17891: PUSH
17892: LD_EXP 70
17896: PUSH
17897: LD_VAR 0 9
17901: ARRAY
17902: ADD
17903: ST_TO_ADDR
// for i in temp_list_2 do
17904: LD_ADDR_VAR 0 2
17908: PUSH
17909: LD_VAR 0 8
17913: PUSH
17914: FOR_IN
17915: IFFALSE 17939
// ComRepairBuilding ( i , ai_building_under_construction [ base ] ) ;
17917: LD_VAR 0 2
17921: PPUSH
17922: LD_EXP 42
17926: PUSH
17927: LD_VAR 0 9
17931: ARRAY
17932: PPUSH
17933: CALL_OW 130
17937: GO 17914
17939: POP
17940: POP
// continue ;
17941: GO 16591
// end else
17943: GO 17983
// begin ComCancel ( ai_building_under_construction [ base ] ) ;
17945: LD_EXP 42
17949: PUSH
17950: LD_VAR 0 9
17954: ARRAY
17955: PPUSH
17956: CALL_OW 127
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
17960: LD_ADDR_EXP 42
17964: PUSH
17965: LD_EXP 42
17969: PPUSH
17970: LD_VAR 0 9
17974: PPUSH
17975: LD_INT 0
17977: PPUSH
17978: CALL_OW 1
17982: ST_TO_ADDR
// end ; if ai_all_buildings [ base ] - ai_excepted_buildings [ base ] < ai_buildings_locations [ base ] or ai_upcoming_building_data [ base ] > 0 then
17983: LD_EXP 44
17987: PUSH
17988: LD_VAR 0 9
17992: ARRAY
17993: PUSH
17994: LD_EXP 68
17998: PUSH
17999: LD_VAR 0 9
18003: ARRAY
18004: MINUS
18005: PUSH
18006: LD_EXP 38
18010: PUSH
18011: LD_VAR 0 9
18015: ARRAY
18016: LESS
18017: PUSH
18018: LD_EXP 46
18022: PUSH
18023: LD_VAR 0 9
18027: ARRAY
18028: PUSH
18029: LD_INT 0
18031: GREATER
18032: OR
18033: IFFALSE 21536
// begin if ai_upcoming_building_data [ base ] = 0 then
18035: LD_EXP 46
18039: PUSH
18040: LD_VAR 0 9
18044: ARRAY
18045: PUSH
18046: LD_INT 0
18048: EQUAL
18049: IFFALSE 18458
// begin temp_list = [ ] ;
18051: LD_ADDR_VAR 0 4
18055: PUSH
18056: EMPTY
18057: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
18058: LD_ADDR_VAR 0 2
18062: PUSH
18063: LD_EXP 38
18067: PUSH
18068: LD_VAR 0 9
18072: ARRAY
18073: PUSH
18074: FOR_IN
18075: IFFALSE 18125
// if GetBType ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) = - 1 then
18077: LD_VAR 0 2
18081: PUSH
18082: LD_INT 1
18084: ARRAY
18085: PPUSH
18086: LD_VAR 0 2
18090: PUSH
18091: LD_INT 2
18093: ARRAY
18094: PPUSH
18095: CALL_OW 428
18099: PPUSH
18100: CALL_OW 266
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: EQUAL
18109: IFFALSE 18123
// begin temp_list = i ;
18111: LD_ADDR_VAR 0 4
18115: PUSH
18116: LD_VAR 0 2
18120: ST_TO_ADDR
// break ;
18121: GO 18125
// end ;
18123: GO 18074
18125: POP
18126: POP
// if temp_list > 0 then
18127: LD_VAR 0 4
18131: PUSH
18132: LD_INT 0
18134: GREATER
18135: IFFALSE 18458
// begin if temp_list [ 4 ] = b_bunker and GetBaseNation ( base ) in [ nation_american , nation_russian ] then
18137: LD_VAR 0 4
18141: PUSH
18142: LD_INT 4
18144: ARRAY
18145: PUSH
18146: LD_INT 32
18148: EQUAL
18149: PUSH
18150: LD_VAR 0 9
18154: PPUSH
18155: CALL 12430 0 1
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: LD_INT 3
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: IN
18170: AND
18171: IFFALSE 18433
// begin k = 0 ;
18173: LD_ADDR_VAR 0 14
18177: PUSH
18178: LD_INT 0
18180: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
18181: LD_ADDR_VAR 0 2
18185: PUSH
18186: LD_EXP 38
18190: PUSH
18191: LD_VAR 0 9
18195: ARRAY
18196: PUSH
18197: FOR_IN
18198: IFFALSE 18249
// if i [ 4 ] in [ b_breastwork , b_bunker , b_armoury , b_barracks , b_fort ] then
18200: LD_VAR 0 2
18204: PUSH
18205: LD_INT 4
18207: ARRAY
18208: PUSH
18209: LD_INT 31
18211: PUSH
18212: LD_INT 32
18214: PUSH
18215: LD_INT 4
18217: PUSH
18218: LD_INT 5
18220: PUSH
18221: LD_INT 35
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: IN
18231: IFFALSE 18247
// k = k + 1 ;
18233: LD_ADDR_VAR 0 14
18237: PUSH
18238: LD_VAR 0 14
18242: PUSH
18243: LD_INT 1
18245: PLUS
18246: ST_TO_ADDR
18247: GO 18197
18249: POP
18250: POP
// if k > ai_soldiers [ base ] then
18251: LD_VAR 0 14
18255: PUSH
18256: LD_EXP 29
18260: PUSH
18261: LD_VAR 0 9
18265: ARRAY
18266: GREATER
18267: IFFALSE 18433
// begin for i = 1 to ai_buildings_locations [ base ] do
18269: LD_ADDR_VAR 0 2
18273: PUSH
18274: DOUBLE
18275: LD_INT 1
18277: DEC
18278: ST_TO_ADDR
18279: LD_EXP 38
18283: PUSH
18284: LD_VAR 0 9
18288: ARRAY
18289: PUSH
18290: FOR_TO
18291: IFFALSE 18410
// if ai_buildings_locations [ base ] [ i ] = temp_list then
18293: LD_EXP 38
18297: PUSH
18298: LD_VAR 0 9
18302: ARRAY
18303: PUSH
18304: LD_VAR 0 2
18308: ARRAY
18309: PUSH
18310: LD_VAR 0 4
18314: EQUAL
18315: IFFALSE 18408
// begin temp_list_2 = Replace ( ai_buildings_locations [ base ] [ i ] , 4 , b_turret ) ;
18317: LD_ADDR_VAR 0 8
18321: PUSH
18322: LD_EXP 38
18326: PUSH
18327: LD_VAR 0 9
18331: ARRAY
18332: PUSH
18333: LD_VAR 0 2
18337: ARRAY
18338: PPUSH
18339: LD_INT 4
18341: PPUSH
18342: LD_INT 33
18344: PPUSH
18345: CALL_OW 1
18349: ST_TO_ADDR
// temp_list_2 = Replace ( ai_buildings_locations [ base ] , i , temp_list_2 ) ;
18350: LD_ADDR_VAR 0 8
18354: PUSH
18355: LD_EXP 38
18359: PUSH
18360: LD_VAR 0 9
18364: ARRAY
18365: PPUSH
18366: LD_VAR 0 2
18370: PPUSH
18371: LD_VAR 0 8
18375: PPUSH
18376: CALL_OW 1
18380: ST_TO_ADDR
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list_2 ) ;
18381: LD_ADDR_EXP 38
18385: PUSH
18386: LD_EXP 38
18390: PPUSH
18391: LD_VAR 0 9
18395: PPUSH
18396: LD_VAR 0 8
18400: PPUSH
18401: CALL_OW 1
18405: ST_TO_ADDR
// break ;
18406: GO 18410
// end ;
18408: GO 18290
18410: POP
18411: POP
// temp_list = Replace ( temp_list , 4 , b_turret ) ;
18412: LD_ADDR_VAR 0 4
18416: PUSH
18417: LD_VAR 0 4
18421: PPUSH
18422: LD_INT 4
18424: PPUSH
18425: LD_INT 33
18427: PPUSH
18428: CALL_OW 1
18432: ST_TO_ADDR
// end ; end ; ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , temp_list ) ;
18433: LD_ADDR_EXP 46
18437: PUSH
18438: LD_EXP 46
18442: PPUSH
18443: LD_VAR 0 9
18447: PPUSH
18448: LD_VAR 0 4
18452: PPUSH
18453: CALL_OW 1
18457: ST_TO_ADDR
// end ; end ; if ai_upcoming_building_data [ base ] > 0 then
18458: LD_EXP 46
18462: PUSH
18463: LD_VAR 0 9
18467: ARRAY
18468: PUSH
18469: LD_INT 0
18471: GREATER
18472: IFFALSE 21536
// begin if ai_building_constructor [ base ] = 0 then
18474: LD_EXP 45
18478: PUSH
18479: LD_VAR 0 9
18483: ARRAY
18484: PUSH
18485: LD_INT 0
18487: EQUAL
18488: IFFALSE 18642
// begin temp_list_2 = UnitFilter ( ai_engineers [ base ] , [ f_class , class_engineer ] ) ;
18490: LD_ADDR_VAR 0 8
18494: PUSH
18495: LD_EXP 30
18499: PUSH
18500: LD_VAR 0 9
18504: ARRAY
18505: PPUSH
18506: LD_INT 25
18508: PUSH
18509: LD_INT 2
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 72
18520: ST_TO_ADDR
// if crane_usable then
18521: LD_VAR 0 12
18525: IFFALSE 18549
// temp_list_2 = temp_list_2 ^ ai_crane [ base ] ;
18527: LD_ADDR_VAR 0 8
18531: PUSH
18532: LD_VAR 0 8
18536: PUSH
18537: LD_EXP 70
18541: PUSH
18542: LD_VAR 0 9
18546: ARRAY
18547: ADD
18548: ST_TO_ADDR
// if temp_list_2 > 0 then
18549: LD_VAR 0 8
18553: PUSH
18554: LD_INT 0
18556: GREATER
18557: IFFALSE 18642
// begin temp_list = [ ] ;
18559: LD_ADDR_VAR 0 4
18563: PUSH
18564: EMPTY
18565: ST_TO_ADDR
// for i in temp_list_2 do
18566: LD_ADDR_VAR 0 2
18570: PUSH
18571: LD_VAR 0 8
18575: PUSH
18576: FOR_IN
18577: IFFALSE 18605
// temp_list = temp_list ^ GetSkill ( i , skill_engineering ) ;
18579: LD_ADDR_VAR 0 4
18583: PUSH
18584: LD_VAR 0 4
18588: PUSH
18589: LD_VAR 0 2
18593: PPUSH
18594: LD_INT 2
18596: PPUSH
18597: CALL_OW 259
18601: ADD
18602: ST_TO_ADDR
18603: GO 18576
18605: POP
18606: POP
// ai_building_constructor = Replace ( ai_building_constructor , base , BestFromListByList ( temp_list_2 , temp_list ) ) ;
18607: LD_ADDR_EXP 45
18611: PUSH
18612: LD_EXP 45
18616: PPUSH
18617: LD_VAR 0 9
18621: PPUSH
18622: LD_VAR 0 8
18626: PPUSH
18627: LD_VAR 0 4
18631: PPUSH
18632: CALL_OW 79
18636: PPUSH
18637: CALL_OW 1
18641: ST_TO_ADDR
// end ; end ; if ai_building_constructor [ base ] > 0 and ( ai_building_constructor [ base ] in engineers_list or ( ai_building_constructor [ base ] = ai_crane [ base ] and crane_usable ) ) then
18642: LD_EXP 45
18646: PUSH
18647: LD_VAR 0 9
18651: ARRAY
18652: PUSH
18653: LD_INT 0
18655: GREATER
18656: PUSH
18657: LD_EXP 45
18661: PUSH
18662: LD_VAR 0 9
18666: ARRAY
18667: PUSH
18668: LD_VAR 0 3
18672: IN
18673: PUSH
18674: LD_EXP 45
18678: PUSH
18679: LD_VAR 0 9
18683: ARRAY
18684: PUSH
18685: LD_EXP 70
18689: PUSH
18690: LD_VAR 0 9
18694: ARRAY
18695: EQUAL
18696: PUSH
18697: LD_VAR 0 12
18701: AND
18702: OR
18703: AND
18704: IFFALSE 21536
// begin engineers_list = engineers_list diff ai_building_constructor [ base ] ;
18706: LD_ADDR_VAR 0 3
18710: PUSH
18711: LD_VAR 0 3
18715: PUSH
18716: LD_EXP 45
18720: PUSH
18721: LD_VAR 0 9
18725: ARRAY
18726: DIFF
18727: ST_TO_ADDR
// case GetType ( IsInUnit ( ai_building_constructor [ base ] ) ) of unit_building :
18728: LD_EXP 45
18732: PUSH
18733: LD_VAR 0 9
18737: ARRAY
18738: PPUSH
18739: CALL_OW 310
18743: PPUSH
18744: CALL_OW 247
18748: PUSH
18749: LD_INT 3
18751: DOUBLE
18752: EQUAL
18753: IFTRUE 18757
18755: GO 18775
18757: POP
// ComExitBuilding ( ai_building_constructor [ base ] ) ; unit_vehicle :
18758: LD_EXP 45
18762: PUSH
18763: LD_VAR 0 9
18767: ARRAY
18768: PPUSH
18769: CALL_OW 122
18773: GO 21536
18775: LD_INT 2
18777: DOUBLE
18778: EQUAL
18779: IFTRUE 18783
18781: GO 18801
18783: POP
// ComExitVehicle ( ai_building_constructor [ base ] ) ; else
18784: LD_EXP 45
18788: PUSH
18789: LD_VAR 0 9
18793: ARRAY
18794: PPUSH
18795: CALL_OW 121
18799: GO 21536
18801: POP
// case GetBType ( HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ) of - 1 :
18802: LD_EXP 46
18806: PUSH
18807: LD_VAR 0 9
18811: ARRAY
18812: PUSH
18813: LD_INT 1
18815: ARRAY
18816: PPUSH
18817: LD_EXP 46
18821: PUSH
18822: LD_VAR 0 9
18826: ARRAY
18827: PUSH
18828: LD_INT 2
18830: ARRAY
18831: PPUSH
18832: CALL_OW 428
18836: PPUSH
18837: CALL_OW 266
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: DOUBLE
18846: EQUAL
18847: IFTRUE 18851
18849: GO 21041
18851: POP
// begin case ai_upcoming_building_data [ base ] [ 4 ] of b_warehouse :
18852: LD_EXP 46
18856: PUSH
18857: LD_VAR 0 9
18861: ARRAY
18862: PUSH
18863: LD_INT 4
18865: ARRAY
18866: PUSH
18867: LD_INT 1
18869: DOUBLE
18870: EQUAL
18871: IFTRUE 18875
18873: GO 18886
18875: POP
// i = b_depot ; b_factory :
18876: LD_ADDR_VAR 0 2
18880: PUSH
18881: LD_INT 0
18883: ST_TO_ADDR
18884: GO 18970
18886: LD_INT 3
18888: DOUBLE
18889: EQUAL
18890: IFTRUE 18894
18892: GO 18905
18894: POP
// i = b_workshop ; b_lab_half , b_lab_full :
18895: LD_ADDR_VAR 0 2
18899: PUSH
18900: LD_INT 2
18902: ST_TO_ADDR
18903: GO 18970
18905: LD_INT 7
18907: DOUBLE
18908: EQUAL
18909: IFTRUE 18919
18911: LD_INT 8
18913: DOUBLE
18914: EQUAL
18915: IFTRUE 18919
18917: GO 18930
18919: POP
// i = b_lab ; b_barracks :
18920: LD_ADDR_VAR 0 2
18924: PUSH
18925: LD_INT 6
18927: ST_TO_ADDR
18928: GO 18970
18930: LD_INT 5
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18949
18938: POP
// i = b_armoury ; else
18939: LD_ADDR_VAR 0 2
18943: PUSH
18944: LD_INT 4
18946: ST_TO_ADDR
18947: GO 18970
18949: POP
// i = ai_upcoming_building_data [ base ] [ 4 ] ; end ;
18950: LD_ADDR_VAR 0 2
18954: PUSH
18955: LD_EXP 46
18959: PUSH
18960: LD_VAR 0 9
18964: ARRAY
18965: PUSH
18966: LD_INT 4
18968: ARRAY
18969: ST_TO_ADDR
// case i of b_depot :
18970: LD_VAR 0 2
18974: PUSH
18975: LD_INT 0
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 19060
18983: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
18984: LD_EXP 45
18988: PUSH
18989: LD_VAR 0 9
18993: ARRAY
18994: PPUSH
18995: CALL_OW 248
18999: PUSH
19000: LD_INT 3
19002: DOUBLE
19003: EQUAL
19004: IFTRUE 19008
19006: GO 19019
19008: POP
// b_value = 64 ; nation_american :
19009: LD_ADDR_VAR 0 13
19013: PUSH
19014: LD_INT 64
19016: ST_TO_ADDR
19017: GO 19058
19019: LD_INT 1
19021: DOUBLE
19022: EQUAL
19023: IFTRUE 19027
19025: GO 19038
19027: POP
// b_value = 1 ; nation_arabian :
19028: LD_ADDR_VAR 0 13
19032: PUSH
19033: LD_INT 1
19035: ST_TO_ADDR
19036: GO 19058
19038: LD_INT 2
19040: DOUBLE
19041: EQUAL
19042: IFTRUE 19046
19044: GO 19057
19046: POP
// b_value = 34 ; end ;
19047: LD_ADDR_VAR 0 13
19051: PUSH
19052: LD_INT 34
19054: ST_TO_ADDR
19055: GO 19058
19057: POP
// end ; b_workshop :
19058: GO 20953
19060: LD_INT 2
19062: DOUBLE
19063: EQUAL
19064: IFTRUE 19068
19066: GO 19145
19068: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19069: LD_EXP 45
19073: PUSH
19074: LD_VAR 0 9
19078: ARRAY
19079: PPUSH
19080: CALL_OW 248
19084: PUSH
19085: LD_INT 3
19087: DOUBLE
19088: EQUAL
19089: IFTRUE 19093
19091: GO 19104
19093: POP
// b_value = 68 ; nation_american :
19094: LD_ADDR_VAR 0 13
19098: PUSH
19099: LD_INT 68
19101: ST_TO_ADDR
19102: GO 19143
19104: LD_INT 1
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19123
19112: POP
// b_value = 5 ; nation_arabian :
19113: LD_ADDR_VAR 0 13
19117: PUSH
19118: LD_INT 5
19120: ST_TO_ADDR
19121: GO 19143
19123: LD_INT 2
19125: DOUBLE
19126: EQUAL
19127: IFTRUE 19131
19129: GO 19142
19131: POP
// b_value = 38 ; end ;
19132: LD_ADDR_VAR 0 13
19136: PUSH
19137: LD_INT 38
19139: ST_TO_ADDR
19140: GO 19143
19142: POP
// end ; b_armoury :
19143: GO 20953
19145: LD_INT 4
19147: DOUBLE
19148: EQUAL
19149: IFTRUE 19153
19151: GO 19230
19153: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19154: LD_EXP 45
19158: PUSH
19159: LD_VAR 0 9
19163: ARRAY
19164: PPUSH
19165: CALL_OW 248
19169: PUSH
19170: LD_INT 3
19172: DOUBLE
19173: EQUAL
19174: IFTRUE 19178
19176: GO 19189
19178: POP
// b_value = 66 ; nation_american :
19179: LD_ADDR_VAR 0 13
19183: PUSH
19184: LD_INT 66
19186: ST_TO_ADDR
19187: GO 19228
19189: LD_INT 1
19191: DOUBLE
19192: EQUAL
19193: IFTRUE 19197
19195: GO 19208
19197: POP
// b_value = 3 ; nation_arabian :
19198: LD_ADDR_VAR 0 13
19202: PUSH
19203: LD_INT 3
19205: ST_TO_ADDR
19206: GO 19228
19208: LD_INT 2
19210: DOUBLE
19211: EQUAL
19212: IFTRUE 19216
19214: GO 19227
19216: POP
// b_value = 36 ; end ;
19217: LD_ADDR_VAR 0 13
19221: PUSH
19222: LD_INT 36
19224: ST_TO_ADDR
19225: GO 19228
19227: POP
// end ; b_lab :
19228: GO 20953
19230: LD_INT 6
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19238
19236: GO 19315
19238: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19239: LD_EXP 45
19243: PUSH
19244: LD_VAR 0 9
19248: ARRAY
19249: PPUSH
19250: CALL_OW 248
19254: PUSH
19255: LD_INT 3
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19263
19261: GO 19274
19263: POP
// b_value = 77 ; nation_american :
19264: LD_ADDR_VAR 0 13
19268: PUSH
19269: LD_INT 77
19271: ST_TO_ADDR
19272: GO 19313
19274: LD_INT 1
19276: DOUBLE
19277: EQUAL
19278: IFTRUE 19282
19280: GO 19293
19282: POP
// b_value = 17 ; nation_arabian :
19283: LD_ADDR_VAR 0 13
19287: PUSH
19288: LD_INT 17
19290: ST_TO_ADDR
19291: GO 19313
19293: LD_INT 2
19295: DOUBLE
19296: EQUAL
19297: IFTRUE 19301
19299: GO 19312
19301: POP
// b_value = 48 ; end ;
19302: LD_ADDR_VAR 0 13
19306: PUSH
19307: LD_INT 48
19309: ST_TO_ADDR
19310: GO 19313
19312: POP
// end ; b_oil_power :
19313: GO 20953
19315: LD_INT 26
19317: DOUBLE
19318: EQUAL
19319: IFTRUE 19323
19321: GO 19400
19323: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19324: LD_EXP 45
19328: PUSH
19329: LD_VAR 0 9
19333: ARRAY
19334: PPUSH
19335: CALL_OW 248
19339: PUSH
19340: LD_INT 3
19342: DOUBLE
19343: EQUAL
19344: IFTRUE 19348
19346: GO 19359
19348: POP
// b_value = 85 ; nation_american :
19349: LD_ADDR_VAR 0 13
19353: PUSH
19354: LD_INT 85
19356: ST_TO_ADDR
19357: GO 19398
19359: LD_INT 1
19361: DOUBLE
19362: EQUAL
19363: IFTRUE 19367
19365: GO 19378
19367: POP
// b_value = 25 ; nation_arabian :
19368: LD_ADDR_VAR 0 13
19372: PUSH
19373: LD_INT 25
19375: ST_TO_ADDR
19376: GO 19398
19378: LD_INT 2
19380: DOUBLE
19381: EQUAL
19382: IFTRUE 19386
19384: GO 19397
19386: POP
// b_value = 56 ; end ;
19387: LD_ADDR_VAR 0 13
19391: PUSH
19392: LD_INT 56
19394: ST_TO_ADDR
19395: GO 19398
19397: POP
// end ; b_solar_power :
19398: GO 20953
19400: LD_INT 27
19402: DOUBLE
19403: EQUAL
19404: IFTRUE 19408
19406: GO 19486
19408: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19409: LD_EXP 45
19413: PUSH
19414: LD_VAR 0 9
19418: ARRAY
19419: PPUSH
19420: CALL_OW 248
19424: PUSH
19425: LD_INT 3
19427: DOUBLE
19428: EQUAL
19429: IFTRUE 19433
19431: GO 19445
19433: POP
// b_value = - 7 ; nation_american :
19434: LD_ADDR_VAR 0 13
19438: PUSH
19439: LD_INT 7
19441: NEG
19442: ST_TO_ADDR
19443: GO 19484
19445: LD_INT 1
19447: DOUBLE
19448: EQUAL
19449: IFTRUE 19453
19451: GO 19464
19453: POP
// b_value = 26 ; nation_arabian :
19454: LD_ADDR_VAR 0 13
19458: PUSH
19459: LD_INT 26
19461: ST_TO_ADDR
19462: GO 19484
19464: LD_INT 2
19466: DOUBLE
19467: EQUAL
19468: IFTRUE 19472
19470: GO 19483
19472: POP
// b_value = 57 ; end ;
19473: LD_ADDR_VAR 0 13
19477: PUSH
19478: LD_INT 57
19480: ST_TO_ADDR
19481: GO 19484
19483: POP
// end ; b_siberite_power :
19484: GO 20953
19486: LD_INT 28
19488: DOUBLE
19489: EQUAL
19490: IFTRUE 19494
19492: GO 19571
19494: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19495: LD_EXP 45
19499: PUSH
19500: LD_VAR 0 9
19504: ARRAY
19505: PPUSH
19506: CALL_OW 248
19510: PUSH
19511: LD_INT 3
19513: DOUBLE
19514: EQUAL
19515: IFTRUE 19519
19517: GO 19530
19519: POP
// b_value = 86 ; nation_american :
19520: LD_ADDR_VAR 0 13
19524: PUSH
19525: LD_INT 86
19527: ST_TO_ADDR
19528: GO 19569
19530: LD_INT 1
19532: DOUBLE
19533: EQUAL
19534: IFTRUE 19538
19536: GO 19549
19538: POP
// b_value = 27 ; nation_arabian :
19539: LD_ADDR_VAR 0 13
19543: PUSH
19544: LD_INT 27
19546: ST_TO_ADDR
19547: GO 19569
19549: LD_INT 2
19551: DOUBLE
19552: EQUAL
19553: IFTRUE 19557
19555: GO 19568
19557: POP
// b_value = 58 ; end ;
19558: LD_ADDR_VAR 0 13
19562: PUSH
19563: LD_INT 58
19565: ST_TO_ADDR
19566: GO 19569
19568: POP
// end ; b_oil_mine :
19569: GO 20953
19571: LD_INT 29
19573: DOUBLE
19574: EQUAL
19575: IFTRUE 19579
19577: GO 19656
19579: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19580: LD_EXP 45
19584: PUSH
19585: LD_VAR 0 9
19589: ARRAY
19590: PPUSH
19591: CALL_OW 248
19595: PUSH
19596: LD_INT 3
19598: DOUBLE
19599: EQUAL
19600: IFTRUE 19604
19602: GO 19615
19604: POP
// b_value = 87 ; nation_american :
19605: LD_ADDR_VAR 0 13
19609: PUSH
19610: LD_INT 87
19612: ST_TO_ADDR
19613: GO 19654
19615: LD_INT 1
19617: DOUBLE
19618: EQUAL
19619: IFTRUE 19623
19621: GO 19634
19623: POP
// b_value = 28 ; nation_arabian :
19624: LD_ADDR_VAR 0 13
19628: PUSH
19629: LD_INT 28
19631: ST_TO_ADDR
19632: GO 19654
19634: LD_INT 2
19636: DOUBLE
19637: EQUAL
19638: IFTRUE 19642
19640: GO 19653
19642: POP
// b_value = 59 ; end ;
19643: LD_ADDR_VAR 0 13
19647: PUSH
19648: LD_INT 59
19650: ST_TO_ADDR
19651: GO 19654
19653: POP
// end ; b_siberite_mine :
19654: GO 20953
19656: LD_INT 30
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19741
19664: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19665: LD_EXP 45
19669: PUSH
19670: LD_VAR 0 9
19674: ARRAY
19675: PPUSH
19676: CALL_OW 248
19680: PUSH
19681: LD_INT 3
19683: DOUBLE
19684: EQUAL
19685: IFTRUE 19689
19687: GO 19700
19689: POP
// b_value = 88 ; nation_american :
19690: LD_ADDR_VAR 0 13
19694: PUSH
19695: LD_INT 88
19697: ST_TO_ADDR
19698: GO 19739
19700: LD_INT 1
19702: DOUBLE
19703: EQUAL
19704: IFTRUE 19708
19706: GO 19719
19708: POP
// b_value = 29 ; nation_arabian :
19709: LD_ADDR_VAR 0 13
19713: PUSH
19714: LD_INT 29
19716: ST_TO_ADDR
19717: GO 19739
19719: LD_INT 2
19721: DOUBLE
19722: EQUAL
19723: IFTRUE 19727
19725: GO 19738
19727: POP
// b_value = 60 ; end ;
19728: LD_ADDR_VAR 0 13
19732: PUSH
19733: LD_INT 60
19735: ST_TO_ADDR
19736: GO 19739
19738: POP
// end ; b_breastwork :
19739: GO 20953
19741: LD_INT 31
19743: DOUBLE
19744: EQUAL
19745: IFTRUE 19749
19747: GO 19826
19749: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19750: LD_EXP 45
19754: PUSH
19755: LD_VAR 0 9
19759: ARRAY
19760: PPUSH
19761: CALL_OW 248
19765: PUSH
19766: LD_INT 3
19768: DOUBLE
19769: EQUAL
19770: IFTRUE 19774
19772: GO 19785
19774: POP
// b_value = 89 ; nation_american :
19775: LD_ADDR_VAR 0 13
19779: PUSH
19780: LD_INT 89
19782: ST_TO_ADDR
19783: GO 19824
19785: LD_INT 1
19787: DOUBLE
19788: EQUAL
19789: IFTRUE 19793
19791: GO 19804
19793: POP
// b_value = 30 ; nation_arabian :
19794: LD_ADDR_VAR 0 13
19798: PUSH
19799: LD_INT 30
19801: ST_TO_ADDR
19802: GO 19824
19804: LD_INT 2
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 19823
19812: POP
// b_value = 61 ; end ;
19813: LD_ADDR_VAR 0 13
19817: PUSH
19818: LD_INT 61
19820: ST_TO_ADDR
19821: GO 19824
19823: POP
// end ; b_bunker :
19824: GO 20953
19826: LD_INT 32
19828: DOUBLE
19829: EQUAL
19830: IFTRUE 19834
19832: GO 19911
19834: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19835: LD_EXP 45
19839: PUSH
19840: LD_VAR 0 9
19844: ARRAY
19845: PPUSH
19846: CALL_OW 248
19850: PUSH
19851: LD_INT 3
19853: DOUBLE
19854: EQUAL
19855: IFTRUE 19859
19857: GO 19870
19859: POP
// b_value = 90 ; nation_american :
19860: LD_ADDR_VAR 0 13
19864: PUSH
19865: LD_INT 90
19867: ST_TO_ADDR
19868: GO 19909
19870: LD_INT 1
19872: DOUBLE
19873: EQUAL
19874: IFTRUE 19878
19876: GO 19889
19878: POP
// b_value = 31 ; nation_arabian :
19879: LD_ADDR_VAR 0 13
19883: PUSH
19884: LD_INT 31
19886: ST_TO_ADDR
19887: GO 19909
19889: LD_INT 2
19891: DOUBLE
19892: EQUAL
19893: IFTRUE 19897
19895: GO 19908
19897: POP
// b_value = 62 ; end ;
19898: LD_ADDR_VAR 0 13
19902: PUSH
19903: LD_INT 62
19905: ST_TO_ADDR
19906: GO 19909
19908: POP
// end ; b_turret :
19909: GO 20953
19911: LD_INT 33
19913: DOUBLE
19914: EQUAL
19915: IFTRUE 19919
19917: GO 19997
19919: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19920: LD_EXP 45
19924: PUSH
19925: LD_VAR 0 9
19929: ARRAY
19930: PPUSH
19931: CALL_OW 248
19935: PUSH
19936: LD_INT 3
19938: DOUBLE
19939: EQUAL
19940: IFTRUE 19944
19942: GO 19955
19944: POP
// b_value = 91 ; nation_american :
19945: LD_ADDR_VAR 0 13
19949: PUSH
19950: LD_INT 91
19952: ST_TO_ADDR
19953: GO 19995
19955: LD_INT 1
19957: DOUBLE
19958: EQUAL
19959: IFTRUE 19963
19961: GO 19974
19963: POP
// b_value = 32 ; nation_arabian :
19964: LD_ADDR_VAR 0 13
19968: PUSH
19969: LD_INT 32
19971: ST_TO_ADDR
19972: GO 19995
19974: LD_INT 2
19976: DOUBLE
19977: EQUAL
19978: IFTRUE 19982
19980: GO 19994
19982: POP
// b_value = - 7 ; end ;
19983: LD_ADDR_VAR 0 13
19987: PUSH
19988: LD_INT 7
19990: NEG
19991: ST_TO_ADDR
19992: GO 19995
19994: POP
// end ; b_teleport :
19995: GO 20953
19997: LD_INT 34
19999: DOUBLE
20000: EQUAL
20001: IFTRUE 20005
20003: GO 20084
20005: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20006: LD_EXP 45
20010: PUSH
20011: LD_VAR 0 9
20015: ARRAY
20016: PPUSH
20017: CALL_OW 248
20021: PUSH
20022: LD_INT 3
20024: DOUBLE
20025: EQUAL
20026: IFTRUE 20030
20028: GO 20041
20030: POP
// b_value = 92 ; nation_american :
20031: LD_ADDR_VAR 0 13
20035: PUSH
20036: LD_INT 92
20038: ST_TO_ADDR
20039: GO 20082
20041: LD_INT 1
20043: DOUBLE
20044: EQUAL
20045: IFTRUE 20049
20047: GO 20061
20049: POP
// b_value = - 7 ; nation_arabian :
20050: LD_ADDR_VAR 0 13
20054: PUSH
20055: LD_INT 7
20057: NEG
20058: ST_TO_ADDR
20059: GO 20082
20061: LD_INT 2
20063: DOUBLE
20064: EQUAL
20065: IFTRUE 20069
20067: GO 20081
20069: POP
// b_value = - 7 ; end ;
20070: LD_ADDR_VAR 0 13
20074: PUSH
20075: LD_INT 7
20077: NEG
20078: ST_TO_ADDR
20079: GO 20082
20081: POP
// end ; b_control_tower :
20082: GO 20953
20084: LD_INT 36
20086: DOUBLE
20087: EQUAL
20088: IFTRUE 20092
20090: GO 20171
20092: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20093: LD_EXP 45
20097: PUSH
20098: LD_VAR 0 9
20102: ARRAY
20103: PPUSH
20104: CALL_OW 248
20108: PUSH
20109: LD_INT 3
20111: DOUBLE
20112: EQUAL
20113: IFTRUE 20117
20115: GO 20129
20117: POP
// b_value = - 7 ; nation_american :
20118: LD_ADDR_VAR 0 13
20122: PUSH
20123: LD_INT 7
20125: NEG
20126: ST_TO_ADDR
20127: GO 20169
20129: LD_INT 1
20131: DOUBLE
20132: EQUAL
20133: IFTRUE 20137
20135: GO 20148
20137: POP
// b_value = 94 ; nation_arabian :
20138: LD_ADDR_VAR 0 13
20142: PUSH
20143: LD_INT 94
20145: ST_TO_ADDR
20146: GO 20169
20148: LD_INT 2
20150: DOUBLE
20151: EQUAL
20152: IFTRUE 20156
20154: GO 20168
20156: POP
// b_value = - 7 ; end ;
20157: LD_ADDR_VAR 0 13
20161: PUSH
20162: LD_INT 7
20164: NEG
20165: ST_TO_ADDR
20166: GO 20169
20168: POP
// end ; b_ext_track :
20169: GO 20953
20171: LD_INT 16
20173: DOUBLE
20174: EQUAL
20175: IFTRUE 20179
20177: GO 20256
20179: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20180: LD_EXP 45
20184: PUSH
20185: LD_VAR 0 9
20189: ARRAY
20190: PPUSH
20191: CALL_OW 248
20195: PUSH
20196: LD_INT 3
20198: DOUBLE
20199: EQUAL
20200: IFTRUE 20204
20202: GO 20215
20204: POP
// b_value = 70 ; nation_american :
20205: LD_ADDR_VAR 0 13
20209: PUSH
20210: LD_INT 70
20212: ST_TO_ADDR
20213: GO 20254
20215: LD_INT 1
20217: DOUBLE
20218: EQUAL
20219: IFTRUE 20223
20221: GO 20234
20223: POP
// b_value = 7 ; nation_arabian :
20224: LD_ADDR_VAR 0 13
20228: PUSH
20229: LD_INT 7
20231: ST_TO_ADDR
20232: GO 20254
20234: LD_INT 2
20236: DOUBLE
20237: EQUAL
20238: IFTRUE 20242
20240: GO 20253
20242: POP
// b_value = 40 ; end ;
20243: LD_ADDR_VAR 0 13
20247: PUSH
20248: LD_INT 40
20250: ST_TO_ADDR
20251: GO 20254
20253: POP
// end ; b_ext_gun :
20254: GO 20953
20256: LD_INT 17
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20341
20264: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20265: LD_EXP 45
20269: PUSH
20270: LD_VAR 0 9
20274: ARRAY
20275: PPUSH
20276: CALL_OW 248
20280: PUSH
20281: LD_INT 3
20283: DOUBLE
20284: EQUAL
20285: IFTRUE 20289
20287: GO 20300
20289: POP
// b_value = 71 ; nation_american :
20290: LD_ADDR_VAR 0 13
20294: PUSH
20295: LD_INT 71
20297: ST_TO_ADDR
20298: GO 20339
20300: LD_INT 1
20302: DOUBLE
20303: EQUAL
20304: IFTRUE 20308
20306: GO 20319
20308: POP
// b_value = 8 ; nation_arabian :
20309: LD_ADDR_VAR 0 13
20313: PUSH
20314: LD_INT 8
20316: ST_TO_ADDR
20317: GO 20339
20319: LD_INT 2
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20338
20327: POP
// b_value = 41 ; end ;
20328: LD_ADDR_VAR 0 13
20332: PUSH
20333: LD_INT 41
20335: ST_TO_ADDR
20336: GO 20339
20338: POP
// end ; b_ext_rocket :
20339: GO 20953
20341: LD_INT 18
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20426
20349: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20350: LD_EXP 45
20354: PUSH
20355: LD_VAR 0 9
20359: ARRAY
20360: PPUSH
20361: CALL_OW 248
20365: PUSH
20366: LD_INT 3
20368: DOUBLE
20369: EQUAL
20370: IFTRUE 20374
20372: GO 20385
20374: POP
// b_value = 72 ; nation_american :
20375: LD_ADDR_VAR 0 13
20379: PUSH
20380: LD_INT 72
20382: ST_TO_ADDR
20383: GO 20424
20385: LD_INT 1
20387: DOUBLE
20388: EQUAL
20389: IFTRUE 20393
20391: GO 20404
20393: POP
// b_value = 9 ; nation_arabian :
20394: LD_ADDR_VAR 0 13
20398: PUSH
20399: LD_INT 9
20401: ST_TO_ADDR
20402: GO 20424
20404: LD_INT 2
20406: DOUBLE
20407: EQUAL
20408: IFTRUE 20412
20410: GO 20423
20412: POP
// b_value = 42 ; end ;
20413: LD_ADDR_VAR 0 13
20417: PUSH
20418: LD_INT 42
20420: ST_TO_ADDR
20421: GO 20424
20423: POP
// end ; b_ext_noncombat :
20424: GO 20953
20426: LD_INT 19
20428: DOUBLE
20429: EQUAL
20430: IFTRUE 20434
20432: GO 20512
20434: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20435: LD_EXP 45
20439: PUSH
20440: LD_VAR 0 9
20444: ARRAY
20445: PPUSH
20446: CALL_OW 248
20450: PUSH
20451: LD_INT 3
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20470
20459: POP
// b_value = 73 ; nation_american :
20460: LD_ADDR_VAR 0 13
20464: PUSH
20465: LD_INT 73
20467: ST_TO_ADDR
20468: GO 20510
20470: LD_INT 1
20472: DOUBLE
20473: EQUAL
20474: IFTRUE 20478
20476: GO 20489
20478: POP
// b_value = 10 ; nation_arabian :
20479: LD_ADDR_VAR 0 13
20483: PUSH
20484: LD_INT 10
20486: ST_TO_ADDR
20487: GO 20510
20489: LD_INT 2
20491: DOUBLE
20492: EQUAL
20493: IFTRUE 20497
20495: GO 20509
20497: POP
// b_value = - 7 ; end ;
20498: LD_ADDR_VAR 0 13
20502: PUSH
20503: LD_INT 7
20505: NEG
20506: ST_TO_ADDR
20507: GO 20510
20509: POP
// end ; b_ext_radar :
20510: GO 20953
20512: LD_INT 20
20514: DOUBLE
20515: EQUAL
20516: IFTRUE 20520
20518: GO 20598
20520: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20521: LD_EXP 45
20525: PUSH
20526: LD_VAR 0 9
20530: ARRAY
20531: PPUSH
20532: CALL_OW 248
20536: PUSH
20537: LD_INT 3
20539: DOUBLE
20540: EQUAL
20541: IFTRUE 20545
20543: GO 20557
20545: POP
// b_value = - 7 ; nation_american :
20546: LD_ADDR_VAR 0 13
20550: PUSH
20551: LD_INT 7
20553: NEG
20554: ST_TO_ADDR
20555: GO 20596
20557: LD_INT 1
20559: DOUBLE
20560: EQUAL
20561: IFTRUE 20565
20563: GO 20576
20565: POP
// b_value = 11 ; nation_arabian :
20566: LD_ADDR_VAR 0 13
20570: PUSH
20571: LD_INT 11
20573: ST_TO_ADDR
20574: GO 20596
20576: LD_INT 2
20578: DOUBLE
20579: EQUAL
20580: IFTRUE 20584
20582: GO 20595
20584: POP
// b_value = 44 ; end ;
20585: LD_ADDR_VAR 0 13
20589: PUSH
20590: LD_INT 44
20592: ST_TO_ADDR
20593: GO 20596
20595: POP
// end ; b_ext_siberium :
20596: GO 20953
20598: LD_INT 21
20600: DOUBLE
20601: EQUAL
20602: IFTRUE 20606
20604: GO 20683
20606: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20607: LD_EXP 45
20611: PUSH
20612: LD_VAR 0 9
20616: ARRAY
20617: PPUSH
20618: CALL_OW 248
20622: PUSH
20623: LD_INT 3
20625: DOUBLE
20626: EQUAL
20627: IFTRUE 20631
20629: GO 20642
20631: POP
// b_value = 75 ; nation_american :
20632: LD_ADDR_VAR 0 13
20636: PUSH
20637: LD_INT 75
20639: ST_TO_ADDR
20640: GO 20681
20642: LD_INT 1
20644: DOUBLE
20645: EQUAL
20646: IFTRUE 20650
20648: GO 20661
20650: POP
// b_value = 12 ; nation_arabian :
20651: LD_ADDR_VAR 0 13
20655: PUSH
20656: LD_INT 12
20658: ST_TO_ADDR
20659: GO 20681
20661: LD_INT 2
20663: DOUBLE
20664: EQUAL
20665: IFTRUE 20669
20667: GO 20680
20669: POP
// b_value = 45 ; end ;
20670: LD_ADDR_VAR 0 13
20674: PUSH
20675: LD_INT 45
20677: ST_TO_ADDR
20678: GO 20681
20680: POP
// end ; b_ext_stitch :
20681: GO 20953
20683: LD_INT 23
20685: DOUBLE
20686: EQUAL
20687: IFTRUE 20691
20689: GO 20770
20691: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20692: LD_EXP 45
20696: PUSH
20697: LD_VAR 0 9
20701: ARRAY
20702: PPUSH
20703: CALL_OW 248
20707: PUSH
20708: LD_INT 3
20710: DOUBLE
20711: EQUAL
20712: IFTRUE 20716
20714: GO 20728
20716: POP
// b_value = - 7 ; nation_american :
20717: LD_ADDR_VAR 0 13
20721: PUSH
20722: LD_INT 7
20724: NEG
20725: ST_TO_ADDR
20726: GO 20768
20728: LD_INT 1
20730: DOUBLE
20731: EQUAL
20732: IFTRUE 20736
20734: GO 20748
20736: POP
// b_value = - 7 ; nation_arabian :
20737: LD_ADDR_VAR 0 13
20741: PUSH
20742: LD_INT 7
20744: NEG
20745: ST_TO_ADDR
20746: GO 20768
20748: LD_INT 2
20750: DOUBLE
20751: EQUAL
20752: IFTRUE 20756
20754: GO 20767
20756: POP
// b_value = 43 ; end ;
20757: LD_ADDR_VAR 0 13
20761: PUSH
20762: LD_INT 43
20764: ST_TO_ADDR
20765: GO 20768
20767: POP
// end ; b_ext_computer :
20768: GO 20953
20770: LD_INT 24
20772: DOUBLE
20773: EQUAL
20774: IFTRUE 20778
20776: GO 20856
20778: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20779: LD_EXP 45
20783: PUSH
20784: LD_VAR 0 9
20788: ARRAY
20789: PPUSH
20790: CALL_OW 248
20794: PUSH
20795: LD_INT 3
20797: DOUBLE
20798: EQUAL
20799: IFTRUE 20803
20801: GO 20814
20803: POP
// b_value = 76 ; nation_american :
20804: LD_ADDR_VAR 0 13
20808: PUSH
20809: LD_INT 76
20811: ST_TO_ADDR
20812: GO 20854
20814: LD_INT 1
20816: DOUBLE
20817: EQUAL
20818: IFTRUE 20822
20820: GO 20833
20822: POP
// b_value = 15 ; nation_arabian :
20823: LD_ADDR_VAR 0 13
20827: PUSH
20828: LD_INT 15
20830: ST_TO_ADDR
20831: GO 20854
20833: LD_INT 2
20835: DOUBLE
20836: EQUAL
20837: IFTRUE 20841
20839: GO 20853
20841: POP
// b_value = - 7 ; end ;
20842: LD_ADDR_VAR 0 13
20846: PUSH
20847: LD_INT 7
20849: NEG
20850: ST_TO_ADDR
20851: GO 20854
20853: POP
// end ; b_ext_laser :
20854: GO 20953
20856: LD_INT 25
20858: DOUBLE
20859: EQUAL
20860: IFTRUE 20864
20862: GO 20943
20864: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20865: LD_EXP 45
20869: PUSH
20870: LD_VAR 0 9
20874: ARRAY
20875: PPUSH
20876: CALL_OW 248
20880: PUSH
20881: LD_INT 3
20883: DOUBLE
20884: EQUAL
20885: IFTRUE 20889
20887: GO 20901
20889: POP
// b_value = - 7 ; nation_american :
20890: LD_ADDR_VAR 0 13
20894: PUSH
20895: LD_INT 7
20897: NEG
20898: ST_TO_ADDR
20899: GO 20941
20901: LD_INT 1
20903: DOUBLE
20904: EQUAL
20905: IFTRUE 20909
20907: GO 20920
20909: POP
// b_value = 16 ; nation_arabian :
20910: LD_ADDR_VAR 0 13
20914: PUSH
20915: LD_INT 16
20917: ST_TO_ADDR
20918: GO 20941
20920: LD_INT 2
20922: DOUBLE
20923: EQUAL
20924: IFTRUE 20928
20926: GO 20940
20928: POP
// b_value = - 7 ; end ;
20929: LD_ADDR_VAR 0 13
20933: PUSH
20934: LD_INT 7
20936: NEG
20937: ST_TO_ADDR
20938: GO 20941
20940: POP
// end ; else
20941: GO 20953
20943: POP
// b_value = - 42 ; end ;
20944: LD_ADDR_VAR 0 13
20948: PUSH
20949: LD_INT 42
20951: NEG
20952: ST_TO_ADDR
// SetTaskList ( ai_building_constructor [ base ] , [ [ B , ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] , 0 , b_value , ai_upcoming_building_data [ base ] [ 3 ] , 0 ] ] ) ;
20953: LD_EXP 45
20957: PUSH
20958: LD_VAR 0 9
20962: ARRAY
20963: PPUSH
20964: LD_STRING B
20966: PUSH
20967: LD_EXP 46
20971: PUSH
20972: LD_VAR 0 9
20976: ARRAY
20977: PUSH
20978: LD_INT 1
20980: ARRAY
20981: PUSH
20982: LD_EXP 46
20986: PUSH
20987: LD_VAR 0 9
20991: ARRAY
20992: PUSH
20993: LD_INT 2
20995: ARRAY
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: LD_VAR 0 13
21004: PUSH
21005: LD_EXP 46
21009: PUSH
21010: LD_VAR 0 9
21014: ARRAY
21015: PUSH
21016: LD_INT 3
21018: ARRAY
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: PUSH
21032: EMPTY
21033: LIST
21034: PPUSH
21035: CALL_OW 446
// end ; b_depot :
21039: GO 21536
21041: LD_INT 0
21043: DOUBLE
21044: EQUAL
21045: IFTRUE 21049
21047: GO 21098
21049: POP
// begin ComUpgrade ( ai_depot [ base ] ) ;
21050: LD_EXP 34
21054: PUSH
21055: LD_VAR 0 9
21059: ARRAY
21060: PPUSH
21061: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , ai_depot [ base ] ) ;
21065: LD_ADDR_EXP 42
21069: PUSH
21070: LD_EXP 42
21074: PPUSH
21075: LD_VAR 0 9
21079: PPUSH
21080: LD_EXP 34
21084: PUSH
21085: LD_VAR 0 9
21089: ARRAY
21090: PPUSH
21091: CALL_OW 1
21095: ST_TO_ADDR
// end ; b_workshop :
21096: GO 21536
21098: LD_INT 2
21100: DOUBLE
21101: EQUAL
21102: IFTRUE 21106
21104: GO 21183
21106: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21107: LD_ADDR_VAR 0 6
21111: PUSH
21112: LD_EXP 46
21116: PUSH
21117: LD_VAR 0 9
21121: ARRAY
21122: PUSH
21123: LD_INT 1
21125: ARRAY
21126: PPUSH
21127: LD_EXP 46
21131: PUSH
21132: LD_VAR 0 9
21136: ARRAY
21137: PUSH
21138: LD_INT 2
21140: ARRAY
21141: PPUSH
21142: CALL_OW 428
21146: ST_TO_ADDR
// ComUpgrade ( temp_unit ) ;
21147: LD_VAR 0 6
21151: PPUSH
21152: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21156: LD_ADDR_EXP 42
21160: PUSH
21161: LD_EXP 42
21165: PPUSH
21166: LD_VAR 0 9
21170: PPUSH
21171: LD_VAR 0 6
21175: PPUSH
21176: CALL_OW 1
21180: ST_TO_ADDR
// end ; b_lab , b_lab_half :
21181: GO 21536
21183: LD_INT 6
21185: DOUBLE
21186: EQUAL
21187: IFTRUE 21197
21189: LD_INT 7
21191: DOUBLE
21192: EQUAL
21193: IFTRUE 21197
21195: GO 21450
21197: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21198: LD_ADDR_VAR 0 6
21202: PUSH
21203: LD_EXP 46
21207: PUSH
21208: LD_VAR 0 9
21212: ARRAY
21213: PUSH
21214: LD_INT 1
21216: ARRAY
21217: PPUSH
21218: LD_EXP 46
21222: PUSH
21223: LD_VAR 0 9
21227: ARRAY
21228: PUSH
21229: LD_INT 2
21231: ARRAY
21232: PPUSH
21233: CALL_OW 428
21237: ST_TO_ADDR
// if ai_upcoming_building_data [ base ] [ 5 ] <> b_lab_basic and not ai_upcoming_building_data [ base ] [ 5 ] in [ GetLabKind ( temp_unit , 1 ) , GetLabKind ( temp_unit , 2 ) ] then
21238: LD_EXP 46
21242: PUSH
21243: LD_VAR 0 9
21247: ARRAY
21248: PUSH
21249: LD_INT 5
21251: ARRAY
21252: PUSH
21253: LD_INT 9
21255: NONEQUAL
21256: PUSH
21257: LD_EXP 46
21261: PUSH
21262: LD_VAR 0 9
21266: ARRAY
21267: PUSH
21268: LD_INT 5
21270: ARRAY
21271: PUSH
21272: LD_VAR 0 6
21276: PPUSH
21277: LD_INT 1
21279: PPUSH
21280: CALL_OW 268
21284: PUSH
21285: LD_VAR 0 6
21289: PPUSH
21290: LD_INT 2
21292: PPUSH
21293: CALL_OW 268
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: IN
21302: NOT
21303: AND
21304: IFFALSE 21332
// ComUpgradeLab ( temp_unit , ai_upcoming_building_data [ base ] [ 5 ] ) else
21306: LD_VAR 0 6
21310: PPUSH
21311: LD_EXP 46
21315: PUSH
21316: LD_VAR 0 9
21320: ARRAY
21321: PUSH
21322: LD_INT 5
21324: ARRAY
21325: PPUSH
21326: CALL_OW 147
21330: GO 21423
// if ai_upcoming_building_data [ base ] [ 6 ] <> b_lab_basic then
21332: LD_EXP 46
21336: PUSH
21337: LD_VAR 0 9
21341: ARRAY
21342: PUSH
21343: LD_INT 6
21345: ARRAY
21346: PUSH
21347: LD_INT 9
21349: NONEQUAL
21350: IFFALSE 21378
// ComUpgradeLab ( temp_unit , ai_upcoming_building_data [ base ] [ 6 ] ) else
21352: LD_VAR 0 6
21356: PPUSH
21357: LD_EXP 46
21361: PUSH
21362: LD_VAR 0 9
21366: ARRAY
21367: PUSH
21368: LD_INT 6
21370: ARRAY
21371: PPUSH
21372: CALL_OW 147
21376: GO 21423
// begin ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
21378: LD_ADDR_EXP 45
21382: PUSH
21383: LD_EXP 45
21387: PPUSH
21388: LD_VAR 0 9
21392: PPUSH
21393: LD_INT 0
21395: PPUSH
21396: CALL_OW 1
21400: ST_TO_ADDR
// ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , [ ] ) ;
21401: LD_ADDR_EXP 46
21405: PUSH
21406: LD_EXP 46
21410: PPUSH
21411: LD_VAR 0 9
21415: PPUSH
21416: EMPTY
21417: PPUSH
21418: CALL_OW 1
21422: ST_TO_ADDR
// end ; ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21423: LD_ADDR_EXP 42
21427: PUSH
21428: LD_EXP 42
21432: PPUSH
21433: LD_VAR 0 9
21437: PPUSH
21438: LD_VAR 0 6
21442: PPUSH
21443: CALL_OW 1
21447: ST_TO_ADDR
// end ; b_armoury :
21448: GO 21536
21450: LD_INT 4
21452: DOUBLE
21453: EQUAL
21454: IFTRUE 21458
21456: GO 21535
21458: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21459: LD_ADDR_VAR 0 6
21463: PUSH
21464: LD_EXP 46
21468: PUSH
21469: LD_VAR 0 9
21473: ARRAY
21474: PUSH
21475: LD_INT 1
21477: ARRAY
21478: PPUSH
21479: LD_EXP 46
21483: PUSH
21484: LD_VAR 0 9
21488: ARRAY
21489: PUSH
21490: LD_INT 2
21492: ARRAY
21493: PPUSH
21494: CALL_OW 428
21498: ST_TO_ADDR
// ComUpgrade ( temp_unit ) ;
21499: LD_VAR 0 6
21503: PPUSH
21504: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21508: LD_ADDR_EXP 42
21512: PUSH
21513: LD_EXP 42
21517: PPUSH
21518: LD_VAR 0 9
21522: PPUSH
21523: LD_VAR 0 6
21527: PPUSH
21528: CALL_OW 1
21532: ST_TO_ADDR
// end ; end ; end ;
21533: GO 21536
21535: POP
// end ; end ; end ; if ( engineers_list ^ apemen_engineers_list ) > 0 and ai_depot [ base ] > 0 then
21536: LD_VAR 0 3
21540: PUSH
21541: LD_VAR 0 10
21545: ADD
21546: PUSH
21547: LD_INT 0
21549: GREATER
21550: PUSH
21551: LD_EXP 34
21555: PUSH
21556: LD_VAR 0 9
21560: ARRAY
21561: PUSH
21562: LD_INT 0
21564: GREATER
21565: AND
21566: IFFALSE 21650
// begin temp_list = GetListOfCratesInArea ( GetBaseArea ( base ) ) ;
21568: LD_ADDR_VAR 0 4
21572: PUSH
21573: LD_VAR 0 9
21577: PPUSH
21578: CALL 12282 0 1
21582: PPUSH
21583: CALL_OW 435
21587: ST_TO_ADDR
// if temp_list > 0 then
21588: LD_VAR 0 4
21592: PUSH
21593: LD_INT 0
21595: GREATER
21596: IFFALSE 21650
// begin ComCollect ( GetHumansOutOfUnits ( engineers_list ^ apemen_engineers_list ) , temp_list [ 1 ] , temp_list [ 2 ] ) ;
21598: LD_VAR 0 3
21602: PUSH
21603: LD_VAR 0 10
21607: ADD
21608: PPUSH
21609: CALL 23168 0 1
21613: PPUSH
21614: LD_VAR 0 4
21618: PUSH
21619: LD_INT 1
21621: ARRAY
21622: PPUSH
21623: LD_VAR 0 4
21627: PUSH
21628: LD_INT 2
21630: ARRAY
21631: PPUSH
21632: CALL_OW 117
// engineers_list = [ ] ;
21636: LD_ADDR_VAR 0 3
21640: PUSH
21641: EMPTY
21642: ST_TO_ADDR
// apemen_engineers_list = [ ] ;
21643: LD_ADDR_VAR 0 10
21647: PUSH
21648: EMPTY
21649: ST_TO_ADDR
// end ; end ; end ; DistributeHumansToBuildings ( base , engineers_list ^ apemen_engineers_list , UnitFilter ( ai_depot [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_engineer , 6 , false , false ) ;
21650: LD_VAR 0 9
21654: PPUSH
21655: LD_VAR 0 3
21659: PUSH
21660: LD_VAR 0 10
21664: ADD
21665: PPUSH
21666: LD_EXP 34
21670: PUSH
21671: LD_VAR 0 9
21675: ARRAY
21676: PPUSH
21677: LD_INT 50
21679: PUSH
21680: EMPTY
21681: LIST
21682: PUSH
21683: LD_INT 3
21685: PUSH
21686: LD_INT 57
21688: PUSH
21689: EMPTY
21690: LIST
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 72
21704: PPUSH
21705: LD_INT 2
21707: PPUSH
21708: LD_INT 6
21710: PPUSH
21711: LD_INT 0
21713: PPUSH
21714: LD_INT 0
21716: PPUSH
21717: CALL 15239 0 7
// if crane_usable and ai_crane [ base ] <> ai_building_constructor [ base ] then
21721: LD_VAR 0 12
21725: PUSH
21726: LD_EXP 70
21730: PUSH
21731: LD_VAR 0 9
21735: ARRAY
21736: PUSH
21737: LD_EXP 45
21741: PUSH
21742: LD_VAR 0 9
21746: ARRAY
21747: NONEQUAL
21748: AND
21749: IFFALSE 21824
// if not IsInArea ( ai_crane [ base ] , GetBaseArea ( base ) ) then
21751: LD_EXP 70
21755: PUSH
21756: LD_VAR 0 9
21760: ARRAY
21761: PPUSH
21762: LD_VAR 0 9
21766: PPUSH
21767: CALL 12282 0 1
21771: PPUSH
21772: CALL_OW 308
21776: NOT
21777: IFFALSE 21824
// ComMoveXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
21779: LD_EXP 70
21783: PUSH
21784: LD_VAR 0 9
21788: ARRAY
21789: PPUSH
21790: LD_EXP 41
21794: PUSH
21795: LD_VAR 0 9
21799: ARRAY
21800: PUSH
21801: LD_INT 1
21803: ARRAY
21804: PPUSH
21805: LD_EXP 41
21809: PUSH
21810: LD_VAR 0 9
21814: ARRAY
21815: PUSH
21816: LD_INT 2
21818: ARRAY
21819: PPUSH
21820: CALL_OW 111
// end ;
21824: GO 16591
21826: POP
21827: POP
// until false ;
21828: LD_INT 0
21830: IFFALSE 16574
// end ;
21832: PPOPN 15
21834: END
// on BuildingStarted ( building , builder ) do var side , temp_list , base , i ;
21835: LD_INT 0
21837: PPUSH
21838: PPUSH
21839: PPUSH
21840: PPUSH
// begin side = GetSide ( building ) ;
21841: LD_ADDR_VAR 0 3
21845: PUSH
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 255
21855: ST_TO_ADDR
// if side = you then
21856: LD_VAR 0 3
21860: PUSH
21861: LD_EXP 2
21865: EQUAL
21866: IFFALSE 21870
// exit ;
21868: GO 21945
// base = FindBase ( building ) ;
21870: LD_ADDR_VAR 0 5
21874: PUSH
21875: LD_VAR 0 1
21879: PPUSH
21880: CALL 12501 0 1
21884: ST_TO_ADDR
// if base = 0 then
21885: LD_VAR 0 5
21889: PUSH
21890: LD_INT 0
21892: EQUAL
21893: IFFALSE 21897
// exit ;
21895: GO 21945
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
21897: LD_ADDR_EXP 45
21901: PUSH
21902: LD_EXP 45
21906: PPUSH
21907: LD_VAR 0 5
21911: PPUSH
21912: LD_INT 0
21914: PPUSH
21915: CALL_OW 1
21919: ST_TO_ADDR
// ai_building_under_construction = Replace ( ai_building_under_construction , base , building ) ;
21920: LD_ADDR_EXP 42
21924: PUSH
21925: LD_EXP 42
21929: PPUSH
21930: LD_VAR 0 5
21934: PPUSH
21935: LD_VAR 0 1
21939: PPUSH
21940: CALL_OW 1
21944: ST_TO_ADDR
// end ;
21945: PPOPN 6
21947: END
// on BuildingComplete ( building ) do var side , temp_list , temp_unit , base , i ;
21948: LD_INT 0
21950: PPUSH
21951: PPUSH
21952: PPUSH
21953: PPUSH
21954: PPUSH
// begin side = GetSide ( building ) ;
21955: LD_ADDR_VAR 0 2
21959: PUSH
21960: LD_VAR 0 1
21964: PPUSH
21965: CALL_OW 255
21969: ST_TO_ADDR
// if side = you then
21970: LD_VAR 0 2
21974: PUSH
21975: LD_EXP 2
21979: EQUAL
21980: IFFALSE 21984
// exit ;
21982: GO 22089
// base = FindBase ( building ) ;
21984: LD_ADDR_VAR 0 5
21988: PUSH
21989: LD_VAR 0 1
21993: PPUSH
21994: CALL 12501 0 1
21998: ST_TO_ADDR
// if base = 0 then
21999: LD_VAR 0 5
22003: PUSH
22004: LD_INT 0
22006: EQUAL
22007: IFFALSE 22011
// exit ;
22009: GO 22089
// BuildUpgradeCommon ( base , building ) ;
22011: LD_VAR 0 5
22015: PPUSH
22016: LD_VAR 0 1
22020: PPUSH
22021: CALL 22170 0 2
// temp_list = ai_all_buildings [ base ] ^ building ;
22025: LD_ADDR_VAR 0 3
22029: PUSH
22030: LD_EXP 44
22034: PUSH
22035: LD_VAR 0 5
22039: ARRAY
22040: PUSH
22041: LD_VAR 0 1
22045: ADD
22046: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
22047: LD_ADDR_EXP 44
22051: PUSH
22052: LD_EXP 44
22056: PPUSH
22057: LD_VAR 0 5
22061: PPUSH
22062: LD_VAR 0 3
22066: PPUSH
22067: CALL_OW 1
22071: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , building , true ) ;
22072: LD_VAR 0 5
22076: PPUSH
22077: LD_VAR 0 1
22081: PPUSH
22082: LD_INT 1
22084: PPUSH
22085: CALL 7009 0 3
// end ;
22089: PPOPN 6
22091: END
// on UpgradeComplete ( building ) do var side , temp_list , base ;
22092: LD_INT 0
22094: PPUSH
22095: PPUSH
22096: PPUSH
// begin side = GetSide ( building ) ;
22097: LD_ADDR_VAR 0 2
22101: PUSH
22102: LD_VAR 0 1
22106: PPUSH
22107: CALL_OW 255
22111: ST_TO_ADDR
// if side = you then
22112: LD_VAR 0 2
22116: PUSH
22117: LD_EXP 2
22121: EQUAL
22122: IFFALSE 22126
// exit ;
22124: GO 22167
// base = FindBase ( building ) ;
22126: LD_ADDR_VAR 0 4
22130: PUSH
22131: LD_VAR 0 1
22135: PPUSH
22136: CALL 12501 0 1
22140: ST_TO_ADDR
// if base = 0 then
22141: LD_VAR 0 4
22145: PUSH
22146: LD_INT 0
22148: EQUAL
22149: IFFALSE 22153
// exit ;
22151: GO 22167
// BuildUpgradeCommon ( base , building ) ;
22153: LD_VAR 0 4
22157: PPUSH
22158: LD_VAR 0 1
22162: PPUSH
22163: CALL 22170 0 2
// end ;
22167: PPOPN 4
22169: END
// function BuildUpgradeCommon ( base , building ) ; begin
22170: LD_INT 0
22172: PPUSH
// if GetBType ( building ) = ai_upcoming_building_data [ base ] [ 4 ] then
22173: LD_VAR 0 2
22177: PPUSH
22178: CALL_OW 266
22182: PUSH
22183: LD_EXP 46
22187: PUSH
22188: LD_VAR 0 1
22192: ARRAY
22193: PUSH
22194: LD_INT 4
22196: ARRAY
22197: EQUAL
22198: IFFALSE 22222
// ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , [ ] ) ;
22200: LD_ADDR_EXP 46
22204: PUSH
22205: LD_EXP 46
22209: PPUSH
22210: LD_VAR 0 1
22214: PPUSH
22215: EMPTY
22216: PPUSH
22217: CALL_OW 1
22221: ST_TO_ADDR
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
22222: LD_ADDR_EXP 42
22226: PUSH
22227: LD_EXP 42
22231: PPUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: LD_INT 0
22239: PPUSH
22240: CALL_OW 1
22244: ST_TO_ADDR
// end ;
22245: LD_VAR 0 3
22249: RET
// on BuildingCaptured ( captured_building , building_former_side , capturing_unit ) do var temp_list , base ;
22250: LD_INT 0
22252: PPUSH
22253: PPUSH
// begin if captured_building in ai_depot then
22254: LD_VAR 0 1
22258: PUSH
22259: LD_EXP 34
22263: IN
22264: IFFALSE 22579
// begin case captured_building of ai_depot [ 1 ] :
22266: LD_VAR 0 1
22270: PUSH
22271: LD_EXP 34
22275: PUSH
22276: LD_INT 1
22278: ARRAY
22279: DOUBLE
22280: EQUAL
22281: IFTRUE 22285
22283: GO 22380
22285: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22286: LD_VAR 0 1
22290: PPUSH
22291: CALL_OW 274
22295: PPUSH
22296: LD_INT 1
22298: PPUSH
22299: LD_INT 200
22301: PUSH
22302: LD_INT 0
22304: PPUSH
22305: LD_INT 7
22307: PPUSH
22308: CALL_OW 12
22312: PUSH
22313: LD_INT 10
22315: MUL
22316: PLUS
22317: PPUSH
22318: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 0 ) ;
22322: LD_VAR 0 1
22326: PPUSH
22327: CALL_OW 274
22331: PPUSH
22332: LD_INT 2
22334: PPUSH
22335: LD_INT 0
22337: PPUSH
22338: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22342: LD_VAR 0 1
22346: PPUSH
22347: CALL_OW 274
22351: PPUSH
22352: LD_INT 3
22354: PPUSH
22355: LD_INT 80
22357: PUSH
22358: LD_INT 0
22360: PPUSH
22361: LD_INT 10
22363: PPUSH
22364: CALL_OW 12
22368: PUSH
22369: LD_INT 5
22371: MUL
22372: PLUS
22373: PPUSH
22374: CALL_OW 277
// end ; ai_depot [ 2 ] :
22378: GO 22579
22380: LD_EXP 34
22384: PUSH
22385: LD_INT 2
22387: ARRAY
22388: DOUBLE
22389: EQUAL
22390: IFTRUE 22394
22392: GO 22457
22394: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 100 ) ;
22395: LD_VAR 0 1
22399: PPUSH
22400: CALL_OW 274
22404: PPUSH
22405: LD_INT 1
22407: PPUSH
22408: LD_INT 100
22410: PPUSH
22411: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 55 ) ;
22415: LD_VAR 0 1
22419: PPUSH
22420: CALL_OW 274
22424: PPUSH
22425: LD_INT 2
22427: PPUSH
22428: LD_INT 55
22430: PPUSH
22431: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 20 ) ;
22435: LD_VAR 0 1
22439: PPUSH
22440: CALL_OW 274
22444: PPUSH
22445: LD_INT 3
22447: PPUSH
22448: LD_INT 20
22450: PPUSH
22451: CALL_OW 277
// end ; ai_depot [ 3 ] :
22455: GO 22579
22457: LD_EXP 34
22461: PUSH
22462: LD_INT 3
22464: ARRAY
22465: DOUBLE
22466: EQUAL
22467: IFTRUE 22471
22469: GO 22578
22471: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 274
22481: PPUSH
22482: LD_INT 1
22484: PPUSH
22485: LD_INT 200
22487: PUSH
22488: LD_INT 0
22490: PPUSH
22491: LD_INT 7
22493: PPUSH
22494: CALL_OW 12
22498: PUSH
22499: LD_INT 10
22501: MUL
22502: PLUS
22503: PPUSH
22504: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 400 + Rand ( 0 , 100 ) ) ;
22508: LD_VAR 0 1
22512: PPUSH
22513: CALL_OW 274
22517: PPUSH
22518: LD_INT 2
22520: PPUSH
22521: LD_INT 400
22523: PUSH
22524: LD_INT 0
22526: PPUSH
22527: LD_INT 100
22529: PPUSH
22530: CALL_OW 12
22534: PLUS
22535: PPUSH
22536: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22540: LD_VAR 0 1
22544: PPUSH
22545: CALL_OW 274
22549: PPUSH
22550: LD_INT 3
22552: PPUSH
22553: LD_INT 80
22555: PUSH
22556: LD_INT 0
22558: PPUSH
22559: LD_INT 10
22561: PPUSH
22562: CALL_OW 12
22566: PUSH
22567: LD_INT 5
22569: MUL
22570: PLUS
22571: PPUSH
22572: CALL_OW 277
// end ; end ;
22576: GO 22579
22578: POP
// end ; base = FindBase ( captured_building ) ;
22579: LD_ADDR_VAR 0 5
22583: PUSH
22584: LD_VAR 0 1
22588: PPUSH
22589: CALL 12501 0 1
22593: ST_TO_ADDR
// if base = 0 then
22594: LD_VAR 0 5
22598: PUSH
22599: LD_INT 0
22601: EQUAL
22602: IFFALSE 22606
// exit ;
22604: GO 22837
// if building_former_side = GetBaseSide ( base ) then
22606: LD_VAR 0 2
22610: PUSH
22611: LD_VAR 0 5
22615: PPUSH
22616: CALL 12353 0 1
22620: EQUAL
22621: IFFALSE 22704
// begin if captured_building in ai_all_buildings [ base ] then
22623: LD_VAR 0 1
22627: PUSH
22628: LD_EXP 44
22632: PUSH
22633: LD_VAR 0 5
22637: ARRAY
22638: IN
22639: IFFALSE 22702
// begin RemoveBuildingFromVariables ( base , captured_building ) ;
22641: LD_VAR 0 5
22645: PPUSH
22646: LD_VAR 0 1
22650: PPUSH
22651: CALL 10980 0 2
// temp_list = ai_captured_buildings [ base ] ^ captured_building ;
22655: LD_ADDR_VAR 0 4
22659: PUSH
22660: LD_EXP 78
22664: PUSH
22665: LD_VAR 0 5
22669: ARRAY
22670: PUSH
22671: LD_VAR 0 1
22675: ADD
22676: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
22677: LD_ADDR_EXP 78
22681: PUSH
22682: LD_EXP 78
22686: PPUSH
22687: LD_VAR 0 5
22691: PPUSH
22692: LD_VAR 0 4
22696: PPUSH
22697: CALL_OW 1
22701: ST_TO_ADDR
// end ; end else
22702: GO 22837
// begin if GetSide ( captured_building ) = GetBaseSide ( base ) then
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 255
22713: PUSH
22714: LD_VAR 0 5
22718: PPUSH
22719: CALL 12353 0 1
22723: EQUAL
22724: IFFALSE 22837
// begin temp_list = ai_all_buildings [ base ] ^ captured_building ;
22726: LD_ADDR_VAR 0 4
22730: PUSH
22731: LD_EXP 44
22735: PUSH
22736: LD_VAR 0 5
22740: ARRAY
22741: PUSH
22742: LD_VAR 0 1
22746: ADD
22747: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
22748: LD_ADDR_EXP 44
22752: PUSH
22753: LD_EXP 44
22757: PPUSH
22758: LD_VAR 0 5
22762: PPUSH
22763: LD_VAR 0 4
22767: PPUSH
22768: CALL_OW 1
22772: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , captured_building , true ) ;
22773: LD_VAR 0 5
22777: PPUSH
22778: LD_VAR 0 1
22782: PPUSH
22783: LD_INT 1
22785: PPUSH
22786: CALL 7009 0 3
// temp_list = ai_captured_buildings [ base ] diff captured_building ;
22790: LD_ADDR_VAR 0 4
22794: PUSH
22795: LD_EXP 78
22799: PUSH
22800: LD_VAR 0 5
22804: ARRAY
22805: PUSH
22806: LD_VAR 0 1
22810: DIFF
22811: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
22812: LD_ADDR_EXP 78
22816: PUSH
22817: LD_EXP 78
22821: PPUSH
22822: LD_VAR 0 5
22826: PPUSH
22827: LD_VAR 0 4
22831: PPUSH
22832: CALL_OW 1
22836: ST_TO_ADDR
// end ; end ; end ;
22837: PPOPN 5
22839: END
// on UnitGoesToRed ( un ) do begin if un in ai_depot then
22840: LD_VAR 0 1
22844: PUSH
22845: LD_EXP 34
22849: IN
22850: IFFALSE 23165
// begin case un of ai_depot [ 1 ] :
22852: LD_VAR 0 1
22856: PUSH
22857: LD_EXP 34
22861: PUSH
22862: LD_INT 1
22864: ARRAY
22865: DOUBLE
22866: EQUAL
22867: IFTRUE 22871
22869: GO 22966
22871: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22872: LD_VAR 0 1
22876: PPUSH
22877: CALL_OW 274
22881: PPUSH
22882: LD_INT 1
22884: PPUSH
22885: LD_INT 200
22887: PUSH
22888: LD_INT 0
22890: PPUSH
22891: LD_INT 7
22893: PPUSH
22894: CALL_OW 12
22898: PUSH
22899: LD_INT 10
22901: MUL
22902: PLUS
22903: PPUSH
22904: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 0 ) ;
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL_OW 274
22917: PPUSH
22918: LD_INT 2
22920: PPUSH
22921: LD_INT 0
22923: PPUSH
22924: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22928: LD_VAR 0 1
22932: PPUSH
22933: CALL_OW 274
22937: PPUSH
22938: LD_INT 3
22940: PPUSH
22941: LD_INT 80
22943: PUSH
22944: LD_INT 0
22946: PPUSH
22947: LD_INT 10
22949: PPUSH
22950: CALL_OW 12
22954: PUSH
22955: LD_INT 5
22957: MUL
22958: PLUS
22959: PPUSH
22960: CALL_OW 277
// end ; ai_depot [ 2 ] :
22964: GO 23165
22966: LD_EXP 34
22970: PUSH
22971: LD_INT 2
22973: ARRAY
22974: DOUBLE
22975: EQUAL
22976: IFTRUE 22980
22978: GO 23043
22980: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 100 ) ;
22981: LD_VAR 0 1
22985: PPUSH
22986: CALL_OW 274
22990: PPUSH
22991: LD_INT 1
22993: PPUSH
22994: LD_INT 100
22996: PPUSH
22997: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 55 ) ;
23001: LD_VAR 0 1
23005: PPUSH
23006: CALL_OW 274
23010: PPUSH
23011: LD_INT 2
23013: PPUSH
23014: LD_INT 55
23016: PPUSH
23017: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 20 ) ;
23021: LD_VAR 0 1
23025: PPUSH
23026: CALL_OW 274
23030: PPUSH
23031: LD_INT 3
23033: PPUSH
23034: LD_INT 20
23036: PPUSH
23037: CALL_OW 277
// end ; ai_depot [ 3 ] :
23041: GO 23165
23043: LD_EXP 34
23047: PUSH
23048: LD_INT 3
23050: ARRAY
23051: DOUBLE
23052: EQUAL
23053: IFTRUE 23057
23055: GO 23164
23057: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 274
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: LD_INT 200
23073: PUSH
23074: LD_INT 0
23076: PPUSH
23077: LD_INT 7
23079: PPUSH
23080: CALL_OW 12
23084: PUSH
23085: LD_INT 10
23087: MUL
23088: PLUS
23089: PPUSH
23090: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 400 + Rand ( 0 , 100 ) ) ;
23094: LD_VAR 0 1
23098: PPUSH
23099: CALL_OW 274
23103: PPUSH
23104: LD_INT 2
23106: PPUSH
23107: LD_INT 400
23109: PUSH
23110: LD_INT 0
23112: PPUSH
23113: LD_INT 100
23115: PPUSH
23116: CALL_OW 12
23120: PLUS
23121: PPUSH
23122: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 274
23135: PPUSH
23136: LD_INT 3
23138: PPUSH
23139: LD_INT 80
23141: PUSH
23142: LD_INT 0
23144: PPUSH
23145: LD_INT 10
23147: PPUSH
23148: CALL_OW 12
23152: PUSH
23153: LD_INT 5
23155: MUL
23156: PLUS
23157: PPUSH
23158: CALL_OW 277
// end ; end ;
23162: GO 23165
23164: POP
// end ; end ;
23165: PPOPN 1
23167: END
// export function GetHumansOutOfUnits ( un_list ) ; var i ; begin
23168: LD_INT 0
23170: PPUSH
23171: PPUSH
// result = [ ] ;
23172: LD_ADDR_VAR 0 2
23176: PUSH
23177: EMPTY
23178: ST_TO_ADDR
// for i in un_list do
23179: LD_ADDR_VAR 0 3
23183: PUSH
23184: LD_VAR 0 1
23188: PUSH
23189: FOR_IN
23190: IFFALSE 23266
// case GetType ( IsInUnit ( i ) ) of unit_building :
23192: LD_VAR 0 3
23196: PPUSH
23197: CALL_OW 310
23201: PPUSH
23202: CALL_OW 247
23206: PUSH
23207: LD_INT 3
23209: DOUBLE
23210: EQUAL
23211: IFTRUE 23215
23213: GO 23227
23215: POP
// ComExitBuilding ( i ) ; unit_vehicle :
23216: LD_VAR 0 3
23220: PPUSH
23221: CALL_OW 122
23225: GO 23264
23227: LD_INT 2
23229: DOUBLE
23230: EQUAL
23231: IFTRUE 23235
23233: GO 23247
23235: POP
// ComExitVehicle ( i ) ; else
23236: LD_VAR 0 3
23240: PPUSH
23241: CALL_OW 121
23245: GO 23264
23247: POP
// result = result ^ i ; end ;
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_VAR 0 2
23257: PUSH
23258: LD_VAR 0 3
23262: ADD
23263: ST_TO_ADDR
23264: GO 23189
23266: POP
23267: POP
// end ;
23268: LD_VAR 0 2
23272: RET
// export function BaseUnderAttack ( base , attack_side ) ; var area , i , val , def_side , temp_list ; begin
23273: LD_INT 0
23275: PPUSH
23276: PPUSH
23277: PPUSH
23278: PPUSH
23279: PPUSH
23280: PPUSH
// result = false ;
23281: LD_ADDR_VAR 0 3
23285: PUSH
23286: LD_INT 0
23288: ST_TO_ADDR
// def_side = GetBaseSide ( base ) ;
23289: LD_ADDR_VAR 0 7
23293: PUSH
23294: LD_VAR 0 1
23298: PPUSH
23299: CALL 12353 0 1
23303: ST_TO_ADDR
// area = GetBaseArea ( base ) ;
23304: LD_ADDR_VAR 0 4
23308: PUSH
23309: LD_VAR 0 1
23313: PPUSH
23314: CALL 12282 0 1
23318: ST_TO_ADDR
// if attack_side = def_side then
23319: LD_VAR 0 2
23323: PUSH
23324: LD_VAR 0 7
23328: EQUAL
23329: IFFALSE 23333
// exit ;
23331: GO 23852
// if attack_side = - 1 then
23333: LD_VAR 0 2
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: EQUAL
23342: IFFALSE 23608
// begin if FilterAllUnits ( [ [ f_enemy , def_side ] , [ f_inarea , area ] ] ) > 0 then
23344: LD_INT 81
23346: PUSH
23347: LD_VAR 0 7
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 95
23358: PUSH
23359: LD_VAR 0 4
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PPUSH
23372: CALL_OW 69
23376: PUSH
23377: LD_INT 0
23379: GREATER
23380: IFFALSE 23392
// begin result = true ;
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_INT 1
23389: ST_TO_ADDR
// exit ;
23390: GO 23852
// end ; val = true ;
23392: LD_ADDR_VAR 0 6
23396: PUSH
23397: LD_INT 1
23399: ST_TO_ADDR
// for i in ai_contact_time [ def_side ] do
23400: LD_ADDR_VAR 0 5
23404: PUSH
23405: LD_EXP 75
23409: PUSH
23410: LD_VAR 0 7
23414: ARRAY
23415: PUSH
23416: FOR_IN
23417: IFFALSE 23441
// if i < 0 0$10 then
23419: LD_VAR 0 5
23423: PUSH
23424: LD_INT 350
23426: LESS
23427: IFFALSE 23439
// begin val = false ;
23429: LD_ADDR_VAR 0 6
23433: PUSH
23434: LD_INT 0
23436: ST_TO_ADDR
// break ;
23437: GO 23441
// end ;
23439: GO 23416
23441: POP
23442: POP
// if ContactTime ( def_side ) >= 0 0$10 and val then
23443: LD_VAR 0 7
23447: PPUSH
23448: CALL_OW 462
23452: PUSH
23453: LD_INT 350
23455: GREATEREQUAL
23456: PUSH
23457: LD_VAR 0 6
23461: AND
23462: IFFALSE 23466
// exit ;
23464: GO 23852
// temp_list = [ ] ;
23466: LD_ADDR_VAR 0 8
23470: PUSH
23471: EMPTY
23472: ST_TO_ADDR
// for i in ( ai_bases diff base ) do
23473: LD_ADDR_VAR 0 5
23477: PUSH
23478: LD_EXP 58
23482: PUSH
23483: LD_VAR 0 1
23487: DIFF
23488: PUSH
23489: FOR_IN
23490: IFFALSE 23536
// temp_list = Insert ( temp_list , 1 , [ f_not , [ f_inarea , GetBaseArea ( i ) ] ] ) ;
23492: LD_ADDR_VAR 0 8
23496: PUSH
23497: LD_VAR 0 8
23501: PPUSH
23502: LD_INT 1
23504: PPUSH
23505: LD_INT 3
23507: PUSH
23508: LD_INT 95
23510: PUSH
23511: LD_VAR 0 5
23515: PPUSH
23516: CALL 12282 0 1
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PPUSH
23529: CALL_OW 2
23533: ST_TO_ADDR
23534: GO 23489
23536: POP
23537: POP
// temp_list = FilterAllUnits ( [ [ f_enemy , def_side ] , [ f_not , [ f_type , unit_building ] ] ] ^ temp_list ) ;
23538: LD_ADDR_VAR 0 8
23542: PUSH
23543: LD_INT 81
23545: PUSH
23546: LD_VAR 0 7
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: LD_INT 21
23560: PUSH
23561: LD_INT 3
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_VAR 0 8
23580: ADD
23581: PPUSH
23582: CALL_OW 69
23586: ST_TO_ADDR
// if not AnyNearBaseArea ( temp_list , base ) then
23587: LD_VAR 0 8
23591: PPUSH
23592: LD_VAR 0 1
23596: PPUSH
23597: CALL 23928 0 2
23601: NOT
23602: IFFALSE 23606
// exit ;
23604: GO 23852
// end else
23606: GO 23844
// begin if FilterAllUnits ( [ [ f_side , attack_side ] , [ f_inarea , area ] ] ) > 0 then
23608: LD_INT 22
23610: PUSH
23611: LD_VAR 0 2
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 95
23622: PUSH
23623: LD_VAR 0 4
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PPUSH
23636: CALL_OW 69
23640: PUSH
23641: LD_INT 0
23643: GREATER
23644: IFFALSE 23656
// begin result = true ;
23646: LD_ADDR_VAR 0 3
23650: PUSH
23651: LD_INT 1
23653: ST_TO_ADDR
// exit ;
23654: GO 23852
// end ; if ContactTime ( [ def_side , attack_side ] ) >= 0 0$10 and ai_contact_time [ def_side ] [ attack_side ] >= 0 0$10 then
23656: LD_VAR 0 7
23660: PUSH
23661: LD_VAR 0 2
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PPUSH
23670: CALL_OW 462
23674: PUSH
23675: LD_INT 350
23677: GREATEREQUAL
23678: PUSH
23679: LD_EXP 75
23683: PUSH
23684: LD_VAR 0 7
23688: ARRAY
23689: PUSH
23690: LD_VAR 0 2
23694: ARRAY
23695: PUSH
23696: LD_INT 350
23698: GREATEREQUAL
23699: AND
23700: IFFALSE 23704
// exit ;
23702: GO 23852
// temp_list = [ ] ;
23704: LD_ADDR_VAR 0 8
23708: PUSH
23709: EMPTY
23710: ST_TO_ADDR
// for i in ( ai_bases diff base ) do
23711: LD_ADDR_VAR 0 5
23715: PUSH
23716: LD_EXP 58
23720: PUSH
23721: LD_VAR 0 1
23725: DIFF
23726: PUSH
23727: FOR_IN
23728: IFFALSE 23774
// temp_list = Insert ( temp_list , 1 , [ f_not , [ f_inarea , GetBaseArea ( i ) ] ] ) ;
23730: LD_ADDR_VAR 0 8
23734: PUSH
23735: LD_VAR 0 8
23739: PPUSH
23740: LD_INT 1
23742: PPUSH
23743: LD_INT 3
23745: PUSH
23746: LD_INT 95
23748: PUSH
23749: LD_VAR 0 5
23753: PPUSH
23754: CALL 12282 0 1
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PPUSH
23767: CALL_OW 2
23771: ST_TO_ADDR
23772: GO 23727
23774: POP
23775: POP
// temp_list = FilterAllUnits ( [ [ f_side , attack_side ] , [ f_not , [ f_type , unit_building ] ] ] ^ temp_list ) ;
23776: LD_ADDR_VAR 0 8
23780: PUSH
23781: LD_INT 22
23783: PUSH
23784: LD_VAR 0 2
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 3
23795: PUSH
23796: LD_INT 21
23798: PUSH
23799: LD_INT 3
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_VAR 0 8
23818: ADD
23819: PPUSH
23820: CALL_OW 69
23824: ST_TO_ADDR
// if not AnyNearBaseArea ( temp_list , base ) then
23825: LD_VAR 0 8
23829: PPUSH
23830: LD_VAR 0 1
23834: PPUSH
23835: CALL 23928 0 2
23839: NOT
23840: IFFALSE 23844
// exit ;
23842: GO 23852
// end ; result = true ;
23844: LD_ADDR_VAR 0 3
23848: PUSH
23849: LD_INT 1
23851: ST_TO_ADDR
// end ;
23852: LD_VAR 0 3
23856: RET
// export function ListFilterNearArea ( list , area ) ; var i ; begin
23857: LD_INT 0
23859: PPUSH
23860: PPUSH
// result = [ ] ;
23861: LD_ADDR_VAR 0 3
23865: PUSH
23866: EMPTY
23867: ST_TO_ADDR
// for i in list do
23868: LD_ADDR_VAR 0 4
23872: PUSH
23873: LD_VAR 0 1
23877: PUSH
23878: FOR_IN
23879: IFFALSE 23921
// if GetDistUnitArea ( i , area ) <= ai_near_base_dist then
23881: LD_VAR 0 4
23885: PPUSH
23886: LD_VAR 0 2
23890: PPUSH
23891: CALL_OW 299
23895: PUSH
23896: LD_EXP 52
23900: LESSEQUAL
23901: IFFALSE 23919
// result = result ^ i ;
23903: LD_ADDR_VAR 0 3
23907: PUSH
23908: LD_VAR 0 3
23912: PUSH
23913: LD_VAR 0 4
23917: ADD
23918: ST_TO_ADDR
23919: GO 23878
23921: POP
23922: POP
// end ;
23923: LD_VAR 0 3
23927: RET
// function AnyNearBaseArea ( list , base ) ; var i , area ; begin
23928: LD_INT 0
23930: PPUSH
23931: PPUSH
23932: PPUSH
// result = false ;
23933: LD_ADDR_VAR 0 3
23937: PUSH
23938: LD_INT 0
23940: ST_TO_ADDR
// area = GetBaseArea ( base ) ;
23941: LD_ADDR_VAR 0 5
23945: PUSH
23946: LD_VAR 0 2
23950: PPUSH
23951: CALL 12282 0 1
23955: ST_TO_ADDR
// for i in list do
23956: LD_ADDR_VAR 0 4
23960: PUSH
23961: LD_VAR 0 1
23965: PUSH
23966: FOR_IN
23967: IFFALSE 24003
// if GetDistUnitArea ( i , area ) <= ai_near_base_dist then
23969: LD_VAR 0 4
23973: PPUSH
23974: LD_VAR 0 5
23978: PPUSH
23979: CALL_OW 299
23983: PUSH
23984: LD_EXP 52
23988: LESSEQUAL
23989: IFFALSE 24001
// begin result = true ;
23991: LD_ADDR_VAR 0 3
23995: PUSH
23996: LD_INT 1
23998: ST_TO_ADDR
// break ;
23999: GO 24003
// end ;
24001: GO 23966
24003: POP
24004: POP
// end ;
24005: LD_VAR 0 3
24009: RET
// on Command ( com ) do var i , temp_list , hex_list , un , k , target_hex ;
24010: LD_INT 0
24012: PPUSH
24013: PPUSH
24014: PPUSH
24015: PPUSH
24016: PPUSH
24017: PPUSH
// begin CheckCamerasOnCommand ( com ) ;
24018: LD_VAR 0 1
24022: PPUSH
24023: CALL 44883 0 1
// if com = 124 then
24027: LD_VAR 0 1
24031: PUSH
24032: LD_INT 124
24034: EQUAL
24035: IFFALSE 24446
// begin for i in FilterAllUnits ( [ f_side , you ] ) do
24037: LD_ADDR_VAR 0 2
24041: PUSH
24042: LD_INT 22
24044: PUSH
24045: LD_EXP 2
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PPUSH
24054: CALL_OW 69
24058: PUSH
24059: FOR_IN
24060: IFFALSE 24444
// if IsSelected ( i ) and HasTask ( i ) then
24062: LD_VAR 0 2
24066: PPUSH
24067: CALL_OW 306
24071: PUSH
24072: LD_VAR 0 2
24076: PPUSH
24077: CALL_OW 314
24081: AND
24082: IFFALSE 24442
// begin target_hex = [ ] ;
24084: LD_ADDR_VAR 0 7
24088: PUSH
24089: EMPTY
24090: ST_TO_ADDR
// for k in GetTaskList ( i ) do
24091: LD_ADDR_VAR 0 6
24095: PUSH
24096: LD_VAR 0 2
24100: PPUSH
24101: CALL_OW 437
24105: PUSH
24106: FOR_IN
24107: IFFALSE 24154
// if k [ 1 ] = | then
24109: LD_VAR 0 6
24113: PUSH
24114: LD_INT 1
24116: ARRAY
24117: PUSH
24118: LD_STRING |
24120: EQUAL
24121: IFFALSE 24152
// begin target_hex = [ k [ 2 ] , k [ 3 ] ] ;
24123: LD_ADDR_VAR 0 7
24127: PUSH
24128: LD_VAR 0 6
24132: PUSH
24133: LD_INT 2
24135: ARRAY
24136: PUSH
24137: LD_VAR 0 6
24141: PUSH
24142: LD_INT 3
24144: ARRAY
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: ST_TO_ADDR
// break ;
24150: GO 24154
// end ;
24152: GO 24106
24154: POP
24155: POP
// if target_hex > 0 then
24156: LD_VAR 0 7
24160: PUSH
24161: LD_INT 0
24163: GREATER
24164: IFFALSE 24442
// begin hex_list = target_hex ;
24166: LD_ADDR_VAR 0 4
24170: PUSH
24171: LD_VAR 0 7
24175: ST_TO_ADDR
// temp_list = [ ] ;
24176: LD_ADDR_VAR 0 3
24180: PUSH
24181: EMPTY
24182: ST_TO_ADDR
// for k = 0 to 5 do
24183: LD_ADDR_VAR 0 6
24187: PUSH
24188: DOUBLE
24189: LD_INT 0
24191: DEC
24192: ST_TO_ADDR
24193: LD_INT 5
24195: PUSH
24196: FOR_TO
24197: IFFALSE 24267
// temp_list = Insert ( temp_list , 1 , [ ShiftX ( hex_list [ 1 ] , k , 1 ) , ShiftY ( hex_list [ 2 ] , k , 1 ) ] ) ;
24199: LD_ADDR_VAR 0 3
24203: PUSH
24204: LD_VAR 0 3
24208: PPUSH
24209: LD_INT 1
24211: PPUSH
24212: LD_VAR 0 4
24216: PUSH
24217: LD_INT 1
24219: ARRAY
24220: PPUSH
24221: LD_VAR 0 6
24225: PPUSH
24226: LD_INT 1
24228: PPUSH
24229: CALL_OW 272
24233: PUSH
24234: LD_VAR 0 4
24238: PUSH
24239: LD_INT 2
24241: ARRAY
24242: PPUSH
24243: LD_VAR 0 6
24247: PPUSH
24248: LD_INT 1
24250: PPUSH
24251: CALL_OW 273
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PPUSH
24260: CALL_OW 2
24264: ST_TO_ADDR
24265: GO 24196
24267: POP
24268: POP
// hex_list = [ hex_list ] ^ temp_list ;
24269: LD_ADDR_VAR 0 4
24273: PUSH
24274: LD_VAR 0 4
24278: PUSH
24279: EMPTY
24280: LIST
24281: PUSH
24282: LD_VAR 0 3
24286: ADD
24287: ST_TO_ADDR
// temp_list = [ ] ;
24288: LD_ADDR_VAR 0 3
24292: PUSH
24293: EMPTY
24294: ST_TO_ADDR
// for k in hex_list do
24295: LD_ADDR_VAR 0 6
24299: PUSH
24300: LD_VAR 0 4
24304: PUSH
24305: FOR_IN
24306: IFFALSE 24440
// begin un = HexInfo ( k [ 1 ] , k [ 2 ] ) ;
24308: LD_ADDR_VAR 0 5
24312: PUSH
24313: LD_VAR 0 6
24317: PUSH
24318: LD_INT 1
24320: ARRAY
24321: PPUSH
24322: LD_VAR 0 6
24326: PUSH
24327: LD_INT 2
24329: ARRAY
24330: PPUSH
24331: CALL_OW 428
24335: ST_TO_ADDR
// if un > 0 and not un in temp_list then
24336: LD_VAR 0 5
24340: PUSH
24341: LD_INT 0
24343: GREATER
24344: PUSH
24345: LD_VAR 0 5
24349: PUSH
24350: LD_VAR 0 3
24354: IN
24355: NOT
24356: AND
24357: IFFALSE 24438
// begin ai_attack_ground_info_initial = Insert ( ai_attack_ground_info_initial , 1 , [ i , un , GetSide ( un ) , target_hex [ 1 ] , target_hex [ 2 ] ] ) ;
24359: LD_ADDR_EXP 76
24363: PUSH
24364: LD_EXP 76
24368: PPUSH
24369: LD_INT 1
24371: PPUSH
24372: LD_VAR 0 2
24376: PUSH
24377: LD_VAR 0 5
24381: PUSH
24382: LD_VAR 0 5
24386: PPUSH
24387: CALL_OW 255
24391: PUSH
24392: LD_VAR 0 7
24396: PUSH
24397: LD_INT 1
24399: ARRAY
24400: PUSH
24401: LD_VAR 0 7
24405: PUSH
24406: LD_INT 2
24408: ARRAY
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: PPUSH
24417: CALL_OW 2
24421: ST_TO_ADDR
// temp_list = temp_list ^ un ;
24422: LD_ADDR_VAR 0 3
24426: PUSH
24427: LD_VAR 0 3
24431: PUSH
24432: LD_VAR 0 5
24436: ADD
24437: ST_TO_ADDR
// end ; end ;
24438: GO 24305
24440: POP
24441: POP
// end ; end ;
24442: GO 24059
24444: POP
24445: POP
// end ; end ;
24446: PPOPN 7
24448: END
// every 0 0$1 + 0 0$0.1 do var a , b , temp_list , temp_list_2 , yup , i , t ;
24449: GO 24451
24451: DISABLE
24452: LD_INT 0
24454: PPUSH
24455: PPUSH
24456: PPUSH
24457: PPUSH
24458: PPUSH
24459: PPUSH
24460: PPUSH
// begin repeat wait ( 0 0$0.5 ) ;
24461: LD_INT 18
24463: PPUSH
24464: CALL_OW 67
// i = 1 ;
24468: LD_ADDR_VAR 0 6
24472: PUSH
24473: LD_INT 1
24475: ST_TO_ADDR
// while i <= ai_attack_ground_info_initial do
24476: LD_VAR 0 6
24480: PUSH
24481: LD_EXP 76
24485: LESSEQUAL
24486: IFFALSE 24649
// begin yup = false ;
24488: LD_ADDR_VAR 0 5
24492: PUSH
24493: LD_INT 0
24495: ST_TO_ADDR
// for t in GetTaskList ( ai_attack_ground_info_initial [ i ] [ 1 ] ) do
24496: LD_ADDR_VAR 0 7
24500: PUSH
24501: LD_EXP 76
24505: PUSH
24506: LD_VAR 0 6
24510: ARRAY
24511: PUSH
24512: LD_INT 1
24514: ARRAY
24515: PPUSH
24516: CALL_OW 437
24520: PUSH
24521: FOR_IN
24522: IFFALSE 24602
// if t [ 1 ] = | then
24524: LD_VAR 0 7
24528: PUSH
24529: LD_INT 1
24531: ARRAY
24532: PUSH
24533: LD_STRING |
24535: EQUAL
24536: IFFALSE 24600
// if t [ 2 ] = ai_attack_ground_info_initial [ i ] [ 4 ] and t [ 3 ] = ai_attack_ground_info_initial [ i ] [ 5 ] then
24538: LD_VAR 0 7
24542: PUSH
24543: LD_INT 2
24545: ARRAY
24546: PUSH
24547: LD_EXP 76
24551: PUSH
24552: LD_VAR 0 6
24556: ARRAY
24557: PUSH
24558: LD_INT 4
24560: ARRAY
24561: EQUAL
24562: PUSH
24563: LD_VAR 0 7
24567: PUSH
24568: LD_INT 3
24570: ARRAY
24571: PUSH
24572: LD_EXP 76
24576: PUSH
24577: LD_VAR 0 6
24581: ARRAY
24582: PUSH
24583: LD_INT 5
24585: ARRAY
24586: EQUAL
24587: AND
24588: IFFALSE 24600
// begin yup = true ;
24590: LD_ADDR_VAR 0 5
24594: PUSH
24595: LD_INT 1
24597: ST_TO_ADDR
// break ;
24598: GO 24602
// end ;
24600: GO 24521
24602: POP
24603: POP
// if not yup then
24604: LD_VAR 0 5
24608: NOT
24609: IFFALSE 24633
// begin ai_attack_ground_info_initial = Delete ( ai_attack_ground_info_initial , i ) ;
24611: LD_ADDR_EXP 76
24615: PUSH
24616: LD_EXP 76
24620: PPUSH
24621: LD_VAR 0 6
24625: PPUSH
24626: CALL_OW 3
24630: ST_TO_ADDR
// continue ;
24631: GO 24476
// end ; i = i + 1 ;
24633: LD_ADDR_VAR 0 6
24637: PUSH
24638: LD_VAR 0 6
24642: PUSH
24643: LD_INT 1
24645: PLUS
24646: ST_TO_ADDR
// end ;
24647: GO 24476
// i = 1 ;
24649: LD_ADDR_VAR 0 6
24653: PUSH
24654: LD_INT 1
24656: ST_TO_ADDR
// while i <= ai_attack_ground_info_sustain do
24657: LD_VAR 0 6
24661: PUSH
24662: LD_EXP 77
24666: LESSEQUAL
24667: IFFALSE 24830
// begin yup = false ;
24669: LD_ADDR_VAR 0 5
24673: PUSH
24674: LD_INT 0
24676: ST_TO_ADDR
// for t in GetTaskList ( ai_attack_ground_info_sustain [ i ] [ 1 ] ) do
24677: LD_ADDR_VAR 0 7
24681: PUSH
24682: LD_EXP 77
24686: PUSH
24687: LD_VAR 0 6
24691: ARRAY
24692: PUSH
24693: LD_INT 1
24695: ARRAY
24696: PPUSH
24697: CALL_OW 437
24701: PUSH
24702: FOR_IN
24703: IFFALSE 24783
// if t [ 1 ] = | then
24705: LD_VAR 0 7
24709: PUSH
24710: LD_INT 1
24712: ARRAY
24713: PUSH
24714: LD_STRING |
24716: EQUAL
24717: IFFALSE 24781
// if t [ 2 ] = ai_attack_ground_info_sustain [ i ] [ 4 ] and t [ 3 ] = ai_attack_ground_info_sustain [ i ] [ 5 ] then
24719: LD_VAR 0 7
24723: PUSH
24724: LD_INT 2
24726: ARRAY
24727: PUSH
24728: LD_EXP 77
24732: PUSH
24733: LD_VAR 0 6
24737: ARRAY
24738: PUSH
24739: LD_INT 4
24741: ARRAY
24742: EQUAL
24743: PUSH
24744: LD_VAR 0 7
24748: PUSH
24749: LD_INT 3
24751: ARRAY
24752: PUSH
24753: LD_EXP 77
24757: PUSH
24758: LD_VAR 0 6
24762: ARRAY
24763: PUSH
24764: LD_INT 5
24766: ARRAY
24767: EQUAL
24768: AND
24769: IFFALSE 24781
// begin yup = true ;
24771: LD_ADDR_VAR 0 5
24775: PUSH
24776: LD_INT 1
24778: ST_TO_ADDR
// break ;
24779: GO 24783
// end ;
24781: GO 24702
24783: POP
24784: POP
// if not yup then
24785: LD_VAR 0 5
24789: NOT
24790: IFFALSE 24814
// begin ai_attack_ground_info_sustain = Delete ( ai_attack_ground_info_sustain , i ) ;
24792: LD_ADDR_EXP 77
24796: PUSH
24797: LD_EXP 77
24801: PPUSH
24802: LD_VAR 0 6
24806: PPUSH
24807: CALL_OW 3
24811: ST_TO_ADDR
// continue ;
24812: GO 24657
// end ; i = i + 1 ;
24814: LD_ADDR_VAR 0 6
24818: PUSH
24819: LD_VAR 0 6
24823: PUSH
24824: LD_INT 1
24826: PLUS
24827: ST_TO_ADDR
// end ;
24828: GO 24657
// temp_list = ai_contact_time ;
24830: LD_ADDR_VAR 0 3
24834: PUSH
24835: LD_EXP 75
24839: ST_TO_ADDR
// for a = 1 to temp_list do
24840: LD_ADDR_VAR 0 1
24844: PUSH
24845: DOUBLE
24846: LD_INT 1
24848: DEC
24849: ST_TO_ADDR
24850: LD_VAR 0 3
24854: PUSH
24855: FOR_TO
24856: IFFALSE 24982
// for b = 1 to temp_list [ a ] do
24858: LD_ADDR_VAR 0 2
24862: PUSH
24863: DOUBLE
24864: LD_INT 1
24866: DEC
24867: ST_TO_ADDR
24868: LD_VAR 0 3
24872: PUSH
24873: LD_VAR 0 1
24877: ARRAY
24878: PUSH
24879: FOR_TO
24880: IFFALSE 24978
// if temp_list [ a ] [ b ] < 100000 then
24882: LD_VAR 0 3
24886: PUSH
24887: LD_VAR 0 1
24891: ARRAY
24892: PUSH
24893: LD_VAR 0 2
24897: ARRAY
24898: PUSH
24899: LD_INT 100000
24901: LESS
24902: IFFALSE 24976
// begin temp_list_2 = Replace ( ai_contact_time [ a ] , b , temp_list [ a ] [ b ] + 0 0$0.5 ) ;
24904: LD_ADDR_VAR 0 4
24908: PUSH
24909: LD_EXP 75
24913: PUSH
24914: LD_VAR 0 1
24918: ARRAY
24919: PPUSH
24920: LD_VAR 0 2
24924: PPUSH
24925: LD_VAR 0 3
24929: PUSH
24930: LD_VAR 0 1
24934: ARRAY
24935: PUSH
24936: LD_VAR 0 2
24940: ARRAY
24941: PUSH
24942: LD_INT 18
24944: PLUS
24945: PPUSH
24946: CALL_OW 1
24950: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a , temp_list_2 ) ;
24951: LD_ADDR_EXP 75
24955: PUSH
24956: LD_EXP 75
24960: PPUSH
24961: LD_VAR 0 1
24965: PPUSH
24966: LD_VAR 0 4
24970: PPUSH
24971: CALL_OW 1
24975: ST_TO_ADDR
// end ;
24976: GO 24879
24978: POP
24979: POP
24980: GO 24855
24982: POP
24983: POP
// for a in ai_attack_ground_info_initial do
24984: LD_ADDR_VAR 0 1
24988: PUSH
24989: LD_EXP 76
24993: PUSH
24994: FOR_IN
24995: IFFALSE 25201
// begin if IsDead ( a [ 2 ] ) or UnitShoot ( a [ 2 ] ) = a [ 1 ] then
24997: LD_VAR 0 1
25001: PUSH
25002: LD_INT 2
25004: ARRAY
25005: PPUSH
25006: CALL_OW 301
25010: PUSH
25011: LD_VAR 0 1
25015: PUSH
25016: LD_INT 2
25018: ARRAY
25019: PPUSH
25020: CALL_OW 504
25024: PUSH
25025: LD_VAR 0 1
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: EQUAL
25034: OR
25035: IFFALSE 25199
// begin temp_list = Replace ( ai_contact_time [ you ] , a [ 3 ] , 0 ) ;
25037: LD_ADDR_VAR 0 3
25041: PUSH
25042: LD_EXP 75
25046: PUSH
25047: LD_EXP 2
25051: ARRAY
25052: PPUSH
25053: LD_VAR 0 1
25057: PUSH
25058: LD_INT 3
25060: ARRAY
25061: PPUSH
25062: LD_INT 0
25064: PPUSH
25065: CALL_OW 1
25069: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , you , temp_list ) ;
25070: LD_ADDR_EXP 75
25074: PUSH
25075: LD_EXP 75
25079: PPUSH
25080: LD_EXP 2
25084: PPUSH
25085: LD_VAR 0 3
25089: PPUSH
25090: CALL_OW 1
25094: ST_TO_ADDR
// temp_list = Replace ( ai_contact_time [ a [ 3 ] ] , you , 0 ) ;
25095: LD_ADDR_VAR 0 3
25099: PUSH
25100: LD_EXP 75
25104: PUSH
25105: LD_VAR 0 1
25109: PUSH
25110: LD_INT 3
25112: ARRAY
25113: ARRAY
25114: PPUSH
25115: LD_EXP 2
25119: PPUSH
25120: LD_INT 0
25122: PPUSH
25123: CALL_OW 1
25127: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a [ 3 ] , temp_list ) ;
25128: LD_ADDR_EXP 75
25132: PUSH
25133: LD_EXP 75
25137: PPUSH
25138: LD_VAR 0 1
25142: PUSH
25143: LD_INT 3
25145: ARRAY
25146: PPUSH
25147: LD_VAR 0 3
25151: PPUSH
25152: CALL_OW 1
25156: ST_TO_ADDR
// ai_attack_ground_info_initial = ai_attack_ground_info_initial diff [ a ] ;
25157: LD_ADDR_EXP 76
25161: PUSH
25162: LD_EXP 76
25166: PUSH
25167: LD_VAR 0 1
25171: PUSH
25172: EMPTY
25173: LIST
25174: DIFF
25175: ST_TO_ADDR
// ai_attack_ground_info_sustain = Insert ( ai_attack_ground_info_sustain , 1 , a ) ;
25176: LD_ADDR_EXP 77
25180: PUSH
25181: LD_EXP 77
25185: PPUSH
25186: LD_INT 1
25188: PPUSH
25189: LD_VAR 0 1
25193: PPUSH
25194: CALL_OW 2
25198: ST_TO_ADDR
// end ; end ;
25199: GO 24994
25201: POP
25202: POP
// for a in ai_attack_ground_info_sustain do
25203: LD_ADDR_VAR 0 1
25207: PUSH
25208: LD_EXP 77
25212: PUSH
25213: FOR_IN
25214: IFFALSE 25338
// begin temp_list = Replace ( ai_contact_time [ you ] , a [ 3 ] , 0 ) ;
25216: LD_ADDR_VAR 0 3
25220: PUSH
25221: LD_EXP 75
25225: PUSH
25226: LD_EXP 2
25230: ARRAY
25231: PPUSH
25232: LD_VAR 0 1
25236: PUSH
25237: LD_INT 3
25239: ARRAY
25240: PPUSH
25241: LD_INT 0
25243: PPUSH
25244: CALL_OW 1
25248: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , you , temp_list ) ;
25249: LD_ADDR_EXP 75
25253: PUSH
25254: LD_EXP 75
25258: PPUSH
25259: LD_EXP 2
25263: PPUSH
25264: LD_VAR 0 3
25268: PPUSH
25269: CALL_OW 1
25273: ST_TO_ADDR
// temp_list = Replace ( ai_contact_time [ a [ 3 ] ] , you , 0 ) ;
25274: LD_ADDR_VAR 0 3
25278: PUSH
25279: LD_EXP 75
25283: PUSH
25284: LD_VAR 0 1
25288: PUSH
25289: LD_INT 3
25291: ARRAY
25292: ARRAY
25293: PPUSH
25294: LD_EXP 2
25298: PPUSH
25299: LD_INT 0
25301: PPUSH
25302: CALL_OW 1
25306: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a [ 3 ] , temp_list ) ;
25307: LD_ADDR_EXP 75
25311: PUSH
25312: LD_EXP 75
25316: PPUSH
25317: LD_VAR 0 1
25321: PUSH
25322: LD_INT 3
25324: ARRAY
25325: PPUSH
25326: LD_VAR 0 3
25330: PPUSH
25331: CALL_OW 1
25335: ST_TO_ADDR
// end ;
25336: GO 25213
25338: POP
25339: POP
// until false ;
25340: LD_INT 0
25342: IFFALSE 24461
// end ;
25344: PPOPN 7
25346: END
// every 0 0$1 do var side , i , mechanics_list , temp_list , taken_vehicles , temp_list_3 , temp_unit , vehicles_list , allowed_to_repair_vehicles ; var under_attack , free_parking_spots , k , ready_to_attack , base , area , free_spaces , temp_list_2 , remote_mechanics ; var destroy_gensher_base , temp_list_4 , temp_list_5 , n , a ; var remote_driver_vehicles ;
25347: GO 25349
25349: DISABLE
25350: LD_INT 0
25352: PPUSH
25353: PPUSH
25354: PPUSH
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
25359: PPUSH
25360: PPUSH
25361: PPUSH
25362: PPUSH
25363: PPUSH
25364: PPUSH
25365: PPUSH
25366: PPUSH
25367: PPUSH
25368: PPUSH
25369: PPUSH
25370: PPUSH
25371: PPUSH
25372: PPUSH
25373: PPUSH
25374: PPUSH
25375: PPUSH
// begin remote_driver_vehicles = [ [ ] , [ ] , [ ] ] ;
25376: LD_ADDR_VAR 0 24
25380: PUSH
25381: EMPTY
25382: PUSH
25383: EMPTY
25384: PUSH
25385: EMPTY
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: LIST
25391: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25392: LD_INT 35
25394: PPUSH
25395: CALL_OW 67
// for base in ai_bases do
25399: LD_ADDR_VAR 0 14
25403: PUSH
25404: LD_EXP 58
25408: PUSH
25409: FOR_IN
25410: IFFALSE 30024
// begin side = GetBaseSide ( base ) ;
25412: LD_ADDR_VAR 0 1
25416: PUSH
25417: LD_VAR 0 14
25421: PPUSH
25422: CALL 12353 0 1
25426: ST_TO_ADDR
// under_attack = BaseUnderAttack ( base , - 1 ) ;
25427: LD_ADDR_VAR 0 10
25431: PUSH
25432: LD_VAR 0 14
25436: PPUSH
25437: LD_INT 1
25439: NEG
25440: PPUSH
25441: CALL 23273 0 2
25445: ST_TO_ADDR
// ready_to_attack = not under_attack ;
25446: LD_ADDR_VAR 0 13
25450: PUSH
25451: LD_VAR 0 10
25455: NOT
25456: ST_TO_ADDR
// if base = 1 and GetAttitude ( americans , you_alt ) = att_enemy and FilterAllUnits ( [ [ f_inarea , Gensher_base ] , [ f_type , unit_building ] ] ) > 0 then
25457: LD_VAR 0 14
25461: PUSH
25462: LD_INT 1
25464: EQUAL
25465: PUSH
25466: LD_EXP 6
25470: PPUSH
25471: LD_EXP 5
25475: PPUSH
25476: CALL_OW 81
25480: PUSH
25481: LD_INT 2
25483: EQUAL
25484: AND
25485: PUSH
25486: LD_INT 95
25488: PUSH
25489: LD_INT 7
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 21
25498: PUSH
25499: LD_INT 3
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PPUSH
25510: CALL_OW 69
25514: PUSH
25515: LD_INT 0
25517: GREATER
25518: AND
25519: IFFALSE 25531
// destroy_gensher_base = true else
25521: LD_ADDR_VAR 0 19
25525: PUSH
25526: LD_INT 1
25528: ST_TO_ADDR
25529: GO 25539
// destroy_gensher_base = false ;
25531: LD_ADDR_VAR 0 19
25535: PUSH
25536: LD_INT 0
25538: ST_TO_ADDR
// mechanics_list = ai_mechanics_defend [ base ] diff ai_heal_these_humans [ base ] ;
25539: LD_ADDR_VAR 0 3
25543: PUSH
25544: LD_EXP 31
25548: PUSH
25549: LD_VAR 0 14
25553: ARRAY
25554: PUSH
25555: LD_EXP 43
25559: PUSH
25560: LD_VAR 0 14
25564: ARRAY
25565: DIFF
25566: ST_TO_ADDR
// remote_mechanics = [ ] ;
25567: LD_ADDR_VAR 0 18
25571: PUSH
25572: EMPTY
25573: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
25574: LD_ADDR_VAR 0 4
25578: PUSH
25579: LD_EXP 43
25583: PUSH
25584: LD_VAR 0 14
25588: ARRAY
25589: ST_TO_ADDR
// i = 1 ;
25590: LD_ADDR_VAR 0 2
25594: PUSH
25595: LD_INT 1
25597: ST_TO_ADDR
// while i <= mechanics_list do
25598: LD_VAR 0 2
25602: PUSH
25603: LD_VAR 0 3
25607: LESSEQUAL
25608: IFFALSE 25691
// begin if GetLives ( mechanics_list [ i ] ) <= 900 then
25610: LD_VAR 0 3
25614: PUSH
25615: LD_VAR 0 2
25619: ARRAY
25620: PPUSH
25621: CALL_OW 256
25625: PUSH
25626: LD_INT 900
25628: LESSEQUAL
25629: IFFALSE 25675
// begin temp_list = temp_list ^ mechanics_list [ i ] ;
25631: LD_ADDR_VAR 0 4
25635: PUSH
25636: LD_VAR 0 4
25640: PUSH
25641: LD_VAR 0 3
25645: PUSH
25646: LD_VAR 0 2
25650: ARRAY
25651: ADD
25652: ST_TO_ADDR
// mechanics_list = Delete ( mechanics_list , i ) ;
25653: LD_ADDR_VAR 0 3
25657: PUSH
25658: LD_VAR 0 3
25662: PPUSH
25663: LD_VAR 0 2
25667: PPUSH
25668: CALL_OW 3
25672: ST_TO_ADDR
// continue ;
25673: GO 25598
// end ; i = i + 1 ;
25675: LD_ADDR_VAR 0 2
25679: PUSH
25680: LD_VAR 0 2
25684: PUSH
25685: LD_INT 1
25687: PLUS
25688: ST_TO_ADDR
// end ;
25689: GO 25598
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
25691: LD_ADDR_EXP 43
25695: PUSH
25696: LD_EXP 43
25700: PPUSH
25701: LD_VAR 0 14
25705: PPUSH
25706: LD_VAR 0 4
25710: PPUSH
25711: CALL_OW 1
25715: ST_TO_ADDR
// if ai_control_tower [ base ] > 0 then
25716: LD_EXP 56
25720: PUSH
25721: LD_VAR 0 14
25725: ARRAY
25726: PUSH
25727: LD_INT 0
25729: GREATER
25730: IFFALSE 26668
// begin temp_list = remote_driver_vehicles [ base ] ;
25732: LD_ADDR_VAR 0 4
25736: PUSH
25737: LD_VAR 0 24
25741: PUSH
25742: LD_VAR 0 14
25746: ARRAY
25747: ST_TO_ADDR
// vehicles_list = [ ] ;
25748: LD_ADDR_VAR 0 8
25752: PUSH
25753: EMPTY
25754: ST_TO_ADDR
// i = 1 ;
25755: LD_ADDR_VAR 0 2
25759: PUSH
25760: LD_INT 1
25762: ST_TO_ADDR
// while i <= temp_list do
25763: LD_VAR 0 2
25767: PUSH
25768: LD_VAR 0 4
25772: LESSEQUAL
25773: IFFALSE 26045
// begin if IsDead ( temp_list [ i ] [ 1 ] ) then
25775: LD_VAR 0 4
25779: PUSH
25780: LD_VAR 0 2
25784: ARRAY
25785: PUSH
25786: LD_INT 1
25788: ARRAY
25789: PPUSH
25790: CALL_OW 301
25794: IFFALSE 25820
// begin temp_list = Delete ( temp_list , i ) ;
25796: LD_ADDR_VAR 0 4
25800: PUSH
25801: LD_VAR 0 4
25805: PPUSH
25806: LD_VAR 0 2
25810: PPUSH
25811: CALL_OW 3
25815: ST_TO_ADDR
// continue ;
25816: GO 25763
// end else
25818: GO 26003
// begin temp_list_3 = temp_list [ i ] [ 2 ] ;
25820: LD_ADDR_VAR 0 6
25824: PUSH
25825: LD_VAR 0 4
25829: PUSH
25830: LD_VAR 0 2
25834: ARRAY
25835: PUSH
25836: LD_INT 2
25838: ARRAY
25839: ST_TO_ADDR
// k = 1 ;
25840: LD_ADDR_VAR 0 12
25844: PUSH
25845: LD_INT 1
25847: ST_TO_ADDR
// while k <= temp_list_3 do
25848: LD_VAR 0 12
25852: PUSH
25853: LD_VAR 0 6
25857: LESSEQUAL
25858: IFFALSE 25915
// begin if IsDead ( temp_list_3 [ k ] ) then
25860: LD_VAR 0 6
25864: PUSH
25865: LD_VAR 0 12
25869: ARRAY
25870: PPUSH
25871: CALL_OW 301
25875: IFFALSE 25899
// begin temp_list_3 = Delete ( temp_list_3 , k ) ;
25877: LD_ADDR_VAR 0 6
25881: PUSH
25882: LD_VAR 0 6
25886: PPUSH
25887: LD_VAR 0 12
25891: PPUSH
25892: CALL_OW 3
25896: ST_TO_ADDR
// continue ;
25897: GO 25848
// end ; k = k + 1 ;
25899: LD_ADDR_VAR 0 12
25903: PUSH
25904: LD_VAR 0 12
25908: PUSH
25909: LD_INT 1
25911: PLUS
25912: ST_TO_ADDR
// end ;
25913: GO 25848
// if temp_list_3 > 0 then
25915: LD_VAR 0 6
25919: PUSH
25920: LD_INT 0
25922: GREATER
25923: IFFALSE 25981
// begin temp_list_2 = Replace ( temp_list [ i ] , 2 , temp_list_3 ) ;
25925: LD_ADDR_VAR 0 17
25929: PUSH
25930: LD_VAR 0 4
25934: PUSH
25935: LD_VAR 0 2
25939: ARRAY
25940: PPUSH
25941: LD_INT 2
25943: PPUSH
25944: LD_VAR 0 6
25948: PPUSH
25949: CALL_OW 1
25953: ST_TO_ADDR
// temp_list = Replace ( temp_list , i , temp_list_2 ) ;
25954: LD_ADDR_VAR 0 4
25958: PUSH
25959: LD_VAR 0 4
25963: PPUSH
25964: LD_VAR 0 2
25968: PPUSH
25969: LD_VAR 0 17
25973: PPUSH
25974: CALL_OW 1
25978: ST_TO_ADDR
// end else
25979: GO 26003
// begin temp_list = Delete ( temp_list , i ) ;
25981: LD_ADDR_VAR 0 4
25985: PUSH
25986: LD_VAR 0 4
25990: PPUSH
25991: LD_VAR 0 2
25995: PPUSH
25996: CALL_OW 3
26000: ST_TO_ADDR
// continue ;
26001: GO 25763
// end ; end ; vehicles_list = vehicles_list ^ temp_list [ i ] [ 2 ] ;
26003: LD_ADDR_VAR 0 8
26007: PUSH
26008: LD_VAR 0 8
26012: PUSH
26013: LD_VAR 0 4
26017: PUSH
26018: LD_VAR 0 2
26022: ARRAY
26023: PUSH
26024: LD_INT 2
26026: ARRAY
26027: ADD
26028: ST_TO_ADDR
// i = i + 1 ;
26029: LD_ADDR_VAR 0 2
26033: PUSH
26034: LD_VAR 0 2
26038: PUSH
26039: LD_INT 1
26041: PLUS
26042: ST_TO_ADDR
// end ;
26043: GO 25763
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list ) ;
26045: LD_ADDR_VAR 0 24
26049: PUSH
26050: LD_VAR 0 24
26054: PPUSH
26055: LD_VAR 0 14
26059: PPUSH
26060: LD_VAR 0 4
26064: PPUSH
26065: CALL_OW 1
26069: ST_TO_ADDR
// temp_list = ai_vehicles_defend [ base ] diff vehicles_list ;
26070: LD_ADDR_VAR 0 4
26074: PUSH
26075: LD_EXP 39
26079: PUSH
26080: LD_VAR 0 14
26084: ARRAY
26085: PUSH
26086: LD_VAR 0 8
26090: DIFF
26091: ST_TO_ADDR
// if temp_list > 0 then
26092: LD_VAR 0 4
26096: PUSH
26097: LD_INT 0
26099: GREATER
26100: IFFALSE 26324
// begin temp_list_3 = ai_mechanics_defend [ base ] ;
26102: LD_ADDR_VAR 0 6
26106: PUSH
26107: LD_EXP 31
26111: PUSH
26112: LD_VAR 0 14
26116: ARRAY
26117: ST_TO_ADDR
// for i in remote_driver_vehicles [ base ] do
26118: LD_ADDR_VAR 0 2
26122: PUSH
26123: LD_VAR 0 24
26127: PUSH
26128: LD_VAR 0 14
26132: ARRAY
26133: PUSH
26134: FOR_IN
26135: IFFALSE 26159
// temp_list_3 = temp_list_3 diff i [ 1 ] ;
26137: LD_ADDR_VAR 0 6
26141: PUSH
26142: LD_VAR 0 6
26146: PUSH
26147: LD_VAR 0 2
26151: PUSH
26152: LD_INT 1
26154: ARRAY
26155: DIFF
26156: ST_TO_ADDR
26157: GO 26134
26159: POP
26160: POP
// if temp_list_3 > 0 then
26161: LD_VAR 0 6
26165: PUSH
26166: LD_INT 0
26168: GREATER
26169: IFFALSE 26195
// temp_list_3 = temp_list_3 diff FindMinSkill ( temp_list_3 , skill_mechanical ) ;
26171: LD_ADDR_VAR 0 6
26175: PUSH
26176: LD_VAR 0 6
26180: PUSH
26181: LD_VAR 0 6
26185: PPUSH
26186: LD_INT 3
26188: PPUSH
26189: CALL_OW 443
26193: DIFF
26194: ST_TO_ADDR
// for i in temp_list do
26195: LD_ADDR_VAR 0 2
26199: PUSH
26200: LD_VAR 0 4
26204: PUSH
26205: FOR_IN
26206: IFFALSE 26322
// begin if temp_list_3 = 0 then
26208: LD_VAR 0 6
26212: PUSH
26213: LD_INT 0
26215: EQUAL
26216: IFFALSE 26220
// break ;
26218: GO 26322
// temp_unit = FindMaxSkill ( temp_list_3 , skill_mechanical ) ;
26220: LD_ADDR_VAR 0 7
26224: PUSH
26225: LD_VAR 0 6
26229: PPUSH
26230: LD_INT 3
26232: PPUSH
26233: CALL_OW 433
26237: ST_TO_ADDR
// temp_list_3 = temp_list_3 diff temp_unit ;
26238: LD_ADDR_VAR 0 6
26242: PUSH
26243: LD_VAR 0 6
26247: PUSH
26248: LD_VAR 0 7
26252: DIFF
26253: ST_TO_ADDR
// temp_list_2 = Insert ( remote_driver_vehicles [ base ] , 1 , [ temp_unit , [ i ] ] ) ;
26254: LD_ADDR_VAR 0 17
26258: PUSH
26259: LD_VAR 0 24
26263: PUSH
26264: LD_VAR 0 14
26268: ARRAY
26269: PPUSH
26270: LD_INT 1
26272: PPUSH
26273: LD_VAR 0 7
26277: PUSH
26278: LD_VAR 0 2
26282: PUSH
26283: EMPTY
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PPUSH
26290: CALL_OW 2
26294: ST_TO_ADDR
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list_2 ) ;
26295: LD_ADDR_VAR 0 24
26299: PUSH
26300: LD_VAR 0 24
26304: PPUSH
26305: LD_VAR 0 14
26309: PPUSH
26310: LD_VAR 0 17
26314: PPUSH
26315: CALL_OW 1
26319: ST_TO_ADDR
// end ;
26320: GO 26205
26322: POP
26323: POP
// end ; for i in remote_driver_vehicles [ base ] do
26324: LD_ADDR_VAR 0 2
26328: PUSH
26329: LD_VAR 0 24
26333: PUSH
26334: LD_VAR 0 14
26338: ARRAY
26339: PUSH
26340: FOR_IN
26341: IFFALSE 26365
// remote_mechanics = remote_mechanics ^ i [ 1 ] ;
26343: LD_ADDR_VAR 0 18
26347: PUSH
26348: LD_VAR 0 18
26352: PUSH
26353: LD_VAR 0 2
26357: PUSH
26358: LD_INT 1
26360: ARRAY
26361: ADD
26362: ST_TO_ADDR
26363: GO 26340
26365: POP
26366: POP
// mechanics_list = mechanics_list diff remote_mechanics ;
26367: LD_ADDR_VAR 0 3
26371: PUSH
26372: LD_VAR 0 3
26376: PUSH
26377: LD_VAR 0 18
26381: DIFF
26382: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff ai_heal_these_humans [ base ] ;
26383: LD_ADDR_VAR 0 18
26387: PUSH
26388: LD_VAR 0 18
26392: PUSH
26393: LD_EXP 43
26397: PUSH
26398: LD_VAR 0 14
26402: ARRAY
26403: DIFF
26404: ST_TO_ADDR
// if mechanics_list = 0 and remote_driver_vehicles [ base ] > 0 then
26405: LD_VAR 0 3
26409: PUSH
26410: LD_INT 0
26412: EQUAL
26413: PUSH
26414: LD_VAR 0 24
26418: PUSH
26419: LD_VAR 0 14
26423: ARRAY
26424: PUSH
26425: LD_INT 0
26427: GREATER
26428: AND
26429: IFFALSE 26666
// begin n = 0 ;
26431: LD_ADDR_VAR 0 22
26435: PUSH
26436: LD_INT 0
26438: ST_TO_ADDR
// a = 9999 ;
26439: LD_ADDR_VAR 0 23
26443: PUSH
26444: LD_INT 9999
26446: ST_TO_ADDR
// for i = 1 to ( remote_driver_vehicles [ base ] + 0 ) do
26447: LD_ADDR_VAR 0 2
26451: PUSH
26452: DOUBLE
26453: LD_INT 1
26455: DEC
26456: ST_TO_ADDR
26457: LD_VAR 0 24
26461: PUSH
26462: LD_VAR 0 14
26466: ARRAY
26467: PUSH
26468: LD_INT 0
26470: PLUS
26471: PUSH
26472: FOR_TO
26473: IFFALSE 26549
// begin if remote_driver_vehicles [ base ] [ i ] [ 2 ] + 0 < a then
26475: LD_VAR 0 24
26479: PUSH
26480: LD_VAR 0 14
26484: ARRAY
26485: PUSH
26486: LD_VAR 0 2
26490: ARRAY
26491: PUSH
26492: LD_INT 2
26494: ARRAY
26495: PUSH
26496: LD_INT 0
26498: PLUS
26499: PUSH
26500: LD_VAR 0 23
26504: LESS
26505: IFFALSE 26547
// begin a = remote_driver_vehicles [ base ] [ i ] [ 2 ] + 0 ;
26507: LD_ADDR_VAR 0 23
26511: PUSH
26512: LD_VAR 0 24
26516: PUSH
26517: LD_VAR 0 14
26521: ARRAY
26522: PUSH
26523: LD_VAR 0 2
26527: ARRAY
26528: PUSH
26529: LD_INT 2
26531: ARRAY
26532: PUSH
26533: LD_INT 0
26535: PLUS
26536: ST_TO_ADDR
// n = i ;
26537: LD_ADDR_VAR 0 22
26541: PUSH
26542: LD_VAR 0 2
26546: ST_TO_ADDR
// end ; end ;
26547: GO 26472
26549: POP
26550: POP
// mechanics_list = mechanics_list ^ remote_driver_vehicles [ base ] [ n ] [ 1 ] ;
26551: LD_ADDR_VAR 0 3
26555: PUSH
26556: LD_VAR 0 3
26560: PUSH
26561: LD_VAR 0 24
26565: PUSH
26566: LD_VAR 0 14
26570: ARRAY
26571: PUSH
26572: LD_VAR 0 22
26576: ARRAY
26577: PUSH
26578: LD_INT 1
26580: ARRAY
26581: ADD
26582: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff remote_driver_vehicles [ base ] [ n ] [ 1 ] ;
26583: LD_ADDR_VAR 0 18
26587: PUSH
26588: LD_VAR 0 18
26592: PUSH
26593: LD_VAR 0 24
26597: PUSH
26598: LD_VAR 0 14
26602: ARRAY
26603: PUSH
26604: LD_VAR 0 22
26608: ARRAY
26609: PUSH
26610: LD_INT 1
26612: ARRAY
26613: DIFF
26614: ST_TO_ADDR
// temp_list_2 = Delete ( remote_driver_vehicles [ base ] , n ) ;
26615: LD_ADDR_VAR 0 17
26619: PUSH
26620: LD_VAR 0 24
26624: PUSH
26625: LD_VAR 0 14
26629: ARRAY
26630: PPUSH
26631: LD_VAR 0 22
26635: PPUSH
26636: CALL_OW 3
26640: ST_TO_ADDR
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list_2 ) ;
26641: LD_ADDR_VAR 0 24
26645: PUSH
26646: LD_VAR 0 24
26650: PPUSH
26651: LD_VAR 0 14
26655: PPUSH
26656: LD_VAR 0 17
26660: PPUSH
26661: CALL_OW 1
26665: ST_TO_ADDR
// end ; end else
26666: GO 26690
// begin remote_driver_vehicles = Replace ( remote_driver_vehicles , base , [ ] ) ;
26668: LD_ADDR_VAR 0 24
26672: PUSH
26673: LD_VAR 0 24
26677: PPUSH
26678: LD_VAR 0 14
26682: PPUSH
26683: EMPTY
26684: PPUSH
26685: CALL_OW 1
26689: ST_TO_ADDR
// end ; temp_list = [ ] ;
26690: LD_ADDR_VAR 0 4
26694: PUSH
26695: EMPTY
26696: ST_TO_ADDR
// for i in ai_vehicles_being_repaired [ base ] do
26697: LD_ADDR_VAR 0 2
26701: PUSH
26702: LD_EXP 79
26706: PUSH
26707: LD_VAR 0 14
26711: ARRAY
26712: PUSH
26713: FOR_IN
26714: IFFALSE 26749
// if GetLives ( i ) < 1000 then
26716: LD_VAR 0 2
26720: PPUSH
26721: CALL_OW 256
26725: PUSH
26726: LD_INT 1000
26728: LESS
26729: IFFALSE 26747
// temp_list = temp_list ^ i ;
26731: LD_ADDR_VAR 0 4
26735: PUSH
26736: LD_VAR 0 4
26740: PUSH
26741: LD_VAR 0 2
26745: ADD
26746: ST_TO_ADDR
26747: GO 26713
26749: POP
26750: POP
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
26751: LD_ADDR_EXP 79
26755: PUSH
26756: LD_EXP 79
26760: PPUSH
26761: LD_VAR 0 14
26765: PPUSH
26766: LD_VAR 0 4
26770: PPUSH
26771: CALL_OW 1
26775: ST_TO_ADDR
// temp_list = [ ] ;
26776: LD_ADDR_VAR 0 4
26780: PUSH
26781: EMPTY
26782: ST_TO_ADDR
// for i in ai_refuel_vehicles_list [ base ] diff ai_vehicles_being_repaired [ base ] do
26783: LD_ADDR_VAR 0 2
26787: PUSH
26788: LD_EXP 54
26792: PUSH
26793: LD_VAR 0 14
26797: ARRAY
26798: PUSH
26799: LD_EXP 79
26803: PUSH
26804: LD_VAR 0 14
26808: ARRAY
26809: DIFF
26810: PUSH
26811: FOR_IN
26812: IFFALSE 26847
// if GetFuel ( i ) < 95 then
26814: LD_VAR 0 2
26818: PPUSH
26819: CALL_OW 261
26823: PUSH
26824: LD_INT 95
26826: LESS
26827: IFFALSE 26845
// temp_list = temp_list ^ i ;
26829: LD_ADDR_VAR 0 4
26833: PUSH
26834: LD_VAR 0 4
26838: PUSH
26839: LD_VAR 0 2
26843: ADD
26844: ST_TO_ADDR
26845: GO 26811
26847: POP
26848: POP
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
26849: LD_ADDR_EXP 54
26853: PUSH
26854: LD_EXP 54
26858: PPUSH
26859: LD_VAR 0 14
26863: PPUSH
26864: LD_VAR 0 4
26868: PPUSH
26869: CALL_OW 1
26873: ST_TO_ADDR
// if under_attack or destroy_gensher_base then
26874: LD_VAR 0 10
26878: PUSH
26879: LD_VAR 0 19
26883: OR
26884: IFFALSE 28287
// begin vehicles_list = ai_vehicles_defend [ base ] diff ai_vehicles_being_repaired [ base ] ;
26886: LD_ADDR_VAR 0 8
26890: PUSH
26891: LD_EXP 39
26895: PUSH
26896: LD_VAR 0 14
26900: ARRAY
26901: PUSH
26902: LD_EXP 79
26906: PUSH
26907: LD_VAR 0 14
26911: ARRAY
26912: DIFF
26913: ST_TO_ADDR
// case base of 1 :
26914: LD_VAR 0 14
26918: PUSH
26919: LD_INT 1
26921: DOUBLE
26922: EQUAL
26923: IFTRUE 26927
26925: GO 27569
26927: POP
// begin repeat if game_phase = 1 then
26928: LD_EXP 88
26932: PUSH
26933: LD_INT 1
26935: EQUAL
26936: IFFALSE 26940
// break ;
26938: GO 27567
// temp_list = [ ] ;
26940: LD_ADDR_VAR 0 4
26944: PUSH
26945: EMPTY
26946: ST_TO_ADDR
// if destroy_gensher_base then
26947: LD_VAR 0 19
26951: IFFALSE 27018
// for i in original_gensher_people ^ Gensher do
26953: LD_ADDR_VAR 0 2
26957: PUSH
26958: LD_EXP 82
26962: PUSH
26963: LD_EXP 23
26967: ADD
26968: PUSH
26969: FOR_IN
26970: IFFALSE 27016
// if IsPlaced ( i ) and GetY ( i ) <= 70 then
26972: LD_VAR 0 2
26976: PPUSH
26977: CALL_OW 305
26981: PUSH
26982: LD_VAR 0 2
26986: PPUSH
26987: CALL_OW 251
26991: PUSH
26992: LD_INT 70
26994: LESSEQUAL
26995: AND
26996: IFFALSE 27014
// temp_list = temp_list ^ i ;
26998: LD_ADDR_VAR 0 4
27002: PUSH
27003: LD_VAR 0 4
27007: PUSH
27008: LD_VAR 0 2
27012: ADD
27013: ST_TO_ADDR
27014: GO 26969
27016: POP
27017: POP
// if temp_list > 0 then
27018: LD_VAR 0 4
27022: PUSH
27023: LD_INT 0
27025: GREATER
27026: IFFALSE 27238
// begin temp_list_3 = [ [ 105 , 40 ] , [ 98 , 44 ] , [ 90 , 44 ] , [ 82 , 46 ] , [ 78 , 52 ] , [ 79 , 61 ] ] ;
27028: LD_ADDR_VAR 0 6
27032: PUSH
27033: LD_INT 105
27035: PUSH
27036: LD_INT 40
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 98
27045: PUSH
27046: LD_INT 44
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 90
27055: PUSH
27056: LD_INT 44
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 82
27065: PUSH
27066: LD_INT 46
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 78
27075: PUSH
27076: LD_INT 52
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 79
27085: PUSH
27086: LD_INT 61
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: ST_TO_ADDR
// for i in vehicles_list do
27101: LD_ADDR_VAR 0 2
27105: PUSH
27106: LD_VAR 0 8
27110: PUSH
27111: FOR_IN
27112: IFFALSE 27234
// begin temp_unit = AllNearestUnitToUnit ( temp_list , i ) ;
27114: LD_ADDR_VAR 0 7
27118: PUSH
27119: LD_VAR 0 4
27123: PPUSH
27124: LD_VAR 0 2
27128: PPUSH
27129: CALL_OW 75
27133: ST_TO_ADDR
// if GetDistUnits ( i , temp_unit ) <= 6 then
27134: LD_VAR 0 2
27138: PPUSH
27139: LD_VAR 0 7
27143: PPUSH
27144: CALL_OW 296
27148: PUSH
27149: LD_INT 6
27151: LESSEQUAL
27152: IFFALSE 27185
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) else
27154: LD_VAR 0 2
27158: PPUSH
27159: LD_VAR 0 7
27163: PPUSH
27164: CALL_OW 250
27168: PPUSH
27169: LD_VAR 0 7
27173: PPUSH
27174: CALL_OW 251
27178: PPUSH
27179: CALL_OW 114
27183: GO 27232
// begin temp_list = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
27185: LD_ADDR_VAR 0 4
27189: PUSH
27190: LD_VAR 0 6
27194: PPUSH
27195: LD_VAR 0 2
27199: PPUSH
27200: CALL 30167 0 2
27204: ST_TO_ADDR
// ComMoveXY ( i , temp_list [ 1 ] , temp_list [ 2 ] ) ;
27205: LD_VAR 0 2
27209: PPUSH
27210: LD_VAR 0 4
27214: PUSH
27215: LD_INT 1
27217: ARRAY
27218: PPUSH
27219: LD_VAR 0 4
27223: PUSH
27224: LD_INT 2
27226: ARRAY
27227: PPUSH
27228: CALL_OW 111
// end ; end ;
27232: GO 27111
27234: POP
27235: POP
// end else
27236: GO 27563
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , am_vehicle_defend_area ] ] ) ;
27238: LD_ADDR_VAR 0 4
27242: PUSH
27243: LD_INT 81
27245: PUSH
27246: LD_VAR 0 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 95
27257: PUSH
27258: LD_INT 11
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PPUSH
27269: CALL_OW 69
27273: ST_TO_ADDR
// temp_list = DangerousUnits ( temp_list ) ;
27274: LD_ADDR_VAR 0 4
27278: PUSH
27279: LD_VAR 0 4
27283: PPUSH
27284: CALL 40344 0 1
27288: ST_TO_ADDR
// if temp_list > 0 then
27289: LD_VAR 0 4
27293: PUSH
27294: LD_INT 0
27296: GREATER
27297: IFFALSE 27367
// begin for i in vehicles_list do
27299: LD_ADDR_VAR 0 2
27303: PUSH
27304: LD_VAR 0 8
27308: PUSH
27309: FOR_IN
27310: IFFALSE 27363
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
27312: LD_ADDR_VAR 0 7
27316: PUSH
27317: LD_VAR 0 4
27321: PPUSH
27322: LD_VAR 0 2
27326: PPUSH
27327: CALL_OW 74
27331: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27332: LD_VAR 0 2
27336: PPUSH
27337: LD_VAR 0 7
27341: PPUSH
27342: CALL_OW 250
27346: PPUSH
27347: LD_VAR 0 7
27351: PPUSH
27352: CALL_OW 251
27356: PPUSH
27357: CALL_OW 114
// end ;
27361: GO 27309
27363: POP
27364: POP
// end else
27365: GO 27563
// if destroy_gensher_base then
27367: LD_VAR 0 19
27371: IFFALSE 27563
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , gensher_base ] ] ) ;
27373: LD_ADDR_VAR 0 4
27377: PUSH
27378: LD_INT 81
27380: PUSH
27381: LD_VAR 0 1
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 95
27392: PUSH
27393: LD_INT 7
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PPUSH
27404: CALL_OW 69
27408: ST_TO_ADDR
// temp_list_2 = DangerousUnits ( temp_list ) ;
27409: LD_ADDR_VAR 0 17
27413: PUSH
27414: LD_VAR 0 4
27418: PPUSH
27419: CALL 40344 0 1
27423: ST_TO_ADDR
// if temp_list_2 > 0 then
27424: LD_VAR 0 17
27428: PUSH
27429: LD_INT 0
27431: GREATER
27432: IFFALSE 27502
// begin for i in vehicles_list do
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: LD_VAR 0 8
27443: PUSH
27444: FOR_IN
27445: IFFALSE 27498
// begin temp_unit = NearestUnitToUnit ( temp_list_2 , i ) ;
27447: LD_ADDR_VAR 0 7
27451: PUSH
27452: LD_VAR 0 17
27456: PPUSH
27457: LD_VAR 0 2
27461: PPUSH
27462: CALL_OW 74
27466: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27467: LD_VAR 0 2
27471: PPUSH
27472: LD_VAR 0 7
27476: PPUSH
27477: CALL_OW 250
27481: PPUSH
27482: LD_VAR 0 7
27486: PPUSH
27487: CALL_OW 251
27491: PPUSH
27492: CALL_OW 114
// end ;
27496: GO 27444
27498: POP
27499: POP
// end else
27500: GO 27563
// if temp_list > 0 then
27502: LD_VAR 0 4
27506: PUSH
27507: LD_INT 0
27509: GREATER
27510: IFFALSE 27563
// begin for i in vehicles_list do
27512: LD_ADDR_VAR 0 2
27516: PUSH
27517: LD_VAR 0 8
27521: PUSH
27522: FOR_IN
27523: IFFALSE 27561
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
27525: LD_ADDR_VAR 0 7
27529: PUSH
27530: LD_VAR 0 4
27534: PPUSH
27535: LD_VAR 0 2
27539: PPUSH
27540: CALL_OW 74
27544: ST_TO_ADDR
// ComAttackUnit ( i , temp_unit ) ;
27545: LD_VAR 0 2
27549: PPUSH
27550: LD_VAR 0 7
27554: PPUSH
27555: CALL_OW 115
// end ;
27559: GO 27522
27561: POP
27562: POP
// end ; end ; end ; until true ;
27563: LD_INT 1
27565: IFFALSE 26928
// end ; 2 :
27567: GO 28285
27569: LD_INT 2
27571: DOUBLE
27572: EQUAL
27573: IFTRUE 27577
27575: GO 27580
27577: POP
// begin end ; 3 :
27578: GO 28285
27580: LD_INT 3
27582: DOUBLE
27583: EQUAL
27584: IFTRUE 27588
27586: GO 28284
27588: POP
// begin temp_list = FilterAllUnits ( [ f_enemy , side ] ) ;
27589: LD_ADDR_VAR 0 4
27593: PUSH
27594: LD_INT 81
27596: PUSH
27597: LD_VAR 0 1
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PPUSH
27606: CALL_OW 69
27610: ST_TO_ADDR
// temp_list = ListFilterNearArea ( temp_list , GetBaseArea ( base ) ) ;
27611: LD_ADDR_VAR 0 4
27615: PUSH
27616: LD_VAR 0 4
27620: PPUSH
27621: LD_VAR 0 14
27625: PPUSH
27626: CALL 12282 0 1
27630: PPUSH
27631: CALL 23857 0 2
27635: ST_TO_ADDR
// temp_list = DangerousUnits ( temp_list ) ;
27636: LD_ADDR_VAR 0 4
27640: PUSH
27641: LD_VAR 0 4
27645: PPUSH
27646: CALL 40344 0 1
27650: ST_TO_ADDR
// temp_list_2 = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , Ru_backdoor_area ] ] ) ;
27651: LD_ADDR_VAR 0 17
27655: PUSH
27656: LD_INT 81
27658: PUSH
27659: LD_VAR 0 1
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 95
27670: PUSH
27671: LD_INT 13
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PPUSH
27682: CALL_OW 69
27686: ST_TO_ADDR
// temp_list_2 = DangerousUnits ( temp_list_2 ) ;
27687: LD_ADDR_VAR 0 17
27691: PUSH
27692: LD_VAR 0 17
27696: PPUSH
27697: CALL 40344 0 1
27701: ST_TO_ADDR
// temp_list_3 = [ [ 53 , 80 ] , [ 61 , 80 ] , [ 63 , 73 ] , [ 67 , 66 ] , [ 67 , 59 ] ] ;
27702: LD_ADDR_VAR 0 6
27706: PUSH
27707: LD_INT 53
27709: PUSH
27710: LD_INT 80
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 61
27719: PUSH
27720: LD_INT 80
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 63
27729: PUSH
27730: LD_INT 73
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 67
27739: PUSH
27740: LD_INT 66
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 67
27749: PUSH
27750: LD_INT 59
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: ST_TO_ADDR
// temp_list_4 = [ [ 53 , 80 ] , [ 61 , 91 ] , [ 70 , 97 ] , [ 78 , 99 ] , [ 88 , 98 ] ] ;
27764: LD_ADDR_VAR 0 20
27768: PUSH
27769: LD_INT 53
27771: PUSH
27772: LD_INT 80
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 61
27781: PUSH
27782: LD_INT 91
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 70
27791: PUSH
27792: LD_INT 97
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 78
27801: PUSH
27802: LD_INT 99
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 88
27811: PUSH
27812: LD_INT 98
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: ST_TO_ADDR
// if temp_list_2 >= temp_list then
27826: LD_VAR 0 17
27830: PUSH
27831: LD_VAR 0 4
27835: GREATEREQUAL
27836: IFFALSE 27979
// begin if temp_list_2 > 0 then
27838: LD_VAR 0 17
27842: PUSH
27843: LD_INT 0
27845: GREATER
27846: IFFALSE 27977
// begin for i in vehicles_list do
27848: LD_ADDR_VAR 0 2
27852: PUSH
27853: LD_VAR 0 8
27857: PUSH
27858: FOR_IN
27859: IFFALSE 27975
// if IsInArea ( i , Ru_base ) then
27861: LD_VAR 0 2
27865: PPUSH
27866: LD_INT 3
27868: PPUSH
27869: CALL_OW 308
27873: IFFALSE 27924
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
27875: LD_ADDR_VAR 0 21
27879: PUSH
27880: LD_VAR 0 6
27884: PPUSH
27885: LD_VAR 0 2
27889: PPUSH
27890: CALL 30167 0 2
27894: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
27895: LD_VAR 0 2
27899: PPUSH
27900: LD_VAR 0 21
27904: PUSH
27905: LD_INT 1
27907: ARRAY
27908: PPUSH
27909: LD_VAR 0 21
27913: PUSH
27914: LD_INT 2
27916: ARRAY
27917: PPUSH
27918: CALL_OW 114
// end else
27922: GO 27973
// begin temp_unit = NearestUnitToUnit ( temp_list_2 , i ) ;
27924: LD_ADDR_VAR 0 7
27928: PUSH
27929: LD_VAR 0 17
27933: PPUSH
27934: LD_VAR 0 2
27938: PPUSH
27939: CALL_OW 74
27943: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27944: LD_VAR 0 2
27948: PPUSH
27949: LD_VAR 0 7
27953: PPUSH
27954: CALL_OW 250
27958: PPUSH
27959: LD_VAR 0 7
27963: PPUSH
27964: CALL_OW 251
27968: PPUSH
27969: CALL_OW 114
// end ;
27973: GO 27858
27975: POP
27976: POP
// end ; end else
27977: GO 28282
// begin if temp_list > 0 then
27979: LD_VAR 0 4
27983: PUSH
27984: LD_INT 0
27986: GREATER
27987: IFFALSE 28282
// begin k = 0 ;
27989: LD_ADDR_VAR 0 12
27993: PUSH
27994: LD_INT 0
27996: ST_TO_ADDR
// for i in vehicles_list do
27997: LD_ADDR_VAR 0 2
28001: PUSH
28002: LD_VAR 0 8
28006: PUSH
28007: FOR_IN
28008: IFFALSE 28280
// begin k = k + 1 ;
28010: LD_ADDR_VAR 0 12
28014: PUSH
28015: LD_VAR 0 12
28019: PUSH
28020: LD_INT 1
28022: PLUS
28023: ST_TO_ADDR
// if k mod 2 = 0 then
28024: LD_VAR 0 12
28028: PUSH
28029: LD_INT 2
28031: MOD
28032: PUSH
28033: LD_INT 0
28035: EQUAL
28036: IFFALSE 28152
// begin if IsInArea ( i , Ru_base ) then
28038: LD_VAR 0 2
28042: PPUSH
28043: LD_INT 3
28045: PPUSH
28046: CALL_OW 308
28050: IFFALSE 28101
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
28052: LD_ADDR_VAR 0 21
28056: PUSH
28057: LD_VAR 0 6
28061: PPUSH
28062: LD_VAR 0 2
28066: PPUSH
28067: CALL 30167 0 2
28071: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28072: LD_VAR 0 2
28076: PPUSH
28077: LD_VAR 0 21
28081: PUSH
28082: LD_INT 1
28084: ARRAY
28085: PPUSH
28086: LD_VAR 0 21
28090: PUSH
28091: LD_INT 2
28093: ARRAY
28094: PPUSH
28095: CALL_OW 114
// end else
28099: GO 28150
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
28101: LD_ADDR_VAR 0 7
28105: PUSH
28106: LD_VAR 0 4
28110: PPUSH
28111: LD_VAR 0 2
28115: PPUSH
28116: CALL_OW 74
28120: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28121: LD_VAR 0 2
28125: PPUSH
28126: LD_VAR 0 7
28130: PPUSH
28131: CALL_OW 250
28135: PPUSH
28136: LD_VAR 0 7
28140: PPUSH
28141: CALL_OW 251
28145: PPUSH
28146: CALL_OW 114
// end ; end else
28150: GO 28278
// begin if IsInArea ( i , Ru_base ) or IsInArea ( i , Ru_base_south ) then
28152: LD_VAR 0 2
28156: PPUSH
28157: LD_INT 3
28159: PPUSH
28160: CALL_OW 308
28164: PUSH
28165: LD_VAR 0 2
28169: PPUSH
28170: LD_INT 19
28172: PPUSH
28173: CALL_OW 308
28177: OR
28178: IFFALSE 28229
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_4 , i ) ;
28180: LD_ADDR_VAR 0 21
28184: PUSH
28185: LD_VAR 0 20
28189: PPUSH
28190: LD_VAR 0 2
28194: PPUSH
28195: CALL 30167 0 2
28199: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28200: LD_VAR 0 2
28204: PPUSH
28205: LD_VAR 0 21
28209: PUSH
28210: LD_INT 1
28212: ARRAY
28213: PPUSH
28214: LD_VAR 0 21
28218: PUSH
28219: LD_INT 2
28221: ARRAY
28222: PPUSH
28223: CALL_OW 114
// end else
28227: GO 28278
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
28229: LD_ADDR_VAR 0 7
28233: PUSH
28234: LD_VAR 0 4
28238: PPUSH
28239: LD_VAR 0 2
28243: PPUSH
28244: CALL_OW 74
28248: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28249: LD_VAR 0 2
28253: PPUSH
28254: LD_VAR 0 7
28258: PPUSH
28259: CALL_OW 250
28263: PPUSH
28264: LD_VAR 0 7
28268: PPUSH
28269: CALL_OW 251
28273: PPUSH
28274: CALL_OW 114
// end ; end ; end ;
28278: GO 28007
28280: POP
28281: POP
// end ; end ; end ; end ;
28282: GO 28285
28284: POP
// end else
28285: GO 28674
// begin area = GetBaseArea ( base ) ;
28287: LD_ADDR_VAR 0 15
28291: PUSH
28292: LD_VAR 0 14
28296: PPUSH
28297: CALL 12282 0 1
28301: ST_TO_ADDR
// if IsOk ( ai_depot [ base ] ) then
28302: LD_EXP 34
28306: PUSH
28307: LD_VAR 0 14
28311: ARRAY
28312: PPUSH
28313: CALL_OW 302
28317: IFFALSE 28583
// begin temp_list = ai_refuel_vehicles_list [ base ] ;
28319: LD_ADDR_VAR 0 4
28323: PUSH
28324: LD_EXP 54
28328: PUSH
28329: LD_VAR 0 14
28333: ARRAY
28334: ST_TO_ADDR
// for i in ai_vehicles_defend [ base ] diff ai_refuel_vehicles_list [ base ] do
28335: LD_ADDR_VAR 0 2
28339: PUSH
28340: LD_EXP 39
28344: PUSH
28345: LD_VAR 0 14
28349: ARRAY
28350: PUSH
28351: LD_EXP 54
28355: PUSH
28356: LD_VAR 0 14
28360: ARRAY
28361: DIFF
28362: PUSH
28363: FOR_IN
28364: IFFALSE 28414
// if GetFuel ( i ) < 70 and GetEngine ( i ) = engine_combustion then
28366: LD_VAR 0 2
28370: PPUSH
28371: CALL_OW 261
28375: PUSH
28376: LD_INT 70
28378: LESS
28379: PUSH
28380: LD_VAR 0 2
28384: PPUSH
28385: CALL_OW 262
28389: PUSH
28390: LD_INT 1
28392: EQUAL
28393: AND
28394: IFFALSE 28412
// temp_list = temp_list ^ i ;
28396: LD_ADDR_VAR 0 4
28400: PUSH
28401: LD_VAR 0 4
28405: PUSH
28406: LD_VAR 0 2
28410: ADD
28411: ST_TO_ADDR
28412: GO 28363
28414: POP
28415: POP
// temp_list = temp_list diff ai_vehicles_being_repaired [ base ] ;
28416: LD_ADDR_VAR 0 4
28420: PUSH
28421: LD_VAR 0 4
28425: PUSH
28426: LD_EXP 79
28430: PUSH
28431: LD_VAR 0 14
28435: ARRAY
28436: DIFF
28437: ST_TO_ADDR
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
28438: LD_ADDR_EXP 54
28442: PUSH
28443: LD_EXP 54
28447: PPUSH
28448: LD_VAR 0 14
28452: PPUSH
28453: LD_VAR 0 4
28457: PPUSH
28458: CALL_OW 1
28462: ST_TO_ADDR
// for i in ai_refuel_vehicles_list [ base ] do
28463: LD_ADDR_VAR 0 2
28467: PUSH
28468: LD_EXP 54
28472: PUSH
28473: LD_VAR 0 14
28477: ARRAY
28478: PUSH
28479: FOR_IN
28480: IFFALSE 28581
// begin if IsInArea ( i , area ) then
28482: LD_VAR 0 2
28486: PPUSH
28487: LD_VAR 0 15
28491: PPUSH
28492: CALL_OW 308
28496: IFFALSE 28540
// begin ComMoveUnit ( i , ai_depot [ base ] ) ;
28498: LD_VAR 0 2
28502: PPUSH
28503: LD_EXP 34
28507: PUSH
28508: LD_VAR 0 14
28512: ARRAY
28513: PPUSH
28514: CALL_OW 112
// AddComRefuel ( i , ai_depot [ base ] ) ;
28518: LD_VAR 0 2
28522: PPUSH
28523: LD_EXP 34
28527: PUSH
28528: LD_VAR 0 14
28532: ARRAY
28533: PPUSH
28534: CALL_OW 210
// end else
28538: GO 28579
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
28540: LD_VAR 0 2
28544: PPUSH
28545: LD_EXP 41
28549: PUSH
28550: LD_VAR 0 14
28554: ARRAY
28555: PUSH
28556: LD_INT 1
28558: ARRAY
28559: PPUSH
28560: LD_EXP 41
28564: PUSH
28565: LD_VAR 0 14
28569: ARRAY
28570: PUSH
28571: LD_INT 2
28573: ARRAY
28574: PPUSH
28575: CALL_OW 114
// end ;
28579: GO 28479
28581: POP
28582: POP
// end ; for i in ai_vehicles_defend [ base ] diff ai_refuel_vehicles_list [ base ] do
28583: LD_ADDR_VAR 0 2
28587: PUSH
28588: LD_EXP 39
28592: PUSH
28593: LD_VAR 0 14
28597: ARRAY
28598: PUSH
28599: LD_EXP 54
28603: PUSH
28604: LD_VAR 0 14
28608: ARRAY
28609: DIFF
28610: PUSH
28611: FOR_IN
28612: IFFALSE 28672
// if not IsInArea ( i , area ) then
28614: LD_VAR 0 2
28618: PPUSH
28619: LD_VAR 0 15
28623: PPUSH
28624: CALL_OW 308
28628: NOT
28629: IFFALSE 28670
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
28631: LD_VAR 0 2
28635: PPUSH
28636: LD_EXP 41
28640: PUSH
28641: LD_VAR 0 14
28645: ARRAY
28646: PUSH
28647: LD_INT 1
28649: ARRAY
28650: PPUSH
28651: LD_EXP 41
28655: PUSH
28656: LD_VAR 0 14
28660: ARRAY
28661: PUSH
28662: LD_INT 2
28664: ARRAY
28665: PPUSH
28666: CALL_OW 114
28670: GO 28611
28672: POP
28673: POP
// end ; if mechanics_list = 0 and remote_mechanics = 0 then
28674: LD_VAR 0 3
28678: PUSH
28679: LD_INT 0
28681: EQUAL
28682: PUSH
28683: LD_VAR 0 18
28687: PUSH
28688: LD_INT 0
28690: EQUAL
28691: AND
28692: IFFALSE 28696
// continue ;
28694: GO 25409
// allowed_to_repair_vehicles = UnitFilter ( ai_vehicles_defend [ base ] ^ ( ai_crane [ base ] diff 0 ) , [ [ f_not , [ f_lives , 1000 ] ] , [ f_inarea , GetBaseArea ( base ) ] ] ) ;
28696: LD_ADDR_VAR 0 9
28700: PUSH
28701: LD_EXP 39
28705: PUSH
28706: LD_VAR 0 14
28710: ARRAY
28711: PUSH
28712: LD_EXP 70
28716: PUSH
28717: LD_VAR 0 14
28721: ARRAY
28722: PUSH
28723: LD_INT 0
28725: DIFF
28726: ADD
28727: PPUSH
28728: LD_INT 3
28730: PUSH
28731: LD_INT 24
28733: PUSH
28734: LD_INT 1000
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 95
28747: PUSH
28748: LD_VAR 0 14
28752: PPUSH
28753: CALL 12282 0 1
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PPUSH
28766: CALL_OW 72
28770: ST_TO_ADDR
// if not under_attack then
28771: LD_VAR 0 10
28775: NOT
28776: IFFALSE 28847
// allowed_to_repair_vehicles = allowed_to_repair_vehicles ^ UnitFilter ( ai_cargo_bay [ base ] diff 0 , [ [ f_not , [ f_lives , 1000 ] ] , [ f_inarea , GetBaseArea ( base ) ] ] ) ;
28778: LD_ADDR_VAR 0 9
28782: PUSH
28783: LD_VAR 0 9
28787: PUSH
28788: LD_EXP 60
28792: PUSH
28793: LD_VAR 0 14
28797: ARRAY
28798: PUSH
28799: LD_INT 0
28801: DIFF
28802: PPUSH
28803: LD_INT 3
28805: PUSH
28806: LD_INT 24
28808: PUSH
28809: LD_INT 1000
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 95
28822: PUSH
28823: LD_VAR 0 14
28827: PPUSH
28828: CALL 12282 0 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PPUSH
28841: CALL_OW 72
28845: ADD
28846: ST_TO_ADDR
// allowed_to_repair_vehicles = allowed_to_repair_vehicles diff ( ai_refuel_vehicles_list [ base ] ^ ai_vehicles_being_repaired [ base ] ) ;
28847: LD_ADDR_VAR 0 9
28851: PUSH
28852: LD_VAR 0 9
28856: PUSH
28857: LD_EXP 54
28861: PUSH
28862: LD_VAR 0 14
28866: ARRAY
28867: PUSH
28868: LD_EXP 79
28872: PUSH
28873: LD_VAR 0 14
28877: ARRAY
28878: ADD
28879: DIFF
28880: ST_TO_ADDR
// if allowed_to_repair_vehicles > 0 or ai_vehicles_being_repaired [ base ] > 0 then
28881: LD_VAR 0 9
28885: PUSH
28886: LD_INT 0
28888: GREATER
28889: PUSH
28890: LD_EXP 79
28894: PUSH
28895: LD_VAR 0 14
28899: ARRAY
28900: PUSH
28901: LD_INT 0
28903: GREATER
28904: OR
28905: IFFALSE 29407
// begin if remote_mechanics > 0 then
28907: LD_VAR 0 18
28911: PUSH
28912: LD_INT 0
28914: GREATER
28915: IFFALSE 29151
// begin if under_attack then
28917: LD_VAR 0 10
28921: IFFALSE 29029
// begin for i in remote_driver_vehicles [ base ] do
28923: LD_ADDR_VAR 0 2
28927: PUSH
28928: LD_VAR 0 24
28932: PUSH
28933: LD_VAR 0 14
28937: ARRAY
28938: PUSH
28939: FOR_IN
28940: IFFALSE 29025
// if UnitFilter ( i [ 2 ] , [ f_ok ] ) = 0 and i [ 1 ] in remote_mechanics then
28942: LD_VAR 0 2
28946: PUSH
28947: LD_INT 2
28949: ARRAY
28950: PPUSH
28951: LD_INT 50
28953: PUSH
28954: EMPTY
28955: LIST
28956: PPUSH
28957: CALL_OW 72
28961: PUSH
28962: LD_INT 0
28964: EQUAL
28965: PUSH
28966: LD_VAR 0 2
28970: PUSH
28971: LD_INT 1
28973: ARRAY
28974: PUSH
28975: LD_VAR 0 18
28979: IN
28980: AND
28981: IFFALSE 29023
// begin mechanics_list = mechanics_list ^ i [ 1 ] ;
28983: LD_ADDR_VAR 0 3
28987: PUSH
28988: LD_VAR 0 3
28992: PUSH
28993: LD_VAR 0 2
28997: PUSH
28998: LD_INT 1
29000: ARRAY
29001: ADD
29002: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff i [ 1 ] ;
29003: LD_ADDR_VAR 0 18
29007: PUSH
29008: LD_VAR 0 18
29012: PUSH
29013: LD_VAR 0 2
29017: PUSH
29018: LD_INT 1
29020: ARRAY
29021: DIFF
29022: ST_TO_ADDR
// end ;
29023: GO 28939
29025: POP
29026: POP
// end else
29027: GO 29151
// begin temp_unit = true ;
29029: LD_ADDR_VAR 0 7
29033: PUSH
29034: LD_INT 1
29036: ST_TO_ADDR
// for i in remote_driver_vehicles [ base ] do
29037: LD_ADDR_VAR 0 2
29041: PUSH
29042: LD_VAR 0 24
29046: PUSH
29047: LD_VAR 0 14
29051: ARRAY
29052: PUSH
29053: FOR_IN
29054: IFFALSE 29120
// begin for k in i [ 2 ] do
29056: LD_ADDR_VAR 0 12
29060: PUSH
29061: LD_VAR 0 2
29065: PUSH
29066: LD_INT 2
29068: ARRAY
29069: PUSH
29070: FOR_IN
29071: IFFALSE 29107
// if not IsInArea ( k , GetBaseArea ( base ) ) then
29073: LD_VAR 0 12
29077: PPUSH
29078: LD_VAR 0 14
29082: PPUSH
29083: CALL 12282 0 1
29087: PPUSH
29088: CALL_OW 308
29092: NOT
29093: IFFALSE 29105
// begin temp_unit = false ;
29095: LD_ADDR_VAR 0 7
29099: PUSH
29100: LD_INT 0
29102: ST_TO_ADDR
// break ;
29103: GO 29107
// end ;
29105: GO 29070
29107: POP
29108: POP
// if not temp_unit then
29109: LD_VAR 0 7
29113: NOT
29114: IFFALSE 29118
// break ;
29116: GO 29120
// end ;
29118: GO 29053
29120: POP
29121: POP
// if temp_unit then
29122: LD_VAR 0 7
29126: IFFALSE 29151
// begin mechanics_list = mechanics_list ^ remote_mechanics ;
29128: LD_ADDR_VAR 0 3
29132: PUSH
29133: LD_VAR 0 3
29137: PUSH
29138: LD_VAR 0 18
29142: ADD
29143: ST_TO_ADDR
// remote_mechanics = [ ] ;
29144: LD_ADDR_VAR 0 18
29148: PUSH
29149: EMPTY
29150: ST_TO_ADDR
// end ; end ; end ; if allowed_to_repair_vehicles > 0 then
29151: LD_VAR 0 9
29155: PUSH
29156: LD_INT 0
29158: GREATER
29159: IFFALSE 29376
// begin k = false ;
29161: LD_ADDR_VAR 0 12
29165: PUSH
29166: LD_INT 0
29168: ST_TO_ADDR
// if ai_vehicles_being_repaired [ base ] = 0 then
29169: LD_EXP 79
29173: PUSH
29174: LD_VAR 0 14
29178: ARRAY
29179: PUSH
29180: LD_INT 0
29182: EQUAL
29183: IFFALSE 29195
// k = true else
29185: LD_ADDR_VAR 0 12
29189: PUSH
29190: LD_INT 1
29192: ST_TO_ADDR
29193: GO 29258
// if IsOk ( ai_vehicles_being_repaired [ base ] [ 1 ] ) then
29195: LD_EXP 79
29199: PUSH
29200: LD_VAR 0 14
29204: ARRAY
29205: PUSH
29206: LD_INT 1
29208: ARRAY
29209: PPUSH
29210: CALL_OW 302
29214: IFFALSE 29258
// begin allowed_to_repair_vehicles = UnitFilter ( allowed_to_repair_vehicles , [ f_not , [ f_ok ] ] ) ;
29216: LD_ADDR_VAR 0 9
29220: PUSH
29221: LD_VAR 0 9
29225: PPUSH
29226: LD_INT 3
29228: PUSH
29229: LD_INT 50
29231: PUSH
29232: EMPTY
29233: LIST
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PPUSH
29239: CALL_OW 72
29243: ST_TO_ADDR
// k := allowed_to_repair_vehicles > 0 ;
29244: LD_ADDR_VAR 0 12
29248: PUSH
29249: LD_VAR 0 9
29253: PUSH
29254: LD_INT 0
29256: GREATER
29257: ST_TO_ADDR
// end ; if k then
29258: LD_VAR 0 12
29262: IFFALSE 29376
// begin temp_list = [ ] ;
29264: LD_ADDR_VAR 0 4
29268: PUSH
29269: EMPTY
29270: ST_TO_ADDR
// for i in allowed_to_repair_vehicles do
29271: LD_ADDR_VAR 0 2
29275: PUSH
29276: LD_VAR 0 9
29280: PUSH
29281: FOR_IN
29282: IFFALSE 29307
// temp_list = temp_list ^ GetLives ( i ) ;
29284: LD_ADDR_VAR 0 4
29288: PUSH
29289: LD_VAR 0 4
29293: PUSH
29294: LD_VAR 0 2
29298: PPUSH
29299: CALL_OW 256
29303: ADD
29304: ST_TO_ADDR
29305: GO 29281
29307: POP
29308: POP
// temp_unit = WorstFromListByList ( allowed_to_repair_vehicles , temp_list ) ;
29309: LD_ADDR_VAR 0 7
29313: PUSH
29314: LD_VAR 0 9
29318: PPUSH
29319: LD_VAR 0 4
29323: PPUSH
29324: CALL_OW 78
29328: ST_TO_ADDR
// temp_list = temp_unit ^ ai_vehicles_being_repaired [ base ] ;
29329: LD_ADDR_VAR 0 4
29333: PUSH
29334: LD_VAR 0 7
29338: PUSH
29339: LD_EXP 79
29343: PUSH
29344: LD_VAR 0 14
29348: ARRAY
29349: ADD
29350: ST_TO_ADDR
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
29351: LD_ADDR_EXP 79
29355: PUSH
29356: LD_EXP 79
29360: PPUSH
29361: LD_VAR 0 14
29365: PPUSH
29366: LD_VAR 0 4
29370: PPUSH
29371: CALL_OW 1
29375: ST_TO_ADDR
// end ; end ; ComRepairVehicle ( GetHumansOutOfUnits ( mechanics_list ) , ai_vehicles_being_repaired [ base ] [ 1 ] ) ;
29376: LD_VAR 0 3
29380: PPUSH
29381: CALL 23168 0 1
29385: PPUSH
29386: LD_EXP 79
29390: PUSH
29391: LD_VAR 0 14
29395: ARRAY
29396: PUSH
29397: LD_INT 1
29399: ARRAY
29400: PPUSH
29401: CALL_OW 129
// end else
29405: GO 29472
// begin DistributeHumansToBuildings ( base , mechanics_list , UnitFilter ( ai_facts [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_mechanic , 6 , true , false ) ;
29407: LD_VAR 0 14
29411: PPUSH
29412: LD_VAR 0 3
29416: PPUSH
29417: LD_EXP 47
29421: PUSH
29422: LD_VAR 0 14
29426: ARRAY
29427: PPUSH
29428: LD_INT 50
29430: PUSH
29431: EMPTY
29432: LIST
29433: PUSH
29434: LD_INT 3
29436: PUSH
29437: LD_INT 57
29439: PUSH
29440: EMPTY
29441: LIST
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PPUSH
29451: CALL_OW 72
29455: PPUSH
29456: LD_INT 3
29458: PPUSH
29459: LD_INT 6
29461: PPUSH
29462: LD_INT 1
29464: PPUSH
29465: LD_INT 0
29467: PPUSH
29468: CALL 15239 0 7
// end ; if remote_driver_vehicles [ base ] > 0 then
29472: LD_VAR 0 24
29476: PUSH
29477: LD_VAR 0 14
29481: ARRAY
29482: PUSH
29483: LD_INT 0
29485: GREATER
29486: IFFALSE 30022
// begin if not IsOk ( ai_control_tower [ base ] ) then
29488: LD_EXP 56
29492: PUSH
29493: LD_VAR 0 14
29497: ARRAY
29498: PPUSH
29499: CALL_OW 302
29503: NOT
29504: IFFALSE 29573
// begin DistributeHumansToBuildings ( base , remote_mechanics , UnitFilter ( ai_facts [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_mechanic , 6 , true , false ) ;
29506: LD_VAR 0 14
29510: PPUSH
29511: LD_VAR 0 18
29515: PPUSH
29516: LD_EXP 47
29520: PUSH
29521: LD_VAR 0 14
29525: ARRAY
29526: PPUSH
29527: LD_INT 50
29529: PUSH
29530: EMPTY
29531: LIST
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: LD_INT 57
29538: PUSH
29539: EMPTY
29540: LIST
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PPUSH
29550: CALL_OW 72
29554: PPUSH
29555: LD_INT 3
29557: PPUSH
29558: LD_INT 6
29560: PPUSH
29561: LD_INT 1
29563: PPUSH
29564: LD_INT 0
29566: PPUSH
29567: CALL 15239 0 7
// end else
29571: GO 30022
// begin for i in remote_driver_vehicles [ base ] do
29573: LD_ADDR_VAR 0 2
29577: PUSH
29578: LD_VAR 0 24
29582: PUSH
29583: LD_VAR 0 14
29587: ARRAY
29588: PUSH
29589: FOR_IN
29590: IFFALSE 30020
// begin if not i [ 1 ] in remote_mechanics then
29592: LD_VAR 0 2
29596: PUSH
29597: LD_INT 1
29599: ARRAY
29600: PUSH
29601: LD_VAR 0 18
29605: IN
29606: NOT
29607: IFFALSE 29611
// continue ;
29609: GO 29589
// if GetClass ( i [ 1 ] ) <> class_mechanic then
29611: LD_VAR 0 2
29615: PUSH
29616: LD_INT 1
29618: ARRAY
29619: PPUSH
29620: CALL_OW 257
29624: PUSH
29625: LD_INT 3
29627: NONEQUAL
29628: IFFALSE 29836
// begin temp_unit = 0 ;
29630: LD_ADDR_VAR 0 7
29634: PUSH
29635: LD_INT 0
29637: ST_TO_ADDR
// for k in ai_facts [ base ] do
29638: LD_ADDR_VAR 0 12
29642: PUSH
29643: LD_EXP 47
29647: PUSH
29648: LD_VAR 0 14
29652: ARRAY
29653: PUSH
29654: FOR_IN
29655: IFFALSE 29697
// if IsOk ( k ) and UnitsInside ( k ) < 6 then
29657: LD_VAR 0 12
29661: PPUSH
29662: CALL_OW 302
29666: PUSH
29667: LD_VAR 0 12
29671: PPUSH
29672: CALL_OW 313
29676: PUSH
29677: LD_INT 6
29679: LESS
29680: AND
29681: IFFALSE 29695
// begin temp_unit = k ;
29683: LD_ADDR_VAR 0 7
29687: PUSH
29688: LD_VAR 0 12
29692: ST_TO_ADDR
// break ;
29693: GO 29697
// end ;
29695: GO 29654
29697: POP
29698: POP
// if temp_unit > 0 then
29699: LD_VAR 0 7
29703: PUSH
29704: LD_INT 0
29706: GREATER
29707: IFFALSE 29834
// begin if IsInUnit ( i [ 1 ] ) = temp_unit then
29709: LD_VAR 0 2
29713: PUSH
29714: LD_INT 1
29716: ARRAY
29717: PPUSH
29718: CALL_OW 310
29722: PUSH
29723: LD_VAR 0 7
29727: EQUAL
29728: IFFALSE 29748
// ComChangeProfession ( i [ 1 ] , class_mechanic ) else
29730: LD_VAR 0 2
29734: PUSH
29735: LD_INT 1
29737: ARRAY
29738: PPUSH
29739: LD_INT 3
29741: PPUSH
29742: CALL_OW 123
29746: GO 29834
// begin case GetType ( IsInUnit ( i [ 1 ] ) ) of unit_building :
29748: LD_VAR 0 2
29752: PUSH
29753: LD_INT 1
29755: ARRAY
29756: PPUSH
29757: CALL_OW 310
29761: PPUSH
29762: CALL_OW 247
29766: PUSH
29767: LD_INT 3
29769: DOUBLE
29770: EQUAL
29771: IFTRUE 29775
29773: GO 29791
29775: POP
// ComExitBuilding ( i [ 1 ] ) ; unit_vehicle :
29776: LD_VAR 0 2
29780: PUSH
29781: LD_INT 1
29783: ARRAY
29784: PPUSH
29785: CALL_OW 122
29789: GO 29834
29791: LD_INT 2
29793: DOUBLE
29794: EQUAL
29795: IFTRUE 29799
29797: GO 29815
29799: POP
// ComExitVehicle ( i [ 1 ] ) ; else
29800: LD_VAR 0 2
29804: PUSH
29805: LD_INT 1
29807: ARRAY
29808: PPUSH
29809: CALL_OW 121
29813: GO 29834
29815: POP
// ComEnterUnit ( i [ 1 ] , temp_unit ) ; end ;
29816: LD_VAR 0 2
29820: PUSH
29821: LD_INT 1
29823: ARRAY
29824: PPUSH
29825: LD_VAR 0 7
29829: PPUSH
29830: CALL_OW 120
// end ; end ; end else
29834: GO 30018
// begin temp_unit = IsInUnit ( i [ 1 ] ) ;
29836: LD_ADDR_VAR 0 7
29840: PUSH
29841: LD_VAR 0 2
29845: PUSH
29846: LD_INT 1
29848: ARRAY
29849: PPUSH
29850: CALL_OW 310
29854: ST_TO_ADDR
// if temp_unit <> ai_control_tower [ base ] then
29855: LD_VAR 0 7
29859: PUSH
29860: LD_EXP 56
29864: PUSH
29865: LD_VAR 0 14
29869: ARRAY
29870: NONEQUAL
29871: IFFALSE 29958
// begin case GetType ( temp_unit ) of unit_building :
29873: LD_VAR 0 7
29877: PPUSH
29878: CALL_OW 247
29882: PUSH
29883: LD_INT 3
29885: DOUBLE
29886: EQUAL
29887: IFTRUE 29891
29889: GO 29907
29891: POP
// ComExitBuilding ( i [ 1 ] ) ; unit_vehicle :
29892: LD_VAR 0 2
29896: PUSH
29897: LD_INT 1
29899: ARRAY
29900: PPUSH
29901: CALL_OW 122
29905: GO 29956
29907: LD_INT 2
29909: DOUBLE
29910: EQUAL
29911: IFTRUE 29915
29913: GO 29931
29915: POP
// ComExitVehicle ( i [ 1 ] ) ; else
29916: LD_VAR 0 2
29920: PUSH
29921: LD_INT 1
29923: ARRAY
29924: PPUSH
29925: CALL_OW 121
29929: GO 29956
29931: POP
// ComEnterUnit ( i [ 1 ] , ai_control_tower [ base ] ) ; end ;
29932: LD_VAR 0 2
29936: PUSH
29937: LD_INT 1
29939: ARRAY
29940: PPUSH
29941: LD_EXP 56
29945: PUSH
29946: LD_VAR 0 14
29950: ARRAY
29951: PPUSH
29952: CALL_OW 120
// end else
29956: GO 30018
// for k in i [ 2 ] do
29958: LD_ADDR_VAR 0 12
29962: PUSH
29963: LD_VAR 0 2
29967: PUSH
29968: LD_INT 2
29970: ARRAY
29971: PUSH
29972: FOR_IN
29973: IFFALSE 30016
// if IsControledBy ( k ) <> i [ 1 ] then
29975: LD_VAR 0 12
29979: PPUSH
29980: CALL_OW 312
29984: PUSH
29985: LD_VAR 0 2
29989: PUSH
29990: LD_INT 1
29992: ARRAY
29993: NONEQUAL
29994: IFFALSE 30014
// ComLinkTo ( k , i [ 1 ] ) ;
29996: LD_VAR 0 12
30000: PPUSH
30001: LD_VAR 0 2
30005: PUSH
30006: LD_INT 1
30008: ARRAY
30009: PPUSH
30010: CALL_OW 135
30014: GO 29972
30016: POP
30017: POP
// end ; end ;
30018: GO 29589
30020: POP
30021: POP
// end ; end ; end ;
30022: GO 25409
30024: POP
30025: POP
// until false ;
30026: LD_INT 0
30028: IFFALSE 25392
// end ;
30030: PPOPN 24
30032: END
// function MaxNumWarVehicles ( base ) ; begin
30033: LD_INT 0
30035: PPUSH
// case base of 1 :
30036: LD_VAR 0 1
30040: PUSH
30041: LD_INT 1
30043: DOUBLE
30044: EQUAL
30045: IFTRUE 30049
30047: GO 30106
30049: POP
// result = WorstFromListByList ( [ ai_mechanics_defend [ base ] + 0 , 3 ] , [ ai_mechanics_defend [ base ] + 0 , 3 ] ) ; 2 :
30050: LD_ADDR_VAR 0 2
30054: PUSH
30055: LD_EXP 31
30059: PUSH
30060: LD_VAR 0 1
30064: ARRAY
30065: PUSH
30066: LD_INT 0
30068: PLUS
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PPUSH
30077: LD_EXP 31
30081: PUSH
30082: LD_VAR 0 1
30086: ARRAY
30087: PUSH
30088: LD_INT 0
30090: PLUS
30091: PUSH
30092: LD_INT 3
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 78
30103: ST_TO_ADDR
30104: GO 30162
30106: LD_INT 2
30108: DOUBLE
30109: EQUAL
30110: IFTRUE 30114
30112: GO 30125
30114: POP
// result = 0 ; 3 :
30115: LD_ADDR_VAR 0 2
30119: PUSH
30120: LD_INT 0
30122: ST_TO_ADDR
30123: GO 30162
30125: LD_INT 3
30127: DOUBLE
30128: EQUAL
30129: IFTRUE 30133
30131: GO 30161
30133: POP
// result = [ 3 , 4 , 5 ] [ difficulty ] ; end ;
30134: LD_ADDR_VAR 0 2
30138: PUSH
30139: LD_INT 3
30141: PUSH
30142: LD_INT 4
30144: PUSH
30145: LD_INT 5
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: LIST
30152: PUSH
30153: LD_OWVAR 67
30157: ARRAY
30158: ST_TO_ADDR
30159: GO 30162
30161: POP
// end ;
30162: LD_VAR 0 2
30166: RET
// function FindNextHexOldWaypointSystem ( waypoints , un ) ; var dist , k , num , temp ; begin
30167: LD_INT 0
30169: PPUSH
30170: PPUSH
30171: PPUSH
30172: PPUSH
30173: PPUSH
// dist = GetDistUnitXY ( un , waypoints [ 1 ] [ 1 ] , waypoints [ 1 ] [ 2 ] ) ;
30174: LD_ADDR_VAR 0 4
30178: PUSH
30179: LD_VAR 0 2
30183: PPUSH
30184: LD_VAR 0 1
30188: PUSH
30189: LD_INT 1
30191: ARRAY
30192: PUSH
30193: LD_INT 1
30195: ARRAY
30196: PPUSH
30197: LD_VAR 0 1
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: PUSH
30206: LD_INT 2
30208: ARRAY
30209: PPUSH
30210: CALL_OW 297
30214: ST_TO_ADDR
// num = 1 ;
30215: LD_ADDR_VAR 0 6
30219: PUSH
30220: LD_INT 1
30222: ST_TO_ADDR
// for k = 2 to waypoints do
30223: LD_ADDR_VAR 0 5
30227: PUSH
30228: DOUBLE
30229: LD_INT 2
30231: DEC
30232: ST_TO_ADDR
30233: LD_VAR 0 1
30237: PUSH
30238: FOR_TO
30239: IFFALSE 30320
// begin temp = GetDistUnitXY ( un , waypoints [ k ] [ 1 ] , waypoints [ k ] [ 2 ] ) ;
30241: LD_ADDR_VAR 0 7
30245: PUSH
30246: LD_VAR 0 2
30250: PPUSH
30251: LD_VAR 0 1
30255: PUSH
30256: LD_VAR 0 5
30260: ARRAY
30261: PUSH
30262: LD_INT 1
30264: ARRAY
30265: PPUSH
30266: LD_VAR 0 1
30270: PUSH
30271: LD_VAR 0 5
30275: ARRAY
30276: PUSH
30277: LD_INT 2
30279: ARRAY
30280: PPUSH
30281: CALL_OW 297
30285: ST_TO_ADDR
// if temp < dist then
30286: LD_VAR 0 7
30290: PUSH
30291: LD_VAR 0 4
30295: LESS
30296: IFFALSE 30318
// begin dist = temp ;
30298: LD_ADDR_VAR 0 4
30302: PUSH
30303: LD_VAR 0 7
30307: ST_TO_ADDR
// num = k ;
30308: LD_ADDR_VAR 0 6
30312: PUSH
30313: LD_VAR 0 5
30317: ST_TO_ADDR
// end ; end ;
30318: GO 30238
30320: POP
30321: POP
// if num < waypoints + 0 then
30322: LD_VAR 0 6
30326: PUSH
30327: LD_VAR 0 1
30331: PUSH
30332: LD_INT 0
30334: PLUS
30335: LESS
30336: IFFALSE 30352
// num = num + 1 ;
30338: LD_ADDR_VAR 0 6
30342: PUSH
30343: LD_VAR 0 6
30347: PUSH
30348: LD_INT 1
30350: PLUS
30351: ST_TO_ADDR
// result = waypoints [ num ] ;
30352: LD_ADDR_VAR 0 3
30356: PUSH
30357: LD_VAR 0 1
30361: PUSH
30362: LD_VAR 0 6
30366: ARRAY
30367: ST_TO_ADDR
// end ;
30368: LD_VAR 0 3
30372: RET
// every 0 0$1 + 0 0$0.1 do var i , temp_value , temp_unit , temp_list , base , idle_factories , fact ; var vehicle_prod_delay ;
30373: GO 30375
30375: DISABLE
30376: LD_INT 0
30378: PPUSH
30379: PPUSH
30380: PPUSH
30381: PPUSH
30382: PPUSH
30383: PPUSH
30384: PPUSH
30385: PPUSH
// begin vehicle_prod_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
30386: LD_ADDR_VAR 0 8
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30405: LD_INT 35
30407: PPUSH
30408: CALL_OW 67
// for base in ai_bases do
30412: LD_ADDR_VAR 0 5
30416: PUSH
30417: LD_EXP 58
30421: PUSH
30422: FOR_IN
30423: IFFALSE 31249
// begin if ContactTime ( GetBaseSide ( base ) ) <= 0 0$10 and ai_vehicles_defend [ base ] >= [ 0 , 1 , 2 ] [ difficulty ] then
30425: LD_VAR 0 5
30429: PPUSH
30430: CALL 12353 0 1
30434: PPUSH
30435: CALL_OW 462
30439: PUSH
30440: LD_INT 350
30442: LESSEQUAL
30443: PUSH
30444: LD_EXP 39
30448: PUSH
30449: LD_VAR 0 5
30453: ARRAY
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: LIST
30468: PUSH
30469: LD_OWVAR 67
30473: ARRAY
30474: GREATEREQUAL
30475: AND
30476: IFFALSE 30518
// begin vehicle_prod_delay = Replace ( vehicle_prod_delay , base , [ 1 1$15 , 0 0$45 , 0 0$30 ] [ difficulty ] ) ;
30478: LD_ADDR_VAR 0 8
30482: PUSH
30483: LD_VAR 0 8
30487: PPUSH
30488: LD_VAR 0 5
30492: PPUSH
30493: LD_INT 2625
30495: PUSH
30496: LD_INT 1575
30498: PUSH
30499: LD_INT 1050
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: LIST
30506: PUSH
30507: LD_OWVAR 67
30511: ARRAY
30512: PPUSH
30513: CALL_OW 1
30517: ST_TO_ADDR
// end ; idle_factories = [ ] ;
30518: LD_ADDR_VAR 0 6
30522: PUSH
30523: EMPTY
30524: ST_TO_ADDR
// for i in ai_facts [ base ] do
30525: LD_ADDR_VAR 0 1
30529: PUSH
30530: LD_EXP 47
30534: PUSH
30535: LD_VAR 0 5
30539: ARRAY
30540: PUSH
30541: FOR_IN
30542: IFFALSE 30603
// if BuildingStatus ( i ) = bs_idle and IsOk ( i ) and GetBType ( i ) = b_factory then
30544: LD_VAR 0 1
30548: PPUSH
30549: CALL_OW 461
30553: PUSH
30554: LD_INT 2
30556: EQUAL
30557: PUSH
30558: LD_VAR 0 1
30562: PPUSH
30563: CALL_OW 302
30567: AND
30568: PUSH
30569: LD_VAR 0 1
30573: PPUSH
30574: CALL_OW 266
30578: PUSH
30579: LD_INT 3
30581: EQUAL
30582: AND
30583: IFFALSE 30601
// idle_factories = idle_factories ^ i ;
30585: LD_ADDR_VAR 0 6
30589: PUSH
30590: LD_VAR 0 6
30594: PUSH
30595: LD_VAR 0 1
30599: ADD
30600: ST_TO_ADDR
30601: GO 30541
30603: POP
30604: POP
// if idle_factories = 0 then
30605: LD_VAR 0 6
30609: PUSH
30610: LD_INT 0
30612: EQUAL
30613: IFFALSE 30617
// continue ;
30615: GO 30422
// temp_value = false ;
30617: LD_ADDR_VAR 0 2
30621: PUSH
30622: LD_INT 0
30624: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
30625: LD_ADDR_VAR 0 1
30629: PUSH
30630: LD_EXP 38
30634: PUSH
30635: LD_VAR 0 5
30639: ARRAY
30640: PUSH
30641: FOR_IN
30642: IFFALSE 30814
// if i [ 4 ] in [ b_bunker , b_turret ] then
30644: LD_VAR 0 1
30648: PUSH
30649: LD_INT 4
30651: ARRAY
30652: PUSH
30653: LD_INT 32
30655: PUSH
30656: LD_INT 33
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: IN
30663: IFFALSE 30812
// begin temp_unit = HexInfo ( i [ 1 ] , i [ 2 ] ) ;
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_VAR 0 1
30674: PUSH
30675: LD_INT 1
30677: ARRAY
30678: PPUSH
30679: LD_VAR 0 1
30683: PUSH
30684: LD_INT 2
30686: ARRAY
30687: PPUSH
30688: CALL_OW 428
30692: ST_TO_ADDR
// if GetBType ( temp_unit ) in [ b_bunker , b_turret ] and not IsConstructed ( temp_unit ) and GetBWeapon ( temp_unit ) <> i [ 7 ] then
30693: LD_VAR 0 3
30697: PPUSH
30698: CALL_OW 266
30702: PUSH
30703: LD_INT 32
30705: PUSH
30706: LD_INT 33
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: IN
30713: PUSH
30714: LD_VAR 0 3
30718: PPUSH
30719: CALL_OW 304
30723: NOT
30724: AND
30725: PUSH
30726: LD_VAR 0 3
30730: PPUSH
30731: CALL_OW 269
30735: PUSH
30736: LD_VAR 0 1
30740: PUSH
30741: LD_INT 7
30743: ARRAY
30744: NONEQUAL
30745: AND
30746: IFFALSE 30804
// for fact in idle_factories do
30748: LD_ADDR_VAR 0 7
30752: PUSH
30753: LD_VAR 0 6
30757: PUSH
30758: FOR_IN
30759: IFFALSE 30802
// if IsWeaponFactory ( fact ) then
30761: LD_VAR 0 7
30765: PPUSH
30766: CALL 31258 0 1
30770: IFFALSE 30800
// begin ComPlaceWeapon ( temp_unit , i [ 7 ] ) ;
30772: LD_VAR 0 3
30776: PPUSH
30777: LD_VAR 0 1
30781: PUSH
30782: LD_INT 7
30784: ARRAY
30785: PPUSH
30786: CALL_OW 148
// temp_value = true ;
30790: LD_ADDR_VAR 0 2
30794: PUSH
30795: LD_INT 1
30797: ST_TO_ADDR
// break ;
30798: GO 30802
// end ;
30800: GO 30758
30802: POP
30803: POP
// if temp_value then
30804: LD_VAR 0 2
30808: IFFALSE 30812
// break ;
30810: GO 30814
// end ;
30812: GO 30641
30814: POP
30815: POP
// if temp_value then
30816: LD_VAR 0 2
30820: IFFALSE 30824
// continue ;
30822: GO 30422
// if vehicle_prod_delay [ base ] > 0 0$0 or game_phase = 2 then
30824: LD_VAR 0 8
30828: PUSH
30829: LD_VAR 0 5
30833: ARRAY
30834: PUSH
30835: LD_INT 0
30837: GREATER
30838: PUSH
30839: LD_EXP 88
30843: PUSH
30844: LD_INT 2
30846: EQUAL
30847: OR
30848: IFFALSE 30887
// begin vehicle_prod_delay = Replace ( vehicle_prod_delay , base , vehicle_prod_delay [ base ] - 0 0$1 ) ;
30850: LD_ADDR_VAR 0 8
30854: PUSH
30855: LD_VAR 0 8
30859: PPUSH
30860: LD_VAR 0 5
30864: PPUSH
30865: LD_VAR 0 8
30869: PUSH
30870: LD_VAR 0 5
30874: ARRAY
30875: PUSH
30876: LD_INT 35
30878: MINUS
30879: PPUSH
30880: CALL_OW 1
30884: ST_TO_ADDR
// continue ;
30885: GO 30422
// end ; if ai_vehicles_defend [ base ] < MaxNumWarVehicles ( base ) then
30887: LD_EXP 39
30891: PUSH
30892: LD_VAR 0 5
30896: ARRAY
30897: PUSH
30898: LD_VAR 0 5
30902: PPUSH
30903: CALL 30033 0 1
30907: LESS
30908: IFFALSE 31247
// begin case base of 1 :
30910: LD_VAR 0 5
30914: PUSH
30915: LD_INT 1
30917: DOUBLE
30918: EQUAL
30919: IFTRUE 30923
30921: GO 31041
30923: POP
// begin case Rand ( 1 , 4 ) of 1 :
30924: LD_INT 1
30926: PPUSH
30927: LD_INT 4
30929: PPUSH
30930: CALL_OW 12
30934: PUSH
30935: LD_INT 1
30937: DOUBLE
30938: EQUAL
30939: IFTRUE 30943
30941: GO 30954
30943: POP
// temp_value = us_gatling_gun ; 2 :
30944: LD_ADDR_VAR 0 2
30948: PUSH
30949: LD_INT 4
30951: ST_TO_ADDR
30952: GO 31012
30954: LD_INT 2
30956: DOUBLE
30957: EQUAL
30958: IFTRUE 30962
30960: GO 30973
30962: POP
// temp_value = us_laser ; 3 :
30963: LD_ADDR_VAR 0 2
30967: PUSH
30968: LD_INT 9
30970: ST_TO_ADDR
30971: GO 31012
30973: LD_INT 3
30975: DOUBLE
30976: EQUAL
30977: IFTRUE 30981
30979: GO 30992
30981: POP
// temp_value = us_double_gun ; 4 :
30982: LD_ADDR_VAR 0 2
30986: PUSH
30987: LD_INT 5
30989: ST_TO_ADDR
30990: GO 31012
30992: LD_INT 4
30994: DOUBLE
30995: EQUAL
30996: IFTRUE 31000
30998: GO 31011
31000: POP
// temp_value = us_rocket_launcher ; end ;
31001: LD_ADDR_VAR 0 2
31005: PUSH
31006: LD_INT 7
31008: ST_TO_ADDR
31009: GO 31012
31011: POP
// ComConstruct ( idle_factories [ 1 ] , us_medium_wheeled , engine_siberite , control_remote , temp_value ) ;
31012: LD_VAR 0 6
31016: PUSH
31017: LD_INT 1
31019: ARRAY
31020: PPUSH
31021: LD_INT 2
31023: PPUSH
31024: LD_INT 3
31026: PPUSH
31027: LD_INT 2
31029: PPUSH
31030: LD_VAR 0 2
31034: PPUSH
31035: CALL_OW 125
// end ; 2 :
31039: GO 31247
31041: LD_INT 2
31043: DOUBLE
31044: EQUAL
31045: IFTRUE 31049
31047: GO 31052
31049: POP
// begin end ; 3 :
31050: GO 31247
31052: LD_INT 3
31054: DOUBLE
31055: EQUAL
31056: IFTRUE 31060
31058: GO 31246
31060: POP
// begin if PlayerAtEasternBorder then
31061: CALL 31564 0 0
31065: IFFALSE 31088
// temp_list = [ ru_heavy_machine_gun , ru_gun , ru_rocket_launcher ] else
31067: LD_ADDR_VAR 0 4
31071: PUSH
31072: LD_INT 42
31074: PUSH
31075: LD_INT 44
31077: PUSH
31078: LD_INT 45
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: ST_TO_ADDR
31086: GO 31107
// temp_list = [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
31088: LD_ADDR_VAR 0 4
31092: PUSH
31093: LD_INT 43
31095: PUSH
31096: LD_INT 46
31098: PUSH
31099: LD_INT 45
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: ST_TO_ADDR
// temp_value = temp_list [ Rand ( 1 , temp_list + 0 ) ] ;
31107: LD_ADDR_VAR 0 2
31111: PUSH
31112: LD_VAR 0 4
31116: PUSH
31117: LD_INT 1
31119: PPUSH
31120: LD_VAR 0 4
31124: PUSH
31125: LD_INT 0
31127: PLUS
31128: PPUSH
31129: CALL_OW 12
31133: ARRAY
31134: ST_TO_ADDR
// if not IsWeaponFactory ( idle_factories [ 1 ] ) then
31135: LD_VAR 0 6
31139: PUSH
31140: LD_INT 1
31142: ARRAY
31143: PPUSH
31144: CALL 31258 0 1
31148: NOT
31149: IFFALSE 31159
// temp_value = ru_heavy_machine_gun ;
31151: LD_ADDR_VAR 0 2
31155: PUSH
31156: LD_INT 42
31158: ST_TO_ADDR
// if temp_value = ru_heavy_gun then
31159: LD_VAR 0 2
31163: PUSH
31164: LD_INT 46
31166: EQUAL
31167: IFFALSE 31179
// i = ru_heavy_tracked else
31169: LD_ADDR_VAR 0 1
31173: PUSH
31174: LD_INT 24
31176: ST_TO_ADDR
31177: GO 31215
// if Rand ( difficulty , 4 ) = 4 then
31179: LD_OWVAR 67
31183: PPUSH
31184: LD_INT 4
31186: PPUSH
31187: CALL_OW 12
31191: PUSH
31192: LD_INT 4
31194: EQUAL
31195: IFFALSE 31207
// i = ru_heavy_tracked else
31197: LD_ADDR_VAR 0 1
31201: PUSH
31202: LD_INT 24
31204: ST_TO_ADDR
31205: GO 31215
// i = ru_medium_tracked ;
31207: LD_ADDR_VAR 0 1
31211: PUSH
31212: LD_INT 22
31214: ST_TO_ADDR
// ComConstruct ( idle_factories [ 1 ] , i , engine_siberite , control_computer , temp_value ) ;
31215: LD_VAR 0 6
31219: PUSH
31220: LD_INT 1
31222: ARRAY
31223: PPUSH
31224: LD_VAR 0 1
31228: PPUSH
31229: LD_INT 3
31231: PPUSH
31232: LD_INT 3
31234: PPUSH
31235: LD_VAR 0 2
31239: PPUSH
31240: CALL_OW 125
// end ; end ;
31244: GO 31247
31246: POP
// end ; end ;
31247: GO 30422
31249: POP
31250: POP
// until false ;
31251: LD_INT 0
31253: IFFALSE 30405
// end ;
31255: PPOPN 8
31257: END
// function IsWeaponFactory ( factory ) ; begin
31258: LD_INT 0
31260: PPUSH
// if FilterAllUnits ( [ [ f_dist , factory , 4 ] , [ f_btype , b_ext_gun ] ] ) > 0 then
31261: LD_INT 91
31263: PUSH
31264: LD_VAR 0 1
31268: PUSH
31269: LD_INT 4
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 30
31279: PUSH
31280: LD_INT 17
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PPUSH
31291: CALL_OW 69
31295: PUSH
31296: LD_INT 0
31298: GREATER
31299: IFFALSE 31311
// result = true else
31301: LD_ADDR_VAR 0 2
31305: PUSH
31306: LD_INT 1
31308: ST_TO_ADDR
31309: GO 31319
// result = false ;
31311: LD_ADDR_VAR 0 2
31315: PUSH
31316: LD_INT 0
31318: ST_TO_ADDR
// end ;
31319: LD_VAR 0 2
31323: RET
// on VehicleCaptured ( new_identifier , old_identifier , old_side , capturing_unit ) do var temp_list , base ;
31324: LD_INT 0
31326: PPUSH
31327: PPUSH
// begin if old_side = you then
31328: LD_VAR 0 3
31332: PUSH
31333: LD_EXP 2
31337: EQUAL
31338: IFFALSE 31342
// exit ;
31340: GO 31373
// for base in ai_bases do
31342: LD_ADDR_VAR 0 6
31346: PUSH
31347: LD_EXP 58
31351: PUSH
31352: FOR_IN
31353: IFFALSE 31371
// RemoveVehicleFromVariables ( base , old_identifier ) ;
31355: LD_VAR 0 6
31359: PPUSH
31360: LD_VAR 0 2
31364: PPUSH
31365: CALL 11141 0 2
31369: GO 31352
31371: POP
31372: POP
// end ;
31373: PPOPN 6
31375: END
// on VehicleConstructed ( vehicle , factory ) do var side , temp_list , base ;
31376: LD_INT 0
31378: PPUSH
31379: PPUSH
31380: PPUSH
// begin side = GetSide ( vehicle ) ;
31381: LD_ADDR_VAR 0 3
31385: PUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL_OW 255
31395: ST_TO_ADDR
// if side = you then
31396: LD_VAR 0 3
31400: PUSH
31401: LD_EXP 2
31405: EQUAL
31406: IFFALSE 31410
// exit ;
31408: GO 31561
// base = FindBase ( vehicle ) ;
31410: LD_ADDR_VAR 0 5
31414: PUSH
31415: LD_VAR 0 1
31419: PPUSH
31420: CALL 12501 0 1
31424: ST_TO_ADDR
// if base = 0 then
31425: LD_VAR 0 5
31429: PUSH
31430: LD_INT 0
31432: EQUAL
31433: IFFALSE 31437
// exit ;
31435: GO 31561
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] then
31437: LD_VAR 0 1
31441: PPUSH
31442: CALL_OW 264
31446: PUSH
31447: LD_INT 12
31449: PUSH
31450: LD_INT 32
31452: PUSH
31453: LD_INT 51
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: IN
31461: NOT
31462: IFFALSE 31513
// begin temp_list = ai_vehicles_defend [ base ] ^ vehicle ;
31464: LD_ADDR_VAR 0 4
31468: PUSH
31469: LD_EXP 39
31473: PUSH
31474: LD_VAR 0 5
31478: ARRAY
31479: PUSH
31480: LD_VAR 0 1
31484: ADD
31485: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list ) ;
31486: LD_ADDR_EXP 39
31490: PUSH
31491: LD_EXP 39
31495: PPUSH
31496: LD_VAR 0 5
31500: PPUSH
31501: LD_VAR 0 4
31505: PPUSH
31506: CALL_OW 1
31510: ST_TO_ADDR
// end else
31511: GO 31561
// begin ai_cargo_bay = Replace ( ai_cargo_bay , base , vehicle ) ;
31513: LD_ADDR_EXP 60
31517: PUSH
31518: LD_EXP 60
31522: PPUSH
31523: LD_VAR 0 5
31527: PPUSH
31528: LD_VAR 0 1
31532: PPUSH
31533: CALL_OW 1
31537: ST_TO_ADDR
// ai_cargo_bay_under_construction = Replace ( ai_cargo_bay_under_construction , base , false ) ;
31538: LD_ADDR_EXP 61
31542: PUSH
31543: LD_EXP 61
31547: PPUSH
31548: LD_VAR 0 5
31552: PPUSH
31553: LD_INT 0
31555: PPUSH
31556: CALL_OW 1
31560: ST_TO_ADDR
// end ; end ;
31561: PPOPN 5
31563: END
// export function PlayerAtEasternBorder ; var temp_list ; begin
31564: LD_INT 0
31566: PPUSH
31567: PPUSH
// result = false ;
31568: LD_ADDR_VAR 0 1
31572: PUSH
31573: LD_INT 0
31575: ST_TO_ADDR
// temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31576: LD_ADDR_VAR 0 2
31580: PUSH
31581: LD_INT 22
31583: PUSH
31584: LD_EXP 2
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: LD_INT 30
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 30
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: LIST
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PPUSH
31625: CALL_OW 69
31629: ST_TO_ADDR
// if temp_list = 0 then
31630: LD_VAR 0 2
31634: PUSH
31635: LD_INT 0
31637: EQUAL
31638: IFFALSE 31650
// result = true else
31640: LD_ADDR_VAR 0 1
31644: PUSH
31645: LD_INT 1
31647: ST_TO_ADDR
31648: GO 31683
// if UnitFilter ( temp_list , [ f_inarea , player_base_outer ] ) > 0 then
31650: LD_VAR 0 2
31654: PPUSH
31655: LD_INT 95
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PPUSH
31665: CALL_OW 72
31669: PUSH
31670: LD_INT 0
31672: GREATER
31673: IFFALSE 31683
// result = true ;
31675: LD_ADDR_VAR 0 1
31679: PUSH
31680: LD_INT 1
31682: ST_TO_ADDR
// end ;
31683: LD_VAR 0 1
31687: RET
// every 0 0$2 + 0 0$0.6 do var i , temp_list , human_list , num_sol , num_baz , num_sci , temp_list_2 , temp_list_3 , k ; var base , side , attack_strat_history , first_time_attack_gensher ;
31688: GO 31690
31690: DISABLE
31691: LD_INT 0
31693: PPUSH
31694: PPUSH
31695: PPUSH
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
31700: PPUSH
31701: PPUSH
31702: PPUSH
31703: PPUSH
31704: PPUSH
31705: PPUSH
// begin base = 3 ;
31706: LD_ADDR_VAR 0 10
31710: PUSH
31711: LD_INT 3
31713: ST_TO_ADDR
// side = russians ;
31714: LD_ADDR_VAR 0 11
31718: PUSH
31719: LD_EXP 3
31723: ST_TO_ADDR
// attack_strat_history = [ ] ;
31724: LD_ADDR_VAR 0 12
31728: PUSH
31729: EMPTY
31730: ST_TO_ADDR
// first_time_attack_gensher = true ;
31731: LD_ADDR_VAR 0 13
31735: PUSH
31736: LD_INT 1
31738: ST_TO_ADDR
// while not scout_event_over do
31739: LD_EXP 92
31743: NOT
31744: IFFALSE 31755
// wait ( 0 0$1 ) ;
31746: LD_INT 35
31748: PPUSH
31749: CALL_OW 67
31753: GO 31739
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , ai_vehicle_attack_delay [ base ] - 2 2$0 ) ;
31755: LD_ADDR_EXP 57
31759: PUSH
31760: LD_EXP 57
31764: PPUSH
31765: LD_VAR 0 10
31769: PPUSH
31770: LD_EXP 57
31774: PUSH
31775: LD_VAR 0 10
31779: ARRAY
31780: PUSH
31781: LD_INT 4200
31783: MINUS
31784: PPUSH
31785: CALL_OW 1
31789: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31790: LD_INT 35
31792: PPUSH
31793: CALL_OW 67
// if UnitFilter ( ai_attacking_soldiers [ base ] , [ f_ok ] ) > 0 or UnitFilter ( ai_attacking_scientists [ base ] , [ f_ok ] ) > 0 or UnitFilter ( ai_vehicles_attack [ base ] , [ f_ok ] ) > 0 then
31797: LD_EXP 63
31801: PUSH
31802: LD_VAR 0 10
31806: ARRAY
31807: PPUSH
31808: LD_INT 50
31810: PUSH
31811: EMPTY
31812: LIST
31813: PPUSH
31814: CALL_OW 72
31818: PUSH
31819: LD_INT 0
31821: GREATER
31822: PUSH
31823: LD_EXP 64
31827: PUSH
31828: LD_VAR 0 10
31832: ARRAY
31833: PPUSH
31834: LD_INT 50
31836: PUSH
31837: EMPTY
31838: LIST
31839: PPUSH
31840: CALL_OW 72
31844: PUSH
31845: LD_INT 0
31847: GREATER
31848: OR
31849: PUSH
31850: LD_EXP 40
31854: PUSH
31855: LD_VAR 0 10
31859: ARRAY
31860: PPUSH
31861: LD_INT 50
31863: PUSH
31864: EMPTY
31865: LIST
31866: PPUSH
31867: CALL_OW 72
31871: PUSH
31872: LD_INT 0
31874: GREATER
31875: OR
31876: IFFALSE 31880
// continue ;
31878: GO 31790
// if IsPlaced ( Cornell ) and not IsDead ( Cornell ) then
31880: LD_EXP 25
31884: PPUSH
31885: CALL_OW 305
31889: PUSH
31890: LD_EXP 25
31894: PPUSH
31895: CALL_OW 301
31899: NOT
31900: AND
31901: IFFALSE 31905
// continue ;
31903: GO 31790
// if IsPlaced ( Khattam ) and not ( IsDead ( Khattam ) or GetSide ( Khattam ) = you ) then
31905: LD_EXP 26
31909: PPUSH
31910: CALL_OW 305
31914: PUSH
31915: LD_EXP 26
31919: PPUSH
31920: CALL_OW 301
31924: PUSH
31925: LD_EXP 26
31929: PPUSH
31930: CALL_OW 255
31934: PUSH
31935: LD_EXP 2
31939: EQUAL
31940: OR
31941: NOT
31942: AND
31943: IFFALSE 31947
// continue ;
31945: GO 31790
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , ai_vehicle_attack_delay [ base ] - 0 0$1 ) ;
31947: LD_ADDR_EXP 57
31951: PUSH
31952: LD_EXP 57
31956: PPUSH
31957: LD_VAR 0 10
31961: PPUSH
31962: LD_EXP 57
31966: PUSH
31967: LD_VAR 0 10
31971: ARRAY
31972: PUSH
31973: LD_INT 35
31975: MINUS
31976: PPUSH
31977: CALL_OW 1
31981: ST_TO_ADDR
// if ai_vehicle_attack_delay [ base ] > 0 0$0 then
31982: LD_EXP 57
31986: PUSH
31987: LD_VAR 0 10
31991: ARRAY
31992: PUSH
31993: LD_INT 0
31995: GREATER
31996: IFFALSE 32000
// continue ;
31998: GO 31790
// if BaseUnderAttack ( base , - 1 ) then
32000: LD_VAR 0 10
32004: PPUSH
32005: LD_INT 1
32007: NEG
32008: PPUSH
32009: CALL 23273 0 2
32013: IFFALSE 32017
// continue ;
32015: GO 31790
// if ai_vehicles_defend [ base ] < MaxNumWarVehiclesForAttack ( base ) then
32017: LD_EXP 39
32021: PUSH
32022: LD_VAR 0 10
32026: ARRAY
32027: PUSH
32028: LD_VAR 0 10
32032: PPUSH
32033: CALL 33812 0 1
32037: LESS
32038: IFFALSE 32042
// continue ;
32040: GO 31790
// temp_list = [ ] ;
32042: LD_ADDR_VAR 0 2
32046: PUSH
32047: EMPTY
32048: ST_TO_ADDR
// temp_list_2 = ai_vehicles_defend [ base ] ;
32049: LD_ADDR_VAR 0 7
32053: PUSH
32054: LD_EXP 39
32058: PUSH
32059: LD_VAR 0 10
32063: ARRAY
32064: ST_TO_ADDR
// for i = 1 to MaxNumWarVehiclesForAttack ( base ) do
32065: LD_ADDR_VAR 0 1
32069: PUSH
32070: DOUBLE
32071: LD_INT 1
32073: DEC
32074: ST_TO_ADDR
32075: LD_VAR 0 10
32079: PPUSH
32080: CALL 33812 0 1
32084: PUSH
32085: FOR_TO
32086: IFFALSE 32132
// begin temp_list = temp_list ^ temp_list_2 [ i ] ;
32088: LD_ADDR_VAR 0 2
32092: PUSH
32093: LD_VAR 0 2
32097: PUSH
32098: LD_VAR 0 7
32102: PUSH
32103: LD_VAR 0 1
32107: ARRAY
32108: ADD
32109: ST_TO_ADDR
// RemoveVehicleFromVariables ( base , temp_list_2 [ i ] ) ;
32110: LD_VAR 0 10
32114: PPUSH
32115: LD_VAR 0 7
32119: PUSH
32120: LD_VAR 0 1
32124: ARRAY
32125: PPUSH
32126: CALL 11141 0 2
// end ;
32130: GO 32085
32132: POP
32133: POP
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , temp_list ) ;
32134: LD_ADDR_EXP 40
32138: PUSH
32139: LD_EXP 40
32143: PPUSH
32144: LD_VAR 0 10
32148: PPUSH
32149: LD_VAR 0 2
32153: PPUSH
32154: CALL_OW 1
32158: ST_TO_ADDR
// human_list = [ ] ;
32159: LD_ADDR_VAR 0 3
32163: PUSH
32164: EMPTY
32165: ST_TO_ADDR
// num_sci = difficulty + Rand ( 0 , 1 ) ;
32166: LD_ADDR_VAR 0 6
32170: PUSH
32171: LD_OWVAR 67
32175: PUSH
32176: LD_INT 0
32178: PPUSH
32179: LD_INT 1
32181: PPUSH
32182: CALL_OW 12
32186: PLUS
32187: ST_TO_ADDR
// num_sol = difficulty + 1 + Rand ( 0 , 1 ) ;
32188: LD_ADDR_VAR 0 4
32192: PUSH
32193: LD_OWVAR 67
32197: PUSH
32198: LD_INT 1
32200: PLUS
32201: PUSH
32202: LD_INT 0
32204: PPUSH
32205: LD_INT 1
32207: PPUSH
32208: CALL_OW 12
32212: PLUS
32213: ST_TO_ADDR
// num_baz = difficulty + Rand ( 0 , 1 ) ;
32214: LD_ADDR_VAR 0 5
32218: PUSH
32219: LD_OWVAR 67
32223: PUSH
32224: LD_INT 0
32226: PPUSH
32227: LD_INT 1
32229: PPUSH
32230: CALL_OW 12
32234: PLUS
32235: ST_TO_ADDR
// case num_russian_attacks of 0 :
32236: LD_EXP 86
32240: PUSH
32241: LD_INT 0
32243: DOUBLE
32244: EQUAL
32245: IFTRUE 32249
32247: GO 32302
32249: POP
// begin if num_sci > 1 then
32250: LD_VAR 0 6
32254: PUSH
32255: LD_INT 1
32257: GREATER
32258: IFFALSE 32268
// num_sci = 1 ;
32260: LD_ADDR_VAR 0 6
32264: PUSH
32265: LD_INT 1
32267: ST_TO_ADDR
// if num_sol > 2 then
32268: LD_VAR 0 4
32272: PUSH
32273: LD_INT 2
32275: GREATER
32276: IFFALSE 32286
// num_sol = 2 ;
32278: LD_ADDR_VAR 0 4
32282: PUSH
32283: LD_INT 2
32285: ST_TO_ADDR
// num_baz = num_baz - 1 ;
32286: LD_ADDR_VAR 0 5
32290: PUSH
32291: LD_VAR 0 5
32295: PUSH
32296: LD_INT 1
32298: MINUS
32299: ST_TO_ADDR
// end ; 1 :
32300: GO 32389
32302: LD_INT 1
32304: DOUBLE
32305: EQUAL
32306: IFTRUE 32310
32308: GO 32355
32310: POP
// begin if num_sol > 3 then
32311: LD_VAR 0 4
32315: PUSH
32316: LD_INT 3
32318: GREATER
32319: IFFALSE 32329
// num_sol = 3 ;
32321: LD_ADDR_VAR 0 4
32325: PUSH
32326: LD_INT 3
32328: ST_TO_ADDR
// if num_baz > 1 then
32329: LD_VAR 0 5
32333: PUSH
32334: LD_INT 1
32336: GREATER
32337: IFFALSE 32353
// num_baz = num_baz - 1 ;
32339: LD_ADDR_VAR 0 5
32343: PUSH
32344: LD_VAR 0 5
32348: PUSH
32349: LD_INT 1
32351: MINUS
32352: ST_TO_ADDR
// end ; 2 :
32353: GO 32389
32355: LD_INT 2
32357: DOUBLE
32358: EQUAL
32359: IFTRUE 32363
32361: GO 32366
32363: POP
// begin end ; else
32364: GO 32389
32366: POP
// begin num_baz = num_baz + Rand ( 0 , 1 ) ;
32367: LD_ADDR_VAR 0 5
32371: PUSH
32372: LD_VAR 0 5
32376: PUSH
32377: LD_INT 0
32379: PPUSH
32380: LD_INT 1
32382: PPUSH
32383: CALL_OW 12
32387: PLUS
32388: ST_TO_ADDR
// end ; end ; if yashin_alive then
32389: LD_EXP 85
32393: IFFALSE 32427
// begin num_baz = num_baz + num_sol ;
32395: LD_ADDR_VAR 0 5
32399: PUSH
32400: LD_VAR 0 5
32404: PUSH
32405: LD_VAR 0 4
32409: PLUS
32410: ST_TO_ADDR
// num_sol = Rand ( 1 , 2 ) ;
32411: LD_ADDR_VAR 0 4
32415: PUSH
32416: LD_INT 1
32418: PPUSH
32419: LD_INT 2
32421: PPUSH
32422: CALL_OW 12
32426: ST_TO_ADDR
// end ; temp_list = CreateUnitsWithClass ( num_sci , class_scientistic , side ) ;
32427: LD_ADDR_VAR 0 2
32431: PUSH
32432: LD_VAR 0 6
32436: PPUSH
32437: LD_INT 4
32439: PPUSH
32440: LD_VAR 0 11
32444: PPUSH
32445: CALL 9612 0 3
32449: ST_TO_ADDR
// human_list = human_list ^ temp_list ;
32450: LD_ADDR_VAR 0 3
32454: PUSH
32455: LD_VAR 0 3
32459: PUSH
32460: LD_VAR 0 2
32464: ADD
32465: ST_TO_ADDR
// ai_attacking_scientists = Replace ( ai_attacking_scientists , base , temp_list ) ;
32466: LD_ADDR_EXP 64
32470: PUSH
32471: LD_EXP 64
32475: PPUSH
32476: LD_VAR 0 10
32480: PPUSH
32481: LD_VAR 0 2
32485: PPUSH
32486: CALL_OW 1
32490: ST_TO_ADDR
// temp_list = CreateUnitsWithClass ( num_sol , class_soldier , side ) ^ CreateUnitsWithClass ( num_baz , class_bazooker , side ) ;
32491: LD_ADDR_VAR 0 2
32495: PUSH
32496: LD_VAR 0 4
32500: PPUSH
32501: LD_INT 1
32503: PPUSH
32504: LD_VAR 0 11
32508: PPUSH
32509: CALL 9612 0 3
32513: PUSH
32514: LD_VAR 0 5
32518: PPUSH
32519: LD_INT 9
32521: PPUSH
32522: LD_VAR 0 11
32526: PPUSH
32527: CALL 9612 0 3
32531: ADD
32532: ST_TO_ADDR
// human_list = human_list ^ temp_list ;
32533: LD_ADDR_VAR 0 3
32537: PUSH
32538: LD_VAR 0 3
32542: PUSH
32543: LD_VAR 0 2
32547: ADD
32548: ST_TO_ADDR
// ai_attacking_soldiers = Replace ( ai_attacking_soldiers , base , temp_list ) ;
32549: LD_ADDR_EXP 63
32553: PUSH
32554: LD_EXP 63
32558: PPUSH
32559: LD_VAR 0 10
32563: PPUSH
32564: LD_VAR 0 2
32568: PPUSH
32569: CALL_OW 1
32573: ST_TO_ADDR
// for i in human_list do
32574: LD_ADDR_VAR 0 1
32578: PUSH
32579: LD_VAR 0 3
32583: PUSH
32584: FOR_IN
32585: IFFALSE 32604
// PlaceUnitArea ( i , russian_reinforcements_area , false ) ;
32587: LD_VAR 0 1
32591: PPUSH
32592: LD_INT 14
32594: PPUSH
32595: LD_INT 0
32597: PPUSH
32598: CALL_OW 49
32602: GO 32584
32604: POP
32605: POP
// if MayAttackGensherBase and Rand ( 1 , 2 ) = 1 then
32606: CALL 33761 0 0
32610: PUSH
32611: LD_INT 1
32613: PPUSH
32614: LD_INT 2
32616: PPUSH
32617: CALL_OW 12
32621: PUSH
32622: LD_INT 1
32624: EQUAL
32625: AND
32626: IFFALSE 32638
// russian_attack_strategy = 1 else
32628: LD_ADDR_EXP 83
32632: PUSH
32633: LD_INT 1
32635: ST_TO_ADDR
32636: GO 32662
// if PlayerAtEasternBorder then
32638: CALL 31564 0 0
32642: IFFALSE 32654
// russian_attack_strategy = 2 else
32644: LD_ADDR_EXP 83
32648: PUSH
32649: LD_INT 2
32651: ST_TO_ADDR
32652: GO 32662
// russian_attack_strategy = 3 ;
32654: LD_ADDR_EXP 83
32658: PUSH
32659: LD_INT 3
32661: ST_TO_ADDR
// if russian_attack_strategy <> 1 and not 1 in attack_strat_history then
32662: LD_EXP 83
32666: PUSH
32667: LD_INT 1
32669: NONEQUAL
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: LD_VAR 0 12
32678: IN
32679: NOT
32680: AND
32681: IFFALSE 32724
// if attack_strat_history >= [ 5 , 4 , 3 ] [ difficulty ] and MayAttackGensherBase then
32683: LD_VAR 0 12
32687: PUSH
32688: LD_INT 5
32690: PUSH
32691: LD_INT 4
32693: PUSH
32694: LD_INT 3
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: PUSH
32702: LD_OWVAR 67
32706: ARRAY
32707: GREATEREQUAL
32708: PUSH
32709: CALL 33761 0 0
32713: AND
32714: IFFALSE 32724
// russian_attack_strategy = 1 ;
32716: LD_ADDR_EXP 83
32720: PUSH
32721: LD_INT 1
32723: ST_TO_ADDR
// attack_strat_history = attack_strat_history ^ russian_attack_strategy ;
32724: LD_ADDR_VAR 0 12
32728: PUSH
32729: LD_VAR 0 12
32733: PUSH
32734: LD_EXP 83
32738: ADD
32739: ST_TO_ADDR
// if russian_attack_strategy = 1 then
32740: LD_EXP 83
32744: PUSH
32745: LD_INT 1
32747: EQUAL
32748: IFFALSE 33597
// begin if first_time_attack_gensher or difficulty = 1 then
32750: LD_VAR 0 13
32754: PUSH
32755: LD_OWVAR 67
32759: PUSH
32760: LD_INT 1
32762: EQUAL
32763: OR
32764: IFFALSE 33158
// begin first_time_attack_gensher = false ;
32766: LD_ADDR_VAR 0 13
32770: PUSH
32771: LD_INT 0
32773: ST_TO_ADDR
// temp_list = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_class , class_bazooker ] ) ;
32774: LD_ADDR_VAR 0 2
32778: PUSH
32779: LD_EXP 63
32783: PUSH
32784: LD_VAR 0 10
32788: ARRAY
32789: PPUSH
32790: LD_INT 25
32792: PUSH
32793: LD_INT 9
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PPUSH
32800: CALL_OW 72
32804: ST_TO_ADDR
// for i in temp_list do
32805: LD_ADDR_VAR 0 1
32809: PUSH
32810: LD_VAR 0 2
32814: PUSH
32815: FOR_IN
32816: IFFALSE 32846
// begin RemoveHumanFromVariables ( base , i , false ) ;
32818: LD_VAR 0 10
32822: PPUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: LD_INT 0
32830: PPUSH
32831: CALL 11533 0 3
// DestroyUnit ( i ) ;
32835: LD_VAR 0 1
32839: PPUSH
32840: CALL_OW 65
// end ;
32844: GO 32815
32846: POP
32847: POP
// temp_list = UnitFilter ( ai_vehicles_attack [ base ] , [ f_weapon , ru_rocket_launcher ] ) ;
32848: LD_ADDR_VAR 0 2
32852: PUSH
32853: LD_EXP 40
32857: PUSH
32858: LD_VAR 0 10
32862: ARRAY
32863: PPUSH
32864: LD_INT 34
32866: PUSH
32867: LD_INT 45
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PPUSH
32874: CALL_OW 72
32878: ST_TO_ADDR
// temp_list_2 = [ ] ;
32879: LD_ADDR_VAR 0 7
32883: PUSH
32884: EMPTY
32885: ST_TO_ADDR
// InitUc ;
32886: CALL_OW 18
// InitVc ;
32890: CALL_OW 20
// uc_side = side ;
32894: LD_ADDR_OWVAR 20
32898: PUSH
32899: LD_VAR 0 11
32903: ST_TO_ADDR
// uc_nation = nation_russian ;
32904: LD_ADDR_OWVAR 21
32908: PUSH
32909: LD_INT 3
32911: ST_TO_ADDR
// for i in temp_list do
32912: LD_ADDR_VAR 0 1
32916: PUSH
32917: LD_VAR 0 2
32921: PUSH
32922: FOR_IN
32923: IFFALSE 33117
// begin RemoveVehicleFromVariables ( base , i ) ;
32925: LD_VAR 0 10
32929: PPUSH
32930: LD_VAR 0 1
32934: PPUSH
32935: CALL 11141 0 2
// vc_chassis = GetChassis ( i ) ;
32939: LD_ADDR_OWVAR 37
32943: PUSH
32944: LD_VAR 0 1
32948: PPUSH
32949: CALL_OW 265
32953: ST_TO_ADDR
// vc_control = GetControl ( i ) ;
32954: LD_ADDR_OWVAR 38
32958: PUSH
32959: LD_VAR 0 1
32963: PPUSH
32964: CALL_OW 263
32968: ST_TO_ADDR
// vc_engine = GetEngine ( i ) ;
32969: LD_ADDR_OWVAR 39
32973: PUSH
32974: LD_VAR 0 1
32978: PPUSH
32979: CALL_OW 262
32983: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
32984: LD_ADDR_OWVAR 40
32988: PUSH
32989: LD_INT 42
32991: ST_TO_ADDR
// temp_list_3 = [ GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ;
32992: LD_ADDR_VAR 0 8
32996: PUSH
32997: LD_VAR 0 1
33001: PPUSH
33002: CALL_OW 250
33006: PUSH
33007: LD_VAR 0 1
33011: PPUSH
33012: CALL_OW 251
33016: PUSH
33017: LD_VAR 0 1
33021: PPUSH
33022: CALL_OW 254
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: LIST
33031: ST_TO_ADDR
// DestroyUnit ( i ) ;
33032: LD_VAR 0 1
33036: PPUSH
33037: CALL_OW 65
// i = CreateVehicle ;
33041: LD_ADDR_VAR 0 1
33045: PUSH
33046: CALL_OW 45
33050: ST_TO_ADDR
// SetDir ( i , temp_list_3 [ 3 ] ) ;
33051: LD_VAR 0 1
33055: PPUSH
33056: LD_VAR 0 8
33060: PUSH
33061: LD_INT 3
33063: ARRAY
33064: PPUSH
33065: CALL_OW 233
// PlaceUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] , false ) ;
33069: LD_VAR 0 1
33073: PPUSH
33074: LD_VAR 0 8
33078: PUSH
33079: LD_INT 1
33081: ARRAY
33082: PPUSH
33083: LD_VAR 0 8
33087: PUSH
33088: LD_INT 2
33090: ARRAY
33091: PPUSH
33092: LD_INT 0
33094: PPUSH
33095: CALL_OW 48
// temp_list_2 = temp_list_2 ^ i ;
33099: LD_ADDR_VAR 0 7
33103: PUSH
33104: LD_VAR 0 7
33108: PUSH
33109: LD_VAR 0 1
33113: ADD
33114: ST_TO_ADDR
// end ;
33115: GO 32922
33117: POP
33118: POP
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , ai_vehicles_attack [ base ] ^ temp_list_2 ) ;
33119: LD_ADDR_EXP 40
33123: PUSH
33124: LD_EXP 40
33128: PPUSH
33129: LD_VAR 0 10
33133: PPUSH
33134: LD_EXP 40
33138: PUSH
33139: LD_VAR 0 10
33143: ARRAY
33144: PUSH
33145: LD_VAR 0 7
33149: ADD
33150: PPUSH
33151: CALL_OW 1
33155: ST_TO_ADDR
// end else
33156: GO 33387
// begin temp_list = [ ] ;
33158: LD_ADDR_VAR 0 2
33162: PUSH
33163: EMPTY
33164: ST_TO_ADDR
// temp_list_2 = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_class , class_bazooker ] ) ;
33165: LD_ADDR_VAR 0 7
33169: PUSH
33170: LD_EXP 63
33174: PUSH
33175: LD_VAR 0 10
33179: ARRAY
33180: PPUSH
33181: LD_INT 25
33183: PUSH
33184: LD_INT 9
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PPUSH
33191: CALL_OW 72
33195: ST_TO_ADDR
// temp_list_3 = ai_attacking_soldiers [ base ] diff temp_list_2 ;
33196: LD_ADDR_VAR 0 8
33200: PUSH
33201: LD_EXP 63
33205: PUSH
33206: LD_VAR 0 10
33210: ARRAY
33211: PUSH
33212: LD_VAR 0 7
33216: DIFF
33217: ST_TO_ADDR
// if temp_list_2 > 0 then
33218: LD_VAR 0 7
33222: PUSH
33223: LD_INT 0
33225: GREATER
33226: IFFALSE 33258
// temp_list = temp_list ^ temp_list_2 [ Rand ( 1 , temp_list_2 ) ] ;
33228: LD_ADDR_VAR 0 2
33232: PUSH
33233: LD_VAR 0 2
33237: PUSH
33238: LD_VAR 0 7
33242: PUSH
33243: LD_INT 1
33245: PPUSH
33246: LD_VAR 0 7
33250: PPUSH
33251: CALL_OW 12
33255: ARRAY
33256: ADD
33257: ST_TO_ADDR
// if temp_list_3 > 0 then
33258: LD_VAR 0 8
33262: PUSH
33263: LD_INT 0
33265: GREATER
33266: IFFALSE 33298
// temp_list = temp_list ^ temp_list_3 [ Rand ( 1 , temp_list_3 ) ] ;
33268: LD_ADDR_VAR 0 2
33272: PUSH
33273: LD_VAR 0 2
33277: PUSH
33278: LD_VAR 0 8
33282: PUSH
33283: LD_INT 1
33285: PPUSH
33286: LD_VAR 0 8
33290: PPUSH
33291: CALL_OW 12
33295: ARRAY
33296: ADD
33297: ST_TO_ADDR
// temp_list_2 = ai_attacking_scientists [ base ] ;
33298: LD_ADDR_VAR 0 7
33302: PUSH
33303: LD_EXP 64
33307: PUSH
33308: LD_VAR 0 10
33312: ARRAY
33313: ST_TO_ADDR
// temp_list = temp_list ^ temp_list_2 [ Rand ( 1 , temp_list_2 ) ] ;
33314: LD_ADDR_VAR 0 2
33318: PUSH
33319: LD_VAR 0 2
33323: PUSH
33324: LD_VAR 0 7
33328: PUSH
33329: LD_INT 1
33331: PPUSH
33332: LD_VAR 0 7
33336: PPUSH
33337: CALL_OW 12
33341: ARRAY
33342: ADD
33343: ST_TO_ADDR
// for i in temp_list do
33344: LD_ADDR_VAR 0 1
33348: PUSH
33349: LD_VAR 0 2
33353: PUSH
33354: FOR_IN
33355: IFFALSE 33385
// begin RemoveHumanFromVariables ( base , i , false ) ;
33357: LD_VAR 0 10
33361: PPUSH
33362: LD_VAR 0 1
33366: PPUSH
33367: LD_INT 0
33369: PPUSH
33370: CALL 11533 0 3
// DestroyUnit ( i ) ;
33374: LD_VAR 0 1
33378: PPUSH
33379: CALL_OW 65
// end ;
33383: GO 33354
33385: POP
33386: POP
// end ; temp_list_2 = ai_vehicles_attack [ base ] ;
33387: LD_ADDR_VAR 0 7
33391: PUSH
33392: LD_EXP 40
33396: PUSH
33397: LD_VAR 0 10
33401: ARRAY
33402: ST_TO_ADDR
// temp_list = [ ] ;
33403: LD_ADDR_VAR 0 2
33407: PUSH
33408: EMPTY
33409: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 1 ] [ difficulty ] do
33410: LD_ADDR_VAR 0 1
33414: PUSH
33415: DOUBLE
33416: LD_INT 1
33418: DEC
33419: ST_TO_ADDR
33420: LD_INT 2
33422: PUSH
33423: LD_INT 2
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: PUSH
33434: LD_OWVAR 67
33438: ARRAY
33439: PUSH
33440: FOR_TO
33441: IFFALSE 33517
// begin if temp_list_2 = 0 then
33443: LD_VAR 0 7
33447: PUSH
33448: LD_INT 0
33450: EQUAL
33451: IFFALSE 33455
// break ;
33453: GO 33517
// k = temp_list_2 [ Rand ( 1 , temp_list_2 + 0 ) ] ;
33455: LD_ADDR_VAR 0 9
33459: PUSH
33460: LD_VAR 0 7
33464: PUSH
33465: LD_INT 1
33467: PPUSH
33468: LD_VAR 0 7
33472: PUSH
33473: LD_INT 0
33475: PLUS
33476: PPUSH
33477: CALL_OW 12
33481: ARRAY
33482: ST_TO_ADDR
// temp_list = temp_list ^ k ;
33483: LD_ADDR_VAR 0 2
33487: PUSH
33488: LD_VAR 0 2
33492: PUSH
33493: LD_VAR 0 9
33497: ADD
33498: ST_TO_ADDR
// temp_list_2 = temp_list_2 diff k ;
33499: LD_ADDR_VAR 0 7
33503: PUSH
33504: LD_VAR 0 7
33508: PUSH
33509: LD_VAR 0 9
33513: DIFF
33514: ST_TO_ADDR
// end ;
33515: GO 33440
33517: POP
33518: POP
// for i in temp_list do
33519: LD_ADDR_VAR 0 1
33523: PUSH
33524: LD_VAR 0 2
33528: PUSH
33529: FOR_IN
33530: IFFALSE 33595
// begin RemoveVehicleFromVariables ( base , i ) ;
33532: LD_VAR 0 10
33536: PPUSH
33537: LD_VAR 0 1
33541: PPUSH
33542: CALL 11141 0 2
// temp_list_2 = ai_vehicles_defend [ base ] ^ i ;
33546: LD_ADDR_VAR 0 7
33550: PUSH
33551: LD_EXP 39
33555: PUSH
33556: LD_VAR 0 10
33560: ARRAY
33561: PUSH
33562: LD_VAR 0 1
33566: ADD
33567: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list_2 ) ;
33568: LD_ADDR_EXP 39
33572: PUSH
33573: LD_EXP 39
33577: PPUSH
33578: LD_VAR 0 10
33582: PPUSH
33583: LD_VAR 0 7
33587: PPUSH
33588: CALL_OW 1
33592: ST_TO_ADDR
// end ;
33593: GO 33529
33595: POP
33596: POP
// end ; temp_list = ai_attacking_unit_hex_index [ base ] ;
33597: LD_ADDR_VAR 0 2
33601: PUSH
33602: LD_EXP 74
33606: PUSH
33607: LD_VAR 0 10
33611: ARRAY
33612: ST_TO_ADDR
// for i in ai_vehicles_attack [ base ] ^ ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
33613: LD_ADDR_VAR 0 1
33617: PUSH
33618: LD_EXP 40
33622: PUSH
33623: LD_VAR 0 10
33627: ARRAY
33628: PUSH
33629: LD_EXP 63
33633: PUSH
33634: LD_VAR 0 10
33638: ARRAY
33639: ADD
33640: PUSH
33641: LD_EXP 64
33645: PUSH
33646: LD_VAR 0 10
33650: ARRAY
33651: ADD
33652: PUSH
33653: FOR_IN
33654: IFFALSE 33681
// temp_list = Replace ( temp_list , i , 1 ) ;
33656: LD_ADDR_VAR 0 2
33660: PUSH
33661: LD_VAR 0 2
33665: PPUSH
33666: LD_VAR 0 1
33670: PPUSH
33671: LD_INT 1
33673: PPUSH
33674: CALL_OW 1
33678: ST_TO_ADDR
33679: GO 33653
33681: POP
33682: POP
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
33683: LD_ADDR_EXP 74
33687: PUSH
33688: LD_EXP 74
33692: PPUSH
33693: LD_VAR 0 10
33697: PPUSH
33698: LD_VAR 0 2
33702: PPUSH
33703: CALL_OW 1
33707: ST_TO_ADDR
// num_russian_attacks = num_russian_attacks + 1 ;
33708: LD_ADDR_EXP 86
33712: PUSH
33713: LD_EXP 86
33717: PUSH
33718: LD_INT 1
33720: PLUS
33721: ST_TO_ADDR
// ai_new_attack_commencing = Replace ( ai_new_attack_commencing , base , true ) ;
33722: LD_ADDR_EXP 69
33726: PUSH
33727: LD_EXP 69
33731: PPUSH
33732: LD_VAR 0 10
33736: PPUSH
33737: LD_INT 1
33739: PPUSH
33740: CALL_OW 1
33744: ST_TO_ADDR
// ResetVehicleAttackDelay ( base ) ;
33745: LD_VAR 0 10
33749: PPUSH
33750: CALL 9976 0 1
// until false ;
33754: LD_INT 0
33756: IFFALSE 31790
// end ;
33758: PPOPN 13
33760: END
// function MayAttackGensherBase ; begin
33761: LD_INT 0
33763: PPUSH
// if not scout_event_over or game_phase > 1 then
33764: LD_EXP 92
33768: NOT
33769: PUSH
33770: LD_EXP 88
33774: PUSH
33775: LD_INT 1
33777: GREATER
33778: OR
33779: IFFALSE 33791
// result = false else
33781: LD_ADDR_VAR 0 1
33785: PUSH
33786: LD_INT 0
33788: ST_TO_ADDR
33789: GO 33807
// result := tick >= russians_allowed_to_attack_gensher_time ;
33791: LD_ADDR_VAR 0 1
33795: PUSH
33796: LD_OWVAR 1
33800: PUSH
33801: LD_EXP 93
33805: GREATEREQUAL
33806: ST_TO_ADDR
// end ;
33807: LD_VAR 0 1
33811: RET
// function MaxNumWarVehiclesForAttack ( base ) ; begin
33812: LD_INT 0
33814: PPUSH
// case base of 1 , 2 :
33815: LD_VAR 0 1
33819: PUSH
33820: LD_INT 1
33822: DOUBLE
33823: EQUAL
33824: IFTRUE 33834
33826: LD_INT 2
33828: DOUBLE
33829: EQUAL
33830: IFTRUE 33834
33832: GO 33852
33834: POP
// result = MaxNumWarVehicles ( base ) ; 3 :
33835: LD_ADDR_VAR 0 2
33839: PUSH
33840: LD_VAR 0 1
33844: PPUSH
33845: CALL 30033 0 1
33849: ST_TO_ADDR
33850: GO 34002
33852: LD_INT 3
33854: DOUBLE
33855: EQUAL
33856: IFTRUE 33860
33858: GO 34001
33860: POP
// begin result = [ 0 , 1 , 2 ] [ difficulty ] ;
33861: LD_ADDR_VAR 0 2
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: PUSH
33880: LD_OWVAR 67
33884: ARRAY
33885: ST_TO_ADDR
// case num_russian_attacks of 0 :
33886: LD_EXP 86
33890: PUSH
33891: LD_INT 0
33893: DOUBLE
33894: EQUAL
33895: IFTRUE 33899
33897: GO 33902
33899: POP
// begin end ; 1 :
33900: GO 33967
33902: LD_INT 1
33904: DOUBLE
33905: EQUAL
33906: IFTRUE 33910
33908: GO 33927
33910: POP
// result = result + 1 ; 2 :
33911: LD_ADDR_VAR 0 2
33915: PUSH
33916: LD_VAR 0 2
33920: PUSH
33921: LD_INT 1
33923: PLUS
33924: ST_TO_ADDR
33925: GO 33967
33927: LD_INT 2
33929: DOUBLE
33930: EQUAL
33931: IFTRUE 33935
33933: GO 33952
33935: POP
// result = result + 2 ; else
33936: LD_ADDR_VAR 0 2
33940: PUSH
33941: LD_VAR 0 2
33945: PUSH
33946: LD_INT 2
33948: PLUS
33949: ST_TO_ADDR
33950: GO 33967
33952: POP
// result = result + 3 ; end ;
33953: LD_ADDR_VAR 0 2
33957: PUSH
33958: LD_VAR 0 2
33962: PUSH
33963: LD_INT 3
33965: PLUS
33966: ST_TO_ADDR
// if result > MaxNumWarVehicles ( base ) then
33967: LD_VAR 0 2
33971: PUSH
33972: LD_VAR 0 1
33976: PPUSH
33977: CALL 30033 0 1
33981: GREATER
33982: IFFALSE 33999
// result = MaxNumWarVehicles ( base ) ;
33984: LD_ADDR_VAR 0 2
33988: PUSH
33989: LD_VAR 0 1
33993: PPUSH
33994: CALL 30033 0 1
33998: ST_TO_ADDR
// end ; end ;
33999: GO 34002
34001: POP
// end ;
34002: LD_VAR 0 2
34006: RET
// every 0 0$1 + 0 0$0.2 do var i , temp_list ; var base , side ;
34007: GO 34009
34009: DISABLE
34010: LD_INT 0
34012: PPUSH
34013: PPUSH
34014: PPUSH
34015: PPUSH
// begin base = 3 ;
34016: LD_ADDR_VAR 0 3
34020: PUSH
34021: LD_INT 3
34023: ST_TO_ADDR
// side = russians ;
34024: LD_ADDR_VAR 0 4
34028: PUSH
34029: LD_EXP 3
34033: ST_TO_ADDR
// while not scout_event_over do
34034: LD_EXP 92
34038: NOT
34039: IFFALSE 34050
// wait ( 0 0$1 ) ;
34041: LD_INT 35
34043: PPUSH
34044: CALL_OW 67
34048: GO 34034
// repeat wait ( 0 0$1 ) ;
34050: LD_INT 35
34052: PPUSH
34053: CALL_OW 67
// if game_phase > 1 then
34057: LD_EXP 88
34061: PUSH
34062: LD_INT 1
34064: GREATER
34065: IFFALSE 34069
// exit ;
34067: GO 34296
// if special_russian_attackers > 0 or not MayAttackGensherBase then
34069: LD_EXP 84
34073: PUSH
34074: LD_INT 0
34076: GREATER
34077: PUSH
34078: CALL 33761 0 0
34082: NOT
34083: OR
34084: IFFALSE 34088
// continue ;
34086: GO 34050
// ai_human_attack_delay = Replace ( ai_human_attack_delay , base , ai_human_attack_delay [ base ] - 0 0$1 ) ;
34088: LD_ADDR_EXP 67
34092: PUSH
34093: LD_EXP 67
34097: PPUSH
34098: LD_VAR 0 3
34102: PPUSH
34103: LD_EXP 67
34107: PUSH
34108: LD_VAR 0 3
34112: ARRAY
34113: PUSH
34114: LD_INT 35
34116: MINUS
34117: PPUSH
34118: CALL_OW 1
34122: ST_TO_ADDR
// if ai_human_attack_delay [ base ] > 0 0$0 then
34123: LD_EXP 67
34127: PUSH
34128: LD_VAR 0 3
34132: ARRAY
34133: PUSH
34134: LD_INT 0
34136: GREATER
34137: IFFALSE 34141
// continue ;
34139: GO 34050
// if BaseUnderAttack ( base , - 1 ) then
34141: LD_VAR 0 3
34145: PPUSH
34146: LD_INT 1
34148: NEG
34149: PPUSH
34150: CALL 23273 0 2
34154: IFFALSE 34158
// continue ;
34156: GO 34050
// special_russian_attackers = CreateUnitsWithClass ( difficulty + yashin_alive , class_bazooker , side ) ;
34158: LD_ADDR_EXP 84
34162: PUSH
34163: LD_OWVAR 67
34167: PUSH
34168: LD_EXP 85
34172: PLUS
34173: PPUSH
34174: LD_INT 9
34176: PPUSH
34177: LD_VAR 0 4
34181: PPUSH
34182: CALL 9612 0 3
34186: ST_TO_ADDR
// temp_list = ai_attacking_unit_hex_index [ base ] ;
34187: LD_ADDR_VAR 0 2
34191: PUSH
34192: LD_EXP 74
34196: PUSH
34197: LD_VAR 0 3
34201: ARRAY
34202: ST_TO_ADDR
// for i in special_russian_attackers do
34203: LD_ADDR_VAR 0 1
34207: PUSH
34208: LD_EXP 84
34212: PUSH
34213: FOR_IN
34214: IFFALSE 34256
// begin PlaceUnitArea ( i , russian_reinforcements_area , false ) ;
34216: LD_VAR 0 1
34220: PPUSH
34221: LD_INT 14
34223: PPUSH
34224: LD_INT 0
34226: PPUSH
34227: CALL_OW 49
// temp_list = Replace ( temp_list , i , 1 ) ;
34231: LD_ADDR_VAR 0 2
34235: PUSH
34236: LD_VAR 0 2
34240: PPUSH
34241: LD_VAR 0 1
34245: PPUSH
34246: LD_INT 1
34248: PPUSH
34249: CALL_OW 1
34253: ST_TO_ADDR
// end ;
34254: GO 34213
34256: POP
34257: POP
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
34258: LD_ADDR_EXP 74
34262: PUSH
34263: LD_EXP 74
34267: PPUSH
34268: LD_VAR 0 3
34272: PPUSH
34273: LD_VAR 0 2
34277: PPUSH
34278: CALL_OW 1
34282: ST_TO_ADDR
// ResetHumanAttackDelay ( base ) ;
34283: LD_VAR 0 3
34287: PPUSH
34288: CALL 10025 0 1
// until false ;
34292: LD_INT 0
34294: IFFALSE 34050
// end ;
34296: PPOPN 4
34298: END
// every 0 0$1 do var side , i , temp_value , base , temp_list , temp_unit , temp_list_2 , k , human_attack_hexes , vehicle_attack_hexes , temp_list_3 ; var center_hex , center_dist , attacking_humans , area , x , y , all_done , un1 , val , attacking_vehicles ; var human_prepare_hexes , vehicle_prepare_hexes ; var human_dist , vehicle_dist , all_are_ready , strat_2_attack_permitted , vehs_to_move_to_start_pos , prepare_veh_movement ; var wait_indexes , wait_indexes_pos ;
34299: GO 34301
34301: DISABLE
34302: LD_INT 0
34304: PPUSH
34305: PPUSH
34306: PPUSH
34307: PPUSH
34308: PPUSH
34309: PPUSH
34310: PPUSH
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
// begin side = russians ;
34335: LD_ADDR_VAR 0 1
34339: PUSH
34340: LD_EXP 3
34344: ST_TO_ADDR
// human_dist = 3 ;
34345: LD_ADDR_VAR 0 24
34349: PUSH
34350: LD_INT 3
34352: ST_TO_ADDR
// vehicle_dist = 6 ;
34353: LD_ADDR_VAR 0 25
34357: PUSH
34358: LD_INT 6
34360: ST_TO_ADDR
// vehs_to_move_to_start_pos = [ ] ;
34361: LD_ADDR_VAR 0 28
34365: PUSH
34366: EMPTY
34367: ST_TO_ADDR
// all_are_ready = false ;
34368: LD_ADDR_VAR 0 26
34372: PUSH
34373: LD_INT 0
34375: ST_TO_ADDR
// strat_2_attack_permitted = false ;
34376: LD_ADDR_VAR 0 27
34380: PUSH
34381: LD_INT 0
34383: ST_TO_ADDR
// prepare_veh_movement = true ;
34384: LD_ADDR_VAR 0 29
34388: PUSH
34389: LD_INT 1
34391: ST_TO_ADDR
// wait_indexes_pos = 1 ;
34392: LD_ADDR_VAR 0 31
34396: PUSH
34397: LD_INT 1
34399: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34400: LD_INT 35
34402: PPUSH
34403: CALL_OW 67
// for base in ai_bases do
34407: LD_ADDR_VAR 0 4
34411: PUSH
34412: LD_EXP 58
34416: PUSH
34417: FOR_IN
34418: IFFALSE 40213
// begin if base in [ 1 , 2 ] then
34420: LD_VAR 0 4
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: LD_INT 2
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: IN
34435: IFFALSE 34439
// continue ;
34437: GO 34417
// if ai_vehicles_attack [ base ] = 0 and ai_attacking_soldiers [ base ] = 0 and ai_attacking_scientists [ base ] = 0 then
34439: LD_EXP 40
34443: PUSH
34444: LD_VAR 0 4
34448: ARRAY
34449: PUSH
34450: LD_INT 0
34452: EQUAL
34453: PUSH
34454: LD_EXP 63
34458: PUSH
34459: LD_VAR 0 4
34463: ARRAY
34464: PUSH
34465: LD_INT 0
34467: EQUAL
34468: AND
34469: PUSH
34470: LD_EXP 64
34474: PUSH
34475: LD_VAR 0 4
34479: ARRAY
34480: PUSH
34481: LD_INT 0
34483: EQUAL
34484: AND
34485: IFFALSE 34489
// continue ;
34487: GO 34417
// if ai_new_attack_commencing [ base ] then
34489: LD_EXP 69
34493: PUSH
34494: LD_VAR 0 4
34498: ARRAY
34499: IFFALSE 34556
// begin all_are_ready = false ;
34501: LD_ADDR_VAR 0 26
34505: PUSH
34506: LD_INT 0
34508: ST_TO_ADDR
// strat_2_attack_permitted = false ;
34509: LD_ADDR_VAR 0 27
34513: PUSH
34514: LD_INT 0
34516: ST_TO_ADDR
// prepare_veh_movement = true ;
34517: LD_ADDR_VAR 0 29
34521: PUSH
34522: LD_INT 1
34524: ST_TO_ADDR
// wait_indexes_pos = 1 ;
34525: LD_ADDR_VAR 0 31
34529: PUSH
34530: LD_INT 1
34532: ST_TO_ADDR
// ai_new_attack_commencing = Replace ( ai_new_attack_commencing , base , false ) ;
34533: LD_ADDR_EXP 69
34537: PUSH
34538: LD_EXP 69
34542: PPUSH
34543: LD_VAR 0 4
34547: PPUSH
34548: LD_INT 0
34550: PPUSH
34551: CALL_OW 1
34555: ST_TO_ADDR
// end ; case russian_attack_strategy of 1 :
34556: LD_EXP 83
34560: PUSH
34561: LD_INT 1
34563: DOUBLE
34564: EQUAL
34565: IFTRUE 34569
34567: GO 34783
34569: POP
// begin vehicle_prepare_hexes = [ [ 64 , 51 ] ] ;
34570: LD_ADDR_VAR 0 23
34574: PUSH
34575: LD_INT 64
34577: PUSH
34578: LD_INT 51
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: EMPTY
34586: LIST
34587: ST_TO_ADDR
// human_prepare_hexes = [ [ 72 , 55 ] ] ;
34588: LD_ADDR_VAR 0 22
34592: PUSH
34593: LD_INT 72
34595: PUSH
34596: LD_INT 55
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: EMPTY
34604: LIST
34605: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 75 , 46 ] , [ 75 , 30 ] , [ 70 , 20 ] , [ 84 , 20 ] , [ 99 , 29 ] , [ 108 , 42 ] , [ 112 , 33 ] ] ;
34606: LD_ADDR_VAR 0 10
34610: PUSH
34611: LD_INT 75
34613: PUSH
34614: LD_INT 46
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 75
34623: PUSH
34624: LD_INT 30
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 70
34633: PUSH
34634: LD_INT 20
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 84
34643: PUSH
34644: LD_INT 20
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 99
34653: PUSH
34654: LD_INT 29
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 108
34663: PUSH
34664: LD_INT 42
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 112
34673: PUSH
34674: LD_INT 33
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: ST_TO_ADDR
// human_attack_hexes = [ [ 75 , 46 ] , [ 75 , 30 ] , [ 70 , 20 ] , [ 84 , 20 ] , [ 99 , 29 ] , [ 108 , 42 ] , [ 112 , 33 ] ] ;
34690: LD_ADDR_VAR 0 9
34694: PUSH
34695: LD_INT 75
34697: PUSH
34698: LD_INT 46
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 75
34707: PUSH
34708: LD_INT 30
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 70
34717: PUSH
34718: LD_INT 20
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 84
34727: PUSH
34728: LD_INT 20
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 99
34737: PUSH
34738: LD_INT 29
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 108
34747: PUSH
34748: LD_INT 42
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 112
34757: PUSH
34758: LD_INT 33
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: ST_TO_ADDR
// wait_indexes = [ ] ;
34774: LD_ADDR_VAR 0 30
34778: PUSH
34779: EMPTY
34780: ST_TO_ADDR
// end ; 2 :
34781: GO 35602
34783: LD_INT 2
34785: DOUBLE
34786: EQUAL
34787: IFTRUE 34791
34789: GO 35335
34791: POP
// begin vehicle_prepare_hexes = [ [ 70 , 100 ] ] ;
34792: LD_ADDR_VAR 0 23
34796: PUSH
34797: LD_INT 70
34799: PUSH
34800: LD_INT 100
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: EMPTY
34808: LIST
34809: ST_TO_ADDR
// human_prepare_hexes = [ [ 60 , 82 ] ] ;
34810: LD_ADDR_VAR 0 22
34814: PUSH
34815: LD_INT 60
34817: PUSH
34818: LD_INT 82
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: EMPTY
34826: LIST
34827: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 105 , 95 ] , [ 121 , 93 ] , [ 123 , 79 ] , [ 143 , 78 ] , [ 143 , 71 ] , [ 144 , 64 ] , [ 149 , 74 ] , [ 158 , 88 ] , [ 141 , 85 ] , [ 124 , 79 ] , [ 121 , 93 ] , [ 105 , 95 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
34828: LD_ADDR_VAR 0 10
34832: PUSH
34833: LD_INT 105
34835: PUSH
34836: LD_INT 95
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 121
34845: PUSH
34846: LD_INT 93
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 123
34855: PUSH
34856: LD_INT 79
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 143
34865: PUSH
34866: LD_INT 78
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 143
34875: PUSH
34876: LD_INT 71
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 144
34885: PUSH
34886: LD_INT 64
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 149
34895: PUSH
34896: LD_INT 74
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 158
34905: PUSH
34906: LD_INT 88
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 141
34915: PUSH
34916: LD_INT 85
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 124
34925: PUSH
34926: LD_INT 79
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 121
34935: PUSH
34936: LD_INT 93
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 105
34945: PUSH
34946: LD_INT 95
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 88
34955: PUSH
34956: LD_INT 81
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 80
34965: PUSH
34966: LD_INT 63
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 78
34975: PUSH
34976: LD_INT 48
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 89
34985: PUSH
34986: LD_INT 43
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 108
34995: PUSH
34996: LD_INT 40
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 100
35005: PUSH
35006: LD_INT 28
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: ST_TO_ADDR
// human_attack_hexes = [ [ 73 , 95 ] , [ 84 , 101 ] , [ 95 , 102 ] , [ 104 , 100 ] , [ 114 , 97 ] , [ 124 , 99 ] , [ 132 , 100 ] , [ 137 , 94 ] , [ 149 , 99 ] , [ 161 , 104 ] , [ 158 , 88 ] , [ 149 , 74 ] , [ 144 , 64 ] , [ 143 , 71 ] , [ 141 , 85 ] , [ 124 , 79 ] , [ 121 , 93 ] , [ 105 , 95 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35033: LD_ADDR_VAR 0 9
35037: PUSH
35038: LD_INT 73
35040: PUSH
35041: LD_INT 95
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 84
35050: PUSH
35051: LD_INT 101
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 95
35060: PUSH
35061: LD_INT 102
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 104
35070: PUSH
35071: LD_INT 100
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 114
35080: PUSH
35081: LD_INT 97
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 124
35090: PUSH
35091: LD_INT 99
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 132
35100: PUSH
35101: LD_INT 100
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 137
35110: PUSH
35111: LD_INT 94
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 149
35120: PUSH
35121: LD_INT 99
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 161
35130: PUSH
35131: LD_INT 104
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 158
35140: PUSH
35141: LD_INT 88
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 149
35150: PUSH
35151: LD_INT 74
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 144
35160: PUSH
35161: LD_INT 64
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 143
35170: PUSH
35171: LD_INT 71
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 141
35180: PUSH
35181: LD_INT 85
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 124
35190: PUSH
35191: LD_INT 79
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 121
35200: PUSH
35201: LD_INT 93
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 105
35210: PUSH
35211: LD_INT 95
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 88
35220: PUSH
35221: LD_INT 81
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 80
35230: PUSH
35231: LD_INT 63
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 78
35240: PUSH
35241: LD_INT 48
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 89
35250: PUSH
35251: LD_INT 43
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 108
35260: PUSH
35261: LD_INT 40
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 100
35270: PUSH
35271: LD_INT 28
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: ST_TO_ADDR
// wait_indexes = [ [ 1 , 5 ] , [ 3 , 8 ] ] ;
35304: LD_ADDR_VAR 0 30
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: LD_INT 5
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 3
35321: PUSH
35322: LD_INT 8
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// end ; 3 :
35333: GO 35602
35335: LD_INT 3
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35343
35341: GO 35601
35343: POP
// begin vehicle_prepare_hexes = [ [ 71 , 100 ] ] ;
35344: LD_ADDR_VAR 0 23
35348: PUSH
35349: LD_INT 71
35351: PUSH
35352: LD_INT 100
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: EMPTY
35360: LIST
35361: ST_TO_ADDR
// human_prepare_hexes = [ [ 69 , 76 ] ] ;
35362: LD_ADDR_VAR 0 22
35366: PUSH
35367: LD_INT 69
35369: PUSH
35370: LD_INT 76
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: EMPTY
35378: LIST
35379: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 94 , 97 ] , [ 99 , 109 ] , [ 103 , 94 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35380: LD_ADDR_VAR 0 10
35384: PUSH
35385: LD_INT 94
35387: PUSH
35388: LD_INT 97
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 99
35397: PUSH
35398: LD_INT 109
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 103
35407: PUSH
35408: LD_INT 94
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 88
35417: PUSH
35418: LD_INT 81
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 80
35427: PUSH
35428: LD_INT 63
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 78
35437: PUSH
35438: LD_INT 48
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 89
35447: PUSH
35448: LD_INT 43
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 108
35457: PUSH
35458: LD_INT 40
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 100
35467: PUSH
35468: LD_INT 28
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: ST_TO_ADDR
// human_attack_hexes = [ [ 94 , 97 ] , [ 99 , 109 ] , [ 103 , 94 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35486: LD_ADDR_VAR 0 9
35490: PUSH
35491: LD_INT 94
35493: PUSH
35494: LD_INT 97
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 99
35503: PUSH
35504: LD_INT 109
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 103
35513: PUSH
35514: LD_INT 94
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 88
35523: PUSH
35524: LD_INT 81
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 80
35533: PUSH
35534: LD_INT 63
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 78
35543: PUSH
35544: LD_INT 48
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 89
35553: PUSH
35554: LD_INT 43
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 108
35563: PUSH
35564: LD_INT 40
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 100
35573: PUSH
35574: LD_INT 28
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: ST_TO_ADDR
// wait_indexes = [ ] ;
35592: LD_ADDR_VAR 0 30
35596: PUSH
35597: EMPTY
35598: ST_TO_ADDR
// end ; end ;
35599: GO 35602
35601: POP
// area = GetBaseArea ( base ) ;
35602: LD_ADDR_VAR 0 15
35606: PUSH
35607: LD_VAR 0 4
35611: PPUSH
35612: CALL 12282 0 1
35616: ST_TO_ADDR
// attacking_humans = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_ok ] ) ;
35617: LD_ADDR_VAR 0 14
35621: PUSH
35622: LD_EXP 63
35626: PUSH
35627: LD_VAR 0 4
35631: ARRAY
35632: PPUSH
35633: LD_INT 50
35635: PUSH
35636: EMPTY
35637: LIST
35638: PPUSH
35639: CALL_OW 72
35643: ST_TO_ADDR
// attacking_vehicles = UnitFilter ( ai_vehicles_attack [ base ] , [ f_ok ] ) ;
35644: LD_ADDR_VAR 0 21
35648: PUSH
35649: LD_EXP 40
35653: PUSH
35654: LD_VAR 0 4
35658: ARRAY
35659: PPUSH
35660: LD_INT 50
35662: PUSH
35663: EMPTY
35664: LIST
35665: PPUSH
35666: CALL_OW 72
35670: ST_TO_ADDR
// if ai_attacking_scientists [ base ] > 0 then
35671: LD_EXP 64
35675: PUSH
35676: LD_VAR 0 4
35680: ARRAY
35681: PUSH
35682: LD_INT 0
35684: GREATER
35685: IFFALSE 36055
// if ai_attacking_soldiers [ base ] = 0 then
35687: LD_EXP 63
35691: PUSH
35692: LD_VAR 0 4
35696: ARRAY
35697: PUSH
35698: LD_INT 0
35700: EQUAL
35701: IFFALSE 35727
// begin attacking_humans = attacking_humans ^ ai_attacking_scientists [ base ] ;
35703: LD_ADDR_VAR 0 14
35707: PUSH
35708: LD_VAR 0 14
35712: PUSH
35713: LD_EXP 64
35717: PUSH
35718: LD_VAR 0 4
35722: ARRAY
35723: ADD
35724: ST_TO_ADDR
// end else
35725: GO 36055
// begin x = 0 ;
35727: LD_ADDR_VAR 0 16
35731: PUSH
35732: LD_INT 0
35734: ST_TO_ADDR
// y = 0 ;
35735: LD_ADDR_VAR 0 17
35739: PUSH
35740: LD_INT 0
35742: ST_TO_ADDR
// for i in ai_attacking_soldiers [ base ] do
35743: LD_ADDR_VAR 0 2
35747: PUSH
35748: LD_EXP 63
35752: PUSH
35753: LD_VAR 0 4
35757: ARRAY
35758: PUSH
35759: FOR_IN
35760: IFFALSE 35806
// begin x = x + GetX ( i ) ;
35762: LD_ADDR_VAR 0 16
35766: PUSH
35767: LD_VAR 0 16
35771: PUSH
35772: LD_VAR 0 2
35776: PPUSH
35777: CALL_OW 250
35781: PLUS
35782: ST_TO_ADDR
// y = y + GetY ( i ) ;
35783: LD_ADDR_VAR 0 17
35787: PUSH
35788: LD_VAR 0 17
35792: PUSH
35793: LD_VAR 0 2
35797: PPUSH
35798: CALL_OW 251
35802: PLUS
35803: ST_TO_ADDR
// end ;
35804: GO 35759
35806: POP
35807: POP
// x = x div ai_attacking_soldiers [ base ] ;
35808: LD_ADDR_VAR 0 16
35812: PUSH
35813: LD_VAR 0 16
35817: PUSH
35818: LD_EXP 63
35822: PUSH
35823: LD_VAR 0 4
35827: ARRAY
35828: DIV
35829: ST_TO_ADDR
// y = y div ai_attacking_soldiers [ base ] ;
35830: LD_ADDR_VAR 0 17
35834: PUSH
35835: LD_VAR 0 17
35839: PUSH
35840: LD_EXP 63
35844: PUSH
35845: LD_VAR 0 4
35849: ARRAY
35850: DIV
35851: ST_TO_ADDR
// temp_value = 0 ;
35852: LD_ADDR_VAR 0 3
35856: PUSH
35857: LD_INT 0
35859: ST_TO_ADDR
// for i in ai_attacking_soldiers [ base ] do
35860: LD_ADDR_VAR 0 2
35864: PUSH
35865: LD_EXP 63
35869: PUSH
35870: LD_VAR 0 4
35874: ARRAY
35875: PUSH
35876: FOR_IN
35877: IFFALSE 35928
// begin k = GetDistUnitXY ( i , x , y ) ;
35879: LD_ADDR_VAR 0 8
35883: PUSH
35884: LD_VAR 0 2
35888: PPUSH
35889: LD_VAR 0 16
35893: PPUSH
35894: LD_VAR 0 17
35898: PPUSH
35899: CALL_OW 297
35903: ST_TO_ADDR
// if k > temp_value then
35904: LD_VAR 0 8
35908: PUSH
35909: LD_VAR 0 3
35913: GREATER
35914: IFFALSE 35926
// temp_value = k ;
35916: LD_ADDR_VAR 0 3
35920: PUSH
35921: LD_VAR 0 8
35925: ST_TO_ADDR
// end ;
35926: GO 35876
35928: POP
35929: POP
// for i in ai_attacking_scientists [ base ] do
35930: LD_ADDR_VAR 0 2
35934: PUSH
35935: LD_EXP 64
35939: PUSH
35940: LD_VAR 0 4
35944: ARRAY
35945: PUSH
35946: FOR_IN
35947: IFFALSE 36053
// if GetDistUnitXY ( i , x , y ) > temp_value then
35949: LD_VAR 0 2
35953: PPUSH
35954: LD_VAR 0 16
35958: PPUSH
35959: LD_VAR 0 17
35963: PPUSH
35964: CALL_OW 297
35968: PUSH
35969: LD_VAR 0 3
35973: GREATER
35974: IFFALSE 36051
// case GetType ( IsInUnit ( i ) ) of unit_building :
35976: LD_VAR 0 2
35980: PPUSH
35981: CALL_OW 310
35985: PPUSH
35986: CALL_OW 247
35990: PUSH
35991: LD_INT 3
35993: DOUBLE
35994: EQUAL
35995: IFTRUE 35999
35997: GO 36011
35999: POP
// ComExitBuilding ( i ) ; unit_vehicle :
36000: LD_VAR 0 2
36004: PPUSH
36005: CALL_OW 122
36009: GO 36051
36011: LD_INT 2
36013: DOUBLE
36014: EQUAL
36015: IFTRUE 36019
36017: GO 36031
36019: POP
// ComExitVehicle ( i ) ; else
36020: LD_VAR 0 2
36024: PPUSH
36025: CALL_OW 121
36029: GO 36051
36031: POP
// ComMoveXY ( i , x , y ) ; end ;
36032: LD_VAR 0 2
36036: PPUSH
36037: LD_VAR 0 16
36041: PPUSH
36042: LD_VAR 0 17
36046: PPUSH
36047: CALL_OW 111
36051: GO 35946
36053: POP
36054: POP
// end ; if not all_are_ready then
36055: LD_VAR 0 26
36059: NOT
36060: IFFALSE 36784
// begin all_done = true ;
36062: LD_ADDR_VAR 0 18
36066: PUSH
36067: LD_INT 1
36069: ST_TO_ADDR
// for k = 1 to 2 do
36070: LD_ADDR_VAR 0 8
36074: PUSH
36075: DOUBLE
36076: LD_INT 1
36078: DEC
36079: ST_TO_ADDR
36080: LD_INT 2
36082: PUSH
36083: FOR_TO
36084: IFFALSE 36671
// begin case k of 1 :
36086: LD_VAR 0 8
36090: PUSH
36091: LD_INT 1
36093: DOUBLE
36094: EQUAL
36095: IFTRUE 36099
36097: GO 36248
36099: POP
// begin temp_list = attacking_vehicles ;
36100: LD_ADDR_VAR 0 5
36104: PUSH
36105: LD_VAR 0 21
36109: ST_TO_ADDR
// temp_list_2 = vehicle_prepare_hexes ;
36110: LD_ADDR_VAR 0 7
36114: PUSH
36115: LD_VAR 0 23
36119: ST_TO_ADDR
// if russian_attack_strategy = 2 then
36120: LD_EXP 83
36124: PUSH
36125: LD_INT 2
36127: EQUAL
36128: IFFALSE 36246
// begin if prepare_veh_movement then
36130: LD_VAR 0 29
36134: IFFALSE 36188
// begin prepare_veh_movement = false ;
36136: LD_ADDR_VAR 0 29
36140: PUSH
36141: LD_INT 0
36143: ST_TO_ADDR
// for i in temp_list do
36144: LD_ADDR_VAR 0 2
36148: PUSH
36149: LD_VAR 0 5
36153: PUSH
36154: FOR_IN
36155: IFFALSE 36186
// if not IsInArea ( i , area ) then
36157: LD_VAR 0 2
36161: PPUSH
36162: LD_VAR 0 15
36166: PPUSH
36167: CALL_OW 308
36171: NOT
36172: IFFALSE 36184
// begin prepare_veh_movement = true ;
36174: LD_ADDR_VAR 0 29
36178: PUSH
36179: LD_INT 1
36181: ST_TO_ADDR
// break ;
36182: GO 36186
// end ;
36184: GO 36154
36186: POP
36187: POP
// end ; vehs_to_move_to_start_pos = [ ] ;
36188: LD_ADDR_VAR 0 28
36192: PUSH
36193: EMPTY
36194: ST_TO_ADDR
// for i in temp_list do
36195: LD_ADDR_VAR 0 2
36199: PUSH
36200: LD_VAR 0 5
36204: PUSH
36205: FOR_IN
36206: IFFALSE 36244
// begin vehs_to_move_to_start_pos = vehs_to_move_to_start_pos ^ i ;
36208: LD_ADDR_VAR 0 28
36212: PUSH
36213: LD_VAR 0 28
36217: PUSH
36218: LD_VAR 0 2
36222: ADD
36223: ST_TO_ADDR
// if IsInArea ( i , area ) then
36224: LD_VAR 0 2
36228: PPUSH
36229: LD_VAR 0 15
36233: PPUSH
36234: CALL_OW 308
36238: IFFALSE 36242
// break ;
36240: GO 36244
// end ;
36242: GO 36205
36244: POP
36245: POP
// end ; end ; 2 :
36246: GO 36280
36248: LD_INT 2
36250: DOUBLE
36251: EQUAL
36252: IFTRUE 36256
36254: GO 36279
36256: POP
// begin temp_list = attacking_humans ;
36257: LD_ADDR_VAR 0 5
36261: PUSH
36262: LD_VAR 0 14
36266: ST_TO_ADDR
// temp_list_2 = human_prepare_hexes ;
36267: LD_ADDR_VAR 0 7
36271: PUSH
36272: LD_VAR 0 22
36276: ST_TO_ADDR
// end ; end ;
36277: GO 36280
36279: POP
// temp_value = true ;
36280: LD_ADDR_VAR 0 3
36284: PUSH
36285: LD_INT 1
36287: ST_TO_ADDR
// for i in temp_list do
36288: LD_ADDR_VAR 0 2
36292: PUSH
36293: LD_VAR 0 5
36297: PUSH
36298: FOR_IN
36299: IFFALSE 36540
// begin if ai_attacking_unit_hex_index [ base ] [ i ] = temp_list_2 + 0 then
36301: LD_EXP 74
36305: PUSH
36306: LD_VAR 0 4
36310: ARRAY
36311: PUSH
36312: LD_VAR 0 2
36316: ARRAY
36317: PUSH
36318: LD_VAR 0 7
36322: PUSH
36323: LD_INT 0
36325: PLUS
36326: EQUAL
36327: IFFALSE 36339
// temp_value = false else
36329: LD_ADDR_VAR 0 3
36333: PUSH
36334: LD_INT 0
36336: ST_TO_ADDR
36337: GO 36347
// all_done = false ;
36339: LD_ADDR_VAR 0 18
36343: PUSH
36344: LD_INT 0
36346: ST_TO_ADDR
// temp_list_3 = temp_list_2 [ ai_attacking_unit_hex_index [ base ] [ i ] ] ;
36347: LD_ADDR_VAR 0 11
36351: PUSH
36352: LD_VAR 0 7
36356: PUSH
36357: LD_EXP 74
36361: PUSH
36362: LD_VAR 0 4
36366: ARRAY
36367: PUSH
36368: LD_VAR 0 2
36372: ARRAY
36373: ARRAY
36374: ST_TO_ADDR
// if k = 1 and russian_attack_strategy = 2 then
36375: LD_VAR 0 8
36379: PUSH
36380: LD_INT 1
36382: EQUAL
36383: PUSH
36384: LD_EXP 83
36388: PUSH
36389: LD_INT 2
36391: EQUAL
36392: AND
36393: IFFALSE 36420
// begin temp_list_3 = CalculateVehicleNotReadyHex ( temp_list_3 , i , attacking_vehicles ) ;
36395: LD_ADDR_VAR 0 11
36399: PUSH
36400: LD_VAR 0 11
36404: PPUSH
36405: LD_VAR 0 2
36409: PPUSH
36410: LD_VAR 0 21
36414: PPUSH
36415: CALL 41207 0 3
36419: ST_TO_ADDR
// end ; if GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) > [ vehicle_dist , human_dist + 1 ] [ k ] and not ( GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) <= 10 and not HasTask ( i ) ) then
36420: LD_VAR 0 2
36424: PPUSH
36425: LD_VAR 0 11
36429: PUSH
36430: LD_INT 1
36432: ARRAY
36433: PPUSH
36434: LD_VAR 0 11
36438: PUSH
36439: LD_INT 2
36441: ARRAY
36442: PPUSH
36443: CALL_OW 297
36447: PUSH
36448: LD_VAR 0 25
36452: PUSH
36453: LD_VAR 0 24
36457: PUSH
36458: LD_INT 1
36460: PLUS
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_VAR 0 8
36470: ARRAY
36471: GREATER
36472: PUSH
36473: LD_VAR 0 2
36477: PPUSH
36478: LD_VAR 0 11
36482: PUSH
36483: LD_INT 1
36485: ARRAY
36486: PPUSH
36487: LD_VAR 0 11
36491: PUSH
36492: LD_INT 2
36494: ARRAY
36495: PPUSH
36496: CALL_OW 297
36500: PUSH
36501: LD_INT 10
36503: LESSEQUAL
36504: PUSH
36505: LD_VAR 0 2
36509: PPUSH
36510: CALL_OW 314
36514: NOT
36515: AND
36516: NOT
36517: AND
36518: IFFALSE 36538
// begin temp_value = false ;
36520: LD_ADDR_VAR 0 3
36524: PUSH
36525: LD_INT 0
36527: ST_TO_ADDR
// all_done = false ;
36528: LD_ADDR_VAR 0 18
36532: PUSH
36533: LD_INT 0
36535: ST_TO_ADDR
// break ;
36536: GO 36540
// end ; end ;
36538: GO 36298
36540: POP
36541: POP
// if temp_value then
36542: LD_VAR 0 3
36546: IFFALSE 36669
// begin if k = 2 then
36548: LD_VAR 0 8
36552: PUSH
36553: LD_INT 2
36555: EQUAL
36556: IFFALSE 36580
// temp_list = temp_list union ai_attacking_scientists [ base ] ;
36558: LD_ADDR_VAR 0 5
36562: PUSH
36563: LD_VAR 0 5
36567: PUSH
36568: LD_EXP 64
36572: PUSH
36573: LD_VAR 0 4
36577: ARRAY
36578: UNION
36579: ST_TO_ADDR
// for i in temp_list do
36580: LD_ADDR_VAR 0 2
36584: PUSH
36585: LD_VAR 0 5
36589: PUSH
36590: FOR_IN
36591: IFFALSE 36667
// begin temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
36593: LD_ADDR_VAR 0 7
36597: PUSH
36598: LD_EXP 74
36602: PUSH
36603: LD_VAR 0 4
36607: ARRAY
36608: PPUSH
36609: LD_VAR 0 2
36613: PPUSH
36614: LD_EXP 74
36618: PUSH
36619: LD_VAR 0 4
36623: ARRAY
36624: PUSH
36625: LD_VAR 0 2
36629: ARRAY
36630: PUSH
36631: LD_INT 1
36633: PLUS
36634: PPUSH
36635: CALL_OW 1
36639: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
36640: LD_ADDR_EXP 74
36644: PUSH
36645: LD_EXP 74
36649: PPUSH
36650: LD_VAR 0 4
36654: PPUSH
36655: LD_VAR 0 7
36659: PPUSH
36660: CALL_OW 1
36664: ST_TO_ADDR
// end ;
36665: GO 36590
36667: POP
36668: POP
// end ; end ;
36669: GO 36083
36671: POP
36672: POP
// if all_done then
36673: LD_VAR 0 18
36677: IFFALSE 36782
// begin all_are_ready = true ;
36679: LD_ADDR_VAR 0 26
36683: PUSH
36684: LD_INT 1
36686: ST_TO_ADDR
// for i in attacking_vehicles ^ ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
36687: LD_ADDR_VAR 0 2
36691: PUSH
36692: LD_VAR 0 21
36696: PUSH
36697: LD_EXP 63
36701: PUSH
36702: LD_VAR 0 4
36706: ARRAY
36707: ADD
36708: PUSH
36709: LD_EXP 64
36713: PUSH
36714: LD_VAR 0 4
36718: ARRAY
36719: ADD
36720: PUSH
36721: FOR_IN
36722: IFFALSE 36780
// begin temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , 1 ) ;
36724: LD_ADDR_VAR 0 7
36728: PUSH
36729: LD_EXP 74
36733: PUSH
36734: LD_VAR 0 4
36738: ARRAY
36739: PPUSH
36740: LD_VAR 0 2
36744: PPUSH
36745: LD_INT 1
36747: PPUSH
36748: CALL_OW 1
36752: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
36753: LD_ADDR_EXP 74
36757: PUSH
36758: LD_EXP 74
36762: PPUSH
36763: LD_VAR 0 4
36767: PPUSH
36768: LD_VAR 0 7
36772: PPUSH
36773: CALL_OW 1
36777: ST_TO_ADDR
// end ;
36778: GO 36721
36780: POP
36781: POP
// end ; end else
36782: GO 37436
// begin temp_list_3 = [ false , false ] ;
36784: LD_ADDR_VAR 0 11
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: ST_TO_ADDR
// for i in attacking_vehicles do
36799: LD_ADDR_VAR 0 2
36803: PUSH
36804: LD_VAR 0 21
36808: PUSH
36809: FOR_IN
36810: IFFALSE 37058
// if ai_attacking_unit_hex_index [ base ] [ i ] < vehicle_attack_hexes + 0 then
36812: LD_EXP 74
36816: PUSH
36817: LD_VAR 0 4
36821: ARRAY
36822: PUSH
36823: LD_VAR 0 2
36827: ARRAY
36828: PUSH
36829: LD_VAR 0 10
36833: PUSH
36834: LD_INT 0
36836: PLUS
36837: LESS
36838: IFFALSE 37056
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) <= vehicle_dist then
36840: LD_VAR 0 2
36844: PPUSH
36845: LD_VAR 0 10
36849: PUSH
36850: LD_EXP 74
36854: PUSH
36855: LD_VAR 0 4
36859: ARRAY
36860: PUSH
36861: LD_VAR 0 2
36865: ARRAY
36866: ARRAY
36867: PUSH
36868: LD_INT 1
36870: ARRAY
36871: PPUSH
36872: LD_VAR 0 10
36876: PUSH
36877: LD_EXP 74
36881: PUSH
36882: LD_VAR 0 4
36886: ARRAY
36887: PUSH
36888: LD_VAR 0 2
36892: ARRAY
36893: ARRAY
36894: PUSH
36895: LD_INT 2
36897: ARRAY
36898: PPUSH
36899: CALL_OW 297
36903: PUSH
36904: LD_VAR 0 25
36908: LESSEQUAL
36909: IFFALSE 37056
// begin if wait_indexes_pos <= wait_indexes + 0 then
36911: LD_VAR 0 31
36915: PUSH
36916: LD_VAR 0 30
36920: PUSH
36921: LD_INT 0
36923: PLUS
36924: LESSEQUAL
36925: IFFALSE 36984
// if ai_attacking_unit_hex_index [ base ] [ i ] = wait_indexes [ wait_indexes_pos ] [ 1 ] then
36927: LD_EXP 74
36931: PUSH
36932: LD_VAR 0 4
36936: ARRAY
36937: PUSH
36938: LD_VAR 0 2
36942: ARRAY
36943: PUSH
36944: LD_VAR 0 30
36948: PUSH
36949: LD_VAR 0 31
36953: ARRAY
36954: PUSH
36955: LD_INT 1
36957: ARRAY
36958: EQUAL
36959: IFFALSE 36984
// begin temp_list_3 = Replace ( temp_list_3 , 1 , true ) ;
36961: LD_ADDR_VAR 0 11
36965: PUSH
36966: LD_VAR 0 11
36970: PPUSH
36971: LD_INT 1
36973: PPUSH
36974: LD_INT 1
36976: PPUSH
36977: CALL_OW 1
36981: ST_TO_ADDR
// continue ;
36982: GO 36809
// end ; temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
36984: LD_ADDR_VAR 0 7
36988: PUSH
36989: LD_EXP 74
36993: PUSH
36994: LD_VAR 0 4
36998: ARRAY
36999: PPUSH
37000: LD_VAR 0 2
37004: PPUSH
37005: LD_EXP 74
37009: PUSH
37010: LD_VAR 0 4
37014: ARRAY
37015: PUSH
37016: LD_VAR 0 2
37020: ARRAY
37021: PUSH
37022: LD_INT 1
37024: PLUS
37025: PPUSH
37026: CALL_OW 1
37030: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37031: LD_ADDR_EXP 74
37035: PUSH
37036: LD_EXP 74
37040: PPUSH
37041: LD_VAR 0 4
37045: PPUSH
37046: LD_VAR 0 7
37050: PPUSH
37051: CALL_OW 1
37055: ST_TO_ADDR
// end ; end ;
37056: GO 36809
37058: POP
37059: POP
// temp_value = true ;
37060: LD_ADDR_VAR 0 3
37064: PUSH
37065: LD_INT 1
37067: ST_TO_ADDR
// for i in attacking_humans do
37068: LD_ADDR_VAR 0 2
37072: PUSH
37073: LD_VAR 0 14
37077: PUSH
37078: FOR_IN
37079: IFFALSE 37192
// if ai_attacking_unit_hex_index [ base ] [ i ] <= human_attack_hexes + 0 then
37081: LD_EXP 74
37085: PUSH
37086: LD_VAR 0 4
37090: ARRAY
37091: PUSH
37092: LD_VAR 0 2
37096: ARRAY
37097: PUSH
37098: LD_VAR 0 9
37102: PUSH
37103: LD_INT 0
37105: PLUS
37106: LESSEQUAL
37107: IFFALSE 37190
// begin if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
37109: LD_VAR 0 2
37113: PPUSH
37114: LD_VAR 0 9
37118: PUSH
37119: LD_EXP 74
37123: PUSH
37124: LD_VAR 0 4
37128: ARRAY
37129: PUSH
37130: LD_VAR 0 2
37134: ARRAY
37135: ARRAY
37136: PUSH
37137: LD_INT 1
37139: ARRAY
37140: PPUSH
37141: LD_VAR 0 9
37145: PUSH
37146: LD_EXP 74
37150: PUSH
37151: LD_VAR 0 4
37155: ARRAY
37156: PUSH
37157: LD_VAR 0 2
37161: ARRAY
37162: ARRAY
37163: PUSH
37164: LD_INT 2
37166: ARRAY
37167: PPUSH
37168: CALL_OW 297
37172: PUSH
37173: LD_VAR 0 24
37177: GREATER
37178: IFFALSE 37190
// begin temp_value = false ;
37180: LD_ADDR_VAR 0 3
37184: PUSH
37185: LD_INT 0
37187: ST_TO_ADDR
// break ;
37188: GO 37192
// end ; end ;
37190: GO 37078
37192: POP
37193: POP
// if temp_value then
37194: LD_VAR 0 3
37198: IFFALSE 37408
// for i in ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
37200: LD_ADDR_VAR 0 2
37204: PUSH
37205: LD_EXP 63
37209: PUSH
37210: LD_VAR 0 4
37214: ARRAY
37215: PUSH
37216: LD_EXP 64
37220: PUSH
37221: LD_VAR 0 4
37225: ARRAY
37226: ADD
37227: PUSH
37228: FOR_IN
37229: IFFALSE 37406
// if ai_attacking_unit_hex_index [ base ] [ i ] < human_attack_hexes + 0 then
37231: LD_EXP 74
37235: PUSH
37236: LD_VAR 0 4
37240: ARRAY
37241: PUSH
37242: LD_VAR 0 2
37246: ARRAY
37247: PUSH
37248: LD_VAR 0 9
37252: PUSH
37253: LD_INT 0
37255: PLUS
37256: LESS
37257: IFFALSE 37404
// begin if wait_indexes_pos <= wait_indexes + 0 then
37259: LD_VAR 0 31
37263: PUSH
37264: LD_VAR 0 30
37268: PUSH
37269: LD_INT 0
37271: PLUS
37272: LESSEQUAL
37273: IFFALSE 37332
// if ai_attacking_unit_hex_index [ base ] [ i ] = wait_indexes [ wait_indexes_pos ] [ 2 ] then
37275: LD_EXP 74
37279: PUSH
37280: LD_VAR 0 4
37284: ARRAY
37285: PUSH
37286: LD_VAR 0 2
37290: ARRAY
37291: PUSH
37292: LD_VAR 0 30
37296: PUSH
37297: LD_VAR 0 31
37301: ARRAY
37302: PUSH
37303: LD_INT 2
37305: ARRAY
37306: EQUAL
37307: IFFALSE 37332
// begin temp_list_3 = Replace ( temp_list_3 , 2 , true ) ;
37309: LD_ADDR_VAR 0 11
37313: PUSH
37314: LD_VAR 0 11
37318: PPUSH
37319: LD_INT 2
37321: PPUSH
37322: LD_INT 1
37324: PPUSH
37325: CALL_OW 1
37329: ST_TO_ADDR
// break ;
37330: GO 37406
// end ; temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37332: LD_ADDR_VAR 0 7
37336: PUSH
37337: LD_EXP 74
37341: PUSH
37342: LD_VAR 0 4
37346: ARRAY
37347: PPUSH
37348: LD_VAR 0 2
37352: PPUSH
37353: LD_EXP 74
37357: PUSH
37358: LD_VAR 0 4
37362: ARRAY
37363: PUSH
37364: LD_VAR 0 2
37368: ARRAY
37369: PUSH
37370: LD_INT 1
37372: PLUS
37373: PPUSH
37374: CALL_OW 1
37378: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37379: LD_ADDR_EXP 74
37383: PUSH
37384: LD_EXP 74
37388: PPUSH
37389: LD_VAR 0 4
37393: PPUSH
37394: LD_VAR 0 7
37398: PPUSH
37399: CALL_OW 1
37403: ST_TO_ADDR
// end ;
37404: GO 37228
37406: POP
37407: POP
// if ( temp_list_3 diff true ) = 0 then
37408: LD_VAR 0 11
37412: PUSH
37413: LD_INT 1
37415: DIFF
37416: PUSH
37417: LD_INT 0
37419: EQUAL
37420: IFFALSE 37436
// wait_indexes_pos = wait_indexes_pos + 1 ;
37422: LD_ADDR_VAR 0 31
37426: PUSH
37427: LD_VAR 0 31
37431: PUSH
37432: LD_INT 1
37434: PLUS
37435: ST_TO_ADDR
// end ; if russian_attack_strategy = 2 and not strat_2_attack_permitted then
37436: LD_EXP 83
37440: PUSH
37441: LD_INT 2
37443: EQUAL
37444: PUSH
37445: LD_VAR 0 27
37449: NOT
37450: AND
37451: IFFALSE 37586
// begin temp_list = UnitFilter ( attacking_vehicles , [ f_inarea , player_base_1 ] ) ;
37453: LD_ADDR_VAR 0 5
37457: PUSH
37458: LD_VAR 0 21
37462: PPUSH
37463: LD_INT 95
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PPUSH
37473: CALL_OW 72
37477: ST_TO_ADDR
// if temp_list + 0 >= attacking_vehicles + 0 or temp_list + 0 >= 3 then
37478: LD_VAR 0 5
37482: PUSH
37483: LD_INT 0
37485: PLUS
37486: PUSH
37487: LD_VAR 0 21
37491: PUSH
37492: LD_INT 0
37494: PLUS
37495: GREATEREQUAL
37496: PUSH
37497: LD_VAR 0 5
37501: PUSH
37502: LD_INT 0
37504: PLUS
37505: PUSH
37506: LD_INT 3
37508: GREATEREQUAL
37509: OR
37510: IFFALSE 37522
// strat_2_attack_permitted = true else
37512: LD_ADDR_VAR 0 27
37516: PUSH
37517: LD_INT 1
37519: ST_TO_ADDR
37520: GO 37586
// begin temp_value = true ;
37522: LD_ADDR_VAR 0 3
37526: PUSH
37527: LD_INT 1
37529: ST_TO_ADDR
// for i in attacking_vehicles do
37530: LD_ADDR_VAR 0 2
37534: PUSH
37535: LD_VAR 0 21
37539: PUSH
37540: FOR_IN
37541: IFFALSE 37570
// if Attacks ( i ) = 0 then
37543: LD_VAR 0 2
37547: PPUSH
37548: CALL_OW 320
37552: PUSH
37553: LD_INT 0
37555: EQUAL
37556: IFFALSE 37568
// begin temp_value = false ;
37558: LD_ADDR_VAR 0 3
37562: PUSH
37563: LD_INT 0
37565: ST_TO_ADDR
// break ;
37566: GO 37570
// end ;
37568: GO 37540
37570: POP
37571: POP
// if temp_value then
37572: LD_VAR 0 3
37576: IFFALSE 37586
// strat_2_attack_permitted = true ;
37578: LD_ADDR_VAR 0 27
37582: PUSH
37583: LD_INT 1
37585: ST_TO_ADDR
// end ; end ; for i in attacking_vehicles ^ attacking_humans do
37586: LD_ADDR_VAR 0 2
37590: PUSH
37591: LD_VAR 0 21
37595: PUSH
37596: LD_VAR 0 14
37600: ADD
37601: PUSH
37602: FOR_IN
37603: IFFALSE 40209
// begin if GetClass ( i ) = class_bazooker then
37605: LD_VAR 0 2
37609: PPUSH
37610: CALL_OW 257
37614: PUSH
37615: LD_INT 9
37617: EQUAL
37618: IFFALSE 37985
// begin temp_list = GetTaskList ( i ) ;
37620: LD_ADDR_VAR 0 5
37624: PUSH
37625: LD_VAR 0 2
37629: PPUSH
37630: CALL_OW 437
37634: ST_TO_ADDR
// if temp_list > 0 then
37635: LD_VAR 0 5
37639: PUSH
37640: LD_INT 0
37642: GREATER
37643: IFFALSE 37683
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
37645: LD_VAR 0 5
37649: PUSH
37650: LD_INT 1
37652: ARRAY
37653: PUSH
37654: LD_INT 1
37656: ARRAY
37657: PUSH
37658: LD_STRING &
37660: EQUAL
37661: PUSH
37662: LD_VAR 0 5
37666: PUSH
37667: LD_INT 1
37669: ARRAY
37670: PUSH
37671: LD_INT 1
37673: ARRAY
37674: PUSH
37675: LD_STRING %
37677: EQUAL
37678: OR
37679: IFFALSE 37683
// continue ;
37681: GO 37602
// un1 = Attacks ( i ) ;
37683: LD_ADDR_VAR 0 19
37687: PUSH
37688: LD_VAR 0 2
37692: PPUSH
37693: CALL_OW 320
37697: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
37698: LD_VAR 0 19
37702: PUSH
37703: LD_INT 0
37705: GREATER
37706: PUSH
37707: LD_VAR 0 19
37711: PUSH
37712: EMPTY
37713: LIST
37714: PPUSH
37715: CALL 40344 0 1
37719: PUSH
37720: LD_INT 0
37722: GREATER
37723: AND
37724: IFFALSE 37985
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
37726: LD_ADDR_VAR 0 7
37730: PUSH
37731: LD_VAR 0 19
37735: PPUSH
37736: CALL_OW 250
37740: PUSH
37741: LD_VAR 0 19
37745: PPUSH
37746: CALL_OW 251
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: ST_TO_ADDR
// temp_value = false ;
37755: LD_ADDR_VAR 0 3
37759: PUSH
37760: LD_INT 0
37762: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
37763: LD_ADDR_VAR 0 20
37767: PUSH
37768: LD_EXP 72
37772: PUSH
37773: LD_VAR 0 4
37777: ARRAY
37778: PUSH
37779: LD_EXP 73
37783: PUSH
37784: LD_VAR 0 4
37788: ARRAY
37789: ADD
37790: PUSH
37791: FOR_IN
37792: IFFALSE 37864
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
37794: LD_VAR 0 7
37798: PUSH
37799: LD_INT 1
37801: ARRAY
37802: PPUSH
37803: LD_VAR 0 7
37807: PUSH
37808: LD_INT 2
37810: ARRAY
37811: PPUSH
37812: LD_VAR 0 20
37816: PUSH
37817: LD_INT 1
37819: ARRAY
37820: PPUSH
37821: LD_VAR 0 20
37825: PUSH
37826: LD_INT 2
37828: ARRAY
37829: PPUSH
37830: CALL_OW 298
37834: PUSH
37835: LD_EXP 71
37839: PUSH
37840: LD_VAR 0 1
37844: ARRAY
37845: PUSH
37846: LD_INT 2
37848: ARRAY
37849: LESSEQUAL
37850: IFFALSE 37862
// begin temp_value = true ;
37852: LD_ADDR_VAR 0 3
37856: PUSH
37857: LD_INT 1
37859: ST_TO_ADDR
// break ;
37860: GO 37864
// end ;
37862: GO 37791
37864: POP
37865: POP
// if not temp_value then
37866: LD_VAR 0 3
37870: NOT
37871: IFFALSE 37985
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
37873: LD_VAR 0 2
37877: PPUSH
37878: LD_VAR 0 7
37882: PUSH
37883: LD_INT 1
37885: ARRAY
37886: PPUSH
37887: LD_VAR 0 7
37891: PUSH
37892: LD_INT 2
37894: ARRAY
37895: PPUSH
37896: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
37900: LD_ADDR_VAR 0 5
37904: PUSH
37905: LD_EXP 73
37909: PUSH
37910: LD_VAR 0 4
37914: ARRAY
37915: PPUSH
37916: LD_INT 1
37918: PPUSH
37919: LD_VAR 0 7
37923: PUSH
37924: LD_INT 1
37926: ARRAY
37927: PUSH
37928: LD_VAR 0 7
37932: PUSH
37933: LD_INT 2
37935: ARRAY
37936: PUSH
37937: LD_VAR 0 2
37941: PUSH
37942: LD_OWVAR 1
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: PPUSH
37953: CALL_OW 2
37957: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
37958: LD_ADDR_EXP 73
37962: PUSH
37963: LD_EXP 73
37967: PPUSH
37968: LD_VAR 0 4
37972: PPUSH
37973: LD_VAR 0 5
37977: PPUSH
37978: CALL_OW 1
37982: ST_TO_ADDR
// continue ;
37983: GO 37602
// end ; end ; end ; if not all_are_ready then
37985: LD_VAR 0 26
37989: NOT
37990: IFFALSE 38354
// begin if i in attacking_vehicles then
37992: LD_VAR 0 2
37996: PUSH
37997: LD_VAR 0 21
38001: IN
38002: IFFALSE 38115
// begin if russian_attack_strategy = 2 then
38004: LD_EXP 83
38008: PUSH
38009: LD_INT 2
38011: EQUAL
38012: IFFALSE 38093
// begin if prepare_veh_movement then
38014: LD_VAR 0 29
38018: IFFALSE 38078
// begin if not IsInArea ( i , area ) then
38020: LD_VAR 0 2
38024: PPUSH
38025: LD_VAR 0 15
38029: PPUSH
38030: CALL_OW 308
38034: NOT
38035: IFFALSE 38076
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
38037: LD_VAR 0 2
38041: PPUSH
38042: LD_EXP 41
38046: PUSH
38047: LD_VAR 0 4
38051: ARRAY
38052: PUSH
38053: LD_INT 1
38055: ARRAY
38056: PPUSH
38057: LD_EXP 41
38061: PUSH
38062: LD_VAR 0 4
38066: ARRAY
38067: PUSH
38068: LD_INT 2
38070: ARRAY
38071: PPUSH
38072: CALL_OW 111
// continue ;
38076: GO 37602
// end ; if not i in vehs_to_move_to_start_pos then
38078: LD_VAR 0 2
38082: PUSH
38083: LD_VAR 0 28
38087: IN
38088: NOT
38089: IFFALSE 38093
// continue ;
38091: GO 37602
// end ; temp_list = vehicle_prepare_hexes ;
38093: LD_ADDR_VAR 0 5
38097: PUSH
38098: LD_VAR 0 23
38102: ST_TO_ADDR
// k = vehicle_dist ;
38103: LD_ADDR_VAR 0 8
38107: PUSH
38108: LD_VAR 0 25
38112: ST_TO_ADDR
// end else
38113: GO 38135
// begin temp_list = human_prepare_hexes ;
38115: LD_ADDR_VAR 0 5
38119: PUSH
38120: LD_VAR 0 22
38124: ST_TO_ADDR
// k = human_dist ;
38125: LD_ADDR_VAR 0 8
38129: PUSH
38130: LD_VAR 0 24
38134: ST_TO_ADDR
// end ; if ai_attacking_unit_hex_index [ base ] [ i ] <= temp_list then
38135: LD_EXP 74
38139: PUSH
38140: LD_VAR 0 4
38144: ARRAY
38145: PUSH
38146: LD_VAR 0 2
38150: ARRAY
38151: PUSH
38152: LD_VAR 0 5
38156: LESSEQUAL
38157: IFFALSE 38352
// begin temp_list_3 = temp_list [ ai_attacking_unit_hex_index [ base ] [ i ] ] ;
38159: LD_ADDR_VAR 0 11
38163: PUSH
38164: LD_VAR 0 5
38168: PUSH
38169: LD_EXP 74
38173: PUSH
38174: LD_VAR 0 4
38178: ARRAY
38179: PUSH
38180: LD_VAR 0 2
38184: ARRAY
38185: ARRAY
38186: ST_TO_ADDR
// if i in attacking_vehicles and russian_attack_strategy = 2 then
38187: LD_VAR 0 2
38191: PUSH
38192: LD_VAR 0 21
38196: IN
38197: PUSH
38198: LD_EXP 83
38202: PUSH
38203: LD_INT 2
38205: EQUAL
38206: AND
38207: IFFALSE 38234
// begin temp_list_3 = CalculateVehicleNotReadyHex ( temp_list_3 , i , attacking_vehicles ) ;
38209: LD_ADDR_VAR 0 11
38213: PUSH
38214: LD_VAR 0 11
38218: PPUSH
38219: LD_VAR 0 2
38223: PPUSH
38224: LD_VAR 0 21
38228: PPUSH
38229: CALL 41207 0 3
38233: ST_TO_ADDR
// end ; if GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) > k then
38234: LD_VAR 0 2
38238: PPUSH
38239: LD_VAR 0 11
38243: PUSH
38244: LD_INT 1
38246: ARRAY
38247: PPUSH
38248: LD_VAR 0 11
38252: PUSH
38253: LD_INT 2
38255: ARRAY
38256: PPUSH
38257: CALL_OW 297
38261: PUSH
38262: LD_VAR 0 8
38266: GREATER
38267: IFFALSE 38352
// begin case GetType ( IsInUnit ( i ) ) of unit_building :
38269: LD_VAR 0 2
38273: PPUSH
38274: CALL_OW 310
38278: PPUSH
38279: CALL_OW 247
38283: PUSH
38284: LD_INT 3
38286: DOUBLE
38287: EQUAL
38288: IFTRUE 38292
38290: GO 38304
38292: POP
// ComExitBuilding ( i ) ; unit_vehicle :
38293: LD_VAR 0 2
38297: PPUSH
38298: CALL_OW 122
38302: GO 38352
38304: LD_INT 2
38306: DOUBLE
38307: EQUAL
38308: IFTRUE 38312
38310: GO 38324
38312: POP
// ComExitVehicle ( i ) ; else
38313: LD_VAR 0 2
38317: PPUSH
38318: CALL_OW 121
38322: GO 38352
38324: POP
// ComMoveXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) ; end ;
38325: LD_VAR 0 2
38329: PPUSH
38330: LD_VAR 0 11
38334: PUSH
38335: LD_INT 1
38337: ARRAY
38338: PPUSH
38339: LD_VAR 0 11
38343: PUSH
38344: LD_INT 2
38346: ARRAY
38347: PPUSH
38348: CALL_OW 111
// end ; end ; end else
38352: GO 40207
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_human ] , [ f_dist , i , 20 ] , [ f_see , side ] ] ) ;
38354: LD_ADDR_VAR 0 5
38358: PUSH
38359: LD_INT 81
38361: PUSH
38362: LD_VAR 0 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 21
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 91
38383: PUSH
38384: LD_VAR 0 2
38388: PUSH
38389: LD_INT 20
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 101
38399: PUSH
38400: LD_VAR 0 1
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: PPUSH
38415: CALL_OW 69
38419: ST_TO_ADDR
// if russian_attack_strategy = 2 and GetY ( i ) >= 59 then
38420: LD_EXP 83
38424: PUSH
38425: LD_INT 2
38427: EQUAL
38428: PUSH
38429: LD_VAR 0 2
38433: PPUSH
38434: CALL_OW 251
38438: PUSH
38439: LD_INT 59
38441: GREATEREQUAL
38442: AND
38443: IFFALSE 38528
// begin k = 1 ;
38445: LD_ADDR_VAR 0 8
38449: PUSH
38450: LD_INT 1
38452: ST_TO_ADDR
// while k <= temp_list + 0 do
38453: LD_VAR 0 8
38457: PUSH
38458: LD_VAR 0 5
38462: PUSH
38463: LD_INT 0
38465: PLUS
38466: LESSEQUAL
38467: IFFALSE 38528
// begin if GetY ( temp_list [ k ] ) >= 59 then
38469: LD_VAR 0 5
38473: PUSH
38474: LD_VAR 0 8
38478: ARRAY
38479: PPUSH
38480: CALL_OW 251
38484: PUSH
38485: LD_INT 59
38487: GREATEREQUAL
38488: IFFALSE 38512
// begin temp_list = Delete ( temp_list , k ) ;
38490: LD_ADDR_VAR 0 5
38494: PUSH
38495: LD_VAR 0 5
38499: PPUSH
38500: LD_VAR 0 8
38504: PPUSH
38505: CALL_OW 3
38509: ST_TO_ADDR
// continue ;
38510: GO 38453
// end ; k = k + 1 ;
38512: LD_ADDR_VAR 0 8
38516: PUSH
38517: LD_VAR 0 8
38521: PUSH
38522: LD_INT 1
38524: PLUS
38525: ST_TO_ADDR
// end ;
38526: GO 38453
// end ; temp_value := russian_attack_strategy = 2 and i in attacking_vehicles and not strat_2_attack_permitted ;
38528: LD_ADDR_VAR 0 3
38532: PUSH
38533: LD_EXP 83
38537: PUSH
38538: LD_INT 2
38540: EQUAL
38541: PUSH
38542: LD_VAR 0 2
38546: PUSH
38547: LD_VAR 0 21
38551: IN
38552: AND
38553: PUSH
38554: LD_VAR 0 27
38558: NOT
38559: AND
38560: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
38561: LD_VAR 0 5
38565: PUSH
38566: LD_INT 0
38568: GREATER
38569: PUSH
38570: LD_VAR 0 3
38574: NOT
38575: AND
38576: IFFALSE 38712
// begin temp_list_2 = UnitFilter ( temp_list , [ f_not , [ f_lives , 250 ] ] ) ;
38578: LD_ADDR_VAR 0 7
38582: PUSH
38583: LD_VAR 0 5
38587: PPUSH
38588: LD_INT 3
38590: PUSH
38591: LD_INT 24
38593: PUSH
38594: LD_INT 250
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PPUSH
38605: CALL_OW 72
38609: ST_TO_ADDR
// if temp_list_2 > 0 then
38610: LD_VAR 0 7
38614: PUSH
38615: LD_INT 0
38617: GREATER
38618: IFFALSE 38630
// temp_list = temp_list_2 ;
38620: LD_ADDR_VAR 0 5
38624: PUSH
38625: LD_VAR 0 7
38629: ST_TO_ADDR
// temp_unit = AllNearestUnitToUnit ( temp_list , i ) ;
38630: LD_ADDR_VAR 0 6
38634: PUSH
38635: LD_VAR 0 5
38639: PPUSH
38640: LD_VAR 0 2
38644: PPUSH
38645: CALL_OW 75
38649: ST_TO_ADDR
// if GetLives ( temp_unit ) > 250 then
38650: LD_VAR 0 6
38654: PPUSH
38655: CALL_OW 256
38659: PUSH
38660: LD_INT 250
38662: GREATER
38663: IFFALSE 38696
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) else
38665: LD_VAR 0 2
38669: PPUSH
38670: LD_VAR 0 6
38674: PPUSH
38675: CALL_OW 250
38679: PPUSH
38680: LD_VAR 0 6
38684: PPUSH
38685: CALL_OW 251
38689: PPUSH
38690: CALL_OW 114
38694: GO 38710
// ComAttackUnit ( i , temp_unit ) ;
38696: LD_VAR 0 2
38700: PPUSH
38701: LD_VAR 0 6
38705: PPUSH
38706: CALL_OW 115
// end else
38710: GO 40207
// begin temp_list = FindNonhumansNearUnit ( side , i , 20 , true ) ;
38712: LD_ADDR_VAR 0 5
38716: PUSH
38717: LD_VAR 0 1
38721: PPUSH
38722: LD_VAR 0 2
38726: PPUSH
38727: LD_INT 20
38729: PPUSH
38730: LD_INT 1
38732: PPUSH
38733: CALL 40222 0 4
38737: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
38738: LD_VAR 0 5
38742: PUSH
38743: LD_INT 0
38745: GREATER
38746: PUSH
38747: LD_VAR 0 3
38751: NOT
38752: AND
38753: IFFALSE 39039
// begin if i in attacking_vehicles then
38755: LD_VAR 0 2
38759: PUSH
38760: LD_VAR 0 21
38764: IN
38765: IFFALSE 38903
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
38767: LD_VAR 0 2
38771: PPUSH
38772: LD_VAR 0 10
38776: PUSH
38777: LD_EXP 74
38781: PUSH
38782: LD_VAR 0 4
38786: ARRAY
38787: PUSH
38788: LD_VAR 0 2
38792: ARRAY
38793: ARRAY
38794: PUSH
38795: LD_INT 1
38797: ARRAY
38798: PPUSH
38799: LD_VAR 0 10
38803: PUSH
38804: LD_EXP 74
38808: PUSH
38809: LD_VAR 0 4
38813: ARRAY
38814: PUSH
38815: LD_VAR 0 2
38819: ARRAY
38820: ARRAY
38821: PUSH
38822: LD_INT 2
38824: ARRAY
38825: PPUSH
38826: CALL_OW 297
38830: PUSH
38831: LD_VAR 0 25
38835: GREATER
38836: IFFALSE 38901
// ComAgressiveMove ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
38838: LD_VAR 0 2
38842: PPUSH
38843: LD_VAR 0 10
38847: PUSH
38848: LD_EXP 74
38852: PUSH
38853: LD_VAR 0 4
38857: ARRAY
38858: PUSH
38859: LD_VAR 0 2
38863: ARRAY
38864: ARRAY
38865: PUSH
38866: LD_INT 1
38868: ARRAY
38869: PPUSH
38870: LD_VAR 0 10
38874: PUSH
38875: LD_EXP 74
38879: PUSH
38880: LD_VAR 0 4
38884: ARRAY
38885: PUSH
38886: LD_VAR 0 2
38890: ARRAY
38891: ARRAY
38892: PUSH
38893: LD_INT 2
38895: ARRAY
38896: PPUSH
38897: CALL_OW 114
// end else
38901: GO 39037
// if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
38903: LD_VAR 0 2
38907: PPUSH
38908: LD_VAR 0 9
38912: PUSH
38913: LD_EXP 74
38917: PUSH
38918: LD_VAR 0 4
38922: ARRAY
38923: PUSH
38924: LD_VAR 0 2
38928: ARRAY
38929: ARRAY
38930: PUSH
38931: LD_INT 1
38933: ARRAY
38934: PPUSH
38935: LD_VAR 0 9
38939: PUSH
38940: LD_EXP 74
38944: PUSH
38945: LD_VAR 0 4
38949: ARRAY
38950: PUSH
38951: LD_VAR 0 2
38955: ARRAY
38956: ARRAY
38957: PUSH
38958: LD_INT 2
38960: ARRAY
38961: PPUSH
38962: CALL_OW 297
38966: PUSH
38967: LD_VAR 0 24
38971: GREATER
38972: IFFALSE 39037
// ComAgressiveMove ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
38974: LD_VAR 0 2
38978: PPUSH
38979: LD_VAR 0 9
38983: PUSH
38984: LD_EXP 74
38988: PUSH
38989: LD_VAR 0 4
38993: ARRAY
38994: PUSH
38995: LD_VAR 0 2
38999: ARRAY
39000: ARRAY
39001: PUSH
39002: LD_INT 1
39004: ARRAY
39005: PPUSH
39006: LD_VAR 0 9
39010: PUSH
39011: LD_EXP 74
39015: PUSH
39016: LD_VAR 0 4
39020: ARRAY
39021: PUSH
39022: LD_VAR 0 2
39026: ARRAY
39027: ARRAY
39028: PUSH
39029: LD_INT 2
39031: ARRAY
39032: PPUSH
39033: CALL_OW 114
// end else
39037: GO 40207
// begin temp_list = FindNonhumansNearUnit ( side , i , 20 , false ) ;
39039: LD_ADDR_VAR 0 5
39043: PUSH
39044: LD_VAR 0 1
39048: PPUSH
39049: LD_VAR 0 2
39053: PPUSH
39054: LD_INT 20
39056: PPUSH
39057: LD_INT 0
39059: PPUSH
39060: CALL 40222 0 4
39064: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
39065: LD_VAR 0 5
39069: PUSH
39070: LD_INT 0
39072: GREATER
39073: PUSH
39074: LD_VAR 0 3
39078: NOT
39079: AND
39080: IFFALSE 39118
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
39082: LD_ADDR_VAR 0 6
39086: PUSH
39087: LD_VAR 0 5
39091: PPUSH
39092: LD_VAR 0 2
39096: PPUSH
39097: CALL_OW 74
39101: ST_TO_ADDR
// ComAttackUnit ( i , temp_unit ) ;
39102: LD_VAR 0 2
39106: PPUSH
39107: LD_VAR 0 6
39111: PPUSH
39112: CALL_OW 115
// end else
39116: GO 40207
// if i in attacking_vehicles and russian_attack_strategy = 2 and not strat_2_attack_permitted then
39118: LD_VAR 0 2
39122: PUSH
39123: LD_VAR 0 21
39127: IN
39128: PUSH
39129: LD_EXP 83
39133: PUSH
39134: LD_INT 2
39136: EQUAL
39137: AND
39138: PUSH
39139: LD_VAR 0 27
39143: NOT
39144: AND
39145: IFFALSE 39925
// begin if i = attacking_vehicles [ 1 ] then
39147: LD_VAR 0 2
39151: PUSH
39152: LD_VAR 0 21
39156: PUSH
39157: LD_INT 1
39159: ARRAY
39160: EQUAL
39161: IFFALSE 39405
// begin if ai_attacking_unit_hex_index [ base ] [ i ] <= vehicle_attack_hexes then
39163: LD_EXP 74
39167: PUSH
39168: LD_VAR 0 4
39172: ARRAY
39173: PUSH
39174: LD_VAR 0 2
39178: ARRAY
39179: PUSH
39180: LD_VAR 0 10
39184: LESSEQUAL
39185: IFFALSE 39403
// if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
39187: LD_VAR 0 2
39191: PPUSH
39192: LD_VAR 0 10
39196: PUSH
39197: LD_EXP 74
39201: PUSH
39202: LD_VAR 0 4
39206: ARRAY
39207: PUSH
39208: LD_VAR 0 2
39212: ARRAY
39213: ARRAY
39214: PUSH
39215: LD_INT 1
39217: ARRAY
39218: PPUSH
39219: LD_VAR 0 10
39223: PUSH
39224: LD_EXP 74
39228: PUSH
39229: LD_VAR 0 4
39233: ARRAY
39234: PUSH
39235: LD_VAR 0 2
39239: ARRAY
39240: ARRAY
39241: PUSH
39242: LD_INT 2
39244: ARRAY
39245: PPUSH
39246: CALL_OW 297
39250: PUSH
39251: LD_VAR 0 25
39255: GREATER
39256: IFFALSE 39403
// begin temp_value = true ;
39258: LD_ADDR_VAR 0 3
39262: PUSH
39263: LD_INT 1
39265: ST_TO_ADDR
// for k = 2 to attacking_vehicles do
39266: LD_ADDR_VAR 0 8
39270: PUSH
39271: DOUBLE
39272: LD_INT 2
39274: DEC
39275: ST_TO_ADDR
39276: LD_VAR 0 21
39280: PUSH
39281: FOR_TO
39282: IFFALSE 39332
// if GetDistUnits ( attacking_vehicles [ k ] , attacking_vehicles [ k - 1 ] ) > 7 then
39284: LD_VAR 0 21
39288: PUSH
39289: LD_VAR 0 8
39293: ARRAY
39294: PPUSH
39295: LD_VAR 0 21
39299: PUSH
39300: LD_VAR 0 8
39304: PUSH
39305: LD_INT 1
39307: MINUS
39308: ARRAY
39309: PPUSH
39310: CALL_OW 296
39314: PUSH
39315: LD_INT 7
39317: GREATER
39318: IFFALSE 39330
// begin temp_value = false ;
39320: LD_ADDR_VAR 0 3
39324: PUSH
39325: LD_INT 0
39327: ST_TO_ADDR
// break ;
39328: GO 39332
// end ;
39330: GO 39281
39332: POP
39333: POP
// if temp_value then
39334: LD_VAR 0 3
39338: IFFALSE 39403
// ComMoveXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39340: LD_VAR 0 2
39344: PPUSH
39345: LD_VAR 0 10
39349: PUSH
39350: LD_EXP 74
39354: PUSH
39355: LD_VAR 0 4
39359: ARRAY
39360: PUSH
39361: LD_VAR 0 2
39365: ARRAY
39366: ARRAY
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: PPUSH
39372: LD_VAR 0 10
39376: PUSH
39377: LD_EXP 74
39381: PUSH
39382: LD_VAR 0 4
39386: ARRAY
39387: PUSH
39388: LD_VAR 0 2
39392: ARRAY
39393: ARRAY
39394: PUSH
39395: LD_INT 2
39397: ARRAY
39398: PPUSH
39399: CALL_OW 111
// end ; end else
39403: GO 39923
// begin temp_value = 2 ;
39405: LD_ADDR_VAR 0 3
39409: PUSH
39410: LD_INT 2
39412: ST_TO_ADDR
// for k = 2 to attacking_vehicles do
39413: LD_ADDR_VAR 0 8
39417: PUSH
39418: DOUBLE
39419: LD_INT 2
39421: DEC
39422: ST_TO_ADDR
39423: LD_VAR 0 21
39427: PUSH
39428: FOR_TO
39429: IFFALSE 39463
// if i = attacking_vehicles [ k ] then
39431: LD_VAR 0 2
39435: PUSH
39436: LD_VAR 0 21
39440: PUSH
39441: LD_VAR 0 8
39445: ARRAY
39446: EQUAL
39447: IFFALSE 39461
// begin temp_value = k ;
39449: LD_ADDR_VAR 0 3
39453: PUSH
39454: LD_VAR 0 8
39458: ST_TO_ADDR
// break ;
39459: GO 39463
// end ;
39461: GO 39428
39463: POP
39464: POP
// temp_value = temp_value - 1 ;
39465: LD_ADDR_VAR 0 3
39469: PUSH
39470: LD_VAR 0 3
39474: PUSH
39475: LD_INT 1
39477: MINUS
39478: ST_TO_ADDR
// x = GetX ( attacking_vehicles [ temp_value ] ) ;
39479: LD_ADDR_VAR 0 16
39483: PUSH
39484: LD_VAR 0 21
39488: PUSH
39489: LD_VAR 0 3
39493: ARRAY
39494: PPUSH
39495: CALL_OW 250
39499: ST_TO_ADDR
// y = GetY ( attacking_vehicles [ temp_value ] ) ;
39500: LD_ADDR_VAR 0 17
39504: PUSH
39505: LD_VAR 0 21
39509: PUSH
39510: LD_VAR 0 3
39514: ARRAY
39515: PPUSH
39516: CALL_OW 251
39520: ST_TO_ADDR
// if temp_value > 1 then
39521: LD_VAR 0 3
39525: PUSH
39526: LD_INT 1
39528: GREATER
39529: IFFALSE 39593
// begin k = AI_GetTurnDirection ( GetX ( attacking_vehicles [ temp_value - 1 ] ) , GetY ( attacking_vehicles [ temp_value - 1 ] ) , x , y ) ;
39531: LD_ADDR_VAR 0 8
39535: PUSH
39536: LD_VAR 0 21
39540: PUSH
39541: LD_VAR 0 3
39545: PUSH
39546: LD_INT 1
39548: MINUS
39549: ARRAY
39550: PPUSH
39551: CALL_OW 250
39555: PPUSH
39556: LD_VAR 0 21
39560: PUSH
39561: LD_VAR 0 3
39565: PUSH
39566: LD_INT 1
39568: MINUS
39569: ARRAY
39570: PPUSH
39571: CALL_OW 251
39575: PPUSH
39576: LD_VAR 0 16
39580: PPUSH
39581: LD_VAR 0 17
39585: PPUSH
39586: CALL 15021 0 4
39590: ST_TO_ADDR
// end else
39591: GO 39619
// k = AI_InvertDirection ( GetDir ( attacking_vehicles [ temp_value ] ) ) ;
39593: LD_ADDR_VAR 0 8
39597: PUSH
39598: LD_VAR 0 21
39602: PUSH
39603: LD_VAR 0 3
39607: ARRAY
39608: PPUSH
39609: CALL_OW 254
39613: PPUSH
39614: CALL 40932 0 1
39618: ST_TO_ADDR
// k = k - 1 ;
39619: LD_ADDR_VAR 0 8
39623: PUSH
39624: LD_VAR 0 8
39628: PUSH
39629: LD_INT 1
39631: MINUS
39632: ST_TO_ADDR
// if k = - 1 then
39633: LD_VAR 0 8
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: EQUAL
39642: IFFALSE 39652
// k = 5 ;
39644: LD_ADDR_VAR 0 8
39648: PUSH
39649: LD_INT 5
39651: ST_TO_ADDR
// temp_list_3 = [ ] ;
39652: LD_ADDR_VAR 0 11
39656: PUSH
39657: EMPTY
39658: ST_TO_ADDR
// for val = 1 to 3 do
39659: LD_ADDR_VAR 0 20
39663: PUSH
39664: DOUBLE
39665: LD_INT 1
39667: DEC
39668: ST_TO_ADDR
39669: LD_INT 3
39671: PUSH
39672: FOR_TO
39673: IFFALSE 39811
// begin temp_list_2 = [ ] ;
39675: LD_ADDR_VAR 0 7
39679: PUSH
39680: EMPTY
39681: ST_TO_ADDR
// temp_list_2 = Insert ( temp_list_2 , 1 , ShiftX ( x , k , 4 ) ) ;
39682: LD_ADDR_VAR 0 7
39686: PUSH
39687: LD_VAR 0 7
39691: PPUSH
39692: LD_INT 1
39694: PPUSH
39695: LD_VAR 0 16
39699: PPUSH
39700: LD_VAR 0 8
39704: PPUSH
39705: LD_INT 4
39707: PPUSH
39708: CALL_OW 272
39712: PPUSH
39713: CALL_OW 2
39717: ST_TO_ADDR
// temp_list_2 = Insert ( temp_list_2 , 2 , ShiftY ( y , k , 4 ) ) ;
39718: LD_ADDR_VAR 0 7
39722: PUSH
39723: LD_VAR 0 7
39727: PPUSH
39728: LD_INT 2
39730: PPUSH
39731: LD_VAR 0 17
39735: PPUSH
39736: LD_VAR 0 8
39740: PPUSH
39741: LD_INT 4
39743: PPUSH
39744: CALL_OW 273
39748: PPUSH
39749: CALL_OW 2
39753: ST_TO_ADDR
// temp_list_3 = Insert ( temp_list_3 , 1 , temp_list_2 ) ;
39754: LD_ADDR_VAR 0 11
39758: PUSH
39759: LD_VAR 0 11
39763: PPUSH
39764: LD_INT 1
39766: PPUSH
39767: LD_VAR 0 7
39771: PPUSH
39772: CALL_OW 2
39776: ST_TO_ADDR
// k = k + 1 ;
39777: LD_ADDR_VAR 0 8
39781: PUSH
39782: LD_VAR 0 8
39786: PUSH
39787: LD_INT 1
39789: PLUS
39790: ST_TO_ADDR
// if k = 6 then
39791: LD_VAR 0 8
39795: PUSH
39796: LD_INT 6
39798: EQUAL
39799: IFFALSE 39809
// k = 0 ;
39801: LD_ADDR_VAR 0 8
39805: PUSH
39806: LD_INT 0
39808: ST_TO_ADDR
// end ;
39809: GO 39672
39811: POP
39812: POP
// temp_list_2 = [ ] ;
39813: LD_ADDR_VAR 0 7
39817: PUSH
39818: EMPTY
39819: ST_TO_ADDR
// for val in temp_list_3 do
39820: LD_ADDR_VAR 0 20
39824: PUSH
39825: LD_VAR 0 11
39829: PUSH
39830: FOR_IN
39831: IFFALSE 39874
// temp_list_2 = temp_list_2 ^ GetDistUnitXY ( i , val [ 1 ] , val [ 2 ] ) ;
39833: LD_ADDR_VAR 0 7
39837: PUSH
39838: LD_VAR 0 7
39842: PUSH
39843: LD_VAR 0 2
39847: PPUSH
39848: LD_VAR 0 20
39852: PUSH
39853: LD_INT 1
39855: ARRAY
39856: PPUSH
39857: LD_VAR 0 20
39861: PUSH
39862: LD_INT 2
39864: ARRAY
39865: PPUSH
39866: CALL_OW 297
39870: ADD
39871: ST_TO_ADDR
39872: GO 39830
39874: POP
39875: POP
// temp_list_3 = WorstFromListByList ( temp_list_3 , temp_list_2 ) ;
39876: LD_ADDR_VAR 0 11
39880: PUSH
39881: LD_VAR 0 11
39885: PPUSH
39886: LD_VAR 0 7
39890: PPUSH
39891: CALL_OW 78
39895: ST_TO_ADDR
// ComMoveXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) ;
39896: LD_VAR 0 2
39900: PPUSH
39901: LD_VAR 0 11
39905: PUSH
39906: LD_INT 1
39908: ARRAY
39909: PPUSH
39910: LD_VAR 0 11
39914: PUSH
39915: LD_INT 2
39917: ARRAY
39918: PPUSH
39919: CALL_OW 111
// end ; end else
39923: GO 40207
// begin if i in attacking_vehicles then
39925: LD_VAR 0 2
39929: PUSH
39930: LD_VAR 0 21
39934: IN
39935: IFFALSE 40073
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
39937: LD_VAR 0 2
39941: PPUSH
39942: LD_VAR 0 10
39946: PUSH
39947: LD_EXP 74
39951: PUSH
39952: LD_VAR 0 4
39956: ARRAY
39957: PUSH
39958: LD_VAR 0 2
39962: ARRAY
39963: ARRAY
39964: PUSH
39965: LD_INT 1
39967: ARRAY
39968: PPUSH
39969: LD_VAR 0 10
39973: PUSH
39974: LD_EXP 74
39978: PUSH
39979: LD_VAR 0 4
39983: ARRAY
39984: PUSH
39985: LD_VAR 0 2
39989: ARRAY
39990: ARRAY
39991: PUSH
39992: LD_INT 2
39994: ARRAY
39995: PPUSH
39996: CALL_OW 297
40000: PUSH
40001: LD_VAR 0 25
40005: GREATER
40006: IFFALSE 40071
// ComAgressiveMove ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
40008: LD_VAR 0 2
40012: PPUSH
40013: LD_VAR 0 10
40017: PUSH
40018: LD_EXP 74
40022: PUSH
40023: LD_VAR 0 4
40027: ARRAY
40028: PUSH
40029: LD_VAR 0 2
40033: ARRAY
40034: ARRAY
40035: PUSH
40036: LD_INT 1
40038: ARRAY
40039: PPUSH
40040: LD_VAR 0 10
40044: PUSH
40045: LD_EXP 74
40049: PUSH
40050: LD_VAR 0 4
40054: ARRAY
40055: PUSH
40056: LD_VAR 0 2
40060: ARRAY
40061: ARRAY
40062: PUSH
40063: LD_INT 2
40065: ARRAY
40066: PPUSH
40067: CALL_OW 114
// end else
40071: GO 40207
// if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
40073: LD_VAR 0 2
40077: PPUSH
40078: LD_VAR 0 9
40082: PUSH
40083: LD_EXP 74
40087: PUSH
40088: LD_VAR 0 4
40092: ARRAY
40093: PUSH
40094: LD_VAR 0 2
40098: ARRAY
40099: ARRAY
40100: PUSH
40101: LD_INT 1
40103: ARRAY
40104: PPUSH
40105: LD_VAR 0 9
40109: PUSH
40110: LD_EXP 74
40114: PUSH
40115: LD_VAR 0 4
40119: ARRAY
40120: PUSH
40121: LD_VAR 0 2
40125: ARRAY
40126: ARRAY
40127: PUSH
40128: LD_INT 2
40130: ARRAY
40131: PPUSH
40132: CALL_OW 297
40136: PUSH
40137: LD_VAR 0 24
40141: GREATER
40142: IFFALSE 40207
// ComAgressiveMove ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
40144: LD_VAR 0 2
40148: PPUSH
40149: LD_VAR 0 9
40153: PUSH
40154: LD_EXP 74
40158: PUSH
40159: LD_VAR 0 4
40163: ARRAY
40164: PUSH
40165: LD_VAR 0 2
40169: ARRAY
40170: ARRAY
40171: PUSH
40172: LD_INT 1
40174: ARRAY
40175: PPUSH
40176: LD_VAR 0 9
40180: PUSH
40181: LD_EXP 74
40185: PUSH
40186: LD_VAR 0 4
40190: ARRAY
40191: PUSH
40192: LD_VAR 0 2
40196: ARRAY
40197: ARRAY
40198: PUSH
40199: LD_INT 2
40201: ARRAY
40202: PPUSH
40203: CALL_OW 114
// end ; end ; end ; end ; end ;
40207: GO 37602
40209: POP
40210: POP
// end ;
40211: GO 34417
40213: POP
40214: POP
// until false ;
40215: LD_INT 0
40217: IFFALSE 34400
// end ;
40219: PPOPN 31
40221: END
// function FindNonhumansNearUnit ( side , un , dist , only_dangerous ) ; var weapon_list , temp_list , i , btype , b , val ; begin
40222: LD_INT 0
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
40229: PPUSH
40230: PPUSH
// temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_human ] ] , [ f_dist , un , dist ] , [ f_see , side ] ] ) ;
40231: LD_ADDR_VAR 0 7
40235: PUSH
40236: LD_INT 81
40238: PUSH
40239: LD_VAR 0 1
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 3
40250: PUSH
40251: LD_INT 21
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 91
40267: PUSH
40268: LD_VAR 0 2
40272: PUSH
40273: LD_VAR 0 3
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 101
40285: PUSH
40286: LD_VAR 0 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: PPUSH
40301: CALL_OW 69
40305: ST_TO_ADDR
// if only_dangerous then
40306: LD_VAR 0 4
40310: IFFALSE 40329
// begin result = DangerousUnits ( temp_list ) ;
40312: LD_ADDR_VAR 0 5
40316: PUSH
40317: LD_VAR 0 7
40321: PPUSH
40322: CALL 40344 0 1
40326: ST_TO_ADDR
// end else
40327: GO 40339
// result = temp_list end ;
40329: LD_ADDR_VAR 0 5
40333: PUSH
40334: LD_VAR 0 7
40338: ST_TO_ADDR
40339: LD_VAR 0 5
40343: RET
// function DangerousUnits ( list ) ; var weapon_list , i , btype , b , val ; begin
40344: LD_INT 0
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
// weapon_list = [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , ar_multimissile_ballista , ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_siberium_rocket , ru_time_lapser ] ;
40352: LD_ADDR_VAR 0 3
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: LD_INT 4
40365: PUSH
40366: LD_INT 5
40368: PUSH
40369: LD_INT 6
40371: PUSH
40372: LD_INT 7
40374: PUSH
40375: LD_INT 8
40377: PUSH
40378: LD_INT 9
40380: PUSH
40381: LD_INT 10
40383: PUSH
40384: LD_INT 22
40386: PUSH
40387: LD_INT 23
40389: PUSH
40390: LD_INT 24
40392: PUSH
40393: LD_INT 25
40395: PUSH
40396: LD_INT 26
40398: PUSH
40399: LD_INT 27
40401: PUSH
40402: LD_INT 28
40404: PUSH
40405: LD_INT 29
40407: PUSH
40408: LD_INT 42
40410: PUSH
40411: LD_INT 43
40413: PUSH
40414: LD_INT 44
40416: PUSH
40417: LD_INT 45
40419: PUSH
40420: LD_INT 46
40422: PUSH
40423: LD_INT 47
40425: PUSH
40426: LD_INT 48
40428: PUSH
40429: LD_INT 49
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: ST_TO_ADDR
// result = [ ] ;
40459: LD_ADDR_VAR 0 2
40463: PUSH
40464: EMPTY
40465: ST_TO_ADDR
// for i in list do
40466: LD_ADDR_VAR 0 4
40470: PUSH
40471: LD_VAR 0 1
40475: PUSH
40476: FOR_IN
40477: IFFALSE 40925
// case GetType ( i ) of unit_human :
40479: LD_VAR 0 4
40483: PPUSH
40484: CALL_OW 247
40488: PUSH
40489: LD_INT 1
40491: DOUBLE
40492: EQUAL
40493: IFTRUE 40497
40495: GO 40530
40497: POP
// begin if not IsOk ( i ) then
40498: LD_VAR 0 4
40502: PPUSH
40503: CALL_OW 302
40507: NOT
40508: IFFALSE 40512
// continue ;
40510: GO 40476
// result = result ^ i ;
40512: LD_ADDR_VAR 0 2
40516: PUSH
40517: LD_VAR 0 2
40521: PUSH
40522: LD_VAR 0 4
40526: ADD
40527: ST_TO_ADDR
// end ; unit_vehicle :
40528: GO 40923
40530: LD_INT 2
40532: DOUBLE
40533: EQUAL
40534: IFTRUE 40538
40536: GO 40678
40538: POP
// begin if not IsOk ( i ) then
40539: LD_VAR 0 4
40543: PPUSH
40544: CALL_OW 302
40548: NOT
40549: IFFALSE 40553
// continue ;
40551: GO 40476
// case GetControl ( i ) of control_manual , control_rider :
40553: LD_VAR 0 4
40557: PPUSH
40558: CALL_OW 263
40562: PUSH
40563: LD_INT 1
40565: DOUBLE
40566: EQUAL
40567: IFTRUE 40577
40569: LD_INT 4
40571: DOUBLE
40572: EQUAL
40573: IFTRUE 40577
40575: GO 40597
40577: POP
// begin if UnitsInside ( i ) = 0 then
40578: LD_VAR 0 4
40582: PPUSH
40583: CALL_OW 313
40587: PUSH
40588: LD_INT 0
40590: EQUAL
40591: IFFALSE 40595
// continue ;
40593: GO 40476
// end ; control_remote :
40595: GO 40643
40597: LD_INT 2
40599: DOUBLE
40600: EQUAL
40601: IFTRUE 40605
40603: GO 40625
40605: POP
// begin if IsControledBy ( i ) = 0 then
40606: LD_VAR 0 4
40610: PPUSH
40611: CALL_OW 312
40615: PUSH
40616: LD_INT 0
40618: EQUAL
40619: IFFALSE 40623
// continue ;
40621: GO 40476
// end ; control_computer , control_apeman :
40623: GO 40643
40625: LD_INT 3
40627: DOUBLE
40628: EQUAL
40629: IFTRUE 40639
40631: LD_INT 5
40633: DOUBLE
40634: EQUAL
40635: IFTRUE 40639
40637: GO 40642
40639: POP
// begin end ; end ;
40640: GO 40643
40642: POP
// if GetWeapon ( i ) in weapon_list then
40643: LD_VAR 0 4
40647: PPUSH
40648: CALL_OW 264
40652: PUSH
40653: LD_VAR 0 3
40657: IN
40658: IFFALSE 40676
// result = result ^ i ;
40660: LD_ADDR_VAR 0 2
40664: PUSH
40665: LD_VAR 0 2
40669: PUSH
40670: LD_VAR 0 4
40674: ADD
40675: ST_TO_ADDR
// end ; unit_building :
40676: GO 40923
40678: LD_INT 3
40680: DOUBLE
40681: EQUAL
40682: IFTRUE 40686
40684: GO 40922
40686: POP
// begin if not IsOk ( i ) then
40687: LD_VAR 0 4
40691: PPUSH
40692: CALL_OW 302
40696: NOT
40697: IFFALSE 40701
// continue ;
40699: GO 40476
// btype = GetBType ( i ) ;
40701: LD_ADDR_VAR 0 5
40705: PUSH
40706: LD_VAR 0 4
40710: PPUSH
40711: CALL_OW 266
40715: ST_TO_ADDR
// case btype of b_turret :
40716: LD_VAR 0 5
40720: PUSH
40721: LD_INT 33
40723: DOUBLE
40724: EQUAL
40725: IFTRUE 40729
40727: GO 40732
40729: POP
// begin end ; b_bunker , b_breastwork , b_armoury , b_barracks , b_fort :
40730: GO 40787
40732: LD_INT 32
40734: DOUBLE
40735: EQUAL
40736: IFTRUE 40764
40738: LD_INT 31
40740: DOUBLE
40741: EQUAL
40742: IFTRUE 40764
40744: LD_INT 4
40746: DOUBLE
40747: EQUAL
40748: IFTRUE 40764
40750: LD_INT 5
40752: DOUBLE
40753: EQUAL
40754: IFTRUE 40764
40756: LD_INT 35
40758: DOUBLE
40759: EQUAL
40760: IFTRUE 40764
40762: GO 40784
40764: POP
// begin if UnitsInside ( i ) = 0 then
40765: LD_VAR 0 4
40769: PPUSH
40770: CALL_OW 313
40774: PUSH
40775: LD_INT 0
40777: EQUAL
40778: IFFALSE 40782
// continue ;
40780: GO 40476
// end ; else
40782: GO 40787
40784: POP
// continue ; end ;
40785: GO 40476
// if btype in [ b_bunker , b_turret ] then
40787: LD_VAR 0 5
40791: PUSH
40792: LD_INT 32
40794: PUSH
40795: LD_INT 33
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: IN
40802: IFFALSE 40904
// if not GetBWeapon ( i ) in weapon_list then
40804: LD_VAR 0 4
40808: PPUSH
40809: CALL_OW 269
40813: PUSH
40814: LD_VAR 0 3
40818: IN
40819: NOT
40820: IFFALSE 40826
// continue else
40822: GO 40476
40824: GO 40904
// begin b = GetBase ( i ) ;
40826: LD_ADDR_VAR 0 6
40830: PUSH
40831: LD_VAR 0 4
40835: PPUSH
40836: CALL_OW 274
40840: ST_TO_ADDR
// val = false ;
40841: LD_ADDR_VAR 0 7
40845: PUSH
40846: LD_INT 0
40848: ST_TO_ADDR
// if b = 0 then
40849: LD_VAR 0 6
40853: PUSH
40854: LD_INT 0
40856: EQUAL
40857: IFFALSE 40869
// val = true else
40859: LD_ADDR_VAR 0 7
40863: PUSH
40864: LD_INT 1
40866: ST_TO_ADDR
40867: GO 40896
// if GetEnergy ( b ) [ 4 ] = 0 then
40869: LD_VAR 0 6
40873: PPUSH
40874: CALL_OW 278
40878: PUSH
40879: LD_INT 4
40881: ARRAY
40882: PUSH
40883: LD_INT 0
40885: EQUAL
40886: IFFALSE 40896
// val = true ;
40888: LD_ADDR_VAR 0 7
40892: PUSH
40893: LD_INT 1
40895: ST_TO_ADDR
// if val then
40896: LD_VAR 0 7
40900: IFFALSE 40904
// continue ;
40902: GO 40476
// end ; result = result ^ i ;
40904: LD_ADDR_VAR 0 2
40908: PUSH
40909: LD_VAR 0 2
40913: PUSH
40914: LD_VAR 0 4
40918: ADD
40919: ST_TO_ADDR
// end ; end ;
40920: GO 40923
40922: POP
40923: GO 40476
40925: POP
40926: POP
// end ;
40927: LD_VAR 0 2
40931: RET
// function AI_InvertDirection ( direction ) ; var dir ; begin
40932: LD_INT 0
40934: PPUSH
40935: PPUSH
// dir = direction - 3 ;
40936: LD_ADDR_VAR 0 3
40940: PUSH
40941: LD_VAR 0 1
40945: PUSH
40946: LD_INT 3
40948: MINUS
40949: ST_TO_ADDR
// if dir < 0 then
40950: LD_VAR 0 3
40954: PUSH
40955: LD_INT 0
40957: LESS
40958: IFFALSE 40974
// dir = dir + 6 ;
40960: LD_ADDR_VAR 0 3
40964: PUSH
40965: LD_VAR 0 3
40969: PUSH
40970: LD_INT 6
40972: PLUS
40973: ST_TO_ADDR
// result = dir ;
40974: LD_ADDR_VAR 0 2
40978: PUSH
40979: LD_VAR 0 3
40983: ST_TO_ADDR
// end ;
40984: LD_VAR 0 2
40988: RET
// export function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
40989: LD_INT 0
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
40997: LD_VAR 0 1
41001: PPUSH
41002: LD_VAR 0 2
41006: PPUSH
41007: CALL_OW 488
41011: NOT
41012: PUSH
41013: LD_VAR 0 3
41017: PPUSH
41018: LD_VAR 0 4
41022: PPUSH
41023: CALL_OW 488
41027: NOT
41028: OR
41029: IFFALSE 41042
// begin result = - 1 ;
41031: LD_ADDR_VAR 0 5
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: ST_TO_ADDR
// exit ;
41040: GO 41202
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
41042: LD_ADDR_VAR 0 6
41046: PUSH
41047: LD_VAR 0 1
41051: PPUSH
41052: LD_VAR 0 2
41056: PPUSH
41057: LD_VAR 0 3
41061: PPUSH
41062: LD_VAR 0 4
41066: PPUSH
41067: CALL_OW 298
41071: ST_TO_ADDR
// dist_2 = 99999 ;
41072: LD_ADDR_VAR 0 7
41076: PUSH
41077: LD_INT 99999
41079: ST_TO_ADDR
// for b = 0 to 5 do
41080: LD_ADDR_VAR 0 8
41084: PUSH
41085: DOUBLE
41086: LD_INT 0
41088: DEC
41089: ST_TO_ADDR
41090: LD_INT 5
41092: PUSH
41093: FOR_TO
41094: IFFALSE 41190
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
41096: LD_ADDR_VAR 0 9
41100: PUSH
41101: LD_VAR 0 1
41105: PPUSH
41106: LD_VAR 0 8
41110: PPUSH
41111: LD_VAR 0 6
41115: PPUSH
41116: CALL_OW 272
41120: PPUSH
41121: LD_VAR 0 2
41125: PPUSH
41126: LD_VAR 0 8
41130: PPUSH
41131: LD_VAR 0 6
41135: PPUSH
41136: CALL_OW 273
41140: PPUSH
41141: LD_VAR 0 3
41145: PPUSH
41146: LD_VAR 0 4
41150: PPUSH
41151: CALL_OW 298
41155: ST_TO_ADDR
// if temp_dist < dist_2 then
41156: LD_VAR 0 9
41160: PUSH
41161: LD_VAR 0 7
41165: LESS
41166: IFFALSE 41188
// begin dist_2 = temp_dist ;
41168: LD_ADDR_VAR 0 7
41172: PUSH
41173: LD_VAR 0 9
41177: ST_TO_ADDR
// dir = b ;
41178: LD_ADDR_VAR 0 10
41182: PUSH
41183: LD_VAR 0 8
41187: ST_TO_ADDR
// end ; end ;
41188: GO 41093
41190: POP
41191: POP
// result = dir ;
41192: LD_ADDR_VAR 0 5
41196: PUSH
41197: LD_VAR 0 10
41201: ST_TO_ADDR
// end ;
41202: LD_VAR 0 5
41206: RET
// function CalculateVehicleNotReadyHex ( hex , veh , attacking_vehicles ) ; var x , num ; begin
41207: LD_INT 0
41209: PPUSH
41210: PPUSH
41211: PPUSH
// for num = 1 to attacking_vehicles do
41212: LD_ADDR_VAR 0 6
41216: PUSH
41217: DOUBLE
41218: LD_INT 1
41220: DEC
41221: ST_TO_ADDR
41222: LD_VAR 0 3
41226: PUSH
41227: FOR_TO
41228: IFFALSE 41252
// if attacking_vehicles [ num ] = veh then
41230: LD_VAR 0 3
41234: PUSH
41235: LD_VAR 0 6
41239: ARRAY
41240: PUSH
41241: LD_VAR 0 2
41245: EQUAL
41246: IFFALSE 41250
// break ;
41248: GO 41252
41250: GO 41227
41252: POP
41253: POP
// x = ShiftX ( hex [ 1 ] , 1 , 5 * ( attacking_vehicles - num ) ) ;
41254: LD_ADDR_VAR 0 5
41258: PUSH
41259: LD_VAR 0 1
41263: PUSH
41264: LD_INT 1
41266: ARRAY
41267: PPUSH
41268: LD_INT 1
41270: PPUSH
41271: LD_INT 5
41273: PUSH
41274: LD_VAR 0 3
41278: PUSH
41279: LD_VAR 0 6
41283: MINUS
41284: MUL
41285: PPUSH
41286: CALL_OW 272
41290: ST_TO_ADDR
// result = Replace ( hex , 1 , x ) ;
41291: LD_ADDR_VAR 0 4
41295: PUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: LD_INT 1
41303: PPUSH
41304: LD_VAR 0 5
41308: PPUSH
41309: CALL_OW 1
41313: ST_TO_ADDR
// end ;
41314: LD_VAR 0 4
41318: RET
// every 0 0$1 + 0 0$0.1 do var i , k , temp_list , un1 , temp_list_2 , temp_value , val ; var side , base , attack_hexes ;
41319: GO 41321
41321: DISABLE
41322: LD_INT 0
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
// begin side = russians ;
41334: LD_ADDR_VAR 0 8
41338: PUSH
41339: LD_EXP 3
41343: ST_TO_ADDR
// base = 3 ;
41344: LD_ADDR_VAR 0 9
41348: PUSH
41349: LD_INT 3
41351: ST_TO_ADDR
// attack_hexes = [ [ 41 , 65 ] , [ 25 , 46 ] , [ 26 , 24 ] , [ 41 , 21 ] , [ 53 , 17 ] , [ 60 , 27 ] , [ 53 , 17 ] ] ;
41352: LD_ADDR_VAR 0 10
41356: PUSH
41357: LD_INT 41
41359: PUSH
41360: LD_INT 65
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 25
41369: PUSH
41370: LD_INT 46
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 26
41379: PUSH
41380: LD_INT 24
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 41
41389: PUSH
41390: LD_INT 21
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 53
41399: PUSH
41400: LD_INT 17
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 60
41409: PUSH
41410: LD_INT 27
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 53
41419: PUSH
41420: LD_INT 17
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41436: LD_INT 35
41438: PPUSH
41439: CALL_OW 67
// special_russian_attackers = UnitFilter ( special_russian_attackers , [ f_alive ] ) ;
41443: LD_ADDR_EXP 84
41447: PUSH
41448: LD_EXP 84
41452: PPUSH
41453: LD_INT 51
41455: PUSH
41456: EMPTY
41457: LIST
41458: PPUSH
41459: CALL_OW 72
41463: ST_TO_ADDR
// for i in special_russian_attackers do
41464: LD_ADDR_VAR 0 1
41468: PUSH
41469: LD_EXP 84
41473: PUSH
41474: FOR_IN
41475: IFFALSE 42145
// begin if GetClass ( i ) = class_bazooker then
41477: LD_VAR 0 1
41481: PPUSH
41482: CALL_OW 257
41486: PUSH
41487: LD_INT 9
41489: EQUAL
41490: IFFALSE 41839
// begin temp_list = GetTaskList ( i ) ;
41492: LD_ADDR_VAR 0 3
41496: PUSH
41497: LD_VAR 0 1
41501: PPUSH
41502: CALL_OW 437
41506: ST_TO_ADDR
// if temp_list > 0 then
41507: LD_VAR 0 3
41511: PUSH
41512: LD_INT 0
41514: GREATER
41515: IFFALSE 41537
// if temp_list [ 1 ] [ 1 ] = & then
41517: LD_VAR 0 3
41521: PUSH
41522: LD_INT 1
41524: ARRAY
41525: PUSH
41526: LD_INT 1
41528: ARRAY
41529: PUSH
41530: LD_STRING &
41532: EQUAL
41533: IFFALSE 41537
// continue ;
41535: GO 41474
// un1 = Attacks ( i ) ;
41537: LD_ADDR_VAR 0 4
41541: PUSH
41542: LD_VAR 0 1
41546: PPUSH
41547: CALL_OW 320
41551: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
41552: LD_VAR 0 4
41556: PUSH
41557: LD_INT 0
41559: GREATER
41560: PUSH
41561: LD_VAR 0 4
41565: PUSH
41566: EMPTY
41567: LIST
41568: PPUSH
41569: CALL 40344 0 1
41573: PUSH
41574: LD_INT 0
41576: GREATER
41577: AND
41578: IFFALSE 41839
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
41580: LD_ADDR_VAR 0 5
41584: PUSH
41585: LD_VAR 0 4
41589: PPUSH
41590: CALL_OW 250
41594: PUSH
41595: LD_VAR 0 4
41599: PPUSH
41600: CALL_OW 251
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: ST_TO_ADDR
// temp_value = false ;
41609: LD_ADDR_VAR 0 6
41613: PUSH
41614: LD_INT 0
41616: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
41617: LD_ADDR_VAR 0 7
41621: PUSH
41622: LD_EXP 72
41626: PUSH
41627: LD_VAR 0 9
41631: ARRAY
41632: PUSH
41633: LD_EXP 73
41637: PUSH
41638: LD_VAR 0 9
41642: ARRAY
41643: ADD
41644: PUSH
41645: FOR_IN
41646: IFFALSE 41718
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
41648: LD_VAR 0 5
41652: PUSH
41653: LD_INT 1
41655: ARRAY
41656: PPUSH
41657: LD_VAR 0 5
41661: PUSH
41662: LD_INT 2
41664: ARRAY
41665: PPUSH
41666: LD_VAR 0 7
41670: PUSH
41671: LD_INT 1
41673: ARRAY
41674: PPUSH
41675: LD_VAR 0 7
41679: PUSH
41680: LD_INT 2
41682: ARRAY
41683: PPUSH
41684: CALL_OW 298
41688: PUSH
41689: LD_EXP 71
41693: PUSH
41694: LD_VAR 0 8
41698: ARRAY
41699: PUSH
41700: LD_INT 2
41702: ARRAY
41703: LESSEQUAL
41704: IFFALSE 41716
// begin temp_value = true ;
41706: LD_ADDR_VAR 0 6
41710: PUSH
41711: LD_INT 1
41713: ST_TO_ADDR
// break ;
41714: GO 41718
// end ;
41716: GO 41645
41718: POP
41719: POP
// if not temp_value then
41720: LD_VAR 0 6
41724: NOT
41725: IFFALSE 41839
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
41727: LD_VAR 0 1
41731: PPUSH
41732: LD_VAR 0 5
41736: PUSH
41737: LD_INT 1
41739: ARRAY
41740: PPUSH
41741: LD_VAR 0 5
41745: PUSH
41746: LD_INT 2
41748: ARRAY
41749: PPUSH
41750: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
41754: LD_ADDR_VAR 0 3
41758: PUSH
41759: LD_EXP 73
41763: PUSH
41764: LD_VAR 0 9
41768: ARRAY
41769: PPUSH
41770: LD_INT 1
41772: PPUSH
41773: LD_VAR 0 5
41777: PUSH
41778: LD_INT 1
41780: ARRAY
41781: PUSH
41782: LD_VAR 0 5
41786: PUSH
41787: LD_INT 2
41789: ARRAY
41790: PUSH
41791: LD_VAR 0 1
41795: PUSH
41796: LD_OWVAR 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: PPUSH
41807: CALL_OW 2
41811: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
41812: LD_ADDR_EXP 73
41816: PUSH
41817: LD_EXP 73
41821: PPUSH
41822: LD_VAR 0 9
41826: PPUSH
41827: LD_VAR 0 3
41831: PPUSH
41832: CALL_OW 1
41836: ST_TO_ADDR
// continue ;
41837: GO 41474
// end ; end ; end ; k = ai_attacking_unit_hex_index [ base ] [ i ] ;
41839: LD_ADDR_VAR 0 2
41843: PUSH
41844: LD_EXP 74
41848: PUSH
41849: LD_VAR 0 9
41853: ARRAY
41854: PUSH
41855: LD_VAR 0 1
41859: ARRAY
41860: ST_TO_ADDR
// if GetDistUnitXY ( i , attack_hexes [ k ] [ 1 ] , attack_hexes [ k ] [ 2 ] ) > 1 then
41861: LD_VAR 0 1
41865: PPUSH
41866: LD_VAR 0 10
41870: PUSH
41871: LD_VAR 0 2
41875: ARRAY
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: PPUSH
41881: LD_VAR 0 10
41885: PUSH
41886: LD_VAR 0 2
41890: ARRAY
41891: PUSH
41892: LD_INT 2
41894: ARRAY
41895: PPUSH
41896: CALL_OW 297
41900: PUSH
41901: LD_INT 1
41903: GREATER
41904: IFFALSE 41947
// ComAgressiveMove ( i , attack_hexes [ k ] [ 1 ] , attack_hexes [ k ] [ 2 ] ) else
41906: LD_VAR 0 1
41910: PPUSH
41911: LD_VAR 0 10
41915: PUSH
41916: LD_VAR 0 2
41920: ARRAY
41921: PUSH
41922: LD_INT 1
41924: ARRAY
41925: PPUSH
41926: LD_VAR 0 10
41930: PUSH
41931: LD_VAR 0 2
41935: ARRAY
41936: PUSH
41937: LD_INT 2
41939: ARRAY
41940: PPUSH
41941: CALL_OW 114
41945: GO 42143
// begin if k < attack_hexes - 1 then
41947: LD_VAR 0 2
41951: PUSH
41952: LD_VAR 0 10
41956: PUSH
41957: LD_INT 1
41959: MINUS
41960: LESS
41961: IFFALSE 42025
// begin temp_list = Replace ( ai_attacking_unit_hex_index [ base ] , i , k + 1 ) ;
41963: LD_ADDR_VAR 0 3
41967: PUSH
41968: LD_EXP 74
41972: PUSH
41973: LD_VAR 0 9
41977: ARRAY
41978: PPUSH
41979: LD_VAR 0 1
41983: PPUSH
41984: LD_VAR 0 2
41988: PUSH
41989: LD_INT 1
41991: PLUS
41992: PPUSH
41993: CALL_OW 1
41997: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
41998: LD_ADDR_EXP 74
42002: PUSH
42003: LD_EXP 74
42007: PPUSH
42008: LD_VAR 0 9
42012: PPUSH
42013: LD_VAR 0 3
42017: PPUSH
42018: CALL_OW 1
42022: ST_TO_ADDR
// end else
42023: GO 42143
// begin if Rand ( 1 , 6 ) = 1 then
42025: LD_INT 1
42027: PPUSH
42028: LD_INT 6
42030: PPUSH
42031: CALL_OW 12
42035: PUSH
42036: LD_INT 1
42038: EQUAL
42039: IFFALSE 42143
// begin if k = attack_hexes - 1 then
42041: LD_VAR 0 2
42045: PUSH
42046: LD_VAR 0 10
42050: PUSH
42051: LD_INT 1
42053: MINUS
42054: EQUAL
42055: IFFALSE 42073
// k = attack_hexes + 0 else
42057: LD_ADDR_VAR 0 2
42061: PUSH
42062: LD_VAR 0 10
42066: PUSH
42067: LD_INT 0
42069: PLUS
42070: ST_TO_ADDR
42071: GO 42087
// k = attack_hexes - 1 ;
42073: LD_ADDR_VAR 0 2
42077: PUSH
42078: LD_VAR 0 10
42082: PUSH
42083: LD_INT 1
42085: MINUS
42086: ST_TO_ADDR
// temp_list = Replace ( ai_attacking_unit_hex_index [ base ] , i , k ) ;
42087: LD_ADDR_VAR 0 3
42091: PUSH
42092: LD_EXP 74
42096: PUSH
42097: LD_VAR 0 9
42101: ARRAY
42102: PPUSH
42103: LD_VAR 0 1
42107: PPUSH
42108: LD_VAR 0 2
42112: PPUSH
42113: CALL_OW 1
42117: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
42118: LD_ADDR_EXP 74
42122: PUSH
42123: LD_EXP 74
42127: PPUSH
42128: LD_VAR 0 9
42132: PPUSH
42133: LD_VAR 0 3
42137: PPUSH
42138: CALL_OW 1
42142: ST_TO_ADDR
// end ; end ; end ; end ;
42143: GO 41474
42145: POP
42146: POP
// until false ;
42147: LD_INT 0
42149: IFFALSE 41436
// end ;
42151: PPOPN 10
42153: END
// every 0 0$1 do var base , side , val , temp_value , temp_list ;
42154: GO 42156
42156: DISABLE
42157: LD_INT 0
42159: PPUSH
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
// begin repeat wait ( 1 ) ;
42164: LD_INT 1
42166: PPUSH
42167: CALL_OW 67
// for base in ai_bases do
42171: LD_ADDR_VAR 0 1
42175: PUSH
42176: LD_EXP 58
42180: PUSH
42181: FOR_IN
42182: IFFALSE 42644
// begin if base in [ 1 , 2 ] then
42184: LD_VAR 0 1
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: IN
42199: IFFALSE 42203
// continue ;
42201: GO 42181
// side = GetBaseSide ( base ) ;
42203: LD_ADDR_VAR 0 2
42207: PUSH
42208: LD_VAR 0 1
42212: PPUSH
42213: CALL 12353 0 1
42217: ST_TO_ADDR
// val = 1 ;
42218: LD_ADDR_VAR 0 3
42222: PUSH
42223: LD_INT 1
42225: ST_TO_ADDR
// while val <= ai_time_shift_hexes_underway [ base ] do
42226: LD_VAR 0 3
42230: PUSH
42231: LD_EXP 73
42235: PUSH
42236: LD_VAR 0 1
42240: ARRAY
42241: LESSEQUAL
42242: IFFALSE 42642
// begin if tick = ai_time_shift_hexes_underway [ base ] [ val ] [ 4 ] then
42244: LD_OWVAR 1
42248: PUSH
42249: LD_EXP 73
42253: PUSH
42254: LD_VAR 0 1
42258: ARRAY
42259: PUSH
42260: LD_VAR 0 3
42264: ARRAY
42265: PUSH
42266: LD_INT 4
42268: ARRAY
42269: EQUAL
42270: IFFALSE 42288
// begin val = val + 1 ;
42272: LD_ADDR_VAR 0 3
42276: PUSH
42277: LD_VAR 0 3
42281: PUSH
42282: LD_INT 1
42284: PLUS
42285: ST_TO_ADDR
// continue ;
42286: GO 42226
// end ; temp_value = false ;
42288: LD_ADDR_VAR 0 4
42292: PUSH
42293: LD_INT 0
42295: ST_TO_ADDR
// temp_list = GetTaskList ( ai_time_shift_hexes_underway [ base ] [ val ] [ 3 ] ) ;
42296: LD_ADDR_VAR 0 5
42300: PUSH
42301: LD_EXP 73
42305: PUSH
42306: LD_VAR 0 1
42310: ARRAY
42311: PUSH
42312: LD_VAR 0 3
42316: ARRAY
42317: PUSH
42318: LD_INT 3
42320: ARRAY
42321: PPUSH
42322: CALL_OW 437
42326: ST_TO_ADDR
// if IsOk ( ai_time_shift_hexes_underway [ base ] [ val ] [ 3 ] ) then
42327: LD_EXP 73
42331: PUSH
42332: LD_VAR 0 1
42336: ARRAY
42337: PUSH
42338: LD_VAR 0 3
42342: ARRAY
42343: PUSH
42344: LD_INT 3
42346: ARRAY
42347: PPUSH
42348: CALL_OW 302
42352: IFFALSE 42403
// begin if temp_list = 0 then
42354: LD_VAR 0 5
42358: PUSH
42359: LD_INT 0
42361: EQUAL
42362: IFFALSE 42374
// temp_value = true else
42364: LD_ADDR_VAR 0 4
42368: PUSH
42369: LD_INT 1
42371: ST_TO_ADDR
42372: GO 42401
// if not temp_list [ 1 ] [ 1 ] = & then
42374: LD_VAR 0 5
42378: PUSH
42379: LD_INT 1
42381: ARRAY
42382: PUSH
42383: LD_INT 1
42385: ARRAY
42386: PUSH
42387: LD_STRING &
42389: EQUAL
42390: NOT
42391: IFFALSE 42401
// temp_value = true ;
42393: LD_ADDR_VAR 0 4
42397: PUSH
42398: LD_INT 1
42400: ST_TO_ADDR
// end else
42401: GO 42456
// begin temp_list = Delete ( ai_time_shift_hexes_underway [ base ] , val ) ;
42403: LD_ADDR_VAR 0 5
42407: PUSH
42408: LD_EXP 73
42412: PUSH
42413: LD_VAR 0 1
42417: ARRAY
42418: PPUSH
42419: LD_VAR 0 3
42423: PPUSH
42424: CALL_OW 3
42428: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
42429: LD_ADDR_EXP 73
42433: PUSH
42434: LD_EXP 73
42438: PPUSH
42439: LD_VAR 0 1
42443: PPUSH
42444: LD_VAR 0 5
42448: PPUSH
42449: CALL_OW 1
42453: ST_TO_ADDR
// continue ;
42454: GO 42226
// end ; if temp_value then
42456: LD_VAR 0 4
42460: IFFALSE 42626
// begin temp_list = Insert ( ai_time_shift_hexes [ base ] , 1 , [ ai_time_shift_hexes_underway [ base ] [ val ] [ 1 ] , ai_time_shift_hexes_underway [ base ] [ val ] [ 2 ] , ai_time_shift_data [ side ] [ 1 ] ] ) ;
42462: LD_ADDR_VAR 0 5
42466: PUSH
42467: LD_EXP 72
42471: PUSH
42472: LD_VAR 0 1
42476: ARRAY
42477: PPUSH
42478: LD_INT 1
42480: PPUSH
42481: LD_EXP 73
42485: PUSH
42486: LD_VAR 0 1
42490: ARRAY
42491: PUSH
42492: LD_VAR 0 3
42496: ARRAY
42497: PUSH
42498: LD_INT 1
42500: ARRAY
42501: PUSH
42502: LD_EXP 73
42506: PUSH
42507: LD_VAR 0 1
42511: ARRAY
42512: PUSH
42513: LD_VAR 0 3
42517: ARRAY
42518: PUSH
42519: LD_INT 2
42521: ARRAY
42522: PUSH
42523: LD_EXP 71
42527: PUSH
42528: LD_VAR 0 2
42532: ARRAY
42533: PUSH
42534: LD_INT 1
42536: ARRAY
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: LIST
42542: PPUSH
42543: CALL_OW 2
42547: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
42548: LD_ADDR_EXP 72
42552: PUSH
42553: LD_EXP 72
42557: PPUSH
42558: LD_VAR 0 1
42562: PPUSH
42563: LD_VAR 0 5
42567: PPUSH
42568: CALL_OW 1
42572: ST_TO_ADDR
// temp_list = Delete ( ai_time_shift_hexes_underway [ base ] , val ) ;
42573: LD_ADDR_VAR 0 5
42577: PUSH
42578: LD_EXP 73
42582: PUSH
42583: LD_VAR 0 1
42587: ARRAY
42588: PPUSH
42589: LD_VAR 0 3
42593: PPUSH
42594: CALL_OW 3
42598: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
42599: LD_ADDR_EXP 73
42603: PUSH
42604: LD_EXP 73
42608: PPUSH
42609: LD_VAR 0 1
42613: PPUSH
42614: LD_VAR 0 5
42618: PPUSH
42619: CALL_OW 1
42623: ST_TO_ADDR
// continue ;
42624: GO 42226
// end ; val = val + 1 ;
42626: LD_ADDR_VAR 0 3
42630: PUSH
42631: LD_VAR 0 3
42635: PUSH
42636: LD_INT 1
42638: PLUS
42639: ST_TO_ADDR
// end ;
42640: GO 42226
// end ;
42642: GO 42181
42644: POP
42645: POP
// until false ;
42646: LD_INT 0
42648: IFFALSE 42164
// end ;
42650: PPOPN 5
42652: END
// every 0 0$1 + 0 0$0.3 do var base , val , temp_list , time ;
42653: GO 42655
42655: DISABLE
42656: LD_INT 0
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
// begin repeat wait ( 0 0$1 ) ;
42662: LD_INT 35
42664: PPUSH
42665: CALL_OW 67
// for base in ai_bases do
42669: LD_ADDR_VAR 0 1
42673: PUSH
42674: LD_EXP 58
42678: PUSH
42679: FOR_IN
42680: IFFALSE 42931
// begin if base in [ 1 , 2 ] then
42682: LD_VAR 0 1
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: IN
42697: IFFALSE 42701
// continue ;
42699: GO 42679
// val = 1 ;
42701: LD_ADDR_VAR 0 2
42705: PUSH
42706: LD_INT 1
42708: ST_TO_ADDR
// while val <= ai_time_shift_hexes [ base ] do
42709: LD_VAR 0 2
42713: PUSH
42714: LD_EXP 72
42718: PUSH
42719: LD_VAR 0 1
42723: ARRAY
42724: LESSEQUAL
42725: IFFALSE 42929
// begin time = ai_time_shift_hexes [ base ] [ val ] [ 3 ] - 0 0$1 ;
42727: LD_ADDR_VAR 0 4
42731: PUSH
42732: LD_EXP 72
42736: PUSH
42737: LD_VAR 0 1
42741: ARRAY
42742: PUSH
42743: LD_VAR 0 2
42747: ARRAY
42748: PUSH
42749: LD_INT 3
42751: ARRAY
42752: PUSH
42753: LD_INT 35
42755: MINUS
42756: ST_TO_ADDR
// if time <= 0 0$0 then
42757: LD_VAR 0 4
42761: PUSH
42762: LD_INT 0
42764: LESSEQUAL
42765: IFFALSE 42822
// begin temp_list = Delete ( ai_time_shift_hexes [ base ] , val ) ;
42767: LD_ADDR_VAR 0 3
42771: PUSH
42772: LD_EXP 72
42776: PUSH
42777: LD_VAR 0 1
42781: ARRAY
42782: PPUSH
42783: LD_VAR 0 2
42787: PPUSH
42788: CALL_OW 3
42792: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
42793: LD_ADDR_EXP 72
42797: PUSH
42798: LD_EXP 72
42802: PPUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: LD_VAR 0 3
42812: PPUSH
42813: CALL_OW 1
42817: ST_TO_ADDR
// continue ;
42818: GO 42709
// end else
42820: GO 42913
// begin temp_list = Replace ( ai_time_shift_hexes [ base ] [ val ] , 3 , time ) ;
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_EXP 72
42831: PUSH
42832: LD_VAR 0 1
42836: ARRAY
42837: PUSH
42838: LD_VAR 0 2
42842: ARRAY
42843: PPUSH
42844: LD_INT 3
42846: PPUSH
42847: LD_VAR 0 4
42851: PPUSH
42852: CALL_OW 1
42856: ST_TO_ADDR
// temp_list = Replace ( ai_time_shift_hexes [ base ] , val , temp_list ) ;
42857: LD_ADDR_VAR 0 3
42861: PUSH
42862: LD_EXP 72
42866: PUSH
42867: LD_VAR 0 1
42871: ARRAY
42872: PPUSH
42873: LD_VAR 0 2
42877: PPUSH
42878: LD_VAR 0 3
42882: PPUSH
42883: CALL_OW 1
42887: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
42888: LD_ADDR_EXP 72
42892: PUSH
42893: LD_EXP 72
42897: PPUSH
42898: LD_VAR 0 1
42902: PPUSH
42903: LD_VAR 0 3
42907: PPUSH
42908: CALL_OW 1
42912: ST_TO_ADDR
// end ; val = val + 1 ;
42913: LD_ADDR_VAR 0 2
42917: PUSH
42918: LD_VAR 0 2
42922: PUSH
42923: LD_INT 1
42925: PLUS
42926: ST_TO_ADDR
// end ;
42927: GO 42709
// end ;
42929: GO 42679
42931: POP
42932: POP
// until false ;
42933: LD_INT 0
42935: IFFALSE 42662
// end ;
42937: PPOPN 4
42939: END
// every 0 0$5 do var base , i ;
42940: GO 42942
42942: DISABLE
42943: LD_INT 0
42945: PPUSH
42946: PPUSH
// begin for base in ai_bases do
42947: LD_ADDR_VAR 0 1
42951: PUSH
42952: LD_EXP 58
42956: PUSH
42957: FOR_IN
42958: IFFALSE 43055
// for i in ( ai_vehicles_attack [ base ] ^ ai_vehicles_defend [ base ] ^ ai_cargo_bay [ base ] ) diff 0 do
42960: LD_ADDR_VAR 0 2
42964: PUSH
42965: LD_EXP 40
42969: PUSH
42970: LD_VAR 0 1
42974: ARRAY
42975: PUSH
42976: LD_EXP 39
42980: PUSH
42981: LD_VAR 0 1
42985: ARRAY
42986: ADD
42987: PUSH
42988: LD_EXP 60
42992: PUSH
42993: LD_VAR 0 1
42997: ARRAY
42998: ADD
42999: PUSH
43000: LD_INT 0
43002: DIFF
43003: PUSH
43004: FOR_IN
43005: IFFALSE 43051
// if GetFuel ( i ) < 10 and GetEngine ( i ) = engine_combustion then
43007: LD_VAR 0 2
43011: PPUSH
43012: CALL_OW 261
43016: PUSH
43017: LD_INT 10
43019: LESS
43020: PUSH
43021: LD_VAR 0 2
43025: PPUSH
43026: CALL_OW 262
43030: PUSH
43031: LD_INT 1
43033: EQUAL
43034: AND
43035: IFFALSE 43049
// SetFuel ( i , 10 ) ;
43037: LD_VAR 0 2
43041: PPUSH
43042: LD_INT 10
43044: PPUSH
43045: CALL_OW 240
43049: GO 43004
43051: POP
43052: POP
43053: GO 42957
43055: POP
43056: POP
// enable ;
43057: ENABLE
// end ;
43058: PPOPN 2
43060: END
// every 0 0$1 do var side , i , scientists_list , temp_list , temp_unit , base , k , temp_list_3 , free_spaces , area ;
43061: GO 43063
43063: DISABLE
43064: LD_INT 0
43066: PPUSH
43067: PPUSH
43068: PPUSH
43069: PPUSH
43070: PPUSH
43071: PPUSH
43072: PPUSH
43073: PPUSH
43074: PPUSH
43075: PPUSH
// begin for base in ai_bases do
43076: LD_ADDR_VAR 0 6
43080: PUSH
43081: LD_EXP 58
43085: PUSH
43086: FOR_IN
43087: IFFALSE 43782
// begin side = GetBaseSide ( base ) ;
43089: LD_ADDR_VAR 0 1
43093: PUSH
43094: LD_VAR 0 6
43098: PPUSH
43099: CALL 12353 0 1
43103: ST_TO_ADDR
// scientists_list = ai_scientists [ base ] diff ai_heal_these_humans [ base ] ;
43104: LD_ADDR_VAR 0 3
43108: PUSH
43109: LD_EXP 32
43113: PUSH
43114: LD_VAR 0 6
43118: ARRAY
43119: PUSH
43120: LD_EXP 43
43124: PUSH
43125: LD_VAR 0 6
43129: ARRAY
43130: DIFF
43131: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
43132: LD_ADDR_VAR 0 4
43136: PUSH
43137: LD_EXP 43
43141: PUSH
43142: LD_VAR 0 6
43146: ARRAY
43147: ST_TO_ADDR
// i = 1 ;
43148: LD_ADDR_VAR 0 2
43152: PUSH
43153: LD_INT 1
43155: ST_TO_ADDR
// while i <= scientists_list do
43156: LD_VAR 0 2
43160: PUSH
43161: LD_VAR 0 3
43165: LESSEQUAL
43166: IFFALSE 43261
// begin if GetLives ( scientists_list [ i ] ) <= 700 then
43168: LD_VAR 0 3
43172: PUSH
43173: LD_VAR 0 2
43177: ARRAY
43178: PPUSH
43179: CALL_OW 256
43183: PUSH
43184: LD_INT 700
43186: LESSEQUAL
43187: IFFALSE 43245
// begin temp_list = temp_list ^ scientists_list [ i ] ;
43189: LD_ADDR_VAR 0 4
43193: PUSH
43194: LD_VAR 0 4
43198: PUSH
43199: LD_VAR 0 3
43203: PUSH
43204: LD_VAR 0 2
43208: ARRAY
43209: ADD
43210: ST_TO_ADDR
// scientists_list = Delete ( scientists_list , i ) ;
43211: LD_ADDR_VAR 0 3
43215: PUSH
43216: LD_VAR 0 3
43220: PPUSH
43221: LD_VAR 0 2
43225: PPUSH
43226: CALL_OW 3
43230: ST_TO_ADDR
// i = i - 1 ;
43231: LD_ADDR_VAR 0 2
43235: PUSH
43236: LD_VAR 0 2
43240: PUSH
43241: LD_INT 1
43243: MINUS
43244: ST_TO_ADDR
// end ; i = i + 1 ;
43245: LD_ADDR_VAR 0 2
43249: PUSH
43250: LD_VAR 0 2
43254: PUSH
43255: LD_INT 1
43257: PLUS
43258: ST_TO_ADDR
// end ;
43259: GO 43156
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
43261: LD_ADDR_EXP 43
43265: PUSH
43266: LD_EXP 43
43270: PPUSH
43271: LD_VAR 0 6
43275: PPUSH
43276: LD_VAR 0 4
43280: PPUSH
43281: CALL_OW 1
43285: ST_TO_ADDR
// temp_list = [ ] ;
43286: LD_ADDR_VAR 0 4
43290: PUSH
43291: EMPTY
43292: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
43293: LD_ADDR_VAR 0 2
43297: PUSH
43298: LD_EXP 43
43302: PUSH
43303: LD_VAR 0 6
43307: ARRAY
43308: PUSH
43309: FOR_IN
43310: IFFALSE 43360
// if GetLives ( i ) < 1000 and IsInUnit ( i ) = 0 then
43312: LD_VAR 0 2
43316: PPUSH
43317: CALL_OW 256
43321: PUSH
43322: LD_INT 1000
43324: LESS
43325: PUSH
43326: LD_VAR 0 2
43330: PPUSH
43331: CALL_OW 310
43335: PUSH
43336: LD_INT 0
43338: EQUAL
43339: AND
43340: IFFALSE 43358
// temp_list = temp_list ^ i ;
43342: LD_ADDR_VAR 0 4
43346: PUSH
43347: LD_VAR 0 4
43351: PUSH
43352: LD_VAR 0 2
43356: ADD
43357: ST_TO_ADDR
43358: GO 43309
43360: POP
43361: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
43362: LD_ADDR_EXP 43
43366: PUSH
43367: LD_EXP 43
43371: PPUSH
43372: LD_VAR 0 6
43376: PPUSH
43377: LD_VAR 0 4
43381: PPUSH
43382: CALL_OW 1
43386: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
43387: LD_ADDR_VAR 0 2
43391: PUSH
43392: LD_EXP 43
43396: PUSH
43397: LD_VAR 0 6
43401: ARRAY
43402: PUSH
43403: FOR_IN
43404: IFFALSE 43492
// if GetDistUnitXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 4 then
43406: LD_VAR 0 2
43410: PPUSH
43411: LD_EXP 41
43415: PUSH
43416: LD_VAR 0 6
43420: ARRAY
43421: PUSH
43422: LD_INT 1
43424: ARRAY
43425: PPUSH
43426: LD_EXP 41
43430: PUSH
43431: LD_VAR 0 6
43435: ARRAY
43436: PUSH
43437: LD_INT 2
43439: ARRAY
43440: PPUSH
43441: CALL_OW 297
43445: PUSH
43446: LD_INT 4
43448: GREATER
43449: IFFALSE 43490
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
43451: LD_VAR 0 2
43455: PPUSH
43456: LD_EXP 41
43460: PUSH
43461: LD_VAR 0 6
43465: ARRAY
43466: PUSH
43467: LD_INT 1
43469: ARRAY
43470: PPUSH
43471: LD_EXP 41
43475: PUSH
43476: LD_VAR 0 6
43480: ARRAY
43481: PUSH
43482: LD_INT 2
43484: ARRAY
43485: PPUSH
43486: CALL_OW 111
43490: GO 43403
43492: POP
43493: POP
// if scientists_list = 0 then
43494: LD_VAR 0 3
43498: PUSH
43499: LD_INT 0
43501: EQUAL
43502: IFFALSE 43506
// continue ;
43504: GO 43086
// if ai_heal_these_humans [ base ] > 0 then
43506: LD_EXP 43
43510: PUSH
43511: LD_VAR 0 6
43515: ARRAY
43516: PUSH
43517: LD_INT 0
43519: GREATER
43520: IFFALSE 43715
// begin area = GetBaseArea ( base ) ;
43522: LD_ADDR_VAR 0 10
43526: PUSH
43527: LD_VAR 0 6
43531: PPUSH
43532: CALL 12282 0 1
43536: ST_TO_ADDR
// temp_list = UnitFilter ( ai_heal_these_humans [ base ] , [ f_inarea , area ] ) ;
43537: LD_ADDR_VAR 0 4
43541: PUSH
43542: LD_EXP 43
43546: PUSH
43547: LD_VAR 0 6
43551: ARRAY
43552: PPUSH
43553: LD_INT 95
43555: PUSH
43556: LD_VAR 0 10
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PPUSH
43565: CALL_OW 72
43569: ST_TO_ADDR
// if temp_list > 0 then
43570: LD_VAR 0 4
43574: PUSH
43575: LD_INT 0
43577: GREATER
43578: IFFALSE 43715
// begin scientists_list = GetHumansOutOfUnits ( scientists_list ) ;
43580: LD_ADDR_VAR 0 3
43584: PUSH
43585: LD_VAR 0 3
43589: PPUSH
43590: CALL 23168 0 1
43594: ST_TO_ADDR
// repeat i = 1 ;
43595: LD_ADDR_VAR 0 2
43599: PUSH
43600: LD_INT 1
43602: ST_TO_ADDR
// while i <= temp_list do
43603: LD_VAR 0 2
43607: PUSH
43608: LD_VAR 0 4
43612: LESSEQUAL
43613: IFFALSE 43705
// begin if scientists_list = 0 then
43615: LD_VAR 0 3
43619: PUSH
43620: LD_INT 0
43622: EQUAL
43623: IFFALSE 43627
// break ;
43625: GO 43705
// temp_unit = NearestUnitToUnit ( scientists_list , temp_list [ i ] ) ;
43627: LD_ADDR_VAR 0 5
43631: PUSH
43632: LD_VAR 0 3
43636: PPUSH
43637: LD_VAR 0 4
43641: PUSH
43642: LD_VAR 0 2
43646: ARRAY
43647: PPUSH
43648: CALL_OW 74
43652: ST_TO_ADDR
// ComHeal ( temp_unit , temp_list [ i ] ) ;
43653: LD_VAR 0 5
43657: PPUSH
43658: LD_VAR 0 4
43662: PUSH
43663: LD_VAR 0 2
43667: ARRAY
43668: PPUSH
43669: CALL_OW 128
// scientists_list = scientists_list diff temp_unit ;
43673: LD_ADDR_VAR 0 3
43677: PUSH
43678: LD_VAR 0 3
43682: PUSH
43683: LD_VAR 0 5
43687: DIFF
43688: ST_TO_ADDR
// i = i + 1 ;
43689: LD_ADDR_VAR 0 2
43693: PUSH
43694: LD_VAR 0 2
43698: PUSH
43699: LD_INT 1
43701: PLUS
43702: ST_TO_ADDR
// end ;
43703: GO 43603
// until scientists_list = 0 ;
43705: LD_VAR 0 3
43709: PUSH
43710: LD_INT 0
43712: EQUAL
43713: IFFALSE 43595
// end ; end ; DistributeHumansToBuildings ( base , scientists_list , UnitFilter ( ai_labs [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_scientistic , 6 , true , false ) ;
43715: LD_VAR 0 6
43719: PPUSH
43720: LD_VAR 0 3
43724: PPUSH
43725: LD_EXP 35
43729: PUSH
43730: LD_VAR 0 6
43734: ARRAY
43735: PPUSH
43736: LD_INT 50
43738: PUSH
43739: EMPTY
43740: LIST
43741: PUSH
43742: LD_INT 3
43744: PUSH
43745: LD_INT 57
43747: PUSH
43748: EMPTY
43749: LIST
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PPUSH
43759: CALL_OW 72
43763: PPUSH
43764: LD_INT 4
43766: PPUSH
43767: LD_INT 6
43769: PPUSH
43770: LD_INT 1
43772: PPUSH
43773: LD_INT 0
43775: PPUSH
43776: CALL 15239 0 7
// end ;
43780: GO 43086
43782: POP
43783: POP
// enable ;
43784: ENABLE
// end ; end_of_file
43785: PPOPN 10
43787: END
// export function GetApes ( side ) ; begin
43788: LD_INT 0
43790: PPUSH
// result = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ;
43791: LD_ADDR_VAR 0 2
43795: PUSH
43796: LD_INT 22
43798: PUSH
43799: LD_VAR 0 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 25
43813: PUSH
43814: LD_INT 12
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 25
43823: PUSH
43824: LD_INT 15
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 25
43833: PUSH
43834: LD_INT 16
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 25
43843: PUSH
43844: LD_INT 17
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PPUSH
43862: CALL_OW 69
43866: ST_TO_ADDR
// end ;
43867: LD_VAR 0 2
43871: RET
// on ResearchComplete ( tech , lab ) do var temp_list , temp_unit , i , un_list ;
43872: LD_INT 0
43874: PPUSH
43875: PPUSH
43876: PPUSH
43877: PPUSH
// begin if GetSide ( lab ) = you then
43878: LD_VAR 0 2
43882: PPUSH
43883: CALL_OW 255
43887: PUSH
43888: LD_EXP 2
43892: EQUAL
43893: IFFALSE 44880
// begin SetTech ( tech , you_alt , state_researched ) ;
43895: LD_VAR 0 1
43899: PPUSH
43900: LD_EXP 5
43904: PPUSH
43905: LD_INT 2
43907: PPUSH
43908: CALL_OW 322
// if tech = tech_HidCam then
43912: LD_VAR 0 1
43916: PUSH
43917: LD_INT 17
43919: EQUAL
43920: IFFALSE 44880
// begin un_list = [ Sonya , MarkB , Aviradze ] diff 0 ;
43922: LD_ADDR_VAR 0 6
43926: PUSH
43927: LD_EXP 10
43931: PUSH
43932: LD_EXP 19
43936: PUSH
43937: LD_EXP 20
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 0
43949: DIFF
43950: ST_TO_ADDR
// temp_list = [ ] ;
43951: LD_ADDR_VAR 0 3
43955: PUSH
43956: EMPTY
43957: ST_TO_ADDR
// for i in un_list do
43958: LD_ADDR_VAR 0 5
43962: PUSH
43963: LD_VAR 0 6
43967: PUSH
43968: FOR_IN
43969: IFFALSE 44006
// if IsInUnit ( i ) = lab then
43971: LD_VAR 0 5
43975: PPUSH
43976: CALL_OW 310
43980: PUSH
43981: LD_VAR 0 2
43985: EQUAL
43986: IFFALSE 44004
// temp_list = temp_list ^ i ;
43988: LD_ADDR_VAR 0 3
43992: PUSH
43993: LD_VAR 0 3
43997: PUSH
43998: LD_VAR 0 5
44002: ADD
44003: ST_TO_ADDR
44004: GO 43968
44006: POP
44007: POP
// if temp_list = 0 then
44008: LD_VAR 0 3
44012: PUSH
44013: LD_INT 0
44015: EQUAL
44016: IFFALSE 44125
// begin temp_list = UnitsInside ( lab ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
44018: LD_ADDR_VAR 0 3
44022: PUSH
44023: LD_VAR 0 2
44027: PPUSH
44028: CALL_OW 313
44032: PUSH
44033: LD_EXP 2
44037: PPUSH
44038: CALL 43788 0 1
44042: PUSH
44043: LD_EXP 9
44047: PUSH
44048: LD_EXP 10
44052: PUSH
44053: LD_EXP 11
44057: PUSH
44058: LD_EXP 12
44062: PUSH
44063: LD_EXP 13
44067: PUSH
44068: LD_EXP 14
44072: PUSH
44073: LD_EXP 15
44077: PUSH
44078: LD_EXP 16
44082: PUSH
44083: LD_EXP 17
44087: PUSH
44088: LD_EXP 18
44092: PUSH
44093: LD_EXP 19
44097: PUSH
44098: LD_EXP 20
44102: PUSH
44103: LD_EXP 21
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: ADD
44123: DIFF
44124: ST_TO_ADDR
// end ; if temp_list = 0 then
44125: LD_VAR 0 3
44129: PUSH
44130: LD_INT 0
44132: EQUAL
44133: IFFALSE 44160
// begin temp_list = UnitFilter ( un_list , [ f_class , class_scientistic ] ) ;
44135: LD_ADDR_VAR 0 3
44139: PUSH
44140: LD_VAR 0 6
44144: PPUSH
44145: LD_INT 25
44147: PUSH
44148: LD_INT 4
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PPUSH
44155: CALL_OW 72
44159: ST_TO_ADDR
// end ; if temp_list = 0 then
44160: LD_VAR 0 3
44164: PUSH
44165: LD_INT 0
44167: EQUAL
44168: IFFALSE 44287
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_class , class_scientistic ] ] ) diff [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ;
44170: LD_ADDR_VAR 0 3
44174: PUSH
44175: LD_INT 22
44177: PUSH
44178: LD_EXP 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 25
44189: PUSH
44190: LD_INT 4
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PPUSH
44201: CALL_OW 69
44205: PUSH
44206: LD_EXP 9
44210: PUSH
44211: LD_EXP 10
44215: PUSH
44216: LD_EXP 11
44220: PUSH
44221: LD_EXP 12
44225: PUSH
44226: LD_EXP 13
44230: PUSH
44231: LD_EXP 14
44235: PUSH
44236: LD_EXP 15
44240: PUSH
44241: LD_EXP 16
44245: PUSH
44246: LD_EXP 17
44250: PUSH
44251: LD_EXP 18
44255: PUSH
44256: LD_EXP 19
44260: PUSH
44261: LD_EXP 20
44265: PUSH
44266: LD_EXP 21
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: DIFF
44286: ST_TO_ADDR
// end ; if temp_list = 0 then
44287: LD_VAR 0 3
44291: PUSH
44292: LD_INT 0
44294: EQUAL
44295: IFFALSE 44425
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
44297: LD_ADDR_VAR 0 3
44301: PUSH
44302: LD_INT 22
44304: PUSH
44305: LD_EXP 2
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 21
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PPUSH
44328: CALL_OW 69
44332: PUSH
44333: LD_EXP 2
44337: PPUSH
44338: CALL 43788 0 1
44342: PUSH
44343: LD_EXP 9
44347: PUSH
44348: LD_EXP 10
44352: PUSH
44353: LD_EXP 11
44357: PUSH
44358: LD_EXP 12
44362: PUSH
44363: LD_EXP 13
44367: PUSH
44368: LD_EXP 14
44372: PUSH
44373: LD_EXP 15
44377: PUSH
44378: LD_EXP 16
44382: PUSH
44383: LD_EXP 17
44387: PUSH
44388: LD_EXP 18
44392: PUSH
44393: LD_EXP 19
44397: PUSH
44398: LD_EXP 20
44402: PUSH
44403: LD_EXP 21
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: ADD
44423: DIFF
44424: ST_TO_ADDR
// end ; if temp_list > 0 then
44425: LD_VAR 0 3
44429: PUSH
44430: LD_INT 0
44432: GREATER
44433: IFFALSE 44819
// begin DialogueOn ;
44435: CALL_OW 6
// temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
44439: LD_ADDR_VAR 0 4
44443: PUSH
44444: LD_VAR 0 3
44448: PUSH
44449: LD_INT 1
44451: PPUSH
44452: LD_VAR 0 3
44456: PPUSH
44457: CALL_OW 12
44461: ARRAY
44462: ST_TO_ADDR
// case temp_unit of Sonya :
44463: LD_VAR 0 4
44467: PUSH
44468: LD_EXP 10
44472: DOUBLE
44473: EQUAL
44474: IFTRUE 44478
44476: GO 44493
44478: POP
// Say ( temp_unit , D7-So-1 ) ; MarkB :
44479: LD_VAR 0 4
44483: PPUSH
44484: LD_STRING D7-So-1
44486: PPUSH
44487: CALL_OW 88
44491: GO 44681
44493: LD_EXP 19
44497: DOUBLE
44498: EQUAL
44499: IFTRUE 44503
44501: GO 44542
44503: POP
// begin Say ( temp_unit , D7-Ma-1 ) ;
44504: LD_VAR 0 4
44508: PPUSH
44509: LD_STRING D7-Ma-1
44511: PPUSH
44512: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44516: LD_EXP 9
44520: PPUSH
44521: LD_STRING D7-H-1
44523: PPUSH
44524: CALL_OW 88
// Say ( temp_unit , D7-Ma-2 ) ;
44528: LD_VAR 0 4
44532: PPUSH
44533: LD_STRING D7-Ma-2
44535: PPUSH
44536: CALL_OW 88
// end ; Aviradze :
44540: GO 44681
44542: LD_EXP 20
44546: DOUBLE
44547: EQUAL
44548: IFTRUE 44552
44550: GO 44591
44552: POP
// begin Say ( temp_unit , D7-Av-1 ) ;
44553: LD_VAR 0 4
44557: PPUSH
44558: LD_STRING D7-Av-1
44560: PPUSH
44561: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44565: LD_EXP 9
44569: PPUSH
44570: LD_STRING D7-H-1
44572: PPUSH
44573: CALL_OW 88
// Say ( temp_unit , D7-Av-2 ) ;
44577: LD_VAR 0 4
44581: PPUSH
44582: LD_STRING D7-Av-2
44584: PPUSH
44585: CALL_OW 88
// end ; else
44589: GO 44681
44591: POP
// if GetSex ( temp_unit ) = sex_male then
44592: LD_VAR 0 4
44596: PPUSH
44597: CALL_OW 258
44601: PUSH
44602: LD_INT 1
44604: EQUAL
44605: IFFALSE 44645
// begin Say ( temp_unit , D7-SciM-1 ) ;
44607: LD_VAR 0 4
44611: PPUSH
44612: LD_STRING D7-SciM-1
44614: PPUSH
44615: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44619: LD_EXP 9
44623: PPUSH
44624: LD_STRING D7-H-1
44626: PPUSH
44627: CALL_OW 88
// Say ( temp_unit , D7-SciM-2 ) ;
44631: LD_VAR 0 4
44635: PPUSH
44636: LD_STRING D7-SciM-2
44638: PPUSH
44639: CALL_OW 88
// end else
44643: GO 44681
// begin Say ( temp_unit , D7-SciF-1 ) ;
44645: LD_VAR 0 4
44649: PPUSH
44650: LD_STRING D7-SciF-1
44652: PPUSH
44653: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44657: LD_EXP 9
44661: PPUSH
44662: LD_STRING D7-H-1
44664: PPUSH
44665: CALL_OW 88
// Say ( temp_unit , D7-SciF-2 ) ;
44669: LD_VAR 0 4
44673: PPUSH
44674: LD_STRING D7-SciF-2
44676: PPUSH
44677: CALL_OW 88
// end ; end ; Say ( Heike , D7-H-2 ) ;
44681: LD_EXP 9
44685: PPUSH
44686: LD_STRING D7-H-2
44688: PPUSH
44689: CALL_OW 88
// case temp_unit of Sonya :
44693: LD_VAR 0 4
44697: PUSH
44698: LD_EXP 10
44702: DOUBLE
44703: EQUAL
44704: IFTRUE 44708
44706: GO 44723
44708: POP
// Say ( temp_unit , D7-So-2 ) ; MarkB :
44709: LD_VAR 0 4
44713: PPUSH
44714: LD_STRING D7-So-2
44716: PPUSH
44717: CALL_OW 88
44721: GO 44815
44723: LD_EXP 19
44727: DOUBLE
44728: EQUAL
44729: IFTRUE 44733
44731: GO 44748
44733: POP
// Say ( temp_unit , D7-Ma-3 ) ; Aviradze :
44734: LD_VAR 0 4
44738: PPUSH
44739: LD_STRING D7-Ma-3
44741: PPUSH
44742: CALL_OW 88
44746: GO 44815
44748: LD_EXP 20
44752: DOUBLE
44753: EQUAL
44754: IFTRUE 44758
44756: GO 44773
44758: POP
// Say ( temp_unit , D7-Av-3 ) ; else
44759: LD_VAR 0 4
44763: PPUSH
44764: LD_STRING D7-Av-3
44766: PPUSH
44767: CALL_OW 88
44771: GO 44815
44773: POP
// if GetSex ( temp_unit ) = sex_male then
44774: LD_VAR 0 4
44778: PPUSH
44779: CALL_OW 258
44783: PUSH
44784: LD_INT 1
44786: EQUAL
44787: IFFALSE 44803
// Say ( temp_unit , D7-SciM-3 ) else
44789: LD_VAR 0 4
44793: PPUSH
44794: LD_STRING D7-SciM-3
44796: PPUSH
44797: CALL_OW 88
44801: GO 44815
// Say ( temp_unit , D7-SciF-3 ) ; end ;
44803: LD_VAR 0 4
44807: PPUSH
44808: LD_STRING D7-SciF-3
44810: PPUSH
44811: CALL_OW 88
// DialogueOff ;
44815: CALL_OW 7
// end ; Wait ( 0 0$0.2 ) ;
44819: LD_INT 7
44821: PPUSH
44822: CALL_OW 67
// ChangeMissionObjectives ( MAddCameras ) ;
44826: LD_STRING MAddCameras
44828: PPUSH
44829: CALL_OW 337
// wait ( 0 0$0.2 ) ;
44833: LD_INT 7
44835: PPUSH
44836: CALL_OW 67
// SetAreaMapShow ( camera_area_2 , 1 ) ;
44840: LD_INT 15
44842: PPUSH
44843: LD_INT 1
44845: PPUSH
44846: CALL_OW 424
// SetAreaMapShow ( camera_area_3 , 1 ) ;
44850: LD_INT 16
44852: PPUSH
44853: LD_INT 1
44855: PPUSH
44856: CALL_OW 424
// SetAreaMapShow ( camera_area_4 , 1 ) ;
44860: LD_INT 17
44862: PPUSH
44863: LD_INT 1
44865: PPUSH
44866: CALL_OW 424
// SetAreaMapShow ( camera_area_5 , 1 ) ;
44870: LD_INT 18
44872: PPUSH
44873: LD_INT 1
44875: PPUSH
44876: CALL_OW 424
// end ; end ; end ;
44880: PPOPN 6
44882: END
// export function CheckCamerasOnCommand ( comm ) ; var i , task_list , x , y , k , temp_list ; begin
44883: LD_INT 0
44885: PPUSH
44886: PPUSH
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
44891: PPUSH
// if cameras_placed then
44892: LD_EXP 91
44896: IFFALSE 44900
// exit ;
44898: GO 45136
// case comm of 103 :
44900: LD_VAR 0 1
44904: PUSH
44905: LD_INT 103
44907: DOUBLE
44908: EQUAL
44909: IFTRUE 44913
44911: GO 45135
44913: POP
// begin for i in FilterAllUnits ( [ [ f_side , you ] , [ f_class , class_engineer ] ] ) do
44914: LD_ADDR_VAR 0 3
44918: PUSH
44919: LD_INT 22
44921: PUSH
44922: LD_EXP 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 25
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PPUSH
44945: CALL_OW 69
44949: PUSH
44950: FOR_IN
44951: IFFALSE 45131
// if IsSelected ( i ) then
44953: LD_VAR 0 3
44957: PPUSH
44958: CALL_OW 306
44962: IFFALSE 45129
// begin task_list = GetTaskList ( i ) ;
44964: LD_ADDR_VAR 0 4
44968: PUSH
44969: LD_VAR 0 3
44973: PPUSH
44974: CALL_OW 437
44978: ST_TO_ADDR
// if task_list > 0 then
44979: LD_VAR 0 4
44983: PUSH
44984: LD_INT 0
44986: GREATER
44987: IFFALSE 45129
// begin x = task_list [ task_list + 0 ] [ 2 ] ;
44989: LD_ADDR_VAR 0 5
44993: PUSH
44994: LD_VAR 0 4
44998: PUSH
44999: LD_VAR 0 4
45003: PUSH
45004: LD_INT 0
45006: PLUS
45007: ARRAY
45008: PUSH
45009: LD_INT 2
45011: ARRAY
45012: ST_TO_ADDR
// y = task_list [ task_list + 0 ] [ 3 ] ;
45013: LD_ADDR_VAR 0 6
45017: PUSH
45018: LD_VAR 0 4
45022: PUSH
45023: LD_VAR 0 4
45027: PUSH
45028: LD_INT 0
45030: PLUS
45031: ARRAY
45032: PUSH
45033: LD_INT 3
45035: ARRAY
45036: ST_TO_ADDR
// if InArea ( x , y , camera_area_2 ) or InArea ( x , y , camera_area_3 ) or InArea ( x , y , camera_area_4 ) or InArea ( x , y , camera_area_5 ) then
45037: LD_VAR 0 5
45041: PPUSH
45042: LD_VAR 0 6
45046: PPUSH
45047: LD_INT 15
45049: PPUSH
45050: CALL_OW 309
45054: PUSH
45055: LD_VAR 0 5
45059: PPUSH
45060: LD_VAR 0 6
45064: PPUSH
45065: LD_INT 16
45067: PPUSH
45068: CALL_OW 309
45072: OR
45073: PUSH
45074: LD_VAR 0 5
45078: PPUSH
45079: LD_VAR 0 6
45083: PPUSH
45084: LD_INT 17
45086: PPUSH
45087: CALL_OW 309
45091: OR
45092: PUSH
45093: LD_VAR 0 5
45097: PPUSH
45098: LD_VAR 0 6
45102: PPUSH
45103: LD_INT 18
45105: PPUSH
45106: CALL_OW 309
45110: OR
45111: IFFALSE 45129
// begin camera_engineers = camera_engineers union i ;
45113: LD_ADDR_EXP 90
45117: PUSH
45118: LD_EXP 90
45122: PUSH
45123: LD_VAR 0 3
45127: UNION
45128: ST_TO_ADDR
// end ; end ; end ;
45129: GO 44950
45131: POP
45132: POP
// end ; end ;
45133: GO 45136
45135: POP
// end ;
45136: LD_VAR 0 2
45140: RET
// every 0 0$1 + 0 0$0.4 do var i , k , temp_list , x , y , task_list ; var need_area_list ;
45141: GO 45143
45143: DISABLE
45144: LD_INT 0
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
// begin need_area_list = [ 2 , 3 , 4 , 5 ] ;
45153: LD_ADDR_VAR 0 7
45157: PUSH
45158: LD_INT 2
45160: PUSH
45161: LD_INT 3
45163: PUSH
45164: LD_INT 4
45166: PUSH
45167: LD_INT 5
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: ST_TO_ADDR
// repeat wait ( 0 0$0.1 ) ;
45176: LD_INT 4
45178: PPUSH
45179: CALL_OW 67
// temp_list = [ ] ;
45183: LD_ADDR_VAR 0 3
45187: PUSH
45188: EMPTY
45189: ST_TO_ADDR
// for i in camera_engineers do
45190: LD_ADDR_VAR 0 1
45194: PUSH
45195: LD_EXP 90
45199: PUSH
45200: FOR_IN
45201: IFFALSE 45232
// if HasTask ( i ) then
45203: LD_VAR 0 1
45207: PPUSH
45208: CALL_OW 314
45212: IFFALSE 45230
// temp_list = temp_list ^ i ;
45214: LD_ADDR_VAR 0 3
45218: PUSH
45219: LD_VAR 0 3
45223: PUSH
45224: LD_VAR 0 1
45228: ADD
45229: ST_TO_ADDR
45230: GO 45200
45232: POP
45233: POP
// camera_engineers = temp_list ;
45234: LD_ADDR_EXP 90
45238: PUSH
45239: LD_VAR 0 3
45243: ST_TO_ADDR
// for i in camera_engineers do
45244: LD_ADDR_VAR 0 1
45248: PUSH
45249: LD_EXP 90
45253: PUSH
45254: FOR_IN
45255: IFFALSE 45638
// begin task_list = GetTaskList ( i ) ;
45257: LD_ADDR_VAR 0 6
45261: PUSH
45262: LD_VAR 0 1
45266: PPUSH
45267: CALL_OW 437
45271: ST_TO_ADDR
// if task_list [ 1 ] [ 1 ] = g then
45272: LD_VAR 0 6
45276: PUSH
45277: LD_INT 1
45279: ARRAY
45280: PUSH
45281: LD_INT 1
45283: ARRAY
45284: PUSH
45285: LD_STRING g
45287: EQUAL
45288: IFFALSE 45636
// begin x = task_list [ 1 ] [ 2 ] ;
45290: LD_ADDR_VAR 0 4
45294: PUSH
45295: LD_VAR 0 6
45299: PUSH
45300: LD_INT 1
45302: ARRAY
45303: PUSH
45304: LD_INT 2
45306: ARRAY
45307: ST_TO_ADDR
// y = task_list [ 1 ] [ 3 ] ;
45308: LD_ADDR_VAR 0 5
45312: PUSH
45313: LD_VAR 0 6
45317: PUSH
45318: LD_INT 1
45320: ARRAY
45321: PUSH
45322: LD_INT 3
45324: ARRAY
45325: ST_TO_ADDR
// if GetDistUnitXY ( i , x , y ) > 2 then
45326: LD_VAR 0 1
45330: PPUSH
45331: LD_VAR 0 4
45335: PPUSH
45336: LD_VAR 0 5
45340: PPUSH
45341: CALL_OW 297
45345: PUSH
45346: LD_INT 2
45348: GREATER
45349: IFFALSE 45353
// continue ;
45351: GO 45254
// if InArea ( x , y , camera_area_2 ) then
45353: LD_VAR 0 4
45357: PPUSH
45358: LD_VAR 0 5
45362: PPUSH
45363: LD_INT 15
45365: PPUSH
45366: CALL_OW 309
45370: IFFALSE 45417
// begin HiddenCamera ( x , y , you ) ;
45372: LD_VAR 0 4
45376: PPUSH
45377: LD_VAR 0 5
45381: PPUSH
45382: LD_EXP 2
45386: PPUSH
45387: CALL_OW 244
// need_area_list = need_area_list diff 2 ;
45391: LD_ADDR_VAR 0 7
45395: PUSH
45396: LD_VAR 0 7
45400: PUSH
45401: LD_INT 2
45403: DIFF
45404: ST_TO_ADDR
// SetAreaMapShow ( camera_area_2 , 0 ) ;
45405: LD_INT 15
45407: PPUSH
45408: LD_INT 0
45410: PPUSH
45411: CALL_OW 424
// end else
45415: GO 45607
// if InArea ( x , y , camera_area_3 ) then
45417: LD_VAR 0 4
45421: PPUSH
45422: LD_VAR 0 5
45426: PPUSH
45427: LD_INT 16
45429: PPUSH
45430: CALL_OW 309
45434: IFFALSE 45481
// begin HiddenCamera ( x , y , you ) ;
45436: LD_VAR 0 4
45440: PPUSH
45441: LD_VAR 0 5
45445: PPUSH
45446: LD_EXP 2
45450: PPUSH
45451: CALL_OW 244
// need_area_list = need_area_list diff 3 ;
45455: LD_ADDR_VAR 0 7
45459: PUSH
45460: LD_VAR 0 7
45464: PUSH
45465: LD_INT 3
45467: DIFF
45468: ST_TO_ADDR
// SetAreaMapShow ( camera_area_3 , 0 ) ;
45469: LD_INT 16
45471: PPUSH
45472: LD_INT 0
45474: PPUSH
45475: CALL_OW 424
// end else
45479: GO 45607
// if InArea ( x , y , camera_area_4 ) then
45481: LD_VAR 0 4
45485: PPUSH
45486: LD_VAR 0 5
45490: PPUSH
45491: LD_INT 17
45493: PPUSH
45494: CALL_OW 309
45498: IFFALSE 45545
// begin HiddenCamera ( x , y , you ) ;
45500: LD_VAR 0 4
45504: PPUSH
45505: LD_VAR 0 5
45509: PPUSH
45510: LD_EXP 2
45514: PPUSH
45515: CALL_OW 244
// need_area_list = need_area_list diff 4 ;
45519: LD_ADDR_VAR 0 7
45523: PUSH
45524: LD_VAR 0 7
45528: PUSH
45529: LD_INT 4
45531: DIFF
45532: ST_TO_ADDR
// SetAreaMapShow ( camera_area_4 , 0 ) ;
45533: LD_INT 17
45535: PPUSH
45536: LD_INT 0
45538: PPUSH
45539: CALL_OW 424
// end else
45543: GO 45607
// if InArea ( x , y , camera_area_5 ) then
45545: LD_VAR 0 4
45549: PPUSH
45550: LD_VAR 0 5
45554: PPUSH
45555: LD_INT 18
45557: PPUSH
45558: CALL_OW 309
45562: IFFALSE 45607
// begin HiddenCamera ( x , y , you ) ;
45564: LD_VAR 0 4
45568: PPUSH
45569: LD_VAR 0 5
45573: PPUSH
45574: LD_EXP 2
45578: PPUSH
45579: CALL_OW 244
// need_area_list = need_area_list diff 5 ;
45583: LD_ADDR_VAR 0 7
45587: PUSH
45588: LD_VAR 0 7
45592: PUSH
45593: LD_INT 5
45595: DIFF
45596: ST_TO_ADDR
// SetAreaMapShow ( camera_area_5 , 0 ) ;
45597: LD_INT 18
45599: PPUSH
45600: LD_INT 0
45602: PPUSH
45603: CALL_OW 424
// end ; if need_area_list = 0 then
45607: LD_VAR 0 7
45611: PUSH
45612: LD_INT 0
45614: EQUAL
45615: IFFALSE 45636
// begin ChangeMissionObjectives ( MOutCameras ) ;
45617: LD_STRING MOutCameras
45619: PPUSH
45620: CALL_OW 337
// cameras_placed = true ;
45624: LD_ADDR_EXP 91
45628: PUSH
45629: LD_INT 1
45631: ST_TO_ADDR
// exit ;
45632: POP
45633: POP
45634: GO 45644
// end ; end ; end ;
45636: GO 45254
45638: POP
45639: POP
// until false ;
45640: LD_INT 0
45642: IFFALSE 45176
// end ;
45644: PPOPN 7
45646: END
// on SpontaneousTeleported ( un ) do begin if first_teleport then
45647: LD_EXP 89
45651: IFFALSE 45781
// if See ( you , un ) then
45653: LD_EXP 2
45657: PPUSH
45658: LD_VAR 0 1
45662: PPUSH
45663: CALL_OW 292
45667: IFFALSE 45781
// begin CenterNowOnUnits ( un ) ;
45669: LD_VAR 0 1
45673: PPUSH
45674: CALL_OW 87
// first_teleport = false ;
45678: LD_ADDR_EXP 89
45682: PUSH
45683: LD_INT 0
45685: ST_TO_ADDR
// wait ( 0 0$1.8 ) ;
45686: LD_INT 63
45688: PPUSH
45689: CALL_OW 67
// DialogueOn ;
45693: CALL_OW 6
// ForceSay ( Heike , D6-H-1 ) ;
45697: LD_EXP 9
45701: PPUSH
45702: LD_STRING D6-H-1
45704: PPUSH
45705: CALL_OW 91
// if IsLive ( Ralph ) then
45709: LD_EXP 12
45713: PPUSH
45714: CALL_OW 300
45718: IFFALSE 45734
// ForceSay ( Ralph , D6-Ra-1 ) else
45720: LD_EXP 12
45724: PPUSH
45725: LD_STRING D6-Ra-1
45727: PPUSH
45728: CALL_OW 91
45732: GO 45777
// if IsLive ( Oswald ) then
45734: LD_EXP 11
45738: PPUSH
45739: CALL_OW 300
45743: IFFALSE 45777
// begin if oswald_is_substitute then
45745: LD_EXP 80
45749: IFFALSE 45765
// ForceSay ( Oswald , D6-Os_alt-1 ) else
45751: LD_EXP 11
45755: PPUSH
45756: LD_STRING D6-Os_alt-1
45758: PPUSH
45759: CALL_OW 91
45763: GO 45777
// ForceSay ( Oswald , D6-Os-1 ) ;
45765: LD_EXP 11
45769: PPUSH
45770: LD_STRING D6-Os-1
45772: PPUSH
45773: CALL_OW 91
// end ; DialogueOff ;
45777: CALL_OW 7
// end ; end ;
45781: PPOPN 1
45783: END
// every 0 0$1.6 do
45784: GO 45786
45786: DISABLE
// begin repeat wait ( 0 0$0.5 ) ;
45787: LD_INT 18
45789: PPUSH
45790: CALL_OW 67
// if game_phase = 3 then
45794: LD_EXP 88
45798: PUSH
45799: LD_INT 3
45801: EQUAL
45802: IFFALSE 45806
// exit ;
45804: GO 45892
// if ContactTime ( [ you , you_alt ] ) <= 0 0$1 or ai_contact_time [ you ] [ you_alt ] <= 0 0$1 then
45806: LD_EXP 2
45810: PUSH
45811: LD_EXP 5
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PPUSH
45820: CALL_OW 462
45824: PUSH
45825: LD_INT 35
45827: LESSEQUAL
45828: PUSH
45829: LD_EXP 75
45833: PUSH
45834: LD_EXP 2
45838: ARRAY
45839: PUSH
45840: LD_EXP 5
45844: ARRAY
45845: PUSH
45846: LD_INT 35
45848: LESSEQUAL
45849: OR
45850: IFFALSE 45888
// begin DialogueOn ;
45852: CALL_OW 6
// Say ( Gensher , D11-Ge-1 ) ;
45856: LD_EXP 23
45860: PPUSH
45861: LD_STRING D11-Ge-1
45863: PPUSH
45864: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
45868: LD_INT 18
45870: PPUSH
45871: CALL_OW 68
// YouLost ( AttackedGensher ) ;
45875: LD_STRING AttackedGensher
45877: PPUSH
45878: CALL_OW 104
// DialogueOff ;
45882: CALL_OW 7
// exit ;
45886: GO 45892
// end ; until false ;
45888: LD_INT 0
45890: IFFALSE 45787
// end ;
45892: END
// every 0 0$1 + 0 0$0.2 do var temp_list , i ;
45893: GO 45895
45895: DISABLE
45896: LD_INT 0
45898: PPUSH
45899: PPUSH
// begin repeat wait ( 0 0$1 ) ;
45900: LD_INT 35
45902: PPUSH
45903: CALL_OW 67
// if game_phase > 1 then
45907: LD_EXP 88
45911: PUSH
45912: LD_INT 1
45914: GREATER
45915: IFFALSE 45919
// exit ;
45917: GO 46363
// if ContactTime ( [ you , americans ] ) <= 0 0$2 or ai_contact_time [ americans ] [ you ] <= 0 0$2 then
45919: LD_EXP 2
45923: PUSH
45924: LD_EXP 6
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PPUSH
45933: CALL_OW 462
45937: PUSH
45938: LD_INT 70
45940: LESSEQUAL
45941: PUSH
45942: LD_EXP 75
45946: PUSH
45947: LD_EXP 6
45951: ARRAY
45952: PUSH
45953: LD_EXP 2
45957: ARRAY
45958: PUSH
45959: LD_INT 70
45961: LESSEQUAL
45962: OR
45963: IFFALSE 46359
// begin temp_list = [ ] ;
45965: LD_ADDR_VAR 0 1
45969: PUSH
45970: EMPTY
45971: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , americans ] ) do
45972: LD_ADDR_VAR 0 2
45976: PUSH
45977: LD_INT 22
45979: PUSH
45980: LD_EXP 6
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PPUSH
45989: CALL_OW 69
45993: PUSH
45994: FOR_IN
45995: IFFALSE 46033
// if GetSide ( Attacks ( i ) ) = you then
45997: LD_VAR 0 2
46001: PPUSH
46002: CALL_OW 320
46006: PPUSH
46007: CALL_OW 255
46011: PUSH
46012: LD_EXP 2
46016: EQUAL
46017: IFFALSE 46031
// begin temp_list = i ;
46019: LD_ADDR_VAR 0 1
46023: PUSH
46024: LD_VAR 0 2
46028: ST_TO_ADDR
// break ;
46029: GO 46033
// end ;
46031: GO 45994
46033: POP
46034: POP
// if temp_list = 0 then
46035: LD_VAR 0 1
46039: PUSH
46040: LD_INT 0
46042: EQUAL
46043: IFFALSE 46108
// for i in FilterAllUnits ( [ f_side , you ] ) do
46045: LD_ADDR_VAR 0 2
46049: PUSH
46050: LD_INT 22
46052: PUSH
46053: LD_EXP 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PPUSH
46062: CALL_OW 69
46066: PUSH
46067: FOR_IN
46068: IFFALSE 46106
// if GetSide ( Attacks ( i ) ) = americans then
46070: LD_VAR 0 2
46074: PPUSH
46075: CALL_OW 320
46079: PPUSH
46080: CALL_OW 255
46084: PUSH
46085: LD_EXP 6
46089: EQUAL
46090: IFFALSE 46104
// begin temp_list = i ;
46092: LD_ADDR_VAR 0 1
46096: PUSH
46097: LD_VAR 0 2
46101: ST_TO_ADDR
// break ;
46102: GO 46106
// end ;
46104: GO 46067
46106: POP
46107: POP
// if temp_list > 0 then
46108: LD_VAR 0 1
46112: PUSH
46113: LD_INT 0
46115: GREATER
46116: IFFALSE 46127
// CenterOnUnits ( temp_list ) ;
46118: LD_VAR 0 1
46122: PPUSH
46123: CALL_OW 85
// DialogueOn ;
46127: CALL_OW 6
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_class , class_soldier ] ] ) diff [ Simms , Cornell , Khattam ] ;
46131: LD_ADDR_VAR 0 1
46135: PUSH
46136: LD_INT 22
46138: PUSH
46139: LD_EXP 6
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 25
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PPUSH
46162: CALL_OW 69
46166: PUSH
46167: LD_EXP 24
46171: PUSH
46172: LD_EXP 25
46176: PUSH
46177: LD_EXP 26
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: DIFF
46187: ST_TO_ADDR
// if temp_list = 0 then
46188: LD_VAR 0 1
46192: PUSH
46193: LD_INT 0
46195: EQUAL
46196: IFFALSE 46266
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) diff ( GetApes ( americans ) ^ [ Simms , Cornell , Khattam ] ) ;
46198: LD_ADDR_VAR 0 1
46202: PUSH
46203: LD_INT 22
46205: PUSH
46206: LD_EXP 6
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 21
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PPUSH
46229: CALL_OW 69
46233: PUSH
46234: LD_EXP 6
46238: PPUSH
46239: CALL 43788 0 1
46243: PUSH
46244: LD_EXP 24
46248: PUSH
46249: LD_EXP 25
46253: PUSH
46254: LD_EXP 26
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: LIST
46263: ADD
46264: DIFF
46265: ST_TO_ADDR
// if temp_list > 0 then
46266: LD_VAR 0 1
46270: PUSH
46271: LD_INT 0
46273: GREATER
46274: IFFALSE 46329
// if GetSex ( temp_list [ 1 ] ) = sex_male then
46276: LD_VAR 0 1
46280: PUSH
46281: LD_INT 1
46283: ARRAY
46284: PPUSH
46285: CALL_OW 258
46289: PUSH
46290: LD_INT 1
46292: EQUAL
46293: IFFALSE 46313
// SayRadio ( temp_list [ 1 ] , D4-SomeM-1 ) else
46295: LD_VAR 0 1
46299: PUSH
46300: LD_INT 1
46302: ARRAY
46303: PPUSH
46304: LD_STRING D4-SomeM-1
46306: PPUSH
46307: CALL_OW 94
46311: GO 46329
// SayRadio ( temp_list [ 1 ] , D4-SomeF-1 ) ;
46313: LD_VAR 0 1
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: PPUSH
46322: LD_STRING D4-SomeF-1
46324: PPUSH
46325: CALL_OW 94
// SayRadio ( Simms , D4-Sim-1 ) ;
46329: LD_EXP 24
46333: PPUSH
46334: LD_STRING D4-Sim-1
46336: PPUSH
46337: CALL_OW 94
// dwait ( 0 0$0.5 ) ;
46341: LD_INT 18
46343: PPUSH
46344: CALL_OW 68
// YouLost ( PlayerSeen ) ;
46348: LD_STRING PlayerSeen
46350: PPUSH
46351: CALL_OW 104
// DialogueOff ;
46355: CALL_OW 7
// end ; until false ;
46359: LD_INT 0
46361: IFFALSE 45900
// end ;
46363: PPOPN 2
46365: END
// every 0 0$1 + 0 0$0.9 do var vehicle ;
46366: GO 46368
46368: DISABLE
46369: LD_INT 0
46371: PPUSH
// begin InitUc ;
46372: CALL_OW 18
// InitVc ;
46376: CALL_OW 20
// uc_side = americans ;
46380: LD_ADDR_OWVAR 20
46384: PUSH
46385: LD_EXP 6
46389: ST_TO_ADDR
// uc_nation = nation_american ;
46390: LD_ADDR_OWVAR 21
46394: PUSH
46395: LD_INT 1
46397: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
46398: LD_ADDR_OWVAR 37
46402: PUSH
46403: LD_INT 2
46405: ST_TO_ADDR
// vc_control = control_manual ;
46406: LD_ADDR_OWVAR 38
46410: PUSH
46411: LD_INT 1
46413: ST_TO_ADDR
// vc_engine = engine_siberite ;
46414: LD_ADDR_OWVAR 39
46418: PUSH
46419: LD_INT 3
46421: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
46422: LD_ADDR_OWVAR 40
46426: PUSH
46427: LD_INT 2
46429: ST_TO_ADDR
// vehicle = CreateVehicle ;
46430: LD_ADDR_VAR 0 1
46434: PUSH
46435: CALL_OW 45
46439: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , vehicle ) ;
46440: LD_EXP 27
46444: PPUSH
46445: LD_VAR 0 1
46449: PPUSH
46450: CALL_OW 52
// wait ( Rand ( 0 0$20 , 0 0$30 ) ) ;
46454: LD_INT 700
46456: PPUSH
46457: LD_INT 1050
46459: PPUSH
46460: CALL_OW 12
46464: PPUSH
46465: CALL_OW 67
// while not PlaceUnitXYR ( vehicle , 98 , 30 , 2 , false ) do
46469: LD_VAR 0 1
46473: PPUSH
46474: LD_INT 98
46476: PPUSH
46477: LD_INT 30
46479: PPUSH
46480: LD_INT 2
46482: PPUSH
46483: LD_INT 0
46485: PPUSH
46486: CALL_OW 50
46490: NOT
46491: IFFALSE 46502
// wait ( 0 0$2 ) ;
46493: LD_INT 70
46495: PPUSH
46496: CALL_OW 67
46500: GO 46469
// while IsPlaced ( Joan ) do
46502: LD_EXP 27
46506: PPUSH
46507: CALL_OW 305
46511: IFFALSE 46578
// begin wait ( 0 0$1 ) ;
46513: LD_INT 35
46515: PPUSH
46516: CALL_OW 67
// if GetDistUnitXY ( Joan , 56 , 3 ) > 1 then
46520: LD_EXP 27
46524: PPUSH
46525: LD_INT 56
46527: PPUSH
46528: LD_INT 3
46530: PPUSH
46531: CALL_OW 297
46535: PUSH
46536: LD_INT 1
46538: GREATER
46539: IFFALSE 46558
// ComMoveXY ( Joan , 56 , 3 ) else
46541: LD_EXP 27
46545: PPUSH
46546: LD_INT 56
46548: PPUSH
46549: LD_INT 3
46551: PPUSH
46552: CALL_OW 111
46556: GO 46576
// begin DestroyUnit ( Joan ) ;
46558: LD_EXP 27
46562: PPUSH
46563: CALL_OW 65
// DestroyUnit ( vehicle ) ;
46567: LD_VAR 0 1
46571: PPUSH
46572: CALL_OW 65
// end ; end ;
46576: GO 46502
// end ;
46578: PPOPN 1
46580: END
// every 0 0$1 + 0 0$0.1 do var i , temp_unit , temp_list , temp_list_2 ; var cargo_bay , special_player_units , scout , crate_hex ;
46581: GO 46583
46583: DISABLE
46584: LD_INT 0
46586: PPUSH
46587: PPUSH
46588: PPUSH
46589: PPUSH
46590: PPUSH
46591: PPUSH
46592: PPUSH
46593: PPUSH
// begin special_player_units = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ;
46594: LD_ADDR_VAR 0 6
46598: PUSH
46599: LD_EXP 9
46603: PUSH
46604: LD_EXP 10
46608: PUSH
46609: LD_EXP 11
46613: PUSH
46614: LD_EXP 12
46618: PUSH
46619: LD_EXP 13
46623: PUSH
46624: LD_EXP 14
46628: PUSH
46629: LD_EXP 15
46633: PUSH
46634: LD_EXP 16
46638: PUSH
46639: LD_EXP 17
46643: PUSH
46644: LD_EXP 18
46648: PUSH
46649: LD_EXP 19
46653: PUSH
46654: LD_EXP 20
46658: PUSH
46659: LD_EXP 21
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: ST_TO_ADDR
// InitUc ;
46679: CALL_OW 18
// InitVc ;
46683: CALL_OW 20
// uc_side = russians ;
46687: LD_ADDR_OWVAR 20
46691: PUSH
46692: LD_EXP 3
46696: ST_TO_ADDR
// uc_nation = nation_russian ;
46697: LD_ADDR_OWVAR 21
46701: PUSH
46702: LD_INT 3
46704: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
46705: LD_ADDR_OWVAR 37
46709: PUSH
46710: LD_INT 22
46712: ST_TO_ADDR
// vc_engine = engine_siberite ;
46713: LD_ADDR_OWVAR 39
46717: PUSH
46718: LD_INT 3
46720: ST_TO_ADDR
// vc_control = control_computer ;
46721: LD_ADDR_OWVAR 38
46725: PUSH
46726: LD_INT 3
46728: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
46729: LD_ADDR_OWVAR 40
46733: PUSH
46734: LD_INT 51
46736: ST_TO_ADDR
// cargo_bay = CreateVehicle ;
46737: LD_ADDR_VAR 0 5
46741: PUSH
46742: CALL_OW 45
46746: ST_TO_ADDR
// SetCargo ( cargo_bay , mat_cans , Rand ( 2 , 5 ) * 10 ) ;
46747: LD_VAR 0 5
46751: PPUSH
46752: LD_INT 1
46754: PPUSH
46755: LD_INT 2
46757: PPUSH
46758: LD_INT 5
46760: PPUSH
46761: CALL_OW 12
46765: PUSH
46766: LD_INT 10
46768: MUL
46769: PPUSH
46770: CALL_OW 290
// SetDir ( cargo_bay , 0 ) ;
46774: LD_VAR 0 5
46778: PPUSH
46779: LD_INT 0
46781: PPUSH
46782: CALL_OW 233
// PlaceUnitXY ( cargo_bay , 103 , 116 , false ) ;
46786: LD_VAR 0 5
46790: PPUSH
46791: LD_INT 103
46793: PPUSH
46794: LD_INT 116
46796: PPUSH
46797: LD_INT 0
46799: PPUSH
46800: CALL_OW 48
// crate_hex = RandHexXYR ( 122 , 93 , 4 , false ) ;
46804: LD_ADDR_VAR 0 8
46808: PUSH
46809: LD_INT 122
46811: PPUSH
46812: LD_INT 93
46814: PPUSH
46815: LD_INT 4
46817: PPUSH
46818: LD_INT 0
46820: PPUSH
46821: CALL_OW 17
46825: ST_TO_ADDR
// CreateCratesXY ( Rand ( 3 , 5 ) , crate_hex [ 1 ] , crate_hex [ 2 ] , false ) ;
46826: LD_INT 3
46828: PPUSH
46829: LD_INT 5
46831: PPUSH
46832: CALL_OW 12
46836: PPUSH
46837: LD_VAR 0 8
46841: PUSH
46842: LD_INT 1
46844: ARRAY
46845: PPUSH
46846: LD_VAR 0 8
46850: PUSH
46851: LD_INT 2
46853: ARRAY
46854: PPUSH
46855: LD_INT 0
46857: PPUSH
46858: CALL_OW 54
// ComMoveXY ( cargo_bay , 122 , 93 ) ;
46862: LD_VAR 0 5
46866: PPUSH
46867: LD_INT 122
46869: PPUSH
46870: LD_INT 93
46872: PPUSH
46873: CALL_OW 111
// AddComStand ( cargo_bay ) ;
46877: LD_VAR 0 5
46881: PPUSH
46882: CALL_OW 225
// i = Rand ( 1 1$30 , 2 2$0 ) ;
46886: LD_ADDR_VAR 0 1
46890: PUSH
46891: LD_INT 3150
46893: PPUSH
46894: LD_INT 4200
46896: PPUSH
46897: CALL_OW 12
46901: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
46902: LD_INT 18
46904: PPUSH
46905: CALL_OW 67
// i = i - 0 0$0.5 ;
46909: LD_ADDR_VAR 0 1
46913: PUSH
46914: LD_VAR 0 1
46918: PUSH
46919: LD_INT 18
46921: MINUS
46922: ST_TO_ADDR
// until i <= 0 0$0 or See ( you , cargo_bay ) ;
46923: LD_VAR 0 1
46927: PUSH
46928: LD_INT 0
46930: LESSEQUAL
46931: PUSH
46932: LD_EXP 2
46936: PPUSH
46937: LD_VAR 0 5
46941: PPUSH
46942: CALL_OW 292
46946: OR
46947: IFFALSE 46902
// while not See ( you , cargo_bay ) do
46949: LD_EXP 2
46953: PPUSH
46954: LD_VAR 0 5
46958: PPUSH
46959: CALL_OW 292
46963: NOT
46964: IFFALSE 47036
// begin wait ( 0 0$0.5 ) ;
46966: LD_INT 18
46968: PPUSH
46969: CALL_OW 67
// temp_unit = NearestUnitToUnit ( FilterAllUnits ( [ f_side , you ] ) , cargo_bay ) ;
46973: LD_ADDR_VAR 0 2
46977: PUSH
46978: LD_INT 22
46980: PUSH
46981: LD_EXP 2
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PPUSH
46990: CALL_OW 69
46994: PPUSH
46995: LD_VAR 0 5
46999: PPUSH
47000: CALL_OW 74
47004: ST_TO_ADDR
// ComMoveXY ( cargo_bay , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
47005: LD_VAR 0 5
47009: PPUSH
47010: LD_VAR 0 2
47014: PPUSH
47015: CALL_OW 250
47019: PPUSH
47020: LD_VAR 0 2
47024: PPUSH
47025: CALL_OW 251
47029: PPUSH
47030: CALL_OW 111
// end ;
47034: GO 46949
// CenterOnUnits ( cargo_bay ) ;
47036: LD_VAR 0 5
47040: PPUSH
47041: CALL_OW 85
// DialogueOn ;
47045: CALL_OW 6
// if IsOk ( Oswald ) then
47049: LD_EXP 11
47053: PPUSH
47054: CALL_OW 302
47058: IFFALSE 47094
// begin if oswald_is_substitute then
47060: LD_EXP 80
47064: IFFALSE 47080
// Say ( Oswald , D2-Os_alt-1 ) else
47066: LD_EXP 11
47070: PPUSH
47071: LD_STRING D2-Os_alt-1
47073: PPUSH
47074: CALL_OW 88
47078: GO 47092
// Say ( Oswald , D2-Os-1 ) ;
47080: LD_EXP 11
47084: PPUSH
47085: LD_STRING D2-Os-1
47087: PPUSH
47088: CALL_OW 88
// end else
47092: GO 47326
// if IsOk ( Olaf ) then
47094: LD_EXP 16
47098: PPUSH
47099: CALL_OW 302
47103: IFFALSE 47119
// Say ( Olaf , D2-Olaf-1 ) else
47105: LD_EXP 16
47109: PPUSH
47110: LD_STRING D2-Olaf-1
47112: PPUSH
47113: CALL_OW 88
47117: GO 47326
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ special_player_units ) ;
47119: LD_ADDR_VAR 0 3
47123: PUSH
47124: LD_INT 22
47126: PUSH
47127: LD_EXP 2
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 21
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PPUSH
47150: CALL_OW 69
47154: PUSH
47155: LD_EXP 2
47159: PPUSH
47160: CALL 43788 0 1
47164: PUSH
47165: LD_VAR 0 6
47169: ADD
47170: DIFF
47171: ST_TO_ADDR
// if temp_list > 0 then
47172: LD_VAR 0 3
47176: PUSH
47177: LD_INT 0
47179: GREATER
47180: IFFALSE 47198
// temp_unit = temp_list [ 1 ] else
47182: LD_ADDR_VAR 0 2
47186: PUSH
47187: LD_VAR 0 3
47191: PUSH
47192: LD_INT 1
47194: ARRAY
47195: ST_TO_ADDR
47196: GO 47285
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ Heike ) ;
47198: LD_ADDR_VAR 0 3
47202: PUSH
47203: LD_INT 22
47205: PUSH
47206: LD_EXP 2
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 21
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PPUSH
47229: CALL_OW 69
47233: PUSH
47234: LD_EXP 2
47238: PPUSH
47239: CALL 43788 0 1
47243: PUSH
47244: LD_EXP 9
47248: ADD
47249: DIFF
47250: ST_TO_ADDR
// if temp_list > 0 then
47251: LD_VAR 0 3
47255: PUSH
47256: LD_INT 0
47258: GREATER
47259: IFFALSE 47277
// temp_unit = temp_list [ 1 ] else
47261: LD_ADDR_VAR 0 2
47265: PUSH
47266: LD_VAR 0 3
47270: PUSH
47271: LD_INT 1
47273: ARRAY
47274: ST_TO_ADDR
47275: GO 47285
// temp_unit = 0 ;
47277: LD_ADDR_VAR 0 2
47281: PUSH
47282: LD_INT 0
47284: ST_TO_ADDR
// end ; if GetSex ( temp_unit ) = sex_male then
47285: LD_VAR 0 2
47289: PPUSH
47290: CALL_OW 258
47294: PUSH
47295: LD_INT 1
47297: EQUAL
47298: IFFALSE 47314
// Say ( temp_unit , D2-SomeM-1 ) else
47300: LD_VAR 0 2
47304: PPUSH
47305: LD_STRING D2-SomeM-1
47307: PPUSH
47308: CALL_OW 88
47312: GO 47326
// Say ( temp_unit , D2-SomeF-1 ) ;
47314: LD_VAR 0 2
47318: PPUSH
47319: LD_STRING D2-SomeF-1
47321: PPUSH
47322: CALL_OW 88
// end ; Say ( Heike , D2-H-1 ) ;
47326: LD_EXP 9
47330: PPUSH
47331: LD_STRING D2-H-1
47333: PPUSH
47334: CALL_OW 88
// if IsOk ( Kowalski ) then
47338: LD_EXP 13
47342: PPUSH
47343: CALL_OW 302
47347: IFFALSE 47375
// begin Say ( Kowalski , D2-Ko-a-1 ) ;
47349: LD_EXP 13
47353: PPUSH
47354: LD_STRING D2-Ko-a-1
47356: PPUSH
47357: CALL_OW 88
// Say ( Heike , D2-H-a-2 ) ;
47361: LD_EXP 9
47365: PPUSH
47366: LD_STRING D2-H-a-2
47368: PPUSH
47369: CALL_OW 88
// end else
47373: GO 47387
// begin Say ( Heike , D2-H-b-2 ) ;
47375: LD_EXP 9
47379: PPUSH
47380: LD_STRING D2-H-b-2
47382: PPUSH
47383: CALL_OW 88
// end ; dwait ( 0 0$0.2 ) ;
47387: LD_INT 7
47389: PPUSH
47390: CALL_OW 68
// temp_list_2 = FilterAllUnits ( [ f_side , you ] ) diff ( GetApes ( you ) ^ Heike ) ;
47394: LD_ADDR_VAR 0 4
47398: PUSH
47399: LD_INT 22
47401: PUSH
47402: LD_EXP 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PPUSH
47411: CALL_OW 69
47415: PUSH
47416: LD_EXP 2
47420: PPUSH
47421: CALL 43788 0 1
47425: PUSH
47426: LD_EXP 9
47430: ADD
47431: DIFF
47432: ST_TO_ADDR
// if UnitFilter ( temp_list_2 , [ f_class , class_soldier ] ) = 0 then
47433: LD_VAR 0 4
47437: PPUSH
47438: LD_INT 25
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PPUSH
47448: CALL_OW 72
47452: PUSH
47453: LD_INT 0
47455: EQUAL
47456: IFFALSE 47471
// temp_list = [ sel_change_class ] else
47458: LD_ADDR_VAR 0 3
47462: PUSH
47463: LD_INT -5
47465: PUSH
47466: EMPTY
47467: LIST
47468: ST_TO_ADDR
47469: GO 47482
// temp_list = [ sel_dont_change_class ] ;
47471: LD_ADDR_VAR 0 3
47475: PUSH
47476: LD_INT -6
47478: PUSH
47479: EMPTY
47480: LIST
47481: ST_TO_ADDR
// temp_list = CharacterSelection (  , 1 , 1 , [ sel_dont_change_class , sel_not_hired , sel_not_changeable , Heike , sel_changeable ] ^ temp_list ^ temp_list_2 , [ [ class_soldier , 1 ] ] ) ;
47482: LD_ADDR_VAR 0 3
47486: PUSH
47487: LD_STRING 
47489: PPUSH
47490: LD_INT 1
47492: PPUSH
47493: LD_INT 1
47495: PPUSH
47496: LD_INT -6
47498: PUSH
47499: LD_INT -2
47501: PUSH
47502: LD_INT -4
47504: PUSH
47505: LD_EXP 9
47509: PUSH
47510: LD_INT -3
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: PUSH
47520: LD_VAR 0 3
47524: ADD
47525: PUSH
47526: LD_VAR 0 4
47530: ADD
47531: PPUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: EMPTY
47543: LIST
47544: PPUSH
47545: CALL_OW 42
47549: ST_TO_ADDR
// temp_unit = temp_list [ 1 ] ;
47550: LD_ADDR_VAR 0 2
47554: PUSH
47555: LD_VAR 0 3
47559: PUSH
47560: LD_INT 1
47562: ARRAY
47563: ST_TO_ADDR
// scout = temp_unit ;
47564: LD_ADDR_VAR 0 7
47568: PUSH
47569: LD_VAR 0 2
47573: ST_TO_ADDR
// dwait ( 0 0$0.2 ) ;
47574: LD_INT 7
47576: PPUSH
47577: CALL_OW 68
// case temp_unit of Sonya :
47581: LD_VAR 0 2
47585: PUSH
47586: LD_EXP 10
47590: DOUBLE
47591: EQUAL
47592: IFTRUE 47596
47594: GO 47611
47596: POP
// Say ( temp_unit , D2-So-1 ) ; Oswald :
47597: LD_VAR 0 2
47601: PPUSH
47602: LD_STRING D2-So-1
47604: PPUSH
47605: CALL_OW 88
47609: GO 47980
47611: LD_EXP 11
47615: DOUBLE
47616: EQUAL
47617: IFTRUE 47621
47619: GO 47656
47621: POP
// begin if oswald_is_substitute then
47622: LD_EXP 80
47626: IFFALSE 47642
// Say ( temp_unit , D2-Os_alt-2 ) else
47628: LD_VAR 0 2
47632: PPUSH
47633: LD_STRING D2-Os_alt-2
47635: PPUSH
47636: CALL_OW 88
47640: GO 47654
// Say ( temp_unit , D2-Os-2 ) ;
47642: LD_VAR 0 2
47646: PPUSH
47647: LD_STRING D2-Os-2
47649: PPUSH
47650: CALL_OW 88
// end ; Ralph :
47654: GO 47980
47656: LD_EXP 12
47660: DOUBLE
47661: EQUAL
47662: IFTRUE 47666
47664: GO 47681
47666: POP
// Say ( temp_unit , D2-Ra-1 ) ; Kowalski :
47667: LD_VAR 0 2
47671: PPUSH
47672: LD_STRING D2-Ra-1
47674: PPUSH
47675: CALL_OW 88
47679: GO 47980
47681: LD_EXP 13
47685: DOUBLE
47686: EQUAL
47687: IFTRUE 47691
47689: GO 47706
47691: POP
// Say ( temp_unit , D2-Ko-1 ) ; Evelyn :
47692: LD_VAR 0 2
47696: PPUSH
47697: LD_STRING D2-Ko-1
47699: PPUSH
47700: CALL_OW 88
47704: GO 47980
47706: LD_EXP 14
47710: DOUBLE
47711: EQUAL
47712: IFTRUE 47716
47714: GO 47731
47716: POP
// Say ( temp_unit , D2-Ev-1 ) ; Suze :
47717: LD_VAR 0 2
47721: PPUSH
47722: LD_STRING D2-Ev-1
47724: PPUSH
47725: CALL_OW 88
47729: GO 47980
47731: LD_EXP 15
47735: DOUBLE
47736: EQUAL
47737: IFTRUE 47741
47739: GO 47756
47741: POP
// Say ( temp_unit , D2-Su-1 ) ; Olaf :
47742: LD_VAR 0 2
47746: PPUSH
47747: LD_STRING D2-Su-1
47749: PPUSH
47750: CALL_OW 88
47754: GO 47980
47756: LD_EXP 16
47760: DOUBLE
47761: EQUAL
47762: IFTRUE 47766
47764: GO 47781
47766: POP
// Say ( temp_unit , D2-Olaf-2 ) ; Kurt :
47767: LD_VAR 0 2
47771: PPUSH
47772: LD_STRING D2-Olaf-2
47774: PPUSH
47775: CALL_OW 88
47779: GO 47980
47781: LD_EXP 17
47785: DOUBLE
47786: EQUAL
47787: IFTRUE 47791
47789: GO 47826
47791: POP
// begin if kurt_is_substitute then
47792: LD_EXP 81
47796: IFFALSE 47812
// Say ( temp_unit , D2-Ku_alt-1 ) else
47798: LD_VAR 0 2
47802: PPUSH
47803: LD_STRING D2-Ku_alt-1
47805: PPUSH
47806: CALL_OW 88
47810: GO 47824
// Say ( temp_unit , D2-Ku-1 ) ;
47812: LD_VAR 0 2
47816: PPUSH
47817: LD_STRING D2-Ku-1
47819: PPUSH
47820: CALL_OW 88
// end ; Dwayne :
47824: GO 47980
47826: LD_EXP 18
47830: DOUBLE
47831: EQUAL
47832: IFTRUE 47836
47834: GO 47851
47836: POP
// Say ( temp_unit , D2-Dw-1 ) ; MarkB :
47837: LD_VAR 0 2
47841: PPUSH
47842: LD_STRING D2-Dw-1
47844: PPUSH
47845: CALL_OW 88
47849: GO 47980
47851: LD_EXP 19
47855: DOUBLE
47856: EQUAL
47857: IFTRUE 47861
47859: GO 47876
47861: POP
// Say ( temp_unit , D2-Ma-1 ) ; Aviradze :
47862: LD_VAR 0 2
47866: PPUSH
47867: LD_STRING D2-Ma-1
47869: PPUSH
47870: CALL_OW 88
47874: GO 47980
47876: LD_EXP 20
47880: DOUBLE
47881: EQUAL
47882: IFTRUE 47886
47884: GO 47913
47886: POP
// begin Say ( temp_unit , D2-Av-1 ) ;
47887: LD_VAR 0 2
47891: PPUSH
47892: LD_STRING D2-Av-1
47894: PPUSH
47895: CALL_OW 88
// Say ( Heike , D2-H-3 ) ;
47899: LD_EXP 9
47903: PPUSH
47904: LD_STRING D2-H-3
47906: PPUSH
47907: CALL_OW 88
// end ; Swansson :
47911: GO 47980
47913: LD_EXP 21
47917: DOUBLE
47918: EQUAL
47919: IFTRUE 47923
47921: GO 47938
47923: POP
// Say ( temp_unit , D2-Sw-1 ) ; else
47924: LD_VAR 0 2
47928: PPUSH
47929: LD_STRING D2-Sw-1
47931: PPUSH
47932: CALL_OW 88
47936: GO 47980
47938: POP
// begin if GetSex ( temp_unit ) = sex_male then
47939: LD_VAR 0 2
47943: PPUSH
47944: CALL_OW 258
47948: PUSH
47949: LD_INT 1
47951: EQUAL
47952: IFFALSE 47968
// Say ( temp_unit , D2-SomeM-2 ) else
47954: LD_VAR 0 2
47958: PPUSH
47959: LD_STRING D2-SomeM-2
47961: PPUSH
47962: CALL_OW 88
47966: GO 47980
// Say ( temp_unit , D2-SomeF-2 ) ;
47968: LD_VAR 0 2
47972: PPUSH
47973: LD_STRING D2-SomeF-2
47975: PPUSH
47976: CALL_OW 88
// end ; end ; DialogueOff ;
47980: CALL_OW 7
// SetSide ( scout , scout_side ) ;
47984: LD_VAR 0 7
47988: PPUSH
47989: LD_EXP 7
47993: PPUSH
47994: CALL_OW 235
// repeat wait ( 0 0$0.7 ) ;
47998: LD_INT 24
48000: PPUSH
48001: CALL_OW 67
// if IsPlaced ( scout ) then
48005: LD_VAR 0 7
48009: PPUSH
48010: CALL_OW 305
48014: IFFALSE 48119
// case GetType ( IsInUnit ( scout ) ) of unit_building :
48016: LD_VAR 0 7
48020: PPUSH
48021: CALL_OW 310
48025: PPUSH
48026: CALL_OW 247
48030: PUSH
48031: LD_INT 3
48033: DOUBLE
48034: EQUAL
48035: IFTRUE 48039
48037: GO 48051
48039: POP
// ComExitBuilding ( scout ) ; unit_vehicle :
48040: LD_VAR 0 7
48044: PPUSH
48045: CALL_OW 122
48049: GO 48119
48051: LD_INT 2
48053: DOUBLE
48054: EQUAL
48055: IFTRUE 48059
48057: GO 48071
48059: POP
// ComExitVehicle ( scout ) ; else
48060: LD_VAR 0 7
48064: PPUSH
48065: CALL_OW 121
48069: GO 48119
48071: POP
// begin if GetDistUnitXY ( scout , 143 , 117 ) > 1 then
48072: LD_VAR 0 7
48076: PPUSH
48077: LD_INT 143
48079: PPUSH
48080: LD_INT 117
48082: PPUSH
48083: CALL_OW 297
48087: PUSH
48088: LD_INT 1
48090: GREATER
48091: IFFALSE 48110
// ComMoveXY ( scout , 143 , 117 ) else
48093: LD_VAR 0 7
48097: PPUSH
48098: LD_INT 143
48100: PPUSH
48101: LD_INT 117
48103: PPUSH
48104: CALL_OW 111
48108: GO 48119
// RemoveUnit ( scout ) ;
48110: LD_VAR 0 7
48114: PPUSH
48115: CALL_OW 64
// end ; end ; if IsPlaced ( cargo_bay ) then
48119: LD_VAR 0 5
48123: PPUSH
48124: CALL_OW 305
48128: IFFALSE 48225
// if GetResourceAmountXY ( crate_hex [ 1 ] , crate_hex [ 2 ] ) > 0 then
48130: LD_VAR 0 8
48134: PUSH
48135: LD_INT 1
48137: ARRAY
48138: PPUSH
48139: LD_VAR 0 8
48143: PUSH
48144: LD_INT 2
48146: ARRAY
48147: PPUSH
48148: CALL_OW 284
48152: PUSH
48153: LD_INT 0
48155: GREATER
48156: IFFALSE 48187
// ComGet ( cargo_bay , crate_hex [ 1 ] , crate_hex [ 2 ] ) else
48158: LD_VAR 0 5
48162: PPUSH
48163: LD_VAR 0 8
48167: PUSH
48168: LD_INT 1
48170: ARRAY
48171: PPUSH
48172: LD_VAR 0 8
48176: PUSH
48177: LD_INT 2
48179: ARRAY
48180: PPUSH
48181: CALL_OW 160
48185: GO 48225
// if not IsInArea ( cargo_bay , ru_enter_area ) then
48187: LD_VAR 0 5
48191: PPUSH
48192: LD_INT 10
48194: PPUSH
48195: CALL_OW 308
48199: NOT
48200: IFFALSE 48216
// ComMoveToArea ( cargo_bay , ru_enter_area ) else
48202: LD_VAR 0 5
48206: PPUSH
48207: LD_INT 10
48209: PPUSH
48210: CALL_OW 113
48214: GO 48225
// DestroyUnit ( cargo_bay ) ;
48216: LD_VAR 0 5
48220: PPUSH
48221: CALL_OW 65
// until not IsPlaced ( scout ) and not IsPlaced ( cargo_bay ) ;
48225: LD_VAR 0 7
48229: PPUSH
48230: CALL_OW 305
48234: NOT
48235: PUSH
48236: LD_VAR 0 5
48240: PPUSH
48241: CALL_OW 305
48245: NOT
48246: AND
48247: IFFALSE 47998
// wait ( Rand ( 5 5$0 , 6 6$0 ) ) ;
48249: LD_INT 10500
48251: PPUSH
48252: LD_INT 12600
48254: PPUSH
48255: CALL_OW 12
48259: PPUSH
48260: CALL_OW 67
// SetDir ( scout , 5 ) ;
48264: LD_VAR 0 7
48268: PPUSH
48269: LD_INT 5
48271: PPUSH
48272: CALL_OW 233
// i = 1 ;
48276: LD_ADDR_VAR 0 1
48280: PUSH
48281: LD_INT 1
48283: ST_TO_ADDR
// while not IsPlaced ( scout ) do
48284: LD_VAR 0 7
48288: PPUSH
48289: CALL_OW 305
48293: NOT
48294: IFFALSE 48342
// begin PlaceUnitXYR ( scout , 143 , 117 , i , false ) ;
48296: LD_VAR 0 7
48300: PPUSH
48301: LD_INT 143
48303: PPUSH
48304: LD_INT 117
48306: PPUSH
48307: LD_VAR 0 1
48311: PPUSH
48312: LD_INT 0
48314: PPUSH
48315: CALL_OW 50
// i = i + 1 ;
48319: LD_ADDR_VAR 0 1
48323: PUSH
48324: LD_VAR 0 1
48328: PUSH
48329: LD_INT 1
48331: PLUS
48332: ST_TO_ADDR
// wait ( 0 0$2 ) ;
48333: LD_INT 70
48335: PPUSH
48336: CALL_OW 67
// end ;
48340: GO 48284
// while not See ( you , scout ) do
48342: LD_EXP 2
48346: PPUSH
48347: LD_VAR 0 7
48351: PPUSH
48352: CALL_OW 292
48356: NOT
48357: IFFALSE 48429
// begin wait ( 0 0$1 ) ;
48359: LD_INT 35
48361: PPUSH
48362: CALL_OW 67
// temp_unit = NearestUnitToUnit ( FilterAllUnits ( [ f_side , you ] ) , scout ) ;
48366: LD_ADDR_VAR 0 2
48370: PUSH
48371: LD_INT 22
48373: PUSH
48374: LD_EXP 2
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PPUSH
48383: CALL_OW 69
48387: PPUSH
48388: LD_VAR 0 7
48392: PPUSH
48393: CALL_OW 74
48397: ST_TO_ADDR
// ComMoveXY ( scout , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
48398: LD_VAR 0 7
48402: PPUSH
48403: LD_VAR 0 2
48407: PPUSH
48408: CALL_OW 250
48412: PPUSH
48413: LD_VAR 0 2
48417: PPUSH
48418: CALL_OW 251
48422: PPUSH
48423: CALL_OW 111
// end ;
48427: GO 48342
// CenterOnUnits ( scout ) ;
48429: LD_VAR 0 7
48433: PPUSH
48434: CALL_OW 85
// SetSide ( scout , you ) ;
48438: LD_VAR 0 7
48442: PPUSH
48443: LD_EXP 2
48447: PPUSH
48448: CALL_OW 235
// ComStop ( scout ) ;
48452: LD_VAR 0 7
48456: PPUSH
48457: CALL_OW 141
// DialogueOn ;
48461: CALL_OW 6
// Say ( Heike , D3-H-1 ) ;
48465: LD_EXP 9
48469: PPUSH
48470: LD_STRING D3-H-1
48472: PPUSH
48473: CALL_OW 88
// temp_unit = scout ;
48477: LD_ADDR_VAR 0 2
48481: PUSH
48482: LD_VAR 0 7
48486: ST_TO_ADDR
// case temp_unit of Sonya :
48487: LD_VAR 0 2
48491: PUSH
48492: LD_EXP 10
48496: DOUBLE
48497: EQUAL
48498: IFTRUE 48502
48500: GO 48517
48502: POP
// Say ( temp_unit , D3-So-1 ) ; Oswald :
48503: LD_VAR 0 2
48507: PPUSH
48508: LD_STRING D3-So-1
48510: PPUSH
48511: CALL_OW 88
48515: GO 48947
48517: LD_EXP 11
48521: DOUBLE
48522: EQUAL
48523: IFTRUE 48527
48525: GO 48562
48527: POP
// begin if oswald_is_substitute then
48528: LD_EXP 80
48532: IFFALSE 48548
// Say ( temp_unit , D3-Os_alt-1 ) else
48534: LD_VAR 0 2
48538: PPUSH
48539: LD_STRING D3-Os_alt-1
48541: PPUSH
48542: CALL_OW 88
48546: GO 48560
// Say ( temp_unit , D3-Os-1 ) ;
48548: LD_VAR 0 2
48552: PPUSH
48553: LD_STRING D3-Os-1
48555: PPUSH
48556: CALL_OW 88
// end ; Ralph :
48560: GO 48947
48562: LD_EXP 12
48566: DOUBLE
48567: EQUAL
48568: IFTRUE 48572
48570: GO 48636
48572: POP
// begin Say ( temp_unit , D3-Ra-1 ) ;
48573: LD_VAR 0 2
48577: PPUSH
48578: LD_STRING D3-Ra-1
48580: PPUSH
48581: CALL_OW 88
// if IsOk ( Sonya ) then
48585: LD_EXP 10
48589: PPUSH
48590: CALL_OW 302
48594: IFFALSE 48610
// Say ( Sonya , D3-So-2a ) else
48596: LD_EXP 10
48600: PPUSH
48601: LD_STRING D3-So-2a
48603: PPUSH
48604: CALL_OW 88
48608: GO 48622
// Say ( Heike , D3-H-2a ) ;
48610: LD_EXP 9
48614: PPUSH
48615: LD_STRING D3-H-2a
48617: PPUSH
48618: CALL_OW 88
// Say ( Ralph , D3-Ra-2 ) ;
48622: LD_EXP 12
48626: PPUSH
48627: LD_STRING D3-Ra-2
48629: PPUSH
48630: CALL_OW 88
// end ; Kowalski :
48634: GO 48947
48636: LD_EXP 13
48640: DOUBLE
48641: EQUAL
48642: IFTRUE 48646
48644: GO 48661
48646: POP
// Say ( temp_unit , D3-Ko-1 ) ; Evelyn :
48647: LD_VAR 0 2
48651: PPUSH
48652: LD_STRING D3-Ko-1
48654: PPUSH
48655: CALL_OW 88
48659: GO 48947
48661: LD_EXP 14
48665: DOUBLE
48666: EQUAL
48667: IFTRUE 48671
48669: GO 48686
48671: POP
// Say ( temp_unit , D3-Ev-1 ) ; Suze :
48672: LD_VAR 0 2
48676: PPUSH
48677: LD_STRING D3-Ev-1
48679: PPUSH
48680: CALL_OW 88
48684: GO 48947
48686: LD_EXP 15
48690: DOUBLE
48691: EQUAL
48692: IFTRUE 48696
48694: GO 48711
48696: POP
// Say ( temp_unit , D3-Su-1 ) ; Olaf :
48697: LD_VAR 0 2
48701: PPUSH
48702: LD_STRING D3-Su-1
48704: PPUSH
48705: CALL_OW 88
48709: GO 48947
48711: LD_EXP 16
48715: DOUBLE
48716: EQUAL
48717: IFTRUE 48721
48719: GO 48736
48721: POP
// Say ( temp_unit , D3-Olaf-1 ) ; Kurt :
48722: LD_VAR 0 2
48726: PPUSH
48727: LD_STRING D3-Olaf-1
48729: PPUSH
48730: CALL_OW 88
48734: GO 48947
48736: LD_EXP 17
48740: DOUBLE
48741: EQUAL
48742: IFTRUE 48746
48744: GO 48781
48746: POP
// begin if kurt_is_substitute then
48747: LD_EXP 81
48751: IFFALSE 48767
// Say ( temp_unit , D3-Ku_alt-1 ) else
48753: LD_VAR 0 2
48757: PPUSH
48758: LD_STRING D3-Ku_alt-1
48760: PPUSH
48761: CALL_OW 88
48765: GO 48779
// Say ( temp_unit , D3-Ku-1 ) ;
48767: LD_VAR 0 2
48771: PPUSH
48772: LD_STRING D3-Ku-1
48774: PPUSH
48775: CALL_OW 88
// end ; Dwayne :
48779: GO 48947
48781: LD_EXP 18
48785: DOUBLE
48786: EQUAL
48787: IFTRUE 48791
48789: GO 48806
48791: POP
// Say ( temp_unit , D3-Dw-1 ) ; MarkB :
48792: LD_VAR 0 2
48796: PPUSH
48797: LD_STRING D3-Dw-1
48799: PPUSH
48800: CALL_OW 88
48804: GO 48947
48806: LD_EXP 19
48810: DOUBLE
48811: EQUAL
48812: IFTRUE 48816
48814: GO 48831
48816: POP
// Say ( temp_unit , D3-Ma-1 ) ; Aviradze :
48817: LD_VAR 0 2
48821: PPUSH
48822: LD_STRING D3-Ma-1
48824: PPUSH
48825: CALL_OW 88
48829: GO 48947
48831: LD_EXP 20
48835: DOUBLE
48836: EQUAL
48837: IFTRUE 48841
48839: GO 48880
48841: POP
// begin Say ( temp_unit , D3-Av-1 ) ;
48842: LD_VAR 0 2
48846: PPUSH
48847: LD_STRING D3-Av-1
48849: PPUSH
48850: CALL_OW 88
// Say ( Heike , D3-H-2b ) ;
48854: LD_EXP 9
48858: PPUSH
48859: LD_STRING D3-H-2b
48861: PPUSH
48862: CALL_OW 88
// Say ( temp_unit , D3-Av-2 ) ;
48866: LD_VAR 0 2
48870: PPUSH
48871: LD_STRING D3-Av-2
48873: PPUSH
48874: CALL_OW 88
// end ; Swansson :
48878: GO 48947
48880: LD_EXP 21
48884: DOUBLE
48885: EQUAL
48886: IFTRUE 48890
48888: GO 48905
48890: POP
// Say ( temp_unit , D3-Sw-1 ) ; else
48891: LD_VAR 0 2
48895: PPUSH
48896: LD_STRING D3-Sw-1
48898: PPUSH
48899: CALL_OW 88
48903: GO 48947
48905: POP
// begin if GetSex ( temp_unit ) = sex_male then
48906: LD_VAR 0 2
48910: PPUSH
48911: CALL_OW 258
48915: PUSH
48916: LD_INT 1
48918: EQUAL
48919: IFFALSE 48935
// Say ( temp_unit , D3-SomeM-1 ) else
48921: LD_VAR 0 2
48925: PPUSH
48926: LD_STRING D3-SomeM-1
48928: PPUSH
48929: CALL_OW 88
48933: GO 48947
// Say ( temp_unit , D3-SomeF-1 ) ;
48935: LD_VAR 0 2
48939: PPUSH
48940: LD_STRING D3-SomeF-1
48942: PPUSH
48943: CALL_OW 88
// end ; end ; if SeeGreyArea ( you , Ru_base ) then
48947: LD_EXP 2
48951: PPUSH
48952: LD_INT 3
48954: PPUSH
48955: CALL_OW 452
48959: IFFALSE 48975
// begin Say ( Heike , D3-H-a-2 ) ;
48961: LD_EXP 9
48965: PPUSH
48966: LD_STRING D3-H-a-2
48968: PPUSH
48969: CALL_OW 88
// end else
48973: GO 48987
// begin Say ( Heike , D3-H-b-2 ) ;
48975: LD_EXP 9
48979: PPUSH
48980: LD_STRING D3-H-b-2
48982: PPUSH
48983: CALL_OW 88
// end ; case temp_unit of Sonya :
48987: LD_VAR 0 2
48991: PUSH
48992: LD_EXP 10
48996: DOUBLE
48997: EQUAL
48998: IFTRUE 49002
49000: GO 49017
49002: POP
// Say ( temp_unit , D3-So-2 ) ; Oswald :
49003: LD_VAR 0 2
49007: PPUSH
49008: LD_STRING D3-So-2
49010: PPUSH
49011: CALL_OW 88
49015: GO 49374
49017: LD_EXP 11
49021: DOUBLE
49022: EQUAL
49023: IFTRUE 49027
49025: GO 49062
49027: POP
// begin if oswald_is_substitute then
49028: LD_EXP 80
49032: IFFALSE 49048
// Say ( temp_unit , D3-Os_alt-2 ) else
49034: LD_VAR 0 2
49038: PPUSH
49039: LD_STRING D3-Os_alt-2
49041: PPUSH
49042: CALL_OW 88
49046: GO 49060
// Say ( temp_unit , D3-Os-2 ) ;
49048: LD_VAR 0 2
49052: PPUSH
49053: LD_STRING D3-Os-2
49055: PPUSH
49056: CALL_OW 88
// end ; Ralph :
49060: GO 49374
49062: LD_EXP 12
49066: DOUBLE
49067: EQUAL
49068: IFTRUE 49072
49070: GO 49087
49072: POP
// Say ( temp_unit , D3-Ra-3 ) ; Kowalski :
49073: LD_VAR 0 2
49077: PPUSH
49078: LD_STRING D3-Ra-3
49080: PPUSH
49081: CALL_OW 88
49085: GO 49374
49087: LD_EXP 13
49091: DOUBLE
49092: EQUAL
49093: IFTRUE 49097
49095: GO 49112
49097: POP
// Say ( temp_unit , D3-Ko-2 ) ; Evelyn :
49098: LD_VAR 0 2
49102: PPUSH
49103: LD_STRING D3-Ko-2
49105: PPUSH
49106: CALL_OW 88
49110: GO 49374
49112: LD_EXP 14
49116: DOUBLE
49117: EQUAL
49118: IFTRUE 49122
49120: GO 49137
49122: POP
// Say ( temp_unit , D3-Ev-2 ) ; Suze :
49123: LD_VAR 0 2
49127: PPUSH
49128: LD_STRING D3-Ev-2
49130: PPUSH
49131: CALL_OW 88
49135: GO 49374
49137: LD_EXP 15
49141: DOUBLE
49142: EQUAL
49143: IFTRUE 49147
49145: GO 49162
49147: POP
// Say ( temp_unit , D3-Su-2 ) ; Olaf :
49148: LD_VAR 0 2
49152: PPUSH
49153: LD_STRING D3-Su-2
49155: PPUSH
49156: CALL_OW 88
49160: GO 49374
49162: LD_EXP 16
49166: DOUBLE
49167: EQUAL
49168: IFTRUE 49172
49170: GO 49187
49172: POP
// Say ( temp_unit , D3-Olaf-2 ) ; Kurt :
49173: LD_VAR 0 2
49177: PPUSH
49178: LD_STRING D3-Olaf-2
49180: PPUSH
49181: CALL_OW 88
49185: GO 49374
49187: LD_EXP 17
49191: DOUBLE
49192: EQUAL
49193: IFTRUE 49197
49195: GO 49232
49197: POP
// begin if kurt_is_substitute then
49198: LD_EXP 81
49202: IFFALSE 49218
// Say ( temp_unit , D3-Ku_alt-2 ) else
49204: LD_VAR 0 2
49208: PPUSH
49209: LD_STRING D3-Ku_alt-2
49211: PPUSH
49212: CALL_OW 88
49216: GO 49230
// Say ( temp_unit , D3-Ku-2 ) ;
49218: LD_VAR 0 2
49222: PPUSH
49223: LD_STRING D3-Ku-2
49225: PPUSH
49226: CALL_OW 88
// end ; Dwayne :
49230: GO 49374
49232: LD_EXP 18
49236: DOUBLE
49237: EQUAL
49238: IFTRUE 49242
49240: GO 49257
49242: POP
// Say ( temp_unit , D3-Dw-2 ) ; MarkB :
49243: LD_VAR 0 2
49247: PPUSH
49248: LD_STRING D3-Dw-2
49250: PPUSH
49251: CALL_OW 88
49255: GO 49374
49257: LD_EXP 19
49261: DOUBLE
49262: EQUAL
49263: IFTRUE 49267
49265: GO 49282
49267: POP
// Say ( temp_unit , D3-Ma-2 ) ; Aviradze :
49268: LD_VAR 0 2
49272: PPUSH
49273: LD_STRING D3-Ma-2
49275: PPUSH
49276: CALL_OW 88
49280: GO 49374
49282: LD_EXP 20
49286: DOUBLE
49287: EQUAL
49288: IFTRUE 49292
49290: GO 49307
49292: POP
// Say ( temp_unit , D3-Av-3 ) ; Swansson :
49293: LD_VAR 0 2
49297: PPUSH
49298: LD_STRING D3-Av-3
49300: PPUSH
49301: CALL_OW 88
49305: GO 49374
49307: LD_EXP 21
49311: DOUBLE
49312: EQUAL
49313: IFTRUE 49317
49315: GO 49332
49317: POP
// Say ( temp_unit , D3-Sw-2 ) ; else
49318: LD_VAR 0 2
49322: PPUSH
49323: LD_STRING D3-Sw-2
49325: PPUSH
49326: CALL_OW 88
49330: GO 49374
49332: POP
// begin if GetSex ( temp_unit ) = sex_male then
49333: LD_VAR 0 2
49337: PPUSH
49338: CALL_OW 258
49342: PUSH
49343: LD_INT 1
49345: EQUAL
49346: IFFALSE 49362
// Say ( temp_unit , D3-SomeM-2 ) else
49348: LD_VAR 0 2
49352: PPUSH
49353: LD_STRING D3-SomeM-2
49355: PPUSH
49356: CALL_OW 88
49360: GO 49374
// Say ( temp_unit , D3-SomeF-2 ) ;
49362: LD_VAR 0 2
49366: PPUSH
49367: LD_STRING D3-SomeF-2
49369: PPUSH
49370: CALL_OW 88
// end ; end ; Say ( Heike , D3-H-3 ) ;
49374: LD_EXP 9
49378: PPUSH
49379: LD_STRING D3-H-3
49381: PPUSH
49382: CALL_OW 88
// temp_list = UnitFilter ( [ Sonya , Ralph , Kowalski , Suze , Olaf , Dwayne ] , [ f_ok ] ) ;
49386: LD_ADDR_VAR 0 3
49390: PUSH
49391: LD_EXP 10
49395: PUSH
49396: LD_EXP 12
49400: PUSH
49401: LD_EXP 13
49405: PUSH
49406: LD_EXP 15
49410: PUSH
49411: LD_EXP 16
49415: PUSH
49416: LD_EXP 18
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: PPUSH
49429: LD_INT 50
49431: PUSH
49432: EMPTY
49433: LIST
49434: PPUSH
49435: CALL_OW 72
49439: ST_TO_ADDR
// if temp_list > 0 then
49440: LD_VAR 0 3
49444: PUSH
49445: LD_INT 0
49447: GREATER
49448: IFFALSE 49679
// begin temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
49450: LD_ADDR_VAR 0 2
49454: PUSH
49455: LD_VAR 0 3
49459: PUSH
49460: LD_INT 1
49462: PPUSH
49463: LD_VAR 0 3
49467: PPUSH
49468: CALL_OW 12
49472: ARRAY
49473: ST_TO_ADDR
// case temp_unit of Sonya :
49474: LD_VAR 0 2
49478: PUSH
49479: LD_EXP 10
49483: DOUBLE
49484: EQUAL
49485: IFTRUE 49489
49487: GO 49504
49489: POP
// Say ( temp_unit , D3-So-3 ) ; Ralph :
49490: LD_VAR 0 2
49494: PPUSH
49495: LD_STRING D3-So-3
49497: PPUSH
49498: CALL_OW 88
49502: GO 49630
49504: LD_EXP 12
49508: DOUBLE
49509: EQUAL
49510: IFTRUE 49514
49512: GO 49529
49514: POP
// Say ( temp_unit , D3-Ra-4 ) ; Kowalski :
49515: LD_VAR 0 2
49519: PPUSH
49520: LD_STRING D3-Ra-4
49522: PPUSH
49523: CALL_OW 88
49527: GO 49630
49529: LD_EXP 13
49533: DOUBLE
49534: EQUAL
49535: IFTRUE 49539
49537: GO 49554
49539: POP
// Say ( temp_unit , D3-Ko-3 ) ; Suze :
49540: LD_VAR 0 2
49544: PPUSH
49545: LD_STRING D3-Ko-3
49547: PPUSH
49548: CALL_OW 88
49552: GO 49630
49554: LD_EXP 15
49558: DOUBLE
49559: EQUAL
49560: IFTRUE 49564
49562: GO 49579
49564: POP
// Say ( temp_unit , D3-Su-3 ) ; Olaf :
49565: LD_VAR 0 2
49569: PPUSH
49570: LD_STRING D3-Su-3
49572: PPUSH
49573: CALL_OW 88
49577: GO 49630
49579: LD_EXP 16
49583: DOUBLE
49584: EQUAL
49585: IFTRUE 49589
49587: GO 49604
49589: POP
// Say ( temp_unit , D3-Olaf-3 ) ; Dwayne :
49590: LD_VAR 0 2
49594: PPUSH
49595: LD_STRING D3-Olaf-3
49597: PPUSH
49598: CALL_OW 88
49602: GO 49630
49604: LD_EXP 18
49608: DOUBLE
49609: EQUAL
49610: IFTRUE 49614
49612: GO 49629
49614: POP
// Say ( temp_unit , D3-Dw-3 ) ; end ;
49615: LD_VAR 0 2
49619: PPUSH
49620: LD_STRING D3-Dw-3
49622: PPUSH
49623: CALL_OW 88
49627: GO 49630
49629: POP
// if temp_unit in [ Sonya , Olaf ] then
49630: LD_VAR 0 2
49634: PUSH
49635: LD_EXP 10
49639: PUSH
49640: LD_EXP 16
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: IN
49649: IFFALSE 49665
// Say ( Heike , D3-H-a-4 ) else
49651: LD_EXP 9
49655: PPUSH
49656: LD_STRING D3-H-a-4
49658: PPUSH
49659: CALL_OW 88
49663: GO 49677
// Say ( Heike , D3-H-b-4 ) ;
49665: LD_EXP 9
49669: PPUSH
49670: LD_STRING D3-H-b-4
49672: PPUSH
49673: CALL_OW 88
// end else
49677: GO 49691
// begin Say ( Heike , D3-H-c-4 ) ;
49679: LD_EXP 9
49683: PPUSH
49684: LD_STRING D3-H-c-4
49686: PPUSH
49687: CALL_OW 88
// end ; Say ( Heike , D3-H-5 ) ;
49691: LD_EXP 9
49695: PPUSH
49696: LD_STRING D3-H-5
49698: PPUSH
49699: CALL_OW 88
// if yashin_alive then
49703: LD_EXP 85
49707: IFFALSE 50108
// begin case temp_unit of Sonya :
49709: LD_VAR 0 2
49713: PUSH
49714: LD_EXP 10
49718: DOUBLE
49719: EQUAL
49720: IFTRUE 49724
49722: GO 49739
49724: POP
// Say ( temp_unit , D3-So-a-4 ) ; Oswald :
49725: LD_VAR 0 2
49729: PPUSH
49730: LD_STRING D3-So-a-4
49732: PPUSH
49733: CALL_OW 88
49737: GO 50096
49739: LD_EXP 11
49743: DOUBLE
49744: EQUAL
49745: IFTRUE 49749
49747: GO 49784
49749: POP
// begin if oswald_is_substitute then
49750: LD_EXP 80
49754: IFFALSE 49770
// Say ( temp_unit , D3-Os_alt-a-3 ) else
49756: LD_VAR 0 2
49760: PPUSH
49761: LD_STRING D3-Os_alt-a-3
49763: PPUSH
49764: CALL_OW 88
49768: GO 49782
// Say ( temp_unit , D3-Os-a-3 ) ;
49770: LD_VAR 0 2
49774: PPUSH
49775: LD_STRING D3-Os-a-3
49777: PPUSH
49778: CALL_OW 88
// end ; Ralph :
49782: GO 50096
49784: LD_EXP 12
49788: DOUBLE
49789: EQUAL
49790: IFTRUE 49794
49792: GO 49809
49794: POP
// Say ( temp_unit , D3-Ra-a-5 ) ; Kowalski :
49795: LD_VAR 0 2
49799: PPUSH
49800: LD_STRING D3-Ra-a-5
49802: PPUSH
49803: CALL_OW 88
49807: GO 50096
49809: LD_EXP 13
49813: DOUBLE
49814: EQUAL
49815: IFTRUE 49819
49817: GO 49834
49819: POP
// Say ( temp_unit , D3-Ko-a-4 ) ; Evelyn :
49820: LD_VAR 0 2
49824: PPUSH
49825: LD_STRING D3-Ko-a-4
49827: PPUSH
49828: CALL_OW 88
49832: GO 50096
49834: LD_EXP 14
49838: DOUBLE
49839: EQUAL
49840: IFTRUE 49844
49842: GO 49859
49844: POP
// Say ( temp_unit , D3-Ev-a-3 ) ; Suze :
49845: LD_VAR 0 2
49849: PPUSH
49850: LD_STRING D3-Ev-a-3
49852: PPUSH
49853: CALL_OW 88
49857: GO 50096
49859: LD_EXP 15
49863: DOUBLE
49864: EQUAL
49865: IFTRUE 49869
49867: GO 49884
49869: POP
// Say ( temp_unit , D3-Su-a-4 ) ; Olaf :
49870: LD_VAR 0 2
49874: PPUSH
49875: LD_STRING D3-Su-a-4
49877: PPUSH
49878: CALL_OW 88
49882: GO 50096
49884: LD_EXP 16
49888: DOUBLE
49889: EQUAL
49890: IFTRUE 49894
49892: GO 49909
49894: POP
// Say ( temp_unit , D3-Olaf-a-4 ) ; Kurt :
49895: LD_VAR 0 2
49899: PPUSH
49900: LD_STRING D3-Olaf-a-4
49902: PPUSH
49903: CALL_OW 88
49907: GO 50096
49909: LD_EXP 17
49913: DOUBLE
49914: EQUAL
49915: IFTRUE 49919
49917: GO 49954
49919: POP
// begin if kurt_is_substitute then
49920: LD_EXP 81
49924: IFFALSE 49940
// Say ( temp_unit , D3-Ku_alt-a-3 ) else
49926: LD_VAR 0 2
49930: PPUSH
49931: LD_STRING D3-Ku_alt-a-3
49933: PPUSH
49934: CALL_OW 88
49938: GO 49952
// Say ( temp_unit , D3-Ku-a-3 ) ;
49940: LD_VAR 0 2
49944: PPUSH
49945: LD_STRING D3-Ku-a-3
49947: PPUSH
49948: CALL_OW 88
// end ; Dwayne :
49952: GO 50096
49954: LD_EXP 18
49958: DOUBLE
49959: EQUAL
49960: IFTRUE 49964
49962: GO 49979
49964: POP
// Say ( temp_unit , D3-Dw-a-4 ) ; MarkB :
49965: LD_VAR 0 2
49969: PPUSH
49970: LD_STRING D3-Dw-a-4
49972: PPUSH
49973: CALL_OW 88
49977: GO 50096
49979: LD_EXP 19
49983: DOUBLE
49984: EQUAL
49985: IFTRUE 49989
49987: GO 50004
49989: POP
// Say ( temp_unit , D3-Ma-a-3 ) ; Aviradze :
49990: LD_VAR 0 2
49994: PPUSH
49995: LD_STRING D3-Ma-a-3
49997: PPUSH
49998: CALL_OW 88
50002: GO 50096
50004: LD_EXP 20
50008: DOUBLE
50009: EQUAL
50010: IFTRUE 50014
50012: GO 50029
50014: POP
// Say ( temp_unit , D3-Av-a-4 ) ; Swansson :
50015: LD_VAR 0 2
50019: PPUSH
50020: LD_STRING D3-Av-a-4
50022: PPUSH
50023: CALL_OW 88
50027: GO 50096
50029: LD_EXP 21
50033: DOUBLE
50034: EQUAL
50035: IFTRUE 50039
50037: GO 50054
50039: POP
// Say ( temp_unit , D3-Sw-a-3 ) ; else
50040: LD_VAR 0 2
50044: PPUSH
50045: LD_STRING D3-Sw-a-3
50047: PPUSH
50048: CALL_OW 88
50052: GO 50096
50054: POP
// begin if GetSex ( temp_unit ) = sex_male then
50055: LD_VAR 0 2
50059: PPUSH
50060: CALL_OW 258
50064: PUSH
50065: LD_INT 1
50067: EQUAL
50068: IFFALSE 50084
// Say ( temp_unit , D3-SomeM-a-3 ) else
50070: LD_VAR 0 2
50074: PPUSH
50075: LD_STRING D3-SomeM-a-3
50077: PPUSH
50078: CALL_OW 88
50082: GO 50096
// Say ( temp_unit , D3-SomeF-a-3 ) ;
50084: LD_VAR 0 2
50088: PPUSH
50089: LD_STRING D3-SomeF-a-3
50091: PPUSH
50092: CALL_OW 88
// end ; end ; Say ( Heike , D3-H-a-6 ) ;
50096: LD_EXP 9
50100: PPUSH
50101: LD_STRING D3-H-a-6
50103: PPUSH
50104: CALL_OW 88
// end ; DialogueOff ;
50108: CALL_OW 7
// wait ( 0 0$0.2 ) ;
50112: LD_INT 7
50114: PPUSH
50115: CALL_OW 67
// ChangeMissionObjectives ( M2 ) ;
50119: LD_STRING M2
50121: PPUSH
50122: CALL_OW 337
// scout_event_over = true ;
50126: LD_ADDR_EXP 92
50130: PUSH
50131: LD_INT 1
50133: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = russians_allowed_to_attack_gensher_time + tick ;
50134: LD_ADDR_EXP 93
50138: PUSH
50139: LD_EXP 93
50143: PUSH
50144: LD_OWVAR 1
50148: PLUS
50149: ST_TO_ADDR
// end ;
50150: PPOPN 8
50152: END
// every 0 0$1 + 0 0$0.6 do var i ; var ignore_yellow_list , ignore_red_list ;
50153: GO 50155
50155: DISABLE
50156: LD_INT 0
50158: PPUSH
50159: PPUSH
50160: PPUSH
// begin ignore_yellow_list = [ ] ;
50161: LD_ADDR_VAR 0 2
50165: PUSH
50166: EMPTY
50167: ST_TO_ADDR
// ignore_red_list = [ ] ;
50168: LD_ADDR_VAR 0 3
50172: PUSH
50173: EMPTY
50174: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50175: LD_INT 35
50177: PPUSH
50178: CALL_OW 67
// if game_phase > 1 then
50182: LD_EXP 88
50186: PUSH
50187: LD_INT 1
50189: GREATER
50190: IFFALSE 50194
// exit ;
50192: GO 50574
// if ContactTime ( [ you_alt , russians ] ) >= 0 0$8 then
50194: LD_EXP 5
50198: PUSH
50199: LD_EXP 3
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PPUSH
50208: CALL_OW 462
50212: PUSH
50213: LD_INT 280
50215: GREATEREQUAL
50216: IFFALSE 50234
// begin ignore_yellow_list = [ ] ;
50218: LD_ADDR_VAR 0 2
50222: PUSH
50223: EMPTY
50224: ST_TO_ADDR
// ignore_red_list = [ ] ;
50225: LD_ADDR_VAR 0 3
50229: PUSH
50230: EMPTY
50231: ST_TO_ADDR
// continue ;
50232: GO 50175
// end ; for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_human ] ] ) do
50234: LD_ADDR_VAR 0 1
50238: PUSH
50239: LD_INT 22
50241: PUSH
50242: LD_EXP 5
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 21
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PPUSH
50265: CALL_OW 69
50269: PUSH
50270: FOR_IN
50271: IFFALSE 50394
// if GetLives ( i ) <= 250 then
50273: LD_VAR 0 1
50277: PPUSH
50278: CALL_OW 256
50282: PUSH
50283: LD_INT 250
50285: LESSEQUAL
50286: IFFALSE 50333
// begin if not i in ignore_red_list then
50288: LD_VAR 0 1
50292: PUSH
50293: LD_VAR 0 3
50297: IN
50298: NOT
50299: IFFALSE 50331
// begin russian_interference_points = russian_interference_points + 1 ;
50301: LD_ADDR_EXP 96
50305: PUSH
50306: LD_EXP 96
50310: PUSH
50311: LD_INT 1
50313: PLUS
50314: ST_TO_ADDR
// ignore_red_list = ignore_red_list ^ i ;
50315: LD_ADDR_VAR 0 3
50319: PUSH
50320: LD_VAR 0 3
50324: PUSH
50325: LD_VAR 0 1
50329: ADD
50330: ST_TO_ADDR
// end ; end else
50331: GO 50392
// if i in ai_heal_these_humans [ 2 ] then
50333: LD_VAR 0 1
50337: PUSH
50338: LD_EXP 43
50342: PUSH
50343: LD_INT 2
50345: ARRAY
50346: IN
50347: IFFALSE 50392
// begin if not i in ignore_yellow_list then
50349: LD_VAR 0 1
50353: PUSH
50354: LD_VAR 0 2
50358: IN
50359: NOT
50360: IFFALSE 50392
// begin russian_interference_points = russian_interference_points + 1 ;
50362: LD_ADDR_EXP 96
50366: PUSH
50367: LD_EXP 96
50371: PUSH
50372: LD_INT 1
50374: PLUS
50375: ST_TO_ADDR
// ignore_yellow_list = ignore_yellow_list ^ i ;
50376: LD_ADDR_VAR 0 2
50380: PUSH
50381: LD_VAR 0 2
50385: PUSH
50386: LD_VAR 0 1
50390: ADD
50391: ST_TO_ADDR
// end ; end ;
50392: GO 50270
50394: POP
50395: POP
// for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_building ] ] ) do
50396: LD_ADDR_VAR 0 1
50400: PUSH
50401: LD_INT 22
50403: PUSH
50404: LD_EXP 5
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 21
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PPUSH
50427: CALL_OW 69
50431: PUSH
50432: FOR_IN
50433: IFFALSE 50568
// case GetLives ( i ) of 1 .. 250 :
50435: LD_VAR 0 1
50439: PPUSH
50440: CALL_OW 256
50444: PUSH
50445: LD_INT 1
50447: DOUBLE
50448: GREATEREQUAL
50449: IFFALSE 50457
50451: LD_INT 250
50453: DOUBLE
50454: LESSEQUAL
50455: IFTRUE 50459
50457: GO 50505
50459: POP
// begin if not i in ignore_red_list then
50460: LD_VAR 0 1
50464: PUSH
50465: LD_VAR 0 3
50469: IN
50470: NOT
50471: IFFALSE 50503
// begin russian_interference_points = russian_interference_points + 1 ;
50473: LD_ADDR_EXP 96
50477: PUSH
50478: LD_EXP 96
50482: PUSH
50483: LD_INT 1
50485: PLUS
50486: ST_TO_ADDR
// ignore_red_list = ignore_red_list ^ i ;
50487: LD_ADDR_VAR 0 3
50491: PUSH
50492: LD_VAR 0 3
50496: PUSH
50497: LD_VAR 0 1
50501: ADD
50502: ST_TO_ADDR
// end ; end ; 1 .. 500 :
50503: GO 50566
50505: LD_INT 1
50507: DOUBLE
50508: GREATEREQUAL
50509: IFFALSE 50517
50511: LD_INT 500
50513: DOUBLE
50514: LESSEQUAL
50515: IFTRUE 50519
50517: GO 50565
50519: POP
// begin if not i in ignore_yellow_list then
50520: LD_VAR 0 1
50524: PUSH
50525: LD_VAR 0 2
50529: IN
50530: NOT
50531: IFFALSE 50563
// begin russian_interference_points = russian_interference_points + 1 ;
50533: LD_ADDR_EXP 96
50537: PUSH
50538: LD_EXP 96
50542: PUSH
50543: LD_INT 1
50545: PLUS
50546: ST_TO_ADDR
// ignore_yellow_list = ignore_yellow_list ^ i ;
50547: LD_ADDR_VAR 0 2
50551: PUSH
50552: LD_VAR 0 2
50556: PUSH
50557: LD_VAR 0 1
50561: ADD
50562: ST_TO_ADDR
// end ; end ; end ;
50563: GO 50566
50565: POP
50566: GO 50432
50568: POP
50569: POP
// until false ;
50570: LD_INT 0
50572: IFFALSE 50175
// end ;
50574: PPOPN 3
50576: END
// every 0 0$1 + 0 0$0.3 do var temp_list , hex , time , i ; var hex_list_before , hex_list_after ;
50577: GO 50579
50579: DISABLE
50580: LD_INT 0
50582: PPUSH
50583: PPUSH
50584: PPUSH
50585: PPUSH
50586: PPUSH
50587: PPUSH
// begin time = Rand ( 20 20$0 , 23 23$0 ) ;
50588: LD_ADDR_VAR 0 3
50592: PUSH
50593: LD_INT 42000
50595: PPUSH
50596: LD_INT 48300
50598: PPUSH
50599: CALL_OW 12
50603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50604: LD_INT 35
50606: PPUSH
50607: CALL_OW 67
// time = time - 0 0$1 ;
50611: LD_ADDR_VAR 0 3
50615: PUSH
50616: LD_VAR 0 3
50620: PUSH
50621: LD_INT 35
50623: MINUS
50624: ST_TO_ADDR
// until time <= 0 0$0 or not 3 in ai_bases ;
50625: LD_VAR 0 3
50629: PUSH
50630: LD_INT 0
50632: LESSEQUAL
50633: PUSH
50634: LD_INT 3
50636: PUSH
50637: LD_EXP 58
50641: IN
50642: NOT
50643: OR
50644: IFFALSE 50604
// if difficulty <= 2 and 3 in ai_bases then
50646: LD_OWVAR 67
50650: PUSH
50651: LD_INT 2
50653: LESSEQUAL
50654: PUSH
50655: LD_INT 3
50657: PUSH
50658: LD_EXP 58
50662: IN
50663: AND
50664: IFFALSE 50673
// wait ( 4 4$0 ) ;
50666: LD_INT 8400
50668: PPUSH
50669: CALL_OW 67
// if difficulty = 1 and 3 in ai_bases then
50673: LD_OWVAR 67
50677: PUSH
50678: LD_INT 1
50680: EQUAL
50681: PUSH
50682: LD_INT 3
50684: PUSH
50685: LD_EXP 58
50689: IN
50690: AND
50691: IFFALSE 50700
// wait ( 4 4$0 ) ;
50693: LD_INT 8400
50695: PPUSH
50696: CALL_OW 67
// while ( ai_vehicles_attack [ 3 ] > 0 or ai_attacking_scientists [ 3 ] > 0 or ai_attacking_soldiers [ 3 ] > 0 ) and russian_attack_strategy <> 1 and 3 in ai_bases do
50700: LD_EXP 40
50704: PUSH
50705: LD_INT 3
50707: ARRAY
50708: PUSH
50709: LD_INT 0
50711: GREATER
50712: PUSH
50713: LD_EXP 64
50717: PUSH
50718: LD_INT 3
50720: ARRAY
50721: PUSH
50722: LD_INT 0
50724: GREATER
50725: OR
50726: PUSH
50727: LD_EXP 63
50731: PUSH
50732: LD_INT 3
50734: ARRAY
50735: PUSH
50736: LD_INT 0
50738: GREATER
50739: OR
50740: PUSH
50741: LD_EXP 83
50745: PUSH
50746: LD_INT 1
50748: NONEQUAL
50749: AND
50750: PUSH
50751: LD_INT 3
50753: PUSH
50754: LD_EXP 58
50758: IN
50759: AND
50760: IFFALSE 50771
// wait ( 0 0$2 ) ;
50762: LD_INT 70
50764: PPUSH
50765: CALL_OW 67
50769: GO 50700
// if PlayerAtEasternBorder then
50771: CALL 31564 0 0
50775: IFFALSE 50874
// begin hex_list_before = [ [ 148 , 99 ] , [ 153 , 99 ] ] ;
50777: LD_ADDR_VAR 0 5
50781: PUSH
50782: LD_INT 148
50784: PUSH
50785: LD_INT 99
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 153
50794: PUSH
50795: LD_INT 99
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: ST_TO_ADDR
// hex = [ 145 , 58 ] ;
50806: LD_ADDR_VAR 0 2
50810: PUSH
50811: LD_INT 145
50813: PUSH
50814: LD_INT 58
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: ST_TO_ADDR
// hex_list_after = [ [ 140 , 104 ] , [ 126 , 91 ] , [ 123 , 71 ] , [ 118 , 59 ] ] ;
50821: LD_ADDR_VAR 0 6
50825: PUSH
50826: LD_INT 140
50828: PUSH
50829: LD_INT 104
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 126
50838: PUSH
50839: LD_INT 91
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 123
50848: PUSH
50849: LD_INT 71
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 118
50858: PUSH
50859: LD_INT 59
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: ST_TO_ADDR
// end else
50872: GO 51124
// begin hex_list_before = [ [ 134 , 107 ] , [ 121 , 99 ] ] ;
50874: LD_ADDR_VAR 0 5
50878: PUSH
50879: LD_INT 134
50881: PUSH
50882: LD_INT 107
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 121
50891: PUSH
50892: LD_INT 99
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: ST_TO_ADDR
// hex = [ 99 , 108 ] ;
50903: LD_ADDR_VAR 0 2
50907: PUSH
50908: LD_INT 99
50910: PUSH
50911: LD_INT 108
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: ST_TO_ADDR
// hex_list_after = [ [ 122 , 80 ] ] ;
50918: LD_ADDR_VAR 0 6
50922: PUSH
50923: LD_INT 122
50925: PUSH
50926: LD_INT 80
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: EMPTY
50934: LIST
50935: ST_TO_ADDR
// case difficulty of 1 :
50936: LD_OWVAR 67
50940: PUSH
50941: LD_INT 1
50943: DOUBLE
50944: EQUAL
50945: IFTRUE 50949
50947: GO 51009
50949: POP
// hex_list_after = hex_list_after ^ [ [ 143 , 77 ] , [ 143 , 52 ] , [ 134 , 42 ] , [ 115 , 39 ] ] ; 2 :
50950: LD_ADDR_VAR 0 6
50954: PUSH
50955: LD_VAR 0 6
50959: PUSH
50960: LD_INT 143
50962: PUSH
50963: LD_INT 77
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 143
50972: PUSH
50973: LD_INT 52
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 134
50982: PUSH
50983: LD_INT 42
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 115
50992: PUSH
50993: LD_INT 39
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: ADD
51006: ST_TO_ADDR
51007: GO 51124
51009: LD_INT 2
51011: DOUBLE
51012: EQUAL
51013: IFTRUE 51017
51015: GO 51077
51017: POP
// hex_list_after = hex_list_after ^ [ [ 143 , 77 ] , [ 134 , 70 ] , [ 124 , 66 ] , [ 118 , 59 ] ] ; 3 :
51018: LD_ADDR_VAR 0 6
51022: PUSH
51023: LD_VAR 0 6
51027: PUSH
51028: LD_INT 143
51030: PUSH
51031: LD_INT 77
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 134
51040: PUSH
51041: LD_INT 70
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 124
51050: PUSH
51051: LD_INT 66
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 118
51060: PUSH
51061: LD_INT 59
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: ADD
51074: ST_TO_ADDR
51075: GO 51124
51077: LD_INT 3
51079: DOUBLE
51080: EQUAL
51081: IFTRUE 51085
51083: GO 51123
51085: POP
// hex_list_after = hex_list_after ^ [ [ 123 , 71 ] , [ 118 , 59 ] ] ; end ;
51086: LD_ADDR_VAR 0 6
51090: PUSH
51091: LD_VAR 0 6
51095: PUSH
51096: LD_INT 123
51098: PUSH
51099: LD_INT 71
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 118
51108: PUSH
51109: LD_INT 59
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: ADD
51120: ST_TO_ADDR
51121: GO 51124
51123: POP
// end ; temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51124: LD_ADDR_VAR 0 1
51128: PUSH
51129: LD_INT 22
51131: PUSH
51132: LD_EXP 2
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 30
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 30
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PPUSH
51173: CALL_OW 69
51177: ST_TO_ADDR
// if temp_list > 0 then
51178: LD_VAR 0 1
51182: PUSH
51183: LD_INT 0
51185: GREATER
51186: IFFALSE 51236
// hex_list_before = hex_list_before ^ [ [ GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ] ] else
51188: LD_ADDR_VAR 0 5
51192: PUSH
51193: LD_VAR 0 5
51197: PUSH
51198: LD_VAR 0 1
51202: PUSH
51203: LD_INT 1
51205: ARRAY
51206: PPUSH
51207: CALL_OW 250
51211: PUSH
51212: LD_VAR 0 1
51216: PUSH
51217: LD_INT 1
51219: ARRAY
51220: PPUSH
51221: CALL_OW 251
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: ADD
51233: ST_TO_ADDR
51234: GO 51255
// hex_list_before = hex_list_before ^ [ hex ] ;
51236: LD_ADDR_VAR 0 5
51240: PUSH
51241: LD_VAR 0 5
51245: PUSH
51246: LD_VAR 0 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: ADD
51254: ST_TO_ADDR
// SetDir ( Cornell , 5 ) ;
51255: LD_EXP 25
51259: PPUSH
51260: LD_INT 5
51262: PPUSH
51263: CALL_OW 233
// SetLives ( Cornell , [ 400 , 450 , 500 ] [ difficulty ] ) ;
51267: LD_EXP 25
51271: PPUSH
51272: LD_INT 400
51274: PUSH
51275: LD_INT 450
51277: PUSH
51278: LD_INT 500
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: PUSH
51286: LD_OWVAR 67
51290: ARRAY
51291: PPUSH
51292: CALL_OW 234
// while not PlaceUnitXYR ( Cornell , 146 , 117 , 1 , false ) do
51296: LD_EXP 25
51300: PPUSH
51301: LD_INT 146
51303: PPUSH
51304: LD_INT 117
51306: PPUSH
51307: LD_INT 1
51309: PPUSH
51310: LD_INT 0
51312: PPUSH
51313: CALL_OW 50
51317: NOT
51318: IFFALSE 51329
// wait ( 0 0$2 ) ;
51320: LD_INT 70
51322: PPUSH
51323: CALL_OW 67
51327: GO 51296
// hex = 1 ;
51329: LD_ADDR_VAR 0 2
51333: PUSH
51334: LD_INT 1
51336: ST_TO_ADDR
// time = 1 1$0 ;
51337: LD_ADDR_VAR 0 3
51341: PUSH
51342: LD_INT 2100
51344: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
51345: LD_INT 18
51347: PPUSH
51348: CALL_OW 67
// if GetDistUnitXY ( Cornell , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) > 2 then
51352: LD_EXP 25
51356: PPUSH
51357: LD_VAR 0 5
51361: PUSH
51362: LD_VAR 0 2
51366: ARRAY
51367: PUSH
51368: LD_INT 1
51370: ARRAY
51371: PPUSH
51372: LD_VAR 0 5
51376: PUSH
51377: LD_VAR 0 2
51381: ARRAY
51382: PUSH
51383: LD_INT 2
51385: ARRAY
51386: PPUSH
51387: CALL_OW 297
51391: PUSH
51392: LD_INT 2
51394: GREATER
51395: IFFALSE 51438
// ComMoveXY ( Cornell , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
51397: LD_EXP 25
51401: PPUSH
51402: LD_VAR 0 5
51406: PUSH
51407: LD_VAR 0 2
51411: ARRAY
51412: PUSH
51413: LD_INT 1
51415: ARRAY
51416: PPUSH
51417: LD_VAR 0 5
51421: PUSH
51422: LD_VAR 0 2
51426: ARRAY
51427: PUSH
51428: LD_INT 2
51430: ARRAY
51431: PPUSH
51432: CALL_OW 111
51436: GO 51499
// if hex < hex_list_before then
51438: LD_VAR 0 2
51442: PUSH
51443: LD_VAR 0 5
51447: LESS
51448: IFFALSE 51466
// hex = hex + 1 else
51450: LD_ADDR_VAR 0 2
51454: PUSH
51455: LD_VAR 0 2
51459: PUSH
51460: LD_INT 1
51462: PLUS
51463: ST_TO_ADDR
51464: GO 51499
// begin time = time - 0 0$0.5 ;
51466: LD_ADDR_VAR 0 3
51470: PUSH
51471: LD_VAR 0 3
51475: PUSH
51476: LD_INT 18
51478: MINUS
51479: ST_TO_ADDR
// if time <= 0 0$0 then
51480: LD_VAR 0 3
51484: PUSH
51485: LD_INT 0
51487: LESSEQUAL
51488: IFFALSE 51499
// KillUnit ( Cornell ) ;
51490: LD_EXP 25
51494: PPUSH
51495: CALL_OW 66
// end ; until ( See ( you , Cornell ) and FilterAllUnits ( [ [ f_side , you ] , [ f_see , americans_alt ] ] ) > 0 ) or IsDead ( Cornell ) ;
51499: LD_EXP 2
51503: PPUSH
51504: LD_EXP 25
51508: PPUSH
51509: CALL_OW 292
51513: PUSH
51514: LD_INT 22
51516: PUSH
51517: LD_EXP 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 101
51528: PUSH
51529: LD_EXP 8
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PPUSH
51542: CALL_OW 69
51546: PUSH
51547: LD_INT 0
51549: GREATER
51550: AND
51551: PUSH
51552: LD_EXP 25
51556: PPUSH
51557: CALL_OW 301
51561: OR
51562: IFFALSE 51345
// if See ( you , Cornell ) and FilterAllUnits ( [ [ f_side , you ] , [ f_see , americans_alt ] ] ) > 0 then
51564: LD_EXP 2
51568: PPUSH
51569: LD_EXP 25
51573: PPUSH
51574: CALL_OW 292
51578: PUSH
51579: LD_INT 22
51581: PUSH
51582: LD_EXP 2
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 101
51593: PUSH
51594: LD_EXP 8
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PPUSH
51607: CALL_OW 69
51611: PUSH
51612: LD_INT 0
51614: GREATER
51615: AND
51616: IFFALSE 51939
// begin CenterOnUnits ( Cornell ) ;
51618: LD_EXP 25
51622: PPUSH
51623: CALL_OW 85
// DialogueOn ;
51627: CALL_OW 6
// ForceSay ( Cornell , D5-Cor-1 ) ;
51631: LD_EXP 25
51635: PPUSH
51636: LD_STRING D5-Cor-1
51638: PPUSH
51639: CALL_OW 91
// ForceSay ( Heike , D5-H-1 ) ;
51643: LD_EXP 9
51647: PPUSH
51648: LD_STRING D5-H-1
51650: PPUSH
51651: CALL_OW 91
// DialogueOff ;
51655: CALL_OW 7
// hex = 1 ;
51659: LD_ADDR_VAR 0 2
51663: PUSH
51664: LD_INT 1
51666: ST_TO_ADDR
// repeat if GetDistUnitXY ( Cornell , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) > 3 then
51667: LD_EXP 25
51671: PPUSH
51672: LD_VAR 0 6
51676: PUSH
51677: LD_VAR 0 2
51681: ARRAY
51682: PUSH
51683: LD_INT 1
51685: ARRAY
51686: PPUSH
51687: LD_VAR 0 6
51691: PUSH
51692: LD_VAR 0 2
51696: ARRAY
51697: PUSH
51698: LD_INT 2
51700: ARRAY
51701: PPUSH
51702: CALL_OW 297
51706: PUSH
51707: LD_INT 3
51709: GREATER
51710: IFFALSE 51753
// ComMoveXY ( Cornell , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) else
51712: LD_EXP 25
51716: PPUSH
51717: LD_VAR 0 6
51721: PUSH
51722: LD_VAR 0 2
51726: ARRAY
51727: PUSH
51728: LD_INT 1
51730: ARRAY
51731: PPUSH
51732: LD_VAR 0 6
51736: PUSH
51737: LD_VAR 0 2
51741: ARRAY
51742: PUSH
51743: LD_INT 2
51745: ARRAY
51746: PPUSH
51747: CALL_OW 111
51751: GO 51779
// if hex < hex_list_after then
51753: LD_VAR 0 2
51757: PUSH
51758: LD_VAR 0 6
51762: LESS
51763: IFFALSE 51779
// hex = hex + 1 ;
51765: LD_ADDR_VAR 0 2
51769: PUSH
51770: LD_VAR 0 2
51774: PUSH
51775: LD_INT 1
51777: PLUS
51778: ST_TO_ADDR
// wait ( 0 0$0.5 ) ;
51779: LD_INT 18
51781: PPUSH
51782: CALL_OW 67
// until IsDead ( Cornell ) or ( See ( americans , Cornell ) and FilterAllUnits ( [ [ f_side , americans ] , [ f_see , americans_alt ] ] ) > 0 ) ;
51786: LD_EXP 25
51790: PPUSH
51791: CALL_OW 301
51795: PUSH
51796: LD_EXP 6
51800: PPUSH
51801: LD_EXP 25
51805: PPUSH
51806: CALL_OW 292
51810: PUSH
51811: LD_INT 22
51813: PUSH
51814: LD_EXP 6
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 101
51825: PUSH
51826: LD_EXP 8
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PPUSH
51839: CALL_OW 69
51843: PUSH
51844: LD_INT 0
51846: GREATER
51847: AND
51848: OR
51849: IFFALSE 51667
// if See ( americans , Cornell ) and FilterAllUnits ( [ [ f_side , americans ] , [ f_see , americans_alt ] ] ) > 0 then
51851: LD_EXP 6
51855: PPUSH
51856: LD_EXP 25
51860: PPUSH
51861: CALL_OW 292
51865: PUSH
51866: LD_INT 22
51868: PUSH
51869: LD_EXP 6
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 101
51880: PUSH
51881: LD_EXP 8
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PPUSH
51894: CALL_OW 69
51898: PUSH
51899: LD_INT 0
51901: GREATER
51902: AND
51903: IFFALSE 51939
// begin DialogueOn ;
51905: CALL_OW 6
// SayRadio ( Simms , D4-Sim-2 ) ;
51909: LD_EXP 24
51913: PPUSH
51914: LD_STRING D4-Sim-2
51916: PPUSH
51917: CALL_OW 94
// dwait ( 0 0$0.5 ) ;
51921: LD_INT 18
51923: PPUSH
51924: CALL_OW 68
// YouLost ( PlayerSeen ) ;
51928: LD_STRING PlayerSeen
51930: PPUSH
51931: CALL_OW 104
// DialogueOff ;
51935: CALL_OW 7
// end ; end ; time = Rand ( 22 22$0 , 24 24$0 ) ;
51939: LD_ADDR_VAR 0 3
51943: PUSH
51944: LD_INT 46200
51946: PPUSH
51947: LD_INT 50400
51949: PPUSH
51950: CALL_OW 12
51954: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51955: LD_INT 35
51957: PPUSH
51958: CALL_OW 67
// time = time - 0 0$1 ;
51962: LD_ADDR_VAR 0 3
51966: PUSH
51967: LD_VAR 0 3
51971: PUSH
51972: LD_INT 35
51974: MINUS
51975: ST_TO_ADDR
// until time <= 0 0$0 or not 3 in ai_bases ;
51976: LD_VAR 0 3
51980: PUSH
51981: LD_INT 0
51983: LESSEQUAL
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: LD_EXP 58
51992: IN
51993: NOT
51994: OR
51995: IFFALSE 51955
// DialogueOn ;
51997: CALL_OW 6
// SayRadio ( Gensher , D8-Ge-1 ) ;
52001: LD_EXP 23
52005: PPUSH
52006: LD_STRING D8-Ge-1
52008: PPUSH
52009: CALL_OW 94
// DialogueOff ;
52013: CALL_OW 7
// wait ( 0 0$0.2 ) ;
52017: LD_INT 7
52019: PPUSH
52020: CALL_OW 67
// time = 8 8$0 ;
52024: LD_ADDR_VAR 0 3
52028: PUSH
52029: LD_INT 16800
52031: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = tick + time + 1 1$0 ;
52032: LD_ADDR_EXP 93
52036: PUSH
52037: LD_OWVAR 1
52041: PUSH
52042: LD_VAR 0 3
52046: PLUS
52047: PUSH
52048: LD_INT 2100
52050: PLUS
52051: ST_TO_ADDR
// repeat display_strings = [ #Ar11-GensherCountdown , time ] ;
52052: LD_ADDR_OWVAR 47
52056: PUSH
52057: LD_STRING #Ar11-GensherCountdown
52059: PUSH
52060: LD_VAR 0 3
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: ST_TO_ADDR
// time = time - 0 0$1 ;
52069: LD_ADDR_VAR 0 3
52073: PUSH
52074: LD_VAR 0 3
52078: PUSH
52079: LD_INT 35
52081: MINUS
52082: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52083: LD_INT 35
52085: PPUSH
52086: CALL_OW 67
// until time <= 0 0$0 ;
52090: LD_VAR 0 3
52094: PUSH
52095: LD_INT 0
52097: LESSEQUAL
52098: IFFALSE 52052
// display_strings = [ ] ;
52100: LD_ADDR_OWVAR 47
52104: PUSH
52105: EMPTY
52106: ST_TO_ADDR
// game_phase = 2 ;
52107: LD_ADDR_EXP 88
52111: PUSH
52112: LD_INT 2
52114: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
52115: LD_STRING M3
52117: PPUSH
52118: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , americans ] ) do
52122: LD_ADDR_VAR 0 4
52126: PUSH
52127: LD_INT 22
52129: PUSH
52130: LD_EXP 6
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PPUSH
52139: CALL_OW 69
52143: PUSH
52144: FOR_IN
52145: IFFALSE 52163
// NormalAttack ( you , i ) ;
52147: LD_EXP 2
52151: PPUSH
52152: LD_VAR 0 4
52156: PPUSH
52157: CALL_OW 472
52161: GO 52144
52163: POP
52164: POP
// end ;
52165: PPOPN 6
52167: END
// every 0 0$1 do var i ;
52168: GO 52170
52170: DISABLE
52171: LD_INT 0
52173: PPUSH
// begin repeat wait ( 0 0$1 ) ;
52174: LD_INT 35
52176: PPUSH
52177: CALL_OW 67
// if game_phase > 1 then
52181: LD_EXP 88
52185: PUSH
52186: LD_INT 1
52188: GREATER
52189: IFFALSE 52193
// exit ;
52191: GO 52321
// for i in FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
52193: LD_ADDR_VAR 0 1
52197: PUSH
52198: LD_INT 22
52200: PUSH
52201: LD_EXP 2
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: PUSH
52213: LD_INT 21
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 21
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PPUSH
52242: CALL_OW 69
52246: PUSH
52247: FOR_IN
52248: IFFALSE 52315
// if GetDistUnitArea ( i , Gensher_base ) <= 9 then
52250: LD_VAR 0 1
52254: PPUSH
52255: LD_INT 7
52257: PPUSH
52258: CALL_OW 299
52262: PUSH
52263: LD_INT 9
52265: LESSEQUAL
52266: IFFALSE 52313
// begin CenterOnUnits ( i ) ;
52268: LD_VAR 0 1
52272: PPUSH
52273: CALL_OW 85
// DialogueOn ;
52277: CALL_OW 6
// Say ( Gensher , D12-Ge-1 ) ;
52281: LD_EXP 23
52285: PPUSH
52286: LD_STRING D12-Ge-1
52288: PPUSH
52289: CALL_OW 88
// ForceSay ( Heike , D12-H-1 ) ;
52293: LD_EXP 9
52297: PPUSH
52298: LD_STRING D12-H-1
52300: PPUSH
52301: CALL_OW 91
// DialogueOff ;
52305: CALL_OW 7
// exit ;
52309: POP
52310: POP
52311: GO 52321
// end ;
52313: GO 52247
52315: POP
52316: POP
// until false ;
52317: LD_INT 0
52319: IFFALSE 52174
// end ;
52321: PPOPN 1
52323: END
// every 0 0$1 + 0 0$0.8 trigger game_phase = 2 do var i , val , temp_list , k ; var un_list , scis_list , hex_list , hex , exit_hex , rand_hexes ; var attacking_units , american_base_hex ;
52324: LD_EXP 88
52328: PUSH
52329: LD_INT 2
52331: EQUAL
52332: IFFALSE 53731
52334: GO 52336
52336: DISABLE
52337: LD_INT 0
52339: PPUSH
52340: PPUSH
52341: PPUSH
52342: PPUSH
52343: PPUSH
52344: PPUSH
52345: PPUSH
52346: PPUSH
52347: PPUSH
52348: PPUSH
52349: PPUSH
52350: PPUSH
// begin ai_bases = ai_bases diff 2 ;
52351: LD_ADDR_EXP 58
52355: PUSH
52356: LD_EXP 58
52360: PUSH
52361: LD_INT 2
52363: DIFF
52364: ST_TO_ADDR
// hex = 1 ;
52365: LD_ADDR_VAR 0 8
52369: PUSH
52370: LD_INT 1
52372: ST_TO_ADDR
// hex_list = [ [ 75 , 23 ] , [ 76 , 36 ] , [ 78 , 43 ] , [ 79 , 51 ] , [ 81 , 61 ] , [ 84 , 71 ] , [ 90 , 81 ] , [ 97 , 88 ] , [ 105 , 93 ] , [ 113 , 95 ] , [ 119 , 92 ] , [ 122 , 87 ] , [ 123 , 79 ] , [ 132 , 82 ] , [ 141 , 88 ] , [ 160 , 104 ] , [ 168 , 109 ] ] ;
52373: LD_ADDR_VAR 0 7
52377: PUSH
52378: LD_INT 75
52380: PUSH
52381: LD_INT 23
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 76
52390: PUSH
52391: LD_INT 36
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 78
52400: PUSH
52401: LD_INT 43
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 79
52410: PUSH
52411: LD_INT 51
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 81
52420: PUSH
52421: LD_INT 61
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 84
52430: PUSH
52431: LD_INT 71
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 90
52440: PUSH
52441: LD_INT 81
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 97
52450: PUSH
52451: LD_INT 88
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 105
52460: PUSH
52461: LD_INT 93
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 113
52470: PUSH
52471: LD_INT 95
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 119
52480: PUSH
52481: LD_INT 92
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 122
52490: PUSH
52491: LD_INT 87
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 123
52500: PUSH
52501: LD_INT 79
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 132
52510: PUSH
52511: LD_INT 82
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 141
52520: PUSH
52521: LD_INT 88
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 160
52530: PUSH
52531: LD_INT 104
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 168
52540: PUSH
52541: LD_INT 109
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: ST_TO_ADDR
// exit_hex = [ 173 , 110 ] ;
52567: LD_ADDR_VAR 0 9
52571: PUSH
52572: LD_INT 173
52574: PUSH
52575: LD_INT 110
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: ST_TO_ADDR
// rand_hexes = [ ] ;
52582: LD_ADDR_VAR 0 10
52586: PUSH
52587: EMPTY
52588: ST_TO_ADDR
// american_base_hex = [ 113 , 36 ] ;
52589: LD_ADDR_VAR 0 12
52593: PUSH
52594: LD_INT 113
52596: PUSH
52597: LD_INT 36
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// attacking_units = [ ] ;
52604: LD_ADDR_VAR 0 11
52608: PUSH
52609: EMPTY
52610: ST_TO_ADDR
// attacking_units = FilterAllUnits ( [ [ f_placed ] , [ f_side , you_alt ] , [ f_type , unit_vehicle ] ] ) ;
52611: LD_ADDR_VAR 0 11
52615: PUSH
52616: LD_INT 52
52618: PUSH
52619: EMPTY
52620: LIST
52621: PUSH
52622: LD_INT 22
52624: PUSH
52625: LD_EXP 5
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 21
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: PPUSH
52649: CALL_OW 69
52653: ST_TO_ADDR
// attacking_units = attacking_units ^ gensher_mortars ;
52654: LD_ADDR_VAR 0 11
52658: PUSH
52659: LD_VAR 0 11
52663: PUSH
52664: LD_EXP 99
52668: ADD
52669: ST_TO_ADDR
// SetAttitude ( you_alt , americans , att_enemy , false ) ;
52670: LD_EXP 5
52674: PPUSH
52675: LD_EXP 6
52679: PPUSH
52680: LD_INT 2
52682: PPUSH
52683: LD_INT 0
52685: PPUSH
52686: CALL_OW 80
// ComAgressiveMove ( attacking_units , american_base_hex [ 1 ] , american_base_hex [ 2 ] ) ;
52690: LD_VAR 0 11
52694: PPUSH
52695: LD_VAR 0 12
52699: PUSH
52700: LD_INT 1
52702: ARRAY
52703: PPUSH
52704: LD_VAR 0 12
52708: PUSH
52709: LD_INT 2
52711: ARRAY
52712: PPUSH
52713: CALL_OW 114
// un_list = original_gensher_people ^ Gensher ;
52717: LD_ADDR_VAR 0 5
52721: PUSH
52722: LD_EXP 82
52726: PUSH
52727: LD_EXP 23
52731: ADD
52732: ST_TO_ADDR
// un_list = un_list ^ gensher_bunker_apes ;
52733: LD_ADDR_VAR 0 5
52737: PUSH
52738: LD_VAR 0 5
52742: PUSH
52743: LD_EXP 98
52747: ADD
52748: ST_TO_ADDR
// scis_list = UnitFilter ( un_list , [ f_class , class_scientistic ] ) ;
52749: LD_ADDR_VAR 0 6
52753: PUSH
52754: LD_VAR 0 5
52758: PPUSH
52759: LD_INT 25
52761: PUSH
52762: LD_INT 4
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PPUSH
52769: CALL_OW 72
52773: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52774: LD_INT 35
52776: PPUSH
52777: CALL_OW 67
// val = true ;
52781: LD_ADDR_VAR 0 2
52785: PUSH
52786: LD_INT 1
52788: ST_TO_ADDR
// for i in un_list do
52789: LD_ADDR_VAR 0 1
52793: PUSH
52794: LD_VAR 0 5
52798: PUSH
52799: FOR_IN
52800: IFFALSE 52876
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
52802: LD_VAR 0 1
52806: PPUSH
52807: CALL_OW 310
52811: PPUSH
52812: CALL_OW 247
52816: PUSH
52817: LD_INT 2
52819: DOUBLE
52820: EQUAL
52821: IFTRUE 52825
52823: GO 52845
52825: POP
// begin ComExitVehicle ( i ) ;
52826: LD_VAR 0 1
52830: PPUSH
52831: CALL_OW 121
// val = false ;
52835: LD_ADDR_VAR 0 2
52839: PUSH
52840: LD_INT 0
52842: ST_TO_ADDR
// end ; unit_building :
52843: GO 52874
52845: LD_INT 3
52847: DOUBLE
52848: EQUAL
52849: IFTRUE 52853
52851: GO 52873
52853: POP
// begin ComExitBuilding ( i ) ;
52854: LD_VAR 0 1
52858: PPUSH
52859: CALL_OW 122
// val = false ;
52863: LD_ADDR_VAR 0 2
52867: PUSH
52868: LD_INT 0
52870: ST_TO_ADDR
// end ; end ;
52871: GO 52874
52873: POP
52874: GO 52799
52876: POP
52877: POP
// until val ;
52878: LD_VAR 0 2
52882: IFFALSE 52774
// for i in un_list do
52884: LD_ADDR_VAR 0 1
52888: PUSH
52889: LD_VAR 0 5
52893: PUSH
52894: FOR_IN
52895: IFFALSE 52930
// rand_hexes = Replace ( rand_hexes , i , hex_list [ hex ] ) ;
52897: LD_ADDR_VAR 0 10
52901: PUSH
52902: LD_VAR 0 10
52906: PPUSH
52907: LD_VAR 0 1
52911: PPUSH
52912: LD_VAR 0 7
52916: PUSH
52917: LD_VAR 0 8
52921: ARRAY
52922: PPUSH
52923: CALL_OW 1
52927: ST_TO_ADDR
52928: GO 52894
52930: POP
52931: POP
// repeat wait ( 0 0$0.3 ) ;
52932: LD_INT 10
52934: PPUSH
52935: CALL_OW 67
// un_list = UnitFilter ( un_list , [ f_alive ] ) ;
52939: LD_ADDR_VAR 0 5
52943: PUSH
52944: LD_VAR 0 5
52948: PPUSH
52949: LD_INT 51
52951: PUSH
52952: EMPTY
52953: LIST
52954: PPUSH
52955: CALL_OW 72
52959: ST_TO_ADDR
// scis_list = UnitFilter ( scis_list , [ f_alive ] ) ;
52960: LD_ADDR_VAR 0 6
52964: PUSH
52965: LD_VAR 0 6
52969: PPUSH
52970: LD_INT 51
52972: PUSH
52973: EMPTY
52974: LIST
52975: PPUSH
52976: CALL_OW 72
52980: ST_TO_ADDR
// temp_list = [ ] ;
52981: LD_ADDR_VAR 0 3
52985: PUSH
52986: EMPTY
52987: ST_TO_ADDR
// for i in un_list do
52988: LD_ADDR_VAR 0 1
52992: PUSH
52993: LD_VAR 0 5
52997: PUSH
52998: FOR_IN
52999: IFFALSE 53034
// if GetLives ( i ) <= 250 then
53001: LD_VAR 0 1
53005: PPUSH
53006: CALL_OW 256
53010: PUSH
53011: LD_INT 250
53013: LESSEQUAL
53014: IFFALSE 53032
// temp_list = temp_list ^ i ;
53016: LD_ADDR_VAR 0 3
53020: PUSH
53021: LD_VAR 0 3
53025: PUSH
53026: LD_VAR 0 1
53030: ADD
53031: ST_TO_ADDR
53032: GO 52998
53034: POP
53035: POP
// if temp_list > 0 and scis_list > 0 and UnitFilter ( un_list , [ f_lives , 501 ] ) > ( original_gensher_people + 1 ) div 2 then
53036: LD_VAR 0 3
53040: PUSH
53041: LD_INT 0
53043: GREATER
53044: PUSH
53045: LD_VAR 0 6
53049: PUSH
53050: LD_INT 0
53052: GREATER
53053: AND
53054: PUSH
53055: LD_VAR 0 5
53059: PPUSH
53060: LD_INT 24
53062: PUSH
53063: LD_INT 501
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PPUSH
53070: CALL_OW 72
53074: PUSH
53075: LD_EXP 82
53079: PUSH
53080: LD_INT 1
53082: PLUS
53083: PUSH
53084: LD_INT 2
53086: DIV
53087: GREATER
53088: AND
53089: IFFALSE 53212
// begin for i in scis_list do
53091: LD_ADDR_VAR 0 1
53095: PUSH
53096: LD_VAR 0 6
53100: PUSH
53101: FOR_IN
53102: IFFALSE 53124
// ComHeal ( i , temp_list [ 1 ] ) ;
53104: LD_VAR 0 1
53108: PPUSH
53109: LD_VAR 0 3
53113: PUSH
53114: LD_INT 1
53116: ARRAY
53117: PPUSH
53118: CALL_OW 128
53122: GO 53101
53124: POP
53125: POP
// for i in un_list diff scis_list do
53126: LD_ADDR_VAR 0 1
53130: PUSH
53131: LD_VAR 0 5
53135: PUSH
53136: LD_VAR 0 6
53140: DIFF
53141: PUSH
53142: FOR_IN
53143: IFFALSE 53208
// if GetDistUnits ( i , temp_list [ 1 ] ) > 4 then
53145: LD_VAR 0 1
53149: PPUSH
53150: LD_VAR 0 3
53154: PUSH
53155: LD_INT 1
53157: ARRAY
53158: PPUSH
53159: CALL_OW 296
53163: PUSH
53164: LD_INT 4
53166: GREATER
53167: IFFALSE 53206
// ComMoveXY ( i , GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ) ;
53169: LD_VAR 0 1
53173: PPUSH
53174: LD_VAR 0 3
53178: PUSH
53179: LD_INT 1
53181: ARRAY
53182: PPUSH
53183: CALL_OW 250
53187: PPUSH
53188: LD_VAR 0 3
53192: PUSH
53193: LD_INT 1
53195: ARRAY
53196: PPUSH
53197: CALL_OW 251
53201: PPUSH
53202: CALL_OW 111
53206: GO 53142
53208: POP
53209: POP
// end else
53210: GO 53699
// begin val = true ;
53212: LD_ADDR_VAR 0 2
53216: PUSH
53217: LD_INT 1
53219: ST_TO_ADDR
// for i in un_list do
53220: LD_ADDR_VAR 0 1
53224: PUSH
53225: LD_VAR 0 5
53229: PUSH
53230: FOR_IN
53231: IFFALSE 53472
// if hex <= hex_list then
53233: LD_VAR 0 8
53237: PUSH
53238: LD_VAR 0 7
53242: LESSEQUAL
53243: IFFALSE 53339
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 5 then
53245: LD_VAR 0 1
53249: PPUSH
53250: LD_VAR 0 10
53254: PUSH
53255: LD_VAR 0 1
53259: ARRAY
53260: PUSH
53261: LD_INT 1
53263: ARRAY
53264: PPUSH
53265: LD_VAR 0 10
53269: PUSH
53270: LD_VAR 0 1
53274: ARRAY
53275: PUSH
53276: LD_INT 2
53278: ARRAY
53279: PPUSH
53280: CALL_OW 297
53284: PUSH
53285: LD_INT 5
53287: GREATER
53288: IFFALSE 53337
// begin ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
53290: LD_VAR 0 1
53294: PPUSH
53295: LD_VAR 0 10
53299: PUSH
53300: LD_VAR 0 1
53304: ARRAY
53305: PUSH
53306: LD_INT 1
53308: ARRAY
53309: PPUSH
53310: LD_VAR 0 10
53314: PUSH
53315: LD_VAR 0 1
53319: ARRAY
53320: PUSH
53321: LD_INT 2
53323: ARRAY
53324: PPUSH
53325: CALL_OW 111
// val = false ;
53329: LD_ADDR_VAR 0 2
53333: PUSH
53334: LD_INT 0
53336: ST_TO_ADDR
// end ; end else
53337: GO 53470
// if GetDistUnitXY ( i , exit_hex [ 1 ] , exit_hex [ 2 ] ) > 2 then
53339: LD_VAR 0 1
53343: PPUSH
53344: LD_VAR 0 9
53348: PUSH
53349: LD_INT 1
53351: ARRAY
53352: PPUSH
53353: LD_VAR 0 9
53357: PUSH
53358: LD_INT 2
53360: ARRAY
53361: PPUSH
53362: CALL_OW 297
53366: PUSH
53367: LD_INT 2
53369: GREATER
53370: IFFALSE 53401
// ComMoveXY ( i , exit_hex [ 1 ] , exit_hex [ 2 ] ) else
53372: LD_VAR 0 1
53376: PPUSH
53377: LD_VAR 0 9
53381: PUSH
53382: LD_INT 1
53384: ARRAY
53385: PPUSH
53386: LD_VAR 0 9
53390: PUSH
53391: LD_INT 2
53393: ARRAY
53394: PPUSH
53395: CALL_OW 111
53399: GO 53470
// begin if i <> Gensher then
53401: LD_VAR 0 1
53405: PUSH
53406: LD_EXP 23
53410: NONEQUAL
53411: IFFALSE 53429
// saved_gensher_people = saved_gensher_people ^ i ;
53413: LD_ADDR_EXP 94
53417: PUSH
53418: LD_EXP 94
53422: PUSH
53423: LD_VAR 0 1
53427: ADD
53428: ST_TO_ADDR
// un_list = un_list diff i ;
53429: LD_ADDR_VAR 0 5
53433: PUSH
53434: LD_VAR 0 5
53438: PUSH
53439: LD_VAR 0 1
53443: DIFF
53444: ST_TO_ADDR
// scis_list = scis_list diff i ;
53445: LD_ADDR_VAR 0 6
53449: PUSH
53450: LD_VAR 0 6
53454: PUSH
53455: LD_VAR 0 1
53459: DIFF
53460: ST_TO_ADDR
// RemoveUnit ( i ) ;
53461: LD_VAR 0 1
53465: PPUSH
53466: CALL_OW 64
// end ;
53470: GO 53230
53472: POP
53473: POP
// if val then
53474: LD_VAR 0 2
53478: IFFALSE 53699
// begin hex = hex + 1 ;
53480: LD_ADDR_VAR 0 8
53484: PUSH
53485: LD_VAR 0 8
53489: PUSH
53490: LD_INT 1
53492: PLUS
53493: ST_TO_ADDR
// if hex <= hex_list then
53494: LD_VAR 0 8
53498: PUSH
53499: LD_VAR 0 7
53503: LESSEQUAL
53504: IFFALSE 53699
// begin temp_list = [ ] ;
53506: LD_ADDR_VAR 0 3
53510: PUSH
53511: EMPTY
53512: ST_TO_ADDR
// for i in un_list do
53513: LD_ADDR_VAR 0 1
53517: PUSH
53518: LD_VAR 0 5
53522: PUSH
53523: FOR_IN
53524: IFFALSE 53697
// begin k = 0 ;
53526: LD_ADDR_VAR 0 4
53530: PUSH
53531: LD_INT 0
53533: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list [ hex ] [ 1 ] , hex_list [ hex ] [ 2 ] , 2 , false ) ;
53534: LD_ADDR_VAR 0 2
53538: PUSH
53539: LD_VAR 0 7
53543: PUSH
53544: LD_VAR 0 8
53548: ARRAY
53549: PUSH
53550: LD_INT 1
53552: ARRAY
53553: PPUSH
53554: LD_VAR 0 7
53558: PUSH
53559: LD_VAR 0 8
53563: ARRAY
53564: PUSH
53565: LD_INT 2
53567: ARRAY
53568: PPUSH
53569: LD_INT 2
53571: PPUSH
53572: LD_INT 0
53574: PPUSH
53575: CALL_OW 17
53579: ST_TO_ADDR
// k = k + 1 ;
53580: LD_ADDR_VAR 0 4
53584: PUSH
53585: LD_VAR 0 4
53589: PUSH
53590: LD_INT 1
53592: PLUS
53593: ST_TO_ADDR
// if ( not val in temp_list and HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 ) or k >= 10 then
53594: LD_VAR 0 2
53598: PUSH
53599: LD_VAR 0 3
53603: IN
53604: NOT
53605: PUSH
53606: LD_VAR 0 2
53610: PUSH
53611: LD_INT 1
53613: ARRAY
53614: PPUSH
53615: LD_VAR 0 2
53619: PUSH
53620: LD_INT 2
53622: ARRAY
53623: PPUSH
53624: CALL_OW 428
53628: PUSH
53629: LD_INT 0
53631: GREATEREQUAL
53632: AND
53633: PUSH
53634: LD_VAR 0 4
53638: PUSH
53639: LD_INT 10
53641: GREATEREQUAL
53642: OR
53643: IFFALSE 53691
// begin temp_list = temp_list ^ [ val ] ;
53645: LD_ADDR_VAR 0 3
53649: PUSH
53650: LD_VAR 0 3
53654: PUSH
53655: LD_VAR 0 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: ADD
53663: ST_TO_ADDR
// rand_hexes = Replace ( rand_hexes , i , val ) ;
53664: LD_ADDR_VAR 0 10
53668: PUSH
53669: LD_VAR 0 10
53673: PPUSH
53674: LD_VAR 0 1
53678: PPUSH
53679: LD_VAR 0 2
53683: PPUSH
53684: CALL_OW 1
53688: ST_TO_ADDR
// break ;
53689: GO 53695
// end ; until false ;
53691: LD_INT 0
53693: IFFALSE 53534
// end ;
53695: GO 53523
53697: POP
53698: POP
// end ; end ; end ; until un_list = 0 ;
53699: LD_VAR 0 5
53703: PUSH
53704: LD_INT 0
53706: EQUAL
53707: IFFALSE 52932
// wait ( 0 0$0.2 ) ;
53709: LD_INT 7
53711: PPUSH
53712: CALL_OW 67
// ChangeMissionObjectives ( M4 ) ;
53716: LD_STRING M4
53718: PPUSH
53719: CALL_OW 337
// game_phase = 3 ;
53723: LD_ADDR_EXP 88
53727: PUSH
53728: LD_INT 3
53730: ST_TO_ADDR
// end ;
53731: PPOPN 12
53733: END
// every 0 0$1 + 0 0$0.9 trigger game_phase = 2 do
53734: LD_EXP 88
53738: PUSH
53739: LD_INT 2
53741: EQUAL
53742: IFFALSE 53823
53744: GO 53746
53746: DISABLE
// begin wait ( [ 0 0$18 , 0 0$15 , 0 0$12 ] [ difficulty ] ) ;
53747: LD_INT 630
53749: PUSH
53750: LD_INT 525
53752: PUSH
53753: LD_INT 420
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: LIST
53760: PUSH
53761: LD_OWVAR 67
53765: ARRAY
53766: PPUSH
53767: CALL_OW 67
// DialogueOn ;
53771: CALL_OW 6
// SayRadio ( Simms , D8-Simm-1_v2 ) ;
53775: LD_EXP 24
53779: PPUSH
53780: LD_STRING D8-Simm-1_v2
53782: PPUSH
53783: CALL_OW 94
// SayRadio ( Powell , D8-Po-1 ) ;
53787: LD_EXP 28
53791: PPUSH
53792: LD_STRING D8-Po-1
53794: PPUSH
53795: CALL_OW 94
// DialogueOff ;
53799: CALL_OW 7
// SetAttitude ( americans , you_alt , att_enemy , true ) ;
53803: LD_EXP 6
53807: PPUSH
53808: LD_EXP 5
53812: PPUSH
53813: LD_INT 2
53815: PPUSH
53816: LD_INT 1
53818: PPUSH
53819: CALL_OW 80
// end ;
53823: END
// every 0 0$1 + 0 0$0.6 trigger GetAttitude ( americans , you_alt ) = att_enemy do var i , val ; var sniper_group_1 , sniper_group_2 , hex_list_1 , hex_list_2 , unit_hex , rand_hexes , k ;
53824: LD_EXP 6
53828: PPUSH
53829: LD_EXP 5
53833: PPUSH
53834: CALL_OW 81
53838: PUSH
53839: LD_INT 2
53841: EQUAL
53842: IFFALSE 55241
53844: GO 53846
53846: DISABLE
53847: LD_INT 0
53849: PPUSH
53850: PPUSH
53851: PPUSH
53852: PPUSH
53853: PPUSH
53854: PPUSH
53855: PPUSH
53856: PPUSH
53857: PPUSH
// begin sniper_group_1 = CreateUnitsWithClass ( difficulty , class_sniper , americans ) ;
53858: LD_ADDR_VAR 0 3
53862: PUSH
53863: LD_OWVAR 67
53867: PPUSH
53868: LD_INT 5
53870: PPUSH
53871: LD_EXP 6
53875: PPUSH
53876: CALL 9612 0 3
53880: ST_TO_ADDR
// sniper_group_2 = CreateUnitsWithClass ( difficulty , class_sniper , americans ) ;
53881: LD_ADDR_VAR 0 4
53885: PUSH
53886: LD_OWVAR 67
53890: PPUSH
53891: LD_INT 5
53893: PPUSH
53894: LD_EXP 6
53898: PPUSH
53899: CALL 9612 0 3
53903: ST_TO_ADDR
// for i in sniper_group_1 ^ sniper_group_2 do
53904: LD_ADDR_VAR 0 1
53908: PUSH
53909: LD_VAR 0 3
53913: PUSH
53914: LD_VAR 0 4
53918: ADD
53919: PUSH
53920: FOR_IN
53921: IFFALSE 53966
// PlaceUnitXYR ( i , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 7 , false ) ;
53923: LD_VAR 0 1
53927: PPUSH
53928: LD_EXP 41
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PUSH
53937: LD_INT 1
53939: ARRAY
53940: PPUSH
53941: LD_EXP 41
53945: PUSH
53946: LD_INT 1
53948: ARRAY
53949: PUSH
53950: LD_INT 2
53952: ARRAY
53953: PPUSH
53954: LD_INT 7
53956: PPUSH
53957: LD_INT 0
53959: PPUSH
53960: CALL_OW 50
53964: GO 53920
53966: POP
53967: POP
// unit_hex = [ ] ;
53968: LD_ADDR_VAR 0 7
53972: PUSH
53973: EMPTY
53974: ST_TO_ADDR
// for i in sniper_group_1 ^ sniper_group_2 do
53975: LD_ADDR_VAR 0 1
53979: PUSH
53980: LD_VAR 0 3
53984: PUSH
53985: LD_VAR 0 4
53989: ADD
53990: PUSH
53991: FOR_IN
53992: IFFALSE 54019
// unit_hex = Replace ( unit_hex , i , 1 ) ;
53994: LD_ADDR_VAR 0 7
53998: PUSH
53999: LD_VAR 0 7
54003: PPUSH
54004: LD_VAR 0 1
54008: PPUSH
54009: LD_INT 1
54011: PPUSH
54012: CALL_OW 1
54016: ST_TO_ADDR
54017: GO 53991
54019: POP
54020: POP
// if FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_inarea , player_base_1 ] ] ) > 0 then
54021: LD_INT 22
54023: PUSH
54024: LD_EXP 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 30
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 30
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 95
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: PPUSH
54076: CALL_OW 69
54080: PUSH
54081: LD_INT 0
54083: GREATER
54084: IFFALSE 54190
// begin hex_list_1 = [ [ 116 , 59 ] , [ 115 , 67 ] , [ 114 , 77 ] ] ;
54086: LD_ADDR_VAR 0 5
54090: PUSH
54091: LD_INT 116
54093: PUSH
54094: LD_INT 59
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 115
54103: PUSH
54104: LD_INT 67
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 114
54113: PUSH
54114: LD_INT 77
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: LIST
54125: ST_TO_ADDR
// hex_list_2 = [ [ 116 , 59 ] , [ 124 , 77 ] , [ 123 , 86 ] , [ 135 , 96 ] , [ 128 , 87 ] ] ;
54126: LD_ADDR_VAR 0 6
54130: PUSH
54131: LD_INT 116
54133: PUSH
54134: LD_INT 59
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 124
54143: PUSH
54144: LD_INT 77
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 123
54153: PUSH
54154: LD_INT 86
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 135
54163: PUSH
54164: LD_INT 96
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 128
54173: PUSH
54174: LD_INT 87
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: ST_TO_ADDR
// end else
54188: GO 54281
// begin hex_list_1 = [ [ 116 , 59 ] , [ 117 , 66 ] , [ 116 , 72 ] ] ;
54190: LD_ADDR_VAR 0 5
54194: PUSH
54195: LD_INT 116
54197: PUSH
54198: LD_INT 59
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 117
54207: PUSH
54208: LD_INT 66
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 116
54217: PUSH
54218: LD_INT 72
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: LIST
54229: ST_TO_ADDR
// hex_list_2 = [ [ 116 , 59 ] , [ 134 , 69 ] , [ 150 , 82 ] , [ 157 , 98 ] ] ;
54230: LD_ADDR_VAR 0 6
54234: PUSH
54235: LD_INT 116
54237: PUSH
54238: LD_INT 59
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 134
54247: PUSH
54248: LD_INT 69
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 150
54257: PUSH
54258: LD_INT 82
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 157
54267: PUSH
54268: LD_INT 98
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: ST_TO_ADDR
// end ; rand_hexes = [ ] ;
54281: LD_ADDR_VAR 0 8
54285: PUSH
54286: EMPTY
54287: ST_TO_ADDR
// for i in sniper_group_1 do
54288: LD_ADDR_VAR 0 1
54292: PUSH
54293: LD_VAR 0 3
54297: PUSH
54298: FOR_IN
54299: IFFALSE 54332
// rand_hexes = Replace ( rand_hexes , i , hex_list_1 [ 1 ] ) ;
54301: LD_ADDR_VAR 0 8
54305: PUSH
54306: LD_VAR 0 8
54310: PPUSH
54311: LD_VAR 0 1
54315: PPUSH
54316: LD_VAR 0 5
54320: PUSH
54321: LD_INT 1
54323: ARRAY
54324: PPUSH
54325: CALL_OW 1
54329: ST_TO_ADDR
54330: GO 54298
54332: POP
54333: POP
// for i in sniper_group_2 do
54334: LD_ADDR_VAR 0 1
54338: PUSH
54339: LD_VAR 0 4
54343: PUSH
54344: FOR_IN
54345: IFFALSE 54378
// rand_hexes = Replace ( rand_hexes , i , hex_list_2 [ 1 ] ) ;
54347: LD_ADDR_VAR 0 8
54351: PUSH
54352: LD_VAR 0 8
54356: PPUSH
54357: LD_VAR 0 1
54361: PPUSH
54362: LD_VAR 0 6
54366: PUSH
54367: LD_INT 1
54369: ARRAY
54370: PPUSH
54371: CALL_OW 1
54375: ST_TO_ADDR
54376: GO 54344
54378: POP
54379: POP
// repeat wait ( 0 0$1 ) ;
54380: LD_INT 35
54382: PPUSH
54383: CALL_OW 67
// sniper_group_1 = UnitFilter ( sniper_group_1 , [ f_ok ] ) ;
54387: LD_ADDR_VAR 0 3
54391: PUSH
54392: LD_VAR 0 3
54396: PPUSH
54397: LD_INT 50
54399: PUSH
54400: EMPTY
54401: LIST
54402: PPUSH
54403: CALL_OW 72
54407: ST_TO_ADDR
// sniper_group_2 = UnitFilter ( sniper_group_2 , [ f_ok ] ) ;
54408: LD_ADDR_VAR 0 4
54412: PUSH
54413: LD_VAR 0 4
54417: PPUSH
54418: LD_INT 50
54420: PUSH
54421: EMPTY
54422: LIST
54423: PPUSH
54424: CALL_OW 72
54428: ST_TO_ADDR
// if sniper_group_1 = 0 and sniper_group_2 = 0 then
54429: LD_VAR 0 3
54433: PUSH
54434: LD_INT 0
54436: EQUAL
54437: PUSH
54438: LD_VAR 0 4
54442: PUSH
54443: LD_INT 0
54445: EQUAL
54446: AND
54447: IFFALSE 54451
// exit ;
54449: GO 55241
// for i in sniper_group_1 do
54451: LD_ADDR_VAR 0 1
54455: PUSH
54456: LD_VAR 0 3
54460: PUSH
54461: FOR_IN
54462: IFFALSE 54842
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 2 then
54464: LD_VAR 0 1
54468: PPUSH
54469: LD_VAR 0 8
54473: PUSH
54474: LD_VAR 0 1
54478: ARRAY
54479: PUSH
54480: LD_INT 1
54482: ARRAY
54483: PPUSH
54484: LD_VAR 0 8
54488: PUSH
54489: LD_VAR 0 1
54493: ARRAY
54494: PUSH
54495: LD_INT 2
54497: ARRAY
54498: PPUSH
54499: CALL_OW 297
54503: PUSH
54504: LD_INT 2
54506: GREATER
54507: IFFALSE 54644
// begin if unit_hex [ i ] = hex_list_1 + 0 then
54509: LD_VAR 0 7
54513: PUSH
54514: LD_VAR 0 1
54518: ARRAY
54519: PUSH
54520: LD_VAR 0 5
54524: PUSH
54525: LD_INT 0
54527: PLUS
54528: EQUAL
54529: IFFALSE 54572
// ComAgressiveMove ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) else
54531: LD_VAR 0 1
54535: PPUSH
54536: LD_VAR 0 8
54540: PUSH
54541: LD_VAR 0 1
54545: ARRAY
54546: PUSH
54547: LD_INT 1
54549: ARRAY
54550: PPUSH
54551: LD_VAR 0 8
54555: PUSH
54556: LD_VAR 0 1
54560: ARRAY
54561: PUSH
54562: LD_INT 2
54564: ARRAY
54565: PPUSH
54566: CALL_OW 114
54570: GO 54611
// ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
54572: LD_VAR 0 1
54576: PPUSH
54577: LD_VAR 0 8
54581: PUSH
54582: LD_VAR 0 1
54586: ARRAY
54587: PUSH
54588: LD_INT 1
54590: ARRAY
54591: PPUSH
54592: LD_VAR 0 8
54596: PUSH
54597: LD_VAR 0 1
54601: ARRAY
54602: PUSH
54603: LD_INT 2
54605: ARRAY
54606: PPUSH
54607: CALL_OW 111
// if unit_hex [ i ] = hex_list_1 + 0 then
54611: LD_VAR 0 7
54615: PUSH
54616: LD_VAR 0 1
54620: ARRAY
54621: PUSH
54622: LD_VAR 0 5
54626: PUSH
54627: LD_INT 0
54629: PLUS
54630: EQUAL
54631: IFFALSE 54642
// AddComHold ( i ) ;
54633: LD_VAR 0 1
54637: PPUSH
54638: CALL_OW 200
// end else
54642: GO 54840
// if unit_hex [ i ] < hex_list_1 then
54644: LD_VAR 0 7
54648: PUSH
54649: LD_VAR 0 1
54653: ARRAY
54654: PUSH
54655: LD_VAR 0 5
54659: LESS
54660: IFFALSE 54840
// begin unit_hex = Replace ( unit_hex , i , unit_hex [ i ] + 1 ) ;
54662: LD_ADDR_VAR 0 7
54666: PUSH
54667: LD_VAR 0 7
54671: PPUSH
54672: LD_VAR 0 1
54676: PPUSH
54677: LD_VAR 0 7
54681: PUSH
54682: LD_VAR 0 1
54686: ARRAY
54687: PUSH
54688: LD_INT 1
54690: PLUS
54691: PPUSH
54692: CALL_OW 1
54696: ST_TO_ADDR
// k = 0 ;
54697: LD_ADDR_VAR 0 9
54701: PUSH
54702: LD_INT 0
54704: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list_1 [ unit_hex [ i ] ] [ 1 ] , hex_list_1 [ unit_hex [ i ] ] [ 2 ] , 1 , false ) ;
54705: LD_ADDR_VAR 0 2
54709: PUSH
54710: LD_VAR 0 5
54714: PUSH
54715: LD_VAR 0 7
54719: PUSH
54720: LD_VAR 0 1
54724: ARRAY
54725: ARRAY
54726: PUSH
54727: LD_INT 1
54729: ARRAY
54730: PPUSH
54731: LD_VAR 0 5
54735: PUSH
54736: LD_VAR 0 7
54740: PUSH
54741: LD_VAR 0 1
54745: ARRAY
54746: ARRAY
54747: PUSH
54748: LD_INT 2
54750: ARRAY
54751: PPUSH
54752: LD_INT 1
54754: PPUSH
54755: LD_INT 0
54757: PPUSH
54758: CALL_OW 17
54762: ST_TO_ADDR
// k = k + 1 ;
54763: LD_ADDR_VAR 0 9
54767: PUSH
54768: LD_VAR 0 9
54772: PUSH
54773: LD_INT 1
54775: PLUS
54776: ST_TO_ADDR
// until HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 or k >= 10 ;
54777: LD_VAR 0 2
54781: PUSH
54782: LD_INT 1
54784: ARRAY
54785: PPUSH
54786: LD_VAR 0 2
54790: PUSH
54791: LD_INT 2
54793: ARRAY
54794: PPUSH
54795: CALL_OW 428
54799: PUSH
54800: LD_INT 0
54802: GREATEREQUAL
54803: PUSH
54804: LD_VAR 0 9
54808: PUSH
54809: LD_INT 10
54811: GREATEREQUAL
54812: OR
54813: IFFALSE 54705
// rand_hexes = Replace ( rand_hexes , i , val ) ;
54815: LD_ADDR_VAR 0 8
54819: PUSH
54820: LD_VAR 0 8
54824: PPUSH
54825: LD_VAR 0 1
54829: PPUSH
54830: LD_VAR 0 2
54834: PPUSH
54835: CALL_OW 1
54839: ST_TO_ADDR
// end ; end ;
54840: GO 54461
54842: POP
54843: POP
// for i in sniper_group_2 do
54844: LD_ADDR_VAR 0 1
54848: PUSH
54849: LD_VAR 0 4
54853: PUSH
54854: FOR_IN
54855: IFFALSE 55235
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 2 then
54857: LD_VAR 0 1
54861: PPUSH
54862: LD_VAR 0 8
54866: PUSH
54867: LD_VAR 0 1
54871: ARRAY
54872: PUSH
54873: LD_INT 1
54875: ARRAY
54876: PPUSH
54877: LD_VAR 0 8
54881: PUSH
54882: LD_VAR 0 1
54886: ARRAY
54887: PUSH
54888: LD_INT 2
54890: ARRAY
54891: PPUSH
54892: CALL_OW 297
54896: PUSH
54897: LD_INT 2
54899: GREATER
54900: IFFALSE 55037
// begin if unit_hex [ i ] = hex_list_2 + 0 then
54902: LD_VAR 0 7
54906: PUSH
54907: LD_VAR 0 1
54911: ARRAY
54912: PUSH
54913: LD_VAR 0 6
54917: PUSH
54918: LD_INT 0
54920: PLUS
54921: EQUAL
54922: IFFALSE 54965
// ComAgressiveMove ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) else
54924: LD_VAR 0 1
54928: PPUSH
54929: LD_VAR 0 8
54933: PUSH
54934: LD_VAR 0 1
54938: ARRAY
54939: PUSH
54940: LD_INT 1
54942: ARRAY
54943: PPUSH
54944: LD_VAR 0 8
54948: PUSH
54949: LD_VAR 0 1
54953: ARRAY
54954: PUSH
54955: LD_INT 2
54957: ARRAY
54958: PPUSH
54959: CALL_OW 114
54963: GO 55004
// ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
54965: LD_VAR 0 1
54969: PPUSH
54970: LD_VAR 0 8
54974: PUSH
54975: LD_VAR 0 1
54979: ARRAY
54980: PUSH
54981: LD_INT 1
54983: ARRAY
54984: PPUSH
54985: LD_VAR 0 8
54989: PUSH
54990: LD_VAR 0 1
54994: ARRAY
54995: PUSH
54996: LD_INT 2
54998: ARRAY
54999: PPUSH
55000: CALL_OW 111
// if unit_hex [ i ] = hex_list_2 + 0 then
55004: LD_VAR 0 7
55008: PUSH
55009: LD_VAR 0 1
55013: ARRAY
55014: PUSH
55015: LD_VAR 0 6
55019: PUSH
55020: LD_INT 0
55022: PLUS
55023: EQUAL
55024: IFFALSE 55035
// AddComHold ( i ) ;
55026: LD_VAR 0 1
55030: PPUSH
55031: CALL_OW 200
// end else
55035: GO 55233
// if unit_hex [ i ] < hex_list_2 then
55037: LD_VAR 0 7
55041: PUSH
55042: LD_VAR 0 1
55046: ARRAY
55047: PUSH
55048: LD_VAR 0 6
55052: LESS
55053: IFFALSE 55233
// begin unit_hex = Replace ( unit_hex , i , unit_hex [ i ] + 1 ) ;
55055: LD_ADDR_VAR 0 7
55059: PUSH
55060: LD_VAR 0 7
55064: PPUSH
55065: LD_VAR 0 1
55069: PPUSH
55070: LD_VAR 0 7
55074: PUSH
55075: LD_VAR 0 1
55079: ARRAY
55080: PUSH
55081: LD_INT 1
55083: PLUS
55084: PPUSH
55085: CALL_OW 1
55089: ST_TO_ADDR
// k = 0 ;
55090: LD_ADDR_VAR 0 9
55094: PUSH
55095: LD_INT 0
55097: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list_2 [ unit_hex [ i ] ] [ 1 ] , hex_list_2 [ unit_hex [ i ] ] [ 2 ] , 1 , false ) ;
55098: LD_ADDR_VAR 0 2
55102: PUSH
55103: LD_VAR 0 6
55107: PUSH
55108: LD_VAR 0 7
55112: PUSH
55113: LD_VAR 0 1
55117: ARRAY
55118: ARRAY
55119: PUSH
55120: LD_INT 1
55122: ARRAY
55123: PPUSH
55124: LD_VAR 0 6
55128: PUSH
55129: LD_VAR 0 7
55133: PUSH
55134: LD_VAR 0 1
55138: ARRAY
55139: ARRAY
55140: PUSH
55141: LD_INT 2
55143: ARRAY
55144: PPUSH
55145: LD_INT 1
55147: PPUSH
55148: LD_INT 0
55150: PPUSH
55151: CALL_OW 17
55155: ST_TO_ADDR
// k = k + 1 ;
55156: LD_ADDR_VAR 0 9
55160: PUSH
55161: LD_VAR 0 9
55165: PUSH
55166: LD_INT 1
55168: PLUS
55169: ST_TO_ADDR
// until HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 or k >= 10 ;
55170: LD_VAR 0 2
55174: PUSH
55175: LD_INT 1
55177: ARRAY
55178: PPUSH
55179: LD_VAR 0 2
55183: PUSH
55184: LD_INT 2
55186: ARRAY
55187: PPUSH
55188: CALL_OW 428
55192: PUSH
55193: LD_INT 0
55195: GREATEREQUAL
55196: PUSH
55197: LD_VAR 0 9
55201: PUSH
55202: LD_INT 10
55204: GREATEREQUAL
55205: OR
55206: IFFALSE 55098
// rand_hexes = Replace ( rand_hexes , i , val ) ;
55208: LD_ADDR_VAR 0 8
55212: PUSH
55213: LD_VAR 0 8
55217: PPUSH
55218: LD_VAR 0 1
55222: PPUSH
55223: LD_VAR 0 2
55227: PPUSH
55228: CALL_OW 1
55232: ST_TO_ADDR
// end ; end ;
55233: GO 54854
55235: POP
55236: POP
// until false ;
55237: LD_INT 0
55239: IFFALSE 54380
// end ;
55241: PPOPN 9
55243: END
// every 0 0$1 + 0 0$0.9 trigger game_phase = 3 do var old_man , x , y , temp_list , dist ; var hex , hex_list_before , hex_list_after ;
55244: LD_EXP 88
55248: PUSH
55249: LD_INT 3
55251: EQUAL
55252: IFFALSE 56874
55254: GO 55256
55256: DISABLE
55257: LD_INT 0
55259: PPUSH
55260: PPUSH
55261: PPUSH
55262: PPUSH
55263: PPUSH
55264: PPUSH
55265: PPUSH
55266: PPUSH
// begin while ( ai_vehicles_attack [ 3 ] > 0 or ai_attacking_scientists [ 3 ] > 0 or ai_attacking_soldiers [ 3 ] > 0 ) and russian_attack_strategy <> 1 do
55267: LD_EXP 40
55271: PUSH
55272: LD_INT 3
55274: ARRAY
55275: PUSH
55276: LD_INT 0
55278: GREATER
55279: PUSH
55280: LD_EXP 64
55284: PUSH
55285: LD_INT 3
55287: ARRAY
55288: PUSH
55289: LD_INT 0
55291: GREATER
55292: OR
55293: PUSH
55294: LD_EXP 63
55298: PUSH
55299: LD_INT 3
55301: ARRAY
55302: PUSH
55303: LD_INT 0
55305: GREATER
55306: OR
55307: PUSH
55308: LD_EXP 83
55312: PUSH
55313: LD_INT 1
55315: NONEQUAL
55316: AND
55317: IFFALSE 55328
// wait ( 0 0$2 ) ;
55319: LD_INT 70
55321: PPUSH
55322: CALL_OW 67
55326: GO 55267
// if PlayerAtEasternBorder then
55328: CALL 31564 0 0
55332: IFFALSE 55394
// begin hex_list_before = [ [ 127 , 42 ] , [ 139 , 45 ] ] ;
55334: LD_ADDR_VAR 0 7
55338: PUSH
55339: LD_INT 127
55341: PUSH
55342: LD_INT 42
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 139
55351: PUSH
55352: LD_INT 45
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: ST_TO_ADDR
// hex_list_after = [ [ 139 , 45 ] , [ 138 , 39 ] ] ;
55363: LD_ADDR_VAR 0 8
55367: PUSH
55368: LD_INT 139
55370: PUSH
55371: LD_INT 45
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 138
55380: PUSH
55381: LD_INT 39
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: ST_TO_ADDR
// end else
55392: GO 55463
// begin hex_list_before = [ [ 119 , 55 ] , [ 124 , 73 ] , [ 121 , 86 ] ] ;
55394: LD_ADDR_VAR 0 7
55398: PUSH
55399: LD_INT 119
55401: PUSH
55402: LD_INT 55
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 124
55411: PUSH
55412: LD_INT 73
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 121
55421: PUSH
55422: LD_INT 86
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: ST_TO_ADDR
// hex_list_after = [ [ 121 , 99 ] , [ 141 , 118 ] ] ;
55434: LD_ADDR_VAR 0 8
55438: PUSH
55439: LD_INT 121
55441: PUSH
55442: LD_INT 99
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 141
55451: PUSH
55452: LD_INT 118
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// end ; temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55463: LD_ADDR_VAR 0 4
55467: PUSH
55468: LD_INT 22
55470: PUSH
55471: LD_EXP 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: LD_INT 30
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 30
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: LIST
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PPUSH
55512: CALL_OW 69
55516: ST_TO_ADDR
// if temp_list > 0 then
55517: LD_VAR 0 4
55521: PUSH
55522: LD_INT 0
55524: GREATER
55525: IFFALSE 55566
// hex = [ GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ] else
55527: LD_ADDR_VAR 0 6
55531: PUSH
55532: LD_VAR 0 4
55536: PUSH
55537: LD_INT 1
55539: ARRAY
55540: PPUSH
55541: CALL_OW 250
55545: PUSH
55546: LD_VAR 0 4
55550: PUSH
55551: LD_INT 1
55553: ARRAY
55554: PPUSH
55555: CALL_OW 251
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: ST_TO_ADDR
55564: GO 55604
// if PlayerAtEasternBorder then
55566: CALL 31564 0 0
55570: IFFALSE 55589
// hex = [ 144 , 65 ] else
55572: LD_ADDR_VAR 0 6
55576: PUSH
55577: LD_INT 144
55579: PUSH
55580: LD_INT 65
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: ST_TO_ADDR
55587: GO 55604
// hex = [ 99 , 110 ] ;
55589: LD_ADDR_VAR 0 6
55593: PUSH
55594: LD_INT 99
55596: PUSH
55597: LD_INT 110
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: ST_TO_ADDR
// hex_list_before = hex_list_before ^ [ hex ] ;
55604: LD_ADDR_VAR 0 7
55608: PUSH
55609: LD_VAR 0 7
55613: PUSH
55614: LD_VAR 0 6
55618: PUSH
55619: EMPTY
55620: LIST
55621: ADD
55622: ST_TO_ADDR
// SetDir ( Khattam , 5 ) ;
55623: LD_EXP 26
55627: PPUSH
55628: LD_INT 5
55630: PPUSH
55631: CALL_OW 233
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] , [ f_ok ] ] ) ;
55635: LD_ADDR_VAR 0 4
55639: PUSH
55640: LD_INT 22
55642: PUSH
55643: LD_EXP 6
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 30
55657: PUSH
55658: LD_INT 6
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 30
55667: PUSH
55668: LD_INT 7
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 30
55677: PUSH
55678: LD_INT 8
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 50
55693: PUSH
55694: EMPTY
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: PPUSH
55702: CALL_OW 69
55706: ST_TO_ADDR
// if temp_list > 0 then
55707: LD_VAR 0 4
55711: PUSH
55712: LD_INT 0
55714: GREATER
55715: IFFALSE 55843
// begin while not PlaceHumanInUnit ( Khattam , temp_list [ 1 ] ) do
55717: LD_EXP 26
55721: PPUSH
55722: LD_VAR 0 4
55726: PUSH
55727: LD_INT 1
55729: ARRAY
55730: PPUSH
55731: CALL_OW 52
55735: NOT
55736: IFFALSE 55841
// begin if not IsOk ( temp_list [ 1 ] ) or UnitsInside ( temp_list [ 1 ] ) + 0 = 6 then
55738: LD_VAR 0 4
55742: PUSH
55743: LD_INT 1
55745: ARRAY
55746: PPUSH
55747: CALL_OW 302
55751: NOT
55752: PUSH
55753: LD_VAR 0 4
55757: PUSH
55758: LD_INT 1
55760: ARRAY
55761: PPUSH
55762: CALL_OW 313
55766: PUSH
55767: LD_INT 0
55769: PLUS
55770: PUSH
55771: LD_INT 6
55773: EQUAL
55774: OR
55775: IFFALSE 55832
// begin while not PlaceUnitXYR ( Khattam , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 4 , false ) do
55777: LD_EXP 26
55781: PPUSH
55782: LD_EXP 41
55786: PUSH
55787: LD_INT 1
55789: ARRAY
55790: PUSH
55791: LD_INT 1
55793: ARRAY
55794: PPUSH
55795: LD_EXP 41
55799: PUSH
55800: LD_INT 1
55802: ARRAY
55803: PUSH
55804: LD_INT 2
55806: ARRAY
55807: PPUSH
55808: LD_INT 4
55810: PPUSH
55811: LD_INT 0
55813: PPUSH
55814: CALL_OW 50
55818: NOT
55819: IFFALSE 55830
// wait ( 0 0$2 ) ;
55821: LD_INT 70
55823: PPUSH
55824: CALL_OW 67
55828: GO 55777
// break ;
55830: GO 55841
// end ; wait ( 0 0$2 ) ;
55832: LD_INT 70
55834: PPUSH
55835: CALL_OW 67
// end ;
55839: GO 55717
// end else
55841: GO 55896
// begin while not PlaceUnitXYR ( Khattam , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 4 , false ) do
55843: LD_EXP 26
55847: PPUSH
55848: LD_EXP 41
55852: PUSH
55853: LD_INT 1
55855: ARRAY
55856: PUSH
55857: LD_INT 1
55859: ARRAY
55860: PPUSH
55861: LD_EXP 41
55865: PUSH
55866: LD_INT 1
55868: ARRAY
55869: PUSH
55870: LD_INT 2
55872: ARRAY
55873: PPUSH
55874: LD_INT 4
55876: PPUSH
55877: LD_INT 0
55879: PPUSH
55880: CALL_OW 50
55884: NOT
55885: IFFALSE 55896
// wait ( 0 0$2 ) ;
55887: LD_INT 70
55889: PPUSH
55890: CALL_OW 67
55894: GO 55843
// end ; SetAttitude ( you , americans_alt , att_neutral , true ) ;
55896: LD_EXP 2
55900: PPUSH
55901: LD_EXP 8
55905: PPUSH
55906: LD_INT 0
55908: PPUSH
55909: LD_INT 1
55911: PPUSH
55912: CALL_OW 80
// hex = 1 ;
55916: LD_ADDR_VAR 0 6
55920: PUSH
55921: LD_INT 1
55923: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55924: LD_INT 35
55926: PPUSH
55927: CALL_OW 67
// if GetDistUnitXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) > 3 then
55931: LD_EXP 26
55935: PPUSH
55936: LD_VAR 0 7
55940: PUSH
55941: LD_VAR 0 6
55945: ARRAY
55946: PUSH
55947: LD_INT 1
55949: ARRAY
55950: PPUSH
55951: LD_VAR 0 7
55955: PUSH
55956: LD_VAR 0 6
55960: ARRAY
55961: PUSH
55962: LD_INT 2
55964: ARRAY
55965: PPUSH
55966: CALL_OW 297
55970: PUSH
55971: LD_INT 3
55973: GREATER
55974: IFFALSE 56017
// ComMoveXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
55976: LD_EXP 26
55980: PPUSH
55981: LD_VAR 0 7
55985: PUSH
55986: LD_VAR 0 6
55990: ARRAY
55991: PUSH
55992: LD_INT 1
55994: ARRAY
55995: PPUSH
55996: LD_VAR 0 7
56000: PUSH
56001: LD_VAR 0 6
56005: ARRAY
56006: PUSH
56007: LD_INT 2
56009: ARRAY
56010: PPUSH
56011: CALL_OW 111
56015: GO 56043
// if hex < hex_list_before then
56017: LD_VAR 0 6
56021: PUSH
56022: LD_VAR 0 7
56026: LESS
56027: IFFALSE 56043
// hex = hex + 1 ;
56029: LD_ADDR_VAR 0 6
56033: PUSH
56034: LD_VAR 0 6
56038: PUSH
56039: LD_INT 1
56041: PLUS
56042: ST_TO_ADDR
// until See ( you , Khattam ) or IsDead ( Khattam ) ;
56043: LD_EXP 2
56047: PPUSH
56048: LD_EXP 26
56052: PPUSH
56053: CALL_OW 292
56057: PUSH
56058: LD_EXP 26
56062: PPUSH
56063: CALL_OW 301
56067: OR
56068: IFFALSE 55924
// if See ( you , Khattam ) then
56070: LD_EXP 2
56074: PPUSH
56075: LD_EXP 26
56079: PPUSH
56080: CALL_OW 292
56084: IFFALSE 56874
// begin CenterOnUnits ( Khattam ) ;
56086: LD_EXP 26
56090: PPUSH
56091: CALL_OW 85
// DialogueOn ;
56095: CALL_OW 6
// ForceSay ( Khattam , D9-Kh-1 ) ;
56099: LD_EXP 26
56103: PPUSH
56104: LD_STRING D9-Kh-1
56106: PPUSH
56107: CALL_OW 91
// if IsOk ( Oswald ) then
56111: LD_EXP 11
56115: PPUSH
56116: CALL_OW 302
56120: IFFALSE 56156
// begin if oswald_is_substitute then
56122: LD_EXP 80
56126: IFFALSE 56142
// Say ( Oswald , D9-Os_sub-1 ) else
56128: LD_EXP 11
56132: PPUSH
56133: LD_STRING D9-Os_sub-1
56135: PPUSH
56136: CALL_OW 88
56140: GO 56154
// Say ( Oswald , D9-Os-1 ) ;
56142: LD_EXP 11
56146: PPUSH
56147: LD_STRING D9-Os-1
56149: PPUSH
56150: CALL_OW 88
// end else
56154: GO 56168
// ForceSay ( Heike , D9-H-1 ) ;
56156: LD_EXP 9
56160: PPUSH
56161: LD_STRING D9-H-1
56163: PPUSH
56164: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-2 ) ;
56168: LD_EXP 26
56172: PPUSH
56173: LD_STRING D9-Kh-2
56175: PPUSH
56176: CALL_OW 91
// ForceSay ( Heike , D9-H-2 ) ;
56180: LD_EXP 9
56184: PPUSH
56185: LD_STRING D9-H-2
56187: PPUSH
56188: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-3 ) ;
56192: LD_EXP 26
56196: PPUSH
56197: LD_STRING D9-Kh-3
56199: PPUSH
56200: CALL_OW 91
// dwait ( 0 0$0.2 ) ;
56204: LD_INT 7
56206: PPUSH
56207: CALL_OW 68
// khattam_choice = Query ( QKhattamJoin ) ;
56211: LD_ADDR_EXP 95
56215: PUSH
56216: LD_STRING QKhattamJoin
56218: PPUSH
56219: CALL_OW 97
56223: ST_TO_ADDR
// case khattam_choice of 1 :
56224: LD_EXP 95
56228: PUSH
56229: LD_INT 1
56231: DOUBLE
56232: EQUAL
56233: IFTRUE 56237
56235: GO 56665
56237: POP
// begin ForceSay ( Heike , D9-H-1-1 ) ;
56238: LD_EXP 9
56242: PPUSH
56243: LD_STRING D9-H-1-1
56245: PPUSH
56246: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-1-1 ) ;
56250: LD_EXP 26
56254: PPUSH
56255: LD_STRING D9-Kh-1-1
56257: PPUSH
56258: CALL_OW 91
// DialogueOff ;
56262: CALL_OW 7
// SetAttitude ( you , americans_alt , att_friend , true ) ;
56266: LD_EXP 2
56270: PPUSH
56271: LD_EXP 8
56275: PPUSH
56276: LD_INT 1
56278: PPUSH
56279: LD_INT 1
56281: PPUSH
56282: CALL_OW 80
// while FilterAllUnits ( [ [ f_side , americans ] , [ f_ok ] , [ f_dist , Khattam , 17 ] ] ) > 0 do
56286: LD_INT 22
56288: PUSH
56289: LD_EXP 6
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 50
56300: PUSH
56301: EMPTY
56302: LIST
56303: PUSH
56304: LD_INT 91
56306: PUSH
56307: LD_EXP 26
56311: PUSH
56312: LD_INT 17
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: LIST
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: LIST
56324: PPUSH
56325: CALL_OW 69
56329: PUSH
56330: LD_INT 0
56332: GREATER
56333: IFFALSE 56497
// begin dist = GetDistUnitXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) ;
56335: LD_ADDR_VAR 0 5
56339: PUSH
56340: LD_EXP 26
56344: PPUSH
56345: LD_VAR 0 7
56349: PUSH
56350: LD_VAR 0 6
56354: ARRAY
56355: PUSH
56356: LD_INT 1
56358: ARRAY
56359: PPUSH
56360: LD_VAR 0 7
56364: PUSH
56365: LD_VAR 0 6
56369: ARRAY
56370: PUSH
56371: LD_INT 2
56373: ARRAY
56374: PPUSH
56375: CALL_OW 297
56379: ST_TO_ADDR
// if not ( dist <= 3 or ( hex = hex_list_before + 0 and dist <= 7 ) ) then
56380: LD_VAR 0 5
56384: PUSH
56385: LD_INT 3
56387: LESSEQUAL
56388: PUSH
56389: LD_VAR 0 6
56393: PUSH
56394: LD_VAR 0 7
56398: PUSH
56399: LD_INT 0
56401: PLUS
56402: EQUAL
56403: PUSH
56404: LD_VAR 0 5
56408: PUSH
56409: LD_INT 7
56411: LESSEQUAL
56412: AND
56413: OR
56414: NOT
56415: IFFALSE 56458
// ComMoveXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
56417: LD_EXP 26
56421: PPUSH
56422: LD_VAR 0 7
56426: PUSH
56427: LD_VAR 0 6
56431: ARRAY
56432: PUSH
56433: LD_INT 1
56435: ARRAY
56436: PPUSH
56437: LD_VAR 0 7
56441: PUSH
56442: LD_VAR 0 6
56446: ARRAY
56447: PUSH
56448: LD_INT 2
56450: ARRAY
56451: PPUSH
56452: CALL_OW 111
56456: GO 56488
// if hex < hex_list_before then
56458: LD_VAR 0 6
56462: PUSH
56463: LD_VAR 0 7
56467: LESS
56468: IFFALSE 56486
// hex = hex + 1 else
56470: LD_ADDR_VAR 0 6
56474: PUSH
56475: LD_VAR 0 6
56479: PUSH
56480: LD_INT 1
56482: PLUS
56483: ST_TO_ADDR
56484: GO 56488
// break ;
56486: GO 56497
// wait ( 0 0$1 ) ;
56488: LD_INT 35
56490: PPUSH
56491: CALL_OW 67
// end ;
56495: GO 56286
// PrepareNewCharacter ( Khatam ) ;
56497: LD_STRING Khatam
56499: PPUSH
56500: CALL_OW 26
// uc_side = you ;
56504: LD_ADDR_OWVAR 20
56508: PUSH
56509: LD_EXP 2
56513: ST_TO_ADDR
// uc_nation = nation_arabian ;
56514: LD_ADDR_OWVAR 21
56518: PUSH
56519: LD_INT 2
56521: ST_TO_ADDR
// old_man = Khattam ;
56522: LD_ADDR_VAR 0 1
56526: PUSH
56527: LD_EXP 26
56531: ST_TO_ADDR
// Khattam = CreateHuman ;
56532: LD_ADDR_EXP 26
56536: PUSH
56537: CALL_OW 44
56541: ST_TO_ADDR
// hc_importance = 0 ;
56542: LD_ADDR_OWVAR 32
56546: PUSH
56547: LD_INT 0
56549: ST_TO_ADDR
// CopySkills ( old_man , Khattam ) ;
56550: LD_VAR 0 1
56554: PPUSH
56555: LD_EXP 26
56559: PPUSH
56560: CALL_OW 510
// x = GetX ( old_man ) ;
56564: LD_ADDR_VAR 0 2
56568: PUSH
56569: LD_VAR 0 1
56573: PPUSH
56574: CALL_OW 250
56578: ST_TO_ADDR
// y = GetY ( old_man ) ;
56579: LD_ADDR_VAR 0 3
56583: PUSH
56584: LD_VAR 0 1
56588: PPUSH
56589: CALL_OW 251
56593: ST_TO_ADDR
// SetDir ( Khattam , GetDir ( old_man ) ) ;
56594: LD_EXP 26
56598: PPUSH
56599: LD_VAR 0 1
56603: PPUSH
56604: CALL_OW 254
56608: PPUSH
56609: CALL_OW 233
// SetLives ( Khattam , GetLives ( old_man ) ) ;
56613: LD_EXP 26
56617: PPUSH
56618: LD_VAR 0 1
56622: PPUSH
56623: CALL_OW 256
56627: PPUSH
56628: CALL_OW 234
// RemoveUnit ( old_man ) ;
56632: LD_VAR 0 1
56636: PPUSH
56637: CALL_OW 64
// PlaceUnitXY ( Khattam , x , y , false ) ;
56641: LD_EXP 26
56645: PPUSH
56646: LD_VAR 0 2
56650: PPUSH
56651: LD_VAR 0 3
56655: PPUSH
56656: LD_INT 0
56658: PPUSH
56659: CALL_OW 48
// end ; 2 :
56663: GO 56705
56665: LD_INT 2
56667: DOUBLE
56668: EQUAL
56669: IFTRUE 56673
56671: GO 56704
56673: POP
// begin ForceSay ( Heike , D9-H-2-1 ) ;
56674: LD_EXP 9
56678: PPUSH
56679: LD_STRING D9-H-2-1
56681: PPUSH
56682: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-2-1 ) ;
56686: LD_EXP 26
56690: PPUSH
56691: LD_STRING D9-Kh-2-1
56693: PPUSH
56694: CALL_OW 91
// DialogueOff ;
56698: CALL_OW 7
// end ; end ;
56702: GO 56705
56704: POP
// ComStop ( Khattam ) ;
56705: LD_EXP 26
56709: PPUSH
56710: CALL_OW 141
// if khattam_choice = 2 then
56714: LD_EXP 95
56718: PUSH
56719: LD_INT 2
56721: EQUAL
56722: IFFALSE 56874
// begin hex = 1 ;
56724: LD_ADDR_VAR 0 6
56728: PUSH
56729: LD_INT 1
56731: ST_TO_ADDR
// repeat if GetDistUnitXY ( Khattam , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) > 3 then
56732: LD_EXP 26
56736: PPUSH
56737: LD_VAR 0 8
56741: PUSH
56742: LD_VAR 0 6
56746: ARRAY
56747: PUSH
56748: LD_INT 1
56750: ARRAY
56751: PPUSH
56752: LD_VAR 0 8
56756: PUSH
56757: LD_VAR 0 6
56761: ARRAY
56762: PUSH
56763: LD_INT 2
56765: ARRAY
56766: PPUSH
56767: CALL_OW 297
56771: PUSH
56772: LD_INT 3
56774: GREATER
56775: IFFALSE 56818
// ComMoveXY ( Khattam , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) else
56777: LD_EXP 26
56781: PPUSH
56782: LD_VAR 0 8
56786: PUSH
56787: LD_VAR 0 6
56791: ARRAY
56792: PUSH
56793: LD_INT 1
56795: ARRAY
56796: PPUSH
56797: LD_VAR 0 8
56801: PUSH
56802: LD_VAR 0 6
56806: ARRAY
56807: PUSH
56808: LD_INT 2
56810: ARRAY
56811: PPUSH
56812: CALL_OW 111
56816: GO 56855
// if hex < hex_list_after then
56818: LD_VAR 0 6
56822: PUSH
56823: LD_VAR 0 8
56827: LESS
56828: IFFALSE 56846
// hex = hex + 1 else
56830: LD_ADDR_VAR 0 6
56834: PUSH
56835: LD_VAR 0 6
56839: PUSH
56840: LD_INT 1
56842: PLUS
56843: ST_TO_ADDR
56844: GO 56855
// RemoveUnit ( Khattam ) ;
56846: LD_EXP 26
56850: PPUSH
56851: CALL_OW 64
// wait ( 0 0$1 ) ;
56855: LD_INT 35
56857: PPUSH
56858: CALL_OW 67
// until not IsPlaced ( Khattam ) ;
56862: LD_EXP 26
56866: PPUSH
56867: CALL_OW 305
56871: NOT
56872: IFFALSE 56732
// end ; end ; end ;
56874: PPOPN 8
56876: END
// every 0 0$1 + 0 0$0.8 trigger game_phase = 3 do var init_buildings , init_humans , temp_list , temp_unit ;
56877: LD_EXP 88
56881: PUSH
56882: LD_INT 3
56884: EQUAL
56885: IFFALSE 57458
56887: GO 56889
56889: DISABLE
56890: LD_INT 0
56892: PPUSH
56893: PPUSH
56894: PPUSH
56895: PPUSH
// begin init_buildings = GetAmBuildings ;
56896: LD_ADDR_VAR 0 1
56900: PUSH
56901: CALL 57461 0 0
56905: ST_TO_ADDR
// init_humans = GetAmHumans ;
56906: LD_ADDR_VAR 0 2
56910: PUSH
56911: CALL 57548 0 0
56915: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
56916: LD_INT 175
56918: PPUSH
56919: CALL_OW 67
// until init_buildings >= GetAmBuildings * 2 or init_humans >= GetAmHumans * 2 ;
56923: LD_VAR 0 1
56927: PUSH
56928: CALL 57461 0 0
56932: PUSH
56933: LD_INT 2
56935: MUL
56936: GREATEREQUAL
56937: PUSH
56938: LD_VAR 0 2
56942: PUSH
56943: CALL 57548 0 0
56947: PUSH
56948: LD_INT 2
56950: MUL
56951: GREATEREQUAL
56952: OR
56953: IFFALSE 56916
// DialogueOn ;
56955: CALL_OW 6
// SayRadio ( Simms , D10-Simm-1 ) ;
56959: LD_EXP 24
56963: PPUSH
56964: LD_STRING D10-Simm-1
56966: PPUSH
56967: CALL_OW 94
// ForceSay ( Heike , D10-H-1 ) ;
56971: LD_EXP 9
56975: PPUSH
56976: LD_STRING D10-H-1
56978: PPUSH
56979: CALL_OW 91
// SayRadio ( Simms , D10-Simm-2 ) ;
56983: LD_EXP 24
56987: PPUSH
56988: LD_STRING D10-Simm-2
56990: PPUSH
56991: CALL_OW 94
// ForceSay ( Heike , D10-H-2 ) ;
56995: LD_EXP 9
56999: PPUSH
57000: LD_STRING D10-H-2
57002: PPUSH
57003: CALL_OW 91
// SayRadio ( Simms , D10-Simm-3 ) ;
57007: LD_EXP 24
57011: PPUSH
57012: LD_STRING D10-Simm-3
57014: PPUSH
57015: CALL_OW 94
// ForceSay ( Heike , D10-H-3 ) ;
57019: LD_EXP 9
57023: PPUSH
57024: LD_STRING D10-H-3
57026: PPUSH
57027: CALL_OW 91
// SayRadio ( Simms , D10-Simm-4 ) ;
57031: LD_EXP 24
57035: PPUSH
57036: LD_STRING D10-Simm-4
57038: PPUSH
57039: CALL_OW 94
// temp_list = UnitFilter ( [ Kowalski , Suze , Kurt , Dwayne ] , [ f_alive ] ) ;
57043: LD_ADDR_VAR 0 3
57047: PUSH
57048: LD_EXP 13
57052: PUSH
57053: LD_EXP 15
57057: PUSH
57058: LD_EXP 17
57062: PUSH
57063: LD_EXP 18
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: PPUSH
57074: LD_INT 51
57076: PUSH
57077: EMPTY
57078: LIST
57079: PPUSH
57080: CALL_OW 72
57084: ST_TO_ADDR
// if temp_list = 0 then
57085: LD_VAR 0 3
57089: PUSH
57090: LD_INT 0
57092: EQUAL
57093: IFFALSE 57223
// temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
57095: LD_ADDR_VAR 0 3
57099: PUSH
57100: LD_INT 22
57102: PUSH
57103: LD_EXP 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 21
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PPUSH
57126: CALL_OW 69
57130: PUSH
57131: LD_EXP 2
57135: PPUSH
57136: CALL 43788 0 1
57140: PUSH
57141: LD_EXP 9
57145: PUSH
57146: LD_EXP 10
57150: PUSH
57151: LD_EXP 11
57155: PUSH
57156: LD_EXP 12
57160: PUSH
57161: LD_EXP 13
57165: PUSH
57166: LD_EXP 14
57170: PUSH
57171: LD_EXP 15
57175: PUSH
57176: LD_EXP 16
57180: PUSH
57181: LD_EXP 17
57185: PUSH
57186: LD_EXP 18
57190: PUSH
57191: LD_EXP 19
57195: PUSH
57196: LD_EXP 20
57200: PUSH
57201: LD_EXP 21
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: ADD
57221: DIFF
57222: ST_TO_ADDR
// if temp_list > 0 then
57223: LD_VAR 0 3
57227: PUSH
57228: LD_INT 0
57230: GREATER
57231: IFFALSE 57424
// begin temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
57233: LD_ADDR_VAR 0 4
57237: PUSH
57238: LD_VAR 0 3
57242: PUSH
57243: LD_INT 1
57245: PPUSH
57246: LD_VAR 0 3
57250: PPUSH
57251: CALL_OW 12
57255: ARRAY
57256: ST_TO_ADDR
// case temp_unit of Kowalski :
57257: LD_VAR 0 4
57261: PUSH
57262: LD_EXP 13
57266: DOUBLE
57267: EQUAL
57268: IFTRUE 57272
57270: GO 57287
57272: POP
// ForceSay ( temp_unit , D10-Ko-1 ) ; Suze :
57273: LD_VAR 0 4
57277: PPUSH
57278: LD_STRING D10-Ko-1
57280: PPUSH
57281: CALL_OW 91
57285: GO 57424
57287: LD_EXP 15
57291: DOUBLE
57292: EQUAL
57293: IFTRUE 57297
57295: GO 57312
57297: POP
// ForceSay ( temp_unit , D10-Su-1 ) ; Kurt :
57298: LD_VAR 0 4
57302: PPUSH
57303: LD_STRING D10-Su-1
57305: PPUSH
57306: CALL_OW 91
57310: GO 57424
57312: LD_EXP 17
57316: DOUBLE
57317: EQUAL
57318: IFTRUE 57322
57320: GO 57357
57322: POP
// begin if kurt_is_substitute then
57323: LD_EXP 81
57327: IFFALSE 57343
// ForceSay ( temp_unit , D10-Ku-1 ) else
57329: LD_VAR 0 4
57333: PPUSH
57334: LD_STRING D10-Ku-1
57336: PPUSH
57337: CALL_OW 91
57341: GO 57355
// ForceSay ( temp_unit , D10-Ku-1 ) ;
57343: LD_VAR 0 4
57347: PPUSH
57348: LD_STRING D10-Ku-1
57350: PPUSH
57351: CALL_OW 91
// end ; Dwayne :
57355: GO 57424
57357: LD_EXP 18
57361: DOUBLE
57362: EQUAL
57363: IFTRUE 57367
57365: GO 57382
57367: POP
// ForceSay ( temp_unit , D10-Dw-1 ) ; else
57368: LD_VAR 0 4
57372: PPUSH
57373: LD_STRING D10-Dw-1
57375: PPUSH
57376: CALL_OW 91
57380: GO 57424
57382: POP
// if GetSex ( temp_unit ) = sex_male then
57383: LD_VAR 0 4
57387: PPUSH
57388: CALL_OW 258
57392: PUSH
57393: LD_INT 1
57395: EQUAL
57396: IFFALSE 57412
// ForceSay ( temp_unit , D10-SomeM-1 ) else
57398: LD_VAR 0 4
57402: PPUSH
57403: LD_STRING D10-SomeM-1
57405: PPUSH
57406: CALL_OW 91
57410: GO 57424
// ForceSay ( temp_unit , D10-SomeF-1 ) ; end ;
57412: LD_VAR 0 4
57416: PPUSH
57417: LD_STRING D10-SomeF-1
57419: PPUSH
57420: CALL_OW 91
// end ; dwait ( 0 0$0.9 ) ;
57424: LD_INT 32
57426: PPUSH
57427: CALL_OW 68
// ForceSay ( Heike , D10-H-4 ) ;
57431: LD_EXP 9
57435: PPUSH
57436: LD_STRING D10-H-4
57438: PPUSH
57439: CALL_OW 91
// dwait ( 0 0$0.2 ) ;
57443: LD_INT 7
57445: PPUSH
57446: CALL_OW 68
// EndMission ;
57450: CALL 57592 0 0
// DialogueOff ;
57454: CALL_OW 7
// end ;
57458: PPOPN 4
57460: END
// function GetAmBuildings ; begin
57461: LD_INT 0
57463: PPUSH
// result = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_building ] ] ) diff [ b_ext_computer , b_ext_gun , b_ext_laser , b_ext_noncombat , b_ext_radar , b_ext_radio , b_ext_rocket , b_ext_siberium , b_ext_stitch , b_ext_track ] ;
57464: LD_ADDR_VAR 0 1
57468: PUSH
57469: LD_INT 22
57471: PUSH
57472: LD_EXP 6
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 21
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PPUSH
57495: CALL_OW 69
57499: PUSH
57500: LD_INT 24
57502: PUSH
57503: LD_INT 17
57505: PUSH
57506: LD_INT 25
57508: PUSH
57509: LD_INT 19
57511: PUSH
57512: LD_INT 20
57514: PUSH
57515: LD_INT 22
57517: PUSH
57518: LD_INT 18
57520: PUSH
57521: LD_INT 21
57523: PUSH
57524: LD_INT 23
57526: PUSH
57527: LD_INT 16
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: DIFF
57542: ST_TO_ADDR
// end ;
57543: LD_VAR 0 1
57547: RET
// function GetAmHumans ; begin
57548: LD_INT 0
57550: PPUSH
// result = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
57551: LD_ADDR_VAR 0 1
57555: PUSH
57556: LD_INT 22
57558: PUSH
57559: LD_EXP 6
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 21
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PPUSH
57582: CALL_OW 69
57586: ST_TO_ADDR
// end ; end_of_file
57587: LD_VAR 0 1
57591: RET
// export function EndMission ; var val , all_list , un_list , name_list ; begin
57592: LD_INT 0
57594: PPUSH
57595: PPUSH
57596: PPUSH
57597: PPUSH
57598: PPUSH
// if original_gensher_people + 0 = saved_gensher_people + 0 then
57599: LD_EXP 82
57603: PUSH
57604: LD_INT 0
57606: PLUS
57607: PUSH
57608: LD_EXP 94
57612: PUSH
57613: LD_INT 0
57615: PLUS
57616: EQUAL
57617: IFFALSE 57629
// val = 1 else
57619: LD_ADDR_VAR 0 2
57623: PUSH
57624: LD_INT 1
57626: ST_TO_ADDR
57627: GO 57638
// val = - 1 ;
57629: LD_ADDR_VAR 0 2
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: ST_TO_ADDR
// AddMedal ( GensherPeople , val ) ;
57638: LD_STRING GensherPeople
57640: PPUSH
57641: LD_VAR 0 2
57645: PPUSH
57646: CALL_OW 101
// if val = 1 then
57650: LD_VAR 0 2
57654: PUSH
57655: LD_INT 1
57657: EQUAL
57658: IFFALSE 57672
// SaveVariable ( 1 , AllGensherPeopleSaved_11_cont ) else
57660: LD_INT 1
57662: PPUSH
57663: LD_STRING AllGensherPeopleSaved_11_cont
57665: PPUSH
57666: CALL_OW 39
57670: GO 57682
// SaveVariable ( 0 , AllGensherPeopleSaved_11_cont ) ;
57672: LD_INT 0
57674: PPUSH
57675: LD_STRING AllGensherPeopleSaved_11_cont
57677: PPUSH
57678: CALL_OW 39
// if cameras_placed then
57682: LD_EXP 91
57686: IFFALSE 57698
// val = 1 else
57688: LD_ADDR_VAR 0 2
57692: PUSH
57693: LD_INT 1
57695: ST_TO_ADDR
57696: GO 57732
// if Researched ( you , tech_HidCam ) then
57698: LD_EXP 2
57702: PPUSH
57703: LD_INT 17
57705: PPUSH
57706: CALL_OW 325
57710: IFFALSE 57723
// val = - 1 else
57712: LD_ADDR_VAR 0 2
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: ST_TO_ADDR
57721: GO 57732
// val = - 2 ;
57723: LD_ADDR_VAR 0 2
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: ST_TO_ADDR
// AddMedal ( HiddenCamera , val ) ;
57732: LD_STRING HiddenCamera
57734: PPUSH
57735: LD_VAR 0 2
57739: PPUSH
57740: CALL_OW 101
// if russian_interference_points <= [ 11 , 8 , 5 ] [ difficulty ] then
57744: LD_EXP 96
57748: PUSH
57749: LD_INT 11
57751: PUSH
57752: LD_INT 8
57754: PUSH
57755: LD_INT 5
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: PUSH
57763: LD_OWVAR 67
57767: ARRAY
57768: LESSEQUAL
57769: IFFALSE 57781
// val = 1 else
57771: LD_ADDR_VAR 0 2
57775: PUSH
57776: LD_INT 1
57778: ST_TO_ADDR
57779: GO 57790
// val = - 1 ;
57781: LD_ADDR_VAR 0 2
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: ST_TO_ADDR
// AddMedal ( RussianInterference , val ) ;
57790: LD_STRING RussianInterference
57792: PPUSH
57793: LD_VAR 0 2
57797: PPUSH
57798: CALL_OW 101
// GiveMedals ( Medals ) ;
57802: LD_STRING Medals
57804: PPUSH
57805: CALL_OW 102
// all_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff GetApes ( you ) ;
57809: LD_ADDR_VAR 0 3
57813: PUSH
57814: LD_INT 22
57816: PUSH
57817: LD_EXP 2
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 21
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PPUSH
57840: CALL_OW 69
57844: PUSH
57845: LD_EXP 2
57849: PPUSH
57850: CALL 43788 0 1
57854: DIFF
57855: ST_TO_ADDR
// if IsLive ( Gonzo ) then
57856: LD_EXP 22
57860: PPUSH
57861: CALL_OW 300
57865: IFFALSE 57883
// all_list = all_list ^ Gonzo ;
57867: LD_ADDR_VAR 0 3
57871: PUSH
57872: LD_VAR 0 3
57876: PUSH
57877: LD_EXP 22
57881: ADD
57882: ST_TO_ADDR
// RewardPeople ( all_list ) ;
57883: LD_VAR 0 3
57887: PPUSH
57888: CALL_OW 43
// SetLastMission ( all_list , 16 ) ;
57892: LD_VAR 0 3
57896: PPUSH
57897: LD_INT 16
57899: PPUSH
57900: CALL_OW 245
// SaveCharacters ( Heike , Heike_11_cont ) ;
57904: LD_EXP 9
57908: PPUSH
57909: LD_STRING Heike_11_cont
57911: PPUSH
57912: CALL_OW 38
// SaveCharacters ( Gensher , Gensher_11_cont ) ;
57916: LD_EXP 23
57920: PPUSH
57921: LD_STRING Gensher_11_cont
57923: PPUSH
57924: CALL_OW 38
// SaveVariable ( oswald_is_substitute , Oswald_is_substitute_11_generic ) ;
57928: LD_EXP 80
57932: PPUSH
57933: LD_STRING Oswald_is_substitute_11_generic
57935: PPUSH
57936: CALL_OW 39
// SaveVariable ( kurt_is_substitute , Kurt_is_substitute_11_generic ) ;
57940: LD_EXP 81
57944: PPUSH
57945: LD_STRING Kurt_is_substitute_11_generic
57947: PPUSH
57948: CALL_OW 39
// un_list = [ Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ] ;
57952: LD_ADDR_VAR 0 4
57956: PUSH
57957: LD_EXP 10
57961: PUSH
57962: LD_EXP 11
57966: PUSH
57967: LD_EXP 12
57971: PUSH
57972: LD_EXP 13
57976: PUSH
57977: LD_EXP 14
57981: PUSH
57982: LD_EXP 15
57986: PUSH
57987: LD_EXP 16
57991: PUSH
57992: LD_EXP 17
57996: PUSH
57997: LD_EXP 18
58001: PUSH
58002: LD_EXP 19
58006: PUSH
58007: LD_EXP 20
58011: PUSH
58012: LD_EXP 21
58016: PUSH
58017: LD_EXP 22
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// name_list = [ Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ] ;
58037: LD_ADDR_VAR 0 5
58041: PUSH
58042: LD_STRING Sonya
58044: PUSH
58045: LD_STRING Oswald
58047: PUSH
58048: LD_STRING Ralph
58050: PUSH
58051: LD_STRING Kowalski
58053: PUSH
58054: LD_STRING Evelyn
58056: PUSH
58057: LD_STRING Suze
58059: PUSH
58060: LD_STRING Olaf
58062: PUSH
58063: LD_STRING Kurt
58065: PUSH
58066: LD_STRING Dwayne
58068: PUSH
58069: LD_STRING MarkB
58071: PUSH
58072: LD_STRING Aviradze
58074: PUSH
58075: LD_STRING Swansson
58077: PUSH
58078: LD_STRING Gonzo
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: ST_TO_ADDR
// for val = 1 to un_list do
58096: LD_ADDR_VAR 0 2
58100: PUSH
58101: DOUBLE
58102: LD_INT 1
58104: DEC
58105: ST_TO_ADDR
58106: LD_VAR 0 4
58110: PUSH
58111: FOR_TO
58112: IFFALSE 58164
// if un_list [ val ] in all_list then
58114: LD_VAR 0 4
58118: PUSH
58119: LD_VAR 0 2
58123: ARRAY
58124: PUSH
58125: LD_VAR 0 3
58129: IN
58130: IFFALSE 58162
// SaveCharacters ( un_list [ val ] , name_list [ val ] & _11_cont ) ;
58132: LD_VAR 0 4
58136: PUSH
58137: LD_VAR 0 2
58141: ARRAY
58142: PPUSH
58143: LD_VAR 0 5
58147: PUSH
58148: LD_VAR 0 2
58152: ARRAY
58153: PUSH
58154: LD_STRING _11_cont
58156: STR
58157: PPUSH
58158: CALL_OW 38
58162: GO 58111
58164: POP
58165: POP
// SaveCharacters ( all_list diff ( Heike ^ Khattam ^ un_list ) , Others_11_cont ) ;
58166: LD_VAR 0 3
58170: PUSH
58171: LD_EXP 9
58175: PUSH
58176: LD_EXP 26
58180: ADD
58181: PUSH
58182: LD_VAR 0 4
58186: ADD
58187: DIFF
58188: PPUSH
58189: LD_STRING Others_11_cont
58191: PPUSH
58192: CALL_OW 38
// if GetLives ( Khattam ) > 0 then
58196: LD_EXP 26
58200: PPUSH
58201: CALL_OW 256
58205: PUSH
58206: LD_INT 0
58208: GREATER
58209: IFFALSE 58223
// SaveCharacters ( Khattam , Khattam_11_cont ) ;
58211: LD_EXP 26
58215: PPUSH
58216: LD_STRING Khattam_11_cont
58218: PPUSH
58219: CALL_OW 38
// SaveVariable ( khattam_choice = 1 , Khattam_accepted_11_cont ) ;
58223: LD_EXP 95
58227: PUSH
58228: LD_INT 1
58230: EQUAL
58231: PPUSH
58232: LD_STRING Khattam_accepted_11_cont
58234: PPUSH
58235: CALL_OW 39
// InGameOn ;
58239: CALL_OW 8
// for val in all_units do
58243: LD_ADDR_VAR 0 2
58247: PUSH
58248: LD_OWVAR 3
58252: PUSH
58253: FOR_IN
58254: IFFALSE 58267
// DestroyUnit ( val ) ;
58256: LD_VAR 0 2
58260: PPUSH
58261: CALL_OW 65
58265: GO 58253
58267: POP
58268: POP
// ResetFog ;
58269: CALL_OW 335
// wait ( 0 0$0.5 ) ;
58273: LD_INT 18
58275: PPUSH
58276: CALL_OW 67
// repeat Query ( QCutscene1 ) ;
58280: LD_STRING QCutscene1
58282: PPUSH
58283: CALL_OW 97
// val = Query ( QCutscene2 ) ;
58287: LD_ADDR_VAR 0 2
58291: PUSH
58292: LD_STRING QCutscene2
58294: PPUSH
58295: CALL_OW 97
58299: ST_TO_ADDR
// until val = 3 or val = 2 ;
58300: LD_VAR 0 2
58304: PUSH
58305: LD_INT 3
58307: EQUAL
58308: PUSH
58309: LD_VAR 0 2
58313: PUSH
58314: LD_INT 2
58316: EQUAL
58317: OR
58318: IFFALSE 58280
// wait ( 0 0$0.5 ) ;
58320: LD_INT 18
58322: PPUSH
58323: CALL_OW 67
// SetNextMission ( val - 1 ) ;
58327: LD_VAR 0 2
58331: PUSH
58332: LD_INT 1
58334: MINUS
58335: PPUSH
58336: CALL_OW 536
// InGameOff ;
58340: CALL_OW 9
// YouWin ;
58344: CALL_OW 103
// end ;
58348: LD_VAR 0 1
58352: RET
