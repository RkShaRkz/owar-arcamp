// export testing , logsenabled ; export you , russians , nature , you_alt , americans , scout_side , americans_alt ; export Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ; export Gensher ; export Simms , Cornell , Khattam , Joan , Powell ; export ai_soldiers , ai_engineers , ai_mechanics_defend , ai_scientists , ai_commander , ai_depot , ai_labs , ai_siberite_mines ; export ai_power_plants , ai_buildings_locations , ai_vehicles_defend , ai_vehicles_attack , ai_human_pullback_hex ; export ai_building_under_construction , ai_heal_these_humans , ai_all_buildings , ai_building_constructor ; export ai_upcoming_building_data , ai_facts , ai_armouries , ai_bunkers , ai_oil_mine , ai_fact_extensions ; export ai_near_base_dist , ai_going_to_attack_this_base , ai_refuel_vehicles_list , ai_turrets , ai_control_tower ; export ai_vehicle_attack_delay , ai_bases , ai_has_switched_base_target , ai_cargo_bay , ai_cargo_bay_under_construction , ai_apemen_engineers ; export ai_attacking_soldiers , ai_attacking_scientists , ai_humans_ready_to_attack , ai_retreating_attacking_humans , ai_human_attack_delay ; export ai_excepted_buildings , ai_new_attack_commencing ; export ai_crane , ai_time_shift_data , ai_time_shift_hexes , ai_time_shift_hexes_underway , ai_attacking_unit_hex_index ; export ai_contact_time , ai_attack_ground_info_initial , ai_attack_ground_info_sustain , ai_captured_buildings , ai_vehicles_being_repaired ; export oswald_is_substitute , kurt_is_substitute , original_gensher_people , russian_attack_strategy , special_russian_attackers ; export yashin_alive , num_russian_attacks , gensher_spec_research_progress , game_phase , first_teleport , camera_engineers ; export cameras_placed , scout_event_over , russians_allowed_to_attack_gensher_time , saved_gensher_people , khattam_choice ; export russian_interference_points , camera_engineers_task_map ; export gensher_bunker_apes , gensher_mortars ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// testing = false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// logsenabled = false ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// ai_bases = [ 1 , 2 , 3 ] ;
  24: LD_ADDR_EXP 59
  28: PUSH
  29: LD_INT 1
  31: PUSH
  32: LD_INT 2
  34: PUSH
  35: LD_INT 3
  37: PUSH
  38: EMPTY
  39: LIST
  40: LIST
  41: LIST
  42: ST_TO_ADDR
// ai_soldiers = [ [ ] , [ ] , [ ] ] ;
  43: LD_ADDR_EXP 30
  47: PUSH
  48: EMPTY
  49: PUSH
  50: EMPTY
  51: PUSH
  52: EMPTY
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: LIST
  58: ST_TO_ADDR
// ai_attacking_soldiers = [ [ ] , [ ] , [ ] ] ;
  59: LD_ADDR_EXP 64
  63: PUSH
  64: EMPTY
  65: PUSH
  66: EMPTY
  67: PUSH
  68: EMPTY
  69: PUSH
  70: EMPTY
  71: LIST
  72: LIST
  73: LIST
  74: ST_TO_ADDR
// ai_engineers = [ [ ] , [ ] , [ ] ] ;
  75: LD_ADDR_EXP 31
  79: PUSH
  80: EMPTY
  81: PUSH
  82: EMPTY
  83: PUSH
  84: EMPTY
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: LIST
  90: ST_TO_ADDR
// ai_mechanics_defend = [ [ ] , [ ] , [ ] ] ;
  91: LD_ADDR_EXP 32
  95: PUSH
  96: EMPTY
  97: PUSH
  98: EMPTY
  99: PUSH
 100: EMPTY
 101: PUSH
 102: EMPTY
 103: LIST
 104: LIST
 105: LIST
 106: ST_TO_ADDR
// ai_scientists = [ [ ] , [ ] , [ ] ] ;
 107: LD_ADDR_EXP 33
 111: PUSH
 112: EMPTY
 113: PUSH
 114: EMPTY
 115: PUSH
 116: EMPTY
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// ai_attacking_scientists = [ [ ] , [ ] , [ ] ] ;
 123: LD_ADDR_EXP 65
 127: PUSH
 128: EMPTY
 129: PUSH
 130: EMPTY
 131: PUSH
 132: EMPTY
 133: PUSH
 134: EMPTY
 135: LIST
 136: LIST
 137: LIST
 138: ST_TO_ADDR
// ai_apemen_engineers = [ [ ] , [ ] , [ ] ] ;
 139: LD_ADDR_EXP 63
 143: PUSH
 144: EMPTY
 145: PUSH
 146: EMPTY
 147: PUSH
 148: EMPTY
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: ST_TO_ADDR
// ai_depot = [ 0 , 0 , 0 ] ;
 155: LD_ADDR_EXP 35
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: LIST
 173: ST_TO_ADDR
// ai_labs = [ [ ] , [ ] , [ ] ] ;
 174: LD_ADDR_EXP 36
 178: PUSH
 179: EMPTY
 180: PUSH
 181: EMPTY
 182: PUSH
 183: EMPTY
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: ST_TO_ADDR
// ai_facts = [ [ ] , [ ] , [ ] ] ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: EMPTY
 196: PUSH
 197: EMPTY
 198: PUSH
 199: EMPTY
 200: PUSH
 201: EMPTY
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// ai_armouries = [ [ ] , [ ] , [ ] ] ;
 206: LD_ADDR_EXP 49
 210: PUSH
 211: EMPTY
 212: PUSH
 213: EMPTY
 214: PUSH
 215: EMPTY
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: ST_TO_ADDR
// ai_bunkers = [ [ ] , [ ] , [ ] ] ;
 222: LD_ADDR_EXP 50
 226: PUSH
 227: EMPTY
 228: PUSH
 229: EMPTY
 230: PUSH
 231: EMPTY
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: ST_TO_ADDR
// ai_turrets = [ [ ] , [ ] , [ ] ] ;
 238: LD_ADDR_EXP 56
 242: PUSH
 243: EMPTY
 244: PUSH
 245: EMPTY
 246: PUSH
 247: EMPTY
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// ai_oil_mine = [ 0 , 0 , 0 ] ;
 254: LD_ADDR_EXP 51
 258: PUSH
 259: LD_INT 0
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// ai_siberite_mines = [ [ ] , [ ] , [ ] ] ;
 273: LD_ADDR_EXP 37
 277: PUSH
 278: EMPTY
 279: PUSH
 280: EMPTY
 281: PUSH
 282: EMPTY
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: ST_TO_ADDR
// ai_fact_extensions = [ [ ] , [ ] , [ ] ] ;
 289: LD_ADDR_EXP 52
 293: PUSH
 294: EMPTY
 295: PUSH
 296: EMPTY
 297: PUSH
 298: EMPTY
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// ai_power_plants = [ [ ] , [ ] , [ ] ] ;
 305: LD_ADDR_EXP 38
 309: PUSH
 310: EMPTY
 311: PUSH
 312: EMPTY
 313: PUSH
 314: EMPTY
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: ST_TO_ADDR
// ai_control_tower = [ 0 , 0 , 0 ] ;
 321: LD_ADDR_EXP 57
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// ai_buildings_locations = [ [ ] , [ ] , [ ] ] ;
 340: LD_ADDR_EXP 39
 344: PUSH
 345: EMPTY
 346: PUSH
 347: EMPTY
 348: PUSH
 349: EMPTY
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: ST_TO_ADDR
// ai_captured_buildings = [ [ ] , [ ] , [ ] ] ;
 356: LD_ADDR_EXP 79
 360: PUSH
 361: EMPTY
 362: PUSH
 363: EMPTY
 364: PUSH
 365: EMPTY
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// ai_vehicles_defend = [ [ ] , [ ] , [ ] ] ;
 372: LD_ADDR_EXP 40
 376: PUSH
 377: EMPTY
 378: PUSH
 379: EMPTY
 380: PUSH
 381: EMPTY
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// ai_vehicles_attack = [ [ ] , [ ] , [ ] ] ;
 388: LD_ADDR_EXP 41
 392: PUSH
 393: EMPTY
 394: PUSH
 395: EMPTY
 396: PUSH
 397: EMPTY
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: ST_TO_ADDR
// ai_vehicles_being_repaired = [ [ ] , [ ] , [ ] ] ;
 404: LD_ADDR_EXP 80
 408: PUSH
 409: EMPTY
 410: PUSH
 411: EMPTY
 412: PUSH
 413: EMPTY
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: LIST
 419: ST_TO_ADDR
// ai_refuel_vehicles_list = [ [ ] , [ ] , [ ] ] ;
 420: LD_ADDR_EXP 55
 424: PUSH
 425: EMPTY
 426: PUSH
 427: EMPTY
 428: PUSH
 429: EMPTY
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: LIST
 435: ST_TO_ADDR
// ai_human_pullback_hex = [ [ 106 , 40 ] , [ 75 , 22 ] , [ 60 , 81 ] ] ;
 436: LD_ADDR_EXP 42
 440: PUSH
 441: LD_INT 106
 443: PUSH
 444: LD_INT 40
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 75
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 60
 463: PUSH
 464: LD_INT 81
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: ST_TO_ADDR
// ai_building_under_construction = [ 0 , 0 , 0 ] ;
 476: LD_ADDR_EXP 43
 480: PUSH
 481: LD_INT 0
 483: PUSH
 484: LD_INT 0
 486: PUSH
 487: LD_INT 0
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: LIST
 494: ST_TO_ADDR
// ai_heal_these_humans = [ [ ] , [ ] , [ ] ] ;
 495: LD_ADDR_EXP 44
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: ST_TO_ADDR
// ai_all_buildings = [ [ ] , [ ] , [ ] ] ;
 511: LD_ADDR_EXP 45
 515: PUSH
 516: EMPTY
 517: PUSH
 518: EMPTY
 519: PUSH
 520: EMPTY
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// ai_building_constructor = [ 0 , 0 , 0 ] ;
 527: LD_ADDR_EXP 46
 531: PUSH
 532: LD_INT 0
 534: PUSH
 535: LD_INT 0
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: ST_TO_ADDR
// ai_upcoming_building_data = [ [ ] , [ ] , [ ] ] ;
 546: LD_ADDR_EXP 47
 550: PUSH
 551: EMPTY
 552: PUSH
 553: EMPTY
 554: PUSH
 555: EMPTY
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// ai_near_base_dist = 18 ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 18
 569: ST_TO_ADDR
// ai_vehicle_attack_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
 570: LD_ADDR_EXP 58
 574: PUSH
 575: LD_INT 0
 577: PUSH
 578: LD_INT 0
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// ai_human_attack_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
 589: LD_ADDR_EXP 68
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: ST_TO_ADDR
// ai_cargo_bay = [ 0 , 0 , 0 ] ;
 608: LD_ADDR_EXP 61
 612: PUSH
 613: LD_INT 0
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 0
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: LIST
 626: ST_TO_ADDR
// ai_cargo_bay_under_construction = [ false , false , false ] ;
 627: LD_ADDR_EXP 62
 631: PUSH
 632: LD_INT 0
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: LD_INT 0
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: ST_TO_ADDR
// ai_crane = [ 0 , 0 , 0 ] ;
 646: LD_ADDR_EXP 71
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// ai_attacking_unit_hex_index = [ [ ] , [ ] , [ ] ] ;
 665: LD_ADDR_EXP 75
 669: PUSH
 670: EMPTY
 671: PUSH
 672: EMPTY
 673: PUSH
 674: EMPTY
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: ST_TO_ADDR
// ai_retreating_attacking_humans = [ [ ] , [ ] , [ ] ] ;
 681: LD_ADDR_EXP 67
 685: PUSH
 686: EMPTY
 687: PUSH
 688: EMPTY
 689: PUSH
 690: EMPTY
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: ST_TO_ADDR
// ai_excepted_buildings = [ [ ] , [ ] , [ ] ] ;
 697: LD_ADDR_EXP 69
 701: PUSH
 702: EMPTY
 703: PUSH
 704: EMPTY
 705: PUSH
 706: EMPTY
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
// ai_new_attack_commencing = [ false , false , false ] ;
 713: LD_ADDR_EXP 70
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: LIST
 731: ST_TO_ADDR
// ai_time_shift_data = [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 732: LD_ADDR_EXP 72
 736: PUSH
 737: EMPTY
 738: PUSH
 739: EMPTY
 740: PUSH
 741: EMPTY
 742: PUSH
 743: EMPTY
 744: PUSH
 745: EMPTY
 746: PUSH
 747: EMPTY
 748: PUSH
 749: EMPTY
 750: PUSH
 751: EMPTY
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// ai_time_shift_hexes = [ [ ] , [ ] , [ ] ] ;
 763: LD_ADDR_EXP 73
 767: PUSH
 768: EMPTY
 769: PUSH
 770: EMPTY
 771: PUSH
 772: EMPTY
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: ST_TO_ADDR
// ai_time_shift_hexes_underway = [ [ ] , [ ] , [ ] ] ;
 779: LD_ADDR_EXP 74
 783: PUSH
 784: EMPTY
 785: PUSH
 786: EMPTY
 787: PUSH
 788: EMPTY
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: ST_TO_ADDR
// Initiate_ai_contact_time ;
 795: CALL 997 0 0
// ai_attack_ground_info_initial = [ ] ;
 799: LD_ADDR_EXP 77
 803: PUSH
 804: EMPTY
 805: ST_TO_ADDR
// ai_attack_ground_info_sustain = [ ] ;
 806: LD_ADDR_EXP 78
 810: PUSH
 811: EMPTY
 812: ST_TO_ADDR
// oswald_is_substitute = false ;
 813: LD_ADDR_EXP 81
 817: PUSH
 818: LD_INT 0
 820: ST_TO_ADDR
// kurt_is_substitute = false ;
 821: LD_ADDR_EXP 82
 825: PUSH
 826: LD_INT 0
 828: ST_TO_ADDR
// original_gensher_people = [ ] ;
 829: LD_ADDR_EXP 83
 833: PUSH
 834: EMPTY
 835: ST_TO_ADDR
// russian_attack_strategy = - 1 ;
 836: LD_ADDR_EXP 84
 840: PUSH
 841: LD_INT 1
 843: NEG
 844: ST_TO_ADDR
// special_russian_attackers = [ ] ;
 845: LD_ADDR_EXP 85
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// yashin_alive = TestCharacters ( Yashin_08 ) ;
 852: LD_ADDR_EXP 86
 856: PUSH
 857: LD_STRING Yashin_08
 859: PPUSH
 860: CALL_OW 28
 864: ST_TO_ADDR
// num_russian_attacks = 0 ;
 865: LD_ADDR_EXP 87
 869: PUSH
 870: LD_INT 0
 872: ST_TO_ADDR
// gensher_spec_research_progress = 0 ;
 873: LD_ADDR_EXP 88
 877: PUSH
 878: LD_INT 0
 880: ST_TO_ADDR
// game_phase = 1 ;
 881: LD_ADDR_EXP 89
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// first_teleport = true ;
 889: LD_ADDR_EXP 90
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
// camera_engineers = [ ] ;
 897: LD_ADDR_EXP 91
 901: PUSH
 902: EMPTY
 903: ST_TO_ADDR
// cameras_placed = false ;
 904: LD_ADDR_EXP 92
 908: PUSH
 909: LD_INT 0
 911: ST_TO_ADDR
// scout_event_over = false ;
 912: LD_ADDR_EXP 93
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = [ 30 30$0 , 25 25$0 , 20 20$0 ] [ difficulty ] ;
 920: LD_ADDR_EXP 94
 924: PUSH
 925: LD_INT 63000
 927: PUSH
 928: LD_INT 52500
 930: PUSH
 931: LD_INT 42000
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: PUSH
 939: LD_OWVAR 67
 943: ARRAY
 944: ST_TO_ADDR
// saved_gensher_people = [ ] ;
 945: LD_ADDR_EXP 95
 949: PUSH
 950: EMPTY
 951: ST_TO_ADDR
// khattam_choice = 0 ;
 952: LD_ADDR_EXP 96
 956: PUSH
 957: LD_INT 0
 959: ST_TO_ADDR
// russian_interference_points = 0 ;
 960: LD_ADDR_EXP 97
 964: PUSH
 965: LD_INT 0
 967: ST_TO_ADDR
// PrepareSides ;
 968: CALL 1278 0 0
// PrepareNature ;
 972: CALL 1731 0 0
// PrepareArabians ;
 976: CALL 2255 0 0
// ScanBuildings ;
 980: CALL 6108 0 0
// PrepareComputerSides ;
 984: CALL 8595 0 0
// InitiateTimeShiftData ;
 988: CALL 1081 0 0
// Action ;
 992: CALL 10124 0 0
// end ;
 996: END
// function Initiate_ai_contact_time ; var i ; begin
 997: LD_INT 0
 999: PPUSH
1000: PPUSH
// ai_contact_time = [ ] ;
1001: LD_ADDR_EXP 76
1005: PUSH
1006: EMPTY
1007: ST_TO_ADDR
// for i = 1 to 8 do
1008: LD_ADDR_VAR 0 2
1012: PUSH
1013: DOUBLE
1014: LD_INT 1
1016: DEC
1017: ST_TO_ADDR
1018: LD_INT 8
1020: PUSH
1021: FOR_TO
1022: IFFALSE 1074
// ai_contact_time = ai_contact_time ^ [ [ 100000 , 100000 , 100000 , 100000 , 100000 , 100000 , 100000 , 100000 ] ] ;
1024: LD_ADDR_EXP 76
1028: PUSH
1029: LD_EXP 76
1033: PUSH
1034: LD_INT 100000
1036: PUSH
1037: LD_INT 100000
1039: PUSH
1040: LD_INT 100000
1042: PUSH
1043: LD_INT 100000
1045: PUSH
1046: LD_INT 100000
1048: PUSH
1049: LD_INT 100000
1051: PUSH
1052: LD_INT 100000
1054: PUSH
1055: LD_INT 100000
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: ADD
1071: ST_TO_ADDR
1072: GO 1021
1074: POP
1075: POP
// end ;
1076: LD_VAR 0 1
1080: RET
// function InitiateTimeShiftData ; var side ; begin
1081: LD_INT 0
1083: PPUSH
1084: PPUSH
// for side = 1 to 8 do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_INT 8
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1271
// if Researched ( side , tech_st3 ) then
1101: LD_VAR 0 2
1105: PPUSH
1106: LD_INT 65
1108: PPUSH
1109: CALL_OW 325
1113: IFFALSE 1147
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 420 , 10 ] ) else
1115: LD_ADDR_EXP 72
1119: PUSH
1120: LD_EXP 72
1124: PPUSH
1125: LD_VAR 0 2
1129: PPUSH
1130: LD_INT 420
1132: PUSH
1133: LD_INT 10
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: CALL_OW 1
1144: ST_TO_ADDR
1145: GO 1269
// if Researched ( side , tech_st2 ) then
1147: LD_VAR 0 2
1151: PPUSH
1152: LD_INT 64
1154: PPUSH
1155: CALL_OW 325
1159: IFFALSE 1193
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 420 , 10 ] ) else
1161: LD_ADDR_EXP 72
1165: PUSH
1166: LD_EXP 72
1170: PPUSH
1171: LD_VAR 0 2
1175: PPUSH
1176: LD_INT 420
1178: PUSH
1179: LD_INT 10
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PPUSH
1186: CALL_OW 1
1190: ST_TO_ADDR
1191: GO 1269
// if Researched ( side , tech_st1 ) then
1193: LD_VAR 0 2
1197: PPUSH
1198: LD_INT 63
1200: PPUSH
1201: CALL_OW 325
1205: IFFALSE 1239
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 320 , 7 ] ) else
1207: LD_ADDR_EXP 72
1211: PUSH
1212: LD_EXP 72
1216: PPUSH
1217: LD_VAR 0 2
1221: PPUSH
1222: LD_INT 320
1224: PUSH
1225: LD_INT 7
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: PPUSH
1232: CALL_OW 1
1236: ST_TO_ADDR
1237: GO 1269
// ai_time_shift_data = Replace ( ai_time_shift_data , side , [ 215 , 4 ] ) ;
1239: LD_ADDR_EXP 72
1243: PUSH
1244: LD_EXP 72
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: LD_INT 215
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PPUSH
1264: CALL_OW 1
1268: ST_TO_ADDR
1269: GO 1098
1271: POP
1272: POP
// end ;
1273: LD_VAR 0 1
1277: RET
// function PrepareSides ; begin
1278: LD_INT 0
1280: PPUSH
// nature = 0 ;
1281: LD_ADDR_EXP 5
1285: PUSH
1286: LD_INT 0
1288: ST_TO_ADDR
// americans = 1 ;
1289: LD_ADDR_EXP 7
1293: PUSH
1294: LD_INT 1
1296: ST_TO_ADDR
// you = 2 ;
1297: LD_ADDR_EXP 3
1301: PUSH
1302: LD_INT 2
1304: ST_TO_ADDR
// russians = 3 ;
1305: LD_ADDR_EXP 4
1309: PUSH
1310: LD_INT 3
1312: ST_TO_ADDR
// americans_alt = 4 ;
1313: LD_ADDR_EXP 9
1317: PUSH
1318: LD_INT 4
1320: ST_TO_ADDR
// you_alt = 5 ;
1321: LD_ADDR_EXP 6
1325: PUSH
1326: LD_INT 5
1328: ST_TO_ADDR
// scout_side = 8 ;
1329: LD_ADDR_EXP 8
1333: PUSH
1334: LD_INT 8
1336: ST_TO_ADDR
// SetAttitude ( americans , you , att_enemy , true ) ;
1337: LD_EXP 7
1341: PPUSH
1342: LD_EXP 3
1346: PPUSH
1347: LD_INT 2
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: CALL_OW 80
// SetAttitude ( americans , russians , att_enemy , true ) ;
1357: LD_EXP 7
1361: PPUSH
1362: LD_EXP 4
1366: PPUSH
1367: LD_INT 2
1369: PPUSH
1370: LD_INT 1
1372: PPUSH
1373: CALL_OW 80
// SetAttitude ( americans , americans_alt , att_friend , true ) ;
1377: LD_EXP 7
1381: PPUSH
1382: LD_EXP 9
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: LD_INT 1
1392: PPUSH
1393: CALL_OW 80
// SetAttitude ( americans , you_alt , att_friend , true ) ;
1397: LD_EXP 7
1401: PPUSH
1402: LD_EXP 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: LD_INT 1
1412: PPUSH
1413: CALL_OW 80
// SetAttitude ( americans , scout_side , att_friend , true ) ;
1417: LD_EXP 7
1421: PPUSH
1422: LD_EXP 8
1426: PPUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 1
1432: PPUSH
1433: CALL_OW 80
// SetAttitude ( you , russians , att_enemy , true ) ;
1437: LD_EXP 3
1441: PPUSH
1442: LD_EXP 4
1446: PPUSH
1447: LD_INT 2
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: CALL_OW 80
// SetAttitude ( you , americans_alt , att_enemy , true ) ;
1457: LD_EXP 3
1461: PPUSH
1462: LD_EXP 9
1466: PPUSH
1467: LD_INT 2
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: CALL_OW 80
// SetAttitude ( you , you_alt , att_friend , true ) ;
1477: LD_EXP 3
1481: PPUSH
1482: LD_EXP 6
1486: PPUSH
1487: LD_INT 1
1489: PPUSH
1490: LD_INT 1
1492: PPUSH
1493: CALL_OW 80
// SetAttitude ( you , scout_side , att_friend , true ) ;
1497: LD_EXP 3
1501: PPUSH
1502: LD_EXP 8
1506: PPUSH
1507: LD_INT 1
1509: PPUSH
1510: LD_INT 1
1512: PPUSH
1513: CALL_OW 80
// SetAttitude ( russians , americans_alt , att_enemy , true ) ;
1517: LD_EXP 4
1521: PPUSH
1522: LD_EXP 9
1526: PPUSH
1527: LD_INT 2
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: CALL_OW 80
// SetAttitude ( russians , you_alt , att_enemy , true ) ;
1537: LD_EXP 4
1541: PPUSH
1542: LD_EXP 6
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: LD_INT 1
1552: PPUSH
1553: CALL_OW 80
// SetAttitude ( russians , scout_side , att_friend , true ) ;
1557: LD_EXP 4
1561: PPUSH
1562: LD_EXP 8
1566: PPUSH
1567: LD_INT 1
1569: PPUSH
1570: LD_INT 1
1572: PPUSH
1573: CALL_OW 80
// SetAttitude ( americans_alt , you_alt , att_enemy , true ) ;
1577: LD_EXP 9
1581: PPUSH
1582: LD_EXP 6
1586: PPUSH
1587: LD_INT 2
1589: PPUSH
1590: LD_INT 1
1592: PPUSH
1593: CALL_OW 80
// SetAttitude ( americans_alt , scout_side , att_friend , true ) ;
1597: LD_EXP 9
1601: PPUSH
1602: LD_EXP 8
1606: PPUSH
1607: LD_INT 1
1609: PPUSH
1610: LD_INT 1
1612: PPUSH
1613: CALL_OW 80
// SetAttitude ( you_alt , scout_side , att_friend , true ) ;
1617: LD_EXP 6
1621: PPUSH
1622: LD_EXP 8
1626: PPUSH
1627: LD_INT 1
1629: PPUSH
1630: LD_INT 1
1632: PPUSH
1633: CALL_OW 80
// ChangeSideFog ( you_alt , you ) ;
1637: LD_EXP 6
1641: PPUSH
1642: LD_EXP 3
1646: PPUSH
1647: CALL_OW 343
// if difficulty = 3 then
1651: LD_OWVAR 67
1655: PUSH
1656: LD_INT 3
1658: EQUAL
1659: IFFALSE 1676
// SetTech ( tech_opto1 , americans , state_researched ) ;
1661: LD_INT 60
1663: PPUSH
1664: LD_EXP 7
1668: PPUSH
1669: LD_INT 2
1671: PPUSH
1672: CALL_OW 322
// if difficulty = 3 then
1676: LD_OWVAR 67
1680: PUSH
1681: LD_INT 3
1683: EQUAL
1684: IFFALSE 1701
// SetTech ( tech_comp3 , russians , state_researched ) ;
1686: LD_INT 59
1688: PPUSH
1689: LD_EXP 4
1693: PPUSH
1694: LD_INT 2
1696: PPUSH
1697: CALL_OW 322
// if difficulty = 3 then
1701: LD_OWVAR 67
1705: PUSH
1706: LD_INT 3
1708: EQUAL
1709: IFFALSE 1726
// SetTech ( tech_st3 , russians , state_researched ) ;
1711: LD_INT 65
1713: PPUSH
1714: LD_EXP 4
1718: PPUSH
1719: LD_INT 2
1721: PPUSH
1722: CALL_OW 322
// end ;
1726: LD_VAR 0 1
1730: RET
// function PrepareNature ; var i , spots , num , agres , count , temp_unit ; begin
1731: LD_INT 0
1733: PPUSH
1734: PPUSH
1735: PPUSH
1736: PPUSH
1737: PPUSH
1738: PPUSH
1739: PPUSH
// for i in FilterAllUnits ( [ f_side , nature ] ) do
1740: LD_ADDR_VAR 0 2
1744: PUSH
1745: LD_INT 22
1747: PUSH
1748: LD_EXP 5
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PPUSH
1757: CALL_OW 69
1761: PUSH
1762: FOR_IN
1763: IFFALSE 1776
// DestroyUnit ( i ) ;
1765: LD_VAR 0 2
1769: PPUSH
1770: CALL_OW 65
1774: GO 1762
1776: POP
1777: POP
// spots = [ [ 158 , 91 ] , [ 140 , 107 ] , [ 37 , 27 ] , [ 22 , 4 ] , [ 38 , 10 ] , [ 50 , 23 ] , [ 40 , 20 ] , [ 158 , 110 ] , [ 159 , 118 ] , [ 146 , 115 ] , [ 135 , 100 ] , [ 155 , 115 ] ] ;
1778: LD_ADDR_VAR 0 3
1782: PUSH
1783: LD_INT 158
1785: PUSH
1786: LD_INT 91
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 140
1795: PUSH
1796: LD_INT 107
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 37
1805: PUSH
1806: LD_INT 27
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 22
1815: PUSH
1816: LD_INT 4
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 38
1825: PUSH
1826: LD_INT 10
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 50
1835: PUSH
1836: LD_INT 23
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 40
1845: PUSH
1846: LD_INT 20
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 158
1855: PUSH
1856: LD_INT 110
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 159
1865: PUSH
1866: LD_INT 118
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 146
1875: PUSH
1876: LD_INT 115
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 135
1885: PUSH
1886: LD_INT 100
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 155
1895: PUSH
1896: LD_INT 115
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: ST_TO_ADDR
// InitUc ;
1917: CALL_OW 18
// InitHc ;
1921: CALL_OW 19
// uc_side = nature ;
1925: LD_ADDR_OWVAR 20
1929: PUSH
1930: LD_EXP 5
1934: ST_TO_ADDR
// uc_nation = nation_nature ;
1935: LD_ADDR_OWVAR 21
1939: PUSH
1940: LD_INT 0
1942: ST_TO_ADDR
// agres = - 10 + difficulty * 20 ;
1943: LD_ADDR_VAR 0 5
1947: PUSH
1948: LD_INT 10
1950: NEG
1951: PUSH
1952: LD_OWVAR 67
1956: PUSH
1957: LD_INT 20
1959: MUL
1960: PLUS
1961: ST_TO_ADDR
// count = [ 15 , 13 , 10 ] [ difficulty ] ;
1962: LD_ADDR_VAR 0 6
1966: PUSH
1967: LD_INT 15
1969: PUSH
1970: LD_INT 13
1972: PUSH
1973: LD_INT 10
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_OWVAR 67
1985: ARRAY
1986: ST_TO_ADDR
// hc_class = class_apeman ;
1987: LD_ADDR_OWVAR 28
1991: PUSH
1992: LD_INT 12
1994: ST_TO_ADDR
// for i = 1 to count do
1995: LD_ADDR_VAR 0 2
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_VAR 0 6
2009: PUSH
2010: FOR_TO
2011: IFFALSE 2248
// begin if spots = 0 then
2013: LD_VAR 0 3
2017: PUSH
2018: LD_INT 0
2020: EQUAL
2021: IFFALSE 2027
// exit ;
2023: POP
2024: POP
2025: GO 2250
// uc_direction = Rand ( 0 , 5 ) ;
2027: LD_ADDR_OWVAR 24
2031: PUSH
2032: LD_INT 0
2034: PPUSH
2035: LD_INT 5
2037: PPUSH
2038: CALL_OW 12
2042: ST_TO_ADDR
// hc_agressivity = Rand ( - 1 * agres , agres ) ;
2043: LD_ADDR_OWVAR 35
2047: PUSH
2048: LD_INT 1
2050: NEG
2051: PUSH
2052: LD_VAR 0 5
2056: MUL
2057: PPUSH
2058: LD_VAR 0 5
2062: PPUSH
2063: CALL_OW 12
2067: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
2068: LD_ADDR_OWVAR 29
2072: PUSH
2073: LD_INT 11
2075: PPUSH
2076: LD_INT 13
2078: PPUSH
2079: CALL_OW 12
2083: PUSH
2084: LD_INT 10
2086: PPUSH
2087: LD_INT 11
2089: PPUSH
2090: CALL_OW 12
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
2099: LD_ADDR_OWVAR 27
2103: PUSH
2104: LD_INT 1
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL_OW 12
2114: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , Rand ( 0 , 1 ) , 0 , 0 ] ;
2115: LD_ADDR_OWVAR 31
2119: PUSH
2120: LD_INT 0
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 12
2130: PUSH
2131: LD_INT 0
2133: PPUSH
2134: LD_INT 1
2136: PPUSH
2137: CALL_OW 12
2141: PUSH
2142: LD_INT 0
2144: PUSH
2145: LD_INT 0
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: ST_TO_ADDR
// num = Rand ( 1 , spots ) ;
2154: LD_ADDR_VAR 0 4
2158: PUSH
2159: LD_INT 1
2161: PPUSH
2162: LD_VAR 0 3
2166: PPUSH
2167: CALL_OW 12
2171: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , spots [ num ] [ 1 ] , spots [ num ] [ 2 ] , 5 , false ) ;
2172: CALL_OW 44
2176: PPUSH
2177: LD_VAR 0 3
2181: PUSH
2182: LD_VAR 0 4
2186: ARRAY
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: LD_VAR 0 3
2196: PUSH
2197: LD_VAR 0 4
2201: ARRAY
2202: PUSH
2203: LD_INT 2
2205: ARRAY
2206: PPUSH
2207: LD_INT 5
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: CALL_OW 50
// if Prob ( 50 ) then
2217: LD_INT 50
2219: PPUSH
2220: CALL_OW 13
2224: IFFALSE 2246
// spots = Delete ( spots , num ) ;
2226: LD_ADDR_VAR 0 3
2230: PUSH
2231: LD_VAR 0 3
2235: PPUSH
2236: LD_VAR 0 4
2240: PPUSH
2241: CALL_OW 3
2245: ST_TO_ADDR
// end ;
2246: GO 2010
2248: POP
2249: POP
// end ;
2250: LD_VAR 0 1
2254: RET
// function PrepareArabians ; var human_list , i , temp_unit , val , k , gensher_bunker_apes ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
2262: PPUSH
2263: PPUSH
// InitHc ;
2264: CALL_OW 19
// InitUc ;
2268: CALL_OW 18
// uc_side = you ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_EXP 3
2281: ST_TO_ADDR
// uc_nation = nation_arabian ;
2282: LD_ADDR_OWVAR 21
2286: PUSH
2287: LD_INT 2
2289: ST_TO_ADDR
// if not testing then
2290: LD_EXP 1
2294: NOT
2295: IFFALSE 2888
// begin Heike = CreateCharacter ( Heike_11_sel ) ;
2297: LD_ADDR_EXP 10
2301: PUSH
2302: LD_STRING Heike_11_sel
2304: PPUSH
2305: CALL_OW 34
2309: ST_TO_ADDR
// if TestCharacters ( Oswald_11_sel ) then
2310: LD_STRING Oswald_11_sel
2312: PPUSH
2313: CALL_OW 28
2317: IFFALSE 2334
// Oswald = CreateCharacter ( Oswald_11_sel ) else
2319: LD_ADDR_EXP 12
2323: PUSH
2324: LD_STRING Oswald_11_sel
2326: PPUSH
2327: CALL_OW 34
2331: ST_TO_ADDR
2332: GO 2342
// Oswald = 0 ;
2334: LD_ADDR_EXP 12
2338: PUSH
2339: LD_INT 0
2341: ST_TO_ADDR
// oswald_is_substitute = LoadVariable ( Oswald_is_substitute_10 , false ) ;
2342: LD_ADDR_EXP 81
2346: PUSH
2347: LD_STRING Oswald_is_substitute_10
2349: PPUSH
2350: LD_INT 0
2352: PPUSH
2353: CALL_OW 30
2357: ST_TO_ADDR
// if TestCharacters ( Kurt_11_sel ) then
2358: LD_STRING Kurt_11_sel
2360: PPUSH
2361: CALL_OW 28
2365: IFFALSE 2382
// Kurt = CreateCharacter ( Kurt_11_sel ) else
2367: LD_ADDR_EXP 18
2371: PUSH
2372: LD_STRING Kurt_11_sel
2374: PPUSH
2375: CALL_OW 34
2379: ST_TO_ADDR
2380: GO 2390
// Kurt = 0 ;
2382: LD_ADDR_EXP 18
2386: PUSH
2387: LD_INT 0
2389: ST_TO_ADDR
// kurt_is_substitute = LoadVariable ( Kurt_is_substitute_10 , false ) ;
2390: LD_ADDR_EXP 82
2394: PUSH
2395: LD_STRING Kurt_is_substitute_10
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 30
2405: ST_TO_ADDR
// if TestCharacters ( Sonya_11_sel ) then
2406: LD_STRING Sonya_11_sel
2408: PPUSH
2409: CALL_OW 28
2413: IFFALSE 2430
// Sonya = CreateCharacter ( Sonya_11_sel ) else
2415: LD_ADDR_EXP 11
2419: PUSH
2420: LD_STRING Sonya_11_sel
2422: PPUSH
2423: CALL_OW 34
2427: ST_TO_ADDR
2428: GO 2438
// Sonya = 0 ;
2430: LD_ADDR_EXP 11
2434: PUSH
2435: LD_INT 0
2437: ST_TO_ADDR
// if TestCharacters ( Ralph_11_sel ) then
2438: LD_STRING Ralph_11_sel
2440: PPUSH
2441: CALL_OW 28
2445: IFFALSE 2462
// Ralph = CreateCharacter ( Ralph_11_sel ) else
2447: LD_ADDR_EXP 13
2451: PUSH
2452: LD_STRING Ralph_11_sel
2454: PPUSH
2455: CALL_OW 34
2459: ST_TO_ADDR
2460: GO 2470
// Ralph = 0 ;
2462: LD_ADDR_EXP 13
2466: PUSH
2467: LD_INT 0
2469: ST_TO_ADDR
// if TestCharacters ( Kowalski_11_sel ) then
2470: LD_STRING Kowalski_11_sel
2472: PPUSH
2473: CALL_OW 28
2477: IFFALSE 2494
// Kowalski = CreateCharacter ( Kowalski_11_sel ) else
2479: LD_ADDR_EXP 14
2483: PUSH
2484: LD_STRING Kowalski_11_sel
2486: PPUSH
2487: CALL_OW 34
2491: ST_TO_ADDR
2492: GO 2502
// Kowalski = 0 ;
2494: LD_ADDR_EXP 14
2498: PUSH
2499: LD_INT 0
2501: ST_TO_ADDR
// if TestCharacters ( Evelyn_11_sel ) then
2502: LD_STRING Evelyn_11_sel
2504: PPUSH
2505: CALL_OW 28
2509: IFFALSE 2526
// Evelyn = CreateCharacter ( Evelyn_11_sel ) else
2511: LD_ADDR_EXP 15
2515: PUSH
2516: LD_STRING Evelyn_11_sel
2518: PPUSH
2519: CALL_OW 34
2523: ST_TO_ADDR
2524: GO 2534
// Evelyn = 0 ;
2526: LD_ADDR_EXP 15
2530: PUSH
2531: LD_INT 0
2533: ST_TO_ADDR
// if TestCharacters ( Suze_11_sel ) then
2534: LD_STRING Suze_11_sel
2536: PPUSH
2537: CALL_OW 28
2541: IFFALSE 2558
// Suze = CreateCharacter ( Suze_11_sel ) else
2543: LD_ADDR_EXP 16
2547: PUSH
2548: LD_STRING Suze_11_sel
2550: PPUSH
2551: CALL_OW 34
2555: ST_TO_ADDR
2556: GO 2566
// Suze = 0 ;
2558: LD_ADDR_EXP 16
2562: PUSH
2563: LD_INT 0
2565: ST_TO_ADDR
// if TestCharacters ( Olaf_11_sel ) then
2566: LD_STRING Olaf_11_sel
2568: PPUSH
2569: CALL_OW 28
2573: IFFALSE 2590
// Olaf = CreateCharacter ( Olaf_11_sel ) else
2575: LD_ADDR_EXP 17
2579: PUSH
2580: LD_STRING Olaf_11_sel
2582: PPUSH
2583: CALL_OW 34
2587: ST_TO_ADDR
2588: GO 2598
// Olaf = 0 ;
2590: LD_ADDR_EXP 17
2594: PUSH
2595: LD_INT 0
2597: ST_TO_ADDR
// if TestCharacters ( Dwayne_11_sel ) then
2598: LD_STRING Dwayne_11_sel
2600: PPUSH
2601: CALL_OW 28
2605: IFFALSE 2622
// Dwayne = CreateCharacter ( Dwayne_11_sel ) else
2607: LD_ADDR_EXP 19
2611: PUSH
2612: LD_STRING Dwayne_11_sel
2614: PPUSH
2615: CALL_OW 34
2619: ST_TO_ADDR
2620: GO 2630
// Dwayne = 0 ;
2622: LD_ADDR_EXP 19
2626: PUSH
2627: LD_INT 0
2629: ST_TO_ADDR
// if TestCharacters ( MarkB_11_sel ) then
2630: LD_STRING MarkB_11_sel
2632: PPUSH
2633: CALL_OW 28
2637: IFFALSE 2654
// MarkB = CreateCharacter ( MarkB_11_sel ) else
2639: LD_ADDR_EXP 20
2643: PUSH
2644: LD_STRING MarkB_11_sel
2646: PPUSH
2647: CALL_OW 34
2651: ST_TO_ADDR
2652: GO 2662
// MarkB = 0 ;
2654: LD_ADDR_EXP 20
2658: PUSH
2659: LD_INT 0
2661: ST_TO_ADDR
// if TestCharacters ( Aviradze_11_sel ) then
2662: LD_STRING Aviradze_11_sel
2664: PPUSH
2665: CALL_OW 28
2669: IFFALSE 2686
// Aviradze = CreateCharacter ( Aviradze_11_sel ) else
2671: LD_ADDR_EXP 21
2675: PUSH
2676: LD_STRING Aviradze_11_sel
2678: PPUSH
2679: CALL_OW 34
2683: ST_TO_ADDR
2684: GO 2694
// Aviradze = 0 ;
2686: LD_ADDR_EXP 21
2690: PUSH
2691: LD_INT 0
2693: ST_TO_ADDR
// if TestCharacters ( Swansson_11_sel ) then
2694: LD_STRING Swansson_11_sel
2696: PPUSH
2697: CALL_OW 28
2701: IFFALSE 2718
// Swansson = CreateCharacter ( Swansson_11_sel ) else
2703: LD_ADDR_EXP 22
2707: PUSH
2708: LD_STRING Swansson_11_sel
2710: PPUSH
2711: CALL_OW 34
2715: ST_TO_ADDR
2716: GO 2726
// Swansson = 0 ;
2718: LD_ADDR_EXP 22
2722: PUSH
2723: LD_INT 0
2725: ST_TO_ADDR
// human_list = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] diff 0 ;
2726: LD_ADDR_VAR 0 2
2730: PUSH
2731: LD_EXP 10
2735: PUSH
2736: LD_EXP 11
2740: PUSH
2741: LD_EXP 12
2745: PUSH
2746: LD_EXP 13
2750: PUSH
2751: LD_EXP 14
2755: PUSH
2756: LD_EXP 15
2760: PUSH
2761: LD_EXP 16
2765: PUSH
2766: LD_EXP 17
2770: PUSH
2771: LD_EXP 18
2775: PUSH
2776: LD_EXP 19
2780: PUSH
2781: LD_EXP 20
2785: PUSH
2786: LD_EXP 21
2790: PUSH
2791: LD_EXP 22
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 0
2813: DIFF
2814: ST_TO_ADDR
// human_list = human_list ^ ( CreateCharacterSet ( Others_11_sel ) diff 0 ) ;
2815: LD_ADDR_VAR 0 2
2819: PUSH
2820: LD_VAR 0 2
2824: PUSH
2825: LD_STRING Others_11_sel
2827: PPUSH
2828: CALL_OW 31
2832: PUSH
2833: LD_INT 0
2835: DIFF
2836: ADD
2837: ST_TO_ADDR
// if TestCharacters ( Gonzo_10 ) then
2838: LD_STRING Gonzo_10
2840: PPUSH
2841: CALL_OW 28
2845: IFFALSE 2878
// begin Gonzo = CreateCharacter ( Gonzo_10 ) ;
2847: LD_ADDR_EXP 23
2851: PUSH
2852: LD_STRING Gonzo_10
2854: PPUSH
2855: CALL_OW 34
2859: ST_TO_ADDR
// human_list = human_list ^ Gonzo ;
2860: LD_ADDR_VAR 0 2
2864: PUSH
2865: LD_VAR 0 2
2869: PUSH
2870: LD_EXP 23
2874: ADD
2875: ST_TO_ADDR
// end else
2876: GO 2886
// Gonzo = 0 ;
2878: LD_ADDR_EXP 23
2882: PUSH
2883: LD_INT 0
2885: ST_TO_ADDR
// end else
2886: GO 3421
// begin InitHc ;
2888: CALL_OW 19
// PrepareSoldier ( sex_female , 7 ) ;
2892: LD_INT 2
2894: PPUSH
2895: LD_INT 7
2897: PPUSH
2898: CALL_OW 381
// hc_name = Heike ;
2902: LD_ADDR_OWVAR 26
2906: PUSH
2907: LD_STRING Heike
2909: ST_TO_ADDR
// Heike = CreateHuman ;
2910: LD_ADDR_EXP 10
2914: PUSH
2915: CALL_OW 44
2919: ST_TO_ADDR
// PrepareScientist ( sex_female , 7 ) ;
2920: LD_INT 2
2922: PPUSH
2923: LD_INT 7
2925: PPUSH
2926: CALL_OW 384
// hc_name = Sonya ;
2930: LD_ADDR_OWVAR 26
2934: PUSH
2935: LD_STRING Sonya
2937: ST_TO_ADDR
// Sonya = CreateHuman ;
2938: LD_ADDR_EXP 11
2942: PUSH
2943: CALL_OW 44
2947: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
2948: LD_INT 1
2950: PPUSH
2951: LD_INT 7
2953: PPUSH
2954: CALL_OW 381
// hc_name = Oswald ;
2958: LD_ADDR_OWVAR 26
2962: PUSH
2963: LD_STRING Oswald
2965: ST_TO_ADDR
// Oswald = CreateHuman ;
2966: LD_ADDR_EXP 12
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// oswald_is_substitute = false ;
2976: LD_ADDR_EXP 81
2980: PUSH
2981: LD_INT 0
2983: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
2984: LD_INT 1
2986: PPUSH
2987: LD_INT 7
2989: PPUSH
2990: CALL_OW 381
// hc_name = Ralph ;
2994: LD_ADDR_OWVAR 26
2998: PUSH
2999: LD_STRING Ralph
3001: ST_TO_ADDR
// Ralph = CreateHuman ;
3002: LD_ADDR_EXP 13
3006: PUSH
3007: CALL_OW 44
3011: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3012: LD_INT 1
3014: PPUSH
3015: LD_INT 7
3017: PPUSH
3018: CALL_OW 381
// hc_name = Kowalski ;
3022: LD_ADDR_OWVAR 26
3026: PUSH
3027: LD_STRING Kowalski
3029: ST_TO_ADDR
// Kowalski = CreateHuman ;
3030: LD_ADDR_EXP 14
3034: PUSH
3035: CALL_OW 44
3039: ST_TO_ADDR
// PrepareEngineer ( sex_female , 7 ) ;
3040: LD_INT 2
3042: PPUSH
3043: LD_INT 7
3045: PPUSH
3046: CALL_OW 382
// hc_name = Evelyn ;
3050: LD_ADDR_OWVAR 26
3054: PUSH
3055: LD_STRING Evelyn
3057: ST_TO_ADDR
// Evelyn = CreateHuman ;
3058: LD_ADDR_EXP 15
3062: PUSH
3063: CALL_OW 44
3067: ST_TO_ADDR
// PrepareSoldier ( sex_female , 7 ) ;
3068: LD_INT 2
3070: PPUSH
3071: LD_INT 7
3073: PPUSH
3074: CALL_OW 381
// hc_name = Suze ;
3078: LD_ADDR_OWVAR 26
3082: PUSH
3083: LD_STRING Suze
3085: ST_TO_ADDR
// Suze = CreateHuman ;
3086: LD_ADDR_EXP 16
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 7
3101: PPUSH
3102: CALL_OW 383
// hc_name = Olaf ;
3106: LD_ADDR_OWVAR 26
3110: PUSH
3111: LD_STRING Olaf
3113: ST_TO_ADDR
// Olaf = CreateHuman ;
3114: LD_ADDR_EXP 17
3118: PUSH
3119: CALL_OW 44
3123: ST_TO_ADDR
// PrepareSoldier ( sex_male , 7 ) ;
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 7
3129: PPUSH
3130: CALL_OW 381
// hc_name = Kurt ;
3134: LD_ADDR_OWVAR 26
3138: PUSH
3139: LD_STRING Kurt
3141: ST_TO_ADDR
// Kurt = CreateHuman ;
3142: LD_ADDR_EXP 18
3146: PUSH
3147: CALL_OW 44
3151: ST_TO_ADDR
// kurt_is_substitute = false ;
3152: LD_ADDR_EXP 82
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
3160: LD_INT 1
3162: PPUSH
3163: LD_INT 7
3165: PPUSH
3166: CALL_OW 383
// hc_name = Dwayne ;
3170: LD_ADDR_OWVAR 26
3174: PUSH
3175: LD_STRING Dwayne
3177: ST_TO_ADDR
// Dwayne = CreateHuman ;
3178: LD_ADDR_EXP 19
3182: PUSH
3183: CALL_OW 44
3187: ST_TO_ADDR
// PrepareScientist ( sex_male , 7 ) ;
3188: LD_INT 1
3190: PPUSH
3191: LD_INT 7
3193: PPUSH
3194: CALL_OW 384
// hc_name = Mark ;
3198: LD_ADDR_OWVAR 26
3202: PUSH
3203: LD_STRING Mark
3205: ST_TO_ADDR
// MarkB = CreateHuman ;
3206: LD_ADDR_EXP 20
3210: PUSH
3211: CALL_OW 44
3215: ST_TO_ADDR
// Aviradze = 0 ;
3216: LD_ADDR_EXP 21
3220: PUSH
3221: LD_INT 0
3223: ST_TO_ADDR
// Swansson = 0 ;
3224: LD_ADDR_EXP 22
3228: PUSH
3229: LD_INT 0
3231: ST_TO_ADDR
// human_list = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] diff 0 ;
3232: LD_ADDR_VAR 0 2
3236: PUSH
3237: LD_EXP 10
3241: PUSH
3242: LD_EXP 11
3246: PUSH
3247: LD_EXP 12
3251: PUSH
3252: LD_EXP 13
3256: PUSH
3257: LD_EXP 14
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_EXP 16
3271: PUSH
3272: LD_EXP 17
3276: PUSH
3277: LD_EXP 18
3281: PUSH
3282: LD_EXP 19
3286: PUSH
3287: LD_EXP 20
3291: PUSH
3292: LD_EXP 21
3296: PUSH
3297: LD_EXP 22
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: PUSH
3317: LD_INT 0
3319: DIFF
3320: ST_TO_ADDR
// InitHc ;
3321: CALL_OW 19
// uc_nation = nation_nature ;
3325: LD_ADDR_OWVAR 21
3329: PUSH
3330: LD_INT 0
3332: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
3333: LD_ADDR_OWVAR 28
3337: PUSH
3338: LD_INT 15
3340: ST_TO_ADDR
// hc_name = Gonzo ;
3341: LD_ADDR_OWVAR 26
3345: PUSH
3346: LD_STRING Gonzo
3348: ST_TO_ADDR
// hc_skills = [ 3 , 1 , 0 , 0 ] ;
3349: LD_ADDR_OWVAR 31
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: LD_INT 1
3359: PUSH
3360: LD_INT 0
3362: PUSH
3363: LD_INT 0
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: ST_TO_ADDR
// hc_attr = [ 13 , 12 ] ;
3372: LD_ADDR_OWVAR 29
3376: PUSH
3377: LD_INT 13
3379: PUSH
3380: LD_INT 12
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: ST_TO_ADDR
// hc_sex = sex_male ;
3387: LD_ADDR_OWVAR 27
3391: PUSH
3392: LD_INT 1
3394: ST_TO_ADDR
// Gonzo = CreateHuman ;
3395: LD_ADDR_EXP 23
3399: PUSH
3400: CALL_OW 44
3404: ST_TO_ADDR
// human_list = human_list ^ Gonzo ;
3405: LD_ADDR_VAR 0 2
3409: PUSH
3410: LD_VAR 0 2
3414: PUSH
3415: LD_EXP 23
3419: ADD
3420: ST_TO_ADDR
// end ; InitVc ;
3421: CALL_OW 20
// uc_direction = 5 ;
3425: LD_ADDR_OWVAR 24
3429: PUSH
3430: LD_INT 5
3432: ST_TO_ADDR
// uc_nation = nation_arabian ;
3433: LD_ADDR_OWVAR 21
3437: PUSH
3438: LD_INT 2
3440: ST_TO_ADDR
// vc_engine = engine_combustion ;
3441: LD_ADDR_OWVAR 39
3445: PUSH
3446: LD_INT 1
3448: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
3449: LD_ADDR_OWVAR 37
3453: PUSH
3454: LD_INT 14
3456: ST_TO_ADDR
// vc_control = control_manual ;
3457: LD_ADDR_OWVAR 38
3461: PUSH
3462: LD_INT 1
3464: ST_TO_ADDR
// vc_weapon = ar_cargo_bay ;
3465: LD_ADDR_OWVAR 40
3469: PUSH
3470: LD_INT 32
3472: ST_TO_ADDR
// for i = 1 to 2 do
3473: LD_ADDR_VAR 0 3
3477: PUSH
3478: DOUBLE
3479: LD_INT 1
3481: DEC
3482: ST_TO_ADDR
3483: LD_INT 2
3485: PUSH
3486: FOR_TO
3487: IFFALSE 3808
// begin temp_unit = CreateVehicle ;
3489: LD_ADDR_VAR 0 4
3493: PUSH
3494: CALL_OW 45
3498: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
3499: LD_VAR 0 4
3503: PPUSH
3504: LD_INT 50
3506: PPUSH
3507: LD_INT 70
3509: PPUSH
3510: CALL_OW 12
3514: PPUSH
3515: CALL_OW 240
// val = Rand ( 1 , human_list - 1 ) ;
3519: LD_ADDR_VAR 0 5
3523: PUSH
3524: LD_INT 1
3526: PPUSH
3527: LD_VAR 0 2
3531: PUSH
3532: LD_INT 1
3534: MINUS
3535: PPUSH
3536: CALL_OW 12
3540: ST_TO_ADDR
// PlaceHumanInUnit ( human_list [ val ] , temp_unit ) ;
3541: LD_VAR 0 2
3545: PUSH
3546: LD_VAR 0 5
3550: ARRAY
3551: PPUSH
3552: LD_VAR 0 4
3556: PPUSH
3557: CALL_OW 52
// human_list = Delete ( human_list , val ) ;
3561: LD_ADDR_VAR 0 2
3565: PUSH
3566: LD_VAR 0 2
3570: PPUSH
3571: LD_VAR 0 5
3575: PPUSH
3576: CALL_OW 3
3580: ST_TO_ADDR
// case i of 1 :
3581: LD_VAR 0 3
3585: PUSH
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3612
3594: POP
// begin SetCargo ( temp_unit , mat_cans , 100 ) ;
3595: LD_VAR 0 4
3599: PPUSH
3600: LD_INT 1
3602: PPUSH
3603: LD_INT 100
3605: PPUSH
3606: CALL_OW 290
// end ; 2 :
3610: GO 3791
3612: LD_INT 2
3614: DOUBLE
3615: EQUAL
3616: IFTRUE 3620
3618: GO 3790
3620: POP
// begin val = [ 90 , 70 , 50 ] [ difficulty ] ;
3621: LD_ADDR_VAR 0 5
3625: PUSH
3626: LD_INT 90
3628: PUSH
3629: LD_INT 70
3631: PUSH
3632: LD_INT 50
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_OWVAR 67
3644: ARRAY
3645: ST_TO_ADDR
// if LoadVariable ( Abdul_doubt_07 , false ) then
3646: LD_STRING Abdul_doubt_07
3648: PPUSH
3649: LD_INT 0
3651: PPUSH
3652: CALL_OW 30
3656: IFFALSE 3672
// val = val - 50 ;
3658: LD_ADDR_VAR 0 5
3662: PUSH
3663: LD_VAR 0 5
3667: PUSH
3668: LD_INT 50
3670: MINUS
3671: ST_TO_ADDR
// if LoadVariable ( Siberite_gathered_on_time_07_cont , true ) then
3672: LD_STRING Siberite_gathered_on_time_07_cont
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: CALL_OW 30
3682: IFFALSE 3718
// begin val = val + 20 ;
3684: LD_ADDR_VAR 0 5
3688: PUSH
3689: LD_VAR 0 5
3693: PUSH
3694: LD_INT 20
3696: PLUS
3697: ST_TO_ADDR
// if val > 100 then
3698: LD_VAR 0 5
3702: PUSH
3703: LD_INT 100
3705: GREATER
3706: IFFALSE 3716
// val = 100 ;
3708: LD_ADDR_VAR 0 5
3712: PUSH
3713: LD_INT 100
3715: ST_TO_ADDR
// end else
3716: GO 3732
// val = val - 50 ;
3718: LD_ADDR_VAR 0 5
3722: PUSH
3723: LD_VAR 0 5
3727: PUSH
3728: LD_INT 50
3730: MINUS
3731: ST_TO_ADDR
// if val < 0 then
3732: LD_VAR 0 5
3736: PUSH
3737: LD_INT 0
3739: LESS
3740: IFFALSE 3750
// val = 0 ;
3742: LD_ADDR_VAR 0 5
3746: PUSH
3747: LD_INT 0
3749: ST_TO_ADDR
// SetCargo ( temp_unit , mat_cans , val ) ;
3750: LD_VAR 0 4
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_VAR 0 5
3762: PPUSH
3763: CALL_OW 290
// AddCargo ( temp_unit , mat_oil , 100 - val ) ;
3767: LD_VAR 0 4
3771: PPUSH
3772: LD_INT 2
3774: PPUSH
3775: LD_INT 100
3777: PUSH
3778: LD_VAR 0 5
3782: MINUS
3783: PPUSH
3784: CALL_OW 291
// end ; end ;
3788: GO 3791
3790: POP
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
3791: LD_VAR 0 4
3795: PPUSH
3796: LD_INT 8
3798: PPUSH
3799: LD_INT 0
3801: PPUSH
3802: CALL_OW 49
// end ;
3806: GO 3486
3808: POP
3809: POP
// val = 0 ;
3810: LD_ADDR_VAR 0 5
3814: PUSH
3815: LD_INT 0
3817: ST_TO_ADDR
// for i = 1 to [ 3 , 2 , 1 ] [ difficulty ] - LoadVariable ( Abdul_doubt_07 , false ) do
3818: LD_ADDR_VAR 0 3
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_INT 3
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: LD_INT 1
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: PUSH
3842: LD_OWVAR 67
3846: ARRAY
3847: PUSH
3848: LD_STRING Abdul_doubt_07
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 30
3858: MINUS
3859: PUSH
3860: FOR_TO
3861: IFFALSE 4407
// begin vc_engine = engine_combustion ;
3863: LD_ADDR_OWVAR 39
3867: PUSH
3868: LD_INT 1
3870: ST_TO_ADDR
// if val = 0 then
3871: LD_VAR 0 5
3875: PUSH
3876: LD_INT 0
3878: EQUAL
3879: IFFALSE 3971
// begin case Rand ( 1 , 4 ) of 1 :
3881: LD_INT 1
3883: PPUSH
3884: LD_INT 4
3886: PPUSH
3887: CALL_OW 12
3891: PUSH
3892: LD_INT 1
3894: DOUBLE
3895: EQUAL
3896: IFTRUE 3900
3898: GO 3911
3900: POP
// vc_chassis = ar_hovercraft ; 2 :
3901: LD_ADDR_OWVAR 37
3905: PUSH
3906: LD_INT 11
3908: ST_TO_ADDR
3909: GO 3969
3911: LD_INT 2
3913: DOUBLE
3914: EQUAL
3915: IFTRUE 3919
3917: GO 3930
3919: POP
// vc_chassis = ar_light_trike ; 3 :
3920: LD_ADDR_OWVAR 37
3924: PUSH
3925: LD_INT 12
3927: ST_TO_ADDR
3928: GO 3969
3930: LD_INT 3
3932: DOUBLE
3933: EQUAL
3934: IFTRUE 3938
3936: GO 3949
3938: POP
// vc_chassis = ar_medium_trike ; 4 :
3939: LD_ADDR_OWVAR 37
3943: PUSH
3944: LD_INT 13
3946: ST_TO_ADDR
3947: GO 3969
3949: LD_INT 4
3951: DOUBLE
3952: EQUAL
3953: IFTRUE 3957
3955: GO 3968
3957: POP
// vc_chassis = ar_half_tracked ; end ;
3958: LD_ADDR_OWVAR 37
3962: PUSH
3963: LD_INT 14
3965: ST_TO_ADDR
3966: GO 3969
3968: POP
// end else
3969: GO 4021
// begin case Rand ( 1 , 2 ) of 1 :
3971: LD_INT 1
3973: PPUSH
3974: LD_INT 2
3976: PPUSH
3977: CALL_OW 12
3981: PUSH
3982: LD_INT 1
3984: DOUBLE
3985: EQUAL
3986: IFTRUE 3990
3988: GO 4001
3990: POP
// vc_chassis = ar_medium_trike ; 2 :
3991: LD_ADDR_OWVAR 37
3995: PUSH
3996: LD_INT 13
3998: ST_TO_ADDR
3999: GO 4021
4001: LD_INT 2
4003: DOUBLE
4004: EQUAL
4005: IFTRUE 4009
4007: GO 4020
4009: POP
// vc_chassis = ar_half_tracked ; end ;
4010: LD_ADDR_OWVAR 37
4014: PUSH
4015: LD_INT 14
4017: ST_TO_ADDR
4018: GO 4021
4020: POP
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
4021: LD_OWVAR 37
4025: PUSH
4026: LD_INT 11
4028: PUSH
4029: LD_INT 12
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: IN
4036: IFFALSE 4166
// begin val = val + 1 ;
4038: LD_ADDR_VAR 0 5
4042: PUSH
4043: LD_VAR 0 5
4047: PUSH
4048: LD_INT 1
4050: PLUS
4051: ST_TO_ADDR
// case Rand ( 1 , 4 ) of 1 :
4052: LD_INT 1
4054: PPUSH
4055: LD_INT 4
4057: PPUSH
4058: CALL_OW 12
4062: PUSH
4063: LD_INT 1
4065: DOUBLE
4066: EQUAL
4067: IFTRUE 4071
4069: GO 4082
4071: POP
// vc_weapon = ar_multimissile_ballista ; 2 :
4072: LD_ADDR_OWVAR 40
4076: PUSH
4077: LD_INT 22
4079: ST_TO_ADDR
4080: GO 4140
4082: LD_INT 2
4084: DOUBLE
4085: EQUAL
4086: IFTRUE 4090
4088: GO 4101
4090: POP
// vc_weapon = ar_light_gun ; 3 :
4091: LD_ADDR_OWVAR 40
4095: PUSH
4096: LD_INT 23
4098: ST_TO_ADDR
4099: GO 4140
4101: LD_INT 3
4103: DOUBLE
4104: EQUAL
4105: IFTRUE 4109
4107: GO 4120
4109: POP
// vc_weapon = ar_double_machine_gun ; 4 :
4110: LD_ADDR_OWVAR 40
4114: PUSH
4115: LD_INT 24
4117: ST_TO_ADDR
4118: GO 4140
4120: LD_INT 4
4122: DOUBLE
4123: EQUAL
4124: IFTRUE 4128
4126: GO 4139
4128: POP
// vc_weapon = ar_radar ; end ;
4129: LD_ADDR_OWVAR 40
4133: PUSH
4134: LD_INT 30
4136: ST_TO_ADDR
4137: GO 4140
4139: POP
// if Rand ( 1 , 2 ) = 1 then
4140: LD_INT 1
4142: PPUSH
4143: LD_INT 2
4145: PPUSH
4146: CALL_OW 12
4150: PUSH
4151: LD_INT 1
4153: EQUAL
4154: IFFALSE 4164
// vc_engine = engine_solar ;
4156: LD_ADDR_OWVAR 39
4160: PUSH
4161: LD_INT 2
4163: ST_TO_ADDR
// end else
4164: GO 4254
// begin case Rand ( 1 , 4 ) of 1 :
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 4
4171: PPUSH
4172: CALL_OW 12
4176: PUSH
4177: LD_INT 1
4179: DOUBLE
4180: EQUAL
4181: IFTRUE 4185
4183: GO 4196
4185: POP
// vc_weapon = ar_gatling_gun ; 2 :
4186: LD_ADDR_OWVAR 40
4190: PUSH
4191: LD_INT 25
4193: ST_TO_ADDR
4194: GO 4254
4196: LD_INT 2
4198: DOUBLE
4199: EQUAL
4200: IFTRUE 4204
4202: GO 4215
4204: POP
// vc_weapon = ar_gun ; 3 :
4205: LD_ADDR_OWVAR 40
4209: PUSH
4210: LD_INT 27
4212: ST_TO_ADDR
4213: GO 4254
4215: LD_INT 3
4217: DOUBLE
4218: EQUAL
4219: IFTRUE 4223
4221: GO 4234
4223: POP
// vc_weapon = ar_flame_thrower ; 4 :
4224: LD_ADDR_OWVAR 40
4228: PUSH
4229: LD_INT 26
4231: ST_TO_ADDR
4232: GO 4254
4234: LD_INT 4
4236: DOUBLE
4237: EQUAL
4238: IFTRUE 4242
4240: GO 4253
4242: POP
// vc_weapon = ar_rocket_launcher ; end ;
4243: LD_ADDR_OWVAR 40
4247: PUSH
4248: LD_INT 28
4250: ST_TO_ADDR
4251: GO 4254
4253: POP
// end ; if Rand ( 1 , 5 ) <= 2 then
4254: LD_INT 1
4256: PPUSH
4257: LD_INT 5
4259: PPUSH
4260: CALL_OW 12
4264: PUSH
4265: LD_INT 2
4267: LESSEQUAL
4268: IFFALSE 4280
// vc_control = control_apeman else
4270: LD_ADDR_OWVAR 38
4274: PUSH
4275: LD_INT 5
4277: ST_TO_ADDR
4278: GO 4288
// vc_control = control_manual ;
4280: LD_ADDR_OWVAR 38
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4288: LD_ADDR_VAR 0 4
4292: PUSH
4293: CALL_OW 45
4297: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4298: LD_VAR 0 4
4302: PPUSH
4303: LD_INT 50
4305: PPUSH
4306: LD_INT 70
4308: PPUSH
4309: CALL_OW 12
4313: PPUSH
4314: CALL_OW 240
// if vc_control = control_manual then
4318: LD_OWVAR 38
4322: PUSH
4323: LD_INT 1
4325: EQUAL
4326: IFFALSE 4390
// begin val = Rand ( 1 , human_list - 1 ) ;
4328: LD_ADDR_VAR 0 5
4332: PUSH
4333: LD_INT 1
4335: PPUSH
4336: LD_VAR 0 2
4340: PUSH
4341: LD_INT 1
4343: MINUS
4344: PPUSH
4345: CALL_OW 12
4349: ST_TO_ADDR
// PlaceHumanInUnit ( human_list [ val ] , temp_unit ) ;
4350: LD_VAR 0 2
4354: PUSH
4355: LD_VAR 0 5
4359: ARRAY
4360: PPUSH
4361: LD_VAR 0 4
4365: PPUSH
4366: CALL_OW 52
// human_list = Delete ( human_list , val ) ;
4370: LD_ADDR_VAR 0 2
4374: PUSH
4375: LD_VAR 0 2
4379: PPUSH
4380: LD_VAR 0 5
4384: PPUSH
4385: CALL_OW 3
4389: ST_TO_ADDR
// end ; PlaceUnitArea ( temp_unit , enter_area , false ) ;
4390: LD_VAR 0 4
4394: PPUSH
4395: LD_INT 8
4397: PPUSH
4398: LD_INT 0
4400: PPUSH
4401: CALL_OW 49
// end ;
4405: GO 3860
4407: POP
4408: POP
// for i in human_list do
4409: LD_ADDR_VAR 0 3
4413: PUSH
4414: LD_VAR 0 2
4418: PUSH
4419: FOR_IN
4420: IFFALSE 4439
// PlaceUnitArea ( i , enter_area , false ) ;
4422: LD_VAR 0 3
4426: PPUSH
4427: LD_INT 8
4429: PPUSH
4430: LD_INT 0
4432: PPUSH
4433: CALL_OW 49
4437: GO 4419
4439: POP
4440: POP
// vc_engine = engine_solar ;
4441: LD_ADDR_OWVAR 39
4445: PUSH
4446: LD_INT 2
4448: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
4449: LD_ADDR_OWVAR 37
4453: PUSH
4454: LD_INT 11
4456: ST_TO_ADDR
// vc_control = control_apeman ;
4457: LD_ADDR_OWVAR 38
4461: PUSH
4462: LD_INT 5
4464: ST_TO_ADDR
// vc_weapon = ar_radar ;
4465: LD_ADDR_OWVAR 40
4469: PUSH
4470: LD_INT 30
4472: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4473: LD_ADDR_VAR 0 4
4477: PUSH
4478: CALL_OW 45
4482: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4483: LD_VAR 0 4
4487: PPUSH
4488: LD_INT 50
4490: PPUSH
4491: LD_INT 70
4493: PPUSH
4494: CALL_OW 12
4498: PPUSH
4499: CALL_OW 240
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
4503: LD_VAR 0 4
4507: PPUSH
4508: LD_INT 8
4510: PPUSH
4511: LD_INT 0
4513: PPUSH
4514: CALL_OW 49
// vc_engine = engine_solar ;
4518: LD_ADDR_OWVAR 39
4522: PUSH
4523: LD_INT 2
4525: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
4526: LD_ADDR_OWVAR 37
4530: PUSH
4531: LD_INT 14
4533: ST_TO_ADDR
// vc_control = control_apeman ;
4534: LD_ADDR_OWVAR 38
4538: PUSH
4539: LD_INT 5
4541: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
4542: LD_ADDR_OWVAR 40
4546: PUSH
4547: LD_INT 28
4549: ST_TO_ADDR
// temp_unit = CreateVehicle ;
4550: LD_ADDR_VAR 0 4
4554: PUSH
4555: CALL_OW 45
4559: ST_TO_ADDR
// SetFuel ( temp_unit , Rand ( 50 , 70 ) ) ;
4560: LD_VAR 0 4
4564: PPUSH
4565: LD_INT 50
4567: PPUSH
4568: LD_INT 70
4570: PPUSH
4571: CALL_OW 12
4575: PPUSH
4576: CALL_OW 240
// PlaceUnitArea ( temp_unit , enter_area , false ) ;
4580: LD_VAR 0 4
4584: PPUSH
4585: LD_INT 8
4587: PPUSH
4588: LD_INT 0
4590: PPUSH
4591: CALL_OW 49
// Gensher = NewCharacter ( Dietrich ) ;
4595: LD_ADDR_EXP 24
4599: PUSH
4600: LD_STRING Dietrich
4602: PPUSH
4603: CALL_OW 25
4607: ST_TO_ADDR
// SetSide ( Gensher , you_alt ) ;
4608: LD_EXP 24
4612: PPUSH
4613: LD_EXP 6
4617: PPUSH
4618: CALL_OW 235
// PlaceHumanInUnit ( Gensher , ar_bar ) ;
4622: LD_EXP 24
4626: PPUSH
4627: LD_INT 61
4629: PPUSH
4630: CALL_OW 52
// InitHc ;
4634: CALL_OW 19
// uc_side = you_alt ;
4638: LD_ADDR_OWVAR 20
4642: PUSH
4643: LD_EXP 6
4647: ST_TO_ADDR
// for i = 1 to 4 do
4648: LD_ADDR_VAR 0 3
4652: PUSH
4653: DOUBLE
4654: LD_INT 1
4656: DEC
4657: ST_TO_ADDR
4658: LD_INT 4
4660: PUSH
4661: FOR_TO
4662: IFFALSE 4714
// begin PrepareScientist ( false , 7 ) ;
4664: LD_INT 0
4666: PPUSH
4667: LD_INT 7
4669: PPUSH
4670: CALL_OW 384
// temp_unit = CreateHuman ;
4674: LD_ADDR_VAR 0 4
4678: PUSH
4679: CALL_OW 44
4683: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ temp_unit ;
4684: LD_ADDR_EXP 83
4688: PUSH
4689: LD_EXP 83
4693: PUSH
4694: LD_VAR 0 4
4698: ADD
4699: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lab ) ;
4700: LD_VAR 0 4
4704: PPUSH
4705: LD_INT 59
4707: PPUSH
4708: CALL_OW 52
// end ;
4712: GO 4661
4714: POP
4715: POP
// ai_scientists = Replace ( ai_scientists , 2 , original_gensher_people ) ;
4716: LD_ADDR_EXP 33
4720: PUSH
4721: LD_EXP 33
4725: PPUSH
4726: LD_INT 2
4728: PPUSH
4729: LD_EXP 83
4733: PPUSH
4734: CALL_OW 1
4738: ST_TO_ADDR
// PrepareEngineer ( false , [ 7 , 6 , 5 ] [ difficulty ] ) ;
4739: LD_INT 0
4741: PPUSH
4742: LD_INT 7
4744: PUSH
4745: LD_INT 6
4747: PUSH
4748: LD_INT 5
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: PUSH
4756: LD_OWVAR 67
4760: ARRAY
4761: PPUSH
4762: CALL_OW 382
// temp_unit = CreateHuman ;
4766: LD_ADDR_VAR 0 4
4770: PUSH
4771: CALL_OW 44
4775: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ temp_unit ;
4776: LD_ADDR_EXP 83
4780: PUSH
4781: LD_EXP 83
4785: PUSH
4786: LD_VAR 0 4
4790: ADD
4791: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_dep ) ;
4792: LD_VAR 0 4
4796: PPUSH
4797: LD_INT 58
4799: PPUSH
4800: CALL_OW 52
// ai_engineers = Replace ( ai_engineers , 2 , [ temp_unit ] ) ;
4804: LD_ADDR_EXP 31
4808: PUSH
4809: LD_EXP 31
4813: PPUSH
4814: LD_INT 2
4816: PPUSH
4817: LD_VAR 0 4
4821: PUSH
4822: EMPTY
4823: LIST
4824: PPUSH
4825: CALL_OW 1
4829: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ mech1 ;
4830: LD_ADDR_EXP 83
4834: PUSH
4835: LD_EXP 83
4839: PUSH
4840: LD_INT 495
4842: ADD
4843: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ mech2 ;
4844: LD_ADDR_EXP 83
4848: PUSH
4849: LD_EXP 83
4853: PUSH
4854: LD_INT 494
4856: ADD
4857: ST_TO_ADDR
// original_gensher_people = original_gensher_people ^ healer ;
4858: LD_ADDR_EXP 83
4862: PUSH
4863: LD_EXP 83
4867: PUSH
4868: LD_INT 541
4870: ADD
4871: ST_TO_ADDR
// InitHc ;
4872: CALL_OW 19
// uc_nation = nation_nature ;
4876: LD_ADDR_OWVAR 21
4880: PUSH
4881: LD_INT 0
4883: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
4884: LD_ADDR_OWVAR 28
4888: PUSH
4889: LD_INT 15
4891: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 2 ) , Rand ( 0 , 1 ) , 0 , 0 ] ;
4892: LD_ADDR_OWVAR 31
4896: PUSH
4897: LD_INT 1
4899: PPUSH
4900: LD_INT 2
4902: PPUSH
4903: CALL_OW 12
4907: PUSH
4908: LD_INT 0
4910: PPUSH
4911: LD_INT 1
4913: PPUSH
4914: CALL_OW 12
4918: PUSH
4919: LD_INT 0
4921: PUSH
4922: LD_INT 0
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 12 ) ] ;
4931: LD_ADDR_OWVAR 29
4935: PUSH
4936: LD_INT 11
4938: PPUSH
4939: LD_INT 13
4941: PPUSH
4942: CALL_OW 12
4946: PUSH
4947: LD_INT 10
4949: PPUSH
4950: LD_INT 12
4952: PPUSH
4953: CALL_OW 12
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4962: LD_ADDR_OWVAR 27
4966: PUSH
4967: LD_INT 1
4969: PPUSH
4970: LD_INT 2
4972: PPUSH
4973: CALL_OW 12
4977: ST_TO_ADDR
// temp_unit = CreateHuman ;
4978: LD_ADDR_VAR 0 4
4982: PUSH
4983: CALL_OW 44
4987: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_bu1 ) ;
4988: LD_VAR 0 4
4992: PPUSH
4993: LD_INT 73
4995: PPUSH
4996: CALL_OW 52
// human_list = [ temp_unit ] ;
5000: LD_ADDR_VAR 0 2
5004: PUSH
5005: LD_VAR 0 4
5009: PUSH
5010: EMPTY
5011: LIST
5012: ST_TO_ADDR
// gensher_bunker_apes = [ temp_unit ] ;
5013: LD_ADDR_VAR 0 7
5017: PUSH
5018: LD_VAR 0 4
5022: PUSH
5023: EMPTY
5024: LIST
5025: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5026: LD_ADDR_OWVAR 27
5030: PUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_INT 2
5036: PPUSH
5037: CALL_OW 12
5041: ST_TO_ADDR
// temp_unit = CreateHuman ;
5042: LD_ADDR_VAR 0 4
5046: PUSH
5047: CALL_OW 44
5051: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_bu2 ) ;
5052: LD_VAR 0 4
5056: PPUSH
5057: LD_INT 78
5059: PPUSH
5060: CALL_OW 52
// human_list = human_list ^ temp_unit ;
5064: LD_ADDR_VAR 0 2
5068: PUSH
5069: LD_VAR 0 2
5073: PUSH
5074: LD_VAR 0 4
5078: ADD
5079: ST_TO_ADDR
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5080: LD_ADDR_VAR 0 7
5084: PUSH
5085: LD_VAR 0 7
5089: PUSH
5090: LD_VAR 0 4
5094: ADD
5095: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5096: LD_ADDR_OWVAR 27
5100: PUSH
5101: LD_INT 1
5103: PPUSH
5104: LD_INT 2
5106: PPUSH
5107: CALL_OW 12
5111: ST_TO_ADDR
// temp_unit = CreateHuman ;
5112: LD_ADDR_VAR 0 4
5116: PUSH
5117: CALL_OW 44
5121: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill1 ) ;
5122: LD_VAR 0 4
5126: PPUSH
5127: LD_INT 298
5129: PPUSH
5130: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5134: LD_ADDR_VAR 0 7
5138: PUSH
5139: LD_VAR 0 7
5143: PUSH
5144: LD_VAR 0 4
5148: ADD
5149: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5150: LD_ADDR_OWVAR 27
5154: PUSH
5155: LD_INT 1
5157: PPUSH
5158: LD_INT 2
5160: PPUSH
5161: CALL_OW 12
5165: ST_TO_ADDR
// temp_unit = CreateHuman ;
5166: LD_ADDR_VAR 0 4
5170: PUSH
5171: CALL_OW 44
5175: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill2 ) ;
5176: LD_VAR 0 4
5180: PPUSH
5181: LD_INT 299
5183: PPUSH
5184: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5188: LD_ADDR_VAR 0 7
5192: PUSH
5193: LD_VAR 0 7
5197: PUSH
5198: LD_VAR 0 4
5202: ADD
5203: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5204: LD_ADDR_OWVAR 27
5208: PUSH
5209: LD_INT 1
5211: PPUSH
5212: LD_INT 2
5214: PPUSH
5215: CALL_OW 12
5219: ST_TO_ADDR
// temp_unit = CreateHuman ;
5220: LD_ADDR_VAR 0 4
5224: PUSH
5225: CALL_OW 44
5229: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill3 ) ;
5230: LD_VAR 0 4
5234: PPUSH
5235: LD_INT 300
5237: PPUSH
5238: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5242: LD_ADDR_VAR 0 7
5246: PUSH
5247: LD_VAR 0 7
5251: PUSH
5252: LD_VAR 0 4
5256: ADD
5257: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5258: LD_ADDR_OWVAR 27
5262: PUSH
5263: LD_INT 1
5265: PPUSH
5266: LD_INT 2
5268: PPUSH
5269: CALL_OW 12
5273: ST_TO_ADDR
// temp_unit = CreateHuman ;
5274: LD_ADDR_VAR 0 4
5278: PUSH
5279: CALL_OW 44
5283: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_hill4 ) ;
5284: LD_VAR 0 4
5288: PPUSH
5289: LD_INT 343
5291: PPUSH
5292: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5296: LD_ADDR_VAR 0 7
5300: PUSH
5301: LD_VAR 0 7
5305: PUSH
5306: LD_VAR 0 4
5310: ADD
5311: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5312: LD_ADDR_OWVAR 27
5316: PUSH
5317: LD_INT 1
5319: PPUSH
5320: LD_INT 2
5322: PPUSH
5323: CALL_OW 12
5327: ST_TO_ADDR
// temp_unit = CreateHuman ;
5328: LD_ADDR_VAR 0 4
5332: PUSH
5333: CALL_OW 44
5337: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu1 ) ;
5338: LD_VAR 0 4
5342: PPUSH
5343: LD_INT 308
5345: PPUSH
5346: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5350: LD_ADDR_VAR 0 7
5354: PUSH
5355: LD_VAR 0 7
5359: PUSH
5360: LD_VAR 0 4
5364: ADD
5365: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5366: LD_ADDR_OWVAR 27
5370: PUSH
5371: LD_INT 1
5373: PPUSH
5374: LD_INT 2
5376: PPUSH
5377: CALL_OW 12
5381: ST_TO_ADDR
// temp_unit = CreateHuman ;
5382: LD_ADDR_VAR 0 4
5386: PUSH
5387: CALL_OW 44
5391: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu2 ) ;
5392: LD_VAR 0 4
5396: PPUSH
5397: LD_INT 347
5399: PPUSH
5400: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5404: LD_ADDR_VAR 0 7
5408: PUSH
5409: LD_VAR 0 7
5413: PUSH
5414: LD_VAR 0 4
5418: ADD
5419: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5420: LD_ADDR_OWVAR 27
5424: PUSH
5425: LD_INT 1
5427: PPUSH
5428: LD_INT 2
5430: PPUSH
5431: CALL_OW 12
5435: ST_TO_ADDR
// temp_unit = CreateHuman ;
5436: LD_ADDR_VAR 0 4
5440: PUSH
5441: CALL_OW 44
5445: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu3 ) ;
5446: LD_VAR 0 4
5450: PPUSH
5451: LD_INT 346
5453: PPUSH
5454: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5458: LD_ADDR_VAR 0 7
5462: PUSH
5463: LD_VAR 0 7
5467: PUSH
5468: LD_VAR 0 4
5472: ADD
5473: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5474: LD_ADDR_OWVAR 27
5478: PUSH
5479: LD_INT 1
5481: PPUSH
5482: LD_INT 2
5484: PPUSH
5485: CALL_OW 12
5489: ST_TO_ADDR
// temp_unit = CreateHuman ;
5490: LD_ADDR_VAR 0 4
5494: PUSH
5495: CALL_OW 44
5499: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_lbu4 ) ;
5500: LD_VAR 0 4
5504: PPUSH
5505: LD_INT 345
5507: PPUSH
5508: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5512: LD_ADDR_VAR 0 7
5516: PUSH
5517: LD_VAR 0 7
5521: PUSH
5522: LD_VAR 0 4
5526: ADD
5527: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5528: LD_ADDR_OWVAR 27
5532: PUSH
5533: LD_INT 1
5535: PPUSH
5536: LD_INT 2
5538: PPUSH
5539: CALL_OW 12
5543: ST_TO_ADDR
// temp_unit = CreateHuman ;
5544: LD_ADDR_VAR 0 4
5548: PUSH
5549: CALL_OW 44
5553: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu1 ) ;
5554: LD_VAR 0 4
5558: PPUSH
5559: LD_INT 305
5561: PPUSH
5562: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5566: LD_ADDR_VAR 0 7
5570: PUSH
5571: LD_VAR 0 7
5575: PUSH
5576: LD_VAR 0 4
5580: ADD
5581: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5582: LD_ADDR_OWVAR 27
5586: PUSH
5587: LD_INT 1
5589: PPUSH
5590: LD_INT 2
5592: PPUSH
5593: CALL_OW 12
5597: ST_TO_ADDR
// temp_unit = CreateHuman ;
5598: LD_ADDR_VAR 0 4
5602: PUSH
5603: CALL_OW 44
5607: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu2 ) ;
5608: LD_VAR 0 4
5612: PPUSH
5613: LD_INT 304
5615: PPUSH
5616: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5620: LD_ADDR_VAR 0 7
5624: PUSH
5625: LD_VAR 0 7
5629: PUSH
5630: LD_VAR 0 4
5634: ADD
5635: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5636: LD_ADDR_OWVAR 27
5640: PUSH
5641: LD_INT 1
5643: PPUSH
5644: LD_INT 2
5646: PPUSH
5647: CALL_OW 12
5651: ST_TO_ADDR
// temp_unit = CreateHuman ;
5652: LD_ADDR_VAR 0 4
5656: PUSH
5657: CALL_OW 44
5661: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu3 ) ;
5662: LD_VAR 0 4
5666: PPUSH
5667: LD_INT 303
5669: PPUSH
5670: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5674: LD_ADDR_VAR 0 7
5678: PUSH
5679: LD_VAR 0 7
5683: PUSH
5684: LD_VAR 0 4
5688: ADD
5689: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5690: LD_ADDR_OWVAR 27
5694: PUSH
5695: LD_INT 1
5697: PPUSH
5698: LD_INT 2
5700: PPUSH
5701: CALL_OW 12
5705: ST_TO_ADDR
// temp_unit = CreateHuman ;
5706: LD_ADDR_VAR 0 4
5710: PUSH
5711: CALL_OW 44
5715: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu4 ) ;
5716: LD_VAR 0 4
5720: PPUSH
5721: LD_INT 302
5723: PPUSH
5724: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5728: LD_ADDR_VAR 0 7
5732: PUSH
5733: LD_VAR 0 7
5737: PUSH
5738: LD_VAR 0 4
5742: ADD
5743: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5744: LD_ADDR_OWVAR 27
5748: PUSH
5749: LD_INT 1
5751: PPUSH
5752: LD_INT 2
5754: PPUSH
5755: CALL_OW 12
5759: ST_TO_ADDR
// temp_unit = CreateHuman ;
5760: LD_ADDR_VAR 0 4
5764: PUSH
5765: CALL_OW 44
5769: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu5 ) ;
5770: LD_VAR 0 4
5774: PPUSH
5775: LD_INT 374
5777: PPUSH
5778: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5782: LD_ADDR_VAR 0 7
5786: PUSH
5787: LD_VAR 0 7
5791: PUSH
5792: LD_VAR 0 4
5796: ADD
5797: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5798: LD_ADDR_OWVAR 27
5802: PUSH
5803: LD_INT 1
5805: PPUSH
5806: LD_INT 2
5808: PPUSH
5809: CALL_OW 12
5813: ST_TO_ADDR
// temp_unit = CreateHuman ;
5814: LD_ADDR_VAR 0 4
5818: PUSH
5819: CALL_OW 44
5823: ST_TO_ADDR
// PlaceHumanInUnit ( temp_unit , ar_rbu6 ) ;
5824: LD_VAR 0 4
5828: PPUSH
5829: LD_INT 397
5831: PPUSH
5832: CALL_OW 52
// gensher_bunker_apes = gensher_bunker_apes ^ temp_unit ;
5836: LD_ADDR_VAR 0 7
5840: PUSH
5841: LD_VAR 0 7
5845: PUSH
5846: LD_VAR 0 4
5850: ADD
5851: ST_TO_ADDR
// gensher_mortars = [ mortar1 ] ;
5852: LD_ADDR_EXP 100
5856: PUSH
5857: LD_INT 336
5859: PUSH
5860: EMPTY
5861: LIST
5862: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar2 ;
5863: LD_ADDR_EXP 100
5867: PUSH
5868: LD_EXP 100
5872: PUSH
5873: LD_INT 493
5875: ADD
5876: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar3 ;
5877: LD_ADDR_EXP 100
5881: PUSH
5882: LD_EXP 100
5886: PUSH
5887: LD_INT 338
5889: ADD
5890: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar4 ;
5891: LD_ADDR_EXP 100
5895: PUSH
5896: LD_EXP 100
5900: PUSH
5901: LD_INT 339
5903: ADD
5904: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar5 ;
5905: LD_ADDR_EXP 100
5909: PUSH
5910: LD_EXP 100
5914: PUSH
5915: LD_INT 340
5917: ADD
5918: ST_TO_ADDR
// gensher_mortars = gensher_mortars ^ mortar6 ;
5919: LD_ADDR_EXP 100
5923: PUSH
5924: LD_EXP 100
5928: PUSH
5929: LD_INT 341
5931: ADD
5932: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , 2 , human_list ^ Gensher ) ;
5933: LD_ADDR_EXP 30
5937: PUSH
5938: LD_EXP 30
5942: PPUSH
5943: LD_INT 2
5945: PPUSH
5946: LD_VAR 0 2
5950: PUSH
5951: LD_EXP 24
5955: ADD
5956: PPUSH
5957: CALL_OW 1
5961: ST_TO_ADDR
// val = GetSkill ( ai_engineers [ 2 ] [ 1 ] , skill_engineering ) ;
5962: LD_ADDR_VAR 0 5
5966: PUSH
5967: LD_EXP 31
5971: PUSH
5972: LD_INT 2
5974: ARRAY
5975: PUSH
5976: LD_INT 1
5978: ARRAY
5979: PPUSH
5980: LD_INT 2
5982: PPUSH
5983: CALL_OW 259
5987: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_building ] ] ) do
5988: LD_ADDR_VAR 0 3
5992: PUSH
5993: LD_INT 22
5995: PUSH
5996: LD_EXP 6
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: LD_INT 21
6007: PUSH
6008: LD_INT 3
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PPUSH
6019: CALL_OW 69
6023: PUSH
6024: FOR_IN
6025: IFFALSE 6043
// SetBLevel ( i , val ) ;
6027: LD_VAR 0 3
6031: PPUSH
6032: LD_VAR 0 5
6036: PPUSH
6037: CALL_OW 241
6041: GO 6024
6043: POP
6044: POP
// for i in ai_engineers [ 2 ] do
6045: LD_ADDR_VAR 0 3
6049: PUSH
6050: LD_EXP 31
6054: PUSH
6055: LD_INT 2
6057: ARRAY
6058: PUSH
6059: FOR_IN
6060: IFFALSE 6101
// if GetSkill ( i , skill_engineering ) > val then
6062: LD_VAR 0 3
6066: PPUSH
6067: LD_INT 2
6069: PPUSH
6070: CALL_OW 259
6074: PUSH
6075: LD_VAR 0 5
6079: GREATER
6080: IFFALSE 6099
// SetSkill ( i , skill_engineering , val ) ;
6082: LD_VAR 0 3
6086: PPUSH
6087: LD_INT 2
6089: PPUSH
6090: LD_VAR 0 5
6094: PPUSH
6095: CALL_OW 237
6099: GO 6059
6101: POP
6102: POP
// end ;
6103: LD_VAR 0 1
6107: RET
// function ScanBuildings ; var side , i , temp_list , base , area , temp_list_2 ; begin
6108: LD_INT 0
6110: PPUSH
6111: PPUSH
6112: PPUSH
6113: PPUSH
6114: PPUSH
6115: PPUSH
6116: PPUSH
// if difficulty <= 2 then
6117: LD_OWVAR 67
6121: PUSH
6122: LD_INT 2
6124: LESSEQUAL
6125: IFFALSE 6266
// begin temp_list = [ GetX ( rub3 ) , GetY ( rub3 ) , GetDir ( rub3 ) , GetBWeapon ( rub3 ) ] ;
6127: LD_ADDR_VAR 0 4
6131: PUSH
6132: LD_INT 269
6134: PPUSH
6135: CALL_OW 250
6139: PUSH
6140: LD_INT 269
6142: PPUSH
6143: CALL_OW 251
6147: PUSH
6148: LD_INT 269
6150: PPUSH
6151: CALL_OW 254
6155: PUSH
6156: LD_INT 269
6158: PPUSH
6159: CALL_OW 269
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: ST_TO_ADDR
// DestroyUnit ( rub3 ) ;
6170: LD_INT 269
6172: PPUSH
6173: CALL_OW 65
// InitUc ;
6177: CALL_OW 18
// InitBc ;
6181: CALL_OW 21
// uc_nation = nation_russian ;
6185: LD_ADDR_OWVAR 21
6189: PUSH
6190: LD_INT 3
6192: ST_TO_ADDR
// uc_side = russians ;
6193: LD_ADDR_OWVAR 20
6197: PUSH
6198: LD_EXP 4
6202: ST_TO_ADDR
// bc_type = b_turret ;
6203: LD_ADDR_OWVAR 42
6207: PUSH
6208: LD_INT 33
6210: ST_TO_ADDR
// i = CreateAndPlaceBuildingXYD ( temp_list [ 1 ] , temp_list [ 2 ] , temp_list [ 3 ] ) ;
6211: LD_ADDR_VAR 0 3
6215: PUSH
6216: LD_VAR 0 4
6220: PUSH
6221: LD_INT 1
6223: ARRAY
6224: PPUSH
6225: LD_VAR 0 4
6229: PUSH
6230: LD_INT 2
6232: ARRAY
6233: PPUSH
6234: LD_VAR 0 4
6238: PUSH
6239: LD_INT 3
6241: ARRAY
6242: PPUSH
6243: CALL_OW 47
6247: ST_TO_ADDR
// PlaceWeaponTurret ( i , temp_list [ 4 ] ) ;
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_VAR 0 4
6257: PUSH
6258: LD_INT 4
6260: ARRAY
6261: PPUSH
6262: CALL_OW 431
// end ; if difficulty = 1 then
6266: LD_OWVAR 67
6270: PUSH
6271: LD_INT 1
6273: EQUAL
6274: IFFALSE 6415
// begin temp_list = [ GetX ( rub1 ) , GetY ( rub1 ) , GetDir ( rub1 ) , GetBWeapon ( rub1 ) ] ;
6276: LD_ADDR_VAR 0 4
6280: PUSH
6281: LD_INT 273
6283: PPUSH
6284: CALL_OW 250
6288: PUSH
6289: LD_INT 273
6291: PPUSH
6292: CALL_OW 251
6296: PUSH
6297: LD_INT 273
6299: PPUSH
6300: CALL_OW 254
6304: PUSH
6305: LD_INT 273
6307: PPUSH
6308: CALL_OW 269
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: ST_TO_ADDR
// DestroyUnit ( rub1 ) ;
6319: LD_INT 273
6321: PPUSH
6322: CALL_OW 65
// InitUc ;
6326: CALL_OW 18
// InitBc ;
6330: CALL_OW 21
// uc_nation = nation_russian ;
6334: LD_ADDR_OWVAR 21
6338: PUSH
6339: LD_INT 3
6341: ST_TO_ADDR
// uc_side = russians ;
6342: LD_ADDR_OWVAR 20
6346: PUSH
6347: LD_EXP 4
6351: ST_TO_ADDR
// bc_type = b_turret ;
6352: LD_ADDR_OWVAR 42
6356: PUSH
6357: LD_INT 33
6359: ST_TO_ADDR
// i = CreateAndPlaceBuildingXYD ( temp_list [ 1 ] , temp_list [ 2 ] , temp_list [ 3 ] ) ;
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_VAR 0 4
6369: PUSH
6370: LD_INT 1
6372: ARRAY
6373: PPUSH
6374: LD_VAR 0 4
6378: PUSH
6379: LD_INT 2
6381: ARRAY
6382: PPUSH
6383: LD_VAR 0 4
6387: PUSH
6388: LD_INT 3
6390: ARRAY
6391: PPUSH
6392: CALL_OW 47
6396: ST_TO_ADDR
// PlaceWeaponTurret ( i , temp_list [ 4 ] ) ;
6397: LD_VAR 0 3
6401: PPUSH
6402: LD_VAR 0 4
6406: PUSH
6407: LD_INT 4
6409: ARRAY
6410: PPUSH
6411: CALL_OW 431
// end ; for base in ai_bases do
6415: LD_ADDR_VAR 0 5
6419: PUSH
6420: LD_EXP 59
6424: PUSH
6425: FOR_IN
6426: IFFALSE 7052
// begin case base of 1 :
6428: LD_VAR 0 5
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6462
6441: POP
// begin area = Am_base ;
6442: LD_ADDR_VAR 0 6
6446: PUSH
6447: LD_INT 4
6449: ST_TO_ADDR
// side = americans ;
6450: LD_ADDR_VAR 0 2
6454: PUSH
6455: LD_EXP 7
6459: ST_TO_ADDR
// end ; 2 :
6460: GO 6521
6462: LD_INT 2
6464: DOUBLE
6465: EQUAL
6466: IFTRUE 6470
6468: GO 6491
6470: POP
// begin area = Gensher_base ;
6471: LD_ADDR_VAR 0 6
6475: PUSH
6476: LD_INT 7
6478: ST_TO_ADDR
// side = you_alt ;
6479: LD_ADDR_VAR 0 2
6483: PUSH
6484: LD_EXP 6
6488: ST_TO_ADDR
// end ; 3 :
6489: GO 6521
6491: LD_INT 3
6493: DOUBLE
6494: EQUAL
6495: IFTRUE 6499
6497: GO 6520
6499: POP
// begin area = Ru_base ;
6500: LD_ADDR_VAR 0 6
6504: PUSH
6505: LD_INT 3
6507: ST_TO_ADDR
// side = russians ;
6508: LD_ADDR_VAR 0 2
6512: PUSH
6513: LD_EXP 4
6517: ST_TO_ADDR
// end ; end ;
6518: GO 6521
6520: POP
// ai_all_buildings = Replace ( ai_all_buildings , base , FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_inarea , area ] ] ) ) ;
6521: LD_ADDR_EXP 45
6525: PUSH
6526: LD_EXP 45
6530: PPUSH
6531: LD_VAR 0 5
6535: PPUSH
6536: LD_INT 22
6538: PUSH
6539: LD_VAR 0 2
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 21
6550: PUSH
6551: LD_INT 3
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 95
6560: PUSH
6561: LD_VAR 0 6
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 69
6579: PPUSH
6580: CALL_OW 1
6584: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
6585: LD_ADDR_VAR 0 3
6589: PUSH
6590: LD_EXP 45
6594: PUSH
6595: LD_VAR 0 5
6599: ARRAY
6600: PUSH
6601: FOR_IN
6602: IFFALSE 6623
// UpdateBuildingBasicVariables ( base , i , true ) ;
6604: LD_VAR 0 5
6608: PPUSH
6609: LD_VAR 0 3
6613: PPUSH
6614: LD_INT 1
6616: PPUSH
6617: CALL 7059 0 3
6621: GO 6601
6623: POP
6624: POP
// if base = 1 then
6625: LD_VAR 0 5
6629: PUSH
6630: LD_INT 1
6632: EQUAL
6633: IFFALSE 6653
// SetBName ( ai_depot [ base ] , epsilon ) ;
6635: LD_EXP 35
6639: PUSH
6640: LD_VAR 0 5
6644: ARRAY
6645: PPUSH
6646: LD_STRING epsilon
6648: PPUSH
6649: CALL_OW 500
// temp_list = [ ] ;
6653: LD_ADDR_VAR 0 4
6657: PUSH
6658: EMPTY
6659: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
6660: LD_ADDR_VAR 0 3
6664: PUSH
6665: LD_EXP 45
6669: PUSH
6670: LD_VAR 0 5
6674: ARRAY
6675: PUSH
6676: FOR_IN
6677: IFFALSE 6950
// begin if base = 3 and i in [ rub1 , rub2 ] then
6679: LD_VAR 0 5
6683: PUSH
6684: LD_INT 3
6686: EQUAL
6687: PUSH
6688: LD_VAR 0 3
6692: PUSH
6693: LD_INT 273
6695: PUSH
6696: LD_INT 271
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: IN
6703: AND
6704: IFFALSE 6755
// begin temp_list_2 = ai_excepted_buildings [ base ] ^ i ;
6706: LD_ADDR_VAR 0 7
6710: PUSH
6711: LD_EXP 69
6715: PUSH
6716: LD_VAR 0 5
6720: ARRAY
6721: PUSH
6722: LD_VAR 0 3
6726: ADD
6727: ST_TO_ADDR
// ai_excepted_buildings = Replace ( ai_excepted_buildings , base , temp_list_2 ) ;
6728: LD_ADDR_EXP 69
6732: PUSH
6733: LD_EXP 69
6737: PPUSH
6738: LD_VAR 0 5
6742: PPUSH
6743: LD_VAR 0 7
6747: PPUSH
6748: CALL_OW 1
6752: ST_TO_ADDR
// continue ;
6753: GO 6676
// end ; temp_list = temp_list ^ [ [ GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBType ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: LD_VAR 0 4
6764: PUSH
6765: LD_VAR 0 3
6769: PPUSH
6770: CALL_OW 250
6774: PUSH
6775: LD_VAR 0 3
6779: PPUSH
6780: CALL_OW 251
6784: PUSH
6785: LD_VAR 0 3
6789: PPUSH
6790: CALL_OW 254
6794: PUSH
6795: LD_VAR 0 3
6799: PPUSH
6800: CALL_OW 266
6804: PUSH
6805: LD_VAR 0 3
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: CALL_OW 268
6817: PUSH
6818: LD_VAR 0 3
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 268
6830: PUSH
6831: LD_VAR 0 3
6835: PPUSH
6836: CALL_OW 269
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: ADD
6853: ST_TO_ADDR
// if base = 2 and temp_list [ temp_list + 0 ] [ 4 ] = b_bunker then
6854: LD_VAR 0 5
6858: PUSH
6859: LD_INT 2
6861: EQUAL
6862: PUSH
6863: LD_VAR 0 4
6867: PUSH
6868: LD_VAR 0 4
6872: PUSH
6873: LD_INT 0
6875: PLUS
6876: ARRAY
6877: PUSH
6878: LD_INT 4
6880: ARRAY
6881: PUSH
6882: LD_INT 32
6884: EQUAL
6885: AND
6886: IFFALSE 6948
// begin temp_list_2 = Replace ( temp_list [ temp_list + 0 ] , 4 , b_breastwork ) ;
6888: LD_ADDR_VAR 0 7
6892: PUSH
6893: LD_VAR 0 4
6897: PUSH
6898: LD_VAR 0 4
6902: PUSH
6903: LD_INT 0
6905: PLUS
6906: ARRAY
6907: PPUSH
6908: LD_INT 4
6910: PPUSH
6911: LD_INT 31
6913: PPUSH
6914: CALL_OW 1
6918: ST_TO_ADDR
// temp_list = Replace ( temp_list , temp_list + 0 , temp_list_2 ) ;
6919: LD_ADDR_VAR 0 4
6923: PUSH
6924: LD_VAR 0 4
6928: PPUSH
6929: LD_VAR 0 4
6933: PUSH
6934: LD_INT 0
6936: PLUS
6937: PPUSH
6938: LD_VAR 0 7
6942: PPUSH
6943: CALL_OW 1
6947: ST_TO_ADDR
// end ; end ;
6948: GO 6676
6950: POP
6951: POP
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list ) ;
6952: LD_ADDR_EXP 39
6956: PUSH
6957: LD_EXP 39
6961: PPUSH
6962: LD_VAR 0 5
6966: PPUSH
6967: LD_VAR 0 4
6971: PPUSH
6972: CALL_OW 1
6976: ST_TO_ADDR
// SortBuildingLocationsListInCorrectOrder ( base ) ;
6977: LD_VAR 0 5
6981: PPUSH
6982: CALL 8134 0 1
// for i in ai_siberite_mines [ base ] ^ ai_oil_mine [ base ] do
6986: LD_ADDR_VAR 0 3
6990: PUSH
6991: LD_EXP 37
6995: PUSH
6996: LD_VAR 0 5
7000: ARRAY
7001: PUSH
7002: LD_EXP 51
7006: PUSH
7007: LD_VAR 0 5
7011: ARRAY
7012: ADD
7013: PUSH
7014: FOR_IN
7015: IFFALSE 7048
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
7017: LD_VAR 0 3
7021: PPUSH
7022: CALL_OW 250
7026: PPUSH
7027: LD_VAR 0 3
7031: PPUSH
7032: CALL_OW 251
7036: PPUSH
7037: LD_VAR 0 2
7041: PPUSH
7042: CALL_OW 441
7046: GO 7014
7048: POP
7049: POP
// end ;
7050: GO 6425
7052: POP
7053: POP
// end ;
7054: LD_VAR 0 1
7058: RET
// export function UpdateBuildingBasicVariables ( base , un , add ) ; var temp_list ; begin
7059: LD_INT 0
7061: PPUSH
7062: PPUSH
// case GetBType ( un ) of b_depot , b_warehouse :
7063: LD_VAR 0 2
7067: PPUSH
7068: CALL_OW 266
7072: PUSH
7073: LD_INT 0
7075: DOUBLE
7076: EQUAL
7077: IFTRUE 7087
7079: LD_INT 1
7081: DOUBLE
7082: EQUAL
7083: IFTRUE 7087
7085: GO 7164
7087: POP
// if add then
7088: LD_VAR 0 3
7092: IFFALSE 7121
// ai_depot = Replace ( ai_depot , base , un ) else
7094: LD_ADDR_EXP 35
7098: PUSH
7099: LD_EXP 35
7103: PPUSH
7104: LD_VAR 0 1
7108: PPUSH
7109: LD_VAR 0 2
7113: PPUSH
7114: CALL_OW 1
7118: ST_TO_ADDR
7119: GO 7162
// if un = ai_depot [ base ] then
7121: LD_VAR 0 2
7125: PUSH
7126: LD_EXP 35
7130: PUSH
7131: LD_VAR 0 1
7135: ARRAY
7136: EQUAL
7137: IFFALSE 7162
// ai_depot = Replace ( ai_depot , base , 0 ) ; b_lab , b_lab_half , b_lab_full :
7139: LD_ADDR_EXP 35
7143: PUSH
7144: LD_EXP 35
7148: PPUSH
7149: LD_VAR 0 1
7153: PPUSH
7154: LD_INT 0
7156: PPUSH
7157: CALL_OW 1
7161: ST_TO_ADDR
7162: GO 8129
7164: LD_INT 6
7166: DOUBLE
7167: EQUAL
7168: IFTRUE 7184
7170: LD_INT 7
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7184
7176: LD_INT 8
7178: DOUBLE
7179: EQUAL
7180: IFTRUE 7184
7182: GO 7264
7184: POP
// begin if add then
7185: LD_VAR 0 3
7189: IFFALSE 7215
// temp_list = ai_labs [ base ] ^ un else
7191: LD_ADDR_VAR 0 5
7195: PUSH
7196: LD_EXP 36
7200: PUSH
7201: LD_VAR 0 1
7205: ARRAY
7206: PUSH
7207: LD_VAR 0 2
7211: ADD
7212: ST_TO_ADDR
7213: GO 7237
// temp_list = ai_labs [ base ] diff un ;
7215: LD_ADDR_VAR 0 5
7219: PUSH
7220: LD_EXP 36
7224: PUSH
7225: LD_VAR 0 1
7229: ARRAY
7230: PUSH
7231: LD_VAR 0 2
7235: DIFF
7236: ST_TO_ADDR
// ai_labs = Replace ( ai_labs , base , temp_list ) ;
7237: LD_ADDR_EXP 36
7241: PUSH
7242: LD_EXP 36
7246: PPUSH
7247: LD_VAR 0 1
7251: PPUSH
7252: LD_VAR 0 5
7256: PPUSH
7257: CALL_OW 1
7261: ST_TO_ADDR
// end ; b_factory , b_workshop :
7262: GO 8129
7264: LD_INT 3
7266: DOUBLE
7267: EQUAL
7268: IFTRUE 7278
7270: LD_INT 2
7272: DOUBLE
7273: EQUAL
7274: IFTRUE 7278
7276: GO 7358
7278: POP
// begin if add then
7279: LD_VAR 0 3
7283: IFFALSE 7309
// temp_list = ai_facts [ base ] ^ un else
7285: LD_ADDR_VAR 0 5
7289: PUSH
7290: LD_EXP 48
7294: PUSH
7295: LD_VAR 0 1
7299: ARRAY
7300: PUSH
7301: LD_VAR 0 2
7305: ADD
7306: ST_TO_ADDR
7307: GO 7331
// temp_list = ai_facts [ base ] diff un ;
7309: LD_ADDR_VAR 0 5
7313: PUSH
7314: LD_EXP 48
7318: PUSH
7319: LD_VAR 0 1
7323: ARRAY
7324: PUSH
7325: LD_VAR 0 2
7329: DIFF
7330: ST_TO_ADDR
// ai_facts = Replace ( ai_facts , base , temp_list ) ;
7331: LD_ADDR_EXP 48
7335: PUSH
7336: LD_EXP 48
7340: PPUSH
7341: LD_VAR 0 1
7345: PPUSH
7346: LD_VAR 0 5
7350: PPUSH
7351: CALL_OW 1
7355: ST_TO_ADDR
// end ; b_armoury , b_barracks :
7356: GO 8129
7358: LD_INT 4
7360: DOUBLE
7361: EQUAL
7362: IFTRUE 7372
7364: LD_INT 5
7366: DOUBLE
7367: EQUAL
7368: IFTRUE 7372
7370: GO 7452
7372: POP
// begin if add then
7373: LD_VAR 0 3
7377: IFFALSE 7403
// temp_list = ai_armouries [ base ] ^ un else
7379: LD_ADDR_VAR 0 5
7383: PUSH
7384: LD_EXP 49
7388: PUSH
7389: LD_VAR 0 1
7393: ARRAY
7394: PUSH
7395: LD_VAR 0 2
7399: ADD
7400: ST_TO_ADDR
7401: GO 7425
// temp_list = ai_armouries [ base ] diff un ;
7403: LD_ADDR_VAR 0 5
7407: PUSH
7408: LD_EXP 49
7412: PUSH
7413: LD_VAR 0 1
7417: ARRAY
7418: PUSH
7419: LD_VAR 0 2
7423: DIFF
7424: ST_TO_ADDR
// ai_armouries = Replace ( ai_armouries , base , temp_list ) ;
7425: LD_ADDR_EXP 49
7429: PUSH
7430: LD_EXP 49
7434: PPUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: LD_VAR 0 5
7444: PPUSH
7445: CALL_OW 1
7449: ST_TO_ADDR
// end ; b_breastwork , b_bunker :
7450: GO 8129
7452: LD_INT 31
7454: DOUBLE
7455: EQUAL
7456: IFTRUE 7466
7458: LD_INT 32
7460: DOUBLE
7461: EQUAL
7462: IFTRUE 7466
7464: GO 7546
7466: POP
// begin if add then
7467: LD_VAR 0 3
7471: IFFALSE 7497
// temp_list = ai_bunkers [ base ] ^ un else
7473: LD_ADDR_VAR 0 5
7477: PUSH
7478: LD_EXP 50
7482: PUSH
7483: LD_VAR 0 1
7487: ARRAY
7488: PUSH
7489: LD_VAR 0 2
7493: ADD
7494: ST_TO_ADDR
7495: GO 7519
// temp_list = ai_bunkers [ base ] diff un ;
7497: LD_ADDR_VAR 0 5
7501: PUSH
7502: LD_EXP 50
7506: PUSH
7507: LD_VAR 0 1
7511: ARRAY
7512: PUSH
7513: LD_VAR 0 2
7517: DIFF
7518: ST_TO_ADDR
// ai_bunkers = Replace ( ai_bunkers , base , temp_list ) ;
7519: LD_ADDR_EXP 50
7523: PUSH
7524: LD_EXP 50
7528: PPUSH
7529: LD_VAR 0 1
7533: PPUSH
7534: LD_VAR 0 5
7538: PPUSH
7539: CALL_OW 1
7543: ST_TO_ADDR
// end ; b_turret :
7544: GO 8129
7546: LD_INT 33
7548: DOUBLE
7549: EQUAL
7550: IFTRUE 7554
7552: GO 7634
7554: POP
// begin if add then
7555: LD_VAR 0 3
7559: IFFALSE 7585
// temp_list = ai_turrets [ base ] ^ un else
7561: LD_ADDR_VAR 0 5
7565: PUSH
7566: LD_EXP 56
7570: PUSH
7571: LD_VAR 0 1
7575: ARRAY
7576: PUSH
7577: LD_VAR 0 2
7581: ADD
7582: ST_TO_ADDR
7583: GO 7607
// temp_list = ai_turrets [ base ] diff un ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_EXP 56
7594: PUSH
7595: LD_VAR 0 1
7599: ARRAY
7600: PUSH
7601: LD_VAR 0 2
7605: DIFF
7606: ST_TO_ADDR
// ai_turrets = Replace ( ai_turrets , base , temp_list ) ;
7607: LD_ADDR_EXP 56
7611: PUSH
7612: LD_EXP 56
7616: PPUSH
7617: LD_VAR 0 1
7621: PPUSH
7622: LD_VAR 0 5
7626: PPUSH
7627: CALL_OW 1
7631: ST_TO_ADDR
// end ; b_oil_mine :
7632: GO 8129
7634: LD_INT 29
7636: DOUBLE
7637: EQUAL
7638: IFTRUE 7642
7640: GO 7719
7642: POP
// if add then
7643: LD_VAR 0 3
7647: IFFALSE 7676
// ai_oil_mine = Replace ( ai_oil_mine , base , un ) else
7649: LD_ADDR_EXP 51
7653: PUSH
7654: LD_EXP 51
7658: PPUSH
7659: LD_VAR 0 1
7663: PPUSH
7664: LD_VAR 0 2
7668: PPUSH
7669: CALL_OW 1
7673: ST_TO_ADDR
7674: GO 7717
// if un = ai_oil_mine [ base ] then
7676: LD_VAR 0 2
7680: PUSH
7681: LD_EXP 51
7685: PUSH
7686: LD_VAR 0 1
7690: ARRAY
7691: EQUAL
7692: IFFALSE 7717
// ai_oil_mine = Replace ( ai_oil_mine , base , 0 ) ; b_siberite_mine :
7694: LD_ADDR_EXP 51
7698: PUSH
7699: LD_EXP 51
7703: PPUSH
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_INT 0
7711: PPUSH
7712: CALL_OW 1
7716: ST_TO_ADDR
7717: GO 8129
7719: LD_INT 30
7721: DOUBLE
7722: EQUAL
7723: IFTRUE 7727
7725: GO 7807
7727: POP
// begin if add then
7728: LD_VAR 0 3
7732: IFFALSE 7758
// temp_list = ai_siberite_mines [ base ] ^ un else
7734: LD_ADDR_VAR 0 5
7738: PUSH
7739: LD_EXP 37
7743: PUSH
7744: LD_VAR 0 1
7748: ARRAY
7749: PUSH
7750: LD_VAR 0 2
7754: ADD
7755: ST_TO_ADDR
7756: GO 7780
// temp_list = ai_siberite_mines [ base ] diff un ;
7758: LD_ADDR_VAR 0 5
7762: PUSH
7763: LD_EXP 37
7767: PUSH
7768: LD_VAR 0 1
7772: ARRAY
7773: PUSH
7774: LD_VAR 0 2
7778: DIFF
7779: ST_TO_ADDR
// ai_siberite_mines = Replace ( ai_siberite_mines , base , temp_list ) ;
7780: LD_ADDR_EXP 37
7784: PUSH
7785: LD_EXP 37
7789: PPUSH
7790: LD_VAR 0 1
7794: PPUSH
7795: LD_VAR 0 5
7799: PPUSH
7800: CALL_OW 1
7804: ST_TO_ADDR
// end ; b_ext_gun , b_ext_noncombat , b_ext_laser , b_ext_computer , b_ext_radar , b_ext_rocket , b_ext_siberium , b_ext_track , b_ext_stitch :
7805: GO 8129
7807: LD_INT 17
7809: DOUBLE
7810: EQUAL
7811: IFTRUE 7863
7813: LD_INT 19
7815: DOUBLE
7816: EQUAL
7817: IFTRUE 7863
7819: LD_INT 25
7821: DOUBLE
7822: EQUAL
7823: IFTRUE 7863
7825: LD_INT 24
7827: DOUBLE
7828: EQUAL
7829: IFTRUE 7863
7831: LD_INT 20
7833: DOUBLE
7834: EQUAL
7835: IFTRUE 7863
7837: LD_INT 18
7839: DOUBLE
7840: EQUAL
7841: IFTRUE 7863
7843: LD_INT 21
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7863
7849: LD_INT 16
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7863
7855: LD_INT 23
7857: DOUBLE
7858: EQUAL
7859: IFTRUE 7863
7861: GO 7943
7863: POP
// begin if add then
7864: LD_VAR 0 3
7868: IFFALSE 7894
// temp_list = ai_fact_extensions [ base ] ^ un else
7870: LD_ADDR_VAR 0 5
7874: PUSH
7875: LD_EXP 52
7879: PUSH
7880: LD_VAR 0 1
7884: ARRAY
7885: PUSH
7886: LD_VAR 0 2
7890: ADD
7891: ST_TO_ADDR
7892: GO 7916
// temp_list = ai_fact_extensions [ base ] diff un ;
7894: LD_ADDR_VAR 0 5
7898: PUSH
7899: LD_EXP 52
7903: PUSH
7904: LD_VAR 0 1
7908: ARRAY
7909: PUSH
7910: LD_VAR 0 2
7914: DIFF
7915: ST_TO_ADDR
// ai_fact_extensions = Replace ( ai_fact_extensions , base , temp_list ) ;
7916: LD_ADDR_EXP 52
7920: PUSH
7921: LD_EXP 52
7925: PPUSH
7926: LD_VAR 0 1
7930: PPUSH
7931: LD_VAR 0 5
7935: PPUSH
7936: CALL_OW 1
7940: ST_TO_ADDR
// end ; b_solar_power , b_oil_power , b_siberite_power :
7941: GO 8129
7943: LD_INT 27
7945: DOUBLE
7946: EQUAL
7947: IFTRUE 7963
7949: LD_INT 26
7951: DOUBLE
7952: EQUAL
7953: IFTRUE 7963
7955: LD_INT 28
7957: DOUBLE
7958: EQUAL
7959: IFTRUE 7963
7961: GO 8043
7963: POP
// begin if add then
7964: LD_VAR 0 3
7968: IFFALSE 7994
// temp_list = ai_power_plants [ base ] ^ un else
7970: LD_ADDR_VAR 0 5
7974: PUSH
7975: LD_EXP 38
7979: PUSH
7980: LD_VAR 0 1
7984: ARRAY
7985: PUSH
7986: LD_VAR 0 2
7990: ADD
7991: ST_TO_ADDR
7992: GO 8016
// temp_list = ai_power_plants [ base ] diff un ;
7994: LD_ADDR_VAR 0 5
7998: PUSH
7999: LD_EXP 38
8003: PUSH
8004: LD_VAR 0 1
8008: ARRAY
8009: PUSH
8010: LD_VAR 0 2
8014: DIFF
8015: ST_TO_ADDR
// ai_power_plants = Replace ( ai_power_plants , base , temp_list ) ;
8016: LD_ADDR_EXP 38
8020: PUSH
8021: LD_EXP 38
8025: PPUSH
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_VAR 0 5
8035: PPUSH
8036: CALL_OW 1
8040: ST_TO_ADDR
// end ; b_control_tower :
8041: GO 8129
8043: LD_INT 36
8045: DOUBLE
8046: EQUAL
8047: IFTRUE 8051
8049: GO 8128
8051: POP
// begin if add then
8052: LD_VAR 0 3
8056: IFFALSE 8085
// ai_control_tower = Replace ( ai_control_tower , base , un ) else
8058: LD_ADDR_EXP 57
8062: PUSH
8063: LD_EXP 57
8067: PPUSH
8068: LD_VAR 0 1
8072: PPUSH
8073: LD_VAR 0 2
8077: PPUSH
8078: CALL_OW 1
8082: ST_TO_ADDR
8083: GO 8126
// if un = ai_control_tower [ base ] then
8085: LD_VAR 0 2
8089: PUSH
8090: LD_EXP 57
8094: PUSH
8095: LD_VAR 0 1
8099: ARRAY
8100: EQUAL
8101: IFFALSE 8126
// ai_control_tower = Replace ( ai_control_tower , base , 0 ) ;
8103: LD_ADDR_EXP 57
8107: PUSH
8108: LD_EXP 57
8112: PPUSH
8113: LD_VAR 0 1
8117: PPUSH
8118: LD_INT 0
8120: PPUSH
8121: CALL_OW 1
8125: ST_TO_ADDR
// end ; end ;
8126: GO 8129
8128: POP
// end ;
8129: LD_VAR 0 4
8133: RET
// function SortBuildingLocationsListInCorrectOrder ( base ) ; var i , temp_list , p ; begin
8134: LD_INT 0
8136: PPUSH
8137: PPUSH
8138: PPUSH
8139: PPUSH
// temp_list = [ ] ;
8140: LD_ADDR_VAR 0 4
8144: PUSH
8145: EMPTY
8146: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
8147: LD_ADDR_VAR 0 3
8151: PUSH
8152: LD_EXP 39
8156: PUSH
8157: LD_VAR 0 1
8161: ARRAY
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8537
// begin case i [ 4 ] of b_depot , b_warehouse :
8166: LD_VAR 0 3
8170: PUSH
8171: LD_INT 4
8173: ARRAY
8174: PUSH
8175: LD_INT 0
8177: DOUBLE
8178: EQUAL
8179: IFTRUE 8189
8181: LD_INT 1
8183: DOUBLE
8184: EQUAL
8185: IFTRUE 8189
8187: GO 8200
8189: POP
// p = 100 ; b_armoury , b_barracks , b_fort :
8190: LD_ADDR_VAR 0 5
8194: PUSH
8195: LD_INT 100
8197: ST_TO_ADDR
8198: GO 8519
8200: LD_INT 4
8202: DOUBLE
8203: EQUAL
8204: IFTRUE 8220
8206: LD_INT 5
8208: DOUBLE
8209: EQUAL
8210: IFTRUE 8220
8212: LD_INT 35
8214: DOUBLE
8215: EQUAL
8216: IFTRUE 8220
8218: GO 8231
8220: POP
// p = 99 ; b_solar_power , b_oil_power , b_siberite_power :
8221: LD_ADDR_VAR 0 5
8225: PUSH
8226: LD_INT 99
8228: ST_TO_ADDR
8229: GO 8519
8231: LD_INT 27
8233: DOUBLE
8234: EQUAL
8235: IFTRUE 8251
8237: LD_INT 26
8239: DOUBLE
8240: EQUAL
8241: IFTRUE 8251
8243: LD_INT 28
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8262
8251: POP
// p = 98 ; b_breastwork :
8252: LD_ADDR_VAR 0 5
8256: PUSH
8257: LD_INT 98
8259: ST_TO_ADDR
8260: GO 8519
8262: LD_INT 31
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8270
8268: GO 8281
8270: POP
// p = 97 ; b_factory , b_workshop :
8271: LD_ADDR_VAR 0 5
8275: PUSH
8276: LD_INT 97
8278: ST_TO_ADDR
8279: GO 8519
8281: LD_INT 3
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8295
8287: LD_INT 2
8289: DOUBLE
8290: EQUAL
8291: IFTRUE 8295
8293: GO 8306
8295: POP
// p = 96 ; b_ext_gun , b_ext_noncombat , b_ext_laser , b_ext_computer , b_ext_radar , b_ext_rocket , b_ext_siberium , b_ext_track , b_ext_stitch :
8296: LD_ADDR_VAR 0 5
8300: PUSH
8301: LD_INT 96
8303: ST_TO_ADDR
8304: GO 8519
8306: LD_INT 17
8308: DOUBLE
8309: EQUAL
8310: IFTRUE 8362
8312: LD_INT 19
8314: DOUBLE
8315: EQUAL
8316: IFTRUE 8362
8318: LD_INT 25
8320: DOUBLE
8321: EQUAL
8322: IFTRUE 8362
8324: LD_INT 24
8326: DOUBLE
8327: EQUAL
8328: IFTRUE 8362
8330: LD_INT 20
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8362
8336: LD_INT 18
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8362
8342: LD_INT 21
8344: DOUBLE
8345: EQUAL
8346: IFTRUE 8362
8348: LD_INT 16
8350: DOUBLE
8351: EQUAL
8352: IFTRUE 8362
8354: LD_INT 23
8356: DOUBLE
8357: EQUAL
8358: IFTRUE 8362
8360: GO 8373
8362: POP
// p = 95 ; b_bunker :
8363: LD_ADDR_VAR 0 5
8367: PUSH
8368: LD_INT 95
8370: ST_TO_ADDR
8371: GO 8519
8373: LD_INT 32
8375: DOUBLE
8376: EQUAL
8377: IFTRUE 8381
8379: GO 8392
8381: POP
// p = 94 ; b_control_tower :
8382: LD_ADDR_VAR 0 5
8386: PUSH
8387: LD_INT 94
8389: ST_TO_ADDR
8390: GO 8519
8392: LD_INT 36
8394: DOUBLE
8395: EQUAL
8396: IFTRUE 8400
8398: GO 8411
8400: POP
// p = 93 ; b_turret :
8401: LD_ADDR_VAR 0 5
8405: PUSH
8406: LD_INT 93
8408: ST_TO_ADDR
8409: GO 8519
8411: LD_INT 33
8413: DOUBLE
8414: EQUAL
8415: IFTRUE 8419
8417: GO 8430
8419: POP
// p = 92 ; b_lab , b_lab_half , b_lab_full :
8420: LD_ADDR_VAR 0 5
8424: PUSH
8425: LD_INT 92
8427: ST_TO_ADDR
8428: GO 8519
8430: LD_INT 6
8432: DOUBLE
8433: EQUAL
8434: IFTRUE 8450
8436: LD_INT 7
8438: DOUBLE
8439: EQUAL
8440: IFTRUE 8450
8442: LD_INT 8
8444: DOUBLE
8445: EQUAL
8446: IFTRUE 8450
8448: GO 8461
8450: POP
// p = 91 ; b_teleport :
8451: LD_ADDR_VAR 0 5
8455: PUSH
8456: LD_INT 91
8458: ST_TO_ADDR
8459: GO 8519
8461: LD_INT 34
8463: DOUBLE
8464: EQUAL
8465: IFTRUE 8469
8467: GO 8480
8469: POP
// p = 90 ; b_siberite_mine :
8470: LD_ADDR_VAR 0 5
8474: PUSH
8475: LD_INT 90
8477: ST_TO_ADDR
8478: GO 8519
8480: LD_INT 30
8482: DOUBLE
8483: EQUAL
8484: IFTRUE 8488
8486: GO 8499
8488: POP
// p = 89 ; b_oil_mine :
8489: LD_ADDR_VAR 0 5
8493: PUSH
8494: LD_INT 89
8496: ST_TO_ADDR
8497: GO 8519
8499: LD_INT 29
8501: DOUBLE
8502: EQUAL
8503: IFTRUE 8507
8505: GO 8518
8507: POP
// p = 88 ; end ;
8508: LD_ADDR_VAR 0 5
8512: PUSH
8513: LD_INT 88
8515: ST_TO_ADDR
8516: GO 8519
8518: POP
// temp_list = temp_list ^ p ;
8519: LD_ADDR_VAR 0 4
8523: PUSH
8524: LD_VAR 0 4
8528: PUSH
8529: LD_VAR 0 5
8533: ADD
8534: ST_TO_ADDR
// end ;
8535: GO 8163
8537: POP
8538: POP
// temp_list = SortListByListDesc ( ai_buildings_locations [ base ] , temp_list ) ;
8539: LD_ADDR_VAR 0 4
8543: PUSH
8544: LD_EXP 39
8548: PUSH
8549: LD_VAR 0 1
8553: ARRAY
8554: PPUSH
8555: LD_VAR 0 4
8559: PPUSH
8560: CALL_OW 77
8564: ST_TO_ADDR
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list ) ;
8565: LD_ADDR_EXP 39
8569: PUSH
8570: LD_EXP 39
8574: PPUSH
8575: LD_VAR 0 1
8579: PPUSH
8580: LD_VAR 0 4
8584: PPUSH
8585: CALL_OW 1
8589: ST_TO_ADDR
// end ;
8590: LD_VAR 0 2
8594: RET
// function PrepareComputerSides ; var i , temp_list , side , base , num ; begin
8595: LD_INT 0
8597: PPUSH
8598: PPUSH
8599: PPUSH
8600: PPUSH
8601: PPUSH
8602: PPUSH
// for base in ai_bases do
8603: LD_ADDR_VAR 0 5
8607: PUSH
8608: LD_EXP 59
8612: PUSH
8613: FOR_IN
8614: IFFALSE 9527
// begin case base of 1 :
8616: LD_VAR 0 5
8620: PUSH
8621: LD_INT 1
8623: DOUBLE
8624: EQUAL
8625: IFTRUE 8629
8627: GO 8642
8629: POP
// begin side = americans ;
8630: LD_ADDR_VAR 0 4
8634: PUSH
8635: LD_EXP 7
8639: ST_TO_ADDR
// end ; 2 :
8640: GO 8677
8642: LD_INT 2
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 8655
8650: POP
// begin continue ;
8651: GO 8613
// end ; 3 :
8653: GO 8677
8655: LD_INT 3
8657: DOUBLE
8658: EQUAL
8659: IFTRUE 8663
8661: GO 8676
8663: POP
// begin side = russians ;
8664: LD_ADDR_VAR 0 4
8668: PUSH
8669: LD_EXP 4
8673: ST_TO_ADDR
// end ; end ;
8674: GO 8677
8676: POP
// InitUc ;
8677: CALL_OW 18
// InitHc ;
8681: CALL_OW 19
// uc_side = side ;
8685: LD_ADDR_OWVAR 20
8689: PUSH
8690: LD_VAR 0 4
8694: ST_TO_ADDR
// case side of americans :
8695: LD_VAR 0 4
8699: PUSH
8700: LD_EXP 7
8704: DOUBLE
8705: EQUAL
8706: IFTRUE 8710
8708: GO 8721
8710: POP
// uc_nation = nation_american ; russians :
8711: LD_ADDR_OWVAR 21
8715: PUSH
8716: LD_INT 1
8718: ST_TO_ADDR
8719: GO 8743
8721: LD_EXP 4
8725: DOUBLE
8726: EQUAL
8727: IFTRUE 8731
8729: GO 8742
8731: POP
// uc_nation = nation_russian ; end ;
8732: LD_ADDR_OWVAR 21
8736: PUSH
8737: LD_INT 3
8739: ST_TO_ADDR
8740: GO 8743
8742: POP
// temp_list = CreateUnitsWithClass ( ai_bunkers [ base ] + ai_armouries [ base ] , class_soldier , side ) ;
8743: LD_ADDR_VAR 0 3
8747: PUSH
8748: LD_EXP 50
8752: PUSH
8753: LD_VAR 0 5
8757: ARRAY
8758: PUSH
8759: LD_EXP 49
8763: PUSH
8764: LD_VAR 0 5
8768: ARRAY
8769: PLUS
8770: PPUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 4
8778: PPUSH
8779: CALL 9662 0 3
8783: ST_TO_ADDR
// temp_list = temp_list ^ CreateUnitsWithClass ( [ 3 , 4 , 5 ] [ difficulty ] * ai_armouries [ base ] , [ class_sniper , 0 , class_bazooker ] [ base ] , side ) ;
8784: LD_ADDR_VAR 0 3
8788: PUSH
8789: LD_VAR 0 3
8793: PUSH
8794: LD_INT 3
8796: PUSH
8797: LD_INT 4
8799: PUSH
8800: LD_INT 5
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: PUSH
8808: LD_OWVAR 67
8812: ARRAY
8813: PUSH
8814: LD_EXP 49
8818: PUSH
8819: LD_VAR 0 5
8823: ARRAY
8824: MUL
8825: PPUSH
8826: LD_INT 5
8828: PUSH
8829: LD_INT 0
8831: PUSH
8832: LD_INT 9
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: PUSH
8840: LD_VAR 0 5
8844: ARRAY
8845: PPUSH
8846: LD_VAR 0 4
8850: PPUSH
8851: CALL 9662 0 3
8855: ADD
8856: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , base , temp_list ) ;
8857: LD_ADDR_EXP 30
8861: PUSH
8862: LD_EXP 30
8866: PPUSH
8867: LD_VAR 0 5
8871: PPUSH
8872: LD_VAR 0 3
8876: PPUSH
8877: CALL_OW 1
8881: ST_TO_ADDR
// ai_engineers = Replace ( ai_engineers , base , CreateUnitsWithClass ( [ 2 , 3 , 4 ] [ difficulty ] , class_engineer , side ) ) ;
8882: LD_ADDR_EXP 31
8886: PUSH
8887: LD_EXP 31
8891: PPUSH
8892: LD_VAR 0 5
8896: PPUSH
8897: LD_INT 2
8899: PUSH
8900: LD_INT 3
8902: PUSH
8903: LD_INT 4
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: LIST
8910: PUSH
8911: LD_OWVAR 67
8915: ARRAY
8916: PPUSH
8917: LD_INT 2
8919: PPUSH
8920: LD_VAR 0 4
8924: PPUSH
8925: CALL 9662 0 3
8929: PPUSH
8930: CALL_OW 1
8934: ST_TO_ADDR
// temp_list = [ ] ;
8935: LD_ADDR_VAR 0 3
8939: PUSH
8940: EMPTY
8941: ST_TO_ADDR
// for i in ai_engineers [ base ] do
8942: LD_ADDR_VAR 0 2
8946: PUSH
8947: LD_EXP 31
8951: PUSH
8952: LD_VAR 0 5
8956: ARRAY
8957: PUSH
8958: FOR_IN
8959: IFFALSE 8987
// temp_list = temp_list ^ GetSkill ( i , skill_engineering ) ;
8961: LD_ADDR_VAR 0 3
8965: PUSH
8966: LD_VAR 0 3
8970: PUSH
8971: LD_VAR 0 2
8975: PPUSH
8976: LD_INT 2
8978: PPUSH
8979: CALL_OW 259
8983: ADD
8984: ST_TO_ADDR
8985: GO 8958
8987: POP
8988: POP
// num = BestFromListByList ( temp_list , temp_list ) ;
8989: LD_ADDR_VAR 0 6
8993: PUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: LD_VAR 0 3
9003: PPUSH
9004: CALL_OW 79
9008: ST_TO_ADDR
// for i in ai_all_buildings [ base ] do
9009: LD_ADDR_VAR 0 2
9013: PUSH
9014: LD_EXP 45
9018: PUSH
9019: LD_VAR 0 5
9023: ARRAY
9024: PUSH
9025: FOR_IN
9026: IFFALSE 9044
// SetBLevel ( i , num ) ;
9028: LD_VAR 0 2
9032: PPUSH
9033: LD_VAR 0 6
9037: PPUSH
9038: CALL_OW 241
9042: GO 9025
9044: POP
9045: POP
// ai_apemen_engineers = Replace ( ai_apemen_engineers , base , CreateApemenWithClass ( 2 , class_apeman_engineer , side ) ) ;
9046: LD_ADDR_EXP 63
9050: PUSH
9051: LD_EXP 63
9055: PPUSH
9056: LD_VAR 0 5
9060: PPUSH
9061: LD_INT 2
9063: PPUSH
9064: LD_INT 16
9066: PPUSH
9067: LD_VAR 0 4
9071: PPUSH
9072: CALL 9850 0 3
9076: PPUSH
9077: CALL_OW 1
9081: ST_TO_ADDR
// ai_mechanics_defend = Replace ( ai_mechanics_defend , base , CreateUnitsWithClass ( [ 4 + Rand ( 0 , 1 ) , 5 + Rand ( 0 , 1 ) , 6 ] [ difficulty ] , class_mechanic , side ) ) ;
9082: LD_ADDR_EXP 32
9086: PUSH
9087: LD_EXP 32
9091: PPUSH
9092: LD_VAR 0 5
9096: PPUSH
9097: LD_INT 4
9099: PUSH
9100: LD_INT 0
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: CALL_OW 12
9110: PLUS
9111: PUSH
9112: LD_INT 5
9114: PUSH
9115: LD_INT 0
9117: PPUSH
9118: LD_INT 1
9120: PPUSH
9121: CALL_OW 12
9125: PLUS
9126: PUSH
9127: LD_INT 6
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: LIST
9134: PUSH
9135: LD_OWVAR 67
9139: ARRAY
9140: PPUSH
9141: LD_INT 3
9143: PPUSH
9144: LD_VAR 0 4
9148: PPUSH
9149: CALL 9662 0 3
9153: PPUSH
9154: CALL_OW 1
9158: ST_TO_ADDR
// num = [ 3 , 4 , 5 ] [ difficulty ] ;
9159: LD_ADDR_VAR 0 6
9163: PUSH
9164: LD_INT 3
9166: PUSH
9167: LD_INT 4
9169: PUSH
9170: LD_INT 5
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: LIST
9177: PUSH
9178: LD_OWVAR 67
9182: ARRAY
9183: ST_TO_ADDR
// for i = 1 to ai_labs [ base ] do
9184: LD_ADDR_VAR 0 2
9188: PUSH
9189: DOUBLE
9190: LD_INT 1
9192: DEC
9193: ST_TO_ADDR
9194: LD_EXP 36
9198: PUSH
9199: LD_VAR 0 5
9203: ARRAY
9204: PUSH
9205: FOR_TO
9206: IFFALSE 9232
// num = num + Rand ( 0 , 1 ) ;
9208: LD_ADDR_VAR 0 6
9212: PUSH
9213: LD_VAR 0 6
9217: PUSH
9218: LD_INT 0
9220: PPUSH
9221: LD_INT 1
9223: PPUSH
9224: CALL_OW 12
9228: PLUS
9229: ST_TO_ADDR
9230: GO 9205
9232: POP
9233: POP
// if base = 1 then
9234: LD_VAR 0 5
9238: PUSH
9239: LD_INT 1
9241: EQUAL
9242: IFFALSE 9275
// num = num + [ 3 , 4 , 5 ] [ difficulty ] ;
9244: LD_ADDR_VAR 0 6
9248: PUSH
9249: LD_VAR 0 6
9253: PUSH
9254: LD_INT 3
9256: PUSH
9257: LD_INT 4
9259: PUSH
9260: LD_INT 5
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: LIST
9267: PUSH
9268: LD_OWVAR 67
9272: ARRAY
9273: PLUS
9274: ST_TO_ADDR
// ai_scientists = Replace ( ai_scientists , base , CreateUnitsWithClass ( num , class_scientistic , side ) ) ;
9275: LD_ADDR_EXP 33
9279: PUSH
9280: LD_EXP 33
9284: PPUSH
9285: LD_VAR 0 5
9289: PPUSH
9290: LD_VAR 0 6
9294: PPUSH
9295: LD_INT 4
9297: PPUSH
9298: LD_VAR 0 4
9302: PPUSH
9303: CALL 9662 0 3
9307: PPUSH
9308: CALL_OW 1
9312: ST_TO_ADDR
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_cans , 300 ) ;
9313: LD_EXP 35
9317: PUSH
9318: LD_VAR 0 5
9322: ARRAY
9323: PPUSH
9324: CALL_OW 274
9328: PPUSH
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 300
9334: PPUSH
9335: CALL_OW 277
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_oil , 300 ) ;
9339: LD_EXP 35
9343: PUSH
9344: LD_VAR 0 5
9348: ARRAY
9349: PPUSH
9350: CALL_OW 274
9354: PPUSH
9355: LD_INT 2
9357: PPUSH
9358: LD_INT 300
9360: PPUSH
9361: CALL_OW 277
// SetResourceType ( GetBase ( ai_depot [ base ] ) , mat_siberit , 300 ) ;
9365: LD_EXP 35
9369: PUSH
9370: LD_VAR 0 5
9374: ARRAY
9375: PPUSH
9376: CALL_OW 274
9380: PPUSH
9381: LD_INT 3
9383: PPUSH
9384: LD_INT 300
9386: PPUSH
9387: CALL_OW 277
// for i in ai_soldiers [ base ] ^ ai_engineers [ base ] ^ ai_mechanics_defend [ base ] ^ ai_scientists [ base ] ^ ai_apemen_engineers [ base ] do
9391: LD_ADDR_VAR 0 2
9395: PUSH
9396: LD_EXP 30
9400: PUSH
9401: LD_VAR 0 5
9405: ARRAY
9406: PUSH
9407: LD_EXP 31
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: ADD
9418: PUSH
9419: LD_EXP 32
9423: PUSH
9424: LD_VAR 0 5
9428: ARRAY
9429: ADD
9430: PUSH
9431: LD_EXP 33
9435: PUSH
9436: LD_VAR 0 5
9440: ARRAY
9441: ADD
9442: PUSH
9443: LD_EXP 63
9447: PUSH
9448: LD_VAR 0 5
9452: ARRAY
9453: ADD
9454: PUSH
9455: FOR_IN
9456: IFFALSE 9505
// PlaceUnitXYR ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] , 7 , false ) ;
9458: LD_VAR 0 2
9462: PPUSH
9463: LD_EXP 42
9467: PUSH
9468: LD_VAR 0 5
9472: ARRAY
9473: PUSH
9474: LD_INT 1
9476: ARRAY
9477: PPUSH
9478: LD_EXP 42
9482: PUSH
9483: LD_VAR 0 5
9487: ARRAY
9488: PUSH
9489: LD_INT 2
9491: ARRAY
9492: PPUSH
9493: LD_INT 7
9495: PPUSH
9496: LD_INT 0
9498: PPUSH
9499: CALL_OW 50
9503: GO 9455
9505: POP
9506: POP
// ResetVehicleAttackDelay ( base ) ;
9507: LD_VAR 0 5
9511: PPUSH
9512: CALL 10026 0 1
// ResetHumanAttackDelay ( base ) ;
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL 10075 0 1
// end ;
9525: GO 8613
9527: POP
9528: POP
// uc_side = americans ;
9529: LD_ADDR_OWVAR 20
9533: PUSH
9534: LD_EXP 7
9538: ST_TO_ADDR
// Simms = NewCharacter ( Simms ) ;
9539: LD_ADDR_EXP 25
9543: PUSH
9544: LD_STRING Simms
9546: PPUSH
9547: CALL_OW 25
9551: ST_TO_ADDR
// Joan = NewCharacter ( Joan ) ;
9552: LD_ADDR_EXP 28
9556: PUSH
9557: LD_STRING Joan
9559: PPUSH
9560: CALL_OW 25
9564: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
9565: LD_ADDR_EXP 29
9569: PUSH
9570: LD_STRING Powell
9572: PPUSH
9573: CALL_OW 25
9577: ST_TO_ADDR
// uc_side = americans_alt ;
9578: LD_ADDR_OWVAR 20
9582: PUSH
9583: LD_EXP 9
9587: ST_TO_ADDR
// Cornell = NewCharacter ( Cornell ) ;
9588: LD_ADDR_EXP 26
9592: PUSH
9593: LD_STRING Cornell
9595: PPUSH
9596: CALL_OW 25
9600: ST_TO_ADDR
// Khattam = NewCharacter ( Khatam ) ;
9601: LD_ADDR_EXP 27
9605: PUSH
9606: LD_STRING Khatam
9608: PPUSH
9609: CALL_OW 25
9613: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , americans ] ) do
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: LD_INT 22
9621: PUSH
9622: LD_EXP 7
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PPUSH
9631: CALL_OW 69
9635: PUSH
9636: FOR_IN
9637: IFFALSE 9655
// DoNotAttack ( you , i ) ;
9639: LD_EXP 3
9643: PPUSH
9644: LD_VAR 0 2
9648: PPUSH
9649: CALL_OW 471
9653: GO 9636
9655: POP
9656: POP
// end ;
9657: LD_VAR 0 1
9661: RET
// export function CreateUnitsWithClass ( num_units , un_class , side ) ; var i , overskill ; begin
9662: LD_INT 0
9664: PPUSH
9665: PPUSH
9666: PPUSH
// result = [ ] ;
9667: LD_ADDR_VAR 0 4
9671: PUSH
9672: EMPTY
9673: ST_TO_ADDR
// InitUc ;
9674: CALL_OW 18
// InitHc ;
9678: CALL_OW 19
// case side of americans :
9682: LD_VAR 0 3
9686: PUSH
9687: LD_EXP 7
9691: DOUBLE
9692: EQUAL
9693: IFTRUE 9697
9695: GO 9708
9697: POP
// begin uc_nation = nation_american ;
9698: LD_ADDR_OWVAR 21
9702: PUSH
9703: LD_INT 1
9705: ST_TO_ADDR
// end ; russians :
9706: GO 9730
9708: LD_EXP 4
9712: DOUBLE
9713: EQUAL
9714: IFTRUE 9718
9716: GO 9729
9718: POP
// begin uc_nation = nation_russian ;
9719: LD_ADDR_OWVAR 21
9723: PUSH
9724: LD_INT 3
9726: ST_TO_ADDR
// end ; end ;
9727: GO 9730
9729: POP
// uc_side = side ;
9730: LD_ADDR_OWVAR 20
9734: PUSH
9735: LD_VAR 0 3
9739: ST_TO_ADDR
// overskill = difficulty + 4 ;
9740: LD_ADDR_VAR 0 6
9744: PUSH
9745: LD_OWVAR 67
9749: PUSH
9750: LD_INT 4
9752: PLUS
9753: ST_TO_ADDR
// for i = 1 to num_units do
9754: LD_ADDR_VAR 0 5
9758: PUSH
9759: DOUBLE
9760: LD_INT 1
9762: DEC
9763: ST_TO_ADDR
9764: LD_VAR 0 1
9768: PUSH
9769: FOR_TO
9770: IFFALSE 9843
// begin if Rand ( 1 , 3 ) = 1 then
9772: LD_INT 1
9774: PPUSH
9775: LD_INT 3
9777: PPUSH
9778: CALL_OW 12
9782: PUSH
9783: LD_INT 1
9785: EQUAL
9786: IFFALSE 9808
// PrepareHuman ( false , un_class , - overskill ) else
9788: LD_INT 0
9790: PPUSH
9791: LD_VAR 0 2
9795: PPUSH
9796: LD_VAR 0 6
9800: NEG
9801: PPUSH
9802: CALL_OW 380
9806: GO 9825
// PrepareHuman ( false , un_class , overskill ) ;
9808: LD_INT 0
9810: PPUSH
9811: LD_VAR 0 2
9815: PPUSH
9816: LD_VAR 0 6
9820: PPUSH
9821: CALL_OW 380
// result = result ^ CreateHuman ;
9825: LD_ADDR_VAR 0 4
9829: PUSH
9830: LD_VAR 0 4
9834: PUSH
9835: CALL_OW 44
9839: ADD
9840: ST_TO_ADDR
// end ;
9841: GO 9769
9843: POP
9844: POP
// end ;
9845: LD_VAR 0 4
9849: RET
// export function CreateApemenWithClass ( num_units , un_class , side ) ; var i ; begin
9850: LD_INT 0
9852: PPUSH
9853: PPUSH
// result = [ ] ;
9854: LD_ADDR_VAR 0 4
9858: PUSH
9859: EMPTY
9860: ST_TO_ADDR
// InitUc ;
9861: CALL_OW 18
// InitHc ;
9865: CALL_OW 19
// uc_side = side ;
9869: LD_ADDR_OWVAR 20
9873: PUSH
9874: LD_VAR 0 3
9878: ST_TO_ADDR
// uc_nation = nation_nature ;
9879: LD_ADDR_OWVAR 21
9883: PUSH
9884: LD_INT 0
9886: ST_TO_ADDR
// hc_class = un_class ;
9887: LD_ADDR_OWVAR 28
9891: PUSH
9892: LD_VAR 0 2
9896: ST_TO_ADDR
// for i = 1 to num_units do
9897: LD_ADDR_VAR 0 5
9901: PUSH
9902: DOUBLE
9903: LD_INT 1
9905: DEC
9906: ST_TO_ADDR
9907: LD_VAR 0 1
9911: PUSH
9912: FOR_TO
9913: IFFALSE 10019
// begin hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
9915: LD_ADDR_OWVAR 29
9919: PUSH
9920: LD_INT 11
9922: PPUSH
9923: LD_INT 13
9925: PPUSH
9926: CALL_OW 12
9930: PUSH
9931: LD_INT 10
9933: PPUSH
9934: LD_INT 11
9936: PPUSH
9937: CALL_OW 12
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
9946: LD_ADDR_OWVAR 27
9950: PUSH
9951: LD_INT 1
9953: PPUSH
9954: LD_INT 2
9956: PPUSH
9957: CALL_OW 12
9961: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , 0 , 0 ] ;
9962: LD_ADDR_OWVAR 31
9966: PUSH
9967: LD_INT 0
9969: PPUSH
9970: LD_INT 2
9972: PPUSH
9973: CALL_OW 12
9977: PUSH
9978: LD_INT 0
9980: PPUSH
9981: LD_INT 2
9983: PPUSH
9984: CALL_OW 12
9988: PUSH
9989: LD_INT 0
9991: PUSH
9992: LD_INT 0
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: ST_TO_ADDR
// result = result ^ CreateHuman ;
10001: LD_ADDR_VAR 0 4
10005: PUSH
10006: LD_VAR 0 4
10010: PUSH
10011: CALL_OW 44
10015: ADD
10016: ST_TO_ADDR
// end ;
10017: GO 9912
10019: POP
10020: POP
// end ;
10021: LD_VAR 0 4
10025: RET
// export function ResetVehicleAttackDelay ( base ) ; begin
10026: LD_INT 0
10028: PPUSH
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , Rand ( 5 5$30 , 7 7$30 ) - 1 1$0 * difficulty ) ;
10029: LD_ADDR_EXP 58
10033: PUSH
10034: LD_EXP 58
10038: PPUSH
10039: LD_VAR 0 1
10043: PPUSH
10044: LD_INT 11550
10046: PPUSH
10047: LD_INT 15750
10049: PPUSH
10050: CALL_OW 12
10054: PUSH
10055: LD_INT 2100
10057: PUSH
10058: LD_OWVAR 67
10062: MUL
10063: MINUS
10064: PPUSH
10065: CALL_OW 1
10069: ST_TO_ADDR
// end ;
10070: LD_VAR 0 2
10074: RET
// export function ResetHumanAttackDelay ( base ) ; begin
10075: LD_INT 0
10077: PPUSH
// ai_human_attack_delay = Replace ( ai_human_attack_delay , base , Rand ( 6 6$30 , 8 8$30 ) - 0 0$45 * difficulty ) ;
10078: LD_ADDR_EXP 68
10082: PUSH
10083: LD_EXP 68
10087: PPUSH
10088: LD_VAR 0 1
10092: PPUSH
10093: LD_INT 13650
10095: PPUSH
10096: LD_INT 17850
10098: PPUSH
10099: CALL_OW 12
10103: PUSH
10104: LD_INT 1575
10106: PUSH
10107: LD_OWVAR 67
10111: MUL
10112: MINUS
10113: PPUSH
10114: CALL_OW 1
10118: ST_TO_ADDR
// end ;
10119: LD_VAR 0 2
10123: RET
// function Action ; begin
10124: LD_INT 0
10126: PPUSH
// wait ( 2 ) ;
10127: LD_INT 2
10129: PPUSH
10130: CALL_OW 67
// CenterNowOnXY ( 168 , 109 ) ;
10134: LD_INT 168
10136: PPUSH
10137: LD_INT 109
10139: PPUSH
10140: CALL_OW 86
// RevealFogArea ( you , Am_base ) ;
10144: LD_EXP 3
10148: PPUSH
10149: LD_INT 4
10151: PPUSH
10152: CALL_OW 332
// wait ( 0 0$0.2 ) ;
10156: LD_INT 7
10158: PPUSH
10159: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10163: LD_STRING M1
10165: PPUSH
10166: CALL_OW 337
// wait ( 0 0$0.2 ) ;
10170: LD_INT 7
10172: PPUSH
10173: CALL_OW 67
// SaveForQuickRestart ;
10177: CALL_OW 22
// end ; end_of_file
10181: LD_VAR 0 1
10185: RET
// every 0 0$1 + 0 0$0.4 do
10186: GO 10188
10188: DISABLE
// begin repeat wait ( Rand ( 1 1$10 , 2 2$40 ) ) ;
10189: LD_INT 2450
10191: PPUSH
10192: LD_INT 5600
10194: PPUSH
10195: CALL_OW 12
10199: PPUSH
10200: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 3 , 5 ) , true ) ;
10204: LD_INT 3
10206: PPUSH
10207: LD_INT 5
10209: PPUSH
10210: CALL_OW 12
10214: PPUSH
10215: LD_INT 1
10217: PPUSH
10218: CALL_OW 57
// if Rand ( 1 , 4 ) = 1 then
10222: LD_INT 1
10224: PPUSH
10225: LD_INT 4
10227: PPUSH
10228: CALL_OW 12
10232: PUSH
10233: LD_INT 1
10235: EQUAL
10236: IFFALSE 10271
// begin wait ( Rand ( 0 0$5 , 0 0$20 ) ) ;
10238: LD_INT 175
10240: PPUSH
10241: LD_INT 700
10243: PPUSH
10244: CALL_OW 12
10248: PPUSH
10249: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 2 , 4 ) , true ) ;
10253: LD_INT 2
10255: PPUSH
10256: LD_INT 4
10258: PPUSH
10259: CALL_OW 12
10263: PPUSH
10264: LD_INT 1
10266: PPUSH
10267: CALL_OW 57
// end ; until false ;
10271: LD_INT 0
10273: IFFALSE 10189
// end ;
10275: END
// every 0 0$1 + 0 0$0.5 do var count , time ;
10276: GO 10278
10278: DISABLE
10279: LD_INT 0
10281: PPUSH
10282: PPUSH
// begin count = 0 ;
10283: LD_ADDR_VAR 0 1
10287: PUSH
10288: LD_INT 0
10290: ST_TO_ADDR
// repeat if game_phase < 3 then
10291: LD_EXP 89
10295: PUSH
10296: LD_INT 3
10298: LESS
10299: IFFALSE 10348
// time = [ 1 1$0 , 1 1$15 , 1 1$30 ] [ difficulty ] + ( 0 0$45 * count / ( count + 6 ) ) else
10301: LD_ADDR_VAR 0 2
10305: PUSH
10306: LD_INT 2100
10308: PUSH
10309: LD_INT 2625
10311: PUSH
10312: LD_INT 3150
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: LIST
10319: PUSH
10320: LD_OWVAR 67
10324: ARRAY
10325: PUSH
10326: LD_INT 1575
10328: PUSH
10329: LD_VAR 0 1
10333: MUL
10334: PUSH
10335: LD_VAR 0 1
10339: PUSH
10340: LD_INT 6
10342: PLUS
10343: DIVREAL
10344: PLUS
10345: ST_TO_ADDR
10346: GO 10373
// time = [ 1 1$40 , 1 1$55 , 2 2$10 ] [ difficulty ] ;
10348: LD_ADDR_VAR 0 2
10352: PUSH
10353: LD_INT 3500
10355: PUSH
10356: LD_INT 4025
10358: PUSH
10359: LD_INT 4550
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: PUSH
10367: LD_OWVAR 67
10371: ARRAY
10372: ST_TO_ADDR
// wait ( Rand ( time , time + 0 0$30 ) ) ;
10373: LD_VAR 0 2
10377: PPUSH
10378: LD_VAR 0 2
10382: PUSH
10383: LD_INT 1050
10385: PLUS
10386: PPUSH
10387: CALL_OW 12
10391: PPUSH
10392: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , player_crate_area , true ) ;
10396: LD_INT 3
10398: PPUSH
10399: LD_INT 5
10401: PPUSH
10402: CALL_OW 12
10406: PPUSH
10407: LD_INT 9
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 55
// count = count + 1 ;
10417: LD_ADDR_VAR 0 1
10421: PUSH
10422: LD_VAR 0 1
10426: PUSH
10427: LD_INT 1
10429: PLUS
10430: ST_TO_ADDR
// until false ;
10431: LD_INT 0
10433: IFFALSE 10291
// end ; end_of_file
10435: PPOPN 2
10437: END
// every 0 0$10 do var i , base ;
10438: GO 10440
10440: DISABLE
10441: LD_INT 0
10443: PPUSH
10444: PPUSH
// begin for i = 1 to ai_depot do
10445: LD_ADDR_VAR 0 1
10449: PUSH
10450: DOUBLE
10451: LD_INT 1
10453: DEC
10454: ST_TO_ADDR
10455: LD_EXP 35
10459: PUSH
10460: FOR_TO
10461: IFFALSE 10571
// if IsOk ( ai_depot [ i ] ) and GetSide ( ai_depot [ i ] ) <> you then
10463: LD_EXP 35
10467: PUSH
10468: LD_VAR 0 1
10472: ARRAY
10473: PPUSH
10474: CALL_OW 302
10478: PUSH
10479: LD_EXP 35
10483: PUSH
10484: LD_VAR 0 1
10488: ARRAY
10489: PPUSH
10490: CALL_OW 255
10494: PUSH
10495: LD_EXP 3
10499: NONEQUAL
10500: AND
10501: IFFALSE 10569
// begin base = GetBase ( ai_depot [ i ] ) ;
10503: LD_ADDR_VAR 0 2
10507: PUSH
10508: LD_EXP 35
10512: PUSH
10513: LD_VAR 0 1
10517: ARRAY
10518: PPUSH
10519: CALL_OW 274
10523: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 300 ) ;
10524: LD_VAR 0 2
10528: PPUSH
10529: LD_INT 1
10531: PPUSH
10532: LD_INT 300
10534: PPUSH
10535: CALL_OW 277
// SetResourceType ( base , mat_oil , 300 ) ;
10539: LD_VAR 0 2
10543: PPUSH
10544: LD_INT 2
10546: PPUSH
10547: LD_INT 300
10549: PPUSH
10550: CALL_OW 277
// SetResourceType ( base , mat_siberit , 300 ) ;
10554: LD_VAR 0 2
10558: PPUSH
10559: LD_INT 3
10561: PPUSH
10562: LD_INT 300
10564: PPUSH
10565: CALL_OW 277
// end ;
10569: GO 10460
10571: POP
10572: POP
// enable ;
10573: ENABLE
// end ;
10574: PPOPN 2
10576: END
// on UnitDestroyed ( un ) do var side , temp_list , base ;
10577: LD_INT 0
10579: PPUSH
10580: PPUSH
10581: PPUSH
// begin if un = Heike then
10582: LD_VAR 0 1
10586: PUSH
10587: LD_EXP 10
10591: EQUAL
10592: IFFALSE 10616
// begin ExclusiveOn ;
10594: CALL_OW 4
// Wait ( 0 0$1 ) ;
10598: LD_INT 35
10600: PPUSH
10601: CALL_OW 67
// YouLost ( HeikeDead ) ;
10605: LD_STRING HeikeDead
10607: PPUSH
10608: CALL_OW 104
// ExclusiveOff ;
10612: CALL_OW 5
// end ; if un = Gensher then
10616: LD_VAR 0 1
10620: PUSH
10621: LD_EXP 24
10625: EQUAL
10626: IFFALSE 10650
// begin ExclusiveOn ;
10628: CALL_OW 4
// Wait ( 0 0$1 ) ;
10632: LD_INT 35
10634: PPUSH
10635: CALL_OW 67
// YouLost ( GensherDead ) ;
10639: LD_STRING GensherDead
10641: PPUSH
10642: CALL_OW 104
// ExclusiveOff ;
10646: CALL_OW 5
// end ; if UnitFilter ( original_gensher_people , [ [ f_class , class_scientistic ] , [ f_lives , 1 ] ] ) = 0 then
10650: LD_EXP 83
10654: PPUSH
10655: LD_INT 25
10657: PUSH
10658: LD_INT 4
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 24
10667: PUSH
10668: LD_INT 1
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PPUSH
10679: CALL_OW 72
10683: PUSH
10684: LD_INT 0
10686: EQUAL
10687: IFFALSE 10711
// begin ExclusiveOn ;
10689: CALL_OW 4
// wait ( 0 0$1 ) ;
10693: LD_INT 35
10695: PPUSH
10696: CALL_OW 67
// YouLost ( GensherScisDead ) ;
10700: LD_STRING GensherScisDead
10702: PPUSH
10703: CALL_OW 104
// ExclusiveOff ;
10707: CALL_OW 5
// end ; for base in ai_bases do
10711: LD_ADDR_VAR 0 4
10715: PUSH
10716: LD_EXP 59
10720: PUSH
10721: FOR_IN
10722: IFFALSE 10773
// begin temp_list = ai_captured_buildings [ base ] diff un ;
10724: LD_ADDR_VAR 0 3
10728: PUSH
10729: LD_EXP 79
10733: PUSH
10734: LD_VAR 0 4
10738: ARRAY
10739: PUSH
10740: LD_VAR 0 1
10744: DIFF
10745: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
10746: LD_ADDR_EXP 79
10750: PUSH
10751: LD_EXP 79
10755: PPUSH
10756: LD_VAR 0 4
10760: PPUSH
10761: LD_VAR 0 3
10765: PPUSH
10766: CALL_OW 1
10770: ST_TO_ADDR
// end ;
10771: GO 10721
10773: POP
10774: POP
// side = GetSide ( un ) ;
10775: LD_ADDR_VAR 0 2
10779: PUSH
10780: LD_VAR 0 1
10784: PPUSH
10785: CALL_OW 255
10789: ST_TO_ADDR
// if side = you then
10790: LD_VAR 0 2
10794: PUSH
10795: LD_EXP 3
10799: EQUAL
10800: IFFALSE 10804
// exit ;
10802: GO 11027
// if side = you_alt and game_phase = 1 then
10804: LD_VAR 0 2
10808: PUSH
10809: LD_EXP 6
10813: EQUAL
10814: PUSH
10815: LD_EXP 89
10819: PUSH
10820: LD_INT 1
10822: EQUAL
10823: AND
10824: IFFALSE 10887
// begin case GetType ( un ) of unit_human :
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 247
10835: PUSH
10836: LD_INT 1
10838: DOUBLE
10839: EQUAL
10840: IFTRUE 10844
10842: GO 10861
10844: POP
// russian_interference_points = russian_interference_points + 3 ; unit_building :
10845: LD_ADDR_EXP 97
10849: PUSH
10850: LD_EXP 97
10854: PUSH
10855: LD_INT 3
10857: PLUS
10858: ST_TO_ADDR
10859: GO 10887
10861: LD_INT 3
10863: DOUBLE
10864: EQUAL
10865: IFTRUE 10869
10867: GO 10886
10869: POP
// russian_interference_points = russian_interference_points + 2 ; end ;
10870: LD_ADDR_EXP 97
10874: PUSH
10875: LD_EXP 97
10879: PUSH
10880: LD_INT 2
10882: PLUS
10883: ST_TO_ADDR
10884: GO 10887
10886: POP
// end ; case GetType ( un ) of unit_human :
10887: LD_VAR 0 1
10891: PPUSH
10892: CALL_OW 247
10896: PUSH
10897: LD_INT 1
10899: DOUBLE
10900: EQUAL
10901: IFTRUE 10905
10903: GO 10942
10905: POP
// for base in ai_bases do
10906: LD_ADDR_VAR 0 4
10910: PUSH
10911: LD_EXP 59
10915: PUSH
10916: FOR_IN
10917: IFFALSE 10938
// RemoveHumanFromVariables ( base , un , true ) ; unit_vehicle :
10919: LD_VAR 0 4
10923: PPUSH
10924: LD_VAR 0 1
10928: PPUSH
10929: LD_INT 1
10931: PPUSH
10932: CALL 11583 0 3
10936: GO 10916
10938: POP
10939: POP
10940: GO 11027
10942: LD_INT 2
10944: DOUBLE
10945: EQUAL
10946: IFTRUE 10950
10948: GO 10984
10950: POP
// for base in ai_bases do
10951: LD_ADDR_VAR 0 4
10955: PUSH
10956: LD_EXP 59
10960: PUSH
10961: FOR_IN
10962: IFFALSE 10980
// RemoveVehicleFromVariables ( base , un ) ; unit_building :
10964: LD_VAR 0 4
10968: PPUSH
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL 11191 0 2
10978: GO 10961
10980: POP
10981: POP
10982: GO 11027
10984: LD_INT 3
10986: DOUBLE
10987: EQUAL
10988: IFTRUE 10992
10990: GO 11026
10992: POP
// for base in ai_bases do
10993: LD_ADDR_VAR 0 4
10997: PUSH
10998: LD_EXP 59
11002: PUSH
11003: FOR_IN
11004: IFFALSE 11022
// RemoveBuildingFromVariables ( base , un ) ; end ;
11006: LD_VAR 0 4
11010: PPUSH
11011: LD_VAR 0 1
11015: PPUSH
11016: CALL 11030 0 2
11020: GO 11003
11022: POP
11023: POP
11024: GO 11027
11026: POP
// end ;
11027: PPOPN 4
11029: END
// function RemoveBuildingFromVariables ( base , building ) ; var temp_list ; begin
11030: LD_INT 0
11032: PPUSH
11033: PPUSH
// temp_list = ai_all_buildings [ base ] diff building ;
11034: LD_ADDR_VAR 0 4
11038: PUSH
11039: LD_EXP 45
11043: PUSH
11044: LD_VAR 0 1
11048: ARRAY
11049: PUSH
11050: LD_VAR 0 2
11054: DIFF
11055: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
11056: LD_ADDR_EXP 45
11060: PUSH
11061: LD_EXP 45
11065: PPUSH
11066: LD_VAR 0 1
11070: PPUSH
11071: LD_VAR 0 4
11075: PPUSH
11076: CALL_OW 1
11080: ST_TO_ADDR
// temp_list = ai_excepted_buildings [ base ] diff building ;
11081: LD_ADDR_VAR 0 4
11085: PUSH
11086: LD_EXP 69
11090: PUSH
11091: LD_VAR 0 1
11095: ARRAY
11096: PUSH
11097: LD_VAR 0 2
11101: DIFF
11102: ST_TO_ADDR
// ai_excepted_buildings = Replace ( ai_excepted_buildings , base , temp_list ) ;
11103: LD_ADDR_EXP 69
11107: PUSH
11108: LD_EXP 69
11112: PPUSH
11113: LD_VAR 0 1
11117: PPUSH
11118: LD_VAR 0 4
11122: PPUSH
11123: CALL_OW 1
11127: ST_TO_ADDR
// if building = ai_building_under_construction [ base ] then
11128: LD_VAR 0 2
11132: PUSH
11133: LD_EXP 43
11137: PUSH
11138: LD_VAR 0 1
11142: ARRAY
11143: EQUAL
11144: IFFALSE 11169
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
11146: LD_ADDR_EXP 43
11150: PUSH
11151: LD_EXP 43
11155: PPUSH
11156: LD_VAR 0 1
11160: PPUSH
11161: LD_INT 0
11163: PPUSH
11164: CALL_OW 1
11168: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , building , false ) ;
11169: LD_VAR 0 1
11173: PPUSH
11174: LD_VAR 0 2
11178: PPUSH
11179: LD_INT 0
11181: PPUSH
11182: CALL 7059 0 3
// end ;
11186: LD_VAR 0 3
11190: RET
// function RemoveVehicleFromVariables ( base , vehicle ) ; var temp_list ; begin
11191: LD_INT 0
11193: PPUSH
11194: PPUSH
// if vehicle in ai_vehicles_defend [ base ] then
11195: LD_VAR 0 2
11199: PUSH
11200: LD_EXP 40
11204: PUSH
11205: LD_VAR 0 1
11209: ARRAY
11210: IN
11211: IFFALSE 11260
// begin temp_list = ai_vehicles_defend [ base ] diff vehicle ;
11213: LD_ADDR_VAR 0 4
11217: PUSH
11218: LD_EXP 40
11222: PUSH
11223: LD_VAR 0 1
11227: ARRAY
11228: PUSH
11229: LD_VAR 0 2
11233: DIFF
11234: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list ) ;
11235: LD_ADDR_EXP 40
11239: PUSH
11240: LD_EXP 40
11244: PPUSH
11245: LD_VAR 0 1
11249: PPUSH
11250: LD_VAR 0 4
11254: PPUSH
11255: CALL_OW 1
11259: ST_TO_ADDR
// end ; if vehicle in ai_vehicles_attack [ base ] then
11260: LD_VAR 0 2
11264: PUSH
11265: LD_EXP 41
11269: PUSH
11270: LD_VAR 0 1
11274: ARRAY
11275: IN
11276: IFFALSE 11325
// begin temp_list = ai_vehicles_attack [ base ] diff vehicle ;
11278: LD_ADDR_VAR 0 4
11282: PUSH
11283: LD_EXP 41
11287: PUSH
11288: LD_VAR 0 1
11292: ARRAY
11293: PUSH
11294: LD_VAR 0 2
11298: DIFF
11299: ST_TO_ADDR
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , temp_list ) ;
11300: LD_ADDR_EXP 41
11304: PUSH
11305: LD_EXP 41
11309: PPUSH
11310: LD_VAR 0 1
11314: PPUSH
11315: LD_VAR 0 4
11319: PPUSH
11320: CALL_OW 1
11324: ST_TO_ADDR
// end ; if vehicle = ai_cargo_bay [ base ] then
11325: LD_VAR 0 2
11329: PUSH
11330: LD_EXP 61
11334: PUSH
11335: LD_VAR 0 1
11339: ARRAY
11340: EQUAL
11341: IFFALSE 11366
// begin ai_cargo_bay = Replace ( ai_cargo_bay , base , 0 ) ;
11343: LD_ADDR_EXP 61
11347: PUSH
11348: LD_EXP 61
11352: PPUSH
11353: LD_VAR 0 1
11357: PPUSH
11358: LD_INT 0
11360: PPUSH
11361: CALL_OW 1
11365: ST_TO_ADDR
// end ; if vehicle = ai_crane [ base ] then
11366: LD_VAR 0 2
11370: PUSH
11371: LD_EXP 71
11375: PUSH
11376: LD_VAR 0 1
11380: ARRAY
11381: EQUAL
11382: IFFALSE 11448
// begin ai_crane = Replace ( ai_crane , base , 0 ) ;
11384: LD_ADDR_EXP 71
11388: PUSH
11389: LD_EXP 71
11393: PPUSH
11394: LD_VAR 0 1
11398: PPUSH
11399: LD_INT 0
11401: PPUSH
11402: CALL_OW 1
11406: ST_TO_ADDR
// if vehicle = ai_building_constructor [ base ] then
11407: LD_VAR 0 2
11411: PUSH
11412: LD_EXP 46
11416: PUSH
11417: LD_VAR 0 1
11421: ARRAY
11422: EQUAL
11423: IFFALSE 11448
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
11425: LD_ADDR_EXP 46
11429: PUSH
11430: LD_EXP 46
11434: PPUSH
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 0
11442: PPUSH
11443: CALL_OW 1
11447: ST_TO_ADDR
// end ; if vehicle in ai_vehicles_being_repaired [ base ] then
11448: LD_VAR 0 2
11452: PUSH
11453: LD_EXP 80
11457: PUSH
11458: LD_VAR 0 1
11462: ARRAY
11463: IN
11464: IFFALSE 11513
// begin temp_list = ai_vehicles_being_repaired [ base ] diff vehicle ;
11466: LD_ADDR_VAR 0 4
11470: PUSH
11471: LD_EXP 80
11475: PUSH
11476: LD_VAR 0 1
11480: ARRAY
11481: PUSH
11482: LD_VAR 0 2
11486: DIFF
11487: ST_TO_ADDR
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
11488: LD_ADDR_EXP 80
11492: PUSH
11493: LD_EXP 80
11497: PPUSH
11498: LD_VAR 0 1
11502: PPUSH
11503: LD_VAR 0 4
11507: PPUSH
11508: CALL_OW 1
11512: ST_TO_ADDR
// end ; if vehicle in ai_refuel_vehicles_list [ base ] then
11513: LD_VAR 0 2
11517: PUSH
11518: LD_EXP 55
11522: PUSH
11523: LD_VAR 0 1
11527: ARRAY
11528: IN
11529: IFFALSE 11578
// begin temp_list = ai_refuel_vehicles_list [ base ] diff vehicle ;
11531: LD_ADDR_VAR 0 4
11535: PUSH
11536: LD_EXP 55
11540: PUSH
11541: LD_VAR 0 1
11545: ARRAY
11546: PUSH
11547: LD_VAR 0 2
11551: DIFF
11552: ST_TO_ADDR
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
11553: LD_ADDR_EXP 55
11557: PUSH
11558: LD_EXP 55
11562: PPUSH
11563: LD_VAR 0 1
11567: PPUSH
11568: LD_VAR 0 4
11572: PPUSH
11573: CALL_OW 1
11577: ST_TO_ADDR
// end ; end ;
11578: LD_VAR 0 3
11582: RET
// function RemoveHumanFromVariables ( base , human , check_if_base_is_dead ) ; var temp_list ; begin
11583: LD_INT 0
11585: PPUSH
11586: PPUSH
// if human in ai_soldiers [ base ] then
11587: LD_VAR 0 2
11591: PUSH
11592: LD_EXP 30
11596: PUSH
11597: LD_VAR 0 1
11601: ARRAY
11602: IN
11603: IFFALSE 11652
// begin temp_list = ai_soldiers [ base ] diff human ;
11605: LD_ADDR_VAR 0 5
11609: PUSH
11610: LD_EXP 30
11614: PUSH
11615: LD_VAR 0 1
11619: ARRAY
11620: PUSH
11621: LD_VAR 0 2
11625: DIFF
11626: ST_TO_ADDR
// ai_soldiers = Replace ( ai_soldiers , base , temp_list ) ;
11627: LD_ADDR_EXP 30
11631: PUSH
11632: LD_EXP 30
11636: PPUSH
11637: LD_VAR 0 1
11641: PPUSH
11642: LD_VAR 0 5
11646: PPUSH
11647: CALL_OW 1
11651: ST_TO_ADDR
// end ; if human in ai_attacking_soldiers [ base ] then
11652: LD_VAR 0 2
11656: PUSH
11657: LD_EXP 64
11661: PUSH
11662: LD_VAR 0 1
11666: ARRAY
11667: IN
11668: IFFALSE 11717
// begin temp_list = ai_attacking_soldiers [ base ] diff human ;
11670: LD_ADDR_VAR 0 5
11674: PUSH
11675: LD_EXP 64
11679: PUSH
11680: LD_VAR 0 1
11684: ARRAY
11685: PUSH
11686: LD_VAR 0 2
11690: DIFF
11691: ST_TO_ADDR
// ai_attacking_soldiers = Replace ( ai_attacking_soldiers , base , temp_list ) ;
11692: LD_ADDR_EXP 64
11696: PUSH
11697: LD_EXP 64
11701: PPUSH
11702: LD_VAR 0 1
11706: PPUSH
11707: LD_VAR 0 5
11711: PPUSH
11712: CALL_OW 1
11716: ST_TO_ADDR
// end ; if human in ai_engineers [ base ] then
11717: LD_VAR 0 2
11721: PUSH
11722: LD_EXP 31
11726: PUSH
11727: LD_VAR 0 1
11731: ARRAY
11732: IN
11733: IFFALSE 11782
// begin temp_list = ai_engineers [ base ] diff human ;
11735: LD_ADDR_VAR 0 5
11739: PUSH
11740: LD_EXP 31
11744: PUSH
11745: LD_VAR 0 1
11749: ARRAY
11750: PUSH
11751: LD_VAR 0 2
11755: DIFF
11756: ST_TO_ADDR
// ai_engineers = Replace ( ai_engineers , base , temp_list ) ;
11757: LD_ADDR_EXP 31
11761: PUSH
11762: LD_EXP 31
11766: PPUSH
11767: LD_VAR 0 1
11771: PPUSH
11772: LD_VAR 0 5
11776: PPUSH
11777: CALL_OW 1
11781: ST_TO_ADDR
// end ; if human in ai_apemen_engineers [ base ] then
11782: LD_VAR 0 2
11786: PUSH
11787: LD_EXP 63
11791: PUSH
11792: LD_VAR 0 1
11796: ARRAY
11797: IN
11798: IFFALSE 11847
// begin temp_list = ai_apemen_engineers [ base ] diff human ;
11800: LD_ADDR_VAR 0 5
11804: PUSH
11805: LD_EXP 63
11809: PUSH
11810: LD_VAR 0 1
11814: ARRAY
11815: PUSH
11816: LD_VAR 0 2
11820: DIFF
11821: ST_TO_ADDR
// ai_apemen_engineers = Replace ( ai_apemen_engineers , base , temp_list ) ;
11822: LD_ADDR_EXP 63
11826: PUSH
11827: LD_EXP 63
11831: PPUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: LD_VAR 0 5
11841: PPUSH
11842: CALL_OW 1
11846: ST_TO_ADDR
// end ; if human in ai_mechanics_defend [ base ] then
11847: LD_VAR 0 2
11851: PUSH
11852: LD_EXP 32
11856: PUSH
11857: LD_VAR 0 1
11861: ARRAY
11862: IN
11863: IFFALSE 11912
// begin temp_list = ai_mechanics_defend [ base ] diff human ;
11865: LD_ADDR_VAR 0 5
11869: PUSH
11870: LD_EXP 32
11874: PUSH
11875: LD_VAR 0 1
11879: ARRAY
11880: PUSH
11881: LD_VAR 0 2
11885: DIFF
11886: ST_TO_ADDR
// ai_mechanics_defend = Replace ( ai_mechanics_defend , base , temp_list ) ;
11887: LD_ADDR_EXP 32
11891: PUSH
11892: LD_EXP 32
11896: PPUSH
11897: LD_VAR 0 1
11901: PPUSH
11902: LD_VAR 0 5
11906: PPUSH
11907: CALL_OW 1
11911: ST_TO_ADDR
// end ; if human in ai_scientists [ base ] then
11912: LD_VAR 0 2
11916: PUSH
11917: LD_EXP 33
11921: PUSH
11922: LD_VAR 0 1
11926: ARRAY
11927: IN
11928: IFFALSE 11977
// begin temp_list = ai_scientists [ base ] diff human ;
11930: LD_ADDR_VAR 0 5
11934: PUSH
11935: LD_EXP 33
11939: PUSH
11940: LD_VAR 0 1
11944: ARRAY
11945: PUSH
11946: LD_VAR 0 2
11950: DIFF
11951: ST_TO_ADDR
// ai_scientists = Replace ( ai_scientists , base , temp_list ) ;
11952: LD_ADDR_EXP 33
11956: PUSH
11957: LD_EXP 33
11961: PPUSH
11962: LD_VAR 0 1
11966: PPUSH
11967: LD_VAR 0 5
11971: PPUSH
11972: CALL_OW 1
11976: ST_TO_ADDR
// end ; if human in ai_attacking_scientists [ base ] then
11977: LD_VAR 0 2
11981: PUSH
11982: LD_EXP 65
11986: PUSH
11987: LD_VAR 0 1
11991: ARRAY
11992: IN
11993: IFFALSE 12042
// begin temp_list = ai_attacking_scientists [ base ] diff human ;
11995: LD_ADDR_VAR 0 5
11999: PUSH
12000: LD_EXP 65
12004: PUSH
12005: LD_VAR 0 1
12009: ARRAY
12010: PUSH
12011: LD_VAR 0 2
12015: DIFF
12016: ST_TO_ADDR
// ai_attacking_scientists = Replace ( ai_attacking_scientists , base , temp_list ) ;
12017: LD_ADDR_EXP 65
12021: PUSH
12022: LD_EXP 65
12026: PPUSH
12027: LD_VAR 0 1
12031: PPUSH
12032: LD_VAR 0 5
12036: PPUSH
12037: CALL_OW 1
12041: ST_TO_ADDR
// end ; if human in ai_heal_these_humans [ base ] then
12042: LD_VAR 0 2
12046: PUSH
12047: LD_EXP 44
12051: PUSH
12052: LD_VAR 0 1
12056: ARRAY
12057: IN
12058: IFFALSE 12107
// begin temp_list = ai_heal_these_humans [ base ] diff human ;
12060: LD_ADDR_VAR 0 5
12064: PUSH
12065: LD_EXP 44
12069: PUSH
12070: LD_VAR 0 1
12074: ARRAY
12075: PUSH
12076: LD_VAR 0 2
12080: DIFF
12081: ST_TO_ADDR
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12082: LD_ADDR_EXP 44
12086: PUSH
12087: LD_EXP 44
12091: PPUSH
12092: LD_VAR 0 1
12096: PPUSH
12097: LD_VAR 0 5
12101: PPUSH
12102: CALL_OW 1
12106: ST_TO_ADDR
// end ; if human = ai_building_constructor [ base ] then
12107: LD_VAR 0 2
12111: PUSH
12112: LD_EXP 46
12116: PUSH
12117: LD_VAR 0 1
12121: ARRAY
12122: EQUAL
12123: IFFALSE 12148
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
12125: LD_ADDR_EXP 46
12129: PUSH
12130: LD_EXP 46
12134: PPUSH
12135: LD_VAR 0 1
12139: PPUSH
12140: LD_INT 0
12142: PPUSH
12143: CALL_OW 1
12147: ST_TO_ADDR
// if human in ai_retreating_attacking_humans [ base ] then
12148: LD_VAR 0 2
12152: PUSH
12153: LD_EXP 67
12157: PUSH
12158: LD_VAR 0 1
12162: ARRAY
12163: IN
12164: IFFALSE 12213
// begin temp_list = ai_retreating_attacking_humans [ base ] diff human ;
12166: LD_ADDR_VAR 0 5
12170: PUSH
12171: LD_EXP 67
12175: PUSH
12176: LD_VAR 0 1
12180: ARRAY
12181: PUSH
12182: LD_VAR 0 2
12186: DIFF
12187: ST_TO_ADDR
// ai_retreating_attacking_humans = Replace ( ai_retreating_attacking_humans , base , temp_list ) ;
12188: LD_ADDR_EXP 67
12192: PUSH
12193: LD_EXP 67
12197: PPUSH
12198: LD_VAR 0 1
12202: PPUSH
12203: LD_VAR 0 5
12207: PPUSH
12208: CALL_OW 1
12212: ST_TO_ADDR
// end ; if check_if_base_is_dead then
12213: LD_VAR 0 3
12217: IFFALSE 12327
// if ( ( ai_soldiers [ base ] ^ ai_attacking_soldiers [ base ] ^ ai_engineers [ base ] ^ ai_apemen_engineers [ base ] ^ ai_mechanics_defend [ base ] ^ ai_scientists [ base ] ^ ai_attacking_scientists [ base ] ) diff 0 ) = 0 then
12219: LD_EXP 30
12223: PUSH
12224: LD_VAR 0 1
12228: ARRAY
12229: PUSH
12230: LD_EXP 64
12234: PUSH
12235: LD_VAR 0 1
12239: ARRAY
12240: ADD
12241: PUSH
12242: LD_EXP 31
12246: PUSH
12247: LD_VAR 0 1
12251: ARRAY
12252: ADD
12253: PUSH
12254: LD_EXP 63
12258: PUSH
12259: LD_VAR 0 1
12263: ARRAY
12264: ADD
12265: PUSH
12266: LD_EXP 32
12270: PUSH
12271: LD_VAR 0 1
12275: ARRAY
12276: ADD
12277: PUSH
12278: LD_EXP 33
12282: PUSH
12283: LD_VAR 0 1
12287: ARRAY
12288: ADD
12289: PUSH
12290: LD_EXP 65
12294: PUSH
12295: LD_VAR 0 1
12299: ARRAY
12300: ADD
12301: PUSH
12302: LD_INT 0
12304: DIFF
12305: PUSH
12306: LD_INT 0
12308: EQUAL
12309: IFFALSE 12327
// ai_bases = ai_bases diff base ;
12311: LD_ADDR_EXP 59
12315: PUSH
12316: LD_EXP 59
12320: PUSH
12321: LD_VAR 0 1
12325: DIFF
12326: ST_TO_ADDR
// end ;
12327: LD_VAR 0 4
12331: RET
// function GetBaseArea ( base ) ; begin
12332: LD_INT 0
12334: PPUSH
// case base of 1 :
12335: LD_VAR 0 1
12339: PUSH
12340: LD_INT 1
12342: DOUBLE
12343: EQUAL
12344: IFTRUE 12348
12346: GO 12359
12348: POP
// result = Am_base ; 2 :
12349: LD_ADDR_VAR 0 2
12353: PUSH
12354: LD_INT 4
12356: ST_TO_ADDR
12357: GO 12398
12359: LD_INT 2
12361: DOUBLE
12362: EQUAL
12363: IFTRUE 12367
12365: GO 12378
12367: POP
// result = Gensher_base ; 3 :
12368: LD_ADDR_VAR 0 2
12372: PUSH
12373: LD_INT 7
12375: ST_TO_ADDR
12376: GO 12398
12378: LD_INT 3
12380: DOUBLE
12381: EQUAL
12382: IFTRUE 12386
12384: GO 12397
12386: POP
// result = Ru_base ; end ;
12387: LD_ADDR_VAR 0 2
12391: PUSH
12392: LD_INT 3
12394: ST_TO_ADDR
12395: GO 12398
12397: POP
// end ;
12398: LD_VAR 0 2
12402: RET
// function GetBaseSide ( base ) ; begin
12403: LD_INT 0
12405: PPUSH
// case base of 1 :
12406: LD_VAR 0 1
12410: PUSH
12411: LD_INT 1
12413: DOUBLE
12414: EQUAL
12415: IFTRUE 12419
12417: GO 12432
12419: POP
// result = americans ; 2 :
12420: LD_ADDR_VAR 0 2
12424: PUSH
12425: LD_EXP 7
12429: ST_TO_ADDR
12430: GO 12475
12432: LD_INT 2
12434: DOUBLE
12435: EQUAL
12436: IFTRUE 12440
12438: GO 12453
12440: POP
// result = you_alt ; 3 :
12441: LD_ADDR_VAR 0 2
12445: PUSH
12446: LD_EXP 6
12450: ST_TO_ADDR
12451: GO 12475
12453: LD_INT 3
12455: DOUBLE
12456: EQUAL
12457: IFTRUE 12461
12459: GO 12474
12461: POP
// result = russians ; end ;
12462: LD_ADDR_VAR 0 2
12466: PUSH
12467: LD_EXP 4
12471: ST_TO_ADDR
12472: GO 12475
12474: POP
// end ;
12475: LD_VAR 0 2
12479: RET
// function GetBaseNation ( base ) ; begin
12480: LD_INT 0
12482: PPUSH
// case base of 1 :
12483: LD_VAR 0 1
12487: PUSH
12488: LD_INT 1
12490: DOUBLE
12491: EQUAL
12492: IFTRUE 12496
12494: GO 12507
12496: POP
// result = nation_american ; 2 :
12497: LD_ADDR_VAR 0 2
12501: PUSH
12502: LD_INT 1
12504: ST_TO_ADDR
12505: GO 12546
12507: LD_INT 2
12509: DOUBLE
12510: EQUAL
12511: IFTRUE 12515
12513: GO 12526
12515: POP
// result = nation_arabian ; 3 :
12516: LD_ADDR_VAR 0 2
12520: PUSH
12521: LD_INT 2
12523: ST_TO_ADDR
12524: GO 12546
12526: LD_INT 3
12528: DOUBLE
12529: EQUAL
12530: IFTRUE 12534
12532: GO 12545
12534: POP
// result = nation_russian ; end ;
12535: LD_ADDR_VAR 0 2
12539: PUSH
12540: LD_INT 3
12542: ST_TO_ADDR
12543: GO 12546
12545: POP
// end ;
12546: LD_VAR 0 2
12550: RET
// function FindBase ( un ) ; var base ; begin
12551: LD_INT 0
12553: PPUSH
12554: PPUSH
// for base in ai_bases do
12555: LD_ADDR_VAR 0 3
12559: PUSH
12560: LD_EXP 59
12564: PUSH
12565: FOR_IN
12566: IFFALSE 12605
// if IsInArea ( un , GetBaseArea ( base ) ) then
12568: LD_VAR 0 1
12572: PPUSH
12573: LD_VAR 0 3
12577: PPUSH
12578: CALL 12332 0 1
12582: PPUSH
12583: CALL_OW 308
12587: IFFALSE 12603
// begin result = base ;
12589: LD_ADDR_VAR 0 2
12593: PUSH
12594: LD_VAR 0 3
12598: ST_TO_ADDR
// exit ;
12599: POP
12600: POP
12601: GO 12616
// end ;
12603: GO 12565
12605: POP
12606: POP
// result = - 1 ;
12607: LD_ADDR_VAR 0 2
12611: PUSH
12612: LD_INT 1
12614: NEG
12615: ST_TO_ADDR
// end ;
12616: LD_VAR 0 2
12620: RET
// every 0 0$1 do var side , i , temp_list , buildings_list , soldiers_list , temp_unit , base , val , special_units , bunkers , under_attack , j ; var am_snipers , temp_list_2 ;
12621: GO 12623
12623: DISABLE
12624: LD_INT 0
12626: PPUSH
12627: PPUSH
12628: PPUSH
12629: PPUSH
12630: PPUSH
12631: PPUSH
12632: PPUSH
12633: PPUSH
12634: PPUSH
12635: PPUSH
12636: PPUSH
12637: PPUSH
12638: PPUSH
12639: PPUSH
// begin for base in ai_bases do
12640: LD_ADDR_VAR 0 7
12644: PUSH
12645: LD_EXP 59
12649: PUSH
12650: FOR_IN
12651: IFFALSE 14035
// begin side = GetBaseSide ( base ) ;
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_VAR 0 7
12662: PPUSH
12663: CALL 12403 0 1
12667: ST_TO_ADDR
// soldiers_list = ai_soldiers [ base ] ;
12668: LD_ADDR_VAR 0 5
12672: PUSH
12673: LD_EXP 30
12677: PUSH
12678: LD_VAR 0 7
12682: ARRAY
12683: ST_TO_ADDR
// under_attack := BaseUnderAttack ( base , - 1 ) ;
12684: LD_ADDR_VAR 0 11
12688: PUSH
12689: LD_VAR 0 7
12693: PPUSH
12694: LD_INT 1
12696: NEG
12697: PPUSH
12698: CALL 23323 0 2
12702: ST_TO_ADDR
// if base = 1 and under_attack and game_phase > 1 then
12703: LD_VAR 0 7
12707: PUSH
12708: LD_INT 1
12710: EQUAL
12711: PUSH
12712: LD_VAR 0 11
12716: AND
12717: PUSH
12718: LD_EXP 89
12722: PUSH
12723: LD_INT 1
12725: GREATER
12726: AND
12727: IFFALSE 12762
// am_snipers = UnitFilter ( ai_soldiers [ base ] , [ f_class , class_sniper ] ) else
12729: LD_ADDR_VAR 0 13
12733: PUSH
12734: LD_EXP 30
12738: PUSH
12739: LD_VAR 0 7
12743: ARRAY
12744: PPUSH
12745: LD_INT 25
12747: PUSH
12748: LD_INT 5
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PPUSH
12755: CALL_OW 72
12759: ST_TO_ADDR
12760: GO 12769
// am_snipers = [ ] ;
12762: LD_ADDR_VAR 0 13
12766: PUSH
12767: EMPTY
12768: ST_TO_ADDR
// if under_attack then
12769: LD_VAR 0 11
12773: IFFALSE 12830
// begin temp_list = ai_heal_these_humans [ base ] diff ( soldiers_list diff am_snipers ) ;
12775: LD_ADDR_VAR 0 3
12779: PUSH
12780: LD_EXP 44
12784: PUSH
12785: LD_VAR 0 7
12789: ARRAY
12790: PUSH
12791: LD_VAR 0 5
12795: PUSH
12796: LD_VAR 0 13
12800: DIFF
12801: DIFF
12802: ST_TO_ADDR
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12803: LD_ADDR_EXP 44
12807: PUSH
12808: LD_EXP 44
12812: PPUSH
12813: LD_VAR 0 7
12817: PPUSH
12818: LD_VAR 0 3
12822: PPUSH
12823: CALL_OW 1
12827: ST_TO_ADDR
// end else
12828: GO 13044
// begin temp_list = ai_heal_these_humans [ base ] ;
12830: LD_ADDR_VAR 0 3
12834: PUSH
12835: LD_EXP 44
12839: PUSH
12840: LD_VAR 0 7
12844: ARRAY
12845: ST_TO_ADDR
// for i in soldiers_list diff ai_heal_these_humans [ base ] do
12846: LD_ADDR_VAR 0 2
12850: PUSH
12851: LD_VAR 0 5
12855: PUSH
12856: LD_EXP 44
12860: PUSH
12861: LD_VAR 0 7
12865: ARRAY
12866: DIFF
12867: PUSH
12868: FOR_IN
12869: IFFALSE 12904
// if GetLives ( i ) < 800 then
12871: LD_VAR 0 2
12875: PPUSH
12876: CALL_OW 256
12880: PUSH
12881: LD_INT 800
12883: LESS
12884: IFFALSE 12902
// temp_list = temp_list ^ i ;
12886: LD_ADDR_VAR 0 3
12890: PUSH
12891: LD_VAR 0 3
12895: PUSH
12896: LD_VAR 0 2
12900: ADD
12901: ST_TO_ADDR
12902: GO 12868
12904: POP
12905: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
12906: LD_ADDR_EXP 44
12910: PUSH
12911: LD_EXP 44
12915: PPUSH
12916: LD_VAR 0 7
12920: PPUSH
12921: LD_VAR 0 3
12925: PPUSH
12926: CALL_OW 1
12930: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
12931: LD_ADDR_VAR 0 2
12935: PUSH
12936: LD_EXP 44
12940: PUSH
12941: LD_VAR 0 7
12945: ARRAY
12946: PUSH
12947: FOR_IN
12948: IFFALSE 13020
// if i in soldiers_list then
12950: LD_VAR 0 2
12954: PUSH
12955: LD_VAR 0 5
12959: IN
12960: IFFALSE 13018
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
12962: LD_VAR 0 2
12966: PPUSH
12967: CALL_OW 310
12971: PPUSH
12972: CALL_OW 247
12976: PUSH
12977: LD_INT 2
12979: DOUBLE
12980: EQUAL
12981: IFTRUE 12985
12983: GO 12997
12985: POP
// ComExitVehicle ( i ) ; unit_building :
12986: LD_VAR 0 2
12990: PPUSH
12991: CALL_OW 121
12995: GO 13018
12997: LD_INT 3
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13017
13005: POP
// ComExitBuilding ( i ) ; end ;
13006: LD_VAR 0 2
13010: PPUSH
13011: CALL_OW 122
13015: GO 13018
13017: POP
13018: GO 12947
13020: POP
13021: POP
// soldiers_list = soldiers_list diff ai_heal_these_humans [ base ] ;
13022: LD_ADDR_VAR 0 5
13026: PUSH
13027: LD_VAR 0 5
13031: PUSH
13032: LD_EXP 44
13036: PUSH
13037: LD_VAR 0 7
13041: ARRAY
13042: DIFF
13043: ST_TO_ADDR
// end ; temp_list = ai_heal_these_humans [ base ] ;
13044: LD_ADDR_VAR 0 3
13048: PUSH
13049: LD_EXP 44
13053: PUSH
13054: LD_VAR 0 7
13058: ARRAY
13059: ST_TO_ADDR
// for i in am_snipers diff ai_heal_these_humans [ base ] do
13060: LD_ADDR_VAR 0 2
13064: PUSH
13065: LD_VAR 0 13
13069: PUSH
13070: LD_EXP 44
13074: PUSH
13075: LD_VAR 0 7
13079: ARRAY
13080: DIFF
13081: PUSH
13082: FOR_IN
13083: IFFALSE 13118
// if GetLives ( i ) <= 500 then
13085: LD_VAR 0 2
13089: PPUSH
13090: CALL_OW 256
13094: PUSH
13095: LD_INT 500
13097: LESSEQUAL
13098: IFFALSE 13116
// temp_list = temp_list ^ i ;
13100: LD_ADDR_VAR 0 3
13104: PUSH
13105: LD_VAR 0 3
13109: PUSH
13110: LD_VAR 0 2
13114: ADD
13115: ST_TO_ADDR
13116: GO 13082
13118: POP
13119: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
13120: LD_ADDR_EXP 44
13124: PUSH
13125: LD_EXP 44
13129: PPUSH
13130: LD_VAR 0 7
13134: PPUSH
13135: LD_VAR 0 3
13139: PPUSH
13140: CALL_OW 1
13144: ST_TO_ADDR
// am_snipers = am_snipers diff ai_heal_these_humans [ base ] ;
13145: LD_ADDR_VAR 0 13
13149: PUSH
13150: LD_VAR 0 13
13154: PUSH
13155: LD_EXP 44
13159: PUSH
13160: LD_VAR 0 7
13164: ARRAY
13165: DIFF
13166: ST_TO_ADDR
// if soldiers_list = 0 then
13167: LD_VAR 0 5
13171: PUSH
13172: LD_INT 0
13174: EQUAL
13175: IFFALSE 13179
// continue ;
13177: GO 12650
// if am_snipers > 0 then
13179: LD_VAR 0 13
13183: PUSH
13184: LD_INT 0
13186: GREATER
13187: IFFALSE 13304
// begin temp_list_2 = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_human ] , [ f_inarea , am_sniper_defend_area ] ] ) ;
13189: LD_ADDR_VAR 0 14
13193: PUSH
13194: LD_INT 81
13196: PUSH
13197: LD_VAR 0 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 21
13208: PUSH
13209: LD_INT 1
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 95
13218: PUSH
13219: LD_INT 12
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: PPUSH
13231: CALL_OW 69
13235: ST_TO_ADDR
// if temp_list_2 > 0 then
13236: LD_VAR 0 14
13240: PUSH
13241: LD_INT 0
13243: GREATER
13244: IFFALSE 13304
// begin soldiers_list = soldiers_list diff am_snipers ;
13246: LD_ADDR_VAR 0 5
13250: PUSH
13251: LD_VAR 0 5
13255: PUSH
13256: LD_VAR 0 13
13260: DIFF
13261: ST_TO_ADDR
// ComAgressiveMove ( GetHumansOutOfUnits ( am_snipers ) , GetX ( temp_list_2 [ 1 ] ) , GetY ( temp_list_2 [ 1 ] ) ) ;
13262: LD_VAR 0 13
13266: PPUSH
13267: CALL 23218 0 1
13271: PPUSH
13272: LD_VAR 0 14
13276: PUSH
13277: LD_INT 1
13279: ARRAY
13280: PPUSH
13281: CALL_OW 250
13285: PPUSH
13286: LD_VAR 0 14
13290: PUSH
13291: LD_INT 1
13293: ARRAY
13294: PPUSH
13295: CALL_OW 251
13299: PPUSH
13300: CALL_OW 114
// end ; end ; i = false ;
13304: LD_ADDR_VAR 0 2
13308: PUSH
13309: LD_INT 0
13311: ST_TO_ADDR
// if IsOk ( ai_depot [ base ] ) then
13312: LD_EXP 35
13316: PUSH
13317: LD_VAR 0 7
13321: ARRAY
13322: PPUSH
13323: CALL_OW 302
13327: IFFALSE 13367
// if GetEnergy ( GetBase ( ai_depot [ base ] ) ) [ 4 ] > 0 then
13329: LD_EXP 35
13333: PUSH
13334: LD_VAR 0 7
13338: ARRAY
13339: PPUSH
13340: CALL_OW 274
13344: PPUSH
13345: CALL_OW 278
13349: PUSH
13350: LD_INT 4
13352: ARRAY
13353: PUSH
13354: LD_INT 0
13356: GREATER
13357: IFFALSE 13367
// i = true ;
13359: LD_ADDR_VAR 0 2
13363: PUSH
13364: LD_INT 1
13366: ST_TO_ADDR
// if i then
13367: LD_VAR 0 2
13371: IFFALSE 13391
// bunkers = ai_bunkers [ base ] else
13373: LD_ADDR_VAR 0 10
13377: PUSH
13378: LD_EXP 50
13382: PUSH
13383: LD_VAR 0 7
13387: ARRAY
13388: ST_TO_ADDR
13389: GO 13452
// begin bunkers = [ ] ;
13391: LD_ADDR_VAR 0 10
13395: PUSH
13396: EMPTY
13397: ST_TO_ADDR
// for i in ai_bunkers [ base ] do
13398: LD_ADDR_VAR 0 2
13402: PUSH
13403: LD_EXP 50
13407: PUSH
13408: LD_VAR 0 7
13412: ARRAY
13413: PUSH
13414: FOR_IN
13415: IFFALSE 13450
// if GetBType ( i ) = b_breastwork then
13417: LD_VAR 0 2
13421: PPUSH
13422: CALL_OW 266
13426: PUSH
13427: LD_INT 31
13429: EQUAL
13430: IFFALSE 13448
// bunkers = bunkers ^ i ;
13432: LD_ADDR_VAR 0 10
13436: PUSH
13437: LD_VAR 0 10
13441: PUSH
13442: LD_VAR 0 2
13446: ADD
13447: ST_TO_ADDR
13448: GO 13414
13450: POP
13451: POP
// end ; buildings_list = [ ] ;
13452: LD_ADDR_VAR 0 4
13456: PUSH
13457: EMPTY
13458: ST_TO_ADDR
// for i in UnitFilter ( bunkers , [ f_ok ] ) do
13459: LD_ADDR_VAR 0 2
13463: PUSH
13464: LD_VAR 0 10
13468: PPUSH
13469: LD_INT 50
13471: PUSH
13472: EMPTY
13473: LIST
13474: PPUSH
13475: CALL_OW 72
13479: PUSH
13480: FOR_IN
13481: IFFALSE 13544
// begin temp_unit = UnitsInside ( i ) ;
13483: LD_ADDR_VAR 0 6
13487: PUSH
13488: LD_VAR 0 2
13492: PPUSH
13493: CALL_OW 313
13497: ST_TO_ADDR
// if temp_unit = 0 then
13498: LD_VAR 0 6
13502: PUSH
13503: LD_INT 0
13505: EQUAL
13506: IFFALSE 13526
// buildings_list = buildings_list ^ i else
13508: LD_ADDR_VAR 0 4
13512: PUSH
13513: LD_VAR 0 4
13517: PUSH
13518: LD_VAR 0 2
13522: ADD
13523: ST_TO_ADDR
13524: GO 13542
// soldiers_list = soldiers_list diff temp_unit ;
13526: LD_ADDR_VAR 0 5
13530: PUSH
13531: LD_VAR 0 5
13535: PUSH
13536: LD_VAR 0 6
13540: DIFF
13541: ST_TO_ADDR
// end ;
13542: GO 13480
13544: POP
13545: POP
// soldiers_list = soldiers_list diff Gensher ;
13546: LD_ADDR_VAR 0 5
13550: PUSH
13551: LD_VAR 0 5
13555: PUSH
13556: LD_EXP 24
13560: DIFF
13561: ST_TO_ADDR
// if buildings_list > 0 then
13562: LD_VAR 0 4
13566: PUSH
13567: LD_INT 0
13569: GREATER
13570: IFFALSE 13915
// begin if not under_attack then
13572: LD_VAR 0 11
13576: NOT
13577: IFFALSE 13647
// begin temp_list = [ ] ;
13579: LD_ADDR_VAR 0 3
13583: PUSH
13584: EMPTY
13585: ST_TO_ADDR
// for i in soldiers_list do
13586: LD_ADDR_VAR 0 2
13590: PUSH
13591: LD_VAR 0 5
13595: PUSH
13596: FOR_IN
13597: IFFALSE 13625
// temp_list = temp_list ^ GetSkill ( i , skill_combat ) ;
13599: LD_ADDR_VAR 0 3
13603: PUSH
13604: LD_VAR 0 3
13608: PUSH
13609: LD_VAR 0 2
13613: PPUSH
13614: LD_INT 1
13616: PPUSH
13617: CALL_OW 259
13621: ADD
13622: ST_TO_ADDR
13623: GO 13596
13625: POP
13626: POP
// soldiers_list = SortListByListDesc ( soldiers_list , temp_list ) ;
13627: LD_ADDR_VAR 0 5
13631: PUSH
13632: LD_VAR 0 5
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: CALL_OW 77
13646: ST_TO_ADDR
// end ; special_units = UnitFilter ( soldiers_list , [ f_or , [ f_class , class_bazooker ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] ) ;
13647: LD_ADDR_VAR 0 9
13651: PUSH
13652: LD_VAR 0 5
13656: PPUSH
13657: LD_INT 2
13659: PUSH
13660: LD_INT 25
13662: PUSH
13663: LD_INT 9
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 25
13672: PUSH
13673: LD_INT 5
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 25
13682: PUSH
13683: LD_INT 8
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: PPUSH
13696: CALL_OW 72
13700: ST_TO_ADDR
// soldiers_list = soldiers_list diff special_units ;
13701: LD_ADDR_VAR 0 5
13705: PUSH
13706: LD_VAR 0 5
13710: PUSH
13711: LD_VAR 0 9
13715: DIFF
13716: ST_TO_ADDR
// for i = 1 to buildings_list do
13717: LD_ADDR_VAR 0 2
13721: PUSH
13722: DOUBLE
13723: LD_INT 1
13725: DEC
13726: ST_TO_ADDR
13727: LD_VAR 0 4
13731: PUSH
13732: FOR_TO
13733: IFFALSE 13911
// begin if soldiers_list = 0 then
13735: LD_VAR 0 5
13739: PUSH
13740: LD_INT 0
13742: EQUAL
13743: IFFALSE 13774
// begin if special_units = 0 then
13745: LD_VAR 0 9
13749: PUSH
13750: LD_INT 0
13752: EQUAL
13753: IFFALSE 13757
// break ;
13755: GO 13911
// soldiers_list = special_units ;
13757: LD_ADDR_VAR 0 5
13761: PUSH
13762: LD_VAR 0 9
13766: ST_TO_ADDR
// special_units = [ ] ;
13767: LD_ADDR_VAR 0 9
13771: PUSH
13772: EMPTY
13773: ST_TO_ADDR
// end ; if not under_attack then
13774: LD_VAR 0 11
13778: NOT
13779: IFFALSE 13797
// temp_unit = soldiers_list [ 1 ] else
13781: LD_ADDR_VAR 0 6
13785: PUSH
13786: LD_VAR 0 5
13790: PUSH
13791: LD_INT 1
13793: ARRAY
13794: ST_TO_ADDR
13795: GO 13873
// begin temp_list = [ ] ;
13797: LD_ADDR_VAR 0 3
13801: PUSH
13802: EMPTY
13803: ST_TO_ADDR
// for j in soldiers_list do
13804: LD_ADDR_VAR 0 12
13808: PUSH
13809: LD_VAR 0 5
13813: PUSH
13814: FOR_IN
13815: IFFALSE 13851
// temp_list = temp_list ^ GetDistUnits ( j , buildings_list [ i ] ) ;
13817: LD_ADDR_VAR 0 3
13821: PUSH
13822: LD_VAR 0 3
13826: PUSH
13827: LD_VAR 0 12
13831: PPUSH
13832: LD_VAR 0 4
13836: PUSH
13837: LD_VAR 0 2
13841: ARRAY
13842: PPUSH
13843: CALL_OW 296
13847: ADD
13848: ST_TO_ADDR
13849: GO 13814
13851: POP
13852: POP
// temp_unit = WorstFromListByList ( soldiers_list , temp_list ) ;
13853: LD_ADDR_VAR 0 6
13857: PUSH
13858: LD_VAR 0 5
13862: PPUSH
13863: LD_VAR 0 3
13867: PPUSH
13868: CALL_OW 78
13872: ST_TO_ADDR
// end ; ComEnterUnit ( temp_unit , buildings_list [ i ] ) ;
13873: LD_VAR 0 6
13877: PPUSH
13878: LD_VAR 0 4
13882: PUSH
13883: LD_VAR 0 2
13887: ARRAY
13888: PPUSH
13889: CALL_OW 120
// soldiers_list = soldiers_list diff temp_unit ;
13893: LD_ADDR_VAR 0 5
13897: PUSH
13898: LD_VAR 0 5
13902: PUSH
13903: LD_VAR 0 6
13907: DIFF
13908: ST_TO_ADDR
// end ;
13909: GO 13732
13911: POP
13912: POP
// end else
13913: GO 13922
// special_units = [ ] ;
13915: LD_ADDR_VAR 0 9
13919: PUSH
13920: EMPTY
13921: ST_TO_ADDR
// if base = 2 then
13922: LD_VAR 0 7
13926: PUSH
13927: LD_INT 2
13929: EQUAL
13930: IFFALSE 13962
// soldiers_list = soldiers_list ^ UnitFilter ( [ Gensher ] , [ f_alive ] ) ;
13932: LD_ADDR_VAR 0 5
13936: PUSH
13937: LD_VAR 0 5
13941: PUSH
13942: LD_EXP 24
13946: PUSH
13947: EMPTY
13948: LIST
13949: PPUSH
13950: LD_INT 51
13952: PUSH
13953: EMPTY
13954: LIST
13955: PPUSH
13956: CALL_OW 72
13960: ADD
13961: ST_TO_ADDR
// DistributeHumansToBuildings ( base , soldiers_list ^ special_units , UnitFilter ( ai_armouries [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , false , 6 , true , true ) ;
13962: LD_VAR 0 7
13966: PPUSH
13967: LD_VAR 0 5
13971: PUSH
13972: LD_VAR 0 9
13976: ADD
13977: PPUSH
13978: LD_EXP 49
13982: PUSH
13983: LD_VAR 0 7
13987: ARRAY
13988: PPUSH
13989: LD_INT 50
13991: PUSH
13992: EMPTY
13993: LIST
13994: PUSH
13995: LD_INT 3
13997: PUSH
13998: LD_INT 57
14000: PUSH
14001: EMPTY
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PPUSH
14012: CALL_OW 72
14016: PPUSH
14017: LD_INT 0
14019: PPUSH
14020: LD_INT 6
14022: PPUSH
14023: LD_INT 1
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: CALL 15289 0 7
// end ;
14033: GO 12650
14035: POP
14036: POP
// enable ;
14037: ENABLE
// end ;
14038: PPOPN 14
14040: END
// every 0 0$1 + 0 0$0.1 do var side , base , i , temp_list , un1 , temp_list_2 , temp_value , val ;
14041: GO 14043
14043: DISABLE
14044: LD_INT 0
14046: PPUSH
14047: PPUSH
14048: PPUSH
14049: PPUSH
14050: PPUSH
14051: PPUSH
14052: PPUSH
14053: PPUSH
// begin repeat wait ( 0 0$1 ) ;
14054: LD_INT 35
14056: PPUSH
14057: CALL_OW 67
// for base in ai_bases do
14061: LD_ADDR_VAR 0 2
14065: PUSH
14066: LD_EXP 59
14070: PUSH
14071: FOR_IN
14072: IFFALSE 14523
// begin if base in [ 1 , 2 ] then
14074: LD_VAR 0 2
14078: PUSH
14079: LD_INT 1
14081: PUSH
14082: LD_INT 2
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: IN
14089: IFFALSE 14093
// continue ;
14091: GO 14071
// side = GetBaseSide ( base ) ;
14093: LD_ADDR_VAR 0 1
14097: PUSH
14098: LD_VAR 0 2
14102: PPUSH
14103: CALL 12403 0 1
14107: ST_TO_ADDR
// for i in ai_soldiers [ base ] diff ai_heal_these_humans [ base ] do
14108: LD_ADDR_VAR 0 3
14112: PUSH
14113: LD_EXP 30
14117: PUSH
14118: LD_VAR 0 2
14122: ARRAY
14123: PUSH
14124: LD_EXP 44
14128: PUSH
14129: LD_VAR 0 2
14133: ARRAY
14134: DIFF
14135: PUSH
14136: FOR_IN
14137: IFFALSE 14519
// if GetClass ( i ) = class_bazooker then
14139: LD_VAR 0 3
14143: PPUSH
14144: CALL_OW 257
14148: PUSH
14149: LD_INT 9
14151: EQUAL
14152: IFFALSE 14517
// begin temp_list = GetTaskList ( i ) ;
14154: LD_ADDR_VAR 0 4
14158: PUSH
14159: LD_VAR 0 3
14163: PPUSH
14164: CALL_OW 437
14168: ST_TO_ADDR
// if temp_list > 0 then
14169: LD_VAR 0 4
14173: PUSH
14174: LD_INT 0
14176: GREATER
14177: IFFALSE 14217
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
14179: LD_VAR 0 4
14183: PUSH
14184: LD_INT 1
14186: ARRAY
14187: PUSH
14188: LD_INT 1
14190: ARRAY
14191: PUSH
14192: LD_STRING &
14194: EQUAL
14195: PUSH
14196: LD_VAR 0 4
14200: PUSH
14201: LD_INT 1
14203: ARRAY
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: PUSH
14209: LD_STRING %
14211: EQUAL
14212: OR
14213: IFFALSE 14217
// continue ;
14215: GO 14136
// un1 = Attacks ( i ) ;
14217: LD_ADDR_VAR 0 5
14221: PUSH
14222: LD_VAR 0 3
14226: PPUSH
14227: CALL_OW 320
14231: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
14232: LD_VAR 0 5
14236: PUSH
14237: LD_INT 0
14239: GREATER
14240: PUSH
14241: LD_VAR 0 5
14245: PUSH
14246: EMPTY
14247: LIST
14248: PPUSH
14249: CALL 40394 0 1
14253: PUSH
14254: LD_INT 0
14256: GREATER
14257: AND
14258: IFFALSE 14517
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
14260: LD_ADDR_VAR 0 6
14264: PUSH
14265: LD_VAR 0 5
14269: PPUSH
14270: CALL_OW 250
14274: PUSH
14275: LD_VAR 0 5
14279: PPUSH
14280: CALL_OW 251
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: ST_TO_ADDR
// temp_value = false ;
14289: LD_ADDR_VAR 0 7
14293: PUSH
14294: LD_INT 0
14296: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
14297: LD_ADDR_VAR 0 8
14301: PUSH
14302: LD_EXP 73
14306: PUSH
14307: LD_VAR 0 2
14311: ARRAY
14312: PUSH
14313: LD_EXP 74
14317: PUSH
14318: LD_VAR 0 2
14322: ARRAY
14323: ADD
14324: PUSH
14325: FOR_IN
14326: IFFALSE 14398
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
14328: LD_VAR 0 6
14332: PUSH
14333: LD_INT 1
14335: ARRAY
14336: PPUSH
14337: LD_VAR 0 6
14341: PUSH
14342: LD_INT 2
14344: ARRAY
14345: PPUSH
14346: LD_VAR 0 8
14350: PUSH
14351: LD_INT 1
14353: ARRAY
14354: PPUSH
14355: LD_VAR 0 8
14359: PUSH
14360: LD_INT 2
14362: ARRAY
14363: PPUSH
14364: CALL_OW 298
14368: PUSH
14369: LD_EXP 72
14373: PUSH
14374: LD_VAR 0 1
14378: ARRAY
14379: PUSH
14380: LD_INT 2
14382: ARRAY
14383: LESSEQUAL
14384: IFFALSE 14396
// begin temp_value = true ;
14386: LD_ADDR_VAR 0 7
14390: PUSH
14391: LD_INT 1
14393: ST_TO_ADDR
// break ;
14394: GO 14398
// end ;
14396: GO 14325
14398: POP
14399: POP
// if not temp_value then
14400: LD_VAR 0 7
14404: NOT
14405: IFFALSE 14517
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
14407: LD_VAR 0 3
14411: PPUSH
14412: LD_VAR 0 6
14416: PUSH
14417: LD_INT 1
14419: ARRAY
14420: PPUSH
14421: LD_VAR 0 6
14425: PUSH
14426: LD_INT 2
14428: ARRAY
14429: PPUSH
14430: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
14434: LD_ADDR_VAR 0 4
14438: PUSH
14439: LD_EXP 74
14443: PUSH
14444: LD_VAR 0 2
14448: ARRAY
14449: PPUSH
14450: LD_INT 1
14452: PPUSH
14453: LD_VAR 0 6
14457: PUSH
14458: LD_INT 1
14460: ARRAY
14461: PUSH
14462: LD_VAR 0 6
14466: PUSH
14467: LD_INT 2
14469: ARRAY
14470: PUSH
14471: LD_VAR 0 3
14475: PUSH
14476: LD_OWVAR 1
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PPUSH
14487: CALL_OW 2
14491: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
14492: LD_ADDR_EXP 74
14496: PUSH
14497: LD_EXP 74
14501: PPUSH
14502: LD_VAR 0 2
14506: PPUSH
14507: LD_VAR 0 4
14511: PPUSH
14512: CALL_OW 1
14516: ST_TO_ADDR
// end ; end ; end ;
14517: GO 14136
14519: POP
14520: POP
// end ;
14521: GO 14071
14523: POP
14524: POP
// until false ;
14525: LD_INT 0
14527: IFFALSE 14054
// end ;
14529: PPOPN 8
14531: END
// every 0 0$1 + 0 0$0.2 do var base , i , temp_list , un1 , temp_list_2 , temp_value ; var shooting_delay ;
14532: GO 14534
14534: DISABLE
14535: LD_INT 0
14537: PPUSH
14538: PPUSH
14539: PPUSH
14540: PPUSH
14541: PPUSH
14542: PPUSH
14543: PPUSH
// begin shooting_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
14544: LD_ADDR_VAR 0 7
14548: PUSH
14549: LD_INT 0
14551: PUSH
14552: LD_INT 0
14554: PUSH
14555: LD_INT 0
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: ST_TO_ADDR
// if not yashin_alive then
14563: LD_EXP 86
14567: NOT
14568: IFFALSE 14572
// exit ;
14570: GO 15068
// repeat wait ( 0 0$1 ) ;
14572: LD_INT 35
14574: PPUSH
14575: CALL_OW 67
// for base in ai_bases do
14579: LD_ADDR_VAR 0 1
14583: PUSH
14584: LD_EXP 59
14588: PUSH
14589: FOR_IN
14590: IFFALSE 15062
// begin if base in [ 1 , 2 ] then
14592: LD_VAR 0 1
14596: PUSH
14597: LD_INT 1
14599: PUSH
14600: LD_INT 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: IN
14607: IFFALSE 14611
// continue ;
14609: GO 14589
// if shooting_delay [ base ] > 0 0$0 then
14611: LD_VAR 0 7
14615: PUSH
14616: LD_VAR 0 1
14620: ARRAY
14621: PUSH
14622: LD_INT 0
14624: GREATER
14625: IFFALSE 14664
// begin shooting_delay = Replace ( shooting_delay , base , shooting_delay [ base ] - 0 0$1 ) ;
14627: LD_ADDR_VAR 0 7
14631: PUSH
14632: LD_VAR 0 7
14636: PPUSH
14637: LD_VAR 0 1
14641: PPUSH
14642: LD_VAR 0 7
14646: PUSH
14647: LD_VAR 0 1
14651: ARRAY
14652: PUSH
14653: LD_INT 35
14655: MINUS
14656: PPUSH
14657: CALL_OW 1
14661: ST_TO_ADDR
// continue ;
14662: GO 14589
// end ; if Rand ( 1 , 15 ) > 1 then
14664: LD_INT 1
14666: PPUSH
14667: LD_INT 15
14669: PPUSH
14670: CALL_OW 12
14674: PUSH
14675: LD_INT 1
14677: GREATER
14678: IFFALSE 14682
// continue ;
14680: GO 14589
// temp_list = [ ] ;
14682: LD_ADDR_VAR 0 3
14686: PUSH
14687: EMPTY
14688: ST_TO_ADDR
// for i in ai_soldiers [ base ] diff ai_heal_these_humans [ base ] do
14689: LD_ADDR_VAR 0 2
14693: PUSH
14694: LD_EXP 30
14698: PUSH
14699: LD_VAR 0 1
14703: ARRAY
14704: PUSH
14705: LD_EXP 44
14709: PUSH
14710: LD_VAR 0 1
14714: ARRAY
14715: DIFF
14716: PUSH
14717: FOR_IN
14718: IFFALSE 14761
// if IsInUnit ( i ) in ai_armouries [ base ] then
14720: LD_VAR 0 2
14724: PPUSH
14725: CALL_OW 310
14729: PUSH
14730: LD_EXP 49
14734: PUSH
14735: LD_VAR 0 1
14739: ARRAY
14740: IN
14741: IFFALSE 14759
// temp_list = temp_list ^ i ;
14743: LD_ADDR_VAR 0 3
14747: PUSH
14748: LD_VAR 0 3
14752: PUSH
14753: LD_VAR 0 2
14757: ADD
14758: ST_TO_ADDR
14759: GO 14717
14761: POP
14762: POP
// for i in temp_list do
14763: LD_ADDR_VAR 0 2
14767: PUSH
14768: LD_VAR 0 3
14772: PUSH
14773: FOR_IN
14774: IFFALSE 15058
// if GetClass ( i ) = class_bazooker then
14776: LD_VAR 0 2
14780: PPUSH
14781: CALL_OW 257
14785: PUSH
14786: LD_INT 9
14788: EQUAL
14789: IFFALSE 15056
// begin temp_list = GetTaskList ( i ) ;
14791: LD_ADDR_VAR 0 3
14795: PUSH
14796: LD_VAR 0 2
14800: PPUSH
14801: CALL_OW 437
14805: ST_TO_ADDR
// if temp_list > 0 then
14806: LD_VAR 0 3
14810: PUSH
14811: LD_INT 0
14813: GREATER
14814: IFFALSE 14854
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
14816: LD_VAR 0 3
14820: PUSH
14821: LD_INT 1
14823: ARRAY
14824: PUSH
14825: LD_INT 1
14827: ARRAY
14828: PUSH
14829: LD_STRING &
14831: EQUAL
14832: PUSH
14833: LD_VAR 0 3
14837: PUSH
14838: LD_INT 1
14840: ARRAY
14841: PUSH
14842: LD_INT 1
14844: ARRAY
14845: PUSH
14846: LD_STRING %
14848: EQUAL
14849: OR
14850: IFFALSE 14854
// continue ;
14852: GO 14773
// un1 = Attacks ( i ) ;
14854: LD_ADDR_VAR 0 4
14858: PUSH
14859: LD_VAR 0 2
14863: PPUSH
14864: CALL_OW 320
14868: ST_TO_ADDR
// if un1 > 0 and not IsInArea ( un1 , GetBaseArea ( base ) ) then
14869: LD_VAR 0 4
14873: PUSH
14874: LD_INT 0
14876: GREATER
14877: PUSH
14878: LD_VAR 0 4
14882: PPUSH
14883: LD_VAR 0 1
14887: PPUSH
14888: CALL 12332 0 1
14892: PPUSH
14893: CALL_OW 308
14897: NOT
14898: AND
14899: IFFALSE 15056
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
14901: LD_ADDR_VAR 0 5
14905: PUSH
14906: LD_VAR 0 4
14910: PPUSH
14911: CALL_OW 250
14915: PUSH
14916: LD_VAR 0 4
14920: PPUSH
14921: CALL_OW 251
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: ST_TO_ADDR
// temp_value = AI_GetTurnDirection ( GetX ( i ) , GetY ( i ) , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
14930: LD_ADDR_VAR 0 6
14934: PUSH
14935: LD_VAR 0 2
14939: PPUSH
14940: CALL_OW 250
14944: PPUSH
14945: LD_VAR 0 2
14949: PPUSH
14950: CALL_OW 251
14954: PPUSH
14955: LD_VAR 0 5
14959: PUSH
14960: LD_INT 1
14962: ARRAY
14963: PPUSH
14964: LD_VAR 0 5
14968: PUSH
14969: LD_INT 2
14971: ARRAY
14972: PPUSH
14973: CALL 15071 0 4
14977: ST_TO_ADDR
// ComSpaceShift ( i , ShiftX ( temp_list_2 [ 1 ] , temp_value , 1 ) , ShiftY ( temp_list_2 [ 2 ] , temp_value , 1 ) ) ;
14978: LD_VAR 0 2
14982: PPUSH
14983: LD_VAR 0 5
14987: PUSH
14988: LD_INT 1
14990: ARRAY
14991: PPUSH
14992: LD_VAR 0 6
14996: PPUSH
14997: LD_INT 1
14999: PPUSH
15000: CALL_OW 272
15004: PPUSH
15005: LD_VAR 0 5
15009: PUSH
15010: LD_INT 2
15012: ARRAY
15013: PPUSH
15014: LD_VAR 0 6
15018: PPUSH
15019: LD_INT 1
15021: PPUSH
15022: CALL_OW 273
15026: PPUSH
15027: CALL_OW 153
// shooting_delay = Replace ( shooting_delay , base , 0 0$5 ) ;
15031: LD_ADDR_VAR 0 7
15035: PUSH
15036: LD_VAR 0 7
15040: PPUSH
15041: LD_VAR 0 1
15045: PPUSH
15046: LD_INT 175
15048: PPUSH
15049: CALL_OW 1
15053: ST_TO_ADDR
// break ;
15054: GO 15058
// end ; end ;
15056: GO 14773
15058: POP
15059: POP
// end ;
15060: GO 14589
15062: POP
15063: POP
// until false ;
15064: LD_INT 0
15066: IFFALSE 14572
// end ;
15068: PPOPN 7
15070: END
// function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
15071: LD_INT 0
15073: PPUSH
15074: PPUSH
15075: PPUSH
15076: PPUSH
15077: PPUSH
15078: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
15079: LD_VAR 0 1
15083: PPUSH
15084: LD_VAR 0 2
15088: PPUSH
15089: CALL_OW 488
15093: NOT
15094: PUSH
15095: LD_VAR 0 3
15099: PPUSH
15100: LD_VAR 0 4
15104: PPUSH
15105: CALL_OW 488
15109: NOT
15110: OR
15111: IFFALSE 15124
// begin result = - 1 ;
15113: LD_ADDR_VAR 0 5
15117: PUSH
15118: LD_INT 1
15120: NEG
15121: ST_TO_ADDR
// exit ;
15122: GO 15284
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
15124: LD_ADDR_VAR 0 6
15128: PUSH
15129: LD_VAR 0 1
15133: PPUSH
15134: LD_VAR 0 2
15138: PPUSH
15139: LD_VAR 0 3
15143: PPUSH
15144: LD_VAR 0 4
15148: PPUSH
15149: CALL_OW 298
15153: ST_TO_ADDR
// dist_2 = 99999 ;
15154: LD_ADDR_VAR 0 7
15158: PUSH
15159: LD_INT 99999
15161: ST_TO_ADDR
// for b = 0 to 5 do
15162: LD_ADDR_VAR 0 8
15166: PUSH
15167: DOUBLE
15168: LD_INT 0
15170: DEC
15171: ST_TO_ADDR
15172: LD_INT 5
15174: PUSH
15175: FOR_TO
15176: IFFALSE 15272
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
15178: LD_ADDR_VAR 0 9
15182: PUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: LD_VAR 0 8
15192: PPUSH
15193: LD_VAR 0 6
15197: PPUSH
15198: CALL_OW 272
15202: PPUSH
15203: LD_VAR 0 2
15207: PPUSH
15208: LD_VAR 0 8
15212: PPUSH
15213: LD_VAR 0 6
15217: PPUSH
15218: CALL_OW 273
15222: PPUSH
15223: LD_VAR 0 3
15227: PPUSH
15228: LD_VAR 0 4
15232: PPUSH
15233: CALL_OW 298
15237: ST_TO_ADDR
// if temp_dist < dist_2 then
15238: LD_VAR 0 9
15242: PUSH
15243: LD_VAR 0 7
15247: LESS
15248: IFFALSE 15270
// begin dist_2 = temp_dist ;
15250: LD_ADDR_VAR 0 7
15254: PUSH
15255: LD_VAR 0 9
15259: ST_TO_ADDR
// dir = b ;
15260: LD_ADDR_VAR 0 10
15264: PUSH
15265: LD_VAR 0 8
15269: ST_TO_ADDR
// end ; end ;
15270: GO 15175
15272: POP
15273: POP
// result = dir ;
15274: LD_ADDR_VAR 0 5
15278: PUSH
15279: LD_VAR 0 10
15283: ST_TO_ADDR
// end ;
15284: LD_VAR 0 5
15288: RET
// function DistributeHumansToBuildings ( base , human_list , building_list , change_to_this_class , building_capacity , help_building , aggressive_pullback ) ; var i , temp_list , val , temp_unit , area , special_un_count , counter , k , under_attack ; begin
15289: LD_INT 0
15291: PPUSH
15292: PPUSH
15293: PPUSH
15294: PPUSH
15295: PPUSH
15296: PPUSH
15297: PPUSH
15298: PPUSH
15299: PPUSH
15300: PPUSH
// if human_list = 0 then
15301: LD_VAR 0 2
15305: PUSH
15306: LD_INT 0
15308: EQUAL
15309: IFFALSE 15313
// exit ;
15311: GO 16591
// area = GetBaseArea ( base ) ;
15313: LD_ADDR_VAR 0 13
15317: PUSH
15318: LD_VAR 0 1
15322: PPUSH
15323: CALL 12332 0 1
15327: ST_TO_ADDR
// under_attack = BaseUnderAttack ( base , - 1 ) ;
15328: LD_ADDR_VAR 0 17
15332: PUSH
15333: LD_VAR 0 1
15337: PPUSH
15338: LD_INT 1
15340: NEG
15341: PPUSH
15342: CALL 23323 0 2
15346: ST_TO_ADDR
// if not GetClass ( human_list [ 1 ] ) in [ class_engineer , class_apeman_engineer , class_mechanic , class_scientistic ] and building_list > 0 then
15347: LD_VAR 0 2
15351: PUSH
15352: LD_INT 1
15354: ARRAY
15355: PPUSH
15356: CALL_OW 257
15360: PUSH
15361: LD_INT 2
15363: PUSH
15364: LD_INT 16
15366: PUSH
15367: LD_INT 3
15369: PUSH
15370: LD_INT 4
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: IN
15379: NOT
15380: PUSH
15381: LD_VAR 0 3
15385: PUSH
15386: LD_INT 0
15388: GREATER
15389: AND
15390: IFFALSE 15479
// begin val = 0 ;
15392: LD_ADDR_VAR 0 11
15396: PUSH
15397: LD_INT 0
15399: ST_TO_ADDR
// for i in human_list do
15400: LD_ADDR_VAR 0 9
15404: PUSH
15405: LD_VAR 0 2
15409: PUSH
15410: FOR_IN
15411: IFFALSE 15455
// if GetClass ( i ) in [ class_sniper , class_mortar , class_bazooker ] then
15413: LD_VAR 0 9
15417: PPUSH
15418: CALL_OW 257
15422: PUSH
15423: LD_INT 5
15425: PUSH
15426: LD_INT 8
15428: PUSH
15429: LD_INT 9
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: IN
15437: IFFALSE 15453
// val = val + 1 ;
15439: LD_ADDR_VAR 0 11
15443: PUSH
15444: LD_VAR 0 11
15448: PUSH
15449: LD_INT 1
15451: PLUS
15452: ST_TO_ADDR
15453: GO 15410
15455: POP
15456: POP
// special_un_count = val div ( building_list + 0 ) ;
15457: LD_ADDR_VAR 0 14
15461: PUSH
15462: LD_VAR 0 11
15466: PUSH
15467: LD_VAR 0 3
15471: PUSH
15472: LD_INT 0
15474: PLUS
15475: DIV
15476: ST_TO_ADDR
// end else
15477: GO 15487
// special_un_count = 0 ;
15479: LD_ADDR_VAR 0 14
15483: PUSH
15484: LD_INT 0
15486: ST_TO_ADDR
// val = building_list + 0 ;
15487: LD_ADDR_VAR 0 11
15491: PUSH
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 0
15499: PLUS
15500: ST_TO_ADDR
// while val > 0 and human_list > 0 do
15501: LD_VAR 0 11
15505: PUSH
15506: LD_INT 0
15508: GREATER
15509: PUSH
15510: LD_VAR 0 2
15514: PUSH
15515: LD_INT 0
15517: GREATER
15518: AND
15519: IFFALSE 16325
// begin temp_list = [ ] ;
15521: LD_ADDR_VAR 0 10
15525: PUSH
15526: EMPTY
15527: ST_TO_ADDR
// for i in human_list do
15528: LD_ADDR_VAR 0 9
15532: PUSH
15533: LD_VAR 0 2
15537: PUSH
15538: FOR_IN
15539: IFFALSE 15582
// if IsInUnit ( i ) = building_list [ val ] then
15541: LD_VAR 0 9
15545: PPUSH
15546: CALL_OW 310
15550: PUSH
15551: LD_VAR 0 3
15555: PUSH
15556: LD_VAR 0 11
15560: ARRAY
15561: EQUAL
15562: IFFALSE 15580
// temp_list = temp_list ^ i ;
15564: LD_ADDR_VAR 0 10
15568: PUSH
15569: LD_VAR 0 10
15573: PUSH
15574: LD_VAR 0 9
15578: ADD
15579: ST_TO_ADDR
15580: GO 15538
15582: POP
15583: POP
// human_list = temp_list ^ ( human_list diff temp_list ) ;
15584: LD_ADDR_VAR 0 2
15588: PUSH
15589: LD_VAR 0 10
15593: PUSH
15594: LD_VAR 0 2
15598: PUSH
15599: LD_VAR 0 10
15603: DIFF
15604: ADD
15605: ST_TO_ADDR
// counter = 0 ;
15606: LD_ADDR_VAR 0 15
15610: PUSH
15611: LD_INT 0
15613: ST_TO_ADDR
// temp_list = [ ] ;
15614: LD_ADDR_VAR 0 10
15618: PUSH
15619: EMPTY
15620: ST_TO_ADDR
// for i = 1 to human_list div val do
15621: LD_ADDR_VAR 0 9
15625: PUSH
15626: DOUBLE
15627: LD_INT 1
15629: DEC
15630: ST_TO_ADDR
15631: LD_VAR 0 2
15635: PUSH
15636: LD_VAR 0 11
15640: DIV
15641: PUSH
15642: FOR_TO
15643: IFFALSE 16008
// begin if i > building_capacity then
15645: LD_VAR 0 9
15649: PUSH
15650: LD_VAR 0 5
15654: GREATER
15655: IFFALSE 15659
// break ;
15657: GO 16008
// if special_un_count = 0 then
15659: LD_VAR 0 14
15663: PUSH
15664: LD_INT 0
15666: EQUAL
15667: IFFALSE 15709
// begin temp_list = temp_list ^ human_list [ 1 ] ;
15669: LD_ADDR_VAR 0 10
15673: PUSH
15674: LD_VAR 0 10
15678: PUSH
15679: LD_VAR 0 2
15683: PUSH
15684: LD_INT 1
15686: ARRAY
15687: ADD
15688: ST_TO_ADDR
// human_list = Delete ( human_list , 1 ) ;
15689: LD_ADDR_VAR 0 2
15693: PUSH
15694: LD_VAR 0 2
15698: PPUSH
15699: LD_INT 1
15701: PPUSH
15702: CALL_OW 3
15706: ST_TO_ADDR
// end else
15707: GO 16006
// if counter = special_un_count then
15709: LD_VAR 0 15
15713: PUSH
15714: LD_VAR 0 14
15718: EQUAL
15719: IFFALSE 15858
// begin temp_unit = 0 ;
15721: LD_ADDR_VAR 0 12
15725: PUSH
15726: LD_INT 0
15728: ST_TO_ADDR
// for k = 1 to human_list do
15729: LD_ADDR_VAR 0 16
15733: PUSH
15734: DOUBLE
15735: LD_INT 1
15737: DEC
15738: ST_TO_ADDR
15739: LD_VAR 0 2
15743: PUSH
15744: FOR_TO
15745: IFFALSE 15794
// if not GetClass ( human_list [ k ] ) in [ class_sniper , class_mortar , class_bazooker ] then
15747: LD_VAR 0 2
15751: PUSH
15752: LD_VAR 0 16
15756: ARRAY
15757: PPUSH
15758: CALL_OW 257
15762: PUSH
15763: LD_INT 5
15765: PUSH
15766: LD_INT 8
15768: PUSH
15769: LD_INT 9
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: LIST
15776: IN
15777: NOT
15778: IFFALSE 15792
// begin temp_unit = k ;
15780: LD_ADDR_VAR 0 12
15784: PUSH
15785: LD_VAR 0 16
15789: ST_TO_ADDR
// break ;
15790: GO 15794
// end ;
15792: GO 15744
15794: POP
15795: POP
// if temp_unit = 0 then
15796: LD_VAR 0 12
15800: PUSH
15801: LD_INT 0
15803: EQUAL
15804: IFFALSE 15814
// temp_unit = 1 ;
15806: LD_ADDR_VAR 0 12
15810: PUSH
15811: LD_INT 1
15813: ST_TO_ADDR
// temp_list = temp_list ^ human_list [ temp_unit ] ;
15814: LD_ADDR_VAR 0 10
15818: PUSH
15819: LD_VAR 0 10
15823: PUSH
15824: LD_VAR 0 2
15828: PUSH
15829: LD_VAR 0 12
15833: ARRAY
15834: ADD
15835: ST_TO_ADDR
// human_list = Delete ( human_list , temp_unit ) ;
15836: LD_ADDR_VAR 0 2
15840: PUSH
15841: LD_VAR 0 2
15845: PPUSH
15846: LD_VAR 0 12
15850: PPUSH
15851: CALL_OW 3
15855: ST_TO_ADDR
// end else
15856: GO 16006
// begin counter = counter + 1 ;
15858: LD_ADDR_VAR 0 15
15862: PUSH
15863: LD_VAR 0 15
15867: PUSH
15868: LD_INT 1
15870: PLUS
15871: ST_TO_ADDR
// temp_unit = 0 ;
15872: LD_ADDR_VAR 0 12
15876: PUSH
15877: LD_INT 0
15879: ST_TO_ADDR
// for k = 1 to human_list do
15880: LD_ADDR_VAR 0 16
15884: PUSH
15885: DOUBLE
15886: LD_INT 1
15888: DEC
15889: ST_TO_ADDR
15890: LD_VAR 0 2
15894: PUSH
15895: FOR_TO
15896: IFFALSE 15944
// if GetClass ( human_list [ k ] ) in [ class_sniper , class_mortar , class_bazooker ] then
15898: LD_VAR 0 2
15902: PUSH
15903: LD_VAR 0 16
15907: ARRAY
15908: PPUSH
15909: CALL_OW 257
15913: PUSH
15914: LD_INT 5
15916: PUSH
15917: LD_INT 8
15919: PUSH
15920: LD_INT 9
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: IN
15928: IFFALSE 15942
// begin temp_unit = k ;
15930: LD_ADDR_VAR 0 12
15934: PUSH
15935: LD_VAR 0 16
15939: ST_TO_ADDR
// break ;
15940: GO 15944
// end ;
15942: GO 15895
15944: POP
15945: POP
// if temp_unit = 0 then
15946: LD_VAR 0 12
15950: PUSH
15951: LD_INT 0
15953: EQUAL
15954: IFFALSE 15964
// temp_unit = 1 ;
15956: LD_ADDR_VAR 0 12
15960: PUSH
15961: LD_INT 1
15963: ST_TO_ADDR
// temp_list = temp_list ^ human_list [ temp_unit ] ;
15964: LD_ADDR_VAR 0 10
15968: PUSH
15969: LD_VAR 0 10
15973: PUSH
15974: LD_VAR 0 2
15978: PUSH
15979: LD_VAR 0 12
15983: ARRAY
15984: ADD
15985: ST_TO_ADDR
// human_list = Delete ( human_list , temp_unit ) ;
15986: LD_ADDR_VAR 0 2
15990: PUSH
15991: LD_VAR 0 2
15995: PPUSH
15996: LD_VAR 0 12
16000: PPUSH
16001: CALL_OW 3
16005: ST_TO_ADDR
// end ; end ;
16006: GO 15642
16008: POP
16009: POP
// for i in temp_list do
16010: LD_ADDR_VAR 0 9
16014: PUSH
16015: LD_VAR 0 10
16019: PUSH
16020: FOR_IN
16021: IFFALSE 16307
// begin temp_unit = IsInUnit ( i ) ;
16023: LD_ADDR_VAR 0 12
16027: PUSH
16028: LD_VAR 0 9
16032: PPUSH
16033: CALL_OW 310
16037: ST_TO_ADDR
// if temp_unit <> building_list [ val ] then
16038: LD_VAR 0 12
16042: PUSH
16043: LD_VAR 0 3
16047: PUSH
16048: LD_VAR 0 11
16052: ARRAY
16053: NONEQUAL
16054: IFFALSE 16305
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
16056: LD_VAR 0 9
16060: PPUSH
16061: CALL_OW 310
16065: PPUSH
16066: CALL_OW 247
16070: PUSH
16071: LD_INT 2
16073: DOUBLE
16074: EQUAL
16075: IFTRUE 16079
16077: GO 16091
16079: POP
// ComExitVehicle ( i ) ; unit_building :
16080: LD_VAR 0 9
16084: PPUSH
16085: CALL_OW 121
16089: GO 16305
16091: LD_INT 3
16093: DOUBLE
16094: EQUAL
16095: IFTRUE 16099
16097: GO 16111
16099: POP
// ComExitBuilding ( i ) ; else
16100: LD_VAR 0 9
16104: PPUSH
16105: CALL_OW 122
16109: GO 16305
16111: POP
// begin if IsInArea ( i , area ) or not aggressive_pullback then
16112: LD_VAR 0 9
16116: PPUSH
16117: LD_VAR 0 13
16121: PPUSH
16122: CALL_OW 308
16126: PUSH
16127: LD_VAR 0 7
16131: NOT
16132: OR
16133: IFFALSE 16157
// ComEnterUnit ( i , building_list [ val ] ) else
16135: LD_VAR 0 9
16139: PPUSH
16140: LD_VAR 0 3
16144: PUSH
16145: LD_VAR 0 11
16149: ARRAY
16150: PPUSH
16151: CALL_OW 120
16155: GO 16198
// ComAgressiveMove ( i , GetX ( building_list [ val ] ) , GetY ( building_list [ val ] ) ) ;
16157: LD_VAR 0 9
16161: PPUSH
16162: LD_VAR 0 3
16166: PUSH
16167: LD_VAR 0 11
16171: ARRAY
16172: PPUSH
16173: CALL_OW 250
16177: PPUSH
16178: LD_VAR 0 3
16182: PUSH
16183: LD_VAR 0 11
16187: ARRAY
16188: PPUSH
16189: CALL_OW 251
16193: PPUSH
16194: CALL_OW 114
// if change_to_this_class > 0 then
16198: LD_VAR 0 4
16202: PUSH
16203: LD_INT 0
16205: GREATER
16206: IFFALSE 16305
// begin if GetClass ( i ) <> change_to_this_class and GetNation ( i ) <> nation_nature then
16208: LD_VAR 0 9
16212: PPUSH
16213: CALL_OW 257
16217: PUSH
16218: LD_VAR 0 4
16222: NONEQUAL
16223: PUSH
16224: LD_VAR 0 9
16228: PPUSH
16229: CALL_OW 248
16233: PUSH
16234: LD_INT 0
16236: NONEQUAL
16237: AND
16238: IFFALSE 16305
// if not ( change_to_this_class in [ class_sniper , class_mortar , class_bazooker ] and not GetBType ( building_list [ val ] ) in [ b_barracks , b_fort ] ) then
16240: LD_VAR 0 4
16244: PUSH
16245: LD_INT 5
16247: PUSH
16248: LD_INT 8
16250: PUSH
16251: LD_INT 9
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: IN
16259: PUSH
16260: LD_VAR 0 3
16264: PUSH
16265: LD_VAR 0 11
16269: ARRAY
16270: PPUSH
16271: CALL_OW 266
16275: PUSH
16276: LD_INT 5
16278: PUSH
16279: LD_INT 35
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: IN
16286: NOT
16287: AND
16288: NOT
16289: IFFALSE 16305
// AddComChangeProfession ( i , change_to_this_class ) ;
16291: LD_VAR 0 9
16295: PPUSH
16296: LD_VAR 0 4
16300: PPUSH
16301: CALL_OW 183
// end ; end ; end ; end ;
16305: GO 16020
16307: POP
16308: POP
// val = val - 1 ;
16309: LD_ADDR_VAR 0 11
16313: PUSH
16314: LD_VAR 0 11
16318: PUSH
16319: LD_INT 1
16321: MINUS
16322: ST_TO_ADDR
// end ;
16323: GO 15501
// if human_list > 0 then
16325: LD_VAR 0 2
16329: PUSH
16330: LD_INT 0
16332: GREATER
16333: IFFALSE 16591
// if ai_building_under_construction [ base ] > 0 and help_building and not under_attack then
16335: LD_EXP 43
16339: PUSH
16340: LD_VAR 0 1
16344: ARRAY
16345: PUSH
16346: LD_INT 0
16348: GREATER
16349: PUSH
16350: LD_VAR 0 6
16354: AND
16355: PUSH
16356: LD_VAR 0 17
16360: NOT
16361: AND
16362: IFFALSE 16438
// begin for i in GetHumansOutOfUnits ( human_list ) do
16364: LD_ADDR_VAR 0 9
16368: PUSH
16369: LD_VAR 0 2
16373: PPUSH
16374: CALL 23218 0 1
16378: PUSH
16379: FOR_IN
16380: IFFALSE 16434
// SetTaskList ( i , [ [ h , 0 , 0 , ai_building_under_construction [ base ] , 0 , 0 , 0 ] ] ) ;
16382: LD_VAR 0 9
16386: PPUSH
16387: LD_STRING h
16389: PUSH
16390: LD_INT 0
16392: PUSH
16393: LD_INT 0
16395: PUSH
16396: LD_EXP 43
16400: PUSH
16401: LD_VAR 0 1
16405: ARRAY
16406: PUSH
16407: LD_INT 0
16409: PUSH
16410: LD_INT 0
16412: PUSH
16413: LD_INT 0
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: PUSH
16425: EMPTY
16426: LIST
16427: PPUSH
16428: CALL_OW 446
16432: GO 16379
16434: POP
16435: POP
// end else
16436: GO 16591
// for i in GetHumansOutOfUnits ( human_list ) do
16438: LD_ADDR_VAR 0 9
16442: PUSH
16443: LD_VAR 0 2
16447: PPUSH
16448: CALL 23218 0 1
16452: PUSH
16453: FOR_IN
16454: IFFALSE 16589
// if GetDistUnitXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 4 then
16456: LD_VAR 0 9
16460: PPUSH
16461: LD_EXP 42
16465: PUSH
16466: LD_VAR 0 1
16470: ARRAY
16471: PUSH
16472: LD_INT 1
16474: ARRAY
16475: PPUSH
16476: LD_EXP 42
16480: PUSH
16481: LD_VAR 0 1
16485: ARRAY
16486: PUSH
16487: LD_INT 2
16489: ARRAY
16490: PPUSH
16491: CALL_OW 297
16495: PUSH
16496: LD_INT 4
16498: GREATER
16499: IFFALSE 16587
// if aggressive_pullback then
16501: LD_VAR 0 7
16505: IFFALSE 16548
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) else
16507: LD_VAR 0 9
16511: PPUSH
16512: LD_EXP 42
16516: PUSH
16517: LD_VAR 0 1
16521: ARRAY
16522: PUSH
16523: LD_INT 1
16525: ARRAY
16526: PPUSH
16527: LD_EXP 42
16531: PUSH
16532: LD_VAR 0 1
16536: ARRAY
16537: PUSH
16538: LD_INT 2
16540: ARRAY
16541: PPUSH
16542: CALL_OW 114
16546: GO 16587
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
16548: LD_VAR 0 9
16552: PPUSH
16553: LD_EXP 42
16557: PUSH
16558: LD_VAR 0 1
16562: ARRAY
16563: PUSH
16564: LD_INT 1
16566: ARRAY
16567: PPUSH
16568: LD_EXP 42
16572: PUSH
16573: LD_VAR 0 1
16577: ARRAY
16578: PUSH
16579: LD_INT 2
16581: ARRAY
16582: PPUSH
16583: CALL_OW 111
16587: GO 16453
16589: POP
16590: POP
// end ;
16591: LD_VAR 0 8
16595: RET
// every 0 0$1 do var side , i , engineers_list , temp_list , buildings_list , temp_unit , away_dist , temp_list_2 , base , apemen_engineers_list ; var humans_list , crane_usable , b_value , k ; var crane_being_repaired ;
16596: GO 16598
16598: DISABLE
16599: LD_INT 0
16601: PPUSH
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
16606: PPUSH
16607: PPUSH
16608: PPUSH
16609: PPUSH
16610: PPUSH
16611: PPUSH
16612: PPUSH
16613: PPUSH
16614: PPUSH
16615: PPUSH
// begin crane_being_repaired = false ;
16616: LD_ADDR_VAR 0 15
16620: PUSH
16621: LD_INT 0
16623: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16624: LD_INT 35
16626: PPUSH
16627: CALL_OW 67
// for base in ai_bases do
16631: LD_ADDR_VAR 0 9
16635: PUSH
16636: LD_EXP 59
16640: PUSH
16641: FOR_IN
16642: IFFALSE 21876
// begin side = GetBaseSide ( base ) ;
16644: LD_ADDR_VAR 0 1
16648: PUSH
16649: LD_VAR 0 9
16653: PPUSH
16654: CALL 12403 0 1
16658: ST_TO_ADDR
// engineers_list = ai_engineers [ base ] diff ai_heal_these_humans [ base ] ;
16659: LD_ADDR_VAR 0 3
16663: PUSH
16664: LD_EXP 31
16668: PUSH
16669: LD_VAR 0 9
16673: ARRAY
16674: PUSH
16675: LD_EXP 44
16679: PUSH
16680: LD_VAR 0 9
16684: ARRAY
16685: DIFF
16686: ST_TO_ADDR
// apemen_engineers_list = ai_apemen_engineers [ base ] diff ai_heal_these_humans [ base ] ;
16687: LD_ADDR_VAR 0 10
16691: PUSH
16692: LD_EXP 63
16696: PUSH
16697: LD_VAR 0 9
16701: ARRAY
16702: PUSH
16703: LD_EXP 44
16707: PUSH
16708: LD_VAR 0 9
16712: ARRAY
16713: DIFF
16714: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
16715: LD_ADDR_VAR 0 4
16719: PUSH
16720: LD_EXP 44
16724: PUSH
16725: LD_VAR 0 9
16729: ARRAY
16730: ST_TO_ADDR
// humans_list = engineers_list ^ apemen_engineers_list ;
16731: LD_ADDR_VAR 0 11
16735: PUSH
16736: LD_VAR 0 3
16740: PUSH
16741: LD_VAR 0 10
16745: ADD
16746: ST_TO_ADDR
// i = 1 ;
16747: LD_ADDR_VAR 0 2
16751: PUSH
16752: LD_INT 1
16754: ST_TO_ADDR
// while i <= humans_list do
16755: LD_VAR 0 2
16759: PUSH
16760: LD_VAR 0 11
16764: LESSEQUAL
16765: IFFALSE 16904
// begin if GetLives ( humans_list [ i ] ) <= 700 then
16767: LD_VAR 0 11
16771: PUSH
16772: LD_VAR 0 2
16776: ARRAY
16777: PPUSH
16778: CALL_OW 256
16782: PUSH
16783: LD_INT 700
16785: LESSEQUAL
16786: IFFALSE 16888
// begin temp_list = temp_list ^ humans_list [ i ] ;
16788: LD_ADDR_VAR 0 4
16792: PUSH
16793: LD_VAR 0 4
16797: PUSH
16798: LD_VAR 0 11
16802: PUSH
16803: LD_VAR 0 2
16807: ARRAY
16808: ADD
16809: ST_TO_ADDR
// engineers_list = engineers_list diff humans_list [ i ] ;
16810: LD_ADDR_VAR 0 3
16814: PUSH
16815: LD_VAR 0 3
16819: PUSH
16820: LD_VAR 0 11
16824: PUSH
16825: LD_VAR 0 2
16829: ARRAY
16830: DIFF
16831: ST_TO_ADDR
// apemen_engineers_list = apemen_engineers_list diff humans_list [ i ] ;
16832: LD_ADDR_VAR 0 10
16836: PUSH
16837: LD_VAR 0 10
16841: PUSH
16842: LD_VAR 0 11
16846: PUSH
16847: LD_VAR 0 2
16851: ARRAY
16852: DIFF
16853: ST_TO_ADDR
// humans_list = Delete ( humans_list , i ) ;
16854: LD_ADDR_VAR 0 11
16858: PUSH
16859: LD_VAR 0 11
16863: PPUSH
16864: LD_VAR 0 2
16868: PPUSH
16869: CALL_OW 3
16873: ST_TO_ADDR
// i = i - 1 ;
16874: LD_ADDR_VAR 0 2
16878: PUSH
16879: LD_VAR 0 2
16883: PUSH
16884: LD_INT 1
16886: MINUS
16887: ST_TO_ADDR
// end ; i = i + 1 ;
16888: LD_ADDR_VAR 0 2
16892: PUSH
16893: LD_VAR 0 2
16897: PUSH
16898: LD_INT 1
16900: PLUS
16901: ST_TO_ADDR
// end ;
16902: GO 16755
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
16904: LD_ADDR_EXP 44
16908: PUSH
16909: LD_EXP 44
16913: PPUSH
16914: LD_VAR 0 9
16918: PPUSH
16919: LD_VAR 0 4
16923: PPUSH
16924: CALL_OW 1
16928: ST_TO_ADDR
// crane_usable = false ;
16929: LD_ADDR_VAR 0 12
16933: PUSH
16934: LD_INT 0
16936: ST_TO_ADDR
// if ai_crane [ base ] > 0 then
16937: LD_EXP 71
16941: PUSH
16942: LD_VAR 0 9
16946: ARRAY
16947: PUSH
16948: LD_INT 0
16950: GREATER
16951: IFFALSE 17123
// if GetLives ( ai_crane [ base ] ) <= 500 or ( crane_being_repaired and GetLives ( ai_crane [ base ] ) < 1000 ) then
16953: LD_EXP 71
16957: PUSH
16958: LD_VAR 0 9
16962: ARRAY
16963: PPUSH
16964: CALL_OW 256
16968: PUSH
16969: LD_INT 500
16971: LESSEQUAL
16972: PUSH
16973: LD_VAR 0 15
16977: PUSH
16978: LD_EXP 71
16982: PUSH
16983: LD_VAR 0 9
16987: ARRAY
16988: PPUSH
16989: CALL_OW 256
16993: PUSH
16994: LD_INT 1000
16996: LESS
16997: AND
16998: OR
16999: IFFALSE 17107
// begin crane_being_repaired = true ;
17001: LD_ADDR_VAR 0 15
17005: PUSH
17006: LD_INT 1
17008: ST_TO_ADDR
// if GetDistUnitXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 6 then
17009: LD_EXP 71
17013: PUSH
17014: LD_VAR 0 9
17018: ARRAY
17019: PPUSH
17020: LD_EXP 42
17024: PUSH
17025: LD_VAR 0 9
17029: ARRAY
17030: PUSH
17031: LD_INT 1
17033: ARRAY
17034: PPUSH
17035: LD_EXP 42
17039: PUSH
17040: LD_VAR 0 9
17044: ARRAY
17045: PUSH
17046: LD_INT 2
17048: ARRAY
17049: PPUSH
17050: CALL_OW 297
17054: PUSH
17055: LD_INT 6
17057: GREATER
17058: IFFALSE 17105
// ComMoveXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
17060: LD_EXP 71
17064: PUSH
17065: LD_VAR 0 9
17069: ARRAY
17070: PPUSH
17071: LD_EXP 42
17075: PUSH
17076: LD_VAR 0 9
17080: ARRAY
17081: PUSH
17082: LD_INT 1
17084: ARRAY
17085: PPUSH
17086: LD_EXP 42
17090: PUSH
17091: LD_VAR 0 9
17095: ARRAY
17096: PUSH
17097: LD_INT 2
17099: ARRAY
17100: PPUSH
17101: CALL_OW 111
// end else
17105: GO 17123
// begin crane_usable = true ;
17107: LD_ADDR_VAR 0 12
17111: PUSH
17112: LD_INT 1
17114: ST_TO_ADDR
// crane_being_repaired = false ;
17115: LD_ADDR_VAR 0 15
17119: PUSH
17120: LD_INT 0
17122: ST_TO_ADDR
// end ; if engineers_list = 0 and apemen_engineers_list = 0 and not crane_usable then
17123: LD_VAR 0 3
17127: PUSH
17128: LD_INT 0
17130: EQUAL
17131: PUSH
17132: LD_VAR 0 10
17136: PUSH
17137: LD_INT 0
17139: EQUAL
17140: AND
17141: PUSH
17142: LD_VAR 0 12
17146: NOT
17147: AND
17148: IFFALSE 17152
// continue ;
17150: GO 16641
// temp_list_2 = UnitFilter ( engineers_list , [ f_class , class_engineer ] ) ;
17152: LD_ADDR_VAR 0 8
17156: PUSH
17157: LD_VAR 0 3
17161: PPUSH
17162: LD_INT 25
17164: PUSH
17165: LD_INT 2
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 72
17176: ST_TO_ADDR
// if ai_captured_buildings [ base ] > 0 and temp_list_2 > 0 then
17177: LD_EXP 79
17181: PUSH
17182: LD_VAR 0 9
17186: ARRAY
17187: PUSH
17188: LD_INT 0
17190: GREATER
17191: PUSH
17192: LD_VAR 0 8
17196: PUSH
17197: LD_INT 0
17199: GREATER
17200: AND
17201: IFFALSE 17472
// begin temp_list = [ ] ;
17203: LD_ADDR_VAR 0 4
17207: PUSH
17208: EMPTY
17209: ST_TO_ADDR
// for i in ai_captured_buildings [ base ] do
17210: LD_ADDR_VAR 0 2
17214: PUSH
17215: LD_EXP 79
17219: PUSH
17220: LD_VAR 0 9
17224: ARRAY
17225: PUSH
17226: FOR_IN
17227: IFFALSE 17283
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
17229: LD_VAR 0 2
17233: PPUSH
17234: CALL_OW 266
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: LD_INT 1
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: IN
17249: IFFALSE 17267
// temp_list = temp_list ^ 1 else
17251: LD_ADDR_VAR 0 4
17255: PUSH
17256: LD_VAR 0 4
17260: PUSH
17261: LD_INT 1
17263: ADD
17264: ST_TO_ADDR
17265: GO 17281
// temp_list = temp_list ^ 0 ;
17267: LD_ADDR_VAR 0 4
17271: PUSH
17272: LD_VAR 0 4
17276: PUSH
17277: LD_INT 0
17279: ADD
17280: ST_TO_ADDR
17281: GO 17226
17283: POP
17284: POP
// temp_list = SortListByListDesc ( ai_captured_buildings [ base ] , temp_list ) ;
17285: LD_ADDR_VAR 0 4
17289: PUSH
17290: LD_EXP 79
17294: PUSH
17295: LD_VAR 0 9
17299: ARRAY
17300: PPUSH
17301: LD_VAR 0 4
17305: PPUSH
17306: CALL_OW 77
17310: ST_TO_ADDR
// temp_list_2 = GetHumansOutOfUnits ( temp_list_2 ) ;
17311: LD_ADDR_VAR 0 8
17315: PUSH
17316: LD_VAR 0 8
17320: PPUSH
17321: CALL 23218 0 1
17325: ST_TO_ADDR
// if temp_list_2 > 0 then
17326: LD_VAR 0 8
17330: PUSH
17331: LD_INT 0
17333: GREATER
17334: IFFALSE 17450
// begin temp_list_2 = SortListByListDesc ( temp_list_2 , temp_list_2 ) ;
17336: LD_ADDR_VAR 0 8
17340: PUSH
17341: LD_VAR 0 8
17345: PPUSH
17346: LD_VAR 0 8
17350: PPUSH
17351: CALL_OW 77
17355: ST_TO_ADDR
// SetTaskList ( temp_list_2 [ 1 ] , [ [ e , GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) , temp_list [ 1 ] , 0 , 0 , 0 ] ] ) ;
17356: LD_VAR 0 8
17360: PUSH
17361: LD_INT 1
17363: ARRAY
17364: PPUSH
17365: LD_STRING e
17367: PUSH
17368: LD_VAR 0 4
17372: PUSH
17373: LD_INT 1
17375: ARRAY
17376: PPUSH
17377: CALL_OW 250
17381: PUSH
17382: LD_VAR 0 4
17386: PUSH
17387: LD_INT 1
17389: ARRAY
17390: PPUSH
17391: CALL_OW 251
17395: PUSH
17396: LD_VAR 0 4
17400: PUSH
17401: LD_INT 1
17403: ARRAY
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: LD_INT 0
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: PPUSH
17426: CALL_OW 446
// engineers_list = engineers_list diff temp_list_2 [ 1 ] ;
17430: LD_ADDR_VAR 0 3
17434: PUSH
17435: LD_VAR 0 3
17439: PUSH
17440: LD_VAR 0 8
17444: PUSH
17445: LD_INT 1
17447: ARRAY
17448: DIFF
17449: ST_TO_ADDR
// end ; if engineers_list = 0 and apemen_engineers_list = 0 then
17450: LD_VAR 0 3
17454: PUSH
17455: LD_INT 0
17457: EQUAL
17458: PUSH
17459: LD_VAR 0 10
17463: PUSH
17464: LD_INT 0
17466: EQUAL
17467: AND
17468: IFFALSE 17472
// continue ;
17470: GO 16641
// end ; i = 1 ;
17472: LD_ADDR_VAR 0 2
17476: PUSH
17477: LD_INT 1
17479: ST_TO_ADDR
// buildings_list = [ ] ;
17480: LD_ADDR_VAR 0 5
17484: PUSH
17485: EMPTY
17486: ST_TO_ADDR
// repeat case i of 1 :
17487: LD_VAR 0 2
17491: PUSH
17492: LD_INT 1
17494: DOUBLE
17495: EQUAL
17496: IFTRUE 17500
17498: GO 17537
17500: POP
// buildings_list = UnitFilter ( ai_all_buildings [ base ] , [ f_not , [ f_ok ] ] ) ; 2 :
17501: LD_ADDR_VAR 0 5
17505: PUSH
17506: LD_EXP 45
17510: PUSH
17511: LD_VAR 0 9
17515: ARRAY
17516: PPUSH
17517: LD_INT 3
17519: PUSH
17520: LD_INT 50
17522: PUSH
17523: EMPTY
17524: LIST
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PPUSH
17530: CALL_OW 72
17534: ST_TO_ADDR
17535: GO 17587
17537: LD_INT 2
17539: DOUBLE
17540: EQUAL
17541: IFTRUE 17545
17543: GO 17586
17545: POP
// buildings_list = UnitFilter ( ai_all_buildings [ base ] , [ f_not , [ f_lives , 1000 ] ] ) ; end ;
17546: LD_ADDR_VAR 0 5
17550: PUSH
17551: LD_EXP 45
17555: PUSH
17556: LD_VAR 0 9
17560: ARRAY
17561: PPUSH
17562: LD_INT 3
17564: PUSH
17565: LD_INT 24
17567: PUSH
17568: LD_INT 1000
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PPUSH
17579: CALL_OW 72
17583: ST_TO_ADDR
17584: GO 17587
17586: POP
// i = i + 1 ;
17587: LD_ADDR_VAR 0 2
17591: PUSH
17592: LD_VAR 0 2
17596: PUSH
17597: LD_INT 1
17599: PLUS
17600: ST_TO_ADDR
// until buildings_list > 0 or i > 2 ;
17601: LD_VAR 0 5
17605: PUSH
17606: LD_INT 0
17608: GREATER
17609: PUSH
17610: LD_VAR 0 2
17614: PUSH
17615: LD_INT 2
17617: GREATER
17618: OR
17619: IFFALSE 17487
// if buildings_list > 0 then
17621: LD_VAR 0 5
17625: PUSH
17626: LD_INT 0
17628: GREATER
17629: IFFALSE 17852
// begin humans_list = engineers_list ^ apemen_engineers_list ;
17631: LD_ADDR_VAR 0 11
17635: PUSH
17636: LD_VAR 0 3
17640: PUSH
17641: LD_VAR 0 10
17645: ADD
17646: ST_TO_ADDR
// humans_list = GetHumansOutOfUnits ( humans_list ) ;
17647: LD_ADDR_VAR 0 11
17651: PUSH
17652: LD_VAR 0 11
17656: PPUSH
17657: CALL 23218 0 1
17661: ST_TO_ADDR
// if crane_usable then
17662: LD_VAR 0 12
17666: IFFALSE 17698
// begin humans_list = humans_list ^ ai_crane [ base ] ;
17668: LD_ADDR_VAR 0 11
17672: PUSH
17673: LD_VAR 0 11
17677: PUSH
17678: LD_EXP 71
17682: PUSH
17683: LD_VAR 0 9
17687: ARRAY
17688: ADD
17689: ST_TO_ADDR
// crane_usable = false ;
17690: LD_ADDR_VAR 0 12
17694: PUSH
17695: LD_INT 0
17697: ST_TO_ADDR
// end ; repeat i = 1 ;
17698: LD_ADDR_VAR 0 2
17702: PUSH
17703: LD_INT 1
17705: ST_TO_ADDR
// while i <= buildings_list do
17706: LD_VAR 0 2
17710: PUSH
17711: LD_VAR 0 5
17715: LESSEQUAL
17716: IFFALSE 17840
// begin if humans_list = 0 then
17718: LD_VAR 0 11
17722: PUSH
17723: LD_INT 0
17725: EQUAL
17726: IFFALSE 17730
// break ;
17728: GO 17840
// temp_unit = NearestUnitToUnit ( humans_list , buildings_list [ i ] ) ;
17730: LD_ADDR_VAR 0 6
17734: PUSH
17735: LD_VAR 0 11
17739: PPUSH
17740: LD_VAR 0 5
17744: PUSH
17745: LD_VAR 0 2
17749: ARRAY
17750: PPUSH
17751: CALL_OW 74
17755: ST_TO_ADDR
// ComRepairBuilding ( temp_unit , buildings_list [ i ] ) ;
17756: LD_VAR 0 6
17760: PPUSH
17761: LD_VAR 0 5
17765: PUSH
17766: LD_VAR 0 2
17770: ARRAY
17771: PPUSH
17772: CALL_OW 130
// humans_list = humans_list diff temp_unit ;
17776: LD_ADDR_VAR 0 11
17780: PUSH
17781: LD_VAR 0 11
17785: PUSH
17786: LD_VAR 0 6
17790: DIFF
17791: ST_TO_ADDR
// engineers_list = engineers_list diff temp_unit ;
17792: LD_ADDR_VAR 0 3
17796: PUSH
17797: LD_VAR 0 3
17801: PUSH
17802: LD_VAR 0 6
17806: DIFF
17807: ST_TO_ADDR
// apemen_engineers_list = apemen_engineers_list diff temp_unit ;
17808: LD_ADDR_VAR 0 10
17812: PUSH
17813: LD_VAR 0 10
17817: PUSH
17818: LD_VAR 0 6
17822: DIFF
17823: ST_TO_ADDR
// i = i + 1 ;
17824: LD_ADDR_VAR 0 2
17828: PUSH
17829: LD_VAR 0 2
17833: PUSH
17834: LD_INT 1
17836: PLUS
17837: ST_TO_ADDR
// end ;
17838: GO 17706
// until humans_list = 0 ;
17840: LD_VAR 0 11
17844: PUSH
17845: LD_INT 0
17847: EQUAL
17848: IFFALSE 17698
// continue ;
17850: GO 16641
// end ; if not BaseUnderAttack ( base , - 1 ) then
17852: LD_VAR 0 9
17856: PPUSH
17857: LD_INT 1
17859: NEG
17860: PPUSH
17861: CALL 23323 0 2
17865: NOT
17866: IFFALSE 21700
// begin if ai_building_under_construction [ base ] > 0 then
17868: LD_EXP 43
17872: PUSH
17873: LD_VAR 0 9
17877: ARRAY
17878: PUSH
17879: LD_INT 0
17881: GREATER
17882: IFFALSE 18033
// if BuildingStatus ( ai_building_under_construction [ base ] ) = bs_build then
17884: LD_EXP 43
17888: PUSH
17889: LD_VAR 0 9
17893: ARRAY
17894: PPUSH
17895: CALL_OW 461
17899: PUSH
17900: LD_INT 1
17902: EQUAL
17903: IFFALSE 17995
// begin temp_list_2 = GetHumansOutOfUnits ( engineers_list ^ apemen_engineers_list ) ;
17905: LD_ADDR_VAR 0 8
17909: PUSH
17910: LD_VAR 0 3
17914: PUSH
17915: LD_VAR 0 10
17919: ADD
17920: PPUSH
17921: CALL 23218 0 1
17925: ST_TO_ADDR
// if crane_usable then
17926: LD_VAR 0 12
17930: IFFALSE 17954
// temp_list_2 = temp_list_2 ^ ai_crane [ base ] ;
17932: LD_ADDR_VAR 0 8
17936: PUSH
17937: LD_VAR 0 8
17941: PUSH
17942: LD_EXP 71
17946: PUSH
17947: LD_VAR 0 9
17951: ARRAY
17952: ADD
17953: ST_TO_ADDR
// for i in temp_list_2 do
17954: LD_ADDR_VAR 0 2
17958: PUSH
17959: LD_VAR 0 8
17963: PUSH
17964: FOR_IN
17965: IFFALSE 17989
// ComRepairBuilding ( i , ai_building_under_construction [ base ] ) ;
17967: LD_VAR 0 2
17971: PPUSH
17972: LD_EXP 43
17976: PUSH
17977: LD_VAR 0 9
17981: ARRAY
17982: PPUSH
17983: CALL_OW 130
17987: GO 17964
17989: POP
17990: POP
// continue ;
17991: GO 16641
// end else
17993: GO 18033
// begin ComCancel ( ai_building_under_construction [ base ] ) ;
17995: LD_EXP 43
17999: PUSH
18000: LD_VAR 0 9
18004: ARRAY
18005: PPUSH
18006: CALL_OW 127
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
18010: LD_ADDR_EXP 43
18014: PUSH
18015: LD_EXP 43
18019: PPUSH
18020: LD_VAR 0 9
18024: PPUSH
18025: LD_INT 0
18027: PPUSH
18028: CALL_OW 1
18032: ST_TO_ADDR
// end ; if ai_all_buildings [ base ] - ai_excepted_buildings [ base ] < ai_buildings_locations [ base ] or ai_upcoming_building_data [ base ] > 0 then
18033: LD_EXP 45
18037: PUSH
18038: LD_VAR 0 9
18042: ARRAY
18043: PUSH
18044: LD_EXP 69
18048: PUSH
18049: LD_VAR 0 9
18053: ARRAY
18054: MINUS
18055: PUSH
18056: LD_EXP 39
18060: PUSH
18061: LD_VAR 0 9
18065: ARRAY
18066: LESS
18067: PUSH
18068: LD_EXP 47
18072: PUSH
18073: LD_VAR 0 9
18077: ARRAY
18078: PUSH
18079: LD_INT 0
18081: GREATER
18082: OR
18083: IFFALSE 21586
// begin if ai_upcoming_building_data [ base ] = 0 then
18085: LD_EXP 47
18089: PUSH
18090: LD_VAR 0 9
18094: ARRAY
18095: PUSH
18096: LD_INT 0
18098: EQUAL
18099: IFFALSE 18508
// begin temp_list = [ ] ;
18101: LD_ADDR_VAR 0 4
18105: PUSH
18106: EMPTY
18107: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
18108: LD_ADDR_VAR 0 2
18112: PUSH
18113: LD_EXP 39
18117: PUSH
18118: LD_VAR 0 9
18122: ARRAY
18123: PUSH
18124: FOR_IN
18125: IFFALSE 18175
// if GetBType ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) = - 1 then
18127: LD_VAR 0 2
18131: PUSH
18132: LD_INT 1
18134: ARRAY
18135: PPUSH
18136: LD_VAR 0 2
18140: PUSH
18141: LD_INT 2
18143: ARRAY
18144: PPUSH
18145: CALL_OW 428
18149: PPUSH
18150: CALL_OW 266
18154: PUSH
18155: LD_INT 1
18157: NEG
18158: EQUAL
18159: IFFALSE 18173
// begin temp_list = i ;
18161: LD_ADDR_VAR 0 4
18165: PUSH
18166: LD_VAR 0 2
18170: ST_TO_ADDR
// break ;
18171: GO 18175
// end ;
18173: GO 18124
18175: POP
18176: POP
// if temp_list > 0 then
18177: LD_VAR 0 4
18181: PUSH
18182: LD_INT 0
18184: GREATER
18185: IFFALSE 18508
// begin if temp_list [ 4 ] = b_bunker and GetBaseNation ( base ) in [ nation_american , nation_russian ] then
18187: LD_VAR 0 4
18191: PUSH
18192: LD_INT 4
18194: ARRAY
18195: PUSH
18196: LD_INT 32
18198: EQUAL
18199: PUSH
18200: LD_VAR 0 9
18204: PPUSH
18205: CALL 12480 0 1
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: LD_INT 3
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: IN
18220: AND
18221: IFFALSE 18483
// begin k = 0 ;
18223: LD_ADDR_VAR 0 14
18227: PUSH
18228: LD_INT 0
18230: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
18231: LD_ADDR_VAR 0 2
18235: PUSH
18236: LD_EXP 39
18240: PUSH
18241: LD_VAR 0 9
18245: ARRAY
18246: PUSH
18247: FOR_IN
18248: IFFALSE 18299
// if i [ 4 ] in [ b_breastwork , b_bunker , b_armoury , b_barracks , b_fort ] then
18250: LD_VAR 0 2
18254: PUSH
18255: LD_INT 4
18257: ARRAY
18258: PUSH
18259: LD_INT 31
18261: PUSH
18262: LD_INT 32
18264: PUSH
18265: LD_INT 4
18267: PUSH
18268: LD_INT 5
18270: PUSH
18271: LD_INT 35
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: IN
18281: IFFALSE 18297
// k = k + 1 ;
18283: LD_ADDR_VAR 0 14
18287: PUSH
18288: LD_VAR 0 14
18292: PUSH
18293: LD_INT 1
18295: PLUS
18296: ST_TO_ADDR
18297: GO 18247
18299: POP
18300: POP
// if k > ai_soldiers [ base ] then
18301: LD_VAR 0 14
18305: PUSH
18306: LD_EXP 30
18310: PUSH
18311: LD_VAR 0 9
18315: ARRAY
18316: GREATER
18317: IFFALSE 18483
// begin for i = 1 to ai_buildings_locations [ base ] do
18319: LD_ADDR_VAR 0 2
18323: PUSH
18324: DOUBLE
18325: LD_INT 1
18327: DEC
18328: ST_TO_ADDR
18329: LD_EXP 39
18333: PUSH
18334: LD_VAR 0 9
18338: ARRAY
18339: PUSH
18340: FOR_TO
18341: IFFALSE 18460
// if ai_buildings_locations [ base ] [ i ] = temp_list then
18343: LD_EXP 39
18347: PUSH
18348: LD_VAR 0 9
18352: ARRAY
18353: PUSH
18354: LD_VAR 0 2
18358: ARRAY
18359: PUSH
18360: LD_VAR 0 4
18364: EQUAL
18365: IFFALSE 18458
// begin temp_list_2 = Replace ( ai_buildings_locations [ base ] [ i ] , 4 , b_turret ) ;
18367: LD_ADDR_VAR 0 8
18371: PUSH
18372: LD_EXP 39
18376: PUSH
18377: LD_VAR 0 9
18381: ARRAY
18382: PUSH
18383: LD_VAR 0 2
18387: ARRAY
18388: PPUSH
18389: LD_INT 4
18391: PPUSH
18392: LD_INT 33
18394: PPUSH
18395: CALL_OW 1
18399: ST_TO_ADDR
// temp_list_2 = Replace ( ai_buildings_locations [ base ] , i , temp_list_2 ) ;
18400: LD_ADDR_VAR 0 8
18404: PUSH
18405: LD_EXP 39
18409: PUSH
18410: LD_VAR 0 9
18414: ARRAY
18415: PPUSH
18416: LD_VAR 0 2
18420: PPUSH
18421: LD_VAR 0 8
18425: PPUSH
18426: CALL_OW 1
18430: ST_TO_ADDR
// ai_buildings_locations = Replace ( ai_buildings_locations , base , temp_list_2 ) ;
18431: LD_ADDR_EXP 39
18435: PUSH
18436: LD_EXP 39
18440: PPUSH
18441: LD_VAR 0 9
18445: PPUSH
18446: LD_VAR 0 8
18450: PPUSH
18451: CALL_OW 1
18455: ST_TO_ADDR
// break ;
18456: GO 18460
// end ;
18458: GO 18340
18460: POP
18461: POP
// temp_list = Replace ( temp_list , 4 , b_turret ) ;
18462: LD_ADDR_VAR 0 4
18466: PUSH
18467: LD_VAR 0 4
18471: PPUSH
18472: LD_INT 4
18474: PPUSH
18475: LD_INT 33
18477: PPUSH
18478: CALL_OW 1
18482: ST_TO_ADDR
// end ; end ; ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , temp_list ) ;
18483: LD_ADDR_EXP 47
18487: PUSH
18488: LD_EXP 47
18492: PPUSH
18493: LD_VAR 0 9
18497: PPUSH
18498: LD_VAR 0 4
18502: PPUSH
18503: CALL_OW 1
18507: ST_TO_ADDR
// end ; end ; if ai_upcoming_building_data [ base ] > 0 then
18508: LD_EXP 47
18512: PUSH
18513: LD_VAR 0 9
18517: ARRAY
18518: PUSH
18519: LD_INT 0
18521: GREATER
18522: IFFALSE 21586
// begin if ai_building_constructor [ base ] = 0 then
18524: LD_EXP 46
18528: PUSH
18529: LD_VAR 0 9
18533: ARRAY
18534: PUSH
18535: LD_INT 0
18537: EQUAL
18538: IFFALSE 18692
// begin temp_list_2 = UnitFilter ( ai_engineers [ base ] , [ f_class , class_engineer ] ) ;
18540: LD_ADDR_VAR 0 8
18544: PUSH
18545: LD_EXP 31
18549: PUSH
18550: LD_VAR 0 9
18554: ARRAY
18555: PPUSH
18556: LD_INT 25
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PPUSH
18566: CALL_OW 72
18570: ST_TO_ADDR
// if crane_usable then
18571: LD_VAR 0 12
18575: IFFALSE 18599
// temp_list_2 = temp_list_2 ^ ai_crane [ base ] ;
18577: LD_ADDR_VAR 0 8
18581: PUSH
18582: LD_VAR 0 8
18586: PUSH
18587: LD_EXP 71
18591: PUSH
18592: LD_VAR 0 9
18596: ARRAY
18597: ADD
18598: ST_TO_ADDR
// if temp_list_2 > 0 then
18599: LD_VAR 0 8
18603: PUSH
18604: LD_INT 0
18606: GREATER
18607: IFFALSE 18692
// begin temp_list = [ ] ;
18609: LD_ADDR_VAR 0 4
18613: PUSH
18614: EMPTY
18615: ST_TO_ADDR
// for i in temp_list_2 do
18616: LD_ADDR_VAR 0 2
18620: PUSH
18621: LD_VAR 0 8
18625: PUSH
18626: FOR_IN
18627: IFFALSE 18655
// temp_list = temp_list ^ GetSkill ( i , skill_engineering ) ;
18629: LD_ADDR_VAR 0 4
18633: PUSH
18634: LD_VAR 0 4
18638: PUSH
18639: LD_VAR 0 2
18643: PPUSH
18644: LD_INT 2
18646: PPUSH
18647: CALL_OW 259
18651: ADD
18652: ST_TO_ADDR
18653: GO 18626
18655: POP
18656: POP
// ai_building_constructor = Replace ( ai_building_constructor , base , BestFromListByList ( temp_list_2 , temp_list ) ) ;
18657: LD_ADDR_EXP 46
18661: PUSH
18662: LD_EXP 46
18666: PPUSH
18667: LD_VAR 0 9
18671: PPUSH
18672: LD_VAR 0 8
18676: PPUSH
18677: LD_VAR 0 4
18681: PPUSH
18682: CALL_OW 79
18686: PPUSH
18687: CALL_OW 1
18691: ST_TO_ADDR
// end ; end ; if ai_building_constructor [ base ] > 0 and ( ai_building_constructor [ base ] in engineers_list or ( ai_building_constructor [ base ] = ai_crane [ base ] and crane_usable ) ) then
18692: LD_EXP 46
18696: PUSH
18697: LD_VAR 0 9
18701: ARRAY
18702: PUSH
18703: LD_INT 0
18705: GREATER
18706: PUSH
18707: LD_EXP 46
18711: PUSH
18712: LD_VAR 0 9
18716: ARRAY
18717: PUSH
18718: LD_VAR 0 3
18722: IN
18723: PUSH
18724: LD_EXP 46
18728: PUSH
18729: LD_VAR 0 9
18733: ARRAY
18734: PUSH
18735: LD_EXP 71
18739: PUSH
18740: LD_VAR 0 9
18744: ARRAY
18745: EQUAL
18746: PUSH
18747: LD_VAR 0 12
18751: AND
18752: OR
18753: AND
18754: IFFALSE 21586
// begin engineers_list = engineers_list diff ai_building_constructor [ base ] ;
18756: LD_ADDR_VAR 0 3
18760: PUSH
18761: LD_VAR 0 3
18765: PUSH
18766: LD_EXP 46
18770: PUSH
18771: LD_VAR 0 9
18775: ARRAY
18776: DIFF
18777: ST_TO_ADDR
// case GetType ( IsInUnit ( ai_building_constructor [ base ] ) ) of unit_building :
18778: LD_EXP 46
18782: PUSH
18783: LD_VAR 0 9
18787: ARRAY
18788: PPUSH
18789: CALL_OW 310
18793: PPUSH
18794: CALL_OW 247
18798: PUSH
18799: LD_INT 3
18801: DOUBLE
18802: EQUAL
18803: IFTRUE 18807
18805: GO 18825
18807: POP
// ComExitBuilding ( ai_building_constructor [ base ] ) ; unit_vehicle :
18808: LD_EXP 46
18812: PUSH
18813: LD_VAR 0 9
18817: ARRAY
18818: PPUSH
18819: CALL_OW 122
18823: GO 21586
18825: LD_INT 2
18827: DOUBLE
18828: EQUAL
18829: IFTRUE 18833
18831: GO 18851
18833: POP
// ComExitVehicle ( ai_building_constructor [ base ] ) ; else
18834: LD_EXP 46
18838: PUSH
18839: LD_VAR 0 9
18843: ARRAY
18844: PPUSH
18845: CALL_OW 121
18849: GO 21586
18851: POP
// case GetBType ( HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ) of - 1 :
18852: LD_EXP 47
18856: PUSH
18857: LD_VAR 0 9
18861: ARRAY
18862: PUSH
18863: LD_INT 1
18865: ARRAY
18866: PPUSH
18867: LD_EXP 47
18871: PUSH
18872: LD_VAR 0 9
18876: ARRAY
18877: PUSH
18878: LD_INT 2
18880: ARRAY
18881: PPUSH
18882: CALL_OW 428
18886: PPUSH
18887: CALL_OW 266
18891: PUSH
18892: LD_INT 1
18894: NEG
18895: DOUBLE
18896: EQUAL
18897: IFTRUE 18901
18899: GO 21091
18901: POP
// begin case ai_upcoming_building_data [ base ] [ 4 ] of b_warehouse :
18902: LD_EXP 47
18906: PUSH
18907: LD_VAR 0 9
18911: ARRAY
18912: PUSH
18913: LD_INT 4
18915: ARRAY
18916: PUSH
18917: LD_INT 1
18919: DOUBLE
18920: EQUAL
18921: IFTRUE 18925
18923: GO 18936
18925: POP
// i = b_depot ; b_factory :
18926: LD_ADDR_VAR 0 2
18930: PUSH
18931: LD_INT 0
18933: ST_TO_ADDR
18934: GO 19020
18936: LD_INT 3
18938: DOUBLE
18939: EQUAL
18940: IFTRUE 18944
18942: GO 18955
18944: POP
// i = b_workshop ; b_lab_half , b_lab_full :
18945: LD_ADDR_VAR 0 2
18949: PUSH
18950: LD_INT 2
18952: ST_TO_ADDR
18953: GO 19020
18955: LD_INT 7
18957: DOUBLE
18958: EQUAL
18959: IFTRUE 18969
18961: LD_INT 8
18963: DOUBLE
18964: EQUAL
18965: IFTRUE 18969
18967: GO 18980
18969: POP
// i = b_lab ; b_barracks :
18970: LD_ADDR_VAR 0 2
18974: PUSH
18975: LD_INT 6
18977: ST_TO_ADDR
18978: GO 19020
18980: LD_INT 5
18982: DOUBLE
18983: EQUAL
18984: IFTRUE 18988
18986: GO 18999
18988: POP
// i = b_armoury ; else
18989: LD_ADDR_VAR 0 2
18993: PUSH
18994: LD_INT 4
18996: ST_TO_ADDR
18997: GO 19020
18999: POP
// i = ai_upcoming_building_data [ base ] [ 4 ] ; end ;
19000: LD_ADDR_VAR 0 2
19004: PUSH
19005: LD_EXP 47
19009: PUSH
19010: LD_VAR 0 9
19014: ARRAY
19015: PUSH
19016: LD_INT 4
19018: ARRAY
19019: ST_TO_ADDR
// case i of b_depot :
19020: LD_VAR 0 2
19024: PUSH
19025: LD_INT 0
19027: DOUBLE
19028: EQUAL
19029: IFTRUE 19033
19031: GO 19110
19033: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19034: LD_EXP 46
19038: PUSH
19039: LD_VAR 0 9
19043: ARRAY
19044: PPUSH
19045: CALL_OW 248
19049: PUSH
19050: LD_INT 3
19052: DOUBLE
19053: EQUAL
19054: IFTRUE 19058
19056: GO 19069
19058: POP
// b_value = 64 ; nation_american :
19059: LD_ADDR_VAR 0 13
19063: PUSH
19064: LD_INT 64
19066: ST_TO_ADDR
19067: GO 19108
19069: LD_INT 1
19071: DOUBLE
19072: EQUAL
19073: IFTRUE 19077
19075: GO 19088
19077: POP
// b_value = 1 ; nation_arabian :
19078: LD_ADDR_VAR 0 13
19082: PUSH
19083: LD_INT 1
19085: ST_TO_ADDR
19086: GO 19108
19088: LD_INT 2
19090: DOUBLE
19091: EQUAL
19092: IFTRUE 19096
19094: GO 19107
19096: POP
// b_value = 34 ; end ;
19097: LD_ADDR_VAR 0 13
19101: PUSH
19102: LD_INT 34
19104: ST_TO_ADDR
19105: GO 19108
19107: POP
// end ; b_workshop :
19108: GO 21003
19110: LD_INT 2
19112: DOUBLE
19113: EQUAL
19114: IFTRUE 19118
19116: GO 19195
19118: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19119: LD_EXP 46
19123: PUSH
19124: LD_VAR 0 9
19128: ARRAY
19129: PPUSH
19130: CALL_OW 248
19134: PUSH
19135: LD_INT 3
19137: DOUBLE
19138: EQUAL
19139: IFTRUE 19143
19141: GO 19154
19143: POP
// b_value = 68 ; nation_american :
19144: LD_ADDR_VAR 0 13
19148: PUSH
19149: LD_INT 68
19151: ST_TO_ADDR
19152: GO 19193
19154: LD_INT 1
19156: DOUBLE
19157: EQUAL
19158: IFTRUE 19162
19160: GO 19173
19162: POP
// b_value = 5 ; nation_arabian :
19163: LD_ADDR_VAR 0 13
19167: PUSH
19168: LD_INT 5
19170: ST_TO_ADDR
19171: GO 19193
19173: LD_INT 2
19175: DOUBLE
19176: EQUAL
19177: IFTRUE 19181
19179: GO 19192
19181: POP
// b_value = 38 ; end ;
19182: LD_ADDR_VAR 0 13
19186: PUSH
19187: LD_INT 38
19189: ST_TO_ADDR
19190: GO 19193
19192: POP
// end ; b_armoury :
19193: GO 21003
19195: LD_INT 4
19197: DOUBLE
19198: EQUAL
19199: IFTRUE 19203
19201: GO 19280
19203: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19204: LD_EXP 46
19208: PUSH
19209: LD_VAR 0 9
19213: ARRAY
19214: PPUSH
19215: CALL_OW 248
19219: PUSH
19220: LD_INT 3
19222: DOUBLE
19223: EQUAL
19224: IFTRUE 19228
19226: GO 19239
19228: POP
// b_value = 66 ; nation_american :
19229: LD_ADDR_VAR 0 13
19233: PUSH
19234: LD_INT 66
19236: ST_TO_ADDR
19237: GO 19278
19239: LD_INT 1
19241: DOUBLE
19242: EQUAL
19243: IFTRUE 19247
19245: GO 19258
19247: POP
// b_value = 3 ; nation_arabian :
19248: LD_ADDR_VAR 0 13
19252: PUSH
19253: LD_INT 3
19255: ST_TO_ADDR
19256: GO 19278
19258: LD_INT 2
19260: DOUBLE
19261: EQUAL
19262: IFTRUE 19266
19264: GO 19277
19266: POP
// b_value = 36 ; end ;
19267: LD_ADDR_VAR 0 13
19271: PUSH
19272: LD_INT 36
19274: ST_TO_ADDR
19275: GO 19278
19277: POP
// end ; b_lab :
19278: GO 21003
19280: LD_INT 6
19282: DOUBLE
19283: EQUAL
19284: IFTRUE 19288
19286: GO 19365
19288: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19289: LD_EXP 46
19293: PUSH
19294: LD_VAR 0 9
19298: ARRAY
19299: PPUSH
19300: CALL_OW 248
19304: PUSH
19305: LD_INT 3
19307: DOUBLE
19308: EQUAL
19309: IFTRUE 19313
19311: GO 19324
19313: POP
// b_value = 77 ; nation_american :
19314: LD_ADDR_VAR 0 13
19318: PUSH
19319: LD_INT 77
19321: ST_TO_ADDR
19322: GO 19363
19324: LD_INT 1
19326: DOUBLE
19327: EQUAL
19328: IFTRUE 19332
19330: GO 19343
19332: POP
// b_value = 17 ; nation_arabian :
19333: LD_ADDR_VAR 0 13
19337: PUSH
19338: LD_INT 17
19340: ST_TO_ADDR
19341: GO 19363
19343: LD_INT 2
19345: DOUBLE
19346: EQUAL
19347: IFTRUE 19351
19349: GO 19362
19351: POP
// b_value = 48 ; end ;
19352: LD_ADDR_VAR 0 13
19356: PUSH
19357: LD_INT 48
19359: ST_TO_ADDR
19360: GO 19363
19362: POP
// end ; b_oil_power :
19363: GO 21003
19365: LD_INT 26
19367: DOUBLE
19368: EQUAL
19369: IFTRUE 19373
19371: GO 19450
19373: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19374: LD_EXP 46
19378: PUSH
19379: LD_VAR 0 9
19383: ARRAY
19384: PPUSH
19385: CALL_OW 248
19389: PUSH
19390: LD_INT 3
19392: DOUBLE
19393: EQUAL
19394: IFTRUE 19398
19396: GO 19409
19398: POP
// b_value = 85 ; nation_american :
19399: LD_ADDR_VAR 0 13
19403: PUSH
19404: LD_INT 85
19406: ST_TO_ADDR
19407: GO 19448
19409: LD_INT 1
19411: DOUBLE
19412: EQUAL
19413: IFTRUE 19417
19415: GO 19428
19417: POP
// b_value = 25 ; nation_arabian :
19418: LD_ADDR_VAR 0 13
19422: PUSH
19423: LD_INT 25
19425: ST_TO_ADDR
19426: GO 19448
19428: LD_INT 2
19430: DOUBLE
19431: EQUAL
19432: IFTRUE 19436
19434: GO 19447
19436: POP
// b_value = 56 ; end ;
19437: LD_ADDR_VAR 0 13
19441: PUSH
19442: LD_INT 56
19444: ST_TO_ADDR
19445: GO 19448
19447: POP
// end ; b_solar_power :
19448: GO 21003
19450: LD_INT 27
19452: DOUBLE
19453: EQUAL
19454: IFTRUE 19458
19456: GO 19536
19458: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19459: LD_EXP 46
19463: PUSH
19464: LD_VAR 0 9
19468: ARRAY
19469: PPUSH
19470: CALL_OW 248
19474: PUSH
19475: LD_INT 3
19477: DOUBLE
19478: EQUAL
19479: IFTRUE 19483
19481: GO 19495
19483: POP
// b_value = - 7 ; nation_american :
19484: LD_ADDR_VAR 0 13
19488: PUSH
19489: LD_INT 7
19491: NEG
19492: ST_TO_ADDR
19493: GO 19534
19495: LD_INT 1
19497: DOUBLE
19498: EQUAL
19499: IFTRUE 19503
19501: GO 19514
19503: POP
// b_value = 26 ; nation_arabian :
19504: LD_ADDR_VAR 0 13
19508: PUSH
19509: LD_INT 26
19511: ST_TO_ADDR
19512: GO 19534
19514: LD_INT 2
19516: DOUBLE
19517: EQUAL
19518: IFTRUE 19522
19520: GO 19533
19522: POP
// b_value = 57 ; end ;
19523: LD_ADDR_VAR 0 13
19527: PUSH
19528: LD_INT 57
19530: ST_TO_ADDR
19531: GO 19534
19533: POP
// end ; b_siberite_power :
19534: GO 21003
19536: LD_INT 28
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19621
19544: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19545: LD_EXP 46
19549: PUSH
19550: LD_VAR 0 9
19554: ARRAY
19555: PPUSH
19556: CALL_OW 248
19560: PUSH
19561: LD_INT 3
19563: DOUBLE
19564: EQUAL
19565: IFTRUE 19569
19567: GO 19580
19569: POP
// b_value = 86 ; nation_american :
19570: LD_ADDR_VAR 0 13
19574: PUSH
19575: LD_INT 86
19577: ST_TO_ADDR
19578: GO 19619
19580: LD_INT 1
19582: DOUBLE
19583: EQUAL
19584: IFTRUE 19588
19586: GO 19599
19588: POP
// b_value = 27 ; nation_arabian :
19589: LD_ADDR_VAR 0 13
19593: PUSH
19594: LD_INT 27
19596: ST_TO_ADDR
19597: GO 19619
19599: LD_INT 2
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19618
19607: POP
// b_value = 58 ; end ;
19608: LD_ADDR_VAR 0 13
19612: PUSH
19613: LD_INT 58
19615: ST_TO_ADDR
19616: GO 19619
19618: POP
// end ; b_oil_mine :
19619: GO 21003
19621: LD_INT 29
19623: DOUBLE
19624: EQUAL
19625: IFTRUE 19629
19627: GO 19706
19629: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19630: LD_EXP 46
19634: PUSH
19635: LD_VAR 0 9
19639: ARRAY
19640: PPUSH
19641: CALL_OW 248
19645: PUSH
19646: LD_INT 3
19648: DOUBLE
19649: EQUAL
19650: IFTRUE 19654
19652: GO 19665
19654: POP
// b_value = 87 ; nation_american :
19655: LD_ADDR_VAR 0 13
19659: PUSH
19660: LD_INT 87
19662: ST_TO_ADDR
19663: GO 19704
19665: LD_INT 1
19667: DOUBLE
19668: EQUAL
19669: IFTRUE 19673
19671: GO 19684
19673: POP
// b_value = 28 ; nation_arabian :
19674: LD_ADDR_VAR 0 13
19678: PUSH
19679: LD_INT 28
19681: ST_TO_ADDR
19682: GO 19704
19684: LD_INT 2
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19703
19692: POP
// b_value = 59 ; end ;
19693: LD_ADDR_VAR 0 13
19697: PUSH
19698: LD_INT 59
19700: ST_TO_ADDR
19701: GO 19704
19703: POP
// end ; b_siberite_mine :
19704: GO 21003
19706: LD_INT 30
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19791
19714: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19715: LD_EXP 46
19719: PUSH
19720: LD_VAR 0 9
19724: ARRAY
19725: PPUSH
19726: CALL_OW 248
19730: PUSH
19731: LD_INT 3
19733: DOUBLE
19734: EQUAL
19735: IFTRUE 19739
19737: GO 19750
19739: POP
// b_value = 88 ; nation_american :
19740: LD_ADDR_VAR 0 13
19744: PUSH
19745: LD_INT 88
19747: ST_TO_ADDR
19748: GO 19789
19750: LD_INT 1
19752: DOUBLE
19753: EQUAL
19754: IFTRUE 19758
19756: GO 19769
19758: POP
// b_value = 29 ; nation_arabian :
19759: LD_ADDR_VAR 0 13
19763: PUSH
19764: LD_INT 29
19766: ST_TO_ADDR
19767: GO 19789
19769: LD_INT 2
19771: DOUBLE
19772: EQUAL
19773: IFTRUE 19777
19775: GO 19788
19777: POP
// b_value = 60 ; end ;
19778: LD_ADDR_VAR 0 13
19782: PUSH
19783: LD_INT 60
19785: ST_TO_ADDR
19786: GO 19789
19788: POP
// end ; b_breastwork :
19789: GO 21003
19791: LD_INT 31
19793: DOUBLE
19794: EQUAL
19795: IFTRUE 19799
19797: GO 19876
19799: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19800: LD_EXP 46
19804: PUSH
19805: LD_VAR 0 9
19809: ARRAY
19810: PPUSH
19811: CALL_OW 248
19815: PUSH
19816: LD_INT 3
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 19835
19824: POP
// b_value = 89 ; nation_american :
19825: LD_ADDR_VAR 0 13
19829: PUSH
19830: LD_INT 89
19832: ST_TO_ADDR
19833: GO 19874
19835: LD_INT 1
19837: DOUBLE
19838: EQUAL
19839: IFTRUE 19843
19841: GO 19854
19843: POP
// b_value = 30 ; nation_arabian :
19844: LD_ADDR_VAR 0 13
19848: PUSH
19849: LD_INT 30
19851: ST_TO_ADDR
19852: GO 19874
19854: LD_INT 2
19856: DOUBLE
19857: EQUAL
19858: IFTRUE 19862
19860: GO 19873
19862: POP
// b_value = 61 ; end ;
19863: LD_ADDR_VAR 0 13
19867: PUSH
19868: LD_INT 61
19870: ST_TO_ADDR
19871: GO 19874
19873: POP
// end ; b_bunker :
19874: GO 21003
19876: LD_INT 32
19878: DOUBLE
19879: EQUAL
19880: IFTRUE 19884
19882: GO 19961
19884: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19885: LD_EXP 46
19889: PUSH
19890: LD_VAR 0 9
19894: ARRAY
19895: PPUSH
19896: CALL_OW 248
19900: PUSH
19901: LD_INT 3
19903: DOUBLE
19904: EQUAL
19905: IFTRUE 19909
19907: GO 19920
19909: POP
// b_value = 90 ; nation_american :
19910: LD_ADDR_VAR 0 13
19914: PUSH
19915: LD_INT 90
19917: ST_TO_ADDR
19918: GO 19959
19920: LD_INT 1
19922: DOUBLE
19923: EQUAL
19924: IFTRUE 19928
19926: GO 19939
19928: POP
// b_value = 31 ; nation_arabian :
19929: LD_ADDR_VAR 0 13
19933: PUSH
19934: LD_INT 31
19936: ST_TO_ADDR
19937: GO 19959
19939: LD_INT 2
19941: DOUBLE
19942: EQUAL
19943: IFTRUE 19947
19945: GO 19958
19947: POP
// b_value = 62 ; end ;
19948: LD_ADDR_VAR 0 13
19952: PUSH
19953: LD_INT 62
19955: ST_TO_ADDR
19956: GO 19959
19958: POP
// end ; b_turret :
19959: GO 21003
19961: LD_INT 33
19963: DOUBLE
19964: EQUAL
19965: IFTRUE 19969
19967: GO 20047
19969: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
19970: LD_EXP 46
19974: PUSH
19975: LD_VAR 0 9
19979: ARRAY
19980: PPUSH
19981: CALL_OW 248
19985: PUSH
19986: LD_INT 3
19988: DOUBLE
19989: EQUAL
19990: IFTRUE 19994
19992: GO 20005
19994: POP
// b_value = 91 ; nation_american :
19995: LD_ADDR_VAR 0 13
19999: PUSH
20000: LD_INT 91
20002: ST_TO_ADDR
20003: GO 20045
20005: LD_INT 1
20007: DOUBLE
20008: EQUAL
20009: IFTRUE 20013
20011: GO 20024
20013: POP
// b_value = 32 ; nation_arabian :
20014: LD_ADDR_VAR 0 13
20018: PUSH
20019: LD_INT 32
20021: ST_TO_ADDR
20022: GO 20045
20024: LD_INT 2
20026: DOUBLE
20027: EQUAL
20028: IFTRUE 20032
20030: GO 20044
20032: POP
// b_value = - 7 ; end ;
20033: LD_ADDR_VAR 0 13
20037: PUSH
20038: LD_INT 7
20040: NEG
20041: ST_TO_ADDR
20042: GO 20045
20044: POP
// end ; b_teleport :
20045: GO 21003
20047: LD_INT 34
20049: DOUBLE
20050: EQUAL
20051: IFTRUE 20055
20053: GO 20134
20055: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20056: LD_EXP 46
20060: PUSH
20061: LD_VAR 0 9
20065: ARRAY
20066: PPUSH
20067: CALL_OW 248
20071: PUSH
20072: LD_INT 3
20074: DOUBLE
20075: EQUAL
20076: IFTRUE 20080
20078: GO 20091
20080: POP
// b_value = 92 ; nation_american :
20081: LD_ADDR_VAR 0 13
20085: PUSH
20086: LD_INT 92
20088: ST_TO_ADDR
20089: GO 20132
20091: LD_INT 1
20093: DOUBLE
20094: EQUAL
20095: IFTRUE 20099
20097: GO 20111
20099: POP
// b_value = - 7 ; nation_arabian :
20100: LD_ADDR_VAR 0 13
20104: PUSH
20105: LD_INT 7
20107: NEG
20108: ST_TO_ADDR
20109: GO 20132
20111: LD_INT 2
20113: DOUBLE
20114: EQUAL
20115: IFTRUE 20119
20117: GO 20131
20119: POP
// b_value = - 7 ; end ;
20120: LD_ADDR_VAR 0 13
20124: PUSH
20125: LD_INT 7
20127: NEG
20128: ST_TO_ADDR
20129: GO 20132
20131: POP
// end ; b_control_tower :
20132: GO 21003
20134: LD_INT 36
20136: DOUBLE
20137: EQUAL
20138: IFTRUE 20142
20140: GO 20221
20142: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20143: LD_EXP 46
20147: PUSH
20148: LD_VAR 0 9
20152: ARRAY
20153: PPUSH
20154: CALL_OW 248
20158: PUSH
20159: LD_INT 3
20161: DOUBLE
20162: EQUAL
20163: IFTRUE 20167
20165: GO 20179
20167: POP
// b_value = - 7 ; nation_american :
20168: LD_ADDR_VAR 0 13
20172: PUSH
20173: LD_INT 7
20175: NEG
20176: ST_TO_ADDR
20177: GO 20219
20179: LD_INT 1
20181: DOUBLE
20182: EQUAL
20183: IFTRUE 20187
20185: GO 20198
20187: POP
// b_value = 94 ; nation_arabian :
20188: LD_ADDR_VAR 0 13
20192: PUSH
20193: LD_INT 94
20195: ST_TO_ADDR
20196: GO 20219
20198: LD_INT 2
20200: DOUBLE
20201: EQUAL
20202: IFTRUE 20206
20204: GO 20218
20206: POP
// b_value = - 7 ; end ;
20207: LD_ADDR_VAR 0 13
20211: PUSH
20212: LD_INT 7
20214: NEG
20215: ST_TO_ADDR
20216: GO 20219
20218: POP
// end ; b_ext_track :
20219: GO 21003
20221: LD_INT 16
20223: DOUBLE
20224: EQUAL
20225: IFTRUE 20229
20227: GO 20306
20229: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20230: LD_EXP 46
20234: PUSH
20235: LD_VAR 0 9
20239: ARRAY
20240: PPUSH
20241: CALL_OW 248
20245: PUSH
20246: LD_INT 3
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20265
20254: POP
// b_value = 70 ; nation_american :
20255: LD_ADDR_VAR 0 13
20259: PUSH
20260: LD_INT 70
20262: ST_TO_ADDR
20263: GO 20304
20265: LD_INT 1
20267: DOUBLE
20268: EQUAL
20269: IFTRUE 20273
20271: GO 20284
20273: POP
// b_value = 7 ; nation_arabian :
20274: LD_ADDR_VAR 0 13
20278: PUSH
20279: LD_INT 7
20281: ST_TO_ADDR
20282: GO 20304
20284: LD_INT 2
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20303
20292: POP
// b_value = 40 ; end ;
20293: LD_ADDR_VAR 0 13
20297: PUSH
20298: LD_INT 40
20300: ST_TO_ADDR
20301: GO 20304
20303: POP
// end ; b_ext_gun :
20304: GO 21003
20306: LD_INT 17
20308: DOUBLE
20309: EQUAL
20310: IFTRUE 20314
20312: GO 20391
20314: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20315: LD_EXP 46
20319: PUSH
20320: LD_VAR 0 9
20324: ARRAY
20325: PPUSH
20326: CALL_OW 248
20330: PUSH
20331: LD_INT 3
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20350
20339: POP
// b_value = 71 ; nation_american :
20340: LD_ADDR_VAR 0 13
20344: PUSH
20345: LD_INT 71
20347: ST_TO_ADDR
20348: GO 20389
20350: LD_INT 1
20352: DOUBLE
20353: EQUAL
20354: IFTRUE 20358
20356: GO 20369
20358: POP
// b_value = 8 ; nation_arabian :
20359: LD_ADDR_VAR 0 13
20363: PUSH
20364: LD_INT 8
20366: ST_TO_ADDR
20367: GO 20389
20369: LD_INT 2
20371: DOUBLE
20372: EQUAL
20373: IFTRUE 20377
20375: GO 20388
20377: POP
// b_value = 41 ; end ;
20378: LD_ADDR_VAR 0 13
20382: PUSH
20383: LD_INT 41
20385: ST_TO_ADDR
20386: GO 20389
20388: POP
// end ; b_ext_rocket :
20389: GO 21003
20391: LD_INT 18
20393: DOUBLE
20394: EQUAL
20395: IFTRUE 20399
20397: GO 20476
20399: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20400: LD_EXP 46
20404: PUSH
20405: LD_VAR 0 9
20409: ARRAY
20410: PPUSH
20411: CALL_OW 248
20415: PUSH
20416: LD_INT 3
20418: DOUBLE
20419: EQUAL
20420: IFTRUE 20424
20422: GO 20435
20424: POP
// b_value = 72 ; nation_american :
20425: LD_ADDR_VAR 0 13
20429: PUSH
20430: LD_INT 72
20432: ST_TO_ADDR
20433: GO 20474
20435: LD_INT 1
20437: DOUBLE
20438: EQUAL
20439: IFTRUE 20443
20441: GO 20454
20443: POP
// b_value = 9 ; nation_arabian :
20444: LD_ADDR_VAR 0 13
20448: PUSH
20449: LD_INT 9
20451: ST_TO_ADDR
20452: GO 20474
20454: LD_INT 2
20456: DOUBLE
20457: EQUAL
20458: IFTRUE 20462
20460: GO 20473
20462: POP
// b_value = 42 ; end ;
20463: LD_ADDR_VAR 0 13
20467: PUSH
20468: LD_INT 42
20470: ST_TO_ADDR
20471: GO 20474
20473: POP
// end ; b_ext_noncombat :
20474: GO 21003
20476: LD_INT 19
20478: DOUBLE
20479: EQUAL
20480: IFTRUE 20484
20482: GO 20562
20484: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20485: LD_EXP 46
20489: PUSH
20490: LD_VAR 0 9
20494: ARRAY
20495: PPUSH
20496: CALL_OW 248
20500: PUSH
20501: LD_INT 3
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20520
20509: POP
// b_value = 73 ; nation_american :
20510: LD_ADDR_VAR 0 13
20514: PUSH
20515: LD_INT 73
20517: ST_TO_ADDR
20518: GO 20560
20520: LD_INT 1
20522: DOUBLE
20523: EQUAL
20524: IFTRUE 20528
20526: GO 20539
20528: POP
// b_value = 10 ; nation_arabian :
20529: LD_ADDR_VAR 0 13
20533: PUSH
20534: LD_INT 10
20536: ST_TO_ADDR
20537: GO 20560
20539: LD_INT 2
20541: DOUBLE
20542: EQUAL
20543: IFTRUE 20547
20545: GO 20559
20547: POP
// b_value = - 7 ; end ;
20548: LD_ADDR_VAR 0 13
20552: PUSH
20553: LD_INT 7
20555: NEG
20556: ST_TO_ADDR
20557: GO 20560
20559: POP
// end ; b_ext_radar :
20560: GO 21003
20562: LD_INT 20
20564: DOUBLE
20565: EQUAL
20566: IFTRUE 20570
20568: GO 20648
20570: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20571: LD_EXP 46
20575: PUSH
20576: LD_VAR 0 9
20580: ARRAY
20581: PPUSH
20582: CALL_OW 248
20586: PUSH
20587: LD_INT 3
20589: DOUBLE
20590: EQUAL
20591: IFTRUE 20595
20593: GO 20607
20595: POP
// b_value = - 7 ; nation_american :
20596: LD_ADDR_VAR 0 13
20600: PUSH
20601: LD_INT 7
20603: NEG
20604: ST_TO_ADDR
20605: GO 20646
20607: LD_INT 1
20609: DOUBLE
20610: EQUAL
20611: IFTRUE 20615
20613: GO 20626
20615: POP
// b_value = 11 ; nation_arabian :
20616: LD_ADDR_VAR 0 13
20620: PUSH
20621: LD_INT 11
20623: ST_TO_ADDR
20624: GO 20646
20626: LD_INT 2
20628: DOUBLE
20629: EQUAL
20630: IFTRUE 20634
20632: GO 20645
20634: POP
// b_value = 44 ; end ;
20635: LD_ADDR_VAR 0 13
20639: PUSH
20640: LD_INT 44
20642: ST_TO_ADDR
20643: GO 20646
20645: POP
// end ; b_ext_siberium :
20646: GO 21003
20648: LD_INT 21
20650: DOUBLE
20651: EQUAL
20652: IFTRUE 20656
20654: GO 20733
20656: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20657: LD_EXP 46
20661: PUSH
20662: LD_VAR 0 9
20666: ARRAY
20667: PPUSH
20668: CALL_OW 248
20672: PUSH
20673: LD_INT 3
20675: DOUBLE
20676: EQUAL
20677: IFTRUE 20681
20679: GO 20692
20681: POP
// b_value = 75 ; nation_american :
20682: LD_ADDR_VAR 0 13
20686: PUSH
20687: LD_INT 75
20689: ST_TO_ADDR
20690: GO 20731
20692: LD_INT 1
20694: DOUBLE
20695: EQUAL
20696: IFTRUE 20700
20698: GO 20711
20700: POP
// b_value = 12 ; nation_arabian :
20701: LD_ADDR_VAR 0 13
20705: PUSH
20706: LD_INT 12
20708: ST_TO_ADDR
20709: GO 20731
20711: LD_INT 2
20713: DOUBLE
20714: EQUAL
20715: IFTRUE 20719
20717: GO 20730
20719: POP
// b_value = 45 ; end ;
20720: LD_ADDR_VAR 0 13
20724: PUSH
20725: LD_INT 45
20727: ST_TO_ADDR
20728: GO 20731
20730: POP
// end ; b_ext_stitch :
20731: GO 21003
20733: LD_INT 23
20735: DOUBLE
20736: EQUAL
20737: IFTRUE 20741
20739: GO 20820
20741: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20742: LD_EXP 46
20746: PUSH
20747: LD_VAR 0 9
20751: ARRAY
20752: PPUSH
20753: CALL_OW 248
20757: PUSH
20758: LD_INT 3
20760: DOUBLE
20761: EQUAL
20762: IFTRUE 20766
20764: GO 20778
20766: POP
// b_value = - 7 ; nation_american :
20767: LD_ADDR_VAR 0 13
20771: PUSH
20772: LD_INT 7
20774: NEG
20775: ST_TO_ADDR
20776: GO 20818
20778: LD_INT 1
20780: DOUBLE
20781: EQUAL
20782: IFTRUE 20786
20784: GO 20798
20786: POP
// b_value = - 7 ; nation_arabian :
20787: LD_ADDR_VAR 0 13
20791: PUSH
20792: LD_INT 7
20794: NEG
20795: ST_TO_ADDR
20796: GO 20818
20798: LD_INT 2
20800: DOUBLE
20801: EQUAL
20802: IFTRUE 20806
20804: GO 20817
20806: POP
// b_value = 43 ; end ;
20807: LD_ADDR_VAR 0 13
20811: PUSH
20812: LD_INT 43
20814: ST_TO_ADDR
20815: GO 20818
20817: POP
// end ; b_ext_computer :
20818: GO 21003
20820: LD_INT 24
20822: DOUBLE
20823: EQUAL
20824: IFTRUE 20828
20826: GO 20906
20828: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20829: LD_EXP 46
20833: PUSH
20834: LD_VAR 0 9
20838: ARRAY
20839: PPUSH
20840: CALL_OW 248
20844: PUSH
20845: LD_INT 3
20847: DOUBLE
20848: EQUAL
20849: IFTRUE 20853
20851: GO 20864
20853: POP
// b_value = 76 ; nation_american :
20854: LD_ADDR_VAR 0 13
20858: PUSH
20859: LD_INT 76
20861: ST_TO_ADDR
20862: GO 20904
20864: LD_INT 1
20866: DOUBLE
20867: EQUAL
20868: IFTRUE 20872
20870: GO 20883
20872: POP
// b_value = 15 ; nation_arabian :
20873: LD_ADDR_VAR 0 13
20877: PUSH
20878: LD_INT 15
20880: ST_TO_ADDR
20881: GO 20904
20883: LD_INT 2
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20891
20889: GO 20903
20891: POP
// b_value = - 7 ; end ;
20892: LD_ADDR_VAR 0 13
20896: PUSH
20897: LD_INT 7
20899: NEG
20900: ST_TO_ADDR
20901: GO 20904
20903: POP
// end ; b_ext_laser :
20904: GO 21003
20906: LD_INT 25
20908: DOUBLE
20909: EQUAL
20910: IFTRUE 20914
20912: GO 20993
20914: POP
// begin case GetNation ( ai_building_constructor [ base ] ) of nation_russian :
20915: LD_EXP 46
20919: PUSH
20920: LD_VAR 0 9
20924: ARRAY
20925: PPUSH
20926: CALL_OW 248
20930: PUSH
20931: LD_INT 3
20933: DOUBLE
20934: EQUAL
20935: IFTRUE 20939
20937: GO 20951
20939: POP
// b_value = - 7 ; nation_american :
20940: LD_ADDR_VAR 0 13
20944: PUSH
20945: LD_INT 7
20947: NEG
20948: ST_TO_ADDR
20949: GO 20991
20951: LD_INT 1
20953: DOUBLE
20954: EQUAL
20955: IFTRUE 20959
20957: GO 20970
20959: POP
// b_value = 16 ; nation_arabian :
20960: LD_ADDR_VAR 0 13
20964: PUSH
20965: LD_INT 16
20967: ST_TO_ADDR
20968: GO 20991
20970: LD_INT 2
20972: DOUBLE
20973: EQUAL
20974: IFTRUE 20978
20976: GO 20990
20978: POP
// b_value = - 7 ; end ;
20979: LD_ADDR_VAR 0 13
20983: PUSH
20984: LD_INT 7
20986: NEG
20987: ST_TO_ADDR
20988: GO 20991
20990: POP
// end ; else
20991: GO 21003
20993: POP
// b_value = - 42 ; end ;
20994: LD_ADDR_VAR 0 13
20998: PUSH
20999: LD_INT 42
21001: NEG
21002: ST_TO_ADDR
// SetTaskList ( ai_building_constructor [ base ] , [ [ B , ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] , 0 , b_value , ai_upcoming_building_data [ base ] [ 3 ] , 0 ] ] ) ;
21003: LD_EXP 46
21007: PUSH
21008: LD_VAR 0 9
21012: ARRAY
21013: PPUSH
21014: LD_STRING B
21016: PUSH
21017: LD_EXP 47
21021: PUSH
21022: LD_VAR 0 9
21026: ARRAY
21027: PUSH
21028: LD_INT 1
21030: ARRAY
21031: PUSH
21032: LD_EXP 47
21036: PUSH
21037: LD_VAR 0 9
21041: ARRAY
21042: PUSH
21043: LD_INT 2
21045: ARRAY
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: LD_VAR 0 13
21054: PUSH
21055: LD_EXP 47
21059: PUSH
21060: LD_VAR 0 9
21064: ARRAY
21065: PUSH
21066: LD_INT 3
21068: ARRAY
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: PUSH
21082: EMPTY
21083: LIST
21084: PPUSH
21085: CALL_OW 446
// end ; b_depot :
21089: GO 21586
21091: LD_INT 0
21093: DOUBLE
21094: EQUAL
21095: IFTRUE 21099
21097: GO 21148
21099: POP
// begin ComUpgrade ( ai_depot [ base ] ) ;
21100: LD_EXP 35
21104: PUSH
21105: LD_VAR 0 9
21109: ARRAY
21110: PPUSH
21111: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , ai_depot [ base ] ) ;
21115: LD_ADDR_EXP 43
21119: PUSH
21120: LD_EXP 43
21124: PPUSH
21125: LD_VAR 0 9
21129: PPUSH
21130: LD_EXP 35
21134: PUSH
21135: LD_VAR 0 9
21139: ARRAY
21140: PPUSH
21141: CALL_OW 1
21145: ST_TO_ADDR
// end ; b_workshop :
21146: GO 21586
21148: LD_INT 2
21150: DOUBLE
21151: EQUAL
21152: IFTRUE 21156
21154: GO 21233
21156: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21157: LD_ADDR_VAR 0 6
21161: PUSH
21162: LD_EXP 47
21166: PUSH
21167: LD_VAR 0 9
21171: ARRAY
21172: PUSH
21173: LD_INT 1
21175: ARRAY
21176: PPUSH
21177: LD_EXP 47
21181: PUSH
21182: LD_VAR 0 9
21186: ARRAY
21187: PUSH
21188: LD_INT 2
21190: ARRAY
21191: PPUSH
21192: CALL_OW 428
21196: ST_TO_ADDR
// ComUpgrade ( temp_unit ) ;
21197: LD_VAR 0 6
21201: PPUSH
21202: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21206: LD_ADDR_EXP 43
21210: PUSH
21211: LD_EXP 43
21215: PPUSH
21216: LD_VAR 0 9
21220: PPUSH
21221: LD_VAR 0 6
21225: PPUSH
21226: CALL_OW 1
21230: ST_TO_ADDR
// end ; b_lab , b_lab_half :
21231: GO 21586
21233: LD_INT 6
21235: DOUBLE
21236: EQUAL
21237: IFTRUE 21247
21239: LD_INT 7
21241: DOUBLE
21242: EQUAL
21243: IFTRUE 21247
21245: GO 21500
21247: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21248: LD_ADDR_VAR 0 6
21252: PUSH
21253: LD_EXP 47
21257: PUSH
21258: LD_VAR 0 9
21262: ARRAY
21263: PUSH
21264: LD_INT 1
21266: ARRAY
21267: PPUSH
21268: LD_EXP 47
21272: PUSH
21273: LD_VAR 0 9
21277: ARRAY
21278: PUSH
21279: LD_INT 2
21281: ARRAY
21282: PPUSH
21283: CALL_OW 428
21287: ST_TO_ADDR
// if ai_upcoming_building_data [ base ] [ 5 ] <> b_lab_basic and not ai_upcoming_building_data [ base ] [ 5 ] in [ GetLabKind ( temp_unit , 1 ) , GetLabKind ( temp_unit , 2 ) ] then
21288: LD_EXP 47
21292: PUSH
21293: LD_VAR 0 9
21297: ARRAY
21298: PUSH
21299: LD_INT 5
21301: ARRAY
21302: PUSH
21303: LD_INT 9
21305: NONEQUAL
21306: PUSH
21307: LD_EXP 47
21311: PUSH
21312: LD_VAR 0 9
21316: ARRAY
21317: PUSH
21318: LD_INT 5
21320: ARRAY
21321: PUSH
21322: LD_VAR 0 6
21326: PPUSH
21327: LD_INT 1
21329: PPUSH
21330: CALL_OW 268
21334: PUSH
21335: LD_VAR 0 6
21339: PPUSH
21340: LD_INT 2
21342: PPUSH
21343: CALL_OW 268
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: IN
21352: NOT
21353: AND
21354: IFFALSE 21382
// ComUpgradeLab ( temp_unit , ai_upcoming_building_data [ base ] [ 5 ] ) else
21356: LD_VAR 0 6
21360: PPUSH
21361: LD_EXP 47
21365: PUSH
21366: LD_VAR 0 9
21370: ARRAY
21371: PUSH
21372: LD_INT 5
21374: ARRAY
21375: PPUSH
21376: CALL_OW 147
21380: GO 21473
// if ai_upcoming_building_data [ base ] [ 6 ] <> b_lab_basic then
21382: LD_EXP 47
21386: PUSH
21387: LD_VAR 0 9
21391: ARRAY
21392: PUSH
21393: LD_INT 6
21395: ARRAY
21396: PUSH
21397: LD_INT 9
21399: NONEQUAL
21400: IFFALSE 21428
// ComUpgradeLab ( temp_unit , ai_upcoming_building_data [ base ] [ 6 ] ) else
21402: LD_VAR 0 6
21406: PPUSH
21407: LD_EXP 47
21411: PUSH
21412: LD_VAR 0 9
21416: ARRAY
21417: PUSH
21418: LD_INT 6
21420: ARRAY
21421: PPUSH
21422: CALL_OW 147
21426: GO 21473
// begin ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
21428: LD_ADDR_EXP 46
21432: PUSH
21433: LD_EXP 46
21437: PPUSH
21438: LD_VAR 0 9
21442: PPUSH
21443: LD_INT 0
21445: PPUSH
21446: CALL_OW 1
21450: ST_TO_ADDR
// ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , [ ] ) ;
21451: LD_ADDR_EXP 47
21455: PUSH
21456: LD_EXP 47
21460: PPUSH
21461: LD_VAR 0 9
21465: PPUSH
21466: EMPTY
21467: PPUSH
21468: CALL_OW 1
21472: ST_TO_ADDR
// end ; ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21473: LD_ADDR_EXP 43
21477: PUSH
21478: LD_EXP 43
21482: PPUSH
21483: LD_VAR 0 9
21487: PPUSH
21488: LD_VAR 0 6
21492: PPUSH
21493: CALL_OW 1
21497: ST_TO_ADDR
// end ; b_armoury :
21498: GO 21586
21500: LD_INT 4
21502: DOUBLE
21503: EQUAL
21504: IFTRUE 21508
21506: GO 21585
21508: POP
// begin temp_unit = HexInfo ( ai_upcoming_building_data [ base ] [ 1 ] , ai_upcoming_building_data [ base ] [ 2 ] ) ;
21509: LD_ADDR_VAR 0 6
21513: PUSH
21514: LD_EXP 47
21518: PUSH
21519: LD_VAR 0 9
21523: ARRAY
21524: PUSH
21525: LD_INT 1
21527: ARRAY
21528: PPUSH
21529: LD_EXP 47
21533: PUSH
21534: LD_VAR 0 9
21538: ARRAY
21539: PUSH
21540: LD_INT 2
21542: ARRAY
21543: PPUSH
21544: CALL_OW 428
21548: ST_TO_ADDR
// ComUpgrade ( temp_unit ) ;
21549: LD_VAR 0 6
21553: PPUSH
21554: CALL_OW 146
// ai_building_under_construction = Replace ( ai_building_under_construction , base , temp_unit ) ;
21558: LD_ADDR_EXP 43
21562: PUSH
21563: LD_EXP 43
21567: PPUSH
21568: LD_VAR 0 9
21572: PPUSH
21573: LD_VAR 0 6
21577: PPUSH
21578: CALL_OW 1
21582: ST_TO_ADDR
// end ; end ; end ;
21583: GO 21586
21585: POP
// end ; end ; end ; if ( engineers_list ^ apemen_engineers_list ) > 0 and ai_depot [ base ] > 0 then
21586: LD_VAR 0 3
21590: PUSH
21591: LD_VAR 0 10
21595: ADD
21596: PUSH
21597: LD_INT 0
21599: GREATER
21600: PUSH
21601: LD_EXP 35
21605: PUSH
21606: LD_VAR 0 9
21610: ARRAY
21611: PUSH
21612: LD_INT 0
21614: GREATER
21615: AND
21616: IFFALSE 21700
// begin temp_list = GetListOfCratesInArea ( GetBaseArea ( base ) ) ;
21618: LD_ADDR_VAR 0 4
21622: PUSH
21623: LD_VAR 0 9
21627: PPUSH
21628: CALL 12332 0 1
21632: PPUSH
21633: CALL_OW 435
21637: ST_TO_ADDR
// if temp_list > 0 then
21638: LD_VAR 0 4
21642: PUSH
21643: LD_INT 0
21645: GREATER
21646: IFFALSE 21700
// begin ComCollect ( GetHumansOutOfUnits ( engineers_list ^ apemen_engineers_list ) , temp_list [ 1 ] , temp_list [ 2 ] ) ;
21648: LD_VAR 0 3
21652: PUSH
21653: LD_VAR 0 10
21657: ADD
21658: PPUSH
21659: CALL 23218 0 1
21663: PPUSH
21664: LD_VAR 0 4
21668: PUSH
21669: LD_INT 1
21671: ARRAY
21672: PPUSH
21673: LD_VAR 0 4
21677: PUSH
21678: LD_INT 2
21680: ARRAY
21681: PPUSH
21682: CALL_OW 117
// engineers_list = [ ] ;
21686: LD_ADDR_VAR 0 3
21690: PUSH
21691: EMPTY
21692: ST_TO_ADDR
// apemen_engineers_list = [ ] ;
21693: LD_ADDR_VAR 0 10
21697: PUSH
21698: EMPTY
21699: ST_TO_ADDR
// end ; end ; end ; DistributeHumansToBuildings ( base , engineers_list ^ apemen_engineers_list , UnitFilter ( ai_depot [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_engineer , 6 , false , false ) ;
21700: LD_VAR 0 9
21704: PPUSH
21705: LD_VAR 0 3
21709: PUSH
21710: LD_VAR 0 10
21714: ADD
21715: PPUSH
21716: LD_EXP 35
21720: PUSH
21721: LD_VAR 0 9
21725: ARRAY
21726: PPUSH
21727: LD_INT 50
21729: PUSH
21730: EMPTY
21731: LIST
21732: PUSH
21733: LD_INT 3
21735: PUSH
21736: LD_INT 57
21738: PUSH
21739: EMPTY
21740: LIST
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PPUSH
21750: CALL_OW 72
21754: PPUSH
21755: LD_INT 2
21757: PPUSH
21758: LD_INT 6
21760: PPUSH
21761: LD_INT 0
21763: PPUSH
21764: LD_INT 0
21766: PPUSH
21767: CALL 15289 0 7
// if crane_usable and ai_crane [ base ] <> ai_building_constructor [ base ] then
21771: LD_VAR 0 12
21775: PUSH
21776: LD_EXP 71
21780: PUSH
21781: LD_VAR 0 9
21785: ARRAY
21786: PUSH
21787: LD_EXP 46
21791: PUSH
21792: LD_VAR 0 9
21796: ARRAY
21797: NONEQUAL
21798: AND
21799: IFFALSE 21874
// if not IsInArea ( ai_crane [ base ] , GetBaseArea ( base ) ) then
21801: LD_EXP 71
21805: PUSH
21806: LD_VAR 0 9
21810: ARRAY
21811: PPUSH
21812: LD_VAR 0 9
21816: PPUSH
21817: CALL 12332 0 1
21821: PPUSH
21822: CALL_OW 308
21826: NOT
21827: IFFALSE 21874
// ComMoveXY ( ai_crane [ base ] , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
21829: LD_EXP 71
21833: PUSH
21834: LD_VAR 0 9
21838: ARRAY
21839: PPUSH
21840: LD_EXP 42
21844: PUSH
21845: LD_VAR 0 9
21849: ARRAY
21850: PUSH
21851: LD_INT 1
21853: ARRAY
21854: PPUSH
21855: LD_EXP 42
21859: PUSH
21860: LD_VAR 0 9
21864: ARRAY
21865: PUSH
21866: LD_INT 2
21868: ARRAY
21869: PPUSH
21870: CALL_OW 111
// end ;
21874: GO 16641
21876: POP
21877: POP
// until false ;
21878: LD_INT 0
21880: IFFALSE 16624
// end ;
21882: PPOPN 15
21884: END
// on BuildingStarted ( building , builder ) do var side , temp_list , base , i ;
21885: LD_INT 0
21887: PPUSH
21888: PPUSH
21889: PPUSH
21890: PPUSH
// begin side = GetSide ( building ) ;
21891: LD_ADDR_VAR 0 3
21895: PUSH
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 255
21905: ST_TO_ADDR
// if side = you then
21906: LD_VAR 0 3
21910: PUSH
21911: LD_EXP 3
21915: EQUAL
21916: IFFALSE 21920
// exit ;
21918: GO 21995
// base = FindBase ( building ) ;
21920: LD_ADDR_VAR 0 5
21924: PUSH
21925: LD_VAR 0 1
21929: PPUSH
21930: CALL 12551 0 1
21934: ST_TO_ADDR
// if base = 0 then
21935: LD_VAR 0 5
21939: PUSH
21940: LD_INT 0
21942: EQUAL
21943: IFFALSE 21947
// exit ;
21945: GO 21995
// ai_building_constructor = Replace ( ai_building_constructor , base , 0 ) ;
21947: LD_ADDR_EXP 46
21951: PUSH
21952: LD_EXP 46
21956: PPUSH
21957: LD_VAR 0 5
21961: PPUSH
21962: LD_INT 0
21964: PPUSH
21965: CALL_OW 1
21969: ST_TO_ADDR
// ai_building_under_construction = Replace ( ai_building_under_construction , base , building ) ;
21970: LD_ADDR_EXP 43
21974: PUSH
21975: LD_EXP 43
21979: PPUSH
21980: LD_VAR 0 5
21984: PPUSH
21985: LD_VAR 0 1
21989: PPUSH
21990: CALL_OW 1
21994: ST_TO_ADDR
// end ;
21995: PPOPN 6
21997: END
// on BuildingComplete ( building ) do var side , temp_list , temp_unit , base , i ;
21998: LD_INT 0
22000: PPUSH
22001: PPUSH
22002: PPUSH
22003: PPUSH
22004: PPUSH
// begin side = GetSide ( building ) ;
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 255
22019: ST_TO_ADDR
// if side = you then
22020: LD_VAR 0 2
22024: PUSH
22025: LD_EXP 3
22029: EQUAL
22030: IFFALSE 22034
// exit ;
22032: GO 22139
// base = FindBase ( building ) ;
22034: LD_ADDR_VAR 0 5
22038: PUSH
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL 12551 0 1
22048: ST_TO_ADDR
// if base = 0 then
22049: LD_VAR 0 5
22053: PUSH
22054: LD_INT 0
22056: EQUAL
22057: IFFALSE 22061
// exit ;
22059: GO 22139
// BuildUpgradeCommon ( base , building ) ;
22061: LD_VAR 0 5
22065: PPUSH
22066: LD_VAR 0 1
22070: PPUSH
22071: CALL 22220 0 2
// temp_list = ai_all_buildings [ base ] ^ building ;
22075: LD_ADDR_VAR 0 3
22079: PUSH
22080: LD_EXP 45
22084: PUSH
22085: LD_VAR 0 5
22089: ARRAY
22090: PUSH
22091: LD_VAR 0 1
22095: ADD
22096: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
22097: LD_ADDR_EXP 45
22101: PUSH
22102: LD_EXP 45
22106: PPUSH
22107: LD_VAR 0 5
22111: PPUSH
22112: LD_VAR 0 3
22116: PPUSH
22117: CALL_OW 1
22121: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , building , true ) ;
22122: LD_VAR 0 5
22126: PPUSH
22127: LD_VAR 0 1
22131: PPUSH
22132: LD_INT 1
22134: PPUSH
22135: CALL 7059 0 3
// end ;
22139: PPOPN 6
22141: END
// on UpgradeComplete ( building ) do var side , temp_list , base ;
22142: LD_INT 0
22144: PPUSH
22145: PPUSH
22146: PPUSH
// begin side = GetSide ( building ) ;
22147: LD_ADDR_VAR 0 2
22151: PUSH
22152: LD_VAR 0 1
22156: PPUSH
22157: CALL_OW 255
22161: ST_TO_ADDR
// if side = you then
22162: LD_VAR 0 2
22166: PUSH
22167: LD_EXP 3
22171: EQUAL
22172: IFFALSE 22176
// exit ;
22174: GO 22217
// base = FindBase ( building ) ;
22176: LD_ADDR_VAR 0 4
22180: PUSH
22181: LD_VAR 0 1
22185: PPUSH
22186: CALL 12551 0 1
22190: ST_TO_ADDR
// if base = 0 then
22191: LD_VAR 0 4
22195: PUSH
22196: LD_INT 0
22198: EQUAL
22199: IFFALSE 22203
// exit ;
22201: GO 22217
// BuildUpgradeCommon ( base , building ) ;
22203: LD_VAR 0 4
22207: PPUSH
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL 22220 0 2
// end ;
22217: PPOPN 4
22219: END
// function BuildUpgradeCommon ( base , building ) ; begin
22220: LD_INT 0
22222: PPUSH
// if GetBType ( building ) = ai_upcoming_building_data [ base ] [ 4 ] then
22223: LD_VAR 0 2
22227: PPUSH
22228: CALL_OW 266
22232: PUSH
22233: LD_EXP 47
22237: PUSH
22238: LD_VAR 0 1
22242: ARRAY
22243: PUSH
22244: LD_INT 4
22246: ARRAY
22247: EQUAL
22248: IFFALSE 22272
// ai_upcoming_building_data = Replace ( ai_upcoming_building_data , base , [ ] ) ;
22250: LD_ADDR_EXP 47
22254: PUSH
22255: LD_EXP 47
22259: PPUSH
22260: LD_VAR 0 1
22264: PPUSH
22265: EMPTY
22266: PPUSH
22267: CALL_OW 1
22271: ST_TO_ADDR
// ai_building_under_construction = Replace ( ai_building_under_construction , base , 0 ) ;
22272: LD_ADDR_EXP 43
22276: PUSH
22277: LD_EXP 43
22281: PPUSH
22282: LD_VAR 0 1
22286: PPUSH
22287: LD_INT 0
22289: PPUSH
22290: CALL_OW 1
22294: ST_TO_ADDR
// end ;
22295: LD_VAR 0 3
22299: RET
// on BuildingCaptured ( captured_building , building_former_side , capturing_unit ) do var temp_list , base ;
22300: LD_INT 0
22302: PPUSH
22303: PPUSH
// begin if captured_building in ai_depot then
22304: LD_VAR 0 1
22308: PUSH
22309: LD_EXP 35
22313: IN
22314: IFFALSE 22629
// begin case captured_building of ai_depot [ 1 ] :
22316: LD_VAR 0 1
22320: PUSH
22321: LD_EXP 35
22325: PUSH
22326: LD_INT 1
22328: ARRAY
22329: DOUBLE
22330: EQUAL
22331: IFTRUE 22335
22333: GO 22430
22335: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22336: LD_VAR 0 1
22340: PPUSH
22341: CALL_OW 274
22345: PPUSH
22346: LD_INT 1
22348: PPUSH
22349: LD_INT 200
22351: PUSH
22352: LD_INT 0
22354: PPUSH
22355: LD_INT 7
22357: PPUSH
22358: CALL_OW 12
22362: PUSH
22363: LD_INT 10
22365: MUL
22366: PLUS
22367: PPUSH
22368: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 0 ) ;
22372: LD_VAR 0 1
22376: PPUSH
22377: CALL_OW 274
22381: PPUSH
22382: LD_INT 2
22384: PPUSH
22385: LD_INT 0
22387: PPUSH
22388: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22392: LD_VAR 0 1
22396: PPUSH
22397: CALL_OW 274
22401: PPUSH
22402: LD_INT 3
22404: PPUSH
22405: LD_INT 80
22407: PUSH
22408: LD_INT 0
22410: PPUSH
22411: LD_INT 10
22413: PPUSH
22414: CALL_OW 12
22418: PUSH
22419: LD_INT 5
22421: MUL
22422: PLUS
22423: PPUSH
22424: CALL_OW 277
// end ; ai_depot [ 2 ] :
22428: GO 22629
22430: LD_EXP 35
22434: PUSH
22435: LD_INT 2
22437: ARRAY
22438: DOUBLE
22439: EQUAL
22440: IFTRUE 22444
22442: GO 22507
22444: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 100 ) ;
22445: LD_VAR 0 1
22449: PPUSH
22450: CALL_OW 274
22454: PPUSH
22455: LD_INT 1
22457: PPUSH
22458: LD_INT 100
22460: PPUSH
22461: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 55 ) ;
22465: LD_VAR 0 1
22469: PPUSH
22470: CALL_OW 274
22474: PPUSH
22475: LD_INT 2
22477: PPUSH
22478: LD_INT 55
22480: PPUSH
22481: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 20 ) ;
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 274
22494: PPUSH
22495: LD_INT 3
22497: PPUSH
22498: LD_INT 20
22500: PPUSH
22501: CALL_OW 277
// end ; ai_depot [ 3 ] :
22505: GO 22629
22507: LD_EXP 35
22511: PUSH
22512: LD_INT 3
22514: ARRAY
22515: DOUBLE
22516: EQUAL
22517: IFTRUE 22521
22519: GO 22628
22521: POP
// begin SetResourceType ( GetBase ( captured_building ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22522: LD_VAR 0 1
22526: PPUSH
22527: CALL_OW 274
22531: PPUSH
22532: LD_INT 1
22534: PPUSH
22535: LD_INT 200
22537: PUSH
22538: LD_INT 0
22540: PPUSH
22541: LD_INT 7
22543: PPUSH
22544: CALL_OW 12
22548: PUSH
22549: LD_INT 10
22551: MUL
22552: PLUS
22553: PPUSH
22554: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_oil , 400 + Rand ( 0 , 100 ) ) ;
22558: LD_VAR 0 1
22562: PPUSH
22563: CALL_OW 274
22567: PPUSH
22568: LD_INT 2
22570: PPUSH
22571: LD_INT 400
22573: PUSH
22574: LD_INT 0
22576: PPUSH
22577: LD_INT 100
22579: PPUSH
22580: CALL_OW 12
22584: PLUS
22585: PPUSH
22586: CALL_OW 277
// SetResourceType ( GetBase ( captured_building ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22590: LD_VAR 0 1
22594: PPUSH
22595: CALL_OW 274
22599: PPUSH
22600: LD_INT 3
22602: PPUSH
22603: LD_INT 80
22605: PUSH
22606: LD_INT 0
22608: PPUSH
22609: LD_INT 10
22611: PPUSH
22612: CALL_OW 12
22616: PUSH
22617: LD_INT 5
22619: MUL
22620: PLUS
22621: PPUSH
22622: CALL_OW 277
// end ; end ;
22626: GO 22629
22628: POP
// end ; base = FindBase ( captured_building ) ;
22629: LD_ADDR_VAR 0 5
22633: PUSH
22634: LD_VAR 0 1
22638: PPUSH
22639: CALL 12551 0 1
22643: ST_TO_ADDR
// if base = 0 then
22644: LD_VAR 0 5
22648: PUSH
22649: LD_INT 0
22651: EQUAL
22652: IFFALSE 22656
// exit ;
22654: GO 22887
// if building_former_side = GetBaseSide ( base ) then
22656: LD_VAR 0 2
22660: PUSH
22661: LD_VAR 0 5
22665: PPUSH
22666: CALL 12403 0 1
22670: EQUAL
22671: IFFALSE 22754
// begin if captured_building in ai_all_buildings [ base ] then
22673: LD_VAR 0 1
22677: PUSH
22678: LD_EXP 45
22682: PUSH
22683: LD_VAR 0 5
22687: ARRAY
22688: IN
22689: IFFALSE 22752
// begin RemoveBuildingFromVariables ( base , captured_building ) ;
22691: LD_VAR 0 5
22695: PPUSH
22696: LD_VAR 0 1
22700: PPUSH
22701: CALL 11030 0 2
// temp_list = ai_captured_buildings [ base ] ^ captured_building ;
22705: LD_ADDR_VAR 0 4
22709: PUSH
22710: LD_EXP 79
22714: PUSH
22715: LD_VAR 0 5
22719: ARRAY
22720: PUSH
22721: LD_VAR 0 1
22725: ADD
22726: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
22727: LD_ADDR_EXP 79
22731: PUSH
22732: LD_EXP 79
22736: PPUSH
22737: LD_VAR 0 5
22741: PPUSH
22742: LD_VAR 0 4
22746: PPUSH
22747: CALL_OW 1
22751: ST_TO_ADDR
// end ; end else
22752: GO 22887
// begin if GetSide ( captured_building ) = GetBaseSide ( base ) then
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 255
22763: PUSH
22764: LD_VAR 0 5
22768: PPUSH
22769: CALL 12403 0 1
22773: EQUAL
22774: IFFALSE 22887
// begin temp_list = ai_all_buildings [ base ] ^ captured_building ;
22776: LD_ADDR_VAR 0 4
22780: PUSH
22781: LD_EXP 45
22785: PUSH
22786: LD_VAR 0 5
22790: ARRAY
22791: PUSH
22792: LD_VAR 0 1
22796: ADD
22797: ST_TO_ADDR
// ai_all_buildings = Replace ( ai_all_buildings , base , temp_list ) ;
22798: LD_ADDR_EXP 45
22802: PUSH
22803: LD_EXP 45
22807: PPUSH
22808: LD_VAR 0 5
22812: PPUSH
22813: LD_VAR 0 4
22817: PPUSH
22818: CALL_OW 1
22822: ST_TO_ADDR
// UpdateBuildingBasicVariables ( base , captured_building , true ) ;
22823: LD_VAR 0 5
22827: PPUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: LD_INT 1
22835: PPUSH
22836: CALL 7059 0 3
// temp_list = ai_captured_buildings [ base ] diff captured_building ;
22840: LD_ADDR_VAR 0 4
22844: PUSH
22845: LD_EXP 79
22849: PUSH
22850: LD_VAR 0 5
22854: ARRAY
22855: PUSH
22856: LD_VAR 0 1
22860: DIFF
22861: ST_TO_ADDR
// ai_captured_buildings = Replace ( ai_captured_buildings , base , temp_list ) ;
22862: LD_ADDR_EXP 79
22866: PUSH
22867: LD_EXP 79
22871: PPUSH
22872: LD_VAR 0 5
22876: PPUSH
22877: LD_VAR 0 4
22881: PPUSH
22882: CALL_OW 1
22886: ST_TO_ADDR
// end ; end ; end ;
22887: PPOPN 5
22889: END
// on UnitGoesToRed ( un ) do begin if un in ai_depot then
22890: LD_VAR 0 1
22894: PUSH
22895: LD_EXP 35
22899: IN
22900: IFFALSE 23215
// begin case un of ai_depot [ 1 ] :
22902: LD_VAR 0 1
22906: PUSH
22907: LD_EXP 35
22911: PUSH
22912: LD_INT 1
22914: ARRAY
22915: DOUBLE
22916: EQUAL
22917: IFTRUE 22921
22919: GO 23016
22921: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
22922: LD_VAR 0 1
22926: PPUSH
22927: CALL_OW 274
22931: PPUSH
22932: LD_INT 1
22934: PPUSH
22935: LD_INT 200
22937: PUSH
22938: LD_INT 0
22940: PPUSH
22941: LD_INT 7
22943: PPUSH
22944: CALL_OW 12
22948: PUSH
22949: LD_INT 10
22951: MUL
22952: PLUS
22953: PPUSH
22954: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 0 ) ;
22958: LD_VAR 0 1
22962: PPUSH
22963: CALL_OW 274
22967: PPUSH
22968: LD_INT 2
22970: PPUSH
22971: LD_INT 0
22973: PPUSH
22974: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL_OW 274
22987: PPUSH
22988: LD_INT 3
22990: PPUSH
22991: LD_INT 80
22993: PUSH
22994: LD_INT 0
22996: PPUSH
22997: LD_INT 10
22999: PPUSH
23000: CALL_OW 12
23004: PUSH
23005: LD_INT 5
23007: MUL
23008: PLUS
23009: PPUSH
23010: CALL_OW 277
// end ; ai_depot [ 2 ] :
23014: GO 23215
23016: LD_EXP 35
23020: PUSH
23021: LD_INT 2
23023: ARRAY
23024: DOUBLE
23025: EQUAL
23026: IFTRUE 23030
23028: GO 23093
23030: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 100 ) ;
23031: LD_VAR 0 1
23035: PPUSH
23036: CALL_OW 274
23040: PPUSH
23041: LD_INT 1
23043: PPUSH
23044: LD_INT 100
23046: PPUSH
23047: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 55 ) ;
23051: LD_VAR 0 1
23055: PPUSH
23056: CALL_OW 274
23060: PPUSH
23061: LD_INT 2
23063: PPUSH
23064: LD_INT 55
23066: PPUSH
23067: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 20 ) ;
23071: LD_VAR 0 1
23075: PPUSH
23076: CALL_OW 274
23080: PPUSH
23081: LD_INT 3
23083: PPUSH
23084: LD_INT 20
23086: PPUSH
23087: CALL_OW 277
// end ; ai_depot [ 3 ] :
23091: GO 23215
23093: LD_EXP 35
23097: PUSH
23098: LD_INT 3
23100: ARRAY
23101: DOUBLE
23102: EQUAL
23103: IFTRUE 23107
23105: GO 23214
23107: POP
// begin SetResourceType ( GetBase ( un ) , mat_cans , 200 + Rand ( 0 , 7 ) * 10 ) ;
23108: LD_VAR 0 1
23112: PPUSH
23113: CALL_OW 274
23117: PPUSH
23118: LD_INT 1
23120: PPUSH
23121: LD_INT 200
23123: PUSH
23124: LD_INT 0
23126: PPUSH
23127: LD_INT 7
23129: PPUSH
23130: CALL_OW 12
23134: PUSH
23135: LD_INT 10
23137: MUL
23138: PLUS
23139: PPUSH
23140: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 400 + Rand ( 0 , 100 ) ) ;
23144: LD_VAR 0 1
23148: PPUSH
23149: CALL_OW 274
23153: PPUSH
23154: LD_INT 2
23156: PPUSH
23157: LD_INT 400
23159: PUSH
23160: LD_INT 0
23162: PPUSH
23163: LD_INT 100
23165: PPUSH
23166: CALL_OW 12
23170: PLUS
23171: PPUSH
23172: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 80 + Rand ( 0 , 10 ) * 5 ) ;
23176: LD_VAR 0 1
23180: PPUSH
23181: CALL_OW 274
23185: PPUSH
23186: LD_INT 3
23188: PPUSH
23189: LD_INT 80
23191: PUSH
23192: LD_INT 0
23194: PPUSH
23195: LD_INT 10
23197: PPUSH
23198: CALL_OW 12
23202: PUSH
23203: LD_INT 5
23205: MUL
23206: PLUS
23207: PPUSH
23208: CALL_OW 277
// end ; end ;
23212: GO 23215
23214: POP
// end ; end ;
23215: PPOPN 1
23217: END
// export function GetHumansOutOfUnits ( un_list ) ; var i ; begin
23218: LD_INT 0
23220: PPUSH
23221: PPUSH
// result = [ ] ;
23222: LD_ADDR_VAR 0 2
23226: PUSH
23227: EMPTY
23228: ST_TO_ADDR
// for i in un_list do
23229: LD_ADDR_VAR 0 3
23233: PUSH
23234: LD_VAR 0 1
23238: PUSH
23239: FOR_IN
23240: IFFALSE 23316
// case GetType ( IsInUnit ( i ) ) of unit_building :
23242: LD_VAR 0 3
23246: PPUSH
23247: CALL_OW 310
23251: PPUSH
23252: CALL_OW 247
23256: PUSH
23257: LD_INT 3
23259: DOUBLE
23260: EQUAL
23261: IFTRUE 23265
23263: GO 23277
23265: POP
// ComExitBuilding ( i ) ; unit_vehicle :
23266: LD_VAR 0 3
23270: PPUSH
23271: CALL_OW 122
23275: GO 23314
23277: LD_INT 2
23279: DOUBLE
23280: EQUAL
23281: IFTRUE 23285
23283: GO 23297
23285: POP
// ComExitVehicle ( i ) ; else
23286: LD_VAR 0 3
23290: PPUSH
23291: CALL_OW 121
23295: GO 23314
23297: POP
// result = result ^ i ; end ;
23298: LD_ADDR_VAR 0 2
23302: PUSH
23303: LD_VAR 0 2
23307: PUSH
23308: LD_VAR 0 3
23312: ADD
23313: ST_TO_ADDR
23314: GO 23239
23316: POP
23317: POP
// end ;
23318: LD_VAR 0 2
23322: RET
// export function BaseUnderAttack ( base , attack_side ) ; var area , i , val , def_side , temp_list ; begin
23323: LD_INT 0
23325: PPUSH
23326: PPUSH
23327: PPUSH
23328: PPUSH
23329: PPUSH
23330: PPUSH
// result = false ;
23331: LD_ADDR_VAR 0 3
23335: PUSH
23336: LD_INT 0
23338: ST_TO_ADDR
// def_side = GetBaseSide ( base ) ;
23339: LD_ADDR_VAR 0 7
23343: PUSH
23344: LD_VAR 0 1
23348: PPUSH
23349: CALL 12403 0 1
23353: ST_TO_ADDR
// area = GetBaseArea ( base ) ;
23354: LD_ADDR_VAR 0 4
23358: PUSH
23359: LD_VAR 0 1
23363: PPUSH
23364: CALL 12332 0 1
23368: ST_TO_ADDR
// if attack_side = def_side then
23369: LD_VAR 0 2
23373: PUSH
23374: LD_VAR 0 7
23378: EQUAL
23379: IFFALSE 23383
// exit ;
23381: GO 23902
// if attack_side = - 1 then
23383: LD_VAR 0 2
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: EQUAL
23392: IFFALSE 23658
// begin if FilterAllUnits ( [ [ f_enemy , def_side ] , [ f_inarea , area ] ] ) > 0 then
23394: LD_INT 81
23396: PUSH
23397: LD_VAR 0 7
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 95
23408: PUSH
23409: LD_VAR 0 4
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PPUSH
23422: CALL_OW 69
23426: PUSH
23427: LD_INT 0
23429: GREATER
23430: IFFALSE 23442
// begin result = true ;
23432: LD_ADDR_VAR 0 3
23436: PUSH
23437: LD_INT 1
23439: ST_TO_ADDR
// exit ;
23440: GO 23902
// end ; val = true ;
23442: LD_ADDR_VAR 0 6
23446: PUSH
23447: LD_INT 1
23449: ST_TO_ADDR
// for i in ai_contact_time [ def_side ] do
23450: LD_ADDR_VAR 0 5
23454: PUSH
23455: LD_EXP 76
23459: PUSH
23460: LD_VAR 0 7
23464: ARRAY
23465: PUSH
23466: FOR_IN
23467: IFFALSE 23491
// if i < 0 0$10 then
23469: LD_VAR 0 5
23473: PUSH
23474: LD_INT 350
23476: LESS
23477: IFFALSE 23489
// begin val = false ;
23479: LD_ADDR_VAR 0 6
23483: PUSH
23484: LD_INT 0
23486: ST_TO_ADDR
// break ;
23487: GO 23491
// end ;
23489: GO 23466
23491: POP
23492: POP
// if ContactTime ( def_side ) >= 0 0$10 and val then
23493: LD_VAR 0 7
23497: PPUSH
23498: CALL_OW 462
23502: PUSH
23503: LD_INT 350
23505: GREATEREQUAL
23506: PUSH
23507: LD_VAR 0 6
23511: AND
23512: IFFALSE 23516
// exit ;
23514: GO 23902
// temp_list = [ ] ;
23516: LD_ADDR_VAR 0 8
23520: PUSH
23521: EMPTY
23522: ST_TO_ADDR
// for i in ( ai_bases diff base ) do
23523: LD_ADDR_VAR 0 5
23527: PUSH
23528: LD_EXP 59
23532: PUSH
23533: LD_VAR 0 1
23537: DIFF
23538: PUSH
23539: FOR_IN
23540: IFFALSE 23586
// temp_list = Insert ( temp_list , 1 , [ f_not , [ f_inarea , GetBaseArea ( i ) ] ] ) ;
23542: LD_ADDR_VAR 0 8
23546: PUSH
23547: LD_VAR 0 8
23551: PPUSH
23552: LD_INT 1
23554: PPUSH
23555: LD_INT 3
23557: PUSH
23558: LD_INT 95
23560: PUSH
23561: LD_VAR 0 5
23565: PPUSH
23566: CALL 12332 0 1
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PPUSH
23579: CALL_OW 2
23583: ST_TO_ADDR
23584: GO 23539
23586: POP
23587: POP
// temp_list = FilterAllUnits ( [ [ f_enemy , def_side ] , [ f_not , [ f_type , unit_building ] ] ] ^ temp_list ) ;
23588: LD_ADDR_VAR 0 8
23592: PUSH
23593: LD_INT 81
23595: PUSH
23596: LD_VAR 0 7
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 3
23607: PUSH
23608: LD_INT 21
23610: PUSH
23611: LD_INT 3
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_VAR 0 8
23630: ADD
23631: PPUSH
23632: CALL_OW 69
23636: ST_TO_ADDR
// if not AnyNearBaseArea ( temp_list , base ) then
23637: LD_VAR 0 8
23641: PPUSH
23642: LD_VAR 0 1
23646: PPUSH
23647: CALL 23978 0 2
23651: NOT
23652: IFFALSE 23656
// exit ;
23654: GO 23902
// end else
23656: GO 23894
// begin if FilterAllUnits ( [ [ f_side , attack_side ] , [ f_inarea , area ] ] ) > 0 then
23658: LD_INT 22
23660: PUSH
23661: LD_VAR 0 2
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 95
23672: PUSH
23673: LD_VAR 0 4
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PPUSH
23686: CALL_OW 69
23690: PUSH
23691: LD_INT 0
23693: GREATER
23694: IFFALSE 23706
// begin result = true ;
23696: LD_ADDR_VAR 0 3
23700: PUSH
23701: LD_INT 1
23703: ST_TO_ADDR
// exit ;
23704: GO 23902
// end ; if ContactTime ( [ def_side , attack_side ] ) >= 0 0$10 and ai_contact_time [ def_side ] [ attack_side ] >= 0 0$10 then
23706: LD_VAR 0 7
23710: PUSH
23711: LD_VAR 0 2
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PPUSH
23720: CALL_OW 462
23724: PUSH
23725: LD_INT 350
23727: GREATEREQUAL
23728: PUSH
23729: LD_EXP 76
23733: PUSH
23734: LD_VAR 0 7
23738: ARRAY
23739: PUSH
23740: LD_VAR 0 2
23744: ARRAY
23745: PUSH
23746: LD_INT 350
23748: GREATEREQUAL
23749: AND
23750: IFFALSE 23754
// exit ;
23752: GO 23902
// temp_list = [ ] ;
23754: LD_ADDR_VAR 0 8
23758: PUSH
23759: EMPTY
23760: ST_TO_ADDR
// for i in ( ai_bases diff base ) do
23761: LD_ADDR_VAR 0 5
23765: PUSH
23766: LD_EXP 59
23770: PUSH
23771: LD_VAR 0 1
23775: DIFF
23776: PUSH
23777: FOR_IN
23778: IFFALSE 23824
// temp_list = Insert ( temp_list , 1 , [ f_not , [ f_inarea , GetBaseArea ( i ) ] ] ) ;
23780: LD_ADDR_VAR 0 8
23784: PUSH
23785: LD_VAR 0 8
23789: PPUSH
23790: LD_INT 1
23792: PPUSH
23793: LD_INT 3
23795: PUSH
23796: LD_INT 95
23798: PUSH
23799: LD_VAR 0 5
23803: PPUSH
23804: CALL 12332 0 1
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PPUSH
23817: CALL_OW 2
23821: ST_TO_ADDR
23822: GO 23777
23824: POP
23825: POP
// temp_list = FilterAllUnits ( [ [ f_side , attack_side ] , [ f_not , [ f_type , unit_building ] ] ] ^ temp_list ) ;
23826: LD_ADDR_VAR 0 8
23830: PUSH
23831: LD_INT 22
23833: PUSH
23834: LD_VAR 0 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 3
23845: PUSH
23846: LD_INT 21
23848: PUSH
23849: LD_INT 3
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_VAR 0 8
23868: ADD
23869: PPUSH
23870: CALL_OW 69
23874: ST_TO_ADDR
// if not AnyNearBaseArea ( temp_list , base ) then
23875: LD_VAR 0 8
23879: PPUSH
23880: LD_VAR 0 1
23884: PPUSH
23885: CALL 23978 0 2
23889: NOT
23890: IFFALSE 23894
// exit ;
23892: GO 23902
// end ; result = true ;
23894: LD_ADDR_VAR 0 3
23898: PUSH
23899: LD_INT 1
23901: ST_TO_ADDR
// end ;
23902: LD_VAR 0 3
23906: RET
// export function ListFilterNearArea ( list , area ) ; var i ; begin
23907: LD_INT 0
23909: PPUSH
23910: PPUSH
// result = [ ] ;
23911: LD_ADDR_VAR 0 3
23915: PUSH
23916: EMPTY
23917: ST_TO_ADDR
// for i in list do
23918: LD_ADDR_VAR 0 4
23922: PUSH
23923: LD_VAR 0 1
23927: PUSH
23928: FOR_IN
23929: IFFALSE 23971
// if GetDistUnitArea ( i , area ) <= ai_near_base_dist then
23931: LD_VAR 0 4
23935: PPUSH
23936: LD_VAR 0 2
23940: PPUSH
23941: CALL_OW 299
23945: PUSH
23946: LD_EXP 53
23950: LESSEQUAL
23951: IFFALSE 23969
// result = result ^ i ;
23953: LD_ADDR_VAR 0 3
23957: PUSH
23958: LD_VAR 0 3
23962: PUSH
23963: LD_VAR 0 4
23967: ADD
23968: ST_TO_ADDR
23969: GO 23928
23971: POP
23972: POP
// end ;
23973: LD_VAR 0 3
23977: RET
// function AnyNearBaseArea ( list , base ) ; var i , area ; begin
23978: LD_INT 0
23980: PPUSH
23981: PPUSH
23982: PPUSH
// result = false ;
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_INT 0
23990: ST_TO_ADDR
// area = GetBaseArea ( base ) ;
23991: LD_ADDR_VAR 0 5
23995: PUSH
23996: LD_VAR 0 2
24000: PPUSH
24001: CALL 12332 0 1
24005: ST_TO_ADDR
// for i in list do
24006: LD_ADDR_VAR 0 4
24010: PUSH
24011: LD_VAR 0 1
24015: PUSH
24016: FOR_IN
24017: IFFALSE 24053
// if GetDistUnitArea ( i , area ) <= ai_near_base_dist then
24019: LD_VAR 0 4
24023: PPUSH
24024: LD_VAR 0 5
24028: PPUSH
24029: CALL_OW 299
24033: PUSH
24034: LD_EXP 53
24038: LESSEQUAL
24039: IFFALSE 24051
// begin result = true ;
24041: LD_ADDR_VAR 0 3
24045: PUSH
24046: LD_INT 1
24048: ST_TO_ADDR
// break ;
24049: GO 24053
// end ;
24051: GO 24016
24053: POP
24054: POP
// end ;
24055: LD_VAR 0 3
24059: RET
// on Command ( com ) do var i , temp_list , hex_list , un , k , target_hex ;
24060: LD_INT 0
24062: PPUSH
24063: PPUSH
24064: PPUSH
24065: PPUSH
24066: PPUSH
24067: PPUSH
// begin CheckCamerasOnCommand ( com ) ;
24068: LD_VAR 0 1
24072: PPUSH
24073: CALL 44963 0 1
// if com = 124 then
24077: LD_VAR 0 1
24081: PUSH
24082: LD_INT 124
24084: EQUAL
24085: IFFALSE 24496
// begin for i in FilterAllUnits ( [ f_side , you ] ) do
24087: LD_ADDR_VAR 0 2
24091: PUSH
24092: LD_INT 22
24094: PUSH
24095: LD_EXP 3
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PPUSH
24104: CALL_OW 69
24108: PUSH
24109: FOR_IN
24110: IFFALSE 24494
// if IsSelected ( i ) and HasTask ( i ) then
24112: LD_VAR 0 2
24116: PPUSH
24117: CALL_OW 306
24121: PUSH
24122: LD_VAR 0 2
24126: PPUSH
24127: CALL_OW 314
24131: AND
24132: IFFALSE 24492
// begin target_hex = [ ] ;
24134: LD_ADDR_VAR 0 7
24138: PUSH
24139: EMPTY
24140: ST_TO_ADDR
// for k in GetTaskList ( i ) do
24141: LD_ADDR_VAR 0 6
24145: PUSH
24146: LD_VAR 0 2
24150: PPUSH
24151: CALL_OW 437
24155: PUSH
24156: FOR_IN
24157: IFFALSE 24204
// if k [ 1 ] = | then
24159: LD_VAR 0 6
24163: PUSH
24164: LD_INT 1
24166: ARRAY
24167: PUSH
24168: LD_STRING |
24170: EQUAL
24171: IFFALSE 24202
// begin target_hex = [ k [ 2 ] , k [ 3 ] ] ;
24173: LD_ADDR_VAR 0 7
24177: PUSH
24178: LD_VAR 0 6
24182: PUSH
24183: LD_INT 2
24185: ARRAY
24186: PUSH
24187: LD_VAR 0 6
24191: PUSH
24192: LD_INT 3
24194: ARRAY
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: ST_TO_ADDR
// break ;
24200: GO 24204
// end ;
24202: GO 24156
24204: POP
24205: POP
// if target_hex > 0 then
24206: LD_VAR 0 7
24210: PUSH
24211: LD_INT 0
24213: GREATER
24214: IFFALSE 24492
// begin hex_list = target_hex ;
24216: LD_ADDR_VAR 0 4
24220: PUSH
24221: LD_VAR 0 7
24225: ST_TO_ADDR
// temp_list = [ ] ;
24226: LD_ADDR_VAR 0 3
24230: PUSH
24231: EMPTY
24232: ST_TO_ADDR
// for k = 0 to 5 do
24233: LD_ADDR_VAR 0 6
24237: PUSH
24238: DOUBLE
24239: LD_INT 0
24241: DEC
24242: ST_TO_ADDR
24243: LD_INT 5
24245: PUSH
24246: FOR_TO
24247: IFFALSE 24317
// temp_list = Insert ( temp_list , 1 , [ ShiftX ( hex_list [ 1 ] , k , 1 ) , ShiftY ( hex_list [ 2 ] , k , 1 ) ] ) ;
24249: LD_ADDR_VAR 0 3
24253: PUSH
24254: LD_VAR 0 3
24258: PPUSH
24259: LD_INT 1
24261: PPUSH
24262: LD_VAR 0 4
24266: PUSH
24267: LD_INT 1
24269: ARRAY
24270: PPUSH
24271: LD_VAR 0 6
24275: PPUSH
24276: LD_INT 1
24278: PPUSH
24279: CALL_OW 272
24283: PUSH
24284: LD_VAR 0 4
24288: PUSH
24289: LD_INT 2
24291: ARRAY
24292: PPUSH
24293: LD_VAR 0 6
24297: PPUSH
24298: LD_INT 1
24300: PPUSH
24301: CALL_OW 273
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PPUSH
24310: CALL_OW 2
24314: ST_TO_ADDR
24315: GO 24246
24317: POP
24318: POP
// hex_list = [ hex_list ] ^ temp_list ;
24319: LD_ADDR_VAR 0 4
24323: PUSH
24324: LD_VAR 0 4
24328: PUSH
24329: EMPTY
24330: LIST
24331: PUSH
24332: LD_VAR 0 3
24336: ADD
24337: ST_TO_ADDR
// temp_list = [ ] ;
24338: LD_ADDR_VAR 0 3
24342: PUSH
24343: EMPTY
24344: ST_TO_ADDR
// for k in hex_list do
24345: LD_ADDR_VAR 0 6
24349: PUSH
24350: LD_VAR 0 4
24354: PUSH
24355: FOR_IN
24356: IFFALSE 24490
// begin un = HexInfo ( k [ 1 ] , k [ 2 ] ) ;
24358: LD_ADDR_VAR 0 5
24362: PUSH
24363: LD_VAR 0 6
24367: PUSH
24368: LD_INT 1
24370: ARRAY
24371: PPUSH
24372: LD_VAR 0 6
24376: PUSH
24377: LD_INT 2
24379: ARRAY
24380: PPUSH
24381: CALL_OW 428
24385: ST_TO_ADDR
// if un > 0 and not un in temp_list then
24386: LD_VAR 0 5
24390: PUSH
24391: LD_INT 0
24393: GREATER
24394: PUSH
24395: LD_VAR 0 5
24399: PUSH
24400: LD_VAR 0 3
24404: IN
24405: NOT
24406: AND
24407: IFFALSE 24488
// begin ai_attack_ground_info_initial = Insert ( ai_attack_ground_info_initial , 1 , [ i , un , GetSide ( un ) , target_hex [ 1 ] , target_hex [ 2 ] ] ) ;
24409: LD_ADDR_EXP 77
24413: PUSH
24414: LD_EXP 77
24418: PPUSH
24419: LD_INT 1
24421: PPUSH
24422: LD_VAR 0 2
24426: PUSH
24427: LD_VAR 0 5
24431: PUSH
24432: LD_VAR 0 5
24436: PPUSH
24437: CALL_OW 255
24441: PUSH
24442: LD_VAR 0 7
24446: PUSH
24447: LD_INT 1
24449: ARRAY
24450: PUSH
24451: LD_VAR 0 7
24455: PUSH
24456: LD_INT 2
24458: ARRAY
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: PPUSH
24467: CALL_OW 2
24471: ST_TO_ADDR
// temp_list = temp_list ^ un ;
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: LD_VAR 0 3
24481: PUSH
24482: LD_VAR 0 5
24486: ADD
24487: ST_TO_ADDR
// end ; end ;
24488: GO 24355
24490: POP
24491: POP
// end ; end ;
24492: GO 24109
24494: POP
24495: POP
// end ; end ;
24496: PPOPN 7
24498: END
// every 0 0$1 + 0 0$0.1 do var a , b , temp_list , temp_list_2 , yup , i , t ;
24499: GO 24501
24501: DISABLE
24502: LD_INT 0
24504: PPUSH
24505: PPUSH
24506: PPUSH
24507: PPUSH
24508: PPUSH
24509: PPUSH
24510: PPUSH
// begin repeat wait ( 0 0$0.5 ) ;
24511: LD_INT 18
24513: PPUSH
24514: CALL_OW 67
// i = 1 ;
24518: LD_ADDR_VAR 0 6
24522: PUSH
24523: LD_INT 1
24525: ST_TO_ADDR
// while i <= ai_attack_ground_info_initial do
24526: LD_VAR 0 6
24530: PUSH
24531: LD_EXP 77
24535: LESSEQUAL
24536: IFFALSE 24699
// begin yup = false ;
24538: LD_ADDR_VAR 0 5
24542: PUSH
24543: LD_INT 0
24545: ST_TO_ADDR
// for t in GetTaskList ( ai_attack_ground_info_initial [ i ] [ 1 ] ) do
24546: LD_ADDR_VAR 0 7
24550: PUSH
24551: LD_EXP 77
24555: PUSH
24556: LD_VAR 0 6
24560: ARRAY
24561: PUSH
24562: LD_INT 1
24564: ARRAY
24565: PPUSH
24566: CALL_OW 437
24570: PUSH
24571: FOR_IN
24572: IFFALSE 24652
// if t [ 1 ] = | then
24574: LD_VAR 0 7
24578: PUSH
24579: LD_INT 1
24581: ARRAY
24582: PUSH
24583: LD_STRING |
24585: EQUAL
24586: IFFALSE 24650
// if t [ 2 ] = ai_attack_ground_info_initial [ i ] [ 4 ] and t [ 3 ] = ai_attack_ground_info_initial [ i ] [ 5 ] then
24588: LD_VAR 0 7
24592: PUSH
24593: LD_INT 2
24595: ARRAY
24596: PUSH
24597: LD_EXP 77
24601: PUSH
24602: LD_VAR 0 6
24606: ARRAY
24607: PUSH
24608: LD_INT 4
24610: ARRAY
24611: EQUAL
24612: PUSH
24613: LD_VAR 0 7
24617: PUSH
24618: LD_INT 3
24620: ARRAY
24621: PUSH
24622: LD_EXP 77
24626: PUSH
24627: LD_VAR 0 6
24631: ARRAY
24632: PUSH
24633: LD_INT 5
24635: ARRAY
24636: EQUAL
24637: AND
24638: IFFALSE 24650
// begin yup = true ;
24640: LD_ADDR_VAR 0 5
24644: PUSH
24645: LD_INT 1
24647: ST_TO_ADDR
// break ;
24648: GO 24652
// end ;
24650: GO 24571
24652: POP
24653: POP
// if not yup then
24654: LD_VAR 0 5
24658: NOT
24659: IFFALSE 24683
// begin ai_attack_ground_info_initial = Delete ( ai_attack_ground_info_initial , i ) ;
24661: LD_ADDR_EXP 77
24665: PUSH
24666: LD_EXP 77
24670: PPUSH
24671: LD_VAR 0 6
24675: PPUSH
24676: CALL_OW 3
24680: ST_TO_ADDR
// continue ;
24681: GO 24526
// end ; i = i + 1 ;
24683: LD_ADDR_VAR 0 6
24687: PUSH
24688: LD_VAR 0 6
24692: PUSH
24693: LD_INT 1
24695: PLUS
24696: ST_TO_ADDR
// end ;
24697: GO 24526
// i = 1 ;
24699: LD_ADDR_VAR 0 6
24703: PUSH
24704: LD_INT 1
24706: ST_TO_ADDR
// while i <= ai_attack_ground_info_sustain do
24707: LD_VAR 0 6
24711: PUSH
24712: LD_EXP 78
24716: LESSEQUAL
24717: IFFALSE 24880
// begin yup = false ;
24719: LD_ADDR_VAR 0 5
24723: PUSH
24724: LD_INT 0
24726: ST_TO_ADDR
// for t in GetTaskList ( ai_attack_ground_info_sustain [ i ] [ 1 ] ) do
24727: LD_ADDR_VAR 0 7
24731: PUSH
24732: LD_EXP 78
24736: PUSH
24737: LD_VAR 0 6
24741: ARRAY
24742: PUSH
24743: LD_INT 1
24745: ARRAY
24746: PPUSH
24747: CALL_OW 437
24751: PUSH
24752: FOR_IN
24753: IFFALSE 24833
// if t [ 1 ] = | then
24755: LD_VAR 0 7
24759: PUSH
24760: LD_INT 1
24762: ARRAY
24763: PUSH
24764: LD_STRING |
24766: EQUAL
24767: IFFALSE 24831
// if t [ 2 ] = ai_attack_ground_info_sustain [ i ] [ 4 ] and t [ 3 ] = ai_attack_ground_info_sustain [ i ] [ 5 ] then
24769: LD_VAR 0 7
24773: PUSH
24774: LD_INT 2
24776: ARRAY
24777: PUSH
24778: LD_EXP 78
24782: PUSH
24783: LD_VAR 0 6
24787: ARRAY
24788: PUSH
24789: LD_INT 4
24791: ARRAY
24792: EQUAL
24793: PUSH
24794: LD_VAR 0 7
24798: PUSH
24799: LD_INT 3
24801: ARRAY
24802: PUSH
24803: LD_EXP 78
24807: PUSH
24808: LD_VAR 0 6
24812: ARRAY
24813: PUSH
24814: LD_INT 5
24816: ARRAY
24817: EQUAL
24818: AND
24819: IFFALSE 24831
// begin yup = true ;
24821: LD_ADDR_VAR 0 5
24825: PUSH
24826: LD_INT 1
24828: ST_TO_ADDR
// break ;
24829: GO 24833
// end ;
24831: GO 24752
24833: POP
24834: POP
// if not yup then
24835: LD_VAR 0 5
24839: NOT
24840: IFFALSE 24864
// begin ai_attack_ground_info_sustain = Delete ( ai_attack_ground_info_sustain , i ) ;
24842: LD_ADDR_EXP 78
24846: PUSH
24847: LD_EXP 78
24851: PPUSH
24852: LD_VAR 0 6
24856: PPUSH
24857: CALL_OW 3
24861: ST_TO_ADDR
// continue ;
24862: GO 24707
// end ; i = i + 1 ;
24864: LD_ADDR_VAR 0 6
24868: PUSH
24869: LD_VAR 0 6
24873: PUSH
24874: LD_INT 1
24876: PLUS
24877: ST_TO_ADDR
// end ;
24878: GO 24707
// temp_list = ai_contact_time ;
24880: LD_ADDR_VAR 0 3
24884: PUSH
24885: LD_EXP 76
24889: ST_TO_ADDR
// for a = 1 to temp_list do
24890: LD_ADDR_VAR 0 1
24894: PUSH
24895: DOUBLE
24896: LD_INT 1
24898: DEC
24899: ST_TO_ADDR
24900: LD_VAR 0 3
24904: PUSH
24905: FOR_TO
24906: IFFALSE 25032
// for b = 1 to temp_list [ a ] do
24908: LD_ADDR_VAR 0 2
24912: PUSH
24913: DOUBLE
24914: LD_INT 1
24916: DEC
24917: ST_TO_ADDR
24918: LD_VAR 0 3
24922: PUSH
24923: LD_VAR 0 1
24927: ARRAY
24928: PUSH
24929: FOR_TO
24930: IFFALSE 25028
// if temp_list [ a ] [ b ] < 100000 then
24932: LD_VAR 0 3
24936: PUSH
24937: LD_VAR 0 1
24941: ARRAY
24942: PUSH
24943: LD_VAR 0 2
24947: ARRAY
24948: PUSH
24949: LD_INT 100000
24951: LESS
24952: IFFALSE 25026
// begin temp_list_2 = Replace ( ai_contact_time [ a ] , b , temp_list [ a ] [ b ] + 0 0$0.5 ) ;
24954: LD_ADDR_VAR 0 4
24958: PUSH
24959: LD_EXP 76
24963: PUSH
24964: LD_VAR 0 1
24968: ARRAY
24969: PPUSH
24970: LD_VAR 0 2
24974: PPUSH
24975: LD_VAR 0 3
24979: PUSH
24980: LD_VAR 0 1
24984: ARRAY
24985: PUSH
24986: LD_VAR 0 2
24990: ARRAY
24991: PUSH
24992: LD_INT 18
24994: PLUS
24995: PPUSH
24996: CALL_OW 1
25000: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a , temp_list_2 ) ;
25001: LD_ADDR_EXP 76
25005: PUSH
25006: LD_EXP 76
25010: PPUSH
25011: LD_VAR 0 1
25015: PPUSH
25016: LD_VAR 0 4
25020: PPUSH
25021: CALL_OW 1
25025: ST_TO_ADDR
// end ;
25026: GO 24929
25028: POP
25029: POP
25030: GO 24905
25032: POP
25033: POP
// for a in ai_attack_ground_info_initial do
25034: LD_ADDR_VAR 0 1
25038: PUSH
25039: LD_EXP 77
25043: PUSH
25044: FOR_IN
25045: IFFALSE 25251
// begin if IsDead ( a [ 2 ] ) or UnitShoot ( a [ 2 ] ) = a [ 1 ] then
25047: LD_VAR 0 1
25051: PUSH
25052: LD_INT 2
25054: ARRAY
25055: PPUSH
25056: CALL_OW 301
25060: PUSH
25061: LD_VAR 0 1
25065: PUSH
25066: LD_INT 2
25068: ARRAY
25069: PPUSH
25070: CALL_OW 504
25074: PUSH
25075: LD_VAR 0 1
25079: PUSH
25080: LD_INT 1
25082: ARRAY
25083: EQUAL
25084: OR
25085: IFFALSE 25249
// begin temp_list = Replace ( ai_contact_time [ you ] , a [ 3 ] , 0 ) ;
25087: LD_ADDR_VAR 0 3
25091: PUSH
25092: LD_EXP 76
25096: PUSH
25097: LD_EXP 3
25101: ARRAY
25102: PPUSH
25103: LD_VAR 0 1
25107: PUSH
25108: LD_INT 3
25110: ARRAY
25111: PPUSH
25112: LD_INT 0
25114: PPUSH
25115: CALL_OW 1
25119: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , you , temp_list ) ;
25120: LD_ADDR_EXP 76
25124: PUSH
25125: LD_EXP 76
25129: PPUSH
25130: LD_EXP 3
25134: PPUSH
25135: LD_VAR 0 3
25139: PPUSH
25140: CALL_OW 1
25144: ST_TO_ADDR
// temp_list = Replace ( ai_contact_time [ a [ 3 ] ] , you , 0 ) ;
25145: LD_ADDR_VAR 0 3
25149: PUSH
25150: LD_EXP 76
25154: PUSH
25155: LD_VAR 0 1
25159: PUSH
25160: LD_INT 3
25162: ARRAY
25163: ARRAY
25164: PPUSH
25165: LD_EXP 3
25169: PPUSH
25170: LD_INT 0
25172: PPUSH
25173: CALL_OW 1
25177: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a [ 3 ] , temp_list ) ;
25178: LD_ADDR_EXP 76
25182: PUSH
25183: LD_EXP 76
25187: PPUSH
25188: LD_VAR 0 1
25192: PUSH
25193: LD_INT 3
25195: ARRAY
25196: PPUSH
25197: LD_VAR 0 3
25201: PPUSH
25202: CALL_OW 1
25206: ST_TO_ADDR
// ai_attack_ground_info_initial = ai_attack_ground_info_initial diff [ a ] ;
25207: LD_ADDR_EXP 77
25211: PUSH
25212: LD_EXP 77
25216: PUSH
25217: LD_VAR 0 1
25221: PUSH
25222: EMPTY
25223: LIST
25224: DIFF
25225: ST_TO_ADDR
// ai_attack_ground_info_sustain = Insert ( ai_attack_ground_info_sustain , 1 , a ) ;
25226: LD_ADDR_EXP 78
25230: PUSH
25231: LD_EXP 78
25235: PPUSH
25236: LD_INT 1
25238: PPUSH
25239: LD_VAR 0 1
25243: PPUSH
25244: CALL_OW 2
25248: ST_TO_ADDR
// end ; end ;
25249: GO 25044
25251: POP
25252: POP
// for a in ai_attack_ground_info_sustain do
25253: LD_ADDR_VAR 0 1
25257: PUSH
25258: LD_EXP 78
25262: PUSH
25263: FOR_IN
25264: IFFALSE 25388
// begin temp_list = Replace ( ai_contact_time [ you ] , a [ 3 ] , 0 ) ;
25266: LD_ADDR_VAR 0 3
25270: PUSH
25271: LD_EXP 76
25275: PUSH
25276: LD_EXP 3
25280: ARRAY
25281: PPUSH
25282: LD_VAR 0 1
25286: PUSH
25287: LD_INT 3
25289: ARRAY
25290: PPUSH
25291: LD_INT 0
25293: PPUSH
25294: CALL_OW 1
25298: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , you , temp_list ) ;
25299: LD_ADDR_EXP 76
25303: PUSH
25304: LD_EXP 76
25308: PPUSH
25309: LD_EXP 3
25313: PPUSH
25314: LD_VAR 0 3
25318: PPUSH
25319: CALL_OW 1
25323: ST_TO_ADDR
// temp_list = Replace ( ai_contact_time [ a [ 3 ] ] , you , 0 ) ;
25324: LD_ADDR_VAR 0 3
25328: PUSH
25329: LD_EXP 76
25333: PUSH
25334: LD_VAR 0 1
25338: PUSH
25339: LD_INT 3
25341: ARRAY
25342: ARRAY
25343: PPUSH
25344: LD_EXP 3
25348: PPUSH
25349: LD_INT 0
25351: PPUSH
25352: CALL_OW 1
25356: ST_TO_ADDR
// ai_contact_time = Replace ( ai_contact_time , a [ 3 ] , temp_list ) ;
25357: LD_ADDR_EXP 76
25361: PUSH
25362: LD_EXP 76
25366: PPUSH
25367: LD_VAR 0 1
25371: PUSH
25372: LD_INT 3
25374: ARRAY
25375: PPUSH
25376: LD_VAR 0 3
25380: PPUSH
25381: CALL_OW 1
25385: ST_TO_ADDR
// end ;
25386: GO 25263
25388: POP
25389: POP
// until false ;
25390: LD_INT 0
25392: IFFALSE 24511
// end ;
25394: PPOPN 7
25396: END
// every 0 0$1 do var side , i , mechanics_list , temp_list , taken_vehicles , temp_list_3 , temp_unit , vehicles_list , allowed_to_repair_vehicles ; var under_attack , free_parking_spots , k , ready_to_attack , base , area , free_spaces , temp_list_2 , remote_mechanics ; var destroy_gensher_base , temp_list_4 , temp_list_5 , n , a ; var remote_driver_vehicles ;
25397: GO 25399
25399: DISABLE
25400: LD_INT 0
25402: PPUSH
25403: PPUSH
25404: PPUSH
25405: PPUSH
25406: PPUSH
25407: PPUSH
25408: PPUSH
25409: PPUSH
25410: PPUSH
25411: PPUSH
25412: PPUSH
25413: PPUSH
25414: PPUSH
25415: PPUSH
25416: PPUSH
25417: PPUSH
25418: PPUSH
25419: PPUSH
25420: PPUSH
25421: PPUSH
25422: PPUSH
25423: PPUSH
25424: PPUSH
25425: PPUSH
// begin remote_driver_vehicles = [ [ ] , [ ] , [ ] ] ;
25426: LD_ADDR_VAR 0 24
25430: PUSH
25431: EMPTY
25432: PUSH
25433: EMPTY
25434: PUSH
25435: EMPTY
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: LIST
25441: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25442: LD_INT 35
25444: PPUSH
25445: CALL_OW 67
// for base in ai_bases do
25449: LD_ADDR_VAR 0 14
25453: PUSH
25454: LD_EXP 59
25458: PUSH
25459: FOR_IN
25460: IFFALSE 30074
// begin side = GetBaseSide ( base ) ;
25462: LD_ADDR_VAR 0 1
25466: PUSH
25467: LD_VAR 0 14
25471: PPUSH
25472: CALL 12403 0 1
25476: ST_TO_ADDR
// under_attack = BaseUnderAttack ( base , - 1 ) ;
25477: LD_ADDR_VAR 0 10
25481: PUSH
25482: LD_VAR 0 14
25486: PPUSH
25487: LD_INT 1
25489: NEG
25490: PPUSH
25491: CALL 23323 0 2
25495: ST_TO_ADDR
// ready_to_attack = not under_attack ;
25496: LD_ADDR_VAR 0 13
25500: PUSH
25501: LD_VAR 0 10
25505: NOT
25506: ST_TO_ADDR
// if base = 1 and GetAttitude ( americans , you_alt ) = att_enemy and FilterAllUnits ( [ [ f_inarea , Gensher_base ] , [ f_type , unit_building ] ] ) > 0 then
25507: LD_VAR 0 14
25511: PUSH
25512: LD_INT 1
25514: EQUAL
25515: PUSH
25516: LD_EXP 7
25520: PPUSH
25521: LD_EXP 6
25525: PPUSH
25526: CALL_OW 81
25530: PUSH
25531: LD_INT 2
25533: EQUAL
25534: AND
25535: PUSH
25536: LD_INT 95
25538: PUSH
25539: LD_INT 7
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 21
25548: PUSH
25549: LD_INT 3
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PPUSH
25560: CALL_OW 69
25564: PUSH
25565: LD_INT 0
25567: GREATER
25568: AND
25569: IFFALSE 25581
// destroy_gensher_base = true else
25571: LD_ADDR_VAR 0 19
25575: PUSH
25576: LD_INT 1
25578: ST_TO_ADDR
25579: GO 25589
// destroy_gensher_base = false ;
25581: LD_ADDR_VAR 0 19
25585: PUSH
25586: LD_INT 0
25588: ST_TO_ADDR
// mechanics_list = ai_mechanics_defend [ base ] diff ai_heal_these_humans [ base ] ;
25589: LD_ADDR_VAR 0 3
25593: PUSH
25594: LD_EXP 32
25598: PUSH
25599: LD_VAR 0 14
25603: ARRAY
25604: PUSH
25605: LD_EXP 44
25609: PUSH
25610: LD_VAR 0 14
25614: ARRAY
25615: DIFF
25616: ST_TO_ADDR
// remote_mechanics = [ ] ;
25617: LD_ADDR_VAR 0 18
25621: PUSH
25622: EMPTY
25623: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
25624: LD_ADDR_VAR 0 4
25628: PUSH
25629: LD_EXP 44
25633: PUSH
25634: LD_VAR 0 14
25638: ARRAY
25639: ST_TO_ADDR
// i = 1 ;
25640: LD_ADDR_VAR 0 2
25644: PUSH
25645: LD_INT 1
25647: ST_TO_ADDR
// while i <= mechanics_list do
25648: LD_VAR 0 2
25652: PUSH
25653: LD_VAR 0 3
25657: LESSEQUAL
25658: IFFALSE 25741
// begin if GetLives ( mechanics_list [ i ] ) <= 900 then
25660: LD_VAR 0 3
25664: PUSH
25665: LD_VAR 0 2
25669: ARRAY
25670: PPUSH
25671: CALL_OW 256
25675: PUSH
25676: LD_INT 900
25678: LESSEQUAL
25679: IFFALSE 25725
// begin temp_list = temp_list ^ mechanics_list [ i ] ;
25681: LD_ADDR_VAR 0 4
25685: PUSH
25686: LD_VAR 0 4
25690: PUSH
25691: LD_VAR 0 3
25695: PUSH
25696: LD_VAR 0 2
25700: ARRAY
25701: ADD
25702: ST_TO_ADDR
// mechanics_list = Delete ( mechanics_list , i ) ;
25703: LD_ADDR_VAR 0 3
25707: PUSH
25708: LD_VAR 0 3
25712: PPUSH
25713: LD_VAR 0 2
25717: PPUSH
25718: CALL_OW 3
25722: ST_TO_ADDR
// continue ;
25723: GO 25648
// end ; i = i + 1 ;
25725: LD_ADDR_VAR 0 2
25729: PUSH
25730: LD_VAR 0 2
25734: PUSH
25735: LD_INT 1
25737: PLUS
25738: ST_TO_ADDR
// end ;
25739: GO 25648
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
25741: LD_ADDR_EXP 44
25745: PUSH
25746: LD_EXP 44
25750: PPUSH
25751: LD_VAR 0 14
25755: PPUSH
25756: LD_VAR 0 4
25760: PPUSH
25761: CALL_OW 1
25765: ST_TO_ADDR
// if ai_control_tower [ base ] > 0 then
25766: LD_EXP 57
25770: PUSH
25771: LD_VAR 0 14
25775: ARRAY
25776: PUSH
25777: LD_INT 0
25779: GREATER
25780: IFFALSE 26718
// begin temp_list = remote_driver_vehicles [ base ] ;
25782: LD_ADDR_VAR 0 4
25786: PUSH
25787: LD_VAR 0 24
25791: PUSH
25792: LD_VAR 0 14
25796: ARRAY
25797: ST_TO_ADDR
// vehicles_list = [ ] ;
25798: LD_ADDR_VAR 0 8
25802: PUSH
25803: EMPTY
25804: ST_TO_ADDR
// i = 1 ;
25805: LD_ADDR_VAR 0 2
25809: PUSH
25810: LD_INT 1
25812: ST_TO_ADDR
// while i <= temp_list do
25813: LD_VAR 0 2
25817: PUSH
25818: LD_VAR 0 4
25822: LESSEQUAL
25823: IFFALSE 26095
// begin if IsDead ( temp_list [ i ] [ 1 ] ) then
25825: LD_VAR 0 4
25829: PUSH
25830: LD_VAR 0 2
25834: ARRAY
25835: PUSH
25836: LD_INT 1
25838: ARRAY
25839: PPUSH
25840: CALL_OW 301
25844: IFFALSE 25870
// begin temp_list = Delete ( temp_list , i ) ;
25846: LD_ADDR_VAR 0 4
25850: PUSH
25851: LD_VAR 0 4
25855: PPUSH
25856: LD_VAR 0 2
25860: PPUSH
25861: CALL_OW 3
25865: ST_TO_ADDR
// continue ;
25866: GO 25813
// end else
25868: GO 26053
// begin temp_list_3 = temp_list [ i ] [ 2 ] ;
25870: LD_ADDR_VAR 0 6
25874: PUSH
25875: LD_VAR 0 4
25879: PUSH
25880: LD_VAR 0 2
25884: ARRAY
25885: PUSH
25886: LD_INT 2
25888: ARRAY
25889: ST_TO_ADDR
// k = 1 ;
25890: LD_ADDR_VAR 0 12
25894: PUSH
25895: LD_INT 1
25897: ST_TO_ADDR
// while k <= temp_list_3 do
25898: LD_VAR 0 12
25902: PUSH
25903: LD_VAR 0 6
25907: LESSEQUAL
25908: IFFALSE 25965
// begin if IsDead ( temp_list_3 [ k ] ) then
25910: LD_VAR 0 6
25914: PUSH
25915: LD_VAR 0 12
25919: ARRAY
25920: PPUSH
25921: CALL_OW 301
25925: IFFALSE 25949
// begin temp_list_3 = Delete ( temp_list_3 , k ) ;
25927: LD_ADDR_VAR 0 6
25931: PUSH
25932: LD_VAR 0 6
25936: PPUSH
25937: LD_VAR 0 12
25941: PPUSH
25942: CALL_OW 3
25946: ST_TO_ADDR
// continue ;
25947: GO 25898
// end ; k = k + 1 ;
25949: LD_ADDR_VAR 0 12
25953: PUSH
25954: LD_VAR 0 12
25958: PUSH
25959: LD_INT 1
25961: PLUS
25962: ST_TO_ADDR
// end ;
25963: GO 25898
// if temp_list_3 > 0 then
25965: LD_VAR 0 6
25969: PUSH
25970: LD_INT 0
25972: GREATER
25973: IFFALSE 26031
// begin temp_list_2 = Replace ( temp_list [ i ] , 2 , temp_list_3 ) ;
25975: LD_ADDR_VAR 0 17
25979: PUSH
25980: LD_VAR 0 4
25984: PUSH
25985: LD_VAR 0 2
25989: ARRAY
25990: PPUSH
25991: LD_INT 2
25993: PPUSH
25994: LD_VAR 0 6
25998: PPUSH
25999: CALL_OW 1
26003: ST_TO_ADDR
// temp_list = Replace ( temp_list , i , temp_list_2 ) ;
26004: LD_ADDR_VAR 0 4
26008: PUSH
26009: LD_VAR 0 4
26013: PPUSH
26014: LD_VAR 0 2
26018: PPUSH
26019: LD_VAR 0 17
26023: PPUSH
26024: CALL_OW 1
26028: ST_TO_ADDR
// end else
26029: GO 26053
// begin temp_list = Delete ( temp_list , i ) ;
26031: LD_ADDR_VAR 0 4
26035: PUSH
26036: LD_VAR 0 4
26040: PPUSH
26041: LD_VAR 0 2
26045: PPUSH
26046: CALL_OW 3
26050: ST_TO_ADDR
// continue ;
26051: GO 25813
// end ; end ; vehicles_list = vehicles_list ^ temp_list [ i ] [ 2 ] ;
26053: LD_ADDR_VAR 0 8
26057: PUSH
26058: LD_VAR 0 8
26062: PUSH
26063: LD_VAR 0 4
26067: PUSH
26068: LD_VAR 0 2
26072: ARRAY
26073: PUSH
26074: LD_INT 2
26076: ARRAY
26077: ADD
26078: ST_TO_ADDR
// i = i + 1 ;
26079: LD_ADDR_VAR 0 2
26083: PUSH
26084: LD_VAR 0 2
26088: PUSH
26089: LD_INT 1
26091: PLUS
26092: ST_TO_ADDR
// end ;
26093: GO 25813
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list ) ;
26095: LD_ADDR_VAR 0 24
26099: PUSH
26100: LD_VAR 0 24
26104: PPUSH
26105: LD_VAR 0 14
26109: PPUSH
26110: LD_VAR 0 4
26114: PPUSH
26115: CALL_OW 1
26119: ST_TO_ADDR
// temp_list = ai_vehicles_defend [ base ] diff vehicles_list ;
26120: LD_ADDR_VAR 0 4
26124: PUSH
26125: LD_EXP 40
26129: PUSH
26130: LD_VAR 0 14
26134: ARRAY
26135: PUSH
26136: LD_VAR 0 8
26140: DIFF
26141: ST_TO_ADDR
// if temp_list > 0 then
26142: LD_VAR 0 4
26146: PUSH
26147: LD_INT 0
26149: GREATER
26150: IFFALSE 26374
// begin temp_list_3 = ai_mechanics_defend [ base ] ;
26152: LD_ADDR_VAR 0 6
26156: PUSH
26157: LD_EXP 32
26161: PUSH
26162: LD_VAR 0 14
26166: ARRAY
26167: ST_TO_ADDR
// for i in remote_driver_vehicles [ base ] do
26168: LD_ADDR_VAR 0 2
26172: PUSH
26173: LD_VAR 0 24
26177: PUSH
26178: LD_VAR 0 14
26182: ARRAY
26183: PUSH
26184: FOR_IN
26185: IFFALSE 26209
// temp_list_3 = temp_list_3 diff i [ 1 ] ;
26187: LD_ADDR_VAR 0 6
26191: PUSH
26192: LD_VAR 0 6
26196: PUSH
26197: LD_VAR 0 2
26201: PUSH
26202: LD_INT 1
26204: ARRAY
26205: DIFF
26206: ST_TO_ADDR
26207: GO 26184
26209: POP
26210: POP
// if temp_list_3 > 0 then
26211: LD_VAR 0 6
26215: PUSH
26216: LD_INT 0
26218: GREATER
26219: IFFALSE 26245
// temp_list_3 = temp_list_3 diff FindMinSkill ( temp_list_3 , skill_mechanical ) ;
26221: LD_ADDR_VAR 0 6
26225: PUSH
26226: LD_VAR 0 6
26230: PUSH
26231: LD_VAR 0 6
26235: PPUSH
26236: LD_INT 3
26238: PPUSH
26239: CALL_OW 443
26243: DIFF
26244: ST_TO_ADDR
// for i in temp_list do
26245: LD_ADDR_VAR 0 2
26249: PUSH
26250: LD_VAR 0 4
26254: PUSH
26255: FOR_IN
26256: IFFALSE 26372
// begin if temp_list_3 = 0 then
26258: LD_VAR 0 6
26262: PUSH
26263: LD_INT 0
26265: EQUAL
26266: IFFALSE 26270
// break ;
26268: GO 26372
// temp_unit = FindMaxSkill ( temp_list_3 , skill_mechanical ) ;
26270: LD_ADDR_VAR 0 7
26274: PUSH
26275: LD_VAR 0 6
26279: PPUSH
26280: LD_INT 3
26282: PPUSH
26283: CALL_OW 433
26287: ST_TO_ADDR
// temp_list_3 = temp_list_3 diff temp_unit ;
26288: LD_ADDR_VAR 0 6
26292: PUSH
26293: LD_VAR 0 6
26297: PUSH
26298: LD_VAR 0 7
26302: DIFF
26303: ST_TO_ADDR
// temp_list_2 = Insert ( remote_driver_vehicles [ base ] , 1 , [ temp_unit , [ i ] ] ) ;
26304: LD_ADDR_VAR 0 17
26308: PUSH
26309: LD_VAR 0 24
26313: PUSH
26314: LD_VAR 0 14
26318: ARRAY
26319: PPUSH
26320: LD_INT 1
26322: PPUSH
26323: LD_VAR 0 7
26327: PUSH
26328: LD_VAR 0 2
26332: PUSH
26333: EMPTY
26334: LIST
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PPUSH
26340: CALL_OW 2
26344: ST_TO_ADDR
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list_2 ) ;
26345: LD_ADDR_VAR 0 24
26349: PUSH
26350: LD_VAR 0 24
26354: PPUSH
26355: LD_VAR 0 14
26359: PPUSH
26360: LD_VAR 0 17
26364: PPUSH
26365: CALL_OW 1
26369: ST_TO_ADDR
// end ;
26370: GO 26255
26372: POP
26373: POP
// end ; for i in remote_driver_vehicles [ base ] do
26374: LD_ADDR_VAR 0 2
26378: PUSH
26379: LD_VAR 0 24
26383: PUSH
26384: LD_VAR 0 14
26388: ARRAY
26389: PUSH
26390: FOR_IN
26391: IFFALSE 26415
// remote_mechanics = remote_mechanics ^ i [ 1 ] ;
26393: LD_ADDR_VAR 0 18
26397: PUSH
26398: LD_VAR 0 18
26402: PUSH
26403: LD_VAR 0 2
26407: PUSH
26408: LD_INT 1
26410: ARRAY
26411: ADD
26412: ST_TO_ADDR
26413: GO 26390
26415: POP
26416: POP
// mechanics_list = mechanics_list diff remote_mechanics ;
26417: LD_ADDR_VAR 0 3
26421: PUSH
26422: LD_VAR 0 3
26426: PUSH
26427: LD_VAR 0 18
26431: DIFF
26432: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff ai_heal_these_humans [ base ] ;
26433: LD_ADDR_VAR 0 18
26437: PUSH
26438: LD_VAR 0 18
26442: PUSH
26443: LD_EXP 44
26447: PUSH
26448: LD_VAR 0 14
26452: ARRAY
26453: DIFF
26454: ST_TO_ADDR
// if mechanics_list = 0 and remote_driver_vehicles [ base ] > 0 then
26455: LD_VAR 0 3
26459: PUSH
26460: LD_INT 0
26462: EQUAL
26463: PUSH
26464: LD_VAR 0 24
26468: PUSH
26469: LD_VAR 0 14
26473: ARRAY
26474: PUSH
26475: LD_INT 0
26477: GREATER
26478: AND
26479: IFFALSE 26716
// begin n = 0 ;
26481: LD_ADDR_VAR 0 22
26485: PUSH
26486: LD_INT 0
26488: ST_TO_ADDR
// a = 9999 ;
26489: LD_ADDR_VAR 0 23
26493: PUSH
26494: LD_INT 9999
26496: ST_TO_ADDR
// for i = 1 to ( remote_driver_vehicles [ base ] + 0 ) do
26497: LD_ADDR_VAR 0 2
26501: PUSH
26502: DOUBLE
26503: LD_INT 1
26505: DEC
26506: ST_TO_ADDR
26507: LD_VAR 0 24
26511: PUSH
26512: LD_VAR 0 14
26516: ARRAY
26517: PUSH
26518: LD_INT 0
26520: PLUS
26521: PUSH
26522: FOR_TO
26523: IFFALSE 26599
// begin if remote_driver_vehicles [ base ] [ i ] [ 2 ] + 0 < a then
26525: LD_VAR 0 24
26529: PUSH
26530: LD_VAR 0 14
26534: ARRAY
26535: PUSH
26536: LD_VAR 0 2
26540: ARRAY
26541: PUSH
26542: LD_INT 2
26544: ARRAY
26545: PUSH
26546: LD_INT 0
26548: PLUS
26549: PUSH
26550: LD_VAR 0 23
26554: LESS
26555: IFFALSE 26597
// begin a = remote_driver_vehicles [ base ] [ i ] [ 2 ] + 0 ;
26557: LD_ADDR_VAR 0 23
26561: PUSH
26562: LD_VAR 0 24
26566: PUSH
26567: LD_VAR 0 14
26571: ARRAY
26572: PUSH
26573: LD_VAR 0 2
26577: ARRAY
26578: PUSH
26579: LD_INT 2
26581: ARRAY
26582: PUSH
26583: LD_INT 0
26585: PLUS
26586: ST_TO_ADDR
// n = i ;
26587: LD_ADDR_VAR 0 22
26591: PUSH
26592: LD_VAR 0 2
26596: ST_TO_ADDR
// end ; end ;
26597: GO 26522
26599: POP
26600: POP
// mechanics_list = mechanics_list ^ remote_driver_vehicles [ base ] [ n ] [ 1 ] ;
26601: LD_ADDR_VAR 0 3
26605: PUSH
26606: LD_VAR 0 3
26610: PUSH
26611: LD_VAR 0 24
26615: PUSH
26616: LD_VAR 0 14
26620: ARRAY
26621: PUSH
26622: LD_VAR 0 22
26626: ARRAY
26627: PUSH
26628: LD_INT 1
26630: ARRAY
26631: ADD
26632: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff remote_driver_vehicles [ base ] [ n ] [ 1 ] ;
26633: LD_ADDR_VAR 0 18
26637: PUSH
26638: LD_VAR 0 18
26642: PUSH
26643: LD_VAR 0 24
26647: PUSH
26648: LD_VAR 0 14
26652: ARRAY
26653: PUSH
26654: LD_VAR 0 22
26658: ARRAY
26659: PUSH
26660: LD_INT 1
26662: ARRAY
26663: DIFF
26664: ST_TO_ADDR
// temp_list_2 = Delete ( remote_driver_vehicles [ base ] , n ) ;
26665: LD_ADDR_VAR 0 17
26669: PUSH
26670: LD_VAR 0 24
26674: PUSH
26675: LD_VAR 0 14
26679: ARRAY
26680: PPUSH
26681: LD_VAR 0 22
26685: PPUSH
26686: CALL_OW 3
26690: ST_TO_ADDR
// remote_driver_vehicles = Replace ( remote_driver_vehicles , base , temp_list_2 ) ;
26691: LD_ADDR_VAR 0 24
26695: PUSH
26696: LD_VAR 0 24
26700: PPUSH
26701: LD_VAR 0 14
26705: PPUSH
26706: LD_VAR 0 17
26710: PPUSH
26711: CALL_OW 1
26715: ST_TO_ADDR
// end ; end else
26716: GO 26740
// begin remote_driver_vehicles = Replace ( remote_driver_vehicles , base , [ ] ) ;
26718: LD_ADDR_VAR 0 24
26722: PUSH
26723: LD_VAR 0 24
26727: PPUSH
26728: LD_VAR 0 14
26732: PPUSH
26733: EMPTY
26734: PPUSH
26735: CALL_OW 1
26739: ST_TO_ADDR
// end ; temp_list = [ ] ;
26740: LD_ADDR_VAR 0 4
26744: PUSH
26745: EMPTY
26746: ST_TO_ADDR
// for i in ai_vehicles_being_repaired [ base ] do
26747: LD_ADDR_VAR 0 2
26751: PUSH
26752: LD_EXP 80
26756: PUSH
26757: LD_VAR 0 14
26761: ARRAY
26762: PUSH
26763: FOR_IN
26764: IFFALSE 26799
// if GetLives ( i ) < 1000 then
26766: LD_VAR 0 2
26770: PPUSH
26771: CALL_OW 256
26775: PUSH
26776: LD_INT 1000
26778: LESS
26779: IFFALSE 26797
// temp_list = temp_list ^ i ;
26781: LD_ADDR_VAR 0 4
26785: PUSH
26786: LD_VAR 0 4
26790: PUSH
26791: LD_VAR 0 2
26795: ADD
26796: ST_TO_ADDR
26797: GO 26763
26799: POP
26800: POP
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
26801: LD_ADDR_EXP 80
26805: PUSH
26806: LD_EXP 80
26810: PPUSH
26811: LD_VAR 0 14
26815: PPUSH
26816: LD_VAR 0 4
26820: PPUSH
26821: CALL_OW 1
26825: ST_TO_ADDR
// temp_list = [ ] ;
26826: LD_ADDR_VAR 0 4
26830: PUSH
26831: EMPTY
26832: ST_TO_ADDR
// for i in ai_refuel_vehicles_list [ base ] diff ai_vehicles_being_repaired [ base ] do
26833: LD_ADDR_VAR 0 2
26837: PUSH
26838: LD_EXP 55
26842: PUSH
26843: LD_VAR 0 14
26847: ARRAY
26848: PUSH
26849: LD_EXP 80
26853: PUSH
26854: LD_VAR 0 14
26858: ARRAY
26859: DIFF
26860: PUSH
26861: FOR_IN
26862: IFFALSE 26897
// if GetFuel ( i ) < 95 then
26864: LD_VAR 0 2
26868: PPUSH
26869: CALL_OW 261
26873: PUSH
26874: LD_INT 95
26876: LESS
26877: IFFALSE 26895
// temp_list = temp_list ^ i ;
26879: LD_ADDR_VAR 0 4
26883: PUSH
26884: LD_VAR 0 4
26888: PUSH
26889: LD_VAR 0 2
26893: ADD
26894: ST_TO_ADDR
26895: GO 26861
26897: POP
26898: POP
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
26899: LD_ADDR_EXP 55
26903: PUSH
26904: LD_EXP 55
26908: PPUSH
26909: LD_VAR 0 14
26913: PPUSH
26914: LD_VAR 0 4
26918: PPUSH
26919: CALL_OW 1
26923: ST_TO_ADDR
// if under_attack or destroy_gensher_base then
26924: LD_VAR 0 10
26928: PUSH
26929: LD_VAR 0 19
26933: OR
26934: IFFALSE 28337
// begin vehicles_list = ai_vehicles_defend [ base ] diff ai_vehicles_being_repaired [ base ] ;
26936: LD_ADDR_VAR 0 8
26940: PUSH
26941: LD_EXP 40
26945: PUSH
26946: LD_VAR 0 14
26950: ARRAY
26951: PUSH
26952: LD_EXP 80
26956: PUSH
26957: LD_VAR 0 14
26961: ARRAY
26962: DIFF
26963: ST_TO_ADDR
// case base of 1 :
26964: LD_VAR 0 14
26968: PUSH
26969: LD_INT 1
26971: DOUBLE
26972: EQUAL
26973: IFTRUE 26977
26975: GO 27619
26977: POP
// begin repeat if game_phase = 1 then
26978: LD_EXP 89
26982: PUSH
26983: LD_INT 1
26985: EQUAL
26986: IFFALSE 26990
// break ;
26988: GO 27617
// temp_list = [ ] ;
26990: LD_ADDR_VAR 0 4
26994: PUSH
26995: EMPTY
26996: ST_TO_ADDR
// if destroy_gensher_base then
26997: LD_VAR 0 19
27001: IFFALSE 27068
// for i in original_gensher_people ^ Gensher do
27003: LD_ADDR_VAR 0 2
27007: PUSH
27008: LD_EXP 83
27012: PUSH
27013: LD_EXP 24
27017: ADD
27018: PUSH
27019: FOR_IN
27020: IFFALSE 27066
// if IsPlaced ( i ) and GetY ( i ) <= 70 then
27022: LD_VAR 0 2
27026: PPUSH
27027: CALL_OW 305
27031: PUSH
27032: LD_VAR 0 2
27036: PPUSH
27037: CALL_OW 251
27041: PUSH
27042: LD_INT 70
27044: LESSEQUAL
27045: AND
27046: IFFALSE 27064
// temp_list = temp_list ^ i ;
27048: LD_ADDR_VAR 0 4
27052: PUSH
27053: LD_VAR 0 4
27057: PUSH
27058: LD_VAR 0 2
27062: ADD
27063: ST_TO_ADDR
27064: GO 27019
27066: POP
27067: POP
// if temp_list > 0 then
27068: LD_VAR 0 4
27072: PUSH
27073: LD_INT 0
27075: GREATER
27076: IFFALSE 27288
// begin temp_list_3 = [ [ 105 , 40 ] , [ 98 , 44 ] , [ 90 , 44 ] , [ 82 , 46 ] , [ 78 , 52 ] , [ 79 , 61 ] ] ;
27078: LD_ADDR_VAR 0 6
27082: PUSH
27083: LD_INT 105
27085: PUSH
27086: LD_INT 40
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 98
27095: PUSH
27096: LD_INT 44
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 90
27105: PUSH
27106: LD_INT 44
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 82
27115: PUSH
27116: LD_INT 46
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 78
27125: PUSH
27126: LD_INT 52
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 79
27135: PUSH
27136: LD_INT 61
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: ST_TO_ADDR
// for i in vehicles_list do
27151: LD_ADDR_VAR 0 2
27155: PUSH
27156: LD_VAR 0 8
27160: PUSH
27161: FOR_IN
27162: IFFALSE 27284
// begin temp_unit = AllNearestUnitToUnit ( temp_list , i ) ;
27164: LD_ADDR_VAR 0 7
27168: PUSH
27169: LD_VAR 0 4
27173: PPUSH
27174: LD_VAR 0 2
27178: PPUSH
27179: CALL_OW 75
27183: ST_TO_ADDR
// if GetDistUnits ( i , temp_unit ) <= 6 then
27184: LD_VAR 0 2
27188: PPUSH
27189: LD_VAR 0 7
27193: PPUSH
27194: CALL_OW 296
27198: PUSH
27199: LD_INT 6
27201: LESSEQUAL
27202: IFFALSE 27235
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) else
27204: LD_VAR 0 2
27208: PPUSH
27209: LD_VAR 0 7
27213: PPUSH
27214: CALL_OW 250
27218: PPUSH
27219: LD_VAR 0 7
27223: PPUSH
27224: CALL_OW 251
27228: PPUSH
27229: CALL_OW 114
27233: GO 27282
// begin temp_list = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
27235: LD_ADDR_VAR 0 4
27239: PUSH
27240: LD_VAR 0 6
27244: PPUSH
27245: LD_VAR 0 2
27249: PPUSH
27250: CALL 30217 0 2
27254: ST_TO_ADDR
// ComMoveXY ( i , temp_list [ 1 ] , temp_list [ 2 ] ) ;
27255: LD_VAR 0 2
27259: PPUSH
27260: LD_VAR 0 4
27264: PUSH
27265: LD_INT 1
27267: ARRAY
27268: PPUSH
27269: LD_VAR 0 4
27273: PUSH
27274: LD_INT 2
27276: ARRAY
27277: PPUSH
27278: CALL_OW 111
// end ; end ;
27282: GO 27161
27284: POP
27285: POP
// end else
27286: GO 27613
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , am_vehicle_defend_area ] ] ) ;
27288: LD_ADDR_VAR 0 4
27292: PUSH
27293: LD_INT 81
27295: PUSH
27296: LD_VAR 0 1
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 95
27307: PUSH
27308: LD_INT 11
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PPUSH
27319: CALL_OW 69
27323: ST_TO_ADDR
// temp_list = DangerousUnits ( temp_list ) ;
27324: LD_ADDR_VAR 0 4
27328: PUSH
27329: LD_VAR 0 4
27333: PPUSH
27334: CALL 40394 0 1
27338: ST_TO_ADDR
// if temp_list > 0 then
27339: LD_VAR 0 4
27343: PUSH
27344: LD_INT 0
27346: GREATER
27347: IFFALSE 27417
// begin for i in vehicles_list do
27349: LD_ADDR_VAR 0 2
27353: PUSH
27354: LD_VAR 0 8
27358: PUSH
27359: FOR_IN
27360: IFFALSE 27413
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
27362: LD_ADDR_VAR 0 7
27366: PUSH
27367: LD_VAR 0 4
27371: PPUSH
27372: LD_VAR 0 2
27376: PPUSH
27377: CALL_OW 74
27381: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27382: LD_VAR 0 2
27386: PPUSH
27387: LD_VAR 0 7
27391: PPUSH
27392: CALL_OW 250
27396: PPUSH
27397: LD_VAR 0 7
27401: PPUSH
27402: CALL_OW 251
27406: PPUSH
27407: CALL_OW 114
// end ;
27411: GO 27359
27413: POP
27414: POP
// end else
27415: GO 27613
// if destroy_gensher_base then
27417: LD_VAR 0 19
27421: IFFALSE 27613
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , gensher_base ] ] ) ;
27423: LD_ADDR_VAR 0 4
27427: PUSH
27428: LD_INT 81
27430: PUSH
27431: LD_VAR 0 1
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 95
27442: PUSH
27443: LD_INT 7
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PPUSH
27454: CALL_OW 69
27458: ST_TO_ADDR
// temp_list_2 = DangerousUnits ( temp_list ) ;
27459: LD_ADDR_VAR 0 17
27463: PUSH
27464: LD_VAR 0 4
27468: PPUSH
27469: CALL 40394 0 1
27473: ST_TO_ADDR
// if temp_list_2 > 0 then
27474: LD_VAR 0 17
27478: PUSH
27479: LD_INT 0
27481: GREATER
27482: IFFALSE 27552
// begin for i in vehicles_list do
27484: LD_ADDR_VAR 0 2
27488: PUSH
27489: LD_VAR 0 8
27493: PUSH
27494: FOR_IN
27495: IFFALSE 27548
// begin temp_unit = NearestUnitToUnit ( temp_list_2 , i ) ;
27497: LD_ADDR_VAR 0 7
27501: PUSH
27502: LD_VAR 0 17
27506: PPUSH
27507: LD_VAR 0 2
27511: PPUSH
27512: CALL_OW 74
27516: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27517: LD_VAR 0 2
27521: PPUSH
27522: LD_VAR 0 7
27526: PPUSH
27527: CALL_OW 250
27531: PPUSH
27532: LD_VAR 0 7
27536: PPUSH
27537: CALL_OW 251
27541: PPUSH
27542: CALL_OW 114
// end ;
27546: GO 27494
27548: POP
27549: POP
// end else
27550: GO 27613
// if temp_list > 0 then
27552: LD_VAR 0 4
27556: PUSH
27557: LD_INT 0
27559: GREATER
27560: IFFALSE 27613
// begin for i in vehicles_list do
27562: LD_ADDR_VAR 0 2
27566: PUSH
27567: LD_VAR 0 8
27571: PUSH
27572: FOR_IN
27573: IFFALSE 27611
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
27575: LD_ADDR_VAR 0 7
27579: PUSH
27580: LD_VAR 0 4
27584: PPUSH
27585: LD_VAR 0 2
27589: PPUSH
27590: CALL_OW 74
27594: ST_TO_ADDR
// ComAttackUnit ( i , temp_unit ) ;
27595: LD_VAR 0 2
27599: PPUSH
27600: LD_VAR 0 7
27604: PPUSH
27605: CALL_OW 115
// end ;
27609: GO 27572
27611: POP
27612: POP
// end ; end ; end ; until true ;
27613: LD_INT 1
27615: IFFALSE 26978
// end ; 2 :
27617: GO 28335
27619: LD_INT 2
27621: DOUBLE
27622: EQUAL
27623: IFTRUE 27627
27625: GO 27630
27627: POP
// begin end ; 3 :
27628: GO 28335
27630: LD_INT 3
27632: DOUBLE
27633: EQUAL
27634: IFTRUE 27638
27636: GO 28334
27638: POP
// begin temp_list = FilterAllUnits ( [ f_enemy , side ] ) ;
27639: LD_ADDR_VAR 0 4
27643: PUSH
27644: LD_INT 81
27646: PUSH
27647: LD_VAR 0 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PPUSH
27656: CALL_OW 69
27660: ST_TO_ADDR
// temp_list = ListFilterNearArea ( temp_list , GetBaseArea ( base ) ) ;
27661: LD_ADDR_VAR 0 4
27665: PUSH
27666: LD_VAR 0 4
27670: PPUSH
27671: LD_VAR 0 14
27675: PPUSH
27676: CALL 12332 0 1
27680: PPUSH
27681: CALL 23907 0 2
27685: ST_TO_ADDR
// temp_list = DangerousUnits ( temp_list ) ;
27686: LD_ADDR_VAR 0 4
27690: PUSH
27691: LD_VAR 0 4
27695: PPUSH
27696: CALL 40394 0 1
27700: ST_TO_ADDR
// temp_list_2 = FilterAllUnits ( [ [ f_enemy , side ] , [ f_inarea , Ru_backdoor_area ] ] ) ;
27701: LD_ADDR_VAR 0 17
27705: PUSH
27706: LD_INT 81
27708: PUSH
27709: LD_VAR 0 1
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 95
27720: PUSH
27721: LD_INT 13
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PPUSH
27732: CALL_OW 69
27736: ST_TO_ADDR
// temp_list_2 = DangerousUnits ( temp_list_2 ) ;
27737: LD_ADDR_VAR 0 17
27741: PUSH
27742: LD_VAR 0 17
27746: PPUSH
27747: CALL 40394 0 1
27751: ST_TO_ADDR
// temp_list_3 = [ [ 53 , 80 ] , [ 61 , 80 ] , [ 63 , 73 ] , [ 67 , 66 ] , [ 67 , 59 ] ] ;
27752: LD_ADDR_VAR 0 6
27756: PUSH
27757: LD_INT 53
27759: PUSH
27760: LD_INT 80
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 61
27769: PUSH
27770: LD_INT 80
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 63
27779: PUSH
27780: LD_INT 73
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 67
27789: PUSH
27790: LD_INT 66
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 67
27799: PUSH
27800: LD_INT 59
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: ST_TO_ADDR
// temp_list_4 = [ [ 53 , 80 ] , [ 61 , 91 ] , [ 70 , 97 ] , [ 78 , 99 ] , [ 88 , 98 ] ] ;
27814: LD_ADDR_VAR 0 20
27818: PUSH
27819: LD_INT 53
27821: PUSH
27822: LD_INT 80
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 61
27831: PUSH
27832: LD_INT 91
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 70
27841: PUSH
27842: LD_INT 97
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 78
27851: PUSH
27852: LD_INT 99
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 88
27861: PUSH
27862: LD_INT 98
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: ST_TO_ADDR
// if temp_list_2 >= temp_list then
27876: LD_VAR 0 17
27880: PUSH
27881: LD_VAR 0 4
27885: GREATEREQUAL
27886: IFFALSE 28029
// begin if temp_list_2 > 0 then
27888: LD_VAR 0 17
27892: PUSH
27893: LD_INT 0
27895: GREATER
27896: IFFALSE 28027
// begin for i in vehicles_list do
27898: LD_ADDR_VAR 0 2
27902: PUSH
27903: LD_VAR 0 8
27907: PUSH
27908: FOR_IN
27909: IFFALSE 28025
// if IsInArea ( i , Ru_base ) then
27911: LD_VAR 0 2
27915: PPUSH
27916: LD_INT 3
27918: PPUSH
27919: CALL_OW 308
27923: IFFALSE 27974
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
27925: LD_ADDR_VAR 0 21
27929: PUSH
27930: LD_VAR 0 6
27934: PPUSH
27935: LD_VAR 0 2
27939: PPUSH
27940: CALL 30217 0 2
27944: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
27945: LD_VAR 0 2
27949: PPUSH
27950: LD_VAR 0 21
27954: PUSH
27955: LD_INT 1
27957: ARRAY
27958: PPUSH
27959: LD_VAR 0 21
27963: PUSH
27964: LD_INT 2
27966: ARRAY
27967: PPUSH
27968: CALL_OW 114
// end else
27972: GO 28023
// begin temp_unit = NearestUnitToUnit ( temp_list_2 , i ) ;
27974: LD_ADDR_VAR 0 7
27978: PUSH
27979: LD_VAR 0 17
27983: PPUSH
27984: LD_VAR 0 2
27988: PPUSH
27989: CALL_OW 74
27993: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
27994: LD_VAR 0 2
27998: PPUSH
27999: LD_VAR 0 7
28003: PPUSH
28004: CALL_OW 250
28008: PPUSH
28009: LD_VAR 0 7
28013: PPUSH
28014: CALL_OW 251
28018: PPUSH
28019: CALL_OW 114
// end ;
28023: GO 27908
28025: POP
28026: POP
// end ; end else
28027: GO 28332
// begin if temp_list > 0 then
28029: LD_VAR 0 4
28033: PUSH
28034: LD_INT 0
28036: GREATER
28037: IFFALSE 28332
// begin k = 0 ;
28039: LD_ADDR_VAR 0 12
28043: PUSH
28044: LD_INT 0
28046: ST_TO_ADDR
// for i in vehicles_list do
28047: LD_ADDR_VAR 0 2
28051: PUSH
28052: LD_VAR 0 8
28056: PUSH
28057: FOR_IN
28058: IFFALSE 28330
// begin k = k + 1 ;
28060: LD_ADDR_VAR 0 12
28064: PUSH
28065: LD_VAR 0 12
28069: PUSH
28070: LD_INT 1
28072: PLUS
28073: ST_TO_ADDR
// if k mod 2 = 0 then
28074: LD_VAR 0 12
28078: PUSH
28079: LD_INT 2
28081: MOD
28082: PUSH
28083: LD_INT 0
28085: EQUAL
28086: IFFALSE 28202
// begin if IsInArea ( i , Ru_base ) then
28088: LD_VAR 0 2
28092: PPUSH
28093: LD_INT 3
28095: PPUSH
28096: CALL_OW 308
28100: IFFALSE 28151
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_3 , i ) ;
28102: LD_ADDR_VAR 0 21
28106: PUSH
28107: LD_VAR 0 6
28111: PPUSH
28112: LD_VAR 0 2
28116: PPUSH
28117: CALL 30217 0 2
28121: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28122: LD_VAR 0 2
28126: PPUSH
28127: LD_VAR 0 21
28131: PUSH
28132: LD_INT 1
28134: ARRAY
28135: PPUSH
28136: LD_VAR 0 21
28140: PUSH
28141: LD_INT 2
28143: ARRAY
28144: PPUSH
28145: CALL_OW 114
// end else
28149: GO 28200
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
28151: LD_ADDR_VAR 0 7
28155: PUSH
28156: LD_VAR 0 4
28160: PPUSH
28161: LD_VAR 0 2
28165: PPUSH
28166: CALL_OW 74
28170: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28171: LD_VAR 0 2
28175: PPUSH
28176: LD_VAR 0 7
28180: PPUSH
28181: CALL_OW 250
28185: PPUSH
28186: LD_VAR 0 7
28190: PPUSH
28191: CALL_OW 251
28195: PPUSH
28196: CALL_OW 114
// end ; end else
28200: GO 28328
// begin if IsInArea ( i , Ru_base ) or IsInArea ( i , Ru_base_south ) then
28202: LD_VAR 0 2
28206: PPUSH
28207: LD_INT 3
28209: PPUSH
28210: CALL_OW 308
28214: PUSH
28215: LD_VAR 0 2
28219: PPUSH
28220: LD_INT 19
28222: PPUSH
28223: CALL_OW 308
28227: OR
28228: IFFALSE 28279
// begin temp_list_5 = FindNextHexOldWaypointSystem ( temp_list_4 , i ) ;
28230: LD_ADDR_VAR 0 21
28234: PUSH
28235: LD_VAR 0 20
28239: PPUSH
28240: LD_VAR 0 2
28244: PPUSH
28245: CALL 30217 0 2
28249: ST_TO_ADDR
// ComAgressiveMove ( i , temp_list_5 [ 1 ] , temp_list_5 [ 2 ] ) ;
28250: LD_VAR 0 2
28254: PPUSH
28255: LD_VAR 0 21
28259: PUSH
28260: LD_INT 1
28262: ARRAY
28263: PPUSH
28264: LD_VAR 0 21
28268: PUSH
28269: LD_INT 2
28271: ARRAY
28272: PPUSH
28273: CALL_OW 114
// end else
28277: GO 28328
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
28279: LD_ADDR_VAR 0 7
28283: PUSH
28284: LD_VAR 0 4
28288: PPUSH
28289: LD_VAR 0 2
28293: PPUSH
28294: CALL_OW 74
28298: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
28299: LD_VAR 0 2
28303: PPUSH
28304: LD_VAR 0 7
28308: PPUSH
28309: CALL_OW 250
28313: PPUSH
28314: LD_VAR 0 7
28318: PPUSH
28319: CALL_OW 251
28323: PPUSH
28324: CALL_OW 114
// end ; end ; end ;
28328: GO 28057
28330: POP
28331: POP
// end ; end ; end ; end ;
28332: GO 28335
28334: POP
// end else
28335: GO 28724
// begin area = GetBaseArea ( base ) ;
28337: LD_ADDR_VAR 0 15
28341: PUSH
28342: LD_VAR 0 14
28346: PPUSH
28347: CALL 12332 0 1
28351: ST_TO_ADDR
// if IsOk ( ai_depot [ base ] ) then
28352: LD_EXP 35
28356: PUSH
28357: LD_VAR 0 14
28361: ARRAY
28362: PPUSH
28363: CALL_OW 302
28367: IFFALSE 28633
// begin temp_list = ai_refuel_vehicles_list [ base ] ;
28369: LD_ADDR_VAR 0 4
28373: PUSH
28374: LD_EXP 55
28378: PUSH
28379: LD_VAR 0 14
28383: ARRAY
28384: ST_TO_ADDR
// for i in ai_vehicles_defend [ base ] diff ai_refuel_vehicles_list [ base ] do
28385: LD_ADDR_VAR 0 2
28389: PUSH
28390: LD_EXP 40
28394: PUSH
28395: LD_VAR 0 14
28399: ARRAY
28400: PUSH
28401: LD_EXP 55
28405: PUSH
28406: LD_VAR 0 14
28410: ARRAY
28411: DIFF
28412: PUSH
28413: FOR_IN
28414: IFFALSE 28464
// if GetFuel ( i ) < 70 and GetEngine ( i ) = engine_combustion then
28416: LD_VAR 0 2
28420: PPUSH
28421: CALL_OW 261
28425: PUSH
28426: LD_INT 70
28428: LESS
28429: PUSH
28430: LD_VAR 0 2
28434: PPUSH
28435: CALL_OW 262
28439: PUSH
28440: LD_INT 1
28442: EQUAL
28443: AND
28444: IFFALSE 28462
// temp_list = temp_list ^ i ;
28446: LD_ADDR_VAR 0 4
28450: PUSH
28451: LD_VAR 0 4
28455: PUSH
28456: LD_VAR 0 2
28460: ADD
28461: ST_TO_ADDR
28462: GO 28413
28464: POP
28465: POP
// temp_list = temp_list diff ai_vehicles_being_repaired [ base ] ;
28466: LD_ADDR_VAR 0 4
28470: PUSH
28471: LD_VAR 0 4
28475: PUSH
28476: LD_EXP 80
28480: PUSH
28481: LD_VAR 0 14
28485: ARRAY
28486: DIFF
28487: ST_TO_ADDR
// ai_refuel_vehicles_list = Replace ( ai_refuel_vehicles_list , base , temp_list ) ;
28488: LD_ADDR_EXP 55
28492: PUSH
28493: LD_EXP 55
28497: PPUSH
28498: LD_VAR 0 14
28502: PPUSH
28503: LD_VAR 0 4
28507: PPUSH
28508: CALL_OW 1
28512: ST_TO_ADDR
// for i in ai_refuel_vehicles_list [ base ] do
28513: LD_ADDR_VAR 0 2
28517: PUSH
28518: LD_EXP 55
28522: PUSH
28523: LD_VAR 0 14
28527: ARRAY
28528: PUSH
28529: FOR_IN
28530: IFFALSE 28631
// begin if IsInArea ( i , area ) then
28532: LD_VAR 0 2
28536: PPUSH
28537: LD_VAR 0 15
28541: PPUSH
28542: CALL_OW 308
28546: IFFALSE 28590
// begin ComMoveUnit ( i , ai_depot [ base ] ) ;
28548: LD_VAR 0 2
28552: PPUSH
28553: LD_EXP 35
28557: PUSH
28558: LD_VAR 0 14
28562: ARRAY
28563: PPUSH
28564: CALL_OW 112
// AddComRefuel ( i , ai_depot [ base ] ) ;
28568: LD_VAR 0 2
28572: PPUSH
28573: LD_EXP 35
28577: PUSH
28578: LD_VAR 0 14
28582: ARRAY
28583: PPUSH
28584: CALL_OW 210
// end else
28588: GO 28629
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
28590: LD_VAR 0 2
28594: PPUSH
28595: LD_EXP 42
28599: PUSH
28600: LD_VAR 0 14
28604: ARRAY
28605: PUSH
28606: LD_INT 1
28608: ARRAY
28609: PPUSH
28610: LD_EXP 42
28614: PUSH
28615: LD_VAR 0 14
28619: ARRAY
28620: PUSH
28621: LD_INT 2
28623: ARRAY
28624: PPUSH
28625: CALL_OW 114
// end ;
28629: GO 28529
28631: POP
28632: POP
// end ; for i in ai_vehicles_defend [ base ] diff ai_refuel_vehicles_list [ base ] do
28633: LD_ADDR_VAR 0 2
28637: PUSH
28638: LD_EXP 40
28642: PUSH
28643: LD_VAR 0 14
28647: ARRAY
28648: PUSH
28649: LD_EXP 55
28653: PUSH
28654: LD_VAR 0 14
28658: ARRAY
28659: DIFF
28660: PUSH
28661: FOR_IN
28662: IFFALSE 28722
// if not IsInArea ( i , area ) then
28664: LD_VAR 0 2
28668: PPUSH
28669: LD_VAR 0 15
28673: PPUSH
28674: CALL_OW 308
28678: NOT
28679: IFFALSE 28720
// ComAgressiveMove ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
28681: LD_VAR 0 2
28685: PPUSH
28686: LD_EXP 42
28690: PUSH
28691: LD_VAR 0 14
28695: ARRAY
28696: PUSH
28697: LD_INT 1
28699: ARRAY
28700: PPUSH
28701: LD_EXP 42
28705: PUSH
28706: LD_VAR 0 14
28710: ARRAY
28711: PUSH
28712: LD_INT 2
28714: ARRAY
28715: PPUSH
28716: CALL_OW 114
28720: GO 28661
28722: POP
28723: POP
// end ; if mechanics_list = 0 and remote_mechanics = 0 then
28724: LD_VAR 0 3
28728: PUSH
28729: LD_INT 0
28731: EQUAL
28732: PUSH
28733: LD_VAR 0 18
28737: PUSH
28738: LD_INT 0
28740: EQUAL
28741: AND
28742: IFFALSE 28746
// continue ;
28744: GO 25459
// allowed_to_repair_vehicles = UnitFilter ( ai_vehicles_defend [ base ] ^ ( ai_crane [ base ] diff 0 ) , [ [ f_not , [ f_lives , 1000 ] ] , [ f_inarea , GetBaseArea ( base ) ] ] ) ;
28746: LD_ADDR_VAR 0 9
28750: PUSH
28751: LD_EXP 40
28755: PUSH
28756: LD_VAR 0 14
28760: ARRAY
28761: PUSH
28762: LD_EXP 71
28766: PUSH
28767: LD_VAR 0 14
28771: ARRAY
28772: PUSH
28773: LD_INT 0
28775: DIFF
28776: ADD
28777: PPUSH
28778: LD_INT 3
28780: PUSH
28781: LD_INT 24
28783: PUSH
28784: LD_INT 1000
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 95
28797: PUSH
28798: LD_VAR 0 14
28802: PPUSH
28803: CALL 12332 0 1
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PPUSH
28816: CALL_OW 72
28820: ST_TO_ADDR
// if not under_attack then
28821: LD_VAR 0 10
28825: NOT
28826: IFFALSE 28897
// allowed_to_repair_vehicles = allowed_to_repair_vehicles ^ UnitFilter ( ai_cargo_bay [ base ] diff 0 , [ [ f_not , [ f_lives , 1000 ] ] , [ f_inarea , GetBaseArea ( base ) ] ] ) ;
28828: LD_ADDR_VAR 0 9
28832: PUSH
28833: LD_VAR 0 9
28837: PUSH
28838: LD_EXP 61
28842: PUSH
28843: LD_VAR 0 14
28847: ARRAY
28848: PUSH
28849: LD_INT 0
28851: DIFF
28852: PPUSH
28853: LD_INT 3
28855: PUSH
28856: LD_INT 24
28858: PUSH
28859: LD_INT 1000
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 95
28872: PUSH
28873: LD_VAR 0 14
28877: PPUSH
28878: CALL 12332 0 1
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PPUSH
28891: CALL_OW 72
28895: ADD
28896: ST_TO_ADDR
// allowed_to_repair_vehicles = allowed_to_repair_vehicles diff ( ai_refuel_vehicles_list [ base ] ^ ai_vehicles_being_repaired [ base ] ) ;
28897: LD_ADDR_VAR 0 9
28901: PUSH
28902: LD_VAR 0 9
28906: PUSH
28907: LD_EXP 55
28911: PUSH
28912: LD_VAR 0 14
28916: ARRAY
28917: PUSH
28918: LD_EXP 80
28922: PUSH
28923: LD_VAR 0 14
28927: ARRAY
28928: ADD
28929: DIFF
28930: ST_TO_ADDR
// if allowed_to_repair_vehicles > 0 or ai_vehicles_being_repaired [ base ] > 0 then
28931: LD_VAR 0 9
28935: PUSH
28936: LD_INT 0
28938: GREATER
28939: PUSH
28940: LD_EXP 80
28944: PUSH
28945: LD_VAR 0 14
28949: ARRAY
28950: PUSH
28951: LD_INT 0
28953: GREATER
28954: OR
28955: IFFALSE 29457
// begin if remote_mechanics > 0 then
28957: LD_VAR 0 18
28961: PUSH
28962: LD_INT 0
28964: GREATER
28965: IFFALSE 29201
// begin if under_attack then
28967: LD_VAR 0 10
28971: IFFALSE 29079
// begin for i in remote_driver_vehicles [ base ] do
28973: LD_ADDR_VAR 0 2
28977: PUSH
28978: LD_VAR 0 24
28982: PUSH
28983: LD_VAR 0 14
28987: ARRAY
28988: PUSH
28989: FOR_IN
28990: IFFALSE 29075
// if UnitFilter ( i [ 2 ] , [ f_ok ] ) = 0 and i [ 1 ] in remote_mechanics then
28992: LD_VAR 0 2
28996: PUSH
28997: LD_INT 2
28999: ARRAY
29000: PPUSH
29001: LD_INT 50
29003: PUSH
29004: EMPTY
29005: LIST
29006: PPUSH
29007: CALL_OW 72
29011: PUSH
29012: LD_INT 0
29014: EQUAL
29015: PUSH
29016: LD_VAR 0 2
29020: PUSH
29021: LD_INT 1
29023: ARRAY
29024: PUSH
29025: LD_VAR 0 18
29029: IN
29030: AND
29031: IFFALSE 29073
// begin mechanics_list = mechanics_list ^ i [ 1 ] ;
29033: LD_ADDR_VAR 0 3
29037: PUSH
29038: LD_VAR 0 3
29042: PUSH
29043: LD_VAR 0 2
29047: PUSH
29048: LD_INT 1
29050: ARRAY
29051: ADD
29052: ST_TO_ADDR
// remote_mechanics = remote_mechanics diff i [ 1 ] ;
29053: LD_ADDR_VAR 0 18
29057: PUSH
29058: LD_VAR 0 18
29062: PUSH
29063: LD_VAR 0 2
29067: PUSH
29068: LD_INT 1
29070: ARRAY
29071: DIFF
29072: ST_TO_ADDR
// end ;
29073: GO 28989
29075: POP
29076: POP
// end else
29077: GO 29201
// begin temp_unit = true ;
29079: LD_ADDR_VAR 0 7
29083: PUSH
29084: LD_INT 1
29086: ST_TO_ADDR
// for i in remote_driver_vehicles [ base ] do
29087: LD_ADDR_VAR 0 2
29091: PUSH
29092: LD_VAR 0 24
29096: PUSH
29097: LD_VAR 0 14
29101: ARRAY
29102: PUSH
29103: FOR_IN
29104: IFFALSE 29170
// begin for k in i [ 2 ] do
29106: LD_ADDR_VAR 0 12
29110: PUSH
29111: LD_VAR 0 2
29115: PUSH
29116: LD_INT 2
29118: ARRAY
29119: PUSH
29120: FOR_IN
29121: IFFALSE 29157
// if not IsInArea ( k , GetBaseArea ( base ) ) then
29123: LD_VAR 0 12
29127: PPUSH
29128: LD_VAR 0 14
29132: PPUSH
29133: CALL 12332 0 1
29137: PPUSH
29138: CALL_OW 308
29142: NOT
29143: IFFALSE 29155
// begin temp_unit = false ;
29145: LD_ADDR_VAR 0 7
29149: PUSH
29150: LD_INT 0
29152: ST_TO_ADDR
// break ;
29153: GO 29157
// end ;
29155: GO 29120
29157: POP
29158: POP
// if not temp_unit then
29159: LD_VAR 0 7
29163: NOT
29164: IFFALSE 29168
// break ;
29166: GO 29170
// end ;
29168: GO 29103
29170: POP
29171: POP
// if temp_unit then
29172: LD_VAR 0 7
29176: IFFALSE 29201
// begin mechanics_list = mechanics_list ^ remote_mechanics ;
29178: LD_ADDR_VAR 0 3
29182: PUSH
29183: LD_VAR 0 3
29187: PUSH
29188: LD_VAR 0 18
29192: ADD
29193: ST_TO_ADDR
// remote_mechanics = [ ] ;
29194: LD_ADDR_VAR 0 18
29198: PUSH
29199: EMPTY
29200: ST_TO_ADDR
// end ; end ; end ; if allowed_to_repair_vehicles > 0 then
29201: LD_VAR 0 9
29205: PUSH
29206: LD_INT 0
29208: GREATER
29209: IFFALSE 29426
// begin k = false ;
29211: LD_ADDR_VAR 0 12
29215: PUSH
29216: LD_INT 0
29218: ST_TO_ADDR
// if ai_vehicles_being_repaired [ base ] = 0 then
29219: LD_EXP 80
29223: PUSH
29224: LD_VAR 0 14
29228: ARRAY
29229: PUSH
29230: LD_INT 0
29232: EQUAL
29233: IFFALSE 29245
// k = true else
29235: LD_ADDR_VAR 0 12
29239: PUSH
29240: LD_INT 1
29242: ST_TO_ADDR
29243: GO 29308
// if IsOk ( ai_vehicles_being_repaired [ base ] [ 1 ] ) then
29245: LD_EXP 80
29249: PUSH
29250: LD_VAR 0 14
29254: ARRAY
29255: PUSH
29256: LD_INT 1
29258: ARRAY
29259: PPUSH
29260: CALL_OW 302
29264: IFFALSE 29308
// begin allowed_to_repair_vehicles = UnitFilter ( allowed_to_repair_vehicles , [ f_not , [ f_ok ] ] ) ;
29266: LD_ADDR_VAR 0 9
29270: PUSH
29271: LD_VAR 0 9
29275: PPUSH
29276: LD_INT 3
29278: PUSH
29279: LD_INT 50
29281: PUSH
29282: EMPTY
29283: LIST
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PPUSH
29289: CALL_OW 72
29293: ST_TO_ADDR
// k := allowed_to_repair_vehicles > 0 ;
29294: LD_ADDR_VAR 0 12
29298: PUSH
29299: LD_VAR 0 9
29303: PUSH
29304: LD_INT 0
29306: GREATER
29307: ST_TO_ADDR
// end ; if k then
29308: LD_VAR 0 12
29312: IFFALSE 29426
// begin temp_list = [ ] ;
29314: LD_ADDR_VAR 0 4
29318: PUSH
29319: EMPTY
29320: ST_TO_ADDR
// for i in allowed_to_repair_vehicles do
29321: LD_ADDR_VAR 0 2
29325: PUSH
29326: LD_VAR 0 9
29330: PUSH
29331: FOR_IN
29332: IFFALSE 29357
// temp_list = temp_list ^ GetLives ( i ) ;
29334: LD_ADDR_VAR 0 4
29338: PUSH
29339: LD_VAR 0 4
29343: PUSH
29344: LD_VAR 0 2
29348: PPUSH
29349: CALL_OW 256
29353: ADD
29354: ST_TO_ADDR
29355: GO 29331
29357: POP
29358: POP
// temp_unit = WorstFromListByList ( allowed_to_repair_vehicles , temp_list ) ;
29359: LD_ADDR_VAR 0 7
29363: PUSH
29364: LD_VAR 0 9
29368: PPUSH
29369: LD_VAR 0 4
29373: PPUSH
29374: CALL_OW 78
29378: ST_TO_ADDR
// temp_list = temp_unit ^ ai_vehicles_being_repaired [ base ] ;
29379: LD_ADDR_VAR 0 4
29383: PUSH
29384: LD_VAR 0 7
29388: PUSH
29389: LD_EXP 80
29393: PUSH
29394: LD_VAR 0 14
29398: ARRAY
29399: ADD
29400: ST_TO_ADDR
// ai_vehicles_being_repaired = Replace ( ai_vehicles_being_repaired , base , temp_list ) ;
29401: LD_ADDR_EXP 80
29405: PUSH
29406: LD_EXP 80
29410: PPUSH
29411: LD_VAR 0 14
29415: PPUSH
29416: LD_VAR 0 4
29420: PPUSH
29421: CALL_OW 1
29425: ST_TO_ADDR
// end ; end ; ComRepairVehicle ( GetHumansOutOfUnits ( mechanics_list ) , ai_vehicles_being_repaired [ base ] [ 1 ] ) ;
29426: LD_VAR 0 3
29430: PPUSH
29431: CALL 23218 0 1
29435: PPUSH
29436: LD_EXP 80
29440: PUSH
29441: LD_VAR 0 14
29445: ARRAY
29446: PUSH
29447: LD_INT 1
29449: ARRAY
29450: PPUSH
29451: CALL_OW 129
// end else
29455: GO 29522
// begin DistributeHumansToBuildings ( base , mechanics_list , UnitFilter ( ai_facts [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_mechanic , 6 , true , false ) ;
29457: LD_VAR 0 14
29461: PPUSH
29462: LD_VAR 0 3
29466: PPUSH
29467: LD_EXP 48
29471: PUSH
29472: LD_VAR 0 14
29476: ARRAY
29477: PPUSH
29478: LD_INT 50
29480: PUSH
29481: EMPTY
29482: LIST
29483: PUSH
29484: LD_INT 3
29486: PUSH
29487: LD_INT 57
29489: PUSH
29490: EMPTY
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PPUSH
29501: CALL_OW 72
29505: PPUSH
29506: LD_INT 3
29508: PPUSH
29509: LD_INT 6
29511: PPUSH
29512: LD_INT 1
29514: PPUSH
29515: LD_INT 0
29517: PPUSH
29518: CALL 15289 0 7
// end ; if remote_driver_vehicles [ base ] > 0 then
29522: LD_VAR 0 24
29526: PUSH
29527: LD_VAR 0 14
29531: ARRAY
29532: PUSH
29533: LD_INT 0
29535: GREATER
29536: IFFALSE 30072
// begin if not IsOk ( ai_control_tower [ base ] ) then
29538: LD_EXP 57
29542: PUSH
29543: LD_VAR 0 14
29547: ARRAY
29548: PPUSH
29549: CALL_OW 302
29553: NOT
29554: IFFALSE 29623
// begin DistributeHumansToBuildings ( base , remote_mechanics , UnitFilter ( ai_facts [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_mechanic , 6 , true , false ) ;
29556: LD_VAR 0 14
29560: PPUSH
29561: LD_VAR 0 18
29565: PPUSH
29566: LD_EXP 48
29570: PUSH
29571: LD_VAR 0 14
29575: ARRAY
29576: PPUSH
29577: LD_INT 50
29579: PUSH
29580: EMPTY
29581: LIST
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: LD_INT 57
29588: PUSH
29589: EMPTY
29590: LIST
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PPUSH
29600: CALL_OW 72
29604: PPUSH
29605: LD_INT 3
29607: PPUSH
29608: LD_INT 6
29610: PPUSH
29611: LD_INT 1
29613: PPUSH
29614: LD_INT 0
29616: PPUSH
29617: CALL 15289 0 7
// end else
29621: GO 30072
// begin for i in remote_driver_vehicles [ base ] do
29623: LD_ADDR_VAR 0 2
29627: PUSH
29628: LD_VAR 0 24
29632: PUSH
29633: LD_VAR 0 14
29637: ARRAY
29638: PUSH
29639: FOR_IN
29640: IFFALSE 30070
// begin if not i [ 1 ] in remote_mechanics then
29642: LD_VAR 0 2
29646: PUSH
29647: LD_INT 1
29649: ARRAY
29650: PUSH
29651: LD_VAR 0 18
29655: IN
29656: NOT
29657: IFFALSE 29661
// continue ;
29659: GO 29639
// if GetClass ( i [ 1 ] ) <> class_mechanic then
29661: LD_VAR 0 2
29665: PUSH
29666: LD_INT 1
29668: ARRAY
29669: PPUSH
29670: CALL_OW 257
29674: PUSH
29675: LD_INT 3
29677: NONEQUAL
29678: IFFALSE 29886
// begin temp_unit = 0 ;
29680: LD_ADDR_VAR 0 7
29684: PUSH
29685: LD_INT 0
29687: ST_TO_ADDR
// for k in ai_facts [ base ] do
29688: LD_ADDR_VAR 0 12
29692: PUSH
29693: LD_EXP 48
29697: PUSH
29698: LD_VAR 0 14
29702: ARRAY
29703: PUSH
29704: FOR_IN
29705: IFFALSE 29747
// if IsOk ( k ) and UnitsInside ( k ) < 6 then
29707: LD_VAR 0 12
29711: PPUSH
29712: CALL_OW 302
29716: PUSH
29717: LD_VAR 0 12
29721: PPUSH
29722: CALL_OW 313
29726: PUSH
29727: LD_INT 6
29729: LESS
29730: AND
29731: IFFALSE 29745
// begin temp_unit = k ;
29733: LD_ADDR_VAR 0 7
29737: PUSH
29738: LD_VAR 0 12
29742: ST_TO_ADDR
// break ;
29743: GO 29747
// end ;
29745: GO 29704
29747: POP
29748: POP
// if temp_unit > 0 then
29749: LD_VAR 0 7
29753: PUSH
29754: LD_INT 0
29756: GREATER
29757: IFFALSE 29884
// begin if IsInUnit ( i [ 1 ] ) = temp_unit then
29759: LD_VAR 0 2
29763: PUSH
29764: LD_INT 1
29766: ARRAY
29767: PPUSH
29768: CALL_OW 310
29772: PUSH
29773: LD_VAR 0 7
29777: EQUAL
29778: IFFALSE 29798
// ComChangeProfession ( i [ 1 ] , class_mechanic ) else
29780: LD_VAR 0 2
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PPUSH
29789: LD_INT 3
29791: PPUSH
29792: CALL_OW 123
29796: GO 29884
// begin case GetType ( IsInUnit ( i [ 1 ] ) ) of unit_building :
29798: LD_VAR 0 2
29802: PUSH
29803: LD_INT 1
29805: ARRAY
29806: PPUSH
29807: CALL_OW 310
29811: PPUSH
29812: CALL_OW 247
29816: PUSH
29817: LD_INT 3
29819: DOUBLE
29820: EQUAL
29821: IFTRUE 29825
29823: GO 29841
29825: POP
// ComExitBuilding ( i [ 1 ] ) ; unit_vehicle :
29826: LD_VAR 0 2
29830: PUSH
29831: LD_INT 1
29833: ARRAY
29834: PPUSH
29835: CALL_OW 122
29839: GO 29884
29841: LD_INT 2
29843: DOUBLE
29844: EQUAL
29845: IFTRUE 29849
29847: GO 29865
29849: POP
// ComExitVehicle ( i [ 1 ] ) ; else
29850: LD_VAR 0 2
29854: PUSH
29855: LD_INT 1
29857: ARRAY
29858: PPUSH
29859: CALL_OW 121
29863: GO 29884
29865: POP
// ComEnterUnit ( i [ 1 ] , temp_unit ) ; end ;
29866: LD_VAR 0 2
29870: PUSH
29871: LD_INT 1
29873: ARRAY
29874: PPUSH
29875: LD_VAR 0 7
29879: PPUSH
29880: CALL_OW 120
// end ; end ; end else
29884: GO 30068
// begin temp_unit = IsInUnit ( i [ 1 ] ) ;
29886: LD_ADDR_VAR 0 7
29890: PUSH
29891: LD_VAR 0 2
29895: PUSH
29896: LD_INT 1
29898: ARRAY
29899: PPUSH
29900: CALL_OW 310
29904: ST_TO_ADDR
// if temp_unit <> ai_control_tower [ base ] then
29905: LD_VAR 0 7
29909: PUSH
29910: LD_EXP 57
29914: PUSH
29915: LD_VAR 0 14
29919: ARRAY
29920: NONEQUAL
29921: IFFALSE 30008
// begin case GetType ( temp_unit ) of unit_building :
29923: LD_VAR 0 7
29927: PPUSH
29928: CALL_OW 247
29932: PUSH
29933: LD_INT 3
29935: DOUBLE
29936: EQUAL
29937: IFTRUE 29941
29939: GO 29957
29941: POP
// ComExitBuilding ( i [ 1 ] ) ; unit_vehicle :
29942: LD_VAR 0 2
29946: PUSH
29947: LD_INT 1
29949: ARRAY
29950: PPUSH
29951: CALL_OW 122
29955: GO 30006
29957: LD_INT 2
29959: DOUBLE
29960: EQUAL
29961: IFTRUE 29965
29963: GO 29981
29965: POP
// ComExitVehicle ( i [ 1 ] ) ; else
29966: LD_VAR 0 2
29970: PUSH
29971: LD_INT 1
29973: ARRAY
29974: PPUSH
29975: CALL_OW 121
29979: GO 30006
29981: POP
// ComEnterUnit ( i [ 1 ] , ai_control_tower [ base ] ) ; end ;
29982: LD_VAR 0 2
29986: PUSH
29987: LD_INT 1
29989: ARRAY
29990: PPUSH
29991: LD_EXP 57
29995: PUSH
29996: LD_VAR 0 14
30000: ARRAY
30001: PPUSH
30002: CALL_OW 120
// end else
30006: GO 30068
// for k in i [ 2 ] do
30008: LD_ADDR_VAR 0 12
30012: PUSH
30013: LD_VAR 0 2
30017: PUSH
30018: LD_INT 2
30020: ARRAY
30021: PUSH
30022: FOR_IN
30023: IFFALSE 30066
// if IsControledBy ( k ) <> i [ 1 ] then
30025: LD_VAR 0 12
30029: PPUSH
30030: CALL_OW 312
30034: PUSH
30035: LD_VAR 0 2
30039: PUSH
30040: LD_INT 1
30042: ARRAY
30043: NONEQUAL
30044: IFFALSE 30064
// ComLinkTo ( k , i [ 1 ] ) ;
30046: LD_VAR 0 12
30050: PPUSH
30051: LD_VAR 0 2
30055: PUSH
30056: LD_INT 1
30058: ARRAY
30059: PPUSH
30060: CALL_OW 135
30064: GO 30022
30066: POP
30067: POP
// end ; end ;
30068: GO 29639
30070: POP
30071: POP
// end ; end ; end ;
30072: GO 25459
30074: POP
30075: POP
// until false ;
30076: LD_INT 0
30078: IFFALSE 25442
// end ;
30080: PPOPN 24
30082: END
// function MaxNumWarVehicles ( base ) ; begin
30083: LD_INT 0
30085: PPUSH
// case base of 1 :
30086: LD_VAR 0 1
30090: PUSH
30091: LD_INT 1
30093: DOUBLE
30094: EQUAL
30095: IFTRUE 30099
30097: GO 30156
30099: POP
// result = WorstFromListByList ( [ ai_mechanics_defend [ base ] + 0 , 3 ] , [ ai_mechanics_defend [ base ] + 0 , 3 ] ) ; 2 :
30100: LD_ADDR_VAR 0 2
30104: PUSH
30105: LD_EXP 32
30109: PUSH
30110: LD_VAR 0 1
30114: ARRAY
30115: PUSH
30116: LD_INT 0
30118: PLUS
30119: PUSH
30120: LD_INT 3
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PPUSH
30127: LD_EXP 32
30131: PUSH
30132: LD_VAR 0 1
30136: ARRAY
30137: PUSH
30138: LD_INT 0
30140: PLUS
30141: PUSH
30142: LD_INT 3
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PPUSH
30149: CALL_OW 78
30153: ST_TO_ADDR
30154: GO 30212
30156: LD_INT 2
30158: DOUBLE
30159: EQUAL
30160: IFTRUE 30164
30162: GO 30175
30164: POP
// result = 0 ; 3 :
30165: LD_ADDR_VAR 0 2
30169: PUSH
30170: LD_INT 0
30172: ST_TO_ADDR
30173: GO 30212
30175: LD_INT 3
30177: DOUBLE
30178: EQUAL
30179: IFTRUE 30183
30181: GO 30211
30183: POP
// result = [ 3 , 4 , 5 ] [ difficulty ] ; end ;
30184: LD_ADDR_VAR 0 2
30188: PUSH
30189: LD_INT 3
30191: PUSH
30192: LD_INT 4
30194: PUSH
30195: LD_INT 5
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: PUSH
30203: LD_OWVAR 67
30207: ARRAY
30208: ST_TO_ADDR
30209: GO 30212
30211: POP
// end ;
30212: LD_VAR 0 2
30216: RET
// function FindNextHexOldWaypointSystem ( waypoints , un ) ; var dist , k , num , temp ; begin
30217: LD_INT 0
30219: PPUSH
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
// dist = GetDistUnitXY ( un , waypoints [ 1 ] [ 1 ] , waypoints [ 1 ] [ 2 ] ) ;
30224: LD_ADDR_VAR 0 4
30228: PUSH
30229: LD_VAR 0 2
30233: PPUSH
30234: LD_VAR 0 1
30238: PUSH
30239: LD_INT 1
30241: ARRAY
30242: PUSH
30243: LD_INT 1
30245: ARRAY
30246: PPUSH
30247: LD_VAR 0 1
30251: PUSH
30252: LD_INT 1
30254: ARRAY
30255: PUSH
30256: LD_INT 2
30258: ARRAY
30259: PPUSH
30260: CALL_OW 297
30264: ST_TO_ADDR
// num = 1 ;
30265: LD_ADDR_VAR 0 6
30269: PUSH
30270: LD_INT 1
30272: ST_TO_ADDR
// for k = 2 to waypoints do
30273: LD_ADDR_VAR 0 5
30277: PUSH
30278: DOUBLE
30279: LD_INT 2
30281: DEC
30282: ST_TO_ADDR
30283: LD_VAR 0 1
30287: PUSH
30288: FOR_TO
30289: IFFALSE 30370
// begin temp = GetDistUnitXY ( un , waypoints [ k ] [ 1 ] , waypoints [ k ] [ 2 ] ) ;
30291: LD_ADDR_VAR 0 7
30295: PUSH
30296: LD_VAR 0 2
30300: PPUSH
30301: LD_VAR 0 1
30305: PUSH
30306: LD_VAR 0 5
30310: ARRAY
30311: PUSH
30312: LD_INT 1
30314: ARRAY
30315: PPUSH
30316: LD_VAR 0 1
30320: PUSH
30321: LD_VAR 0 5
30325: ARRAY
30326: PUSH
30327: LD_INT 2
30329: ARRAY
30330: PPUSH
30331: CALL_OW 297
30335: ST_TO_ADDR
// if temp < dist then
30336: LD_VAR 0 7
30340: PUSH
30341: LD_VAR 0 4
30345: LESS
30346: IFFALSE 30368
// begin dist = temp ;
30348: LD_ADDR_VAR 0 4
30352: PUSH
30353: LD_VAR 0 7
30357: ST_TO_ADDR
// num = k ;
30358: LD_ADDR_VAR 0 6
30362: PUSH
30363: LD_VAR 0 5
30367: ST_TO_ADDR
// end ; end ;
30368: GO 30288
30370: POP
30371: POP
// if num < waypoints + 0 then
30372: LD_VAR 0 6
30376: PUSH
30377: LD_VAR 0 1
30381: PUSH
30382: LD_INT 0
30384: PLUS
30385: LESS
30386: IFFALSE 30402
// num = num + 1 ;
30388: LD_ADDR_VAR 0 6
30392: PUSH
30393: LD_VAR 0 6
30397: PUSH
30398: LD_INT 1
30400: PLUS
30401: ST_TO_ADDR
// result = waypoints [ num ] ;
30402: LD_ADDR_VAR 0 3
30406: PUSH
30407: LD_VAR 0 1
30411: PUSH
30412: LD_VAR 0 6
30416: ARRAY
30417: ST_TO_ADDR
// end ;
30418: LD_VAR 0 3
30422: RET
// every 0 0$1 + 0 0$0.1 do var i , temp_value , temp_unit , temp_list , base , idle_factories , fact ; var vehicle_prod_delay ;
30423: GO 30425
30425: DISABLE
30426: LD_INT 0
30428: PPUSH
30429: PPUSH
30430: PPUSH
30431: PPUSH
30432: PPUSH
30433: PPUSH
30434: PPUSH
30435: PPUSH
// begin vehicle_prod_delay = [ 0 0$0 , 0 0$0 , 0 0$0 ] ;
30436: LD_ADDR_VAR 0 8
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30455: LD_INT 35
30457: PPUSH
30458: CALL_OW 67
// for base in ai_bases do
30462: LD_ADDR_VAR 0 5
30466: PUSH
30467: LD_EXP 59
30471: PUSH
30472: FOR_IN
30473: IFFALSE 31299
// begin if ContactTime ( GetBaseSide ( base ) ) <= 0 0$10 and ai_vehicles_defend [ base ] >= [ 0 , 1 , 2 ] [ difficulty ] then
30475: LD_VAR 0 5
30479: PPUSH
30480: CALL 12403 0 1
30484: PPUSH
30485: CALL_OW 462
30489: PUSH
30490: LD_INT 350
30492: LESSEQUAL
30493: PUSH
30494: LD_EXP 40
30498: PUSH
30499: LD_VAR 0 5
30503: ARRAY
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: PUSH
30519: LD_OWVAR 67
30523: ARRAY
30524: GREATEREQUAL
30525: AND
30526: IFFALSE 30568
// begin vehicle_prod_delay = Replace ( vehicle_prod_delay , base , [ 1 1$15 , 0 0$45 , 0 0$30 ] [ difficulty ] ) ;
30528: LD_ADDR_VAR 0 8
30532: PUSH
30533: LD_VAR 0 8
30537: PPUSH
30538: LD_VAR 0 5
30542: PPUSH
30543: LD_INT 2625
30545: PUSH
30546: LD_INT 1575
30548: PUSH
30549: LD_INT 1050
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: PUSH
30557: LD_OWVAR 67
30561: ARRAY
30562: PPUSH
30563: CALL_OW 1
30567: ST_TO_ADDR
// end ; idle_factories = [ ] ;
30568: LD_ADDR_VAR 0 6
30572: PUSH
30573: EMPTY
30574: ST_TO_ADDR
// for i in ai_facts [ base ] do
30575: LD_ADDR_VAR 0 1
30579: PUSH
30580: LD_EXP 48
30584: PUSH
30585: LD_VAR 0 5
30589: ARRAY
30590: PUSH
30591: FOR_IN
30592: IFFALSE 30653
// if BuildingStatus ( i ) = bs_idle and IsOk ( i ) and GetBType ( i ) = b_factory then
30594: LD_VAR 0 1
30598: PPUSH
30599: CALL_OW 461
30603: PUSH
30604: LD_INT 2
30606: EQUAL
30607: PUSH
30608: LD_VAR 0 1
30612: PPUSH
30613: CALL_OW 302
30617: AND
30618: PUSH
30619: LD_VAR 0 1
30623: PPUSH
30624: CALL_OW 266
30628: PUSH
30629: LD_INT 3
30631: EQUAL
30632: AND
30633: IFFALSE 30651
// idle_factories = idle_factories ^ i ;
30635: LD_ADDR_VAR 0 6
30639: PUSH
30640: LD_VAR 0 6
30644: PUSH
30645: LD_VAR 0 1
30649: ADD
30650: ST_TO_ADDR
30651: GO 30591
30653: POP
30654: POP
// if idle_factories = 0 then
30655: LD_VAR 0 6
30659: PUSH
30660: LD_INT 0
30662: EQUAL
30663: IFFALSE 30667
// continue ;
30665: GO 30472
// temp_value = false ;
30667: LD_ADDR_VAR 0 2
30671: PUSH
30672: LD_INT 0
30674: ST_TO_ADDR
// for i in ai_buildings_locations [ base ] do
30675: LD_ADDR_VAR 0 1
30679: PUSH
30680: LD_EXP 39
30684: PUSH
30685: LD_VAR 0 5
30689: ARRAY
30690: PUSH
30691: FOR_IN
30692: IFFALSE 30864
// if i [ 4 ] in [ b_bunker , b_turret ] then
30694: LD_VAR 0 1
30698: PUSH
30699: LD_INT 4
30701: ARRAY
30702: PUSH
30703: LD_INT 32
30705: PUSH
30706: LD_INT 33
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: IN
30713: IFFALSE 30862
// begin temp_unit = HexInfo ( i [ 1 ] , i [ 2 ] ) ;
30715: LD_ADDR_VAR 0 3
30719: PUSH
30720: LD_VAR 0 1
30724: PUSH
30725: LD_INT 1
30727: ARRAY
30728: PPUSH
30729: LD_VAR 0 1
30733: PUSH
30734: LD_INT 2
30736: ARRAY
30737: PPUSH
30738: CALL_OW 428
30742: ST_TO_ADDR
// if GetBType ( temp_unit ) in [ b_bunker , b_turret ] and not IsConstructed ( temp_unit ) and GetBWeapon ( temp_unit ) <> i [ 7 ] then
30743: LD_VAR 0 3
30747: PPUSH
30748: CALL_OW 266
30752: PUSH
30753: LD_INT 32
30755: PUSH
30756: LD_INT 33
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: IN
30763: PUSH
30764: LD_VAR 0 3
30768: PPUSH
30769: CALL_OW 304
30773: NOT
30774: AND
30775: PUSH
30776: LD_VAR 0 3
30780: PPUSH
30781: CALL_OW 269
30785: PUSH
30786: LD_VAR 0 1
30790: PUSH
30791: LD_INT 7
30793: ARRAY
30794: NONEQUAL
30795: AND
30796: IFFALSE 30854
// for fact in idle_factories do
30798: LD_ADDR_VAR 0 7
30802: PUSH
30803: LD_VAR 0 6
30807: PUSH
30808: FOR_IN
30809: IFFALSE 30852
// if IsWeaponFactory ( fact ) then
30811: LD_VAR 0 7
30815: PPUSH
30816: CALL 31308 0 1
30820: IFFALSE 30850
// begin ComPlaceWeapon ( temp_unit , i [ 7 ] ) ;
30822: LD_VAR 0 3
30826: PPUSH
30827: LD_VAR 0 1
30831: PUSH
30832: LD_INT 7
30834: ARRAY
30835: PPUSH
30836: CALL_OW 148
// temp_value = true ;
30840: LD_ADDR_VAR 0 2
30844: PUSH
30845: LD_INT 1
30847: ST_TO_ADDR
// break ;
30848: GO 30852
// end ;
30850: GO 30808
30852: POP
30853: POP
// if temp_value then
30854: LD_VAR 0 2
30858: IFFALSE 30862
// break ;
30860: GO 30864
// end ;
30862: GO 30691
30864: POP
30865: POP
// if temp_value then
30866: LD_VAR 0 2
30870: IFFALSE 30874
// continue ;
30872: GO 30472
// if vehicle_prod_delay [ base ] > 0 0$0 or game_phase = 2 then
30874: LD_VAR 0 8
30878: PUSH
30879: LD_VAR 0 5
30883: ARRAY
30884: PUSH
30885: LD_INT 0
30887: GREATER
30888: PUSH
30889: LD_EXP 89
30893: PUSH
30894: LD_INT 2
30896: EQUAL
30897: OR
30898: IFFALSE 30937
// begin vehicle_prod_delay = Replace ( vehicle_prod_delay , base , vehicle_prod_delay [ base ] - 0 0$1 ) ;
30900: LD_ADDR_VAR 0 8
30904: PUSH
30905: LD_VAR 0 8
30909: PPUSH
30910: LD_VAR 0 5
30914: PPUSH
30915: LD_VAR 0 8
30919: PUSH
30920: LD_VAR 0 5
30924: ARRAY
30925: PUSH
30926: LD_INT 35
30928: MINUS
30929: PPUSH
30930: CALL_OW 1
30934: ST_TO_ADDR
// continue ;
30935: GO 30472
// end ; if ai_vehicles_defend [ base ] < MaxNumWarVehicles ( base ) then
30937: LD_EXP 40
30941: PUSH
30942: LD_VAR 0 5
30946: ARRAY
30947: PUSH
30948: LD_VAR 0 5
30952: PPUSH
30953: CALL 30083 0 1
30957: LESS
30958: IFFALSE 31297
// begin case base of 1 :
30960: LD_VAR 0 5
30964: PUSH
30965: LD_INT 1
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 31091
30973: POP
// begin case Rand ( 1 , 4 ) of 1 :
30974: LD_INT 1
30976: PPUSH
30977: LD_INT 4
30979: PPUSH
30980: CALL_OW 12
30984: PUSH
30985: LD_INT 1
30987: DOUBLE
30988: EQUAL
30989: IFTRUE 30993
30991: GO 31004
30993: POP
// temp_value = us_gatling_gun ; 2 :
30994: LD_ADDR_VAR 0 2
30998: PUSH
30999: LD_INT 4
31001: ST_TO_ADDR
31002: GO 31062
31004: LD_INT 2
31006: DOUBLE
31007: EQUAL
31008: IFTRUE 31012
31010: GO 31023
31012: POP
// temp_value = us_laser ; 3 :
31013: LD_ADDR_VAR 0 2
31017: PUSH
31018: LD_INT 9
31020: ST_TO_ADDR
31021: GO 31062
31023: LD_INT 3
31025: DOUBLE
31026: EQUAL
31027: IFTRUE 31031
31029: GO 31042
31031: POP
// temp_value = us_double_gun ; 4 :
31032: LD_ADDR_VAR 0 2
31036: PUSH
31037: LD_INT 5
31039: ST_TO_ADDR
31040: GO 31062
31042: LD_INT 4
31044: DOUBLE
31045: EQUAL
31046: IFTRUE 31050
31048: GO 31061
31050: POP
// temp_value = us_rocket_launcher ; end ;
31051: LD_ADDR_VAR 0 2
31055: PUSH
31056: LD_INT 7
31058: ST_TO_ADDR
31059: GO 31062
31061: POP
// ComConstruct ( idle_factories [ 1 ] , us_medium_wheeled , engine_siberite , control_remote , temp_value ) ;
31062: LD_VAR 0 6
31066: PUSH
31067: LD_INT 1
31069: ARRAY
31070: PPUSH
31071: LD_INT 2
31073: PPUSH
31074: LD_INT 3
31076: PPUSH
31077: LD_INT 2
31079: PPUSH
31080: LD_VAR 0 2
31084: PPUSH
31085: CALL_OW 125
// end ; 2 :
31089: GO 31297
31091: LD_INT 2
31093: DOUBLE
31094: EQUAL
31095: IFTRUE 31099
31097: GO 31102
31099: POP
// begin end ; 3 :
31100: GO 31297
31102: LD_INT 3
31104: DOUBLE
31105: EQUAL
31106: IFTRUE 31110
31108: GO 31296
31110: POP
// begin if PlayerAtEasternBorder then
31111: CALL 31614 0 0
31115: IFFALSE 31138
// temp_list = [ ru_heavy_machine_gun , ru_gun , ru_rocket_launcher ] else
31117: LD_ADDR_VAR 0 4
31121: PUSH
31122: LD_INT 42
31124: PUSH
31125: LD_INT 44
31127: PUSH
31128: LD_INT 45
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: LIST
31135: ST_TO_ADDR
31136: GO 31157
// temp_list = [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
31138: LD_ADDR_VAR 0 4
31142: PUSH
31143: LD_INT 43
31145: PUSH
31146: LD_INT 46
31148: PUSH
31149: LD_INT 45
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: ST_TO_ADDR
// temp_value = temp_list [ Rand ( 1 , temp_list + 0 ) ] ;
31157: LD_ADDR_VAR 0 2
31161: PUSH
31162: LD_VAR 0 4
31166: PUSH
31167: LD_INT 1
31169: PPUSH
31170: LD_VAR 0 4
31174: PUSH
31175: LD_INT 0
31177: PLUS
31178: PPUSH
31179: CALL_OW 12
31183: ARRAY
31184: ST_TO_ADDR
// if not IsWeaponFactory ( idle_factories [ 1 ] ) then
31185: LD_VAR 0 6
31189: PUSH
31190: LD_INT 1
31192: ARRAY
31193: PPUSH
31194: CALL 31308 0 1
31198: NOT
31199: IFFALSE 31209
// temp_value = ru_heavy_machine_gun ;
31201: LD_ADDR_VAR 0 2
31205: PUSH
31206: LD_INT 42
31208: ST_TO_ADDR
// if temp_value = ru_heavy_gun then
31209: LD_VAR 0 2
31213: PUSH
31214: LD_INT 46
31216: EQUAL
31217: IFFALSE 31229
// i = ru_heavy_tracked else
31219: LD_ADDR_VAR 0 1
31223: PUSH
31224: LD_INT 24
31226: ST_TO_ADDR
31227: GO 31265
// if Rand ( difficulty , 4 ) = 4 then
31229: LD_OWVAR 67
31233: PPUSH
31234: LD_INT 4
31236: PPUSH
31237: CALL_OW 12
31241: PUSH
31242: LD_INT 4
31244: EQUAL
31245: IFFALSE 31257
// i = ru_heavy_tracked else
31247: LD_ADDR_VAR 0 1
31251: PUSH
31252: LD_INT 24
31254: ST_TO_ADDR
31255: GO 31265
// i = ru_medium_tracked ;
31257: LD_ADDR_VAR 0 1
31261: PUSH
31262: LD_INT 22
31264: ST_TO_ADDR
// ComConstruct ( idle_factories [ 1 ] , i , engine_siberite , control_computer , temp_value ) ;
31265: LD_VAR 0 6
31269: PUSH
31270: LD_INT 1
31272: ARRAY
31273: PPUSH
31274: LD_VAR 0 1
31278: PPUSH
31279: LD_INT 3
31281: PPUSH
31282: LD_INT 3
31284: PPUSH
31285: LD_VAR 0 2
31289: PPUSH
31290: CALL_OW 125
// end ; end ;
31294: GO 31297
31296: POP
// end ; end ;
31297: GO 30472
31299: POP
31300: POP
// until false ;
31301: LD_INT 0
31303: IFFALSE 30455
// end ;
31305: PPOPN 8
31307: END
// function IsWeaponFactory ( factory ) ; begin
31308: LD_INT 0
31310: PPUSH
// if FilterAllUnits ( [ [ f_dist , factory , 4 ] , [ f_btype , b_ext_gun ] ] ) > 0 then
31311: LD_INT 91
31313: PUSH
31314: LD_VAR 0 1
31318: PUSH
31319: LD_INT 4
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 30
31329: PUSH
31330: LD_INT 17
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PPUSH
31341: CALL_OW 69
31345: PUSH
31346: LD_INT 0
31348: GREATER
31349: IFFALSE 31361
// result = true else
31351: LD_ADDR_VAR 0 2
31355: PUSH
31356: LD_INT 1
31358: ST_TO_ADDR
31359: GO 31369
// result = false ;
31361: LD_ADDR_VAR 0 2
31365: PUSH
31366: LD_INT 0
31368: ST_TO_ADDR
// end ;
31369: LD_VAR 0 2
31373: RET
// on VehicleCaptured ( new_identifier , old_identifier , old_side , capturing_unit ) do var temp_list , base ;
31374: LD_INT 0
31376: PPUSH
31377: PPUSH
// begin if old_side = you then
31378: LD_VAR 0 3
31382: PUSH
31383: LD_EXP 3
31387: EQUAL
31388: IFFALSE 31392
// exit ;
31390: GO 31423
// for base in ai_bases do
31392: LD_ADDR_VAR 0 6
31396: PUSH
31397: LD_EXP 59
31401: PUSH
31402: FOR_IN
31403: IFFALSE 31421
// RemoveVehicleFromVariables ( base , old_identifier ) ;
31405: LD_VAR 0 6
31409: PPUSH
31410: LD_VAR 0 2
31414: PPUSH
31415: CALL 11191 0 2
31419: GO 31402
31421: POP
31422: POP
// end ;
31423: PPOPN 6
31425: END
// on VehicleConstructed ( vehicle , factory ) do var side , temp_list , base ;
31426: LD_INT 0
31428: PPUSH
31429: PPUSH
31430: PPUSH
// begin side = GetSide ( vehicle ) ;
31431: LD_ADDR_VAR 0 3
31435: PUSH
31436: LD_VAR 0 1
31440: PPUSH
31441: CALL_OW 255
31445: ST_TO_ADDR
// if side = you then
31446: LD_VAR 0 3
31450: PUSH
31451: LD_EXP 3
31455: EQUAL
31456: IFFALSE 31460
// exit ;
31458: GO 31611
// base = FindBase ( vehicle ) ;
31460: LD_ADDR_VAR 0 5
31464: PUSH
31465: LD_VAR 0 1
31469: PPUSH
31470: CALL 12551 0 1
31474: ST_TO_ADDR
// if base = 0 then
31475: LD_VAR 0 5
31479: PUSH
31480: LD_INT 0
31482: EQUAL
31483: IFFALSE 31487
// exit ;
31485: GO 31611
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay ] then
31487: LD_VAR 0 1
31491: PPUSH
31492: CALL_OW 264
31496: PUSH
31497: LD_INT 12
31499: PUSH
31500: LD_INT 32
31502: PUSH
31503: LD_INT 51
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: LIST
31510: IN
31511: NOT
31512: IFFALSE 31563
// begin temp_list = ai_vehicles_defend [ base ] ^ vehicle ;
31514: LD_ADDR_VAR 0 4
31518: PUSH
31519: LD_EXP 40
31523: PUSH
31524: LD_VAR 0 5
31528: ARRAY
31529: PUSH
31530: LD_VAR 0 1
31534: ADD
31535: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list ) ;
31536: LD_ADDR_EXP 40
31540: PUSH
31541: LD_EXP 40
31545: PPUSH
31546: LD_VAR 0 5
31550: PPUSH
31551: LD_VAR 0 4
31555: PPUSH
31556: CALL_OW 1
31560: ST_TO_ADDR
// end else
31561: GO 31611
// begin ai_cargo_bay = Replace ( ai_cargo_bay , base , vehicle ) ;
31563: LD_ADDR_EXP 61
31567: PUSH
31568: LD_EXP 61
31572: PPUSH
31573: LD_VAR 0 5
31577: PPUSH
31578: LD_VAR 0 1
31582: PPUSH
31583: CALL_OW 1
31587: ST_TO_ADDR
// ai_cargo_bay_under_construction = Replace ( ai_cargo_bay_under_construction , base , false ) ;
31588: LD_ADDR_EXP 62
31592: PUSH
31593: LD_EXP 62
31597: PPUSH
31598: LD_VAR 0 5
31602: PPUSH
31603: LD_INT 0
31605: PPUSH
31606: CALL_OW 1
31610: ST_TO_ADDR
// end ; end ;
31611: PPOPN 5
31613: END
// export function PlayerAtEasternBorder ; var temp_list ; begin
31614: LD_INT 0
31616: PPUSH
31617: PPUSH
// result = false ;
31618: LD_ADDR_VAR 0 1
31622: PUSH
31623: LD_INT 0
31625: ST_TO_ADDR
// temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31626: LD_ADDR_VAR 0 2
31630: PUSH
31631: LD_INT 22
31633: PUSH
31634: LD_EXP 3
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 2
31645: PUSH
31646: LD_INT 30
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 30
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: LIST
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PPUSH
31675: CALL_OW 69
31679: ST_TO_ADDR
// if temp_list = 0 then
31680: LD_VAR 0 2
31684: PUSH
31685: LD_INT 0
31687: EQUAL
31688: IFFALSE 31700
// result = true else
31690: LD_ADDR_VAR 0 1
31694: PUSH
31695: LD_INT 1
31697: ST_TO_ADDR
31698: GO 31733
// if UnitFilter ( temp_list , [ f_inarea , player_base_outer ] ) > 0 then
31700: LD_VAR 0 2
31704: PPUSH
31705: LD_INT 95
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PPUSH
31715: CALL_OW 72
31719: PUSH
31720: LD_INT 0
31722: GREATER
31723: IFFALSE 31733
// result = true ;
31725: LD_ADDR_VAR 0 1
31729: PUSH
31730: LD_INT 1
31732: ST_TO_ADDR
// end ;
31733: LD_VAR 0 1
31737: RET
// every 0 0$2 + 0 0$0.6 do var i , temp_list , human_list , num_sol , num_baz , num_sci , temp_list_2 , temp_list_3 , k ; var base , side , attack_strat_history , first_time_attack_gensher ;
31738: GO 31740
31740: DISABLE
31741: LD_INT 0
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
31747: PPUSH
31748: PPUSH
31749: PPUSH
31750: PPUSH
31751: PPUSH
31752: PPUSH
31753: PPUSH
31754: PPUSH
31755: PPUSH
// begin base = 3 ;
31756: LD_ADDR_VAR 0 10
31760: PUSH
31761: LD_INT 3
31763: ST_TO_ADDR
// side = russians ;
31764: LD_ADDR_VAR 0 11
31768: PUSH
31769: LD_EXP 4
31773: ST_TO_ADDR
// attack_strat_history = [ ] ;
31774: LD_ADDR_VAR 0 12
31778: PUSH
31779: EMPTY
31780: ST_TO_ADDR
// first_time_attack_gensher = true ;
31781: LD_ADDR_VAR 0 13
31785: PUSH
31786: LD_INT 1
31788: ST_TO_ADDR
// while not scout_event_over do
31789: LD_EXP 93
31793: NOT
31794: IFFALSE 31805
// wait ( 0 0$1 ) ;
31796: LD_INT 35
31798: PPUSH
31799: CALL_OW 67
31803: GO 31789
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , ai_vehicle_attack_delay [ base ] - 2 2$0 ) ;
31805: LD_ADDR_EXP 58
31809: PUSH
31810: LD_EXP 58
31814: PPUSH
31815: LD_VAR 0 10
31819: PPUSH
31820: LD_EXP 58
31824: PUSH
31825: LD_VAR 0 10
31829: ARRAY
31830: PUSH
31831: LD_INT 4200
31833: MINUS
31834: PPUSH
31835: CALL_OW 1
31839: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31840: LD_INT 35
31842: PPUSH
31843: CALL_OW 67
// if UnitFilter ( ai_attacking_soldiers [ base ] , [ f_ok ] ) > 0 or UnitFilter ( ai_attacking_scientists [ base ] , [ f_ok ] ) > 0 or UnitFilter ( ai_vehicles_attack [ base ] , [ f_ok ] ) > 0 then
31847: LD_EXP 64
31851: PUSH
31852: LD_VAR 0 10
31856: ARRAY
31857: PPUSH
31858: LD_INT 50
31860: PUSH
31861: EMPTY
31862: LIST
31863: PPUSH
31864: CALL_OW 72
31868: PUSH
31869: LD_INT 0
31871: GREATER
31872: PUSH
31873: LD_EXP 65
31877: PUSH
31878: LD_VAR 0 10
31882: ARRAY
31883: PPUSH
31884: LD_INT 50
31886: PUSH
31887: EMPTY
31888: LIST
31889: PPUSH
31890: CALL_OW 72
31894: PUSH
31895: LD_INT 0
31897: GREATER
31898: OR
31899: PUSH
31900: LD_EXP 41
31904: PUSH
31905: LD_VAR 0 10
31909: ARRAY
31910: PPUSH
31911: LD_INT 50
31913: PUSH
31914: EMPTY
31915: LIST
31916: PPUSH
31917: CALL_OW 72
31921: PUSH
31922: LD_INT 0
31924: GREATER
31925: OR
31926: IFFALSE 31930
// continue ;
31928: GO 31840
// if IsPlaced ( Cornell ) and not IsDead ( Cornell ) then
31930: LD_EXP 26
31934: PPUSH
31935: CALL_OW 305
31939: PUSH
31940: LD_EXP 26
31944: PPUSH
31945: CALL_OW 301
31949: NOT
31950: AND
31951: IFFALSE 31955
// continue ;
31953: GO 31840
// if IsPlaced ( Khattam ) and not ( IsDead ( Khattam ) or GetSide ( Khattam ) = you ) then
31955: LD_EXP 27
31959: PPUSH
31960: CALL_OW 305
31964: PUSH
31965: LD_EXP 27
31969: PPUSH
31970: CALL_OW 301
31974: PUSH
31975: LD_EXP 27
31979: PPUSH
31980: CALL_OW 255
31984: PUSH
31985: LD_EXP 3
31989: EQUAL
31990: OR
31991: NOT
31992: AND
31993: IFFALSE 31997
// continue ;
31995: GO 31840
// ai_vehicle_attack_delay = Replace ( ai_vehicle_attack_delay , base , ai_vehicle_attack_delay [ base ] - 0 0$1 ) ;
31997: LD_ADDR_EXP 58
32001: PUSH
32002: LD_EXP 58
32006: PPUSH
32007: LD_VAR 0 10
32011: PPUSH
32012: LD_EXP 58
32016: PUSH
32017: LD_VAR 0 10
32021: ARRAY
32022: PUSH
32023: LD_INT 35
32025: MINUS
32026: PPUSH
32027: CALL_OW 1
32031: ST_TO_ADDR
// if ai_vehicle_attack_delay [ base ] > 0 0$0 then
32032: LD_EXP 58
32036: PUSH
32037: LD_VAR 0 10
32041: ARRAY
32042: PUSH
32043: LD_INT 0
32045: GREATER
32046: IFFALSE 32050
// continue ;
32048: GO 31840
// if BaseUnderAttack ( base , - 1 ) then
32050: LD_VAR 0 10
32054: PPUSH
32055: LD_INT 1
32057: NEG
32058: PPUSH
32059: CALL 23323 0 2
32063: IFFALSE 32067
// continue ;
32065: GO 31840
// if ai_vehicles_defend [ base ] < MaxNumWarVehiclesForAttack ( base ) then
32067: LD_EXP 40
32071: PUSH
32072: LD_VAR 0 10
32076: ARRAY
32077: PUSH
32078: LD_VAR 0 10
32082: PPUSH
32083: CALL 33862 0 1
32087: LESS
32088: IFFALSE 32092
// continue ;
32090: GO 31840
// temp_list = [ ] ;
32092: LD_ADDR_VAR 0 2
32096: PUSH
32097: EMPTY
32098: ST_TO_ADDR
// temp_list_2 = ai_vehicles_defend [ base ] ;
32099: LD_ADDR_VAR 0 7
32103: PUSH
32104: LD_EXP 40
32108: PUSH
32109: LD_VAR 0 10
32113: ARRAY
32114: ST_TO_ADDR
// for i = 1 to MaxNumWarVehiclesForAttack ( base ) do
32115: LD_ADDR_VAR 0 1
32119: PUSH
32120: DOUBLE
32121: LD_INT 1
32123: DEC
32124: ST_TO_ADDR
32125: LD_VAR 0 10
32129: PPUSH
32130: CALL 33862 0 1
32134: PUSH
32135: FOR_TO
32136: IFFALSE 32182
// begin temp_list = temp_list ^ temp_list_2 [ i ] ;
32138: LD_ADDR_VAR 0 2
32142: PUSH
32143: LD_VAR 0 2
32147: PUSH
32148: LD_VAR 0 7
32152: PUSH
32153: LD_VAR 0 1
32157: ARRAY
32158: ADD
32159: ST_TO_ADDR
// RemoveVehicleFromVariables ( base , temp_list_2 [ i ] ) ;
32160: LD_VAR 0 10
32164: PPUSH
32165: LD_VAR 0 7
32169: PUSH
32170: LD_VAR 0 1
32174: ARRAY
32175: PPUSH
32176: CALL 11191 0 2
// end ;
32180: GO 32135
32182: POP
32183: POP
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , temp_list ) ;
32184: LD_ADDR_EXP 41
32188: PUSH
32189: LD_EXP 41
32193: PPUSH
32194: LD_VAR 0 10
32198: PPUSH
32199: LD_VAR 0 2
32203: PPUSH
32204: CALL_OW 1
32208: ST_TO_ADDR
// human_list = [ ] ;
32209: LD_ADDR_VAR 0 3
32213: PUSH
32214: EMPTY
32215: ST_TO_ADDR
// num_sci = difficulty + Rand ( 0 , 1 ) ;
32216: LD_ADDR_VAR 0 6
32220: PUSH
32221: LD_OWVAR 67
32225: PUSH
32226: LD_INT 0
32228: PPUSH
32229: LD_INT 1
32231: PPUSH
32232: CALL_OW 12
32236: PLUS
32237: ST_TO_ADDR
// num_sol = difficulty + 1 + Rand ( 0 , 1 ) ;
32238: LD_ADDR_VAR 0 4
32242: PUSH
32243: LD_OWVAR 67
32247: PUSH
32248: LD_INT 1
32250: PLUS
32251: PUSH
32252: LD_INT 0
32254: PPUSH
32255: LD_INT 1
32257: PPUSH
32258: CALL_OW 12
32262: PLUS
32263: ST_TO_ADDR
// num_baz = difficulty + Rand ( 0 , 1 ) ;
32264: LD_ADDR_VAR 0 5
32268: PUSH
32269: LD_OWVAR 67
32273: PUSH
32274: LD_INT 0
32276: PPUSH
32277: LD_INT 1
32279: PPUSH
32280: CALL_OW 12
32284: PLUS
32285: ST_TO_ADDR
// case num_russian_attacks of 0 :
32286: LD_EXP 87
32290: PUSH
32291: LD_INT 0
32293: DOUBLE
32294: EQUAL
32295: IFTRUE 32299
32297: GO 32352
32299: POP
// begin if num_sci > 1 then
32300: LD_VAR 0 6
32304: PUSH
32305: LD_INT 1
32307: GREATER
32308: IFFALSE 32318
// num_sci = 1 ;
32310: LD_ADDR_VAR 0 6
32314: PUSH
32315: LD_INT 1
32317: ST_TO_ADDR
// if num_sol > 2 then
32318: LD_VAR 0 4
32322: PUSH
32323: LD_INT 2
32325: GREATER
32326: IFFALSE 32336
// num_sol = 2 ;
32328: LD_ADDR_VAR 0 4
32332: PUSH
32333: LD_INT 2
32335: ST_TO_ADDR
// num_baz = num_baz - 1 ;
32336: LD_ADDR_VAR 0 5
32340: PUSH
32341: LD_VAR 0 5
32345: PUSH
32346: LD_INT 1
32348: MINUS
32349: ST_TO_ADDR
// end ; 1 :
32350: GO 32439
32352: LD_INT 1
32354: DOUBLE
32355: EQUAL
32356: IFTRUE 32360
32358: GO 32405
32360: POP
// begin if num_sol > 3 then
32361: LD_VAR 0 4
32365: PUSH
32366: LD_INT 3
32368: GREATER
32369: IFFALSE 32379
// num_sol = 3 ;
32371: LD_ADDR_VAR 0 4
32375: PUSH
32376: LD_INT 3
32378: ST_TO_ADDR
// if num_baz > 1 then
32379: LD_VAR 0 5
32383: PUSH
32384: LD_INT 1
32386: GREATER
32387: IFFALSE 32403
// num_baz = num_baz - 1 ;
32389: LD_ADDR_VAR 0 5
32393: PUSH
32394: LD_VAR 0 5
32398: PUSH
32399: LD_INT 1
32401: MINUS
32402: ST_TO_ADDR
// end ; 2 :
32403: GO 32439
32405: LD_INT 2
32407: DOUBLE
32408: EQUAL
32409: IFTRUE 32413
32411: GO 32416
32413: POP
// begin end ; else
32414: GO 32439
32416: POP
// begin num_baz = num_baz + Rand ( 0 , 1 ) ;
32417: LD_ADDR_VAR 0 5
32421: PUSH
32422: LD_VAR 0 5
32426: PUSH
32427: LD_INT 0
32429: PPUSH
32430: LD_INT 1
32432: PPUSH
32433: CALL_OW 12
32437: PLUS
32438: ST_TO_ADDR
// end ; end ; if yashin_alive then
32439: LD_EXP 86
32443: IFFALSE 32477
// begin num_baz = num_baz + num_sol ;
32445: LD_ADDR_VAR 0 5
32449: PUSH
32450: LD_VAR 0 5
32454: PUSH
32455: LD_VAR 0 4
32459: PLUS
32460: ST_TO_ADDR
// num_sol = Rand ( 1 , 2 ) ;
32461: LD_ADDR_VAR 0 4
32465: PUSH
32466: LD_INT 1
32468: PPUSH
32469: LD_INT 2
32471: PPUSH
32472: CALL_OW 12
32476: ST_TO_ADDR
// end ; temp_list = CreateUnitsWithClass ( num_sci , class_scientistic , side ) ;
32477: LD_ADDR_VAR 0 2
32481: PUSH
32482: LD_VAR 0 6
32486: PPUSH
32487: LD_INT 4
32489: PPUSH
32490: LD_VAR 0 11
32494: PPUSH
32495: CALL 9662 0 3
32499: ST_TO_ADDR
// human_list = human_list ^ temp_list ;
32500: LD_ADDR_VAR 0 3
32504: PUSH
32505: LD_VAR 0 3
32509: PUSH
32510: LD_VAR 0 2
32514: ADD
32515: ST_TO_ADDR
// ai_attacking_scientists = Replace ( ai_attacking_scientists , base , temp_list ) ;
32516: LD_ADDR_EXP 65
32520: PUSH
32521: LD_EXP 65
32525: PPUSH
32526: LD_VAR 0 10
32530: PPUSH
32531: LD_VAR 0 2
32535: PPUSH
32536: CALL_OW 1
32540: ST_TO_ADDR
// temp_list = CreateUnitsWithClass ( num_sol , class_soldier , side ) ^ CreateUnitsWithClass ( num_baz , class_bazooker , side ) ;
32541: LD_ADDR_VAR 0 2
32545: PUSH
32546: LD_VAR 0 4
32550: PPUSH
32551: LD_INT 1
32553: PPUSH
32554: LD_VAR 0 11
32558: PPUSH
32559: CALL 9662 0 3
32563: PUSH
32564: LD_VAR 0 5
32568: PPUSH
32569: LD_INT 9
32571: PPUSH
32572: LD_VAR 0 11
32576: PPUSH
32577: CALL 9662 0 3
32581: ADD
32582: ST_TO_ADDR
// human_list = human_list ^ temp_list ;
32583: LD_ADDR_VAR 0 3
32587: PUSH
32588: LD_VAR 0 3
32592: PUSH
32593: LD_VAR 0 2
32597: ADD
32598: ST_TO_ADDR
// ai_attacking_soldiers = Replace ( ai_attacking_soldiers , base , temp_list ) ;
32599: LD_ADDR_EXP 64
32603: PUSH
32604: LD_EXP 64
32608: PPUSH
32609: LD_VAR 0 10
32613: PPUSH
32614: LD_VAR 0 2
32618: PPUSH
32619: CALL_OW 1
32623: ST_TO_ADDR
// for i in human_list do
32624: LD_ADDR_VAR 0 1
32628: PUSH
32629: LD_VAR 0 3
32633: PUSH
32634: FOR_IN
32635: IFFALSE 32654
// PlaceUnitArea ( i , russian_reinforcements_area , false ) ;
32637: LD_VAR 0 1
32641: PPUSH
32642: LD_INT 14
32644: PPUSH
32645: LD_INT 0
32647: PPUSH
32648: CALL_OW 49
32652: GO 32634
32654: POP
32655: POP
// if MayAttackGensherBase and Rand ( 1 , 2 ) = 1 then
32656: CALL 33811 0 0
32660: PUSH
32661: LD_INT 1
32663: PPUSH
32664: LD_INT 2
32666: PPUSH
32667: CALL_OW 12
32671: PUSH
32672: LD_INT 1
32674: EQUAL
32675: AND
32676: IFFALSE 32688
// russian_attack_strategy = 1 else
32678: LD_ADDR_EXP 84
32682: PUSH
32683: LD_INT 1
32685: ST_TO_ADDR
32686: GO 32712
// if PlayerAtEasternBorder then
32688: CALL 31614 0 0
32692: IFFALSE 32704
// russian_attack_strategy = 2 else
32694: LD_ADDR_EXP 84
32698: PUSH
32699: LD_INT 2
32701: ST_TO_ADDR
32702: GO 32712
// russian_attack_strategy = 3 ;
32704: LD_ADDR_EXP 84
32708: PUSH
32709: LD_INT 3
32711: ST_TO_ADDR
// if russian_attack_strategy <> 1 and not 1 in attack_strat_history then
32712: LD_EXP 84
32716: PUSH
32717: LD_INT 1
32719: NONEQUAL
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: LD_VAR 0 12
32728: IN
32729: NOT
32730: AND
32731: IFFALSE 32774
// if attack_strat_history >= [ 5 , 4 , 3 ] [ difficulty ] and MayAttackGensherBase then
32733: LD_VAR 0 12
32737: PUSH
32738: LD_INT 5
32740: PUSH
32741: LD_INT 4
32743: PUSH
32744: LD_INT 3
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: PUSH
32752: LD_OWVAR 67
32756: ARRAY
32757: GREATEREQUAL
32758: PUSH
32759: CALL 33811 0 0
32763: AND
32764: IFFALSE 32774
// russian_attack_strategy = 1 ;
32766: LD_ADDR_EXP 84
32770: PUSH
32771: LD_INT 1
32773: ST_TO_ADDR
// attack_strat_history = attack_strat_history ^ russian_attack_strategy ;
32774: LD_ADDR_VAR 0 12
32778: PUSH
32779: LD_VAR 0 12
32783: PUSH
32784: LD_EXP 84
32788: ADD
32789: ST_TO_ADDR
// if russian_attack_strategy = 1 then
32790: LD_EXP 84
32794: PUSH
32795: LD_INT 1
32797: EQUAL
32798: IFFALSE 33647
// begin if first_time_attack_gensher or difficulty = 1 then
32800: LD_VAR 0 13
32804: PUSH
32805: LD_OWVAR 67
32809: PUSH
32810: LD_INT 1
32812: EQUAL
32813: OR
32814: IFFALSE 33208
// begin first_time_attack_gensher = false ;
32816: LD_ADDR_VAR 0 13
32820: PUSH
32821: LD_INT 0
32823: ST_TO_ADDR
// temp_list = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_class , class_bazooker ] ) ;
32824: LD_ADDR_VAR 0 2
32828: PUSH
32829: LD_EXP 64
32833: PUSH
32834: LD_VAR 0 10
32838: ARRAY
32839: PPUSH
32840: LD_INT 25
32842: PUSH
32843: LD_INT 9
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PPUSH
32850: CALL_OW 72
32854: ST_TO_ADDR
// for i in temp_list do
32855: LD_ADDR_VAR 0 1
32859: PUSH
32860: LD_VAR 0 2
32864: PUSH
32865: FOR_IN
32866: IFFALSE 32896
// begin RemoveHumanFromVariables ( base , i , false ) ;
32868: LD_VAR 0 10
32872: PPUSH
32873: LD_VAR 0 1
32877: PPUSH
32878: LD_INT 0
32880: PPUSH
32881: CALL 11583 0 3
// DestroyUnit ( i ) ;
32885: LD_VAR 0 1
32889: PPUSH
32890: CALL_OW 65
// end ;
32894: GO 32865
32896: POP
32897: POP
// temp_list = UnitFilter ( ai_vehicles_attack [ base ] , [ f_weapon , ru_rocket_launcher ] ) ;
32898: LD_ADDR_VAR 0 2
32902: PUSH
32903: LD_EXP 41
32907: PUSH
32908: LD_VAR 0 10
32912: ARRAY
32913: PPUSH
32914: LD_INT 34
32916: PUSH
32917: LD_INT 45
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PPUSH
32924: CALL_OW 72
32928: ST_TO_ADDR
// temp_list_2 = [ ] ;
32929: LD_ADDR_VAR 0 7
32933: PUSH
32934: EMPTY
32935: ST_TO_ADDR
// InitUc ;
32936: CALL_OW 18
// InitVc ;
32940: CALL_OW 20
// uc_side = side ;
32944: LD_ADDR_OWVAR 20
32948: PUSH
32949: LD_VAR 0 11
32953: ST_TO_ADDR
// uc_nation = nation_russian ;
32954: LD_ADDR_OWVAR 21
32958: PUSH
32959: LD_INT 3
32961: ST_TO_ADDR
// for i in temp_list do
32962: LD_ADDR_VAR 0 1
32966: PUSH
32967: LD_VAR 0 2
32971: PUSH
32972: FOR_IN
32973: IFFALSE 33167
// begin RemoveVehicleFromVariables ( base , i ) ;
32975: LD_VAR 0 10
32979: PPUSH
32980: LD_VAR 0 1
32984: PPUSH
32985: CALL 11191 0 2
// vc_chassis = GetChassis ( i ) ;
32989: LD_ADDR_OWVAR 37
32993: PUSH
32994: LD_VAR 0 1
32998: PPUSH
32999: CALL_OW 265
33003: ST_TO_ADDR
// vc_control = GetControl ( i ) ;
33004: LD_ADDR_OWVAR 38
33008: PUSH
33009: LD_VAR 0 1
33013: PPUSH
33014: CALL_OW 263
33018: ST_TO_ADDR
// vc_engine = GetEngine ( i ) ;
33019: LD_ADDR_OWVAR 39
33023: PUSH
33024: LD_VAR 0 1
33028: PPUSH
33029: CALL_OW 262
33033: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
33034: LD_ADDR_OWVAR 40
33038: PUSH
33039: LD_INT 42
33041: ST_TO_ADDR
// temp_list_3 = [ GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ;
33042: LD_ADDR_VAR 0 8
33046: PUSH
33047: LD_VAR 0 1
33051: PPUSH
33052: CALL_OW 250
33056: PUSH
33057: LD_VAR 0 1
33061: PPUSH
33062: CALL_OW 251
33066: PUSH
33067: LD_VAR 0 1
33071: PPUSH
33072: CALL_OW 254
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: ST_TO_ADDR
// DestroyUnit ( i ) ;
33082: LD_VAR 0 1
33086: PPUSH
33087: CALL_OW 65
// i = CreateVehicle ;
33091: LD_ADDR_VAR 0 1
33095: PUSH
33096: CALL_OW 45
33100: ST_TO_ADDR
// SetDir ( i , temp_list_3 [ 3 ] ) ;
33101: LD_VAR 0 1
33105: PPUSH
33106: LD_VAR 0 8
33110: PUSH
33111: LD_INT 3
33113: ARRAY
33114: PPUSH
33115: CALL_OW 233
// PlaceUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] , false ) ;
33119: LD_VAR 0 1
33123: PPUSH
33124: LD_VAR 0 8
33128: PUSH
33129: LD_INT 1
33131: ARRAY
33132: PPUSH
33133: LD_VAR 0 8
33137: PUSH
33138: LD_INT 2
33140: ARRAY
33141: PPUSH
33142: LD_INT 0
33144: PPUSH
33145: CALL_OW 48
// temp_list_2 = temp_list_2 ^ i ;
33149: LD_ADDR_VAR 0 7
33153: PUSH
33154: LD_VAR 0 7
33158: PUSH
33159: LD_VAR 0 1
33163: ADD
33164: ST_TO_ADDR
// end ;
33165: GO 32972
33167: POP
33168: POP
// ai_vehicles_attack = Replace ( ai_vehicles_attack , base , ai_vehicles_attack [ base ] ^ temp_list_2 ) ;
33169: LD_ADDR_EXP 41
33173: PUSH
33174: LD_EXP 41
33178: PPUSH
33179: LD_VAR 0 10
33183: PPUSH
33184: LD_EXP 41
33188: PUSH
33189: LD_VAR 0 10
33193: ARRAY
33194: PUSH
33195: LD_VAR 0 7
33199: ADD
33200: PPUSH
33201: CALL_OW 1
33205: ST_TO_ADDR
// end else
33206: GO 33437
// begin temp_list = [ ] ;
33208: LD_ADDR_VAR 0 2
33212: PUSH
33213: EMPTY
33214: ST_TO_ADDR
// temp_list_2 = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_class , class_bazooker ] ) ;
33215: LD_ADDR_VAR 0 7
33219: PUSH
33220: LD_EXP 64
33224: PUSH
33225: LD_VAR 0 10
33229: ARRAY
33230: PPUSH
33231: LD_INT 25
33233: PUSH
33234: LD_INT 9
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PPUSH
33241: CALL_OW 72
33245: ST_TO_ADDR
// temp_list_3 = ai_attacking_soldiers [ base ] diff temp_list_2 ;
33246: LD_ADDR_VAR 0 8
33250: PUSH
33251: LD_EXP 64
33255: PUSH
33256: LD_VAR 0 10
33260: ARRAY
33261: PUSH
33262: LD_VAR 0 7
33266: DIFF
33267: ST_TO_ADDR
// if temp_list_2 > 0 then
33268: LD_VAR 0 7
33272: PUSH
33273: LD_INT 0
33275: GREATER
33276: IFFALSE 33308
// temp_list = temp_list ^ temp_list_2 [ Rand ( 1 , temp_list_2 ) ] ;
33278: LD_ADDR_VAR 0 2
33282: PUSH
33283: LD_VAR 0 2
33287: PUSH
33288: LD_VAR 0 7
33292: PUSH
33293: LD_INT 1
33295: PPUSH
33296: LD_VAR 0 7
33300: PPUSH
33301: CALL_OW 12
33305: ARRAY
33306: ADD
33307: ST_TO_ADDR
// if temp_list_3 > 0 then
33308: LD_VAR 0 8
33312: PUSH
33313: LD_INT 0
33315: GREATER
33316: IFFALSE 33348
// temp_list = temp_list ^ temp_list_3 [ Rand ( 1 , temp_list_3 ) ] ;
33318: LD_ADDR_VAR 0 2
33322: PUSH
33323: LD_VAR 0 2
33327: PUSH
33328: LD_VAR 0 8
33332: PUSH
33333: LD_INT 1
33335: PPUSH
33336: LD_VAR 0 8
33340: PPUSH
33341: CALL_OW 12
33345: ARRAY
33346: ADD
33347: ST_TO_ADDR
// temp_list_2 = ai_attacking_scientists [ base ] ;
33348: LD_ADDR_VAR 0 7
33352: PUSH
33353: LD_EXP 65
33357: PUSH
33358: LD_VAR 0 10
33362: ARRAY
33363: ST_TO_ADDR
// temp_list = temp_list ^ temp_list_2 [ Rand ( 1 , temp_list_2 ) ] ;
33364: LD_ADDR_VAR 0 2
33368: PUSH
33369: LD_VAR 0 2
33373: PUSH
33374: LD_VAR 0 7
33378: PUSH
33379: LD_INT 1
33381: PPUSH
33382: LD_VAR 0 7
33386: PPUSH
33387: CALL_OW 12
33391: ARRAY
33392: ADD
33393: ST_TO_ADDR
// for i in temp_list do
33394: LD_ADDR_VAR 0 1
33398: PUSH
33399: LD_VAR 0 2
33403: PUSH
33404: FOR_IN
33405: IFFALSE 33435
// begin RemoveHumanFromVariables ( base , i , false ) ;
33407: LD_VAR 0 10
33411: PPUSH
33412: LD_VAR 0 1
33416: PPUSH
33417: LD_INT 0
33419: PPUSH
33420: CALL 11583 0 3
// DestroyUnit ( i ) ;
33424: LD_VAR 0 1
33428: PPUSH
33429: CALL_OW 65
// end ;
33433: GO 33404
33435: POP
33436: POP
// end ; temp_list_2 = ai_vehicles_attack [ base ] ;
33437: LD_ADDR_VAR 0 7
33441: PUSH
33442: LD_EXP 41
33446: PUSH
33447: LD_VAR 0 10
33451: ARRAY
33452: ST_TO_ADDR
// temp_list = [ ] ;
33453: LD_ADDR_VAR 0 2
33457: PUSH
33458: EMPTY
33459: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 1 ] [ difficulty ] do
33460: LD_ADDR_VAR 0 1
33464: PUSH
33465: DOUBLE
33466: LD_INT 1
33468: DEC
33469: ST_TO_ADDR
33470: LD_INT 2
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: LIST
33483: PUSH
33484: LD_OWVAR 67
33488: ARRAY
33489: PUSH
33490: FOR_TO
33491: IFFALSE 33567
// begin if temp_list_2 = 0 then
33493: LD_VAR 0 7
33497: PUSH
33498: LD_INT 0
33500: EQUAL
33501: IFFALSE 33505
// break ;
33503: GO 33567
// k = temp_list_2 [ Rand ( 1 , temp_list_2 + 0 ) ] ;
33505: LD_ADDR_VAR 0 9
33509: PUSH
33510: LD_VAR 0 7
33514: PUSH
33515: LD_INT 1
33517: PPUSH
33518: LD_VAR 0 7
33522: PUSH
33523: LD_INT 0
33525: PLUS
33526: PPUSH
33527: CALL_OW 12
33531: ARRAY
33532: ST_TO_ADDR
// temp_list = temp_list ^ k ;
33533: LD_ADDR_VAR 0 2
33537: PUSH
33538: LD_VAR 0 2
33542: PUSH
33543: LD_VAR 0 9
33547: ADD
33548: ST_TO_ADDR
// temp_list_2 = temp_list_2 diff k ;
33549: LD_ADDR_VAR 0 7
33553: PUSH
33554: LD_VAR 0 7
33558: PUSH
33559: LD_VAR 0 9
33563: DIFF
33564: ST_TO_ADDR
// end ;
33565: GO 33490
33567: POP
33568: POP
// for i in temp_list do
33569: LD_ADDR_VAR 0 1
33573: PUSH
33574: LD_VAR 0 2
33578: PUSH
33579: FOR_IN
33580: IFFALSE 33645
// begin RemoveVehicleFromVariables ( base , i ) ;
33582: LD_VAR 0 10
33586: PPUSH
33587: LD_VAR 0 1
33591: PPUSH
33592: CALL 11191 0 2
// temp_list_2 = ai_vehicles_defend [ base ] ^ i ;
33596: LD_ADDR_VAR 0 7
33600: PUSH
33601: LD_EXP 40
33605: PUSH
33606: LD_VAR 0 10
33610: ARRAY
33611: PUSH
33612: LD_VAR 0 1
33616: ADD
33617: ST_TO_ADDR
// ai_vehicles_defend = Replace ( ai_vehicles_defend , base , temp_list_2 ) ;
33618: LD_ADDR_EXP 40
33622: PUSH
33623: LD_EXP 40
33627: PPUSH
33628: LD_VAR 0 10
33632: PPUSH
33633: LD_VAR 0 7
33637: PPUSH
33638: CALL_OW 1
33642: ST_TO_ADDR
// end ;
33643: GO 33579
33645: POP
33646: POP
// end ; temp_list = ai_attacking_unit_hex_index [ base ] ;
33647: LD_ADDR_VAR 0 2
33651: PUSH
33652: LD_EXP 75
33656: PUSH
33657: LD_VAR 0 10
33661: ARRAY
33662: ST_TO_ADDR
// for i in ai_vehicles_attack [ base ] ^ ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
33663: LD_ADDR_VAR 0 1
33667: PUSH
33668: LD_EXP 41
33672: PUSH
33673: LD_VAR 0 10
33677: ARRAY
33678: PUSH
33679: LD_EXP 64
33683: PUSH
33684: LD_VAR 0 10
33688: ARRAY
33689: ADD
33690: PUSH
33691: LD_EXP 65
33695: PUSH
33696: LD_VAR 0 10
33700: ARRAY
33701: ADD
33702: PUSH
33703: FOR_IN
33704: IFFALSE 33731
// temp_list = Replace ( temp_list , i , 1 ) ;
33706: LD_ADDR_VAR 0 2
33710: PUSH
33711: LD_VAR 0 2
33715: PPUSH
33716: LD_VAR 0 1
33720: PPUSH
33721: LD_INT 1
33723: PPUSH
33724: CALL_OW 1
33728: ST_TO_ADDR
33729: GO 33703
33731: POP
33732: POP
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
33733: LD_ADDR_EXP 75
33737: PUSH
33738: LD_EXP 75
33742: PPUSH
33743: LD_VAR 0 10
33747: PPUSH
33748: LD_VAR 0 2
33752: PPUSH
33753: CALL_OW 1
33757: ST_TO_ADDR
// num_russian_attacks = num_russian_attacks + 1 ;
33758: LD_ADDR_EXP 87
33762: PUSH
33763: LD_EXP 87
33767: PUSH
33768: LD_INT 1
33770: PLUS
33771: ST_TO_ADDR
// ai_new_attack_commencing = Replace ( ai_new_attack_commencing , base , true ) ;
33772: LD_ADDR_EXP 70
33776: PUSH
33777: LD_EXP 70
33781: PPUSH
33782: LD_VAR 0 10
33786: PPUSH
33787: LD_INT 1
33789: PPUSH
33790: CALL_OW 1
33794: ST_TO_ADDR
// ResetVehicleAttackDelay ( base ) ;
33795: LD_VAR 0 10
33799: PPUSH
33800: CALL 10026 0 1
// until false ;
33804: LD_INT 0
33806: IFFALSE 31840
// end ;
33808: PPOPN 13
33810: END
// function MayAttackGensherBase ; begin
33811: LD_INT 0
33813: PPUSH
// if not scout_event_over or game_phase > 1 then
33814: LD_EXP 93
33818: NOT
33819: PUSH
33820: LD_EXP 89
33824: PUSH
33825: LD_INT 1
33827: GREATER
33828: OR
33829: IFFALSE 33841
// result = false else
33831: LD_ADDR_VAR 0 1
33835: PUSH
33836: LD_INT 0
33838: ST_TO_ADDR
33839: GO 33857
// result := tick >= russians_allowed_to_attack_gensher_time ;
33841: LD_ADDR_VAR 0 1
33845: PUSH
33846: LD_OWVAR 1
33850: PUSH
33851: LD_EXP 94
33855: GREATEREQUAL
33856: ST_TO_ADDR
// end ;
33857: LD_VAR 0 1
33861: RET
// function MaxNumWarVehiclesForAttack ( base ) ; begin
33862: LD_INT 0
33864: PPUSH
// case base of 1 , 2 :
33865: LD_VAR 0 1
33869: PUSH
33870: LD_INT 1
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33884
33876: LD_INT 2
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33884
33882: GO 33902
33884: POP
// result = MaxNumWarVehicles ( base ) ; 3 :
33885: LD_ADDR_VAR 0 2
33889: PUSH
33890: LD_VAR 0 1
33894: PPUSH
33895: CALL 30083 0 1
33899: ST_TO_ADDR
33900: GO 34052
33902: LD_INT 3
33904: DOUBLE
33905: EQUAL
33906: IFTRUE 33910
33908: GO 34051
33910: POP
// begin result = [ 0 , 1 , 2 ] [ difficulty ] ;
33911: LD_ADDR_VAR 0 2
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: LD_INT 2
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: LIST
33929: PUSH
33930: LD_OWVAR 67
33934: ARRAY
33935: ST_TO_ADDR
// case num_russian_attacks of 0 :
33936: LD_EXP 87
33940: PUSH
33941: LD_INT 0
33943: DOUBLE
33944: EQUAL
33945: IFTRUE 33949
33947: GO 33952
33949: POP
// begin end ; 1 :
33950: GO 34017
33952: LD_INT 1
33954: DOUBLE
33955: EQUAL
33956: IFTRUE 33960
33958: GO 33977
33960: POP
// result = result + 1 ; 2 :
33961: LD_ADDR_VAR 0 2
33965: PUSH
33966: LD_VAR 0 2
33970: PUSH
33971: LD_INT 1
33973: PLUS
33974: ST_TO_ADDR
33975: GO 34017
33977: LD_INT 2
33979: DOUBLE
33980: EQUAL
33981: IFTRUE 33985
33983: GO 34002
33985: POP
// result = result + 2 ; else
33986: LD_ADDR_VAR 0 2
33990: PUSH
33991: LD_VAR 0 2
33995: PUSH
33996: LD_INT 2
33998: PLUS
33999: ST_TO_ADDR
34000: GO 34017
34002: POP
// result = result + 3 ; end ;
34003: LD_ADDR_VAR 0 2
34007: PUSH
34008: LD_VAR 0 2
34012: PUSH
34013: LD_INT 3
34015: PLUS
34016: ST_TO_ADDR
// if result > MaxNumWarVehicles ( base ) then
34017: LD_VAR 0 2
34021: PUSH
34022: LD_VAR 0 1
34026: PPUSH
34027: CALL 30083 0 1
34031: GREATER
34032: IFFALSE 34049
// result = MaxNumWarVehicles ( base ) ;
34034: LD_ADDR_VAR 0 2
34038: PUSH
34039: LD_VAR 0 1
34043: PPUSH
34044: CALL 30083 0 1
34048: ST_TO_ADDR
// end ; end ;
34049: GO 34052
34051: POP
// end ;
34052: LD_VAR 0 2
34056: RET
// every 0 0$1 + 0 0$0.2 do var i , temp_list ; var base , side ;
34057: GO 34059
34059: DISABLE
34060: LD_INT 0
34062: PPUSH
34063: PPUSH
34064: PPUSH
34065: PPUSH
// begin base = 3 ;
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: LD_INT 3
34073: ST_TO_ADDR
// side = russians ;
34074: LD_ADDR_VAR 0 4
34078: PUSH
34079: LD_EXP 4
34083: ST_TO_ADDR
// while not scout_event_over do
34084: LD_EXP 93
34088: NOT
34089: IFFALSE 34100
// wait ( 0 0$1 ) ;
34091: LD_INT 35
34093: PPUSH
34094: CALL_OW 67
34098: GO 34084
// repeat wait ( 0 0$1 ) ;
34100: LD_INT 35
34102: PPUSH
34103: CALL_OW 67
// if game_phase > 1 then
34107: LD_EXP 89
34111: PUSH
34112: LD_INT 1
34114: GREATER
34115: IFFALSE 34119
// exit ;
34117: GO 34346
// if special_russian_attackers > 0 or not MayAttackGensherBase then
34119: LD_EXP 85
34123: PUSH
34124: LD_INT 0
34126: GREATER
34127: PUSH
34128: CALL 33811 0 0
34132: NOT
34133: OR
34134: IFFALSE 34138
// continue ;
34136: GO 34100
// ai_human_attack_delay = Replace ( ai_human_attack_delay , base , ai_human_attack_delay [ base ] - 0 0$1 ) ;
34138: LD_ADDR_EXP 68
34142: PUSH
34143: LD_EXP 68
34147: PPUSH
34148: LD_VAR 0 3
34152: PPUSH
34153: LD_EXP 68
34157: PUSH
34158: LD_VAR 0 3
34162: ARRAY
34163: PUSH
34164: LD_INT 35
34166: MINUS
34167: PPUSH
34168: CALL_OW 1
34172: ST_TO_ADDR
// if ai_human_attack_delay [ base ] > 0 0$0 then
34173: LD_EXP 68
34177: PUSH
34178: LD_VAR 0 3
34182: ARRAY
34183: PUSH
34184: LD_INT 0
34186: GREATER
34187: IFFALSE 34191
// continue ;
34189: GO 34100
// if BaseUnderAttack ( base , - 1 ) then
34191: LD_VAR 0 3
34195: PPUSH
34196: LD_INT 1
34198: NEG
34199: PPUSH
34200: CALL 23323 0 2
34204: IFFALSE 34208
// continue ;
34206: GO 34100
// special_russian_attackers = CreateUnitsWithClass ( difficulty + yashin_alive , class_bazooker , side ) ;
34208: LD_ADDR_EXP 85
34212: PUSH
34213: LD_OWVAR 67
34217: PUSH
34218: LD_EXP 86
34222: PLUS
34223: PPUSH
34224: LD_INT 9
34226: PPUSH
34227: LD_VAR 0 4
34231: PPUSH
34232: CALL 9662 0 3
34236: ST_TO_ADDR
// temp_list = ai_attacking_unit_hex_index [ base ] ;
34237: LD_ADDR_VAR 0 2
34241: PUSH
34242: LD_EXP 75
34246: PUSH
34247: LD_VAR 0 3
34251: ARRAY
34252: ST_TO_ADDR
// for i in special_russian_attackers do
34253: LD_ADDR_VAR 0 1
34257: PUSH
34258: LD_EXP 85
34262: PUSH
34263: FOR_IN
34264: IFFALSE 34306
// begin PlaceUnitArea ( i , russian_reinforcements_area , false ) ;
34266: LD_VAR 0 1
34270: PPUSH
34271: LD_INT 14
34273: PPUSH
34274: LD_INT 0
34276: PPUSH
34277: CALL_OW 49
// temp_list = Replace ( temp_list , i , 1 ) ;
34281: LD_ADDR_VAR 0 2
34285: PUSH
34286: LD_VAR 0 2
34290: PPUSH
34291: LD_VAR 0 1
34295: PPUSH
34296: LD_INT 1
34298: PPUSH
34299: CALL_OW 1
34303: ST_TO_ADDR
// end ;
34304: GO 34263
34306: POP
34307: POP
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
34308: LD_ADDR_EXP 75
34312: PUSH
34313: LD_EXP 75
34317: PPUSH
34318: LD_VAR 0 3
34322: PPUSH
34323: LD_VAR 0 2
34327: PPUSH
34328: CALL_OW 1
34332: ST_TO_ADDR
// ResetHumanAttackDelay ( base ) ;
34333: LD_VAR 0 3
34337: PPUSH
34338: CALL 10075 0 1
// until false ;
34342: LD_INT 0
34344: IFFALSE 34100
// end ;
34346: PPOPN 4
34348: END
// every 0 0$1 do var side , i , temp_value , base , temp_list , temp_unit , temp_list_2 , k , human_attack_hexes , vehicle_attack_hexes , temp_list_3 ; var center_hex , center_dist , attacking_humans , area , x , y , all_done , un1 , val , attacking_vehicles ; var human_prepare_hexes , vehicle_prepare_hexes ; var human_dist , vehicle_dist , all_are_ready , strat_2_attack_permitted , vehs_to_move_to_start_pos , prepare_veh_movement ; var wait_indexes , wait_indexes_pos ;
34349: GO 34351
34351: DISABLE
34352: LD_INT 0
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
34362: PPUSH
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
34370: PPUSH
34371: PPUSH
34372: PPUSH
34373: PPUSH
34374: PPUSH
34375: PPUSH
34376: PPUSH
34377: PPUSH
34378: PPUSH
34379: PPUSH
34380: PPUSH
34381: PPUSH
34382: PPUSH
34383: PPUSH
34384: PPUSH
// begin side = russians ;
34385: LD_ADDR_VAR 0 1
34389: PUSH
34390: LD_EXP 4
34394: ST_TO_ADDR
// human_dist = 3 ;
34395: LD_ADDR_VAR 0 24
34399: PUSH
34400: LD_INT 3
34402: ST_TO_ADDR
// vehicle_dist = 6 ;
34403: LD_ADDR_VAR 0 25
34407: PUSH
34408: LD_INT 6
34410: ST_TO_ADDR
// vehs_to_move_to_start_pos = [ ] ;
34411: LD_ADDR_VAR 0 28
34415: PUSH
34416: EMPTY
34417: ST_TO_ADDR
// all_are_ready = false ;
34418: LD_ADDR_VAR 0 26
34422: PUSH
34423: LD_INT 0
34425: ST_TO_ADDR
// strat_2_attack_permitted = false ;
34426: LD_ADDR_VAR 0 27
34430: PUSH
34431: LD_INT 0
34433: ST_TO_ADDR
// prepare_veh_movement = true ;
34434: LD_ADDR_VAR 0 29
34438: PUSH
34439: LD_INT 1
34441: ST_TO_ADDR
// wait_indexes_pos = 1 ;
34442: LD_ADDR_VAR 0 31
34446: PUSH
34447: LD_INT 1
34449: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34450: LD_INT 35
34452: PPUSH
34453: CALL_OW 67
// for base in ai_bases do
34457: LD_ADDR_VAR 0 4
34461: PUSH
34462: LD_EXP 59
34466: PUSH
34467: FOR_IN
34468: IFFALSE 40263
// begin if base in [ 1 , 2 ] then
34470: LD_VAR 0 4
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: IN
34485: IFFALSE 34489
// continue ;
34487: GO 34467
// if ai_vehicles_attack [ base ] = 0 and ai_attacking_soldiers [ base ] = 0 and ai_attacking_scientists [ base ] = 0 then
34489: LD_EXP 41
34493: PUSH
34494: LD_VAR 0 4
34498: ARRAY
34499: PUSH
34500: LD_INT 0
34502: EQUAL
34503: PUSH
34504: LD_EXP 64
34508: PUSH
34509: LD_VAR 0 4
34513: ARRAY
34514: PUSH
34515: LD_INT 0
34517: EQUAL
34518: AND
34519: PUSH
34520: LD_EXP 65
34524: PUSH
34525: LD_VAR 0 4
34529: ARRAY
34530: PUSH
34531: LD_INT 0
34533: EQUAL
34534: AND
34535: IFFALSE 34539
// continue ;
34537: GO 34467
// if ai_new_attack_commencing [ base ] then
34539: LD_EXP 70
34543: PUSH
34544: LD_VAR 0 4
34548: ARRAY
34549: IFFALSE 34606
// begin all_are_ready = false ;
34551: LD_ADDR_VAR 0 26
34555: PUSH
34556: LD_INT 0
34558: ST_TO_ADDR
// strat_2_attack_permitted = false ;
34559: LD_ADDR_VAR 0 27
34563: PUSH
34564: LD_INT 0
34566: ST_TO_ADDR
// prepare_veh_movement = true ;
34567: LD_ADDR_VAR 0 29
34571: PUSH
34572: LD_INT 1
34574: ST_TO_ADDR
// wait_indexes_pos = 1 ;
34575: LD_ADDR_VAR 0 31
34579: PUSH
34580: LD_INT 1
34582: ST_TO_ADDR
// ai_new_attack_commencing = Replace ( ai_new_attack_commencing , base , false ) ;
34583: LD_ADDR_EXP 70
34587: PUSH
34588: LD_EXP 70
34592: PPUSH
34593: LD_VAR 0 4
34597: PPUSH
34598: LD_INT 0
34600: PPUSH
34601: CALL_OW 1
34605: ST_TO_ADDR
// end ; case russian_attack_strategy of 1 :
34606: LD_EXP 84
34610: PUSH
34611: LD_INT 1
34613: DOUBLE
34614: EQUAL
34615: IFTRUE 34619
34617: GO 34833
34619: POP
// begin vehicle_prepare_hexes = [ [ 64 , 51 ] ] ;
34620: LD_ADDR_VAR 0 23
34624: PUSH
34625: LD_INT 64
34627: PUSH
34628: LD_INT 51
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: EMPTY
34636: LIST
34637: ST_TO_ADDR
// human_prepare_hexes = [ [ 72 , 55 ] ] ;
34638: LD_ADDR_VAR 0 22
34642: PUSH
34643: LD_INT 72
34645: PUSH
34646: LD_INT 55
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: EMPTY
34654: LIST
34655: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 75 , 46 ] , [ 75 , 30 ] , [ 70 , 20 ] , [ 84 , 20 ] , [ 99 , 29 ] , [ 108 , 42 ] , [ 112 , 33 ] ] ;
34656: LD_ADDR_VAR 0 10
34660: PUSH
34661: LD_INT 75
34663: PUSH
34664: LD_INT 46
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 75
34673: PUSH
34674: LD_INT 30
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 70
34683: PUSH
34684: LD_INT 20
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 84
34693: PUSH
34694: LD_INT 20
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 99
34703: PUSH
34704: LD_INT 29
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 108
34713: PUSH
34714: LD_INT 42
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 112
34723: PUSH
34724: LD_INT 33
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: ST_TO_ADDR
// human_attack_hexes = [ [ 75 , 46 ] , [ 75 , 30 ] , [ 70 , 20 ] , [ 84 , 20 ] , [ 99 , 29 ] , [ 108 , 42 ] , [ 112 , 33 ] ] ;
34740: LD_ADDR_VAR 0 9
34744: PUSH
34745: LD_INT 75
34747: PUSH
34748: LD_INT 46
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 75
34757: PUSH
34758: LD_INT 30
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 70
34767: PUSH
34768: LD_INT 20
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 84
34777: PUSH
34778: LD_INT 20
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 99
34787: PUSH
34788: LD_INT 29
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 108
34797: PUSH
34798: LD_INT 42
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 112
34807: PUSH
34808: LD_INT 33
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: ST_TO_ADDR
// wait_indexes = [ ] ;
34824: LD_ADDR_VAR 0 30
34828: PUSH
34829: EMPTY
34830: ST_TO_ADDR
// end ; 2 :
34831: GO 35652
34833: LD_INT 2
34835: DOUBLE
34836: EQUAL
34837: IFTRUE 34841
34839: GO 35385
34841: POP
// begin vehicle_prepare_hexes = [ [ 70 , 100 ] ] ;
34842: LD_ADDR_VAR 0 23
34846: PUSH
34847: LD_INT 70
34849: PUSH
34850: LD_INT 100
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: EMPTY
34858: LIST
34859: ST_TO_ADDR
// human_prepare_hexes = [ [ 60 , 82 ] ] ;
34860: LD_ADDR_VAR 0 22
34864: PUSH
34865: LD_INT 60
34867: PUSH
34868: LD_INT 82
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: EMPTY
34876: LIST
34877: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 105 , 95 ] , [ 121 , 93 ] , [ 123 , 79 ] , [ 143 , 78 ] , [ 143 , 71 ] , [ 144 , 64 ] , [ 149 , 74 ] , [ 158 , 88 ] , [ 141 , 85 ] , [ 124 , 79 ] , [ 121 , 93 ] , [ 105 , 95 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
34878: LD_ADDR_VAR 0 10
34882: PUSH
34883: LD_INT 105
34885: PUSH
34886: LD_INT 95
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 121
34895: PUSH
34896: LD_INT 93
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 123
34905: PUSH
34906: LD_INT 79
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 143
34915: PUSH
34916: LD_INT 78
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 143
34925: PUSH
34926: LD_INT 71
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 144
34935: PUSH
34936: LD_INT 64
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 149
34945: PUSH
34946: LD_INT 74
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 158
34955: PUSH
34956: LD_INT 88
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 141
34965: PUSH
34966: LD_INT 85
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 124
34975: PUSH
34976: LD_INT 79
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 121
34985: PUSH
34986: LD_INT 93
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 105
34995: PUSH
34996: LD_INT 95
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 88
35005: PUSH
35006: LD_INT 81
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 80
35015: PUSH
35016: LD_INT 63
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 78
35025: PUSH
35026: LD_INT 48
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 89
35035: PUSH
35036: LD_INT 43
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 108
35045: PUSH
35046: LD_INT 40
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 100
35055: PUSH
35056: LD_INT 28
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: ST_TO_ADDR
// human_attack_hexes = [ [ 73 , 95 ] , [ 84 , 101 ] , [ 95 , 102 ] , [ 104 , 100 ] , [ 114 , 97 ] , [ 124 , 99 ] , [ 132 , 100 ] , [ 137 , 94 ] , [ 149 , 99 ] , [ 161 , 104 ] , [ 158 , 88 ] , [ 149 , 74 ] , [ 144 , 64 ] , [ 143 , 71 ] , [ 141 , 85 ] , [ 124 , 79 ] , [ 121 , 93 ] , [ 105 , 95 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35083: LD_ADDR_VAR 0 9
35087: PUSH
35088: LD_INT 73
35090: PUSH
35091: LD_INT 95
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 84
35100: PUSH
35101: LD_INT 101
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 95
35110: PUSH
35111: LD_INT 102
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 104
35120: PUSH
35121: LD_INT 100
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 114
35130: PUSH
35131: LD_INT 97
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 124
35140: PUSH
35141: LD_INT 99
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 132
35150: PUSH
35151: LD_INT 100
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 137
35160: PUSH
35161: LD_INT 94
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 149
35170: PUSH
35171: LD_INT 99
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 161
35180: PUSH
35181: LD_INT 104
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 158
35190: PUSH
35191: LD_INT 88
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 149
35200: PUSH
35201: LD_INT 74
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 144
35210: PUSH
35211: LD_INT 64
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 143
35220: PUSH
35221: LD_INT 71
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 141
35230: PUSH
35231: LD_INT 85
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 124
35240: PUSH
35241: LD_INT 79
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 121
35250: PUSH
35251: LD_INT 93
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 105
35260: PUSH
35261: LD_INT 95
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 88
35270: PUSH
35271: LD_INT 81
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 80
35280: PUSH
35281: LD_INT 63
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 78
35290: PUSH
35291: LD_INT 48
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 89
35300: PUSH
35301: LD_INT 43
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 108
35310: PUSH
35311: LD_INT 40
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 100
35320: PUSH
35321: LD_INT 28
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: ST_TO_ADDR
// wait_indexes = [ [ 1 , 5 ] , [ 3 , 8 ] ] ;
35354: LD_ADDR_VAR 0 30
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 5
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 3
35371: PUSH
35372: LD_INT 8
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: ST_TO_ADDR
// end ; 3 :
35383: GO 35652
35385: LD_INT 3
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35393
35391: GO 35651
35393: POP
// begin vehicle_prepare_hexes = [ [ 71 , 100 ] ] ;
35394: LD_ADDR_VAR 0 23
35398: PUSH
35399: LD_INT 71
35401: PUSH
35402: LD_INT 100
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: EMPTY
35410: LIST
35411: ST_TO_ADDR
// human_prepare_hexes = [ [ 69 , 76 ] ] ;
35412: LD_ADDR_VAR 0 22
35416: PUSH
35417: LD_INT 69
35419: PUSH
35420: LD_INT 76
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: EMPTY
35428: LIST
35429: ST_TO_ADDR
// vehicle_attack_hexes = [ [ 94 , 97 ] , [ 99 , 109 ] , [ 103 , 94 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35430: LD_ADDR_VAR 0 10
35434: PUSH
35435: LD_INT 94
35437: PUSH
35438: LD_INT 97
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 99
35447: PUSH
35448: LD_INT 109
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 103
35457: PUSH
35458: LD_INT 94
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 88
35467: PUSH
35468: LD_INT 81
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 80
35477: PUSH
35478: LD_INT 63
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 78
35487: PUSH
35488: LD_INT 48
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 89
35497: PUSH
35498: LD_INT 43
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 108
35507: PUSH
35508: LD_INT 40
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 100
35517: PUSH
35518: LD_INT 28
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: ST_TO_ADDR
// human_attack_hexes = [ [ 94 , 97 ] , [ 99 , 109 ] , [ 103 , 94 ] , [ 88 , 81 ] , [ 80 , 63 ] , [ 78 , 48 ] , [ 89 , 43 ] , [ 108 , 40 ] , [ 100 , 28 ] ] ;
35536: LD_ADDR_VAR 0 9
35540: PUSH
35541: LD_INT 94
35543: PUSH
35544: LD_INT 97
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 99
35553: PUSH
35554: LD_INT 109
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 103
35563: PUSH
35564: LD_INT 94
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 88
35573: PUSH
35574: LD_INT 81
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 80
35583: PUSH
35584: LD_INT 63
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 78
35593: PUSH
35594: LD_INT 48
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 89
35603: PUSH
35604: LD_INT 43
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 108
35613: PUSH
35614: LD_INT 40
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 100
35623: PUSH
35624: LD_INT 28
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: ST_TO_ADDR
// wait_indexes = [ ] ;
35642: LD_ADDR_VAR 0 30
35646: PUSH
35647: EMPTY
35648: ST_TO_ADDR
// end ; end ;
35649: GO 35652
35651: POP
// area = GetBaseArea ( base ) ;
35652: LD_ADDR_VAR 0 15
35656: PUSH
35657: LD_VAR 0 4
35661: PPUSH
35662: CALL 12332 0 1
35666: ST_TO_ADDR
// attacking_humans = UnitFilter ( ai_attacking_soldiers [ base ] , [ f_ok ] ) ;
35667: LD_ADDR_VAR 0 14
35671: PUSH
35672: LD_EXP 64
35676: PUSH
35677: LD_VAR 0 4
35681: ARRAY
35682: PPUSH
35683: LD_INT 50
35685: PUSH
35686: EMPTY
35687: LIST
35688: PPUSH
35689: CALL_OW 72
35693: ST_TO_ADDR
// attacking_vehicles = UnitFilter ( ai_vehicles_attack [ base ] , [ f_ok ] ) ;
35694: LD_ADDR_VAR 0 21
35698: PUSH
35699: LD_EXP 41
35703: PUSH
35704: LD_VAR 0 4
35708: ARRAY
35709: PPUSH
35710: LD_INT 50
35712: PUSH
35713: EMPTY
35714: LIST
35715: PPUSH
35716: CALL_OW 72
35720: ST_TO_ADDR
// if ai_attacking_scientists [ base ] > 0 then
35721: LD_EXP 65
35725: PUSH
35726: LD_VAR 0 4
35730: ARRAY
35731: PUSH
35732: LD_INT 0
35734: GREATER
35735: IFFALSE 36105
// if ai_attacking_soldiers [ base ] = 0 then
35737: LD_EXP 64
35741: PUSH
35742: LD_VAR 0 4
35746: ARRAY
35747: PUSH
35748: LD_INT 0
35750: EQUAL
35751: IFFALSE 35777
// begin attacking_humans = attacking_humans ^ ai_attacking_scientists [ base ] ;
35753: LD_ADDR_VAR 0 14
35757: PUSH
35758: LD_VAR 0 14
35762: PUSH
35763: LD_EXP 65
35767: PUSH
35768: LD_VAR 0 4
35772: ARRAY
35773: ADD
35774: ST_TO_ADDR
// end else
35775: GO 36105
// begin x = 0 ;
35777: LD_ADDR_VAR 0 16
35781: PUSH
35782: LD_INT 0
35784: ST_TO_ADDR
// y = 0 ;
35785: LD_ADDR_VAR 0 17
35789: PUSH
35790: LD_INT 0
35792: ST_TO_ADDR
// for i in ai_attacking_soldiers [ base ] do
35793: LD_ADDR_VAR 0 2
35797: PUSH
35798: LD_EXP 64
35802: PUSH
35803: LD_VAR 0 4
35807: ARRAY
35808: PUSH
35809: FOR_IN
35810: IFFALSE 35856
// begin x = x + GetX ( i ) ;
35812: LD_ADDR_VAR 0 16
35816: PUSH
35817: LD_VAR 0 16
35821: PUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: CALL_OW 250
35831: PLUS
35832: ST_TO_ADDR
// y = y + GetY ( i ) ;
35833: LD_ADDR_VAR 0 17
35837: PUSH
35838: LD_VAR 0 17
35842: PUSH
35843: LD_VAR 0 2
35847: PPUSH
35848: CALL_OW 251
35852: PLUS
35853: ST_TO_ADDR
// end ;
35854: GO 35809
35856: POP
35857: POP
// x = x div ai_attacking_soldiers [ base ] ;
35858: LD_ADDR_VAR 0 16
35862: PUSH
35863: LD_VAR 0 16
35867: PUSH
35868: LD_EXP 64
35872: PUSH
35873: LD_VAR 0 4
35877: ARRAY
35878: DIV
35879: ST_TO_ADDR
// y = y div ai_attacking_soldiers [ base ] ;
35880: LD_ADDR_VAR 0 17
35884: PUSH
35885: LD_VAR 0 17
35889: PUSH
35890: LD_EXP 64
35894: PUSH
35895: LD_VAR 0 4
35899: ARRAY
35900: DIV
35901: ST_TO_ADDR
// temp_value = 0 ;
35902: LD_ADDR_VAR 0 3
35906: PUSH
35907: LD_INT 0
35909: ST_TO_ADDR
// for i in ai_attacking_soldiers [ base ] do
35910: LD_ADDR_VAR 0 2
35914: PUSH
35915: LD_EXP 64
35919: PUSH
35920: LD_VAR 0 4
35924: ARRAY
35925: PUSH
35926: FOR_IN
35927: IFFALSE 35978
// begin k = GetDistUnitXY ( i , x , y ) ;
35929: LD_ADDR_VAR 0 8
35933: PUSH
35934: LD_VAR 0 2
35938: PPUSH
35939: LD_VAR 0 16
35943: PPUSH
35944: LD_VAR 0 17
35948: PPUSH
35949: CALL_OW 297
35953: ST_TO_ADDR
// if k > temp_value then
35954: LD_VAR 0 8
35958: PUSH
35959: LD_VAR 0 3
35963: GREATER
35964: IFFALSE 35976
// temp_value = k ;
35966: LD_ADDR_VAR 0 3
35970: PUSH
35971: LD_VAR 0 8
35975: ST_TO_ADDR
// end ;
35976: GO 35926
35978: POP
35979: POP
// for i in ai_attacking_scientists [ base ] do
35980: LD_ADDR_VAR 0 2
35984: PUSH
35985: LD_EXP 65
35989: PUSH
35990: LD_VAR 0 4
35994: ARRAY
35995: PUSH
35996: FOR_IN
35997: IFFALSE 36103
// if GetDistUnitXY ( i , x , y ) > temp_value then
35999: LD_VAR 0 2
36003: PPUSH
36004: LD_VAR 0 16
36008: PPUSH
36009: LD_VAR 0 17
36013: PPUSH
36014: CALL_OW 297
36018: PUSH
36019: LD_VAR 0 3
36023: GREATER
36024: IFFALSE 36101
// case GetType ( IsInUnit ( i ) ) of unit_building :
36026: LD_VAR 0 2
36030: PPUSH
36031: CALL_OW 310
36035: PPUSH
36036: CALL_OW 247
36040: PUSH
36041: LD_INT 3
36043: DOUBLE
36044: EQUAL
36045: IFTRUE 36049
36047: GO 36061
36049: POP
// ComExitBuilding ( i ) ; unit_vehicle :
36050: LD_VAR 0 2
36054: PPUSH
36055: CALL_OW 122
36059: GO 36101
36061: LD_INT 2
36063: DOUBLE
36064: EQUAL
36065: IFTRUE 36069
36067: GO 36081
36069: POP
// ComExitVehicle ( i ) ; else
36070: LD_VAR 0 2
36074: PPUSH
36075: CALL_OW 121
36079: GO 36101
36081: POP
// ComMoveXY ( i , x , y ) ; end ;
36082: LD_VAR 0 2
36086: PPUSH
36087: LD_VAR 0 16
36091: PPUSH
36092: LD_VAR 0 17
36096: PPUSH
36097: CALL_OW 111
36101: GO 35996
36103: POP
36104: POP
// end ; if not all_are_ready then
36105: LD_VAR 0 26
36109: NOT
36110: IFFALSE 36834
// begin all_done = true ;
36112: LD_ADDR_VAR 0 18
36116: PUSH
36117: LD_INT 1
36119: ST_TO_ADDR
// for k = 1 to 2 do
36120: LD_ADDR_VAR 0 8
36124: PUSH
36125: DOUBLE
36126: LD_INT 1
36128: DEC
36129: ST_TO_ADDR
36130: LD_INT 2
36132: PUSH
36133: FOR_TO
36134: IFFALSE 36721
// begin case k of 1 :
36136: LD_VAR 0 8
36140: PUSH
36141: LD_INT 1
36143: DOUBLE
36144: EQUAL
36145: IFTRUE 36149
36147: GO 36298
36149: POP
// begin temp_list = attacking_vehicles ;
36150: LD_ADDR_VAR 0 5
36154: PUSH
36155: LD_VAR 0 21
36159: ST_TO_ADDR
// temp_list_2 = vehicle_prepare_hexes ;
36160: LD_ADDR_VAR 0 7
36164: PUSH
36165: LD_VAR 0 23
36169: ST_TO_ADDR
// if russian_attack_strategy = 2 then
36170: LD_EXP 84
36174: PUSH
36175: LD_INT 2
36177: EQUAL
36178: IFFALSE 36296
// begin if prepare_veh_movement then
36180: LD_VAR 0 29
36184: IFFALSE 36238
// begin prepare_veh_movement = false ;
36186: LD_ADDR_VAR 0 29
36190: PUSH
36191: LD_INT 0
36193: ST_TO_ADDR
// for i in temp_list do
36194: LD_ADDR_VAR 0 2
36198: PUSH
36199: LD_VAR 0 5
36203: PUSH
36204: FOR_IN
36205: IFFALSE 36236
// if not IsInArea ( i , area ) then
36207: LD_VAR 0 2
36211: PPUSH
36212: LD_VAR 0 15
36216: PPUSH
36217: CALL_OW 308
36221: NOT
36222: IFFALSE 36234
// begin prepare_veh_movement = true ;
36224: LD_ADDR_VAR 0 29
36228: PUSH
36229: LD_INT 1
36231: ST_TO_ADDR
// break ;
36232: GO 36236
// end ;
36234: GO 36204
36236: POP
36237: POP
// end ; vehs_to_move_to_start_pos = [ ] ;
36238: LD_ADDR_VAR 0 28
36242: PUSH
36243: EMPTY
36244: ST_TO_ADDR
// for i in temp_list do
36245: LD_ADDR_VAR 0 2
36249: PUSH
36250: LD_VAR 0 5
36254: PUSH
36255: FOR_IN
36256: IFFALSE 36294
// begin vehs_to_move_to_start_pos = vehs_to_move_to_start_pos ^ i ;
36258: LD_ADDR_VAR 0 28
36262: PUSH
36263: LD_VAR 0 28
36267: PUSH
36268: LD_VAR 0 2
36272: ADD
36273: ST_TO_ADDR
// if IsInArea ( i , area ) then
36274: LD_VAR 0 2
36278: PPUSH
36279: LD_VAR 0 15
36283: PPUSH
36284: CALL_OW 308
36288: IFFALSE 36292
// break ;
36290: GO 36294
// end ;
36292: GO 36255
36294: POP
36295: POP
// end ; end ; 2 :
36296: GO 36330
36298: LD_INT 2
36300: DOUBLE
36301: EQUAL
36302: IFTRUE 36306
36304: GO 36329
36306: POP
// begin temp_list = attacking_humans ;
36307: LD_ADDR_VAR 0 5
36311: PUSH
36312: LD_VAR 0 14
36316: ST_TO_ADDR
// temp_list_2 = human_prepare_hexes ;
36317: LD_ADDR_VAR 0 7
36321: PUSH
36322: LD_VAR 0 22
36326: ST_TO_ADDR
// end ; end ;
36327: GO 36330
36329: POP
// temp_value = true ;
36330: LD_ADDR_VAR 0 3
36334: PUSH
36335: LD_INT 1
36337: ST_TO_ADDR
// for i in temp_list do
36338: LD_ADDR_VAR 0 2
36342: PUSH
36343: LD_VAR 0 5
36347: PUSH
36348: FOR_IN
36349: IFFALSE 36590
// begin if ai_attacking_unit_hex_index [ base ] [ i ] = temp_list_2 + 0 then
36351: LD_EXP 75
36355: PUSH
36356: LD_VAR 0 4
36360: ARRAY
36361: PUSH
36362: LD_VAR 0 2
36366: ARRAY
36367: PUSH
36368: LD_VAR 0 7
36372: PUSH
36373: LD_INT 0
36375: PLUS
36376: EQUAL
36377: IFFALSE 36389
// temp_value = false else
36379: LD_ADDR_VAR 0 3
36383: PUSH
36384: LD_INT 0
36386: ST_TO_ADDR
36387: GO 36397
// all_done = false ;
36389: LD_ADDR_VAR 0 18
36393: PUSH
36394: LD_INT 0
36396: ST_TO_ADDR
// temp_list_3 = temp_list_2 [ ai_attacking_unit_hex_index [ base ] [ i ] ] ;
36397: LD_ADDR_VAR 0 11
36401: PUSH
36402: LD_VAR 0 7
36406: PUSH
36407: LD_EXP 75
36411: PUSH
36412: LD_VAR 0 4
36416: ARRAY
36417: PUSH
36418: LD_VAR 0 2
36422: ARRAY
36423: ARRAY
36424: ST_TO_ADDR
// if k = 1 and russian_attack_strategy = 2 then
36425: LD_VAR 0 8
36429: PUSH
36430: LD_INT 1
36432: EQUAL
36433: PUSH
36434: LD_EXP 84
36438: PUSH
36439: LD_INT 2
36441: EQUAL
36442: AND
36443: IFFALSE 36470
// begin temp_list_3 = CalculateVehicleNotReadyHex ( temp_list_3 , i , attacking_vehicles ) ;
36445: LD_ADDR_VAR 0 11
36449: PUSH
36450: LD_VAR 0 11
36454: PPUSH
36455: LD_VAR 0 2
36459: PPUSH
36460: LD_VAR 0 21
36464: PPUSH
36465: CALL 41257 0 3
36469: ST_TO_ADDR
// end ; if GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) > [ vehicle_dist , human_dist + 1 ] [ k ] and not ( GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) <= 10 and not HasTask ( i ) ) then
36470: LD_VAR 0 2
36474: PPUSH
36475: LD_VAR 0 11
36479: PUSH
36480: LD_INT 1
36482: ARRAY
36483: PPUSH
36484: LD_VAR 0 11
36488: PUSH
36489: LD_INT 2
36491: ARRAY
36492: PPUSH
36493: CALL_OW 297
36497: PUSH
36498: LD_VAR 0 25
36502: PUSH
36503: LD_VAR 0 24
36507: PUSH
36508: LD_INT 1
36510: PLUS
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_VAR 0 8
36520: ARRAY
36521: GREATER
36522: PUSH
36523: LD_VAR 0 2
36527: PPUSH
36528: LD_VAR 0 11
36532: PUSH
36533: LD_INT 1
36535: ARRAY
36536: PPUSH
36537: LD_VAR 0 11
36541: PUSH
36542: LD_INT 2
36544: ARRAY
36545: PPUSH
36546: CALL_OW 297
36550: PUSH
36551: LD_INT 10
36553: LESSEQUAL
36554: PUSH
36555: LD_VAR 0 2
36559: PPUSH
36560: CALL_OW 314
36564: NOT
36565: AND
36566: NOT
36567: AND
36568: IFFALSE 36588
// begin temp_value = false ;
36570: LD_ADDR_VAR 0 3
36574: PUSH
36575: LD_INT 0
36577: ST_TO_ADDR
// all_done = false ;
36578: LD_ADDR_VAR 0 18
36582: PUSH
36583: LD_INT 0
36585: ST_TO_ADDR
// break ;
36586: GO 36590
// end ; end ;
36588: GO 36348
36590: POP
36591: POP
// if temp_value then
36592: LD_VAR 0 3
36596: IFFALSE 36719
// begin if k = 2 then
36598: LD_VAR 0 8
36602: PUSH
36603: LD_INT 2
36605: EQUAL
36606: IFFALSE 36630
// temp_list = temp_list union ai_attacking_scientists [ base ] ;
36608: LD_ADDR_VAR 0 5
36612: PUSH
36613: LD_VAR 0 5
36617: PUSH
36618: LD_EXP 65
36622: PUSH
36623: LD_VAR 0 4
36627: ARRAY
36628: UNION
36629: ST_TO_ADDR
// for i in temp_list do
36630: LD_ADDR_VAR 0 2
36634: PUSH
36635: LD_VAR 0 5
36639: PUSH
36640: FOR_IN
36641: IFFALSE 36717
// begin temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
36643: LD_ADDR_VAR 0 7
36647: PUSH
36648: LD_EXP 75
36652: PUSH
36653: LD_VAR 0 4
36657: ARRAY
36658: PPUSH
36659: LD_VAR 0 2
36663: PPUSH
36664: LD_EXP 75
36668: PUSH
36669: LD_VAR 0 4
36673: ARRAY
36674: PUSH
36675: LD_VAR 0 2
36679: ARRAY
36680: PUSH
36681: LD_INT 1
36683: PLUS
36684: PPUSH
36685: CALL_OW 1
36689: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
36690: LD_ADDR_EXP 75
36694: PUSH
36695: LD_EXP 75
36699: PPUSH
36700: LD_VAR 0 4
36704: PPUSH
36705: LD_VAR 0 7
36709: PPUSH
36710: CALL_OW 1
36714: ST_TO_ADDR
// end ;
36715: GO 36640
36717: POP
36718: POP
// end ; end ;
36719: GO 36133
36721: POP
36722: POP
// if all_done then
36723: LD_VAR 0 18
36727: IFFALSE 36832
// begin all_are_ready = true ;
36729: LD_ADDR_VAR 0 26
36733: PUSH
36734: LD_INT 1
36736: ST_TO_ADDR
// for i in attacking_vehicles ^ ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
36737: LD_ADDR_VAR 0 2
36741: PUSH
36742: LD_VAR 0 21
36746: PUSH
36747: LD_EXP 64
36751: PUSH
36752: LD_VAR 0 4
36756: ARRAY
36757: ADD
36758: PUSH
36759: LD_EXP 65
36763: PUSH
36764: LD_VAR 0 4
36768: ARRAY
36769: ADD
36770: PUSH
36771: FOR_IN
36772: IFFALSE 36830
// begin temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , 1 ) ;
36774: LD_ADDR_VAR 0 7
36778: PUSH
36779: LD_EXP 75
36783: PUSH
36784: LD_VAR 0 4
36788: ARRAY
36789: PPUSH
36790: LD_VAR 0 2
36794: PPUSH
36795: LD_INT 1
36797: PPUSH
36798: CALL_OW 1
36802: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
36803: LD_ADDR_EXP 75
36807: PUSH
36808: LD_EXP 75
36812: PPUSH
36813: LD_VAR 0 4
36817: PPUSH
36818: LD_VAR 0 7
36822: PPUSH
36823: CALL_OW 1
36827: ST_TO_ADDR
// end ;
36828: GO 36771
36830: POP
36831: POP
// end ; end else
36832: GO 37486
// begin temp_list_3 = [ false , false ] ;
36834: LD_ADDR_VAR 0 11
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: ST_TO_ADDR
// for i in attacking_vehicles do
36849: LD_ADDR_VAR 0 2
36853: PUSH
36854: LD_VAR 0 21
36858: PUSH
36859: FOR_IN
36860: IFFALSE 37108
// if ai_attacking_unit_hex_index [ base ] [ i ] < vehicle_attack_hexes + 0 then
36862: LD_EXP 75
36866: PUSH
36867: LD_VAR 0 4
36871: ARRAY
36872: PUSH
36873: LD_VAR 0 2
36877: ARRAY
36878: PUSH
36879: LD_VAR 0 10
36883: PUSH
36884: LD_INT 0
36886: PLUS
36887: LESS
36888: IFFALSE 37106
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) <= vehicle_dist then
36890: LD_VAR 0 2
36894: PPUSH
36895: LD_VAR 0 10
36899: PUSH
36900: LD_EXP 75
36904: PUSH
36905: LD_VAR 0 4
36909: ARRAY
36910: PUSH
36911: LD_VAR 0 2
36915: ARRAY
36916: ARRAY
36917: PUSH
36918: LD_INT 1
36920: ARRAY
36921: PPUSH
36922: LD_VAR 0 10
36926: PUSH
36927: LD_EXP 75
36931: PUSH
36932: LD_VAR 0 4
36936: ARRAY
36937: PUSH
36938: LD_VAR 0 2
36942: ARRAY
36943: ARRAY
36944: PUSH
36945: LD_INT 2
36947: ARRAY
36948: PPUSH
36949: CALL_OW 297
36953: PUSH
36954: LD_VAR 0 25
36958: LESSEQUAL
36959: IFFALSE 37106
// begin if wait_indexes_pos <= wait_indexes + 0 then
36961: LD_VAR 0 31
36965: PUSH
36966: LD_VAR 0 30
36970: PUSH
36971: LD_INT 0
36973: PLUS
36974: LESSEQUAL
36975: IFFALSE 37034
// if ai_attacking_unit_hex_index [ base ] [ i ] = wait_indexes [ wait_indexes_pos ] [ 1 ] then
36977: LD_EXP 75
36981: PUSH
36982: LD_VAR 0 4
36986: ARRAY
36987: PUSH
36988: LD_VAR 0 2
36992: ARRAY
36993: PUSH
36994: LD_VAR 0 30
36998: PUSH
36999: LD_VAR 0 31
37003: ARRAY
37004: PUSH
37005: LD_INT 1
37007: ARRAY
37008: EQUAL
37009: IFFALSE 37034
// begin temp_list_3 = Replace ( temp_list_3 , 1 , true ) ;
37011: LD_ADDR_VAR 0 11
37015: PUSH
37016: LD_VAR 0 11
37020: PPUSH
37021: LD_INT 1
37023: PPUSH
37024: LD_INT 1
37026: PPUSH
37027: CALL_OW 1
37031: ST_TO_ADDR
// continue ;
37032: GO 36859
// end ; temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37034: LD_ADDR_VAR 0 7
37038: PUSH
37039: LD_EXP 75
37043: PUSH
37044: LD_VAR 0 4
37048: ARRAY
37049: PPUSH
37050: LD_VAR 0 2
37054: PPUSH
37055: LD_EXP 75
37059: PUSH
37060: LD_VAR 0 4
37064: ARRAY
37065: PUSH
37066: LD_VAR 0 2
37070: ARRAY
37071: PUSH
37072: LD_INT 1
37074: PLUS
37075: PPUSH
37076: CALL_OW 1
37080: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37081: LD_ADDR_EXP 75
37085: PUSH
37086: LD_EXP 75
37090: PPUSH
37091: LD_VAR 0 4
37095: PPUSH
37096: LD_VAR 0 7
37100: PPUSH
37101: CALL_OW 1
37105: ST_TO_ADDR
// end ; end ;
37106: GO 36859
37108: POP
37109: POP
// temp_value = true ;
37110: LD_ADDR_VAR 0 3
37114: PUSH
37115: LD_INT 1
37117: ST_TO_ADDR
// for i in attacking_humans do
37118: LD_ADDR_VAR 0 2
37122: PUSH
37123: LD_VAR 0 14
37127: PUSH
37128: FOR_IN
37129: IFFALSE 37242
// if ai_attacking_unit_hex_index [ base ] [ i ] <= human_attack_hexes + 0 then
37131: LD_EXP 75
37135: PUSH
37136: LD_VAR 0 4
37140: ARRAY
37141: PUSH
37142: LD_VAR 0 2
37146: ARRAY
37147: PUSH
37148: LD_VAR 0 9
37152: PUSH
37153: LD_INT 0
37155: PLUS
37156: LESSEQUAL
37157: IFFALSE 37240
// begin if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
37159: LD_VAR 0 2
37163: PPUSH
37164: LD_VAR 0 9
37168: PUSH
37169: LD_EXP 75
37173: PUSH
37174: LD_VAR 0 4
37178: ARRAY
37179: PUSH
37180: LD_VAR 0 2
37184: ARRAY
37185: ARRAY
37186: PUSH
37187: LD_INT 1
37189: ARRAY
37190: PPUSH
37191: LD_VAR 0 9
37195: PUSH
37196: LD_EXP 75
37200: PUSH
37201: LD_VAR 0 4
37205: ARRAY
37206: PUSH
37207: LD_VAR 0 2
37211: ARRAY
37212: ARRAY
37213: PUSH
37214: LD_INT 2
37216: ARRAY
37217: PPUSH
37218: CALL_OW 297
37222: PUSH
37223: LD_VAR 0 24
37227: GREATER
37228: IFFALSE 37240
// begin temp_value = false ;
37230: LD_ADDR_VAR 0 3
37234: PUSH
37235: LD_INT 0
37237: ST_TO_ADDR
// break ;
37238: GO 37242
// end ; end ;
37240: GO 37128
37242: POP
37243: POP
// if temp_value then
37244: LD_VAR 0 3
37248: IFFALSE 37458
// for i in ai_attacking_soldiers [ base ] ^ ai_attacking_scientists [ base ] do
37250: LD_ADDR_VAR 0 2
37254: PUSH
37255: LD_EXP 64
37259: PUSH
37260: LD_VAR 0 4
37264: ARRAY
37265: PUSH
37266: LD_EXP 65
37270: PUSH
37271: LD_VAR 0 4
37275: ARRAY
37276: ADD
37277: PUSH
37278: FOR_IN
37279: IFFALSE 37456
// if ai_attacking_unit_hex_index [ base ] [ i ] < human_attack_hexes + 0 then
37281: LD_EXP 75
37285: PUSH
37286: LD_VAR 0 4
37290: ARRAY
37291: PUSH
37292: LD_VAR 0 2
37296: ARRAY
37297: PUSH
37298: LD_VAR 0 9
37302: PUSH
37303: LD_INT 0
37305: PLUS
37306: LESS
37307: IFFALSE 37454
// begin if wait_indexes_pos <= wait_indexes + 0 then
37309: LD_VAR 0 31
37313: PUSH
37314: LD_VAR 0 30
37318: PUSH
37319: LD_INT 0
37321: PLUS
37322: LESSEQUAL
37323: IFFALSE 37382
// if ai_attacking_unit_hex_index [ base ] [ i ] = wait_indexes [ wait_indexes_pos ] [ 2 ] then
37325: LD_EXP 75
37329: PUSH
37330: LD_VAR 0 4
37334: ARRAY
37335: PUSH
37336: LD_VAR 0 2
37340: ARRAY
37341: PUSH
37342: LD_VAR 0 30
37346: PUSH
37347: LD_VAR 0 31
37351: ARRAY
37352: PUSH
37353: LD_INT 2
37355: ARRAY
37356: EQUAL
37357: IFFALSE 37382
// begin temp_list_3 = Replace ( temp_list_3 , 2 , true ) ;
37359: LD_ADDR_VAR 0 11
37363: PUSH
37364: LD_VAR 0 11
37368: PPUSH
37369: LD_INT 2
37371: PPUSH
37372: LD_INT 1
37374: PPUSH
37375: CALL_OW 1
37379: ST_TO_ADDR
// break ;
37380: GO 37456
// end ; temp_list_2 = Replace ( ai_attacking_unit_hex_index [ base ] , i , ai_attacking_unit_hex_index [ base ] [ i ] + 1 ) ;
37382: LD_ADDR_VAR 0 7
37386: PUSH
37387: LD_EXP 75
37391: PUSH
37392: LD_VAR 0 4
37396: ARRAY
37397: PPUSH
37398: LD_VAR 0 2
37402: PPUSH
37403: LD_EXP 75
37407: PUSH
37408: LD_VAR 0 4
37412: ARRAY
37413: PUSH
37414: LD_VAR 0 2
37418: ARRAY
37419: PUSH
37420: LD_INT 1
37422: PLUS
37423: PPUSH
37424: CALL_OW 1
37428: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list_2 ) ;
37429: LD_ADDR_EXP 75
37433: PUSH
37434: LD_EXP 75
37438: PPUSH
37439: LD_VAR 0 4
37443: PPUSH
37444: LD_VAR 0 7
37448: PPUSH
37449: CALL_OW 1
37453: ST_TO_ADDR
// end ;
37454: GO 37278
37456: POP
37457: POP
// if ( temp_list_3 diff true ) = 0 then
37458: LD_VAR 0 11
37462: PUSH
37463: LD_INT 1
37465: DIFF
37466: PUSH
37467: LD_INT 0
37469: EQUAL
37470: IFFALSE 37486
// wait_indexes_pos = wait_indexes_pos + 1 ;
37472: LD_ADDR_VAR 0 31
37476: PUSH
37477: LD_VAR 0 31
37481: PUSH
37482: LD_INT 1
37484: PLUS
37485: ST_TO_ADDR
// end ; if russian_attack_strategy = 2 and not strat_2_attack_permitted then
37486: LD_EXP 84
37490: PUSH
37491: LD_INT 2
37493: EQUAL
37494: PUSH
37495: LD_VAR 0 27
37499: NOT
37500: AND
37501: IFFALSE 37636
// begin temp_list = UnitFilter ( attacking_vehicles , [ f_inarea , player_base_1 ] ) ;
37503: LD_ADDR_VAR 0 5
37507: PUSH
37508: LD_VAR 0 21
37512: PPUSH
37513: LD_INT 95
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PPUSH
37523: CALL_OW 72
37527: ST_TO_ADDR
// if temp_list + 0 >= attacking_vehicles + 0 or temp_list + 0 >= 3 then
37528: LD_VAR 0 5
37532: PUSH
37533: LD_INT 0
37535: PLUS
37536: PUSH
37537: LD_VAR 0 21
37541: PUSH
37542: LD_INT 0
37544: PLUS
37545: GREATEREQUAL
37546: PUSH
37547: LD_VAR 0 5
37551: PUSH
37552: LD_INT 0
37554: PLUS
37555: PUSH
37556: LD_INT 3
37558: GREATEREQUAL
37559: OR
37560: IFFALSE 37572
// strat_2_attack_permitted = true else
37562: LD_ADDR_VAR 0 27
37566: PUSH
37567: LD_INT 1
37569: ST_TO_ADDR
37570: GO 37636
// begin temp_value = true ;
37572: LD_ADDR_VAR 0 3
37576: PUSH
37577: LD_INT 1
37579: ST_TO_ADDR
// for i in attacking_vehicles do
37580: LD_ADDR_VAR 0 2
37584: PUSH
37585: LD_VAR 0 21
37589: PUSH
37590: FOR_IN
37591: IFFALSE 37620
// if Attacks ( i ) = 0 then
37593: LD_VAR 0 2
37597: PPUSH
37598: CALL_OW 320
37602: PUSH
37603: LD_INT 0
37605: EQUAL
37606: IFFALSE 37618
// begin temp_value = false ;
37608: LD_ADDR_VAR 0 3
37612: PUSH
37613: LD_INT 0
37615: ST_TO_ADDR
// break ;
37616: GO 37620
// end ;
37618: GO 37590
37620: POP
37621: POP
// if temp_value then
37622: LD_VAR 0 3
37626: IFFALSE 37636
// strat_2_attack_permitted = true ;
37628: LD_ADDR_VAR 0 27
37632: PUSH
37633: LD_INT 1
37635: ST_TO_ADDR
// end ; end ; for i in attacking_vehicles ^ attacking_humans do
37636: LD_ADDR_VAR 0 2
37640: PUSH
37641: LD_VAR 0 21
37645: PUSH
37646: LD_VAR 0 14
37650: ADD
37651: PUSH
37652: FOR_IN
37653: IFFALSE 40259
// begin if GetClass ( i ) = class_bazooker then
37655: LD_VAR 0 2
37659: PPUSH
37660: CALL_OW 257
37664: PUSH
37665: LD_INT 9
37667: EQUAL
37668: IFFALSE 38035
// begin temp_list = GetTaskList ( i ) ;
37670: LD_ADDR_VAR 0 5
37674: PUSH
37675: LD_VAR 0 2
37679: PPUSH
37680: CALL_OW 437
37684: ST_TO_ADDR
// if temp_list > 0 then
37685: LD_VAR 0 5
37689: PUSH
37690: LD_INT 0
37692: GREATER
37693: IFFALSE 37733
// if temp_list [ 1 ] [ 1 ] = & or temp_list [ 1 ] [ 1 ] = % then
37695: LD_VAR 0 5
37699: PUSH
37700: LD_INT 1
37702: ARRAY
37703: PUSH
37704: LD_INT 1
37706: ARRAY
37707: PUSH
37708: LD_STRING &
37710: EQUAL
37711: PUSH
37712: LD_VAR 0 5
37716: PUSH
37717: LD_INT 1
37719: ARRAY
37720: PUSH
37721: LD_INT 1
37723: ARRAY
37724: PUSH
37725: LD_STRING %
37727: EQUAL
37728: OR
37729: IFFALSE 37733
// continue ;
37731: GO 37652
// un1 = Attacks ( i ) ;
37733: LD_ADDR_VAR 0 19
37737: PUSH
37738: LD_VAR 0 2
37742: PPUSH
37743: CALL_OW 320
37747: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
37748: LD_VAR 0 19
37752: PUSH
37753: LD_INT 0
37755: GREATER
37756: PUSH
37757: LD_VAR 0 19
37761: PUSH
37762: EMPTY
37763: LIST
37764: PPUSH
37765: CALL 40394 0 1
37769: PUSH
37770: LD_INT 0
37772: GREATER
37773: AND
37774: IFFALSE 38035
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
37776: LD_ADDR_VAR 0 7
37780: PUSH
37781: LD_VAR 0 19
37785: PPUSH
37786: CALL_OW 250
37790: PUSH
37791: LD_VAR 0 19
37795: PPUSH
37796: CALL_OW 251
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: ST_TO_ADDR
// temp_value = false ;
37805: LD_ADDR_VAR 0 3
37809: PUSH
37810: LD_INT 0
37812: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
37813: LD_ADDR_VAR 0 20
37817: PUSH
37818: LD_EXP 73
37822: PUSH
37823: LD_VAR 0 4
37827: ARRAY
37828: PUSH
37829: LD_EXP 74
37833: PUSH
37834: LD_VAR 0 4
37838: ARRAY
37839: ADD
37840: PUSH
37841: FOR_IN
37842: IFFALSE 37914
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
37844: LD_VAR 0 7
37848: PUSH
37849: LD_INT 1
37851: ARRAY
37852: PPUSH
37853: LD_VAR 0 7
37857: PUSH
37858: LD_INT 2
37860: ARRAY
37861: PPUSH
37862: LD_VAR 0 20
37866: PUSH
37867: LD_INT 1
37869: ARRAY
37870: PPUSH
37871: LD_VAR 0 20
37875: PUSH
37876: LD_INT 2
37878: ARRAY
37879: PPUSH
37880: CALL_OW 298
37884: PUSH
37885: LD_EXP 72
37889: PUSH
37890: LD_VAR 0 1
37894: ARRAY
37895: PUSH
37896: LD_INT 2
37898: ARRAY
37899: LESSEQUAL
37900: IFFALSE 37912
// begin temp_value = true ;
37902: LD_ADDR_VAR 0 3
37906: PUSH
37907: LD_INT 1
37909: ST_TO_ADDR
// break ;
37910: GO 37914
// end ;
37912: GO 37841
37914: POP
37915: POP
// if not temp_value then
37916: LD_VAR 0 3
37920: NOT
37921: IFFALSE 38035
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
37923: LD_VAR 0 2
37927: PPUSH
37928: LD_VAR 0 7
37932: PUSH
37933: LD_INT 1
37935: ARRAY
37936: PPUSH
37937: LD_VAR 0 7
37941: PUSH
37942: LD_INT 2
37944: ARRAY
37945: PPUSH
37946: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
37950: LD_ADDR_VAR 0 5
37954: PUSH
37955: LD_EXP 74
37959: PUSH
37960: LD_VAR 0 4
37964: ARRAY
37965: PPUSH
37966: LD_INT 1
37968: PPUSH
37969: LD_VAR 0 7
37973: PUSH
37974: LD_INT 1
37976: ARRAY
37977: PUSH
37978: LD_VAR 0 7
37982: PUSH
37983: LD_INT 2
37985: ARRAY
37986: PUSH
37987: LD_VAR 0 2
37991: PUSH
37992: LD_OWVAR 1
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: PPUSH
38003: CALL_OW 2
38007: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
38008: LD_ADDR_EXP 74
38012: PUSH
38013: LD_EXP 74
38017: PPUSH
38018: LD_VAR 0 4
38022: PPUSH
38023: LD_VAR 0 5
38027: PPUSH
38028: CALL_OW 1
38032: ST_TO_ADDR
// continue ;
38033: GO 37652
// end ; end ; end ; if not all_are_ready then
38035: LD_VAR 0 26
38039: NOT
38040: IFFALSE 38404
// begin if i in attacking_vehicles then
38042: LD_VAR 0 2
38046: PUSH
38047: LD_VAR 0 21
38051: IN
38052: IFFALSE 38165
// begin if russian_attack_strategy = 2 then
38054: LD_EXP 84
38058: PUSH
38059: LD_INT 2
38061: EQUAL
38062: IFFALSE 38143
// begin if prepare_veh_movement then
38064: LD_VAR 0 29
38068: IFFALSE 38128
// begin if not IsInArea ( i , area ) then
38070: LD_VAR 0 2
38074: PPUSH
38075: LD_VAR 0 15
38079: PPUSH
38080: CALL_OW 308
38084: NOT
38085: IFFALSE 38126
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
38087: LD_VAR 0 2
38091: PPUSH
38092: LD_EXP 42
38096: PUSH
38097: LD_VAR 0 4
38101: ARRAY
38102: PUSH
38103: LD_INT 1
38105: ARRAY
38106: PPUSH
38107: LD_EXP 42
38111: PUSH
38112: LD_VAR 0 4
38116: ARRAY
38117: PUSH
38118: LD_INT 2
38120: ARRAY
38121: PPUSH
38122: CALL_OW 111
// continue ;
38126: GO 37652
// end ; if not i in vehs_to_move_to_start_pos then
38128: LD_VAR 0 2
38132: PUSH
38133: LD_VAR 0 28
38137: IN
38138: NOT
38139: IFFALSE 38143
// continue ;
38141: GO 37652
// end ; temp_list = vehicle_prepare_hexes ;
38143: LD_ADDR_VAR 0 5
38147: PUSH
38148: LD_VAR 0 23
38152: ST_TO_ADDR
// k = vehicle_dist ;
38153: LD_ADDR_VAR 0 8
38157: PUSH
38158: LD_VAR 0 25
38162: ST_TO_ADDR
// end else
38163: GO 38185
// begin temp_list = human_prepare_hexes ;
38165: LD_ADDR_VAR 0 5
38169: PUSH
38170: LD_VAR 0 22
38174: ST_TO_ADDR
// k = human_dist ;
38175: LD_ADDR_VAR 0 8
38179: PUSH
38180: LD_VAR 0 24
38184: ST_TO_ADDR
// end ; if ai_attacking_unit_hex_index [ base ] [ i ] <= temp_list then
38185: LD_EXP 75
38189: PUSH
38190: LD_VAR 0 4
38194: ARRAY
38195: PUSH
38196: LD_VAR 0 2
38200: ARRAY
38201: PUSH
38202: LD_VAR 0 5
38206: LESSEQUAL
38207: IFFALSE 38402
// begin temp_list_3 = temp_list [ ai_attacking_unit_hex_index [ base ] [ i ] ] ;
38209: LD_ADDR_VAR 0 11
38213: PUSH
38214: LD_VAR 0 5
38218: PUSH
38219: LD_EXP 75
38223: PUSH
38224: LD_VAR 0 4
38228: ARRAY
38229: PUSH
38230: LD_VAR 0 2
38234: ARRAY
38235: ARRAY
38236: ST_TO_ADDR
// if i in attacking_vehicles and russian_attack_strategy = 2 then
38237: LD_VAR 0 2
38241: PUSH
38242: LD_VAR 0 21
38246: IN
38247: PUSH
38248: LD_EXP 84
38252: PUSH
38253: LD_INT 2
38255: EQUAL
38256: AND
38257: IFFALSE 38284
// begin temp_list_3 = CalculateVehicleNotReadyHex ( temp_list_3 , i , attacking_vehicles ) ;
38259: LD_ADDR_VAR 0 11
38263: PUSH
38264: LD_VAR 0 11
38268: PPUSH
38269: LD_VAR 0 2
38273: PPUSH
38274: LD_VAR 0 21
38278: PPUSH
38279: CALL 41257 0 3
38283: ST_TO_ADDR
// end ; if GetDistUnitXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) > k then
38284: LD_VAR 0 2
38288: PPUSH
38289: LD_VAR 0 11
38293: PUSH
38294: LD_INT 1
38296: ARRAY
38297: PPUSH
38298: LD_VAR 0 11
38302: PUSH
38303: LD_INT 2
38305: ARRAY
38306: PPUSH
38307: CALL_OW 297
38311: PUSH
38312: LD_VAR 0 8
38316: GREATER
38317: IFFALSE 38402
// begin case GetType ( IsInUnit ( i ) ) of unit_building :
38319: LD_VAR 0 2
38323: PPUSH
38324: CALL_OW 310
38328: PPUSH
38329: CALL_OW 247
38333: PUSH
38334: LD_INT 3
38336: DOUBLE
38337: EQUAL
38338: IFTRUE 38342
38340: GO 38354
38342: POP
// ComExitBuilding ( i ) ; unit_vehicle :
38343: LD_VAR 0 2
38347: PPUSH
38348: CALL_OW 122
38352: GO 38402
38354: LD_INT 2
38356: DOUBLE
38357: EQUAL
38358: IFTRUE 38362
38360: GO 38374
38362: POP
// ComExitVehicle ( i ) ; else
38363: LD_VAR 0 2
38367: PPUSH
38368: CALL_OW 121
38372: GO 38402
38374: POP
// ComMoveXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) ; end ;
38375: LD_VAR 0 2
38379: PPUSH
38380: LD_VAR 0 11
38384: PUSH
38385: LD_INT 1
38387: ARRAY
38388: PPUSH
38389: LD_VAR 0 11
38393: PUSH
38394: LD_INT 2
38396: ARRAY
38397: PPUSH
38398: CALL_OW 111
// end ; end ; end else
38402: GO 40257
// begin temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_human ] , [ f_dist , i , 20 ] , [ f_see , side ] ] ) ;
38404: LD_ADDR_VAR 0 5
38408: PUSH
38409: LD_INT 81
38411: PUSH
38412: LD_VAR 0 1
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 21
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 91
38433: PUSH
38434: LD_VAR 0 2
38438: PUSH
38439: LD_INT 20
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 101
38449: PUSH
38450: LD_VAR 0 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: PPUSH
38465: CALL_OW 69
38469: ST_TO_ADDR
// if russian_attack_strategy = 2 and GetY ( i ) >= 59 then
38470: LD_EXP 84
38474: PUSH
38475: LD_INT 2
38477: EQUAL
38478: PUSH
38479: LD_VAR 0 2
38483: PPUSH
38484: CALL_OW 251
38488: PUSH
38489: LD_INT 59
38491: GREATEREQUAL
38492: AND
38493: IFFALSE 38578
// begin k = 1 ;
38495: LD_ADDR_VAR 0 8
38499: PUSH
38500: LD_INT 1
38502: ST_TO_ADDR
// while k <= temp_list + 0 do
38503: LD_VAR 0 8
38507: PUSH
38508: LD_VAR 0 5
38512: PUSH
38513: LD_INT 0
38515: PLUS
38516: LESSEQUAL
38517: IFFALSE 38578
// begin if GetY ( temp_list [ k ] ) >= 59 then
38519: LD_VAR 0 5
38523: PUSH
38524: LD_VAR 0 8
38528: ARRAY
38529: PPUSH
38530: CALL_OW 251
38534: PUSH
38535: LD_INT 59
38537: GREATEREQUAL
38538: IFFALSE 38562
// begin temp_list = Delete ( temp_list , k ) ;
38540: LD_ADDR_VAR 0 5
38544: PUSH
38545: LD_VAR 0 5
38549: PPUSH
38550: LD_VAR 0 8
38554: PPUSH
38555: CALL_OW 3
38559: ST_TO_ADDR
// continue ;
38560: GO 38503
// end ; k = k + 1 ;
38562: LD_ADDR_VAR 0 8
38566: PUSH
38567: LD_VAR 0 8
38571: PUSH
38572: LD_INT 1
38574: PLUS
38575: ST_TO_ADDR
// end ;
38576: GO 38503
// end ; temp_value := russian_attack_strategy = 2 and i in attacking_vehicles and not strat_2_attack_permitted ;
38578: LD_ADDR_VAR 0 3
38582: PUSH
38583: LD_EXP 84
38587: PUSH
38588: LD_INT 2
38590: EQUAL
38591: PUSH
38592: LD_VAR 0 2
38596: PUSH
38597: LD_VAR 0 21
38601: IN
38602: AND
38603: PUSH
38604: LD_VAR 0 27
38608: NOT
38609: AND
38610: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
38611: LD_VAR 0 5
38615: PUSH
38616: LD_INT 0
38618: GREATER
38619: PUSH
38620: LD_VAR 0 3
38624: NOT
38625: AND
38626: IFFALSE 38762
// begin temp_list_2 = UnitFilter ( temp_list , [ f_not , [ f_lives , 250 ] ] ) ;
38628: LD_ADDR_VAR 0 7
38632: PUSH
38633: LD_VAR 0 5
38637: PPUSH
38638: LD_INT 3
38640: PUSH
38641: LD_INT 24
38643: PUSH
38644: LD_INT 250
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PPUSH
38655: CALL_OW 72
38659: ST_TO_ADDR
// if temp_list_2 > 0 then
38660: LD_VAR 0 7
38664: PUSH
38665: LD_INT 0
38667: GREATER
38668: IFFALSE 38680
// temp_list = temp_list_2 ;
38670: LD_ADDR_VAR 0 5
38674: PUSH
38675: LD_VAR 0 7
38679: ST_TO_ADDR
// temp_unit = AllNearestUnitToUnit ( temp_list , i ) ;
38680: LD_ADDR_VAR 0 6
38684: PUSH
38685: LD_VAR 0 5
38689: PPUSH
38690: LD_VAR 0 2
38694: PPUSH
38695: CALL_OW 75
38699: ST_TO_ADDR
// if GetLives ( temp_unit ) > 250 then
38700: LD_VAR 0 6
38704: PPUSH
38705: CALL_OW 256
38709: PUSH
38710: LD_INT 250
38712: GREATER
38713: IFFALSE 38746
// ComAgressiveMove ( i , GetX ( temp_unit ) , GetY ( temp_unit ) ) else
38715: LD_VAR 0 2
38719: PPUSH
38720: LD_VAR 0 6
38724: PPUSH
38725: CALL_OW 250
38729: PPUSH
38730: LD_VAR 0 6
38734: PPUSH
38735: CALL_OW 251
38739: PPUSH
38740: CALL_OW 114
38744: GO 38760
// ComAttackUnit ( i , temp_unit ) ;
38746: LD_VAR 0 2
38750: PPUSH
38751: LD_VAR 0 6
38755: PPUSH
38756: CALL_OW 115
// end else
38760: GO 40257
// begin temp_list = FindNonhumansNearUnit ( side , i , 20 , true ) ;
38762: LD_ADDR_VAR 0 5
38766: PUSH
38767: LD_VAR 0 1
38771: PPUSH
38772: LD_VAR 0 2
38776: PPUSH
38777: LD_INT 20
38779: PPUSH
38780: LD_INT 1
38782: PPUSH
38783: CALL 40272 0 4
38787: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
38788: LD_VAR 0 5
38792: PUSH
38793: LD_INT 0
38795: GREATER
38796: PUSH
38797: LD_VAR 0 3
38801: NOT
38802: AND
38803: IFFALSE 39089
// begin if i in attacking_vehicles then
38805: LD_VAR 0 2
38809: PUSH
38810: LD_VAR 0 21
38814: IN
38815: IFFALSE 38953
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
38817: LD_VAR 0 2
38821: PPUSH
38822: LD_VAR 0 10
38826: PUSH
38827: LD_EXP 75
38831: PUSH
38832: LD_VAR 0 4
38836: ARRAY
38837: PUSH
38838: LD_VAR 0 2
38842: ARRAY
38843: ARRAY
38844: PUSH
38845: LD_INT 1
38847: ARRAY
38848: PPUSH
38849: LD_VAR 0 10
38853: PUSH
38854: LD_EXP 75
38858: PUSH
38859: LD_VAR 0 4
38863: ARRAY
38864: PUSH
38865: LD_VAR 0 2
38869: ARRAY
38870: ARRAY
38871: PUSH
38872: LD_INT 2
38874: ARRAY
38875: PPUSH
38876: CALL_OW 297
38880: PUSH
38881: LD_VAR 0 25
38885: GREATER
38886: IFFALSE 38951
// ComAgressiveMove ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
38888: LD_VAR 0 2
38892: PPUSH
38893: LD_VAR 0 10
38897: PUSH
38898: LD_EXP 75
38902: PUSH
38903: LD_VAR 0 4
38907: ARRAY
38908: PUSH
38909: LD_VAR 0 2
38913: ARRAY
38914: ARRAY
38915: PUSH
38916: LD_INT 1
38918: ARRAY
38919: PPUSH
38920: LD_VAR 0 10
38924: PUSH
38925: LD_EXP 75
38929: PUSH
38930: LD_VAR 0 4
38934: ARRAY
38935: PUSH
38936: LD_VAR 0 2
38940: ARRAY
38941: ARRAY
38942: PUSH
38943: LD_INT 2
38945: ARRAY
38946: PPUSH
38947: CALL_OW 114
// end else
38951: GO 39087
// if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
38953: LD_VAR 0 2
38957: PPUSH
38958: LD_VAR 0 9
38962: PUSH
38963: LD_EXP 75
38967: PUSH
38968: LD_VAR 0 4
38972: ARRAY
38973: PUSH
38974: LD_VAR 0 2
38978: ARRAY
38979: ARRAY
38980: PUSH
38981: LD_INT 1
38983: ARRAY
38984: PPUSH
38985: LD_VAR 0 9
38989: PUSH
38990: LD_EXP 75
38994: PUSH
38995: LD_VAR 0 4
38999: ARRAY
39000: PUSH
39001: LD_VAR 0 2
39005: ARRAY
39006: ARRAY
39007: PUSH
39008: LD_INT 2
39010: ARRAY
39011: PPUSH
39012: CALL_OW 297
39016: PUSH
39017: LD_VAR 0 24
39021: GREATER
39022: IFFALSE 39087
// ComAgressiveMove ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39024: LD_VAR 0 2
39028: PPUSH
39029: LD_VAR 0 9
39033: PUSH
39034: LD_EXP 75
39038: PUSH
39039: LD_VAR 0 4
39043: ARRAY
39044: PUSH
39045: LD_VAR 0 2
39049: ARRAY
39050: ARRAY
39051: PUSH
39052: LD_INT 1
39054: ARRAY
39055: PPUSH
39056: LD_VAR 0 9
39060: PUSH
39061: LD_EXP 75
39065: PUSH
39066: LD_VAR 0 4
39070: ARRAY
39071: PUSH
39072: LD_VAR 0 2
39076: ARRAY
39077: ARRAY
39078: PUSH
39079: LD_INT 2
39081: ARRAY
39082: PPUSH
39083: CALL_OW 114
// end else
39087: GO 40257
// begin temp_list = FindNonhumansNearUnit ( side , i , 20 , false ) ;
39089: LD_ADDR_VAR 0 5
39093: PUSH
39094: LD_VAR 0 1
39098: PPUSH
39099: LD_VAR 0 2
39103: PPUSH
39104: LD_INT 20
39106: PPUSH
39107: LD_INT 0
39109: PPUSH
39110: CALL 40272 0 4
39114: ST_TO_ADDR
// if temp_list > 0 and not temp_value then
39115: LD_VAR 0 5
39119: PUSH
39120: LD_INT 0
39122: GREATER
39123: PUSH
39124: LD_VAR 0 3
39128: NOT
39129: AND
39130: IFFALSE 39168
// begin temp_unit = NearestUnitToUnit ( temp_list , i ) ;
39132: LD_ADDR_VAR 0 6
39136: PUSH
39137: LD_VAR 0 5
39141: PPUSH
39142: LD_VAR 0 2
39146: PPUSH
39147: CALL_OW 74
39151: ST_TO_ADDR
// ComAttackUnit ( i , temp_unit ) ;
39152: LD_VAR 0 2
39156: PPUSH
39157: LD_VAR 0 6
39161: PPUSH
39162: CALL_OW 115
// end else
39166: GO 40257
// if i in attacking_vehicles and russian_attack_strategy = 2 and not strat_2_attack_permitted then
39168: LD_VAR 0 2
39172: PUSH
39173: LD_VAR 0 21
39177: IN
39178: PUSH
39179: LD_EXP 84
39183: PUSH
39184: LD_INT 2
39186: EQUAL
39187: AND
39188: PUSH
39189: LD_VAR 0 27
39193: NOT
39194: AND
39195: IFFALSE 39975
// begin if i = attacking_vehicles [ 1 ] then
39197: LD_VAR 0 2
39201: PUSH
39202: LD_VAR 0 21
39206: PUSH
39207: LD_INT 1
39209: ARRAY
39210: EQUAL
39211: IFFALSE 39455
// begin if ai_attacking_unit_hex_index [ base ] [ i ] <= vehicle_attack_hexes then
39213: LD_EXP 75
39217: PUSH
39218: LD_VAR 0 4
39222: ARRAY
39223: PUSH
39224: LD_VAR 0 2
39228: ARRAY
39229: PUSH
39230: LD_VAR 0 10
39234: LESSEQUAL
39235: IFFALSE 39453
// if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
39237: LD_VAR 0 2
39241: PPUSH
39242: LD_VAR 0 10
39246: PUSH
39247: LD_EXP 75
39251: PUSH
39252: LD_VAR 0 4
39256: ARRAY
39257: PUSH
39258: LD_VAR 0 2
39262: ARRAY
39263: ARRAY
39264: PUSH
39265: LD_INT 1
39267: ARRAY
39268: PPUSH
39269: LD_VAR 0 10
39273: PUSH
39274: LD_EXP 75
39278: PUSH
39279: LD_VAR 0 4
39283: ARRAY
39284: PUSH
39285: LD_VAR 0 2
39289: ARRAY
39290: ARRAY
39291: PUSH
39292: LD_INT 2
39294: ARRAY
39295: PPUSH
39296: CALL_OW 297
39300: PUSH
39301: LD_VAR 0 25
39305: GREATER
39306: IFFALSE 39453
// begin temp_value = true ;
39308: LD_ADDR_VAR 0 3
39312: PUSH
39313: LD_INT 1
39315: ST_TO_ADDR
// for k = 2 to attacking_vehicles do
39316: LD_ADDR_VAR 0 8
39320: PUSH
39321: DOUBLE
39322: LD_INT 2
39324: DEC
39325: ST_TO_ADDR
39326: LD_VAR 0 21
39330: PUSH
39331: FOR_TO
39332: IFFALSE 39382
// if GetDistUnits ( attacking_vehicles [ k ] , attacking_vehicles [ k - 1 ] ) > 7 then
39334: LD_VAR 0 21
39338: PUSH
39339: LD_VAR 0 8
39343: ARRAY
39344: PPUSH
39345: LD_VAR 0 21
39349: PUSH
39350: LD_VAR 0 8
39354: PUSH
39355: LD_INT 1
39357: MINUS
39358: ARRAY
39359: PPUSH
39360: CALL_OW 296
39364: PUSH
39365: LD_INT 7
39367: GREATER
39368: IFFALSE 39380
// begin temp_value = false ;
39370: LD_ADDR_VAR 0 3
39374: PUSH
39375: LD_INT 0
39377: ST_TO_ADDR
// break ;
39378: GO 39382
// end ;
39380: GO 39331
39382: POP
39383: POP
// if temp_value then
39384: LD_VAR 0 3
39388: IFFALSE 39453
// ComMoveXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
39390: LD_VAR 0 2
39394: PPUSH
39395: LD_VAR 0 10
39399: PUSH
39400: LD_EXP 75
39404: PUSH
39405: LD_VAR 0 4
39409: ARRAY
39410: PUSH
39411: LD_VAR 0 2
39415: ARRAY
39416: ARRAY
39417: PUSH
39418: LD_INT 1
39420: ARRAY
39421: PPUSH
39422: LD_VAR 0 10
39426: PUSH
39427: LD_EXP 75
39431: PUSH
39432: LD_VAR 0 4
39436: ARRAY
39437: PUSH
39438: LD_VAR 0 2
39442: ARRAY
39443: ARRAY
39444: PUSH
39445: LD_INT 2
39447: ARRAY
39448: PPUSH
39449: CALL_OW 111
// end ; end else
39453: GO 39973
// begin temp_value = 2 ;
39455: LD_ADDR_VAR 0 3
39459: PUSH
39460: LD_INT 2
39462: ST_TO_ADDR
// for k = 2 to attacking_vehicles do
39463: LD_ADDR_VAR 0 8
39467: PUSH
39468: DOUBLE
39469: LD_INT 2
39471: DEC
39472: ST_TO_ADDR
39473: LD_VAR 0 21
39477: PUSH
39478: FOR_TO
39479: IFFALSE 39513
// if i = attacking_vehicles [ k ] then
39481: LD_VAR 0 2
39485: PUSH
39486: LD_VAR 0 21
39490: PUSH
39491: LD_VAR 0 8
39495: ARRAY
39496: EQUAL
39497: IFFALSE 39511
// begin temp_value = k ;
39499: LD_ADDR_VAR 0 3
39503: PUSH
39504: LD_VAR 0 8
39508: ST_TO_ADDR
// break ;
39509: GO 39513
// end ;
39511: GO 39478
39513: POP
39514: POP
// temp_value = temp_value - 1 ;
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: LD_VAR 0 3
39524: PUSH
39525: LD_INT 1
39527: MINUS
39528: ST_TO_ADDR
// x = GetX ( attacking_vehicles [ temp_value ] ) ;
39529: LD_ADDR_VAR 0 16
39533: PUSH
39534: LD_VAR 0 21
39538: PUSH
39539: LD_VAR 0 3
39543: ARRAY
39544: PPUSH
39545: CALL_OW 250
39549: ST_TO_ADDR
// y = GetY ( attacking_vehicles [ temp_value ] ) ;
39550: LD_ADDR_VAR 0 17
39554: PUSH
39555: LD_VAR 0 21
39559: PUSH
39560: LD_VAR 0 3
39564: ARRAY
39565: PPUSH
39566: CALL_OW 251
39570: ST_TO_ADDR
// if temp_value > 1 then
39571: LD_VAR 0 3
39575: PUSH
39576: LD_INT 1
39578: GREATER
39579: IFFALSE 39643
// begin k = AI_GetTurnDirection ( GetX ( attacking_vehicles [ temp_value - 1 ] ) , GetY ( attacking_vehicles [ temp_value - 1 ] ) , x , y ) ;
39581: LD_ADDR_VAR 0 8
39585: PUSH
39586: LD_VAR 0 21
39590: PUSH
39591: LD_VAR 0 3
39595: PUSH
39596: LD_INT 1
39598: MINUS
39599: ARRAY
39600: PPUSH
39601: CALL_OW 250
39605: PPUSH
39606: LD_VAR 0 21
39610: PUSH
39611: LD_VAR 0 3
39615: PUSH
39616: LD_INT 1
39618: MINUS
39619: ARRAY
39620: PPUSH
39621: CALL_OW 251
39625: PPUSH
39626: LD_VAR 0 16
39630: PPUSH
39631: LD_VAR 0 17
39635: PPUSH
39636: CALL 15071 0 4
39640: ST_TO_ADDR
// end else
39641: GO 39669
// k = AI_InvertDirection ( GetDir ( attacking_vehicles [ temp_value ] ) ) ;
39643: LD_ADDR_VAR 0 8
39647: PUSH
39648: LD_VAR 0 21
39652: PUSH
39653: LD_VAR 0 3
39657: ARRAY
39658: PPUSH
39659: CALL_OW 254
39663: PPUSH
39664: CALL 40982 0 1
39668: ST_TO_ADDR
// k = k - 1 ;
39669: LD_ADDR_VAR 0 8
39673: PUSH
39674: LD_VAR 0 8
39678: PUSH
39679: LD_INT 1
39681: MINUS
39682: ST_TO_ADDR
// if k = - 1 then
39683: LD_VAR 0 8
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: EQUAL
39692: IFFALSE 39702
// k = 5 ;
39694: LD_ADDR_VAR 0 8
39698: PUSH
39699: LD_INT 5
39701: ST_TO_ADDR
// temp_list_3 = [ ] ;
39702: LD_ADDR_VAR 0 11
39706: PUSH
39707: EMPTY
39708: ST_TO_ADDR
// for val = 1 to 3 do
39709: LD_ADDR_VAR 0 20
39713: PUSH
39714: DOUBLE
39715: LD_INT 1
39717: DEC
39718: ST_TO_ADDR
39719: LD_INT 3
39721: PUSH
39722: FOR_TO
39723: IFFALSE 39861
// begin temp_list_2 = [ ] ;
39725: LD_ADDR_VAR 0 7
39729: PUSH
39730: EMPTY
39731: ST_TO_ADDR
// temp_list_2 = Insert ( temp_list_2 , 1 , ShiftX ( x , k , 4 ) ) ;
39732: LD_ADDR_VAR 0 7
39736: PUSH
39737: LD_VAR 0 7
39741: PPUSH
39742: LD_INT 1
39744: PPUSH
39745: LD_VAR 0 16
39749: PPUSH
39750: LD_VAR 0 8
39754: PPUSH
39755: LD_INT 4
39757: PPUSH
39758: CALL_OW 272
39762: PPUSH
39763: CALL_OW 2
39767: ST_TO_ADDR
// temp_list_2 = Insert ( temp_list_2 , 2 , ShiftY ( y , k , 4 ) ) ;
39768: LD_ADDR_VAR 0 7
39772: PUSH
39773: LD_VAR 0 7
39777: PPUSH
39778: LD_INT 2
39780: PPUSH
39781: LD_VAR 0 17
39785: PPUSH
39786: LD_VAR 0 8
39790: PPUSH
39791: LD_INT 4
39793: PPUSH
39794: CALL_OW 273
39798: PPUSH
39799: CALL_OW 2
39803: ST_TO_ADDR
// temp_list_3 = Insert ( temp_list_3 , 1 , temp_list_2 ) ;
39804: LD_ADDR_VAR 0 11
39808: PUSH
39809: LD_VAR 0 11
39813: PPUSH
39814: LD_INT 1
39816: PPUSH
39817: LD_VAR 0 7
39821: PPUSH
39822: CALL_OW 2
39826: ST_TO_ADDR
// k = k + 1 ;
39827: LD_ADDR_VAR 0 8
39831: PUSH
39832: LD_VAR 0 8
39836: PUSH
39837: LD_INT 1
39839: PLUS
39840: ST_TO_ADDR
// if k = 6 then
39841: LD_VAR 0 8
39845: PUSH
39846: LD_INT 6
39848: EQUAL
39849: IFFALSE 39859
// k = 0 ;
39851: LD_ADDR_VAR 0 8
39855: PUSH
39856: LD_INT 0
39858: ST_TO_ADDR
// end ;
39859: GO 39722
39861: POP
39862: POP
// temp_list_2 = [ ] ;
39863: LD_ADDR_VAR 0 7
39867: PUSH
39868: EMPTY
39869: ST_TO_ADDR
// for val in temp_list_3 do
39870: LD_ADDR_VAR 0 20
39874: PUSH
39875: LD_VAR 0 11
39879: PUSH
39880: FOR_IN
39881: IFFALSE 39924
// temp_list_2 = temp_list_2 ^ GetDistUnitXY ( i , val [ 1 ] , val [ 2 ] ) ;
39883: LD_ADDR_VAR 0 7
39887: PUSH
39888: LD_VAR 0 7
39892: PUSH
39893: LD_VAR 0 2
39897: PPUSH
39898: LD_VAR 0 20
39902: PUSH
39903: LD_INT 1
39905: ARRAY
39906: PPUSH
39907: LD_VAR 0 20
39911: PUSH
39912: LD_INT 2
39914: ARRAY
39915: PPUSH
39916: CALL_OW 297
39920: ADD
39921: ST_TO_ADDR
39922: GO 39880
39924: POP
39925: POP
// temp_list_3 = WorstFromListByList ( temp_list_3 , temp_list_2 ) ;
39926: LD_ADDR_VAR 0 11
39930: PUSH
39931: LD_VAR 0 11
39935: PPUSH
39936: LD_VAR 0 7
39940: PPUSH
39941: CALL_OW 78
39945: ST_TO_ADDR
// ComMoveXY ( i , temp_list_3 [ 1 ] , temp_list_3 [ 2 ] ) ;
39946: LD_VAR 0 2
39950: PPUSH
39951: LD_VAR 0 11
39955: PUSH
39956: LD_INT 1
39958: ARRAY
39959: PPUSH
39960: LD_VAR 0 11
39964: PUSH
39965: LD_INT 2
39967: ARRAY
39968: PPUSH
39969: CALL_OW 111
// end ; end else
39973: GO 40257
// begin if i in attacking_vehicles then
39975: LD_VAR 0 2
39979: PUSH
39980: LD_VAR 0 21
39984: IN
39985: IFFALSE 40123
// begin if GetDistUnitXY ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > vehicle_dist then
39987: LD_VAR 0 2
39991: PPUSH
39992: LD_VAR 0 10
39996: PUSH
39997: LD_EXP 75
40001: PUSH
40002: LD_VAR 0 4
40006: ARRAY
40007: PUSH
40008: LD_VAR 0 2
40012: ARRAY
40013: ARRAY
40014: PUSH
40015: LD_INT 1
40017: ARRAY
40018: PPUSH
40019: LD_VAR 0 10
40023: PUSH
40024: LD_EXP 75
40028: PUSH
40029: LD_VAR 0 4
40033: ARRAY
40034: PUSH
40035: LD_VAR 0 2
40039: ARRAY
40040: ARRAY
40041: PUSH
40042: LD_INT 2
40044: ARRAY
40045: PPUSH
40046: CALL_OW 297
40050: PUSH
40051: LD_VAR 0 25
40055: GREATER
40056: IFFALSE 40121
// ComAgressiveMove ( i , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , vehicle_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
40058: LD_VAR 0 2
40062: PPUSH
40063: LD_VAR 0 10
40067: PUSH
40068: LD_EXP 75
40072: PUSH
40073: LD_VAR 0 4
40077: ARRAY
40078: PUSH
40079: LD_VAR 0 2
40083: ARRAY
40084: ARRAY
40085: PUSH
40086: LD_INT 1
40088: ARRAY
40089: PPUSH
40090: LD_VAR 0 10
40094: PUSH
40095: LD_EXP 75
40099: PUSH
40100: LD_VAR 0 4
40104: ARRAY
40105: PUSH
40106: LD_VAR 0 2
40110: ARRAY
40111: ARRAY
40112: PUSH
40113: LD_INT 2
40115: ARRAY
40116: PPUSH
40117: CALL_OW 114
// end else
40121: GO 40257
// if GetDistUnitXY ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) > human_dist then
40123: LD_VAR 0 2
40127: PPUSH
40128: LD_VAR 0 9
40132: PUSH
40133: LD_EXP 75
40137: PUSH
40138: LD_VAR 0 4
40142: ARRAY
40143: PUSH
40144: LD_VAR 0 2
40148: ARRAY
40149: ARRAY
40150: PUSH
40151: LD_INT 1
40153: ARRAY
40154: PPUSH
40155: LD_VAR 0 9
40159: PUSH
40160: LD_EXP 75
40164: PUSH
40165: LD_VAR 0 4
40169: ARRAY
40170: PUSH
40171: LD_VAR 0 2
40175: ARRAY
40176: ARRAY
40177: PUSH
40178: LD_INT 2
40180: ARRAY
40181: PPUSH
40182: CALL_OW 297
40186: PUSH
40187: LD_VAR 0 24
40191: GREATER
40192: IFFALSE 40257
// ComAgressiveMove ( i , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 1 ] , human_attack_hexes [ ai_attacking_unit_hex_index [ base ] [ i ] ] [ 2 ] ) ;
40194: LD_VAR 0 2
40198: PPUSH
40199: LD_VAR 0 9
40203: PUSH
40204: LD_EXP 75
40208: PUSH
40209: LD_VAR 0 4
40213: ARRAY
40214: PUSH
40215: LD_VAR 0 2
40219: ARRAY
40220: ARRAY
40221: PUSH
40222: LD_INT 1
40224: ARRAY
40225: PPUSH
40226: LD_VAR 0 9
40230: PUSH
40231: LD_EXP 75
40235: PUSH
40236: LD_VAR 0 4
40240: ARRAY
40241: PUSH
40242: LD_VAR 0 2
40246: ARRAY
40247: ARRAY
40248: PUSH
40249: LD_INT 2
40251: ARRAY
40252: PPUSH
40253: CALL_OW 114
// end ; end ; end ; end ; end ;
40257: GO 37652
40259: POP
40260: POP
// end ;
40261: GO 34467
40263: POP
40264: POP
// until false ;
40265: LD_INT 0
40267: IFFALSE 34450
// end ;
40269: PPOPN 31
40271: END
// function FindNonhumansNearUnit ( side , un , dist , only_dangerous ) ; var weapon_list , temp_list , i , btype , b , val ; begin
40272: LD_INT 0
40274: PPUSH
40275: PPUSH
40276: PPUSH
40277: PPUSH
40278: PPUSH
40279: PPUSH
40280: PPUSH
// temp_list = FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_human ] ] , [ f_dist , un , dist ] , [ f_see , side ] ] ) ;
40281: LD_ADDR_VAR 0 7
40285: PUSH
40286: LD_INT 81
40288: PUSH
40289: LD_VAR 0 1
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 3
40300: PUSH
40301: LD_INT 21
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 91
40317: PUSH
40318: LD_VAR 0 2
40322: PUSH
40323: LD_VAR 0 3
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 101
40335: PUSH
40336: LD_VAR 0 1
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: PPUSH
40351: CALL_OW 69
40355: ST_TO_ADDR
// if only_dangerous then
40356: LD_VAR 0 4
40360: IFFALSE 40379
// begin result = DangerousUnits ( temp_list ) ;
40362: LD_ADDR_VAR 0 5
40366: PUSH
40367: LD_VAR 0 7
40371: PPUSH
40372: CALL 40394 0 1
40376: ST_TO_ADDR
// end else
40377: GO 40389
// result = temp_list end ;
40379: LD_ADDR_VAR 0 5
40383: PUSH
40384: LD_VAR 0 7
40388: ST_TO_ADDR
40389: LD_VAR 0 5
40393: RET
// function DangerousUnits ( list ) ; var weapon_list , i , btype , b , val ; begin
40394: LD_INT 0
40396: PPUSH
40397: PPUSH
40398: PPUSH
40399: PPUSH
40400: PPUSH
40401: PPUSH
// weapon_list = [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , ar_multimissile_ballista , ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_siberium_rocket , ru_time_lapser ] ;
40402: LD_ADDR_VAR 0 3
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 3
40412: PUSH
40413: LD_INT 4
40415: PUSH
40416: LD_INT 5
40418: PUSH
40419: LD_INT 6
40421: PUSH
40422: LD_INT 7
40424: PUSH
40425: LD_INT 8
40427: PUSH
40428: LD_INT 9
40430: PUSH
40431: LD_INT 10
40433: PUSH
40434: LD_INT 22
40436: PUSH
40437: LD_INT 23
40439: PUSH
40440: LD_INT 24
40442: PUSH
40443: LD_INT 25
40445: PUSH
40446: LD_INT 26
40448: PUSH
40449: LD_INT 27
40451: PUSH
40452: LD_INT 28
40454: PUSH
40455: LD_INT 29
40457: PUSH
40458: LD_INT 42
40460: PUSH
40461: LD_INT 43
40463: PUSH
40464: LD_INT 44
40466: PUSH
40467: LD_INT 45
40469: PUSH
40470: LD_INT 46
40472: PUSH
40473: LD_INT 47
40475: PUSH
40476: LD_INT 48
40478: PUSH
40479: LD_INT 49
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: ST_TO_ADDR
// result = [ ] ;
40509: LD_ADDR_VAR 0 2
40513: PUSH
40514: EMPTY
40515: ST_TO_ADDR
// for i in list do
40516: LD_ADDR_VAR 0 4
40520: PUSH
40521: LD_VAR 0 1
40525: PUSH
40526: FOR_IN
40527: IFFALSE 40975
// case GetType ( i ) of unit_human :
40529: LD_VAR 0 4
40533: PPUSH
40534: CALL_OW 247
40538: PUSH
40539: LD_INT 1
40541: DOUBLE
40542: EQUAL
40543: IFTRUE 40547
40545: GO 40580
40547: POP
// begin if not IsOk ( i ) then
40548: LD_VAR 0 4
40552: PPUSH
40553: CALL_OW 302
40557: NOT
40558: IFFALSE 40562
// continue ;
40560: GO 40526
// result = result ^ i ;
40562: LD_ADDR_VAR 0 2
40566: PUSH
40567: LD_VAR 0 2
40571: PUSH
40572: LD_VAR 0 4
40576: ADD
40577: ST_TO_ADDR
// end ; unit_vehicle :
40578: GO 40973
40580: LD_INT 2
40582: DOUBLE
40583: EQUAL
40584: IFTRUE 40588
40586: GO 40728
40588: POP
// begin if not IsOk ( i ) then
40589: LD_VAR 0 4
40593: PPUSH
40594: CALL_OW 302
40598: NOT
40599: IFFALSE 40603
// continue ;
40601: GO 40526
// case GetControl ( i ) of control_manual , control_rider :
40603: LD_VAR 0 4
40607: PPUSH
40608: CALL_OW 263
40612: PUSH
40613: LD_INT 1
40615: DOUBLE
40616: EQUAL
40617: IFTRUE 40627
40619: LD_INT 4
40621: DOUBLE
40622: EQUAL
40623: IFTRUE 40627
40625: GO 40647
40627: POP
// begin if UnitsInside ( i ) = 0 then
40628: LD_VAR 0 4
40632: PPUSH
40633: CALL_OW 313
40637: PUSH
40638: LD_INT 0
40640: EQUAL
40641: IFFALSE 40645
// continue ;
40643: GO 40526
// end ; control_remote :
40645: GO 40693
40647: LD_INT 2
40649: DOUBLE
40650: EQUAL
40651: IFTRUE 40655
40653: GO 40675
40655: POP
// begin if IsControledBy ( i ) = 0 then
40656: LD_VAR 0 4
40660: PPUSH
40661: CALL_OW 312
40665: PUSH
40666: LD_INT 0
40668: EQUAL
40669: IFFALSE 40673
// continue ;
40671: GO 40526
// end ; control_computer , control_apeman :
40673: GO 40693
40675: LD_INT 3
40677: DOUBLE
40678: EQUAL
40679: IFTRUE 40689
40681: LD_INT 5
40683: DOUBLE
40684: EQUAL
40685: IFTRUE 40689
40687: GO 40692
40689: POP
// begin end ; end ;
40690: GO 40693
40692: POP
// if GetWeapon ( i ) in weapon_list then
40693: LD_VAR 0 4
40697: PPUSH
40698: CALL_OW 264
40702: PUSH
40703: LD_VAR 0 3
40707: IN
40708: IFFALSE 40726
// result = result ^ i ;
40710: LD_ADDR_VAR 0 2
40714: PUSH
40715: LD_VAR 0 2
40719: PUSH
40720: LD_VAR 0 4
40724: ADD
40725: ST_TO_ADDR
// end ; unit_building :
40726: GO 40973
40728: LD_INT 3
40730: DOUBLE
40731: EQUAL
40732: IFTRUE 40736
40734: GO 40972
40736: POP
// begin if not IsOk ( i ) then
40737: LD_VAR 0 4
40741: PPUSH
40742: CALL_OW 302
40746: NOT
40747: IFFALSE 40751
// continue ;
40749: GO 40526
// btype = GetBType ( i ) ;
40751: LD_ADDR_VAR 0 5
40755: PUSH
40756: LD_VAR 0 4
40760: PPUSH
40761: CALL_OW 266
40765: ST_TO_ADDR
// case btype of b_turret :
40766: LD_VAR 0 5
40770: PUSH
40771: LD_INT 33
40773: DOUBLE
40774: EQUAL
40775: IFTRUE 40779
40777: GO 40782
40779: POP
// begin end ; b_bunker , b_breastwork , b_armoury , b_barracks , b_fort :
40780: GO 40837
40782: LD_INT 32
40784: DOUBLE
40785: EQUAL
40786: IFTRUE 40814
40788: LD_INT 31
40790: DOUBLE
40791: EQUAL
40792: IFTRUE 40814
40794: LD_INT 4
40796: DOUBLE
40797: EQUAL
40798: IFTRUE 40814
40800: LD_INT 5
40802: DOUBLE
40803: EQUAL
40804: IFTRUE 40814
40806: LD_INT 35
40808: DOUBLE
40809: EQUAL
40810: IFTRUE 40814
40812: GO 40834
40814: POP
// begin if UnitsInside ( i ) = 0 then
40815: LD_VAR 0 4
40819: PPUSH
40820: CALL_OW 313
40824: PUSH
40825: LD_INT 0
40827: EQUAL
40828: IFFALSE 40832
// continue ;
40830: GO 40526
// end ; else
40832: GO 40837
40834: POP
// continue ; end ;
40835: GO 40526
// if btype in [ b_bunker , b_turret ] then
40837: LD_VAR 0 5
40841: PUSH
40842: LD_INT 32
40844: PUSH
40845: LD_INT 33
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: IN
40852: IFFALSE 40954
// if not GetBWeapon ( i ) in weapon_list then
40854: LD_VAR 0 4
40858: PPUSH
40859: CALL_OW 269
40863: PUSH
40864: LD_VAR 0 3
40868: IN
40869: NOT
40870: IFFALSE 40876
// continue else
40872: GO 40526
40874: GO 40954
// begin b = GetBase ( i ) ;
40876: LD_ADDR_VAR 0 6
40880: PUSH
40881: LD_VAR 0 4
40885: PPUSH
40886: CALL_OW 274
40890: ST_TO_ADDR
// val = false ;
40891: LD_ADDR_VAR 0 7
40895: PUSH
40896: LD_INT 0
40898: ST_TO_ADDR
// if b = 0 then
40899: LD_VAR 0 6
40903: PUSH
40904: LD_INT 0
40906: EQUAL
40907: IFFALSE 40919
// val = true else
40909: LD_ADDR_VAR 0 7
40913: PUSH
40914: LD_INT 1
40916: ST_TO_ADDR
40917: GO 40946
// if GetEnergy ( b ) [ 4 ] = 0 then
40919: LD_VAR 0 6
40923: PPUSH
40924: CALL_OW 278
40928: PUSH
40929: LD_INT 4
40931: ARRAY
40932: PUSH
40933: LD_INT 0
40935: EQUAL
40936: IFFALSE 40946
// val = true ;
40938: LD_ADDR_VAR 0 7
40942: PUSH
40943: LD_INT 1
40945: ST_TO_ADDR
// if val then
40946: LD_VAR 0 7
40950: IFFALSE 40954
// continue ;
40952: GO 40526
// end ; result = result ^ i ;
40954: LD_ADDR_VAR 0 2
40958: PUSH
40959: LD_VAR 0 2
40963: PUSH
40964: LD_VAR 0 4
40968: ADD
40969: ST_TO_ADDR
// end ; end ;
40970: GO 40973
40972: POP
40973: GO 40526
40975: POP
40976: POP
// end ;
40977: LD_VAR 0 2
40981: RET
// function AI_InvertDirection ( direction ) ; var dir ; begin
40982: LD_INT 0
40984: PPUSH
40985: PPUSH
// dir = direction - 3 ;
40986: LD_ADDR_VAR 0 3
40990: PUSH
40991: LD_VAR 0 1
40995: PUSH
40996: LD_INT 3
40998: MINUS
40999: ST_TO_ADDR
// if dir < 0 then
41000: LD_VAR 0 3
41004: PUSH
41005: LD_INT 0
41007: LESS
41008: IFFALSE 41024
// dir = dir + 6 ;
41010: LD_ADDR_VAR 0 3
41014: PUSH
41015: LD_VAR 0 3
41019: PUSH
41020: LD_INT 6
41022: PLUS
41023: ST_TO_ADDR
// result = dir ;
41024: LD_ADDR_VAR 0 2
41028: PUSH
41029: LD_VAR 0 3
41033: ST_TO_ADDR
// end ;
41034: LD_VAR 0 2
41038: RET
// export function AI_GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
41039: LD_INT 0
41041: PPUSH
41042: PPUSH
41043: PPUSH
41044: PPUSH
41045: PPUSH
41046: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
41047: LD_VAR 0 1
41051: PPUSH
41052: LD_VAR 0 2
41056: PPUSH
41057: CALL_OW 488
41061: NOT
41062: PUSH
41063: LD_VAR 0 3
41067: PPUSH
41068: LD_VAR 0 4
41072: PPUSH
41073: CALL_OW 488
41077: NOT
41078: OR
41079: IFFALSE 41092
// begin result = - 1 ;
41081: LD_ADDR_VAR 0 5
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: ST_TO_ADDR
// exit ;
41090: GO 41252
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
41092: LD_ADDR_VAR 0 6
41096: PUSH
41097: LD_VAR 0 1
41101: PPUSH
41102: LD_VAR 0 2
41106: PPUSH
41107: LD_VAR 0 3
41111: PPUSH
41112: LD_VAR 0 4
41116: PPUSH
41117: CALL_OW 298
41121: ST_TO_ADDR
// dist_2 = 99999 ;
41122: LD_ADDR_VAR 0 7
41126: PUSH
41127: LD_INT 99999
41129: ST_TO_ADDR
// for b = 0 to 5 do
41130: LD_ADDR_VAR 0 8
41134: PUSH
41135: DOUBLE
41136: LD_INT 0
41138: DEC
41139: ST_TO_ADDR
41140: LD_INT 5
41142: PUSH
41143: FOR_TO
41144: IFFALSE 41240
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
41146: LD_ADDR_VAR 0 9
41150: PUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: LD_VAR 0 8
41160: PPUSH
41161: LD_VAR 0 6
41165: PPUSH
41166: CALL_OW 272
41170: PPUSH
41171: LD_VAR 0 2
41175: PPUSH
41176: LD_VAR 0 8
41180: PPUSH
41181: LD_VAR 0 6
41185: PPUSH
41186: CALL_OW 273
41190: PPUSH
41191: LD_VAR 0 3
41195: PPUSH
41196: LD_VAR 0 4
41200: PPUSH
41201: CALL_OW 298
41205: ST_TO_ADDR
// if temp_dist < dist_2 then
41206: LD_VAR 0 9
41210: PUSH
41211: LD_VAR 0 7
41215: LESS
41216: IFFALSE 41238
// begin dist_2 = temp_dist ;
41218: LD_ADDR_VAR 0 7
41222: PUSH
41223: LD_VAR 0 9
41227: ST_TO_ADDR
// dir = b ;
41228: LD_ADDR_VAR 0 10
41232: PUSH
41233: LD_VAR 0 8
41237: ST_TO_ADDR
// end ; end ;
41238: GO 41143
41240: POP
41241: POP
// result = dir ;
41242: LD_ADDR_VAR 0 5
41246: PUSH
41247: LD_VAR 0 10
41251: ST_TO_ADDR
// end ;
41252: LD_VAR 0 5
41256: RET
// function CalculateVehicleNotReadyHex ( hex , veh , attacking_vehicles ) ; var x , num ; begin
41257: LD_INT 0
41259: PPUSH
41260: PPUSH
41261: PPUSH
// for num = 1 to attacking_vehicles do
41262: LD_ADDR_VAR 0 6
41266: PUSH
41267: DOUBLE
41268: LD_INT 1
41270: DEC
41271: ST_TO_ADDR
41272: LD_VAR 0 3
41276: PUSH
41277: FOR_TO
41278: IFFALSE 41302
// if attacking_vehicles [ num ] = veh then
41280: LD_VAR 0 3
41284: PUSH
41285: LD_VAR 0 6
41289: ARRAY
41290: PUSH
41291: LD_VAR 0 2
41295: EQUAL
41296: IFFALSE 41300
// break ;
41298: GO 41302
41300: GO 41277
41302: POP
41303: POP
// x = ShiftX ( hex [ 1 ] , 1 , 5 * ( attacking_vehicles - num ) ) ;
41304: LD_ADDR_VAR 0 5
41308: PUSH
41309: LD_VAR 0 1
41313: PUSH
41314: LD_INT 1
41316: ARRAY
41317: PPUSH
41318: LD_INT 1
41320: PPUSH
41321: LD_INT 5
41323: PUSH
41324: LD_VAR 0 3
41328: PUSH
41329: LD_VAR 0 6
41333: MINUS
41334: MUL
41335: PPUSH
41336: CALL_OW 272
41340: ST_TO_ADDR
// result = Replace ( hex , 1 , x ) ;
41341: LD_ADDR_VAR 0 4
41345: PUSH
41346: LD_VAR 0 1
41350: PPUSH
41351: LD_INT 1
41353: PPUSH
41354: LD_VAR 0 5
41358: PPUSH
41359: CALL_OW 1
41363: ST_TO_ADDR
// end ;
41364: LD_VAR 0 4
41368: RET
// every 0 0$1 + 0 0$0.1 do var i , k , temp_list , un1 , temp_list_2 , temp_value , val ; var side , base , attack_hexes ;
41369: GO 41371
41371: DISABLE
41372: LD_INT 0
41374: PPUSH
41375: PPUSH
41376: PPUSH
41377: PPUSH
41378: PPUSH
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
// begin side = russians ;
41384: LD_ADDR_VAR 0 8
41388: PUSH
41389: LD_EXP 4
41393: ST_TO_ADDR
// base = 3 ;
41394: LD_ADDR_VAR 0 9
41398: PUSH
41399: LD_INT 3
41401: ST_TO_ADDR
// attack_hexes = [ [ 41 , 65 ] , [ 25 , 46 ] , [ 26 , 24 ] , [ 41 , 21 ] , [ 53 , 17 ] , [ 60 , 27 ] , [ 53 , 17 ] ] ;
41402: LD_ADDR_VAR 0 10
41406: PUSH
41407: LD_INT 41
41409: PUSH
41410: LD_INT 65
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 25
41419: PUSH
41420: LD_INT 46
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 26
41429: PUSH
41430: LD_INT 24
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 41
41439: PUSH
41440: LD_INT 21
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 53
41449: PUSH
41450: LD_INT 17
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 60
41459: PUSH
41460: LD_INT 27
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 53
41469: PUSH
41470: LD_INT 17
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41486: LD_INT 35
41488: PPUSH
41489: CALL_OW 67
// special_russian_attackers = UnitFilter ( special_russian_attackers , [ f_alive ] ) ;
41493: LD_ADDR_EXP 85
41497: PUSH
41498: LD_EXP 85
41502: PPUSH
41503: LD_INT 51
41505: PUSH
41506: EMPTY
41507: LIST
41508: PPUSH
41509: CALL_OW 72
41513: ST_TO_ADDR
// for i in special_russian_attackers do
41514: LD_ADDR_VAR 0 1
41518: PUSH
41519: LD_EXP 85
41523: PUSH
41524: FOR_IN
41525: IFFALSE 42195
// begin if GetClass ( i ) = class_bazooker then
41527: LD_VAR 0 1
41531: PPUSH
41532: CALL_OW 257
41536: PUSH
41537: LD_INT 9
41539: EQUAL
41540: IFFALSE 41889
// begin temp_list = GetTaskList ( i ) ;
41542: LD_ADDR_VAR 0 3
41546: PUSH
41547: LD_VAR 0 1
41551: PPUSH
41552: CALL_OW 437
41556: ST_TO_ADDR
// if temp_list > 0 then
41557: LD_VAR 0 3
41561: PUSH
41562: LD_INT 0
41564: GREATER
41565: IFFALSE 41587
// if temp_list [ 1 ] [ 1 ] = & then
41567: LD_VAR 0 3
41571: PUSH
41572: LD_INT 1
41574: ARRAY
41575: PUSH
41576: LD_INT 1
41578: ARRAY
41579: PUSH
41580: LD_STRING &
41582: EQUAL
41583: IFFALSE 41587
// continue ;
41585: GO 41524
// un1 = Attacks ( i ) ;
41587: LD_ADDR_VAR 0 4
41591: PUSH
41592: LD_VAR 0 1
41596: PPUSH
41597: CALL_OW 320
41601: ST_TO_ADDR
// if un1 > 0 and DangerousUnits ( [ un1 ] ) > 0 then
41602: LD_VAR 0 4
41606: PUSH
41607: LD_INT 0
41609: GREATER
41610: PUSH
41611: LD_VAR 0 4
41615: PUSH
41616: EMPTY
41617: LIST
41618: PPUSH
41619: CALL 40394 0 1
41623: PUSH
41624: LD_INT 0
41626: GREATER
41627: AND
41628: IFFALSE 41889
// begin temp_list_2 = [ GetX ( un1 ) , GetY ( un1 ) ] ;
41630: LD_ADDR_VAR 0 5
41634: PUSH
41635: LD_VAR 0 4
41639: PPUSH
41640: CALL_OW 250
41644: PUSH
41645: LD_VAR 0 4
41649: PPUSH
41650: CALL_OW 251
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: ST_TO_ADDR
// temp_value = false ;
41659: LD_ADDR_VAR 0 6
41663: PUSH
41664: LD_INT 0
41666: ST_TO_ADDR
// for val in ai_time_shift_hexes [ base ] ^ ai_time_shift_hexes_underway [ base ] do
41667: LD_ADDR_VAR 0 7
41671: PUSH
41672: LD_EXP 73
41676: PUSH
41677: LD_VAR 0 9
41681: ARRAY
41682: PUSH
41683: LD_EXP 74
41687: PUSH
41688: LD_VAR 0 9
41692: ARRAY
41693: ADD
41694: PUSH
41695: FOR_IN
41696: IFFALSE 41768
// if GetDistXY ( temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , val [ 1 ] , val [ 2 ] ) <= ai_time_shift_data [ side ] [ 2 ] then
41698: LD_VAR 0 5
41702: PUSH
41703: LD_INT 1
41705: ARRAY
41706: PPUSH
41707: LD_VAR 0 5
41711: PUSH
41712: LD_INT 2
41714: ARRAY
41715: PPUSH
41716: LD_VAR 0 7
41720: PUSH
41721: LD_INT 1
41723: ARRAY
41724: PPUSH
41725: LD_VAR 0 7
41729: PUSH
41730: LD_INT 2
41732: ARRAY
41733: PPUSH
41734: CALL_OW 298
41738: PUSH
41739: LD_EXP 72
41743: PUSH
41744: LD_VAR 0 8
41748: ARRAY
41749: PUSH
41750: LD_INT 2
41752: ARRAY
41753: LESSEQUAL
41754: IFFALSE 41766
// begin temp_value = true ;
41756: LD_ADDR_VAR 0 6
41760: PUSH
41761: LD_INT 1
41763: ST_TO_ADDR
// break ;
41764: GO 41768
// end ;
41766: GO 41695
41768: POP
41769: POP
// if not temp_value then
41770: LD_VAR 0 6
41774: NOT
41775: IFFALSE 41889
// begin ComTimeShift ( i , temp_list_2 [ 1 ] , temp_list_2 [ 2 ] ) ;
41777: LD_VAR 0 1
41781: PPUSH
41782: LD_VAR 0 5
41786: PUSH
41787: LD_INT 1
41789: ARRAY
41790: PPUSH
41791: LD_VAR 0 5
41795: PUSH
41796: LD_INT 2
41798: ARRAY
41799: PPUSH
41800: CALL_OW 154
// temp_list = Insert ( ai_time_shift_hexes_underway [ base ] , 1 , [ temp_list_2 [ 1 ] , temp_list_2 [ 2 ] , i , tick ] ) ;
41804: LD_ADDR_VAR 0 3
41808: PUSH
41809: LD_EXP 74
41813: PUSH
41814: LD_VAR 0 9
41818: ARRAY
41819: PPUSH
41820: LD_INT 1
41822: PPUSH
41823: LD_VAR 0 5
41827: PUSH
41828: LD_INT 1
41830: ARRAY
41831: PUSH
41832: LD_VAR 0 5
41836: PUSH
41837: LD_INT 2
41839: ARRAY
41840: PUSH
41841: LD_VAR 0 1
41845: PUSH
41846: LD_OWVAR 1
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: PPUSH
41857: CALL_OW 2
41861: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
41862: LD_ADDR_EXP 74
41866: PUSH
41867: LD_EXP 74
41871: PPUSH
41872: LD_VAR 0 9
41876: PPUSH
41877: LD_VAR 0 3
41881: PPUSH
41882: CALL_OW 1
41886: ST_TO_ADDR
// continue ;
41887: GO 41524
// end ; end ; end ; k = ai_attacking_unit_hex_index [ base ] [ i ] ;
41889: LD_ADDR_VAR 0 2
41893: PUSH
41894: LD_EXP 75
41898: PUSH
41899: LD_VAR 0 9
41903: ARRAY
41904: PUSH
41905: LD_VAR 0 1
41909: ARRAY
41910: ST_TO_ADDR
// if GetDistUnitXY ( i , attack_hexes [ k ] [ 1 ] , attack_hexes [ k ] [ 2 ] ) > 1 then
41911: LD_VAR 0 1
41915: PPUSH
41916: LD_VAR 0 10
41920: PUSH
41921: LD_VAR 0 2
41925: ARRAY
41926: PUSH
41927: LD_INT 1
41929: ARRAY
41930: PPUSH
41931: LD_VAR 0 10
41935: PUSH
41936: LD_VAR 0 2
41940: ARRAY
41941: PUSH
41942: LD_INT 2
41944: ARRAY
41945: PPUSH
41946: CALL_OW 297
41950: PUSH
41951: LD_INT 1
41953: GREATER
41954: IFFALSE 41997
// ComAgressiveMove ( i , attack_hexes [ k ] [ 1 ] , attack_hexes [ k ] [ 2 ] ) else
41956: LD_VAR 0 1
41960: PPUSH
41961: LD_VAR 0 10
41965: PUSH
41966: LD_VAR 0 2
41970: ARRAY
41971: PUSH
41972: LD_INT 1
41974: ARRAY
41975: PPUSH
41976: LD_VAR 0 10
41980: PUSH
41981: LD_VAR 0 2
41985: ARRAY
41986: PUSH
41987: LD_INT 2
41989: ARRAY
41990: PPUSH
41991: CALL_OW 114
41995: GO 42193
// begin if k < attack_hexes - 1 then
41997: LD_VAR 0 2
42001: PUSH
42002: LD_VAR 0 10
42006: PUSH
42007: LD_INT 1
42009: MINUS
42010: LESS
42011: IFFALSE 42075
// begin temp_list = Replace ( ai_attacking_unit_hex_index [ base ] , i , k + 1 ) ;
42013: LD_ADDR_VAR 0 3
42017: PUSH
42018: LD_EXP 75
42022: PUSH
42023: LD_VAR 0 9
42027: ARRAY
42028: PPUSH
42029: LD_VAR 0 1
42033: PPUSH
42034: LD_VAR 0 2
42038: PUSH
42039: LD_INT 1
42041: PLUS
42042: PPUSH
42043: CALL_OW 1
42047: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
42048: LD_ADDR_EXP 75
42052: PUSH
42053: LD_EXP 75
42057: PPUSH
42058: LD_VAR 0 9
42062: PPUSH
42063: LD_VAR 0 3
42067: PPUSH
42068: CALL_OW 1
42072: ST_TO_ADDR
// end else
42073: GO 42193
// begin if Rand ( 1 , 6 ) = 1 then
42075: LD_INT 1
42077: PPUSH
42078: LD_INT 6
42080: PPUSH
42081: CALL_OW 12
42085: PUSH
42086: LD_INT 1
42088: EQUAL
42089: IFFALSE 42193
// begin if k = attack_hexes - 1 then
42091: LD_VAR 0 2
42095: PUSH
42096: LD_VAR 0 10
42100: PUSH
42101: LD_INT 1
42103: MINUS
42104: EQUAL
42105: IFFALSE 42123
// k = attack_hexes + 0 else
42107: LD_ADDR_VAR 0 2
42111: PUSH
42112: LD_VAR 0 10
42116: PUSH
42117: LD_INT 0
42119: PLUS
42120: ST_TO_ADDR
42121: GO 42137
// k = attack_hexes - 1 ;
42123: LD_ADDR_VAR 0 2
42127: PUSH
42128: LD_VAR 0 10
42132: PUSH
42133: LD_INT 1
42135: MINUS
42136: ST_TO_ADDR
// temp_list = Replace ( ai_attacking_unit_hex_index [ base ] , i , k ) ;
42137: LD_ADDR_VAR 0 3
42141: PUSH
42142: LD_EXP 75
42146: PUSH
42147: LD_VAR 0 9
42151: ARRAY
42152: PPUSH
42153: LD_VAR 0 1
42157: PPUSH
42158: LD_VAR 0 2
42162: PPUSH
42163: CALL_OW 1
42167: ST_TO_ADDR
// ai_attacking_unit_hex_index = Replace ( ai_attacking_unit_hex_index , base , temp_list ) ;
42168: LD_ADDR_EXP 75
42172: PUSH
42173: LD_EXP 75
42177: PPUSH
42178: LD_VAR 0 9
42182: PPUSH
42183: LD_VAR 0 3
42187: PPUSH
42188: CALL_OW 1
42192: ST_TO_ADDR
// end ; end ; end ; end ;
42193: GO 41524
42195: POP
42196: POP
// until false ;
42197: LD_INT 0
42199: IFFALSE 41486
// end ;
42201: PPOPN 10
42203: END
// every 0 0$1 do var base , side , val , temp_value , temp_list ;
42204: GO 42206
42206: DISABLE
42207: LD_INT 0
42209: PPUSH
42210: PPUSH
42211: PPUSH
42212: PPUSH
42213: PPUSH
// begin repeat wait ( 1 ) ;
42214: LD_INT 1
42216: PPUSH
42217: CALL_OW 67
// for base in ai_bases do
42221: LD_ADDR_VAR 0 1
42225: PUSH
42226: LD_EXP 59
42230: PUSH
42231: FOR_IN
42232: IFFALSE 42694
// begin if base in [ 1 , 2 ] then
42234: LD_VAR 0 1
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: IN
42249: IFFALSE 42253
// continue ;
42251: GO 42231
// side = GetBaseSide ( base ) ;
42253: LD_ADDR_VAR 0 2
42257: PUSH
42258: LD_VAR 0 1
42262: PPUSH
42263: CALL 12403 0 1
42267: ST_TO_ADDR
// val = 1 ;
42268: LD_ADDR_VAR 0 3
42272: PUSH
42273: LD_INT 1
42275: ST_TO_ADDR
// while val <= ai_time_shift_hexes_underway [ base ] do
42276: LD_VAR 0 3
42280: PUSH
42281: LD_EXP 74
42285: PUSH
42286: LD_VAR 0 1
42290: ARRAY
42291: LESSEQUAL
42292: IFFALSE 42692
// begin if tick = ai_time_shift_hexes_underway [ base ] [ val ] [ 4 ] then
42294: LD_OWVAR 1
42298: PUSH
42299: LD_EXP 74
42303: PUSH
42304: LD_VAR 0 1
42308: ARRAY
42309: PUSH
42310: LD_VAR 0 3
42314: ARRAY
42315: PUSH
42316: LD_INT 4
42318: ARRAY
42319: EQUAL
42320: IFFALSE 42338
// begin val = val + 1 ;
42322: LD_ADDR_VAR 0 3
42326: PUSH
42327: LD_VAR 0 3
42331: PUSH
42332: LD_INT 1
42334: PLUS
42335: ST_TO_ADDR
// continue ;
42336: GO 42276
// end ; temp_value = false ;
42338: LD_ADDR_VAR 0 4
42342: PUSH
42343: LD_INT 0
42345: ST_TO_ADDR
// temp_list = GetTaskList ( ai_time_shift_hexes_underway [ base ] [ val ] [ 3 ] ) ;
42346: LD_ADDR_VAR 0 5
42350: PUSH
42351: LD_EXP 74
42355: PUSH
42356: LD_VAR 0 1
42360: ARRAY
42361: PUSH
42362: LD_VAR 0 3
42366: ARRAY
42367: PUSH
42368: LD_INT 3
42370: ARRAY
42371: PPUSH
42372: CALL_OW 437
42376: ST_TO_ADDR
// if IsOk ( ai_time_shift_hexes_underway [ base ] [ val ] [ 3 ] ) then
42377: LD_EXP 74
42381: PUSH
42382: LD_VAR 0 1
42386: ARRAY
42387: PUSH
42388: LD_VAR 0 3
42392: ARRAY
42393: PUSH
42394: LD_INT 3
42396: ARRAY
42397: PPUSH
42398: CALL_OW 302
42402: IFFALSE 42453
// begin if temp_list = 0 then
42404: LD_VAR 0 5
42408: PUSH
42409: LD_INT 0
42411: EQUAL
42412: IFFALSE 42424
// temp_value = true else
42414: LD_ADDR_VAR 0 4
42418: PUSH
42419: LD_INT 1
42421: ST_TO_ADDR
42422: GO 42451
// if not temp_list [ 1 ] [ 1 ] = & then
42424: LD_VAR 0 5
42428: PUSH
42429: LD_INT 1
42431: ARRAY
42432: PUSH
42433: LD_INT 1
42435: ARRAY
42436: PUSH
42437: LD_STRING &
42439: EQUAL
42440: NOT
42441: IFFALSE 42451
// temp_value = true ;
42443: LD_ADDR_VAR 0 4
42447: PUSH
42448: LD_INT 1
42450: ST_TO_ADDR
// end else
42451: GO 42506
// begin temp_list = Delete ( ai_time_shift_hexes_underway [ base ] , val ) ;
42453: LD_ADDR_VAR 0 5
42457: PUSH
42458: LD_EXP 74
42462: PUSH
42463: LD_VAR 0 1
42467: ARRAY
42468: PPUSH
42469: LD_VAR 0 3
42473: PPUSH
42474: CALL_OW 3
42478: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
42479: LD_ADDR_EXP 74
42483: PUSH
42484: LD_EXP 74
42488: PPUSH
42489: LD_VAR 0 1
42493: PPUSH
42494: LD_VAR 0 5
42498: PPUSH
42499: CALL_OW 1
42503: ST_TO_ADDR
// continue ;
42504: GO 42276
// end ; if temp_value then
42506: LD_VAR 0 4
42510: IFFALSE 42676
// begin temp_list = Insert ( ai_time_shift_hexes [ base ] , 1 , [ ai_time_shift_hexes_underway [ base ] [ val ] [ 1 ] , ai_time_shift_hexes_underway [ base ] [ val ] [ 2 ] , ai_time_shift_data [ side ] [ 1 ] ] ) ;
42512: LD_ADDR_VAR 0 5
42516: PUSH
42517: LD_EXP 73
42521: PUSH
42522: LD_VAR 0 1
42526: ARRAY
42527: PPUSH
42528: LD_INT 1
42530: PPUSH
42531: LD_EXP 74
42535: PUSH
42536: LD_VAR 0 1
42540: ARRAY
42541: PUSH
42542: LD_VAR 0 3
42546: ARRAY
42547: PUSH
42548: LD_INT 1
42550: ARRAY
42551: PUSH
42552: LD_EXP 74
42556: PUSH
42557: LD_VAR 0 1
42561: ARRAY
42562: PUSH
42563: LD_VAR 0 3
42567: ARRAY
42568: PUSH
42569: LD_INT 2
42571: ARRAY
42572: PUSH
42573: LD_EXP 72
42577: PUSH
42578: LD_VAR 0 2
42582: ARRAY
42583: PUSH
42584: LD_INT 1
42586: ARRAY
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: PPUSH
42593: CALL_OW 2
42597: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
42598: LD_ADDR_EXP 73
42602: PUSH
42603: LD_EXP 73
42607: PPUSH
42608: LD_VAR 0 1
42612: PPUSH
42613: LD_VAR 0 5
42617: PPUSH
42618: CALL_OW 1
42622: ST_TO_ADDR
// temp_list = Delete ( ai_time_shift_hexes_underway [ base ] , val ) ;
42623: LD_ADDR_VAR 0 5
42627: PUSH
42628: LD_EXP 74
42632: PUSH
42633: LD_VAR 0 1
42637: ARRAY
42638: PPUSH
42639: LD_VAR 0 3
42643: PPUSH
42644: CALL_OW 3
42648: ST_TO_ADDR
// ai_time_shift_hexes_underway = Replace ( ai_time_shift_hexes_underway , base , temp_list ) ;
42649: LD_ADDR_EXP 74
42653: PUSH
42654: LD_EXP 74
42658: PPUSH
42659: LD_VAR 0 1
42663: PPUSH
42664: LD_VAR 0 5
42668: PPUSH
42669: CALL_OW 1
42673: ST_TO_ADDR
// continue ;
42674: GO 42276
// end ; val = val + 1 ;
42676: LD_ADDR_VAR 0 3
42680: PUSH
42681: LD_VAR 0 3
42685: PUSH
42686: LD_INT 1
42688: PLUS
42689: ST_TO_ADDR
// end ;
42690: GO 42276
// end ;
42692: GO 42231
42694: POP
42695: POP
// until false ;
42696: LD_INT 0
42698: IFFALSE 42214
// end ;
42700: PPOPN 5
42702: END
// every 0 0$1 + 0 0$0.3 do var base , val , temp_list , time ;
42703: GO 42705
42705: DISABLE
42706: LD_INT 0
42708: PPUSH
42709: PPUSH
42710: PPUSH
42711: PPUSH
// begin repeat wait ( 0 0$1 ) ;
42712: LD_INT 35
42714: PPUSH
42715: CALL_OW 67
// for base in ai_bases do
42719: LD_ADDR_VAR 0 1
42723: PUSH
42724: LD_EXP 59
42728: PUSH
42729: FOR_IN
42730: IFFALSE 42981
// begin if base in [ 1 , 2 ] then
42732: LD_VAR 0 1
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: IN
42747: IFFALSE 42751
// continue ;
42749: GO 42729
// val = 1 ;
42751: LD_ADDR_VAR 0 2
42755: PUSH
42756: LD_INT 1
42758: ST_TO_ADDR
// while val <= ai_time_shift_hexes [ base ] do
42759: LD_VAR 0 2
42763: PUSH
42764: LD_EXP 73
42768: PUSH
42769: LD_VAR 0 1
42773: ARRAY
42774: LESSEQUAL
42775: IFFALSE 42979
// begin time = ai_time_shift_hexes [ base ] [ val ] [ 3 ] - 0 0$1 ;
42777: LD_ADDR_VAR 0 4
42781: PUSH
42782: LD_EXP 73
42786: PUSH
42787: LD_VAR 0 1
42791: ARRAY
42792: PUSH
42793: LD_VAR 0 2
42797: ARRAY
42798: PUSH
42799: LD_INT 3
42801: ARRAY
42802: PUSH
42803: LD_INT 35
42805: MINUS
42806: ST_TO_ADDR
// if time <= 0 0$0 then
42807: LD_VAR 0 4
42811: PUSH
42812: LD_INT 0
42814: LESSEQUAL
42815: IFFALSE 42872
// begin temp_list = Delete ( ai_time_shift_hexes [ base ] , val ) ;
42817: LD_ADDR_VAR 0 3
42821: PUSH
42822: LD_EXP 73
42826: PUSH
42827: LD_VAR 0 1
42831: ARRAY
42832: PPUSH
42833: LD_VAR 0 2
42837: PPUSH
42838: CALL_OW 3
42842: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
42843: LD_ADDR_EXP 73
42847: PUSH
42848: LD_EXP 73
42852: PPUSH
42853: LD_VAR 0 1
42857: PPUSH
42858: LD_VAR 0 3
42862: PPUSH
42863: CALL_OW 1
42867: ST_TO_ADDR
// continue ;
42868: GO 42759
// end else
42870: GO 42963
// begin temp_list = Replace ( ai_time_shift_hexes [ base ] [ val ] , 3 , time ) ;
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_EXP 73
42881: PUSH
42882: LD_VAR 0 1
42886: ARRAY
42887: PUSH
42888: LD_VAR 0 2
42892: ARRAY
42893: PPUSH
42894: LD_INT 3
42896: PPUSH
42897: LD_VAR 0 4
42901: PPUSH
42902: CALL_OW 1
42906: ST_TO_ADDR
// temp_list = Replace ( ai_time_shift_hexes [ base ] , val , temp_list ) ;
42907: LD_ADDR_VAR 0 3
42911: PUSH
42912: LD_EXP 73
42916: PUSH
42917: LD_VAR 0 1
42921: ARRAY
42922: PPUSH
42923: LD_VAR 0 2
42927: PPUSH
42928: LD_VAR 0 3
42932: PPUSH
42933: CALL_OW 1
42937: ST_TO_ADDR
// ai_time_shift_hexes = Replace ( ai_time_shift_hexes , base , temp_list ) ;
42938: LD_ADDR_EXP 73
42942: PUSH
42943: LD_EXP 73
42947: PPUSH
42948: LD_VAR 0 1
42952: PPUSH
42953: LD_VAR 0 3
42957: PPUSH
42958: CALL_OW 1
42962: ST_TO_ADDR
// end ; val = val + 1 ;
42963: LD_ADDR_VAR 0 2
42967: PUSH
42968: LD_VAR 0 2
42972: PUSH
42973: LD_INT 1
42975: PLUS
42976: ST_TO_ADDR
// end ;
42977: GO 42759
// end ;
42979: GO 42729
42981: POP
42982: POP
// until false ;
42983: LD_INT 0
42985: IFFALSE 42712
// end ;
42987: PPOPN 4
42989: END
// every 0 0$5 do var base , i ;
42990: GO 42992
42992: DISABLE
42993: LD_INT 0
42995: PPUSH
42996: PPUSH
// begin for base in ai_bases do
42997: LD_ADDR_VAR 0 1
43001: PUSH
43002: LD_EXP 59
43006: PUSH
43007: FOR_IN
43008: IFFALSE 43105
// for i in ( ai_vehicles_attack [ base ] ^ ai_vehicles_defend [ base ] ^ ai_cargo_bay [ base ] ) diff 0 do
43010: LD_ADDR_VAR 0 2
43014: PUSH
43015: LD_EXP 41
43019: PUSH
43020: LD_VAR 0 1
43024: ARRAY
43025: PUSH
43026: LD_EXP 40
43030: PUSH
43031: LD_VAR 0 1
43035: ARRAY
43036: ADD
43037: PUSH
43038: LD_EXP 61
43042: PUSH
43043: LD_VAR 0 1
43047: ARRAY
43048: ADD
43049: PUSH
43050: LD_INT 0
43052: DIFF
43053: PUSH
43054: FOR_IN
43055: IFFALSE 43101
// if GetFuel ( i ) < 10 and GetEngine ( i ) = engine_combustion then
43057: LD_VAR 0 2
43061: PPUSH
43062: CALL_OW 261
43066: PUSH
43067: LD_INT 10
43069: LESS
43070: PUSH
43071: LD_VAR 0 2
43075: PPUSH
43076: CALL_OW 262
43080: PUSH
43081: LD_INT 1
43083: EQUAL
43084: AND
43085: IFFALSE 43099
// SetFuel ( i , 10 ) ;
43087: LD_VAR 0 2
43091: PPUSH
43092: LD_INT 10
43094: PPUSH
43095: CALL_OW 240
43099: GO 43054
43101: POP
43102: POP
43103: GO 43007
43105: POP
43106: POP
// enable ;
43107: ENABLE
// end ;
43108: PPOPN 2
43110: END
// every 0 0$1 do var side , i , scientists_list , temp_list , temp_unit , base , k , temp_list_3 , free_spaces , area ;
43111: GO 43113
43113: DISABLE
43114: LD_INT 0
43116: PPUSH
43117: PPUSH
43118: PPUSH
43119: PPUSH
43120: PPUSH
43121: PPUSH
43122: PPUSH
43123: PPUSH
43124: PPUSH
43125: PPUSH
// begin for base in ai_bases do
43126: LD_ADDR_VAR 0 6
43130: PUSH
43131: LD_EXP 59
43135: PUSH
43136: FOR_IN
43137: IFFALSE 43832
// begin side = GetBaseSide ( base ) ;
43139: LD_ADDR_VAR 0 1
43143: PUSH
43144: LD_VAR 0 6
43148: PPUSH
43149: CALL 12403 0 1
43153: ST_TO_ADDR
// scientists_list = ai_scientists [ base ] diff ai_heal_these_humans [ base ] ;
43154: LD_ADDR_VAR 0 3
43158: PUSH
43159: LD_EXP 33
43163: PUSH
43164: LD_VAR 0 6
43168: ARRAY
43169: PUSH
43170: LD_EXP 44
43174: PUSH
43175: LD_VAR 0 6
43179: ARRAY
43180: DIFF
43181: ST_TO_ADDR
// temp_list = ai_heal_these_humans [ base ] ;
43182: LD_ADDR_VAR 0 4
43186: PUSH
43187: LD_EXP 44
43191: PUSH
43192: LD_VAR 0 6
43196: ARRAY
43197: ST_TO_ADDR
// i = 1 ;
43198: LD_ADDR_VAR 0 2
43202: PUSH
43203: LD_INT 1
43205: ST_TO_ADDR
// while i <= scientists_list do
43206: LD_VAR 0 2
43210: PUSH
43211: LD_VAR 0 3
43215: LESSEQUAL
43216: IFFALSE 43311
// begin if GetLives ( scientists_list [ i ] ) <= 700 then
43218: LD_VAR 0 3
43222: PUSH
43223: LD_VAR 0 2
43227: ARRAY
43228: PPUSH
43229: CALL_OW 256
43233: PUSH
43234: LD_INT 700
43236: LESSEQUAL
43237: IFFALSE 43295
// begin temp_list = temp_list ^ scientists_list [ i ] ;
43239: LD_ADDR_VAR 0 4
43243: PUSH
43244: LD_VAR 0 4
43248: PUSH
43249: LD_VAR 0 3
43253: PUSH
43254: LD_VAR 0 2
43258: ARRAY
43259: ADD
43260: ST_TO_ADDR
// scientists_list = Delete ( scientists_list , i ) ;
43261: LD_ADDR_VAR 0 3
43265: PUSH
43266: LD_VAR 0 3
43270: PPUSH
43271: LD_VAR 0 2
43275: PPUSH
43276: CALL_OW 3
43280: ST_TO_ADDR
// i = i - 1 ;
43281: LD_ADDR_VAR 0 2
43285: PUSH
43286: LD_VAR 0 2
43290: PUSH
43291: LD_INT 1
43293: MINUS
43294: ST_TO_ADDR
// end ; i = i + 1 ;
43295: LD_ADDR_VAR 0 2
43299: PUSH
43300: LD_VAR 0 2
43304: PUSH
43305: LD_INT 1
43307: PLUS
43308: ST_TO_ADDR
// end ;
43309: GO 43206
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
43311: LD_ADDR_EXP 44
43315: PUSH
43316: LD_EXP 44
43320: PPUSH
43321: LD_VAR 0 6
43325: PPUSH
43326: LD_VAR 0 4
43330: PPUSH
43331: CALL_OW 1
43335: ST_TO_ADDR
// temp_list = [ ] ;
43336: LD_ADDR_VAR 0 4
43340: PUSH
43341: EMPTY
43342: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
43343: LD_ADDR_VAR 0 2
43347: PUSH
43348: LD_EXP 44
43352: PUSH
43353: LD_VAR 0 6
43357: ARRAY
43358: PUSH
43359: FOR_IN
43360: IFFALSE 43410
// if GetLives ( i ) < 1000 and IsInUnit ( i ) = 0 then
43362: LD_VAR 0 2
43366: PPUSH
43367: CALL_OW 256
43371: PUSH
43372: LD_INT 1000
43374: LESS
43375: PUSH
43376: LD_VAR 0 2
43380: PPUSH
43381: CALL_OW 310
43385: PUSH
43386: LD_INT 0
43388: EQUAL
43389: AND
43390: IFFALSE 43408
// temp_list = temp_list ^ i ;
43392: LD_ADDR_VAR 0 4
43396: PUSH
43397: LD_VAR 0 4
43401: PUSH
43402: LD_VAR 0 2
43406: ADD
43407: ST_TO_ADDR
43408: GO 43359
43410: POP
43411: POP
// ai_heal_these_humans = Replace ( ai_heal_these_humans , base , temp_list ) ;
43412: LD_ADDR_EXP 44
43416: PUSH
43417: LD_EXP 44
43421: PPUSH
43422: LD_VAR 0 6
43426: PPUSH
43427: LD_VAR 0 4
43431: PPUSH
43432: CALL_OW 1
43436: ST_TO_ADDR
// for i in ai_heal_these_humans [ base ] do
43437: LD_ADDR_VAR 0 2
43441: PUSH
43442: LD_EXP 44
43446: PUSH
43447: LD_VAR 0 6
43451: ARRAY
43452: PUSH
43453: FOR_IN
43454: IFFALSE 43542
// if GetDistUnitXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) > 4 then
43456: LD_VAR 0 2
43460: PPUSH
43461: LD_EXP 42
43465: PUSH
43466: LD_VAR 0 6
43470: ARRAY
43471: PUSH
43472: LD_INT 1
43474: ARRAY
43475: PPUSH
43476: LD_EXP 42
43480: PUSH
43481: LD_VAR 0 6
43485: ARRAY
43486: PUSH
43487: LD_INT 2
43489: ARRAY
43490: PPUSH
43491: CALL_OW 297
43495: PUSH
43496: LD_INT 4
43498: GREATER
43499: IFFALSE 43540
// ComMoveXY ( i , ai_human_pullback_hex [ base ] [ 1 ] , ai_human_pullback_hex [ base ] [ 2 ] ) ;
43501: LD_VAR 0 2
43505: PPUSH
43506: LD_EXP 42
43510: PUSH
43511: LD_VAR 0 6
43515: ARRAY
43516: PUSH
43517: LD_INT 1
43519: ARRAY
43520: PPUSH
43521: LD_EXP 42
43525: PUSH
43526: LD_VAR 0 6
43530: ARRAY
43531: PUSH
43532: LD_INT 2
43534: ARRAY
43535: PPUSH
43536: CALL_OW 111
43540: GO 43453
43542: POP
43543: POP
// if scientists_list = 0 then
43544: LD_VAR 0 3
43548: PUSH
43549: LD_INT 0
43551: EQUAL
43552: IFFALSE 43556
// continue ;
43554: GO 43136
// if ai_heal_these_humans [ base ] > 0 then
43556: LD_EXP 44
43560: PUSH
43561: LD_VAR 0 6
43565: ARRAY
43566: PUSH
43567: LD_INT 0
43569: GREATER
43570: IFFALSE 43765
// begin area = GetBaseArea ( base ) ;
43572: LD_ADDR_VAR 0 10
43576: PUSH
43577: LD_VAR 0 6
43581: PPUSH
43582: CALL 12332 0 1
43586: ST_TO_ADDR
// temp_list = UnitFilter ( ai_heal_these_humans [ base ] , [ f_inarea , area ] ) ;
43587: LD_ADDR_VAR 0 4
43591: PUSH
43592: LD_EXP 44
43596: PUSH
43597: LD_VAR 0 6
43601: ARRAY
43602: PPUSH
43603: LD_INT 95
43605: PUSH
43606: LD_VAR 0 10
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PPUSH
43615: CALL_OW 72
43619: ST_TO_ADDR
// if temp_list > 0 then
43620: LD_VAR 0 4
43624: PUSH
43625: LD_INT 0
43627: GREATER
43628: IFFALSE 43765
// begin scientists_list = GetHumansOutOfUnits ( scientists_list ) ;
43630: LD_ADDR_VAR 0 3
43634: PUSH
43635: LD_VAR 0 3
43639: PPUSH
43640: CALL 23218 0 1
43644: ST_TO_ADDR
// repeat i = 1 ;
43645: LD_ADDR_VAR 0 2
43649: PUSH
43650: LD_INT 1
43652: ST_TO_ADDR
// while i <= temp_list do
43653: LD_VAR 0 2
43657: PUSH
43658: LD_VAR 0 4
43662: LESSEQUAL
43663: IFFALSE 43755
// begin if scientists_list = 0 then
43665: LD_VAR 0 3
43669: PUSH
43670: LD_INT 0
43672: EQUAL
43673: IFFALSE 43677
// break ;
43675: GO 43755
// temp_unit = NearestUnitToUnit ( scientists_list , temp_list [ i ] ) ;
43677: LD_ADDR_VAR 0 5
43681: PUSH
43682: LD_VAR 0 3
43686: PPUSH
43687: LD_VAR 0 4
43691: PUSH
43692: LD_VAR 0 2
43696: ARRAY
43697: PPUSH
43698: CALL_OW 74
43702: ST_TO_ADDR
// ComHeal ( temp_unit , temp_list [ i ] ) ;
43703: LD_VAR 0 5
43707: PPUSH
43708: LD_VAR 0 4
43712: PUSH
43713: LD_VAR 0 2
43717: ARRAY
43718: PPUSH
43719: CALL_OW 128
// scientists_list = scientists_list diff temp_unit ;
43723: LD_ADDR_VAR 0 3
43727: PUSH
43728: LD_VAR 0 3
43732: PUSH
43733: LD_VAR 0 5
43737: DIFF
43738: ST_TO_ADDR
// i = i + 1 ;
43739: LD_ADDR_VAR 0 2
43743: PUSH
43744: LD_VAR 0 2
43748: PUSH
43749: LD_INT 1
43751: PLUS
43752: ST_TO_ADDR
// end ;
43753: GO 43653
// until scientists_list = 0 ;
43755: LD_VAR 0 3
43759: PUSH
43760: LD_INT 0
43762: EQUAL
43763: IFFALSE 43645
// end ; end ; DistributeHumansToBuildings ( base , scientists_list , UnitFilter ( ai_labs [ base ] , [ [ f_ok ] , [ f_not , [ f_constructed ] ] ] ) , class_scientistic , 6 , true , false ) ;
43765: LD_VAR 0 6
43769: PPUSH
43770: LD_VAR 0 3
43774: PPUSH
43775: LD_EXP 36
43779: PUSH
43780: LD_VAR 0 6
43784: ARRAY
43785: PPUSH
43786: LD_INT 50
43788: PUSH
43789: EMPTY
43790: LIST
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: LD_INT 57
43797: PUSH
43798: EMPTY
43799: LIST
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PPUSH
43809: CALL_OW 72
43813: PPUSH
43814: LD_INT 4
43816: PPUSH
43817: LD_INT 6
43819: PPUSH
43820: LD_INT 1
43822: PPUSH
43823: LD_INT 0
43825: PPUSH
43826: CALL 15289 0 7
// end ;
43830: GO 43136
43832: POP
43833: POP
// enable ;
43834: ENABLE
// end ; end_of_file
43835: PPOPN 10
43837: END
// export function GetApes ( side ) ; begin
43838: LD_INT 0
43840: PPUSH
// result = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ;
43841: LD_ADDR_VAR 0 2
43845: PUSH
43846: LD_INT 22
43848: PUSH
43849: LD_VAR 0 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: LD_INT 25
43863: PUSH
43864: LD_INT 12
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 25
43873: PUSH
43874: LD_INT 15
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 25
43883: PUSH
43884: LD_INT 16
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 25
43893: PUSH
43894: LD_INT 17
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PPUSH
43912: CALL_OW 69
43916: ST_TO_ADDR
// end ;
43917: LD_VAR 0 2
43921: RET
// on ResearchComplete ( tech , lab ) do var temp_list , temp_unit , i , un_list ;
43922: LD_INT 0
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
// begin if GetSide ( lab ) = you then
43928: LD_VAR 0 2
43932: PPUSH
43933: CALL_OW 255
43937: PUSH
43938: LD_EXP 3
43942: EQUAL
43943: IFFALSE 44960
// begin SetTech ( tech , you_alt , state_researched ) ;
43945: LD_VAR 0 1
43949: PPUSH
43950: LD_EXP 6
43954: PPUSH
43955: LD_INT 2
43957: PPUSH
43958: CALL_OW 322
// if tech = tech_HidCam then
43962: LD_VAR 0 1
43966: PUSH
43967: LD_INT 17
43969: EQUAL
43970: IFFALSE 44960
// begin un_list = [ Sonya , MarkB , Aviradze ] diff 0 ;
43972: LD_ADDR_VAR 0 6
43976: PUSH
43977: LD_EXP 11
43981: PUSH
43982: LD_EXP 20
43986: PUSH
43987: LD_EXP 21
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: DIFF
44000: ST_TO_ADDR
// temp_list = [ ] ;
44001: LD_ADDR_VAR 0 3
44005: PUSH
44006: EMPTY
44007: ST_TO_ADDR
// for i in un_list do
44008: LD_ADDR_VAR 0 5
44012: PUSH
44013: LD_VAR 0 6
44017: PUSH
44018: FOR_IN
44019: IFFALSE 44056
// if IsInUnit ( i ) = lab then
44021: LD_VAR 0 5
44025: PPUSH
44026: CALL_OW 310
44030: PUSH
44031: LD_VAR 0 2
44035: EQUAL
44036: IFFALSE 44054
// temp_list = temp_list ^ i ;
44038: LD_ADDR_VAR 0 3
44042: PUSH
44043: LD_VAR 0 3
44047: PUSH
44048: LD_VAR 0 5
44052: ADD
44053: ST_TO_ADDR
44054: GO 44018
44056: POP
44057: POP
// if temp_list = 0 then
44058: LD_VAR 0 3
44062: PUSH
44063: LD_INT 0
44065: EQUAL
44066: IFFALSE 44175
// begin temp_list = UnitsInside ( lab ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
44068: LD_ADDR_VAR 0 3
44072: PUSH
44073: LD_VAR 0 2
44077: PPUSH
44078: CALL_OW 313
44082: PUSH
44083: LD_EXP 3
44087: PPUSH
44088: CALL 43838 0 1
44092: PUSH
44093: LD_EXP 10
44097: PUSH
44098: LD_EXP 11
44102: PUSH
44103: LD_EXP 12
44107: PUSH
44108: LD_EXP 13
44112: PUSH
44113: LD_EXP 14
44117: PUSH
44118: LD_EXP 15
44122: PUSH
44123: LD_EXP 16
44127: PUSH
44128: LD_EXP 17
44132: PUSH
44133: LD_EXP 18
44137: PUSH
44138: LD_EXP 19
44142: PUSH
44143: LD_EXP 20
44147: PUSH
44148: LD_EXP 21
44152: PUSH
44153: LD_EXP 22
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: ADD
44173: DIFF
44174: ST_TO_ADDR
// end ; if temp_list = 0 then
44175: LD_VAR 0 3
44179: PUSH
44180: LD_INT 0
44182: EQUAL
44183: IFFALSE 44210
// begin temp_list = UnitFilter ( un_list , [ f_class , class_scientistic ] ) ;
44185: LD_ADDR_VAR 0 3
44189: PUSH
44190: LD_VAR 0 6
44194: PPUSH
44195: LD_INT 25
44197: PUSH
44198: LD_INT 4
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PPUSH
44205: CALL_OW 72
44209: ST_TO_ADDR
// end ; if temp_list = 0 then
44210: LD_VAR 0 3
44214: PUSH
44215: LD_INT 0
44217: EQUAL
44218: IFFALSE 44337
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_class , class_scientistic ] ] ) diff [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ;
44220: LD_ADDR_VAR 0 3
44224: PUSH
44225: LD_INT 22
44227: PUSH
44228: LD_EXP 3
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 25
44239: PUSH
44240: LD_INT 4
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PPUSH
44251: CALL_OW 69
44255: PUSH
44256: LD_EXP 10
44260: PUSH
44261: LD_EXP 11
44265: PUSH
44266: LD_EXP 12
44270: PUSH
44271: LD_EXP 13
44275: PUSH
44276: LD_EXP 14
44280: PUSH
44281: LD_EXP 15
44285: PUSH
44286: LD_EXP 16
44290: PUSH
44291: LD_EXP 17
44295: PUSH
44296: LD_EXP 18
44300: PUSH
44301: LD_EXP 19
44305: PUSH
44306: LD_EXP 20
44310: PUSH
44311: LD_EXP 21
44315: PUSH
44316: LD_EXP 22
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: DIFF
44336: ST_TO_ADDR
// end ; if temp_list = 0 then
44337: LD_VAR 0 3
44341: PUSH
44342: LD_INT 0
44344: EQUAL
44345: IFFALSE 44475
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
44347: LD_ADDR_VAR 0 3
44351: PUSH
44352: LD_INT 22
44354: PUSH
44355: LD_EXP 3
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 21
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PPUSH
44378: CALL_OW 69
44382: PUSH
44383: LD_EXP 3
44387: PPUSH
44388: CALL 43838 0 1
44392: PUSH
44393: LD_EXP 10
44397: PUSH
44398: LD_EXP 11
44402: PUSH
44403: LD_EXP 12
44407: PUSH
44408: LD_EXP 13
44412: PUSH
44413: LD_EXP 14
44417: PUSH
44418: LD_EXP 15
44422: PUSH
44423: LD_EXP 16
44427: PUSH
44428: LD_EXP 17
44432: PUSH
44433: LD_EXP 18
44437: PUSH
44438: LD_EXP 19
44442: PUSH
44443: LD_EXP 20
44447: PUSH
44448: LD_EXP 21
44452: PUSH
44453: LD_EXP 22
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: ADD
44473: DIFF
44474: ST_TO_ADDR
// end ; if temp_list > 0 then
44475: LD_VAR 0 3
44479: PUSH
44480: LD_INT 0
44482: GREATER
44483: IFFALSE 44869
// begin DialogueOn ;
44485: CALL_OW 6
// temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
44489: LD_ADDR_VAR 0 4
44493: PUSH
44494: LD_VAR 0 3
44498: PUSH
44499: LD_INT 1
44501: PPUSH
44502: LD_VAR 0 3
44506: PPUSH
44507: CALL_OW 12
44511: ARRAY
44512: ST_TO_ADDR
// case temp_unit of Sonya :
44513: LD_VAR 0 4
44517: PUSH
44518: LD_EXP 11
44522: DOUBLE
44523: EQUAL
44524: IFTRUE 44528
44526: GO 44543
44528: POP
// Say ( temp_unit , D7-So-1 ) ; MarkB :
44529: LD_VAR 0 4
44533: PPUSH
44534: LD_STRING D7-So-1
44536: PPUSH
44537: CALL_OW 88
44541: GO 44731
44543: LD_EXP 20
44547: DOUBLE
44548: EQUAL
44549: IFTRUE 44553
44551: GO 44592
44553: POP
// begin Say ( temp_unit , D7-Ma-1 ) ;
44554: LD_VAR 0 4
44558: PPUSH
44559: LD_STRING D7-Ma-1
44561: PPUSH
44562: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44566: LD_EXP 10
44570: PPUSH
44571: LD_STRING D7-H-1
44573: PPUSH
44574: CALL_OW 88
// Say ( temp_unit , D7-Ma-2 ) ;
44578: LD_VAR 0 4
44582: PPUSH
44583: LD_STRING D7-Ma-2
44585: PPUSH
44586: CALL_OW 88
// end ; Aviradze :
44590: GO 44731
44592: LD_EXP 21
44596: DOUBLE
44597: EQUAL
44598: IFTRUE 44602
44600: GO 44641
44602: POP
// begin Say ( temp_unit , D7-Av-1 ) ;
44603: LD_VAR 0 4
44607: PPUSH
44608: LD_STRING D7-Av-1
44610: PPUSH
44611: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44615: LD_EXP 10
44619: PPUSH
44620: LD_STRING D7-H-1
44622: PPUSH
44623: CALL_OW 88
// Say ( temp_unit , D7-Av-2 ) ;
44627: LD_VAR 0 4
44631: PPUSH
44632: LD_STRING D7-Av-2
44634: PPUSH
44635: CALL_OW 88
// end ; else
44639: GO 44731
44641: POP
// if GetSex ( temp_unit ) = sex_male then
44642: LD_VAR 0 4
44646: PPUSH
44647: CALL_OW 258
44651: PUSH
44652: LD_INT 1
44654: EQUAL
44655: IFFALSE 44695
// begin Say ( temp_unit , D7-SciM-1 ) ;
44657: LD_VAR 0 4
44661: PPUSH
44662: LD_STRING D7-SciM-1
44664: PPUSH
44665: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44669: LD_EXP 10
44673: PPUSH
44674: LD_STRING D7-H-1
44676: PPUSH
44677: CALL_OW 88
// Say ( temp_unit , D7-SciM-2 ) ;
44681: LD_VAR 0 4
44685: PPUSH
44686: LD_STRING D7-SciM-2
44688: PPUSH
44689: CALL_OW 88
// end else
44693: GO 44731
// begin Say ( temp_unit , D7-SciF-1 ) ;
44695: LD_VAR 0 4
44699: PPUSH
44700: LD_STRING D7-SciF-1
44702: PPUSH
44703: CALL_OW 88
// Say ( Heike , D7-H-1 ) ;
44707: LD_EXP 10
44711: PPUSH
44712: LD_STRING D7-H-1
44714: PPUSH
44715: CALL_OW 88
// Say ( temp_unit , D7-SciF-2 ) ;
44719: LD_VAR 0 4
44723: PPUSH
44724: LD_STRING D7-SciF-2
44726: PPUSH
44727: CALL_OW 88
// end ; end ; Say ( Heike , D7-H-2 ) ;
44731: LD_EXP 10
44735: PPUSH
44736: LD_STRING D7-H-2
44738: PPUSH
44739: CALL_OW 88
// case temp_unit of Sonya :
44743: LD_VAR 0 4
44747: PUSH
44748: LD_EXP 11
44752: DOUBLE
44753: EQUAL
44754: IFTRUE 44758
44756: GO 44773
44758: POP
// Say ( temp_unit , D7-So-2 ) ; MarkB :
44759: LD_VAR 0 4
44763: PPUSH
44764: LD_STRING D7-So-2
44766: PPUSH
44767: CALL_OW 88
44771: GO 44865
44773: LD_EXP 20
44777: DOUBLE
44778: EQUAL
44779: IFTRUE 44783
44781: GO 44798
44783: POP
// Say ( temp_unit , D7-Ma-3 ) ; Aviradze :
44784: LD_VAR 0 4
44788: PPUSH
44789: LD_STRING D7-Ma-3
44791: PPUSH
44792: CALL_OW 88
44796: GO 44865
44798: LD_EXP 21
44802: DOUBLE
44803: EQUAL
44804: IFTRUE 44808
44806: GO 44823
44808: POP
// Say ( temp_unit , D7-Av-3 ) ; else
44809: LD_VAR 0 4
44813: PPUSH
44814: LD_STRING D7-Av-3
44816: PPUSH
44817: CALL_OW 88
44821: GO 44865
44823: POP
// if GetSex ( temp_unit ) = sex_male then
44824: LD_VAR 0 4
44828: PPUSH
44829: CALL_OW 258
44833: PUSH
44834: LD_INT 1
44836: EQUAL
44837: IFFALSE 44853
// Say ( temp_unit , D7-SciM-3 ) else
44839: LD_VAR 0 4
44843: PPUSH
44844: LD_STRING D7-SciM-3
44846: PPUSH
44847: CALL_OW 88
44851: GO 44865
// Say ( temp_unit , D7-SciF-3 ) ; end ;
44853: LD_VAR 0 4
44857: PPUSH
44858: LD_STRING D7-SciF-3
44860: PPUSH
44861: CALL_OW 88
// DialogueOff ;
44865: CALL_OW 7
// end ; Wait ( 0 0$0.2 ) ;
44869: LD_INT 7
44871: PPUSH
44872: CALL_OW 67
// ChangeMissionObjectives ( MAddCameras ) ;
44876: LD_STRING MAddCameras
44878: PPUSH
44879: CALL_OW 337
// wait ( 0 0$0.2 ) ;
44883: LD_INT 7
44885: PPUSH
44886: CALL_OW 67
// SetAreaMapShow ( camera_area_2 , 1 ) ;
44890: LD_INT 15
44892: PPUSH
44893: LD_INT 1
44895: PPUSH
44896: CALL_OW 424
// SetAreaMapShow ( camera_area_3 , 1 ) ;
44900: LD_INT 16
44902: PPUSH
44903: LD_INT 1
44905: PPUSH
44906: CALL_OW 424
// SetAreaMapShow ( camera_area_4 , 1 ) ;
44910: LD_INT 17
44912: PPUSH
44913: LD_INT 1
44915: PPUSH
44916: CALL_OW 424
// SetAreaMapShow ( camera_area_5 , 1 ) ;
44920: LD_INT 18
44922: PPUSH
44923: LD_INT 1
44925: PPUSH
44926: CALL_OW 424
// SetAreaMapShow ( camera_area_6 , 1 ) ;
44930: LD_INT 20
44932: PPUSH
44933: LD_INT 1
44935: PPUSH
44936: CALL_OW 424
// SetAreaMapShow ( camera_area_7 , 1 ) ;
44940: LD_INT 21
44942: PPUSH
44943: LD_INT 1
44945: PPUSH
44946: CALL_OW 424
// SetAreaMapShow ( camera_area_8 , 1 ) ;
44950: LD_INT 22
44952: PPUSH
44953: LD_INT 1
44955: PPUSH
44956: CALL_OW 424
// end ; end ; end ;
44960: PPOPN 6
44962: END
// export function CheckCamerasOnCommand ( comm ) ; var i , task_list , x , y , k , temp_list ; begin
44963: LD_INT 0
44965: PPUSH
44966: PPUSH
44967: PPUSH
44968: PPUSH
44969: PPUSH
44970: PPUSH
44971: PPUSH
// if cameras_placed then
44972: LD_EXP 92
44976: IFFALSE 44980
// exit ;
44978: GO 45273
// case comm of 103 :
44980: LD_VAR 0 1
44984: PUSH
44985: LD_INT 103
44987: DOUBLE
44988: EQUAL
44989: IFTRUE 44993
44991: GO 45272
44993: POP
// begin for i in FilterAllUnits ( [ [ f_side , you ] , [ f_class , class_engineer ] ] ) do
44994: LD_ADDR_VAR 0 3
44998: PUSH
44999: LD_INT 22
45001: PUSH
45002: LD_EXP 3
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 25
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PPUSH
45025: CALL_OW 69
45029: PUSH
45030: FOR_IN
45031: IFFALSE 45268
// if IsSelected ( i ) then
45033: LD_VAR 0 3
45037: PPUSH
45038: CALL_OW 306
45042: IFFALSE 45266
// begin task_list = GetTaskList ( i ) ;
45044: LD_ADDR_VAR 0 4
45048: PUSH
45049: LD_VAR 0 3
45053: PPUSH
45054: CALL_OW 437
45058: ST_TO_ADDR
// if task_list > 0 then
45059: LD_VAR 0 4
45063: PUSH
45064: LD_INT 0
45066: GREATER
45067: IFFALSE 45266
// begin x = task_list [ task_list + 0 ] [ 2 ] ;
45069: LD_ADDR_VAR 0 5
45073: PUSH
45074: LD_VAR 0 4
45078: PUSH
45079: LD_VAR 0 4
45083: PUSH
45084: LD_INT 0
45086: PLUS
45087: ARRAY
45088: PUSH
45089: LD_INT 2
45091: ARRAY
45092: ST_TO_ADDR
// y = task_list [ task_list + 0 ] [ 3 ] ;
45093: LD_ADDR_VAR 0 6
45097: PUSH
45098: LD_VAR 0 4
45102: PUSH
45103: LD_VAR 0 4
45107: PUSH
45108: LD_INT 0
45110: PLUS
45111: ARRAY
45112: PUSH
45113: LD_INT 3
45115: ARRAY
45116: ST_TO_ADDR
// if InArea ( x , y , camera_area_2 ) or InArea ( x , y , camera_area_3 ) or InArea ( x , y , camera_area_4 ) or InArea ( x , y , camera_area_5 ) or InArea ( x , y , camera_area_6 ) or InArea ( x , y , camera_area_7 ) or InArea ( x , y , camera_area_8 ) then
45117: LD_VAR 0 5
45121: PPUSH
45122: LD_VAR 0 6
45126: PPUSH
45127: LD_INT 15
45129: PPUSH
45130: CALL_OW 309
45134: PUSH
45135: LD_VAR 0 5
45139: PPUSH
45140: LD_VAR 0 6
45144: PPUSH
45145: LD_INT 16
45147: PPUSH
45148: CALL_OW 309
45152: OR
45153: PUSH
45154: LD_VAR 0 5
45158: PPUSH
45159: LD_VAR 0 6
45163: PPUSH
45164: LD_INT 17
45166: PPUSH
45167: CALL_OW 309
45171: OR
45172: PUSH
45173: LD_VAR 0 5
45177: PPUSH
45178: LD_VAR 0 6
45182: PPUSH
45183: LD_INT 18
45185: PPUSH
45186: CALL_OW 309
45190: OR
45191: PUSH
45192: LD_VAR 0 5
45196: PPUSH
45197: LD_VAR 0 6
45201: PPUSH
45202: LD_INT 20
45204: PPUSH
45205: CALL_OW 309
45209: OR
45210: PUSH
45211: LD_VAR 0 5
45215: PPUSH
45216: LD_VAR 0 6
45220: PPUSH
45221: LD_INT 21
45223: PPUSH
45224: CALL_OW 309
45228: OR
45229: PUSH
45230: LD_VAR 0 5
45234: PPUSH
45235: LD_VAR 0 6
45239: PPUSH
45240: LD_INT 22
45242: PPUSH
45243: CALL_OW 309
45247: OR
45248: IFFALSE 45266
// begin camera_engineers = camera_engineers union i ;
45250: LD_ADDR_EXP 91
45254: PUSH
45255: LD_EXP 91
45259: PUSH
45260: LD_VAR 0 3
45264: UNION
45265: ST_TO_ADDR
// end ; end ; end ;
45266: GO 45030
45268: POP
45269: POP
// end ; end ;
45270: GO 45273
45272: POP
// end ;
45273: LD_VAR 0 2
45277: RET
// every 0 0$1 + 0 0$0.4 do var i , k , temp_list , x , y , task_list ; var need_area_list ;
45278: GO 45280
45280: DISABLE
45281: LD_INT 0
45283: PPUSH
45284: PPUSH
45285: PPUSH
45286: PPUSH
45287: PPUSH
45288: PPUSH
45289: PPUSH
// begin need_area_list = [ 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
45290: LD_ADDR_VAR 0 7
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: LD_INT 3
45300: PUSH
45301: LD_INT 4
45303: PUSH
45304: LD_INT 5
45306: PUSH
45307: LD_INT 6
45309: PUSH
45310: LD_INT 7
45312: PUSH
45313: LD_INT 8
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: ST_TO_ADDR
// repeat wait ( 0 0$0.1 ) ;
45325: LD_INT 4
45327: PPUSH
45328: CALL_OW 67
// temp_list = [ ] ;
45332: LD_ADDR_VAR 0 3
45336: PUSH
45337: EMPTY
45338: ST_TO_ADDR
// for i in camera_engineers do
45339: LD_ADDR_VAR 0 1
45343: PUSH
45344: LD_EXP 91
45348: PUSH
45349: FOR_IN
45350: IFFALSE 45381
// if HasTask ( i ) then
45352: LD_VAR 0 1
45356: PPUSH
45357: CALL_OW 314
45361: IFFALSE 45379
// temp_list = temp_list ^ i ;
45363: LD_ADDR_VAR 0 3
45367: PUSH
45368: LD_VAR 0 3
45372: PUSH
45373: LD_VAR 0 1
45377: ADD
45378: ST_TO_ADDR
45379: GO 45349
45381: POP
45382: POP
// camera_engineers = temp_list ;
45383: LD_ADDR_EXP 91
45387: PUSH
45388: LD_VAR 0 3
45392: ST_TO_ADDR
// for i in camera_engineers do
45393: LD_ADDR_VAR 0 1
45397: PUSH
45398: LD_EXP 91
45402: PUSH
45403: FOR_IN
45404: IFFALSE 45979
// begin task_list = GetTaskList ( i ) ;
45406: LD_ADDR_VAR 0 6
45410: PUSH
45411: LD_VAR 0 1
45415: PPUSH
45416: CALL_OW 437
45420: ST_TO_ADDR
// if task_list [ 1 ] [ 1 ] = g then
45421: LD_VAR 0 6
45425: PUSH
45426: LD_INT 1
45428: ARRAY
45429: PUSH
45430: LD_INT 1
45432: ARRAY
45433: PUSH
45434: LD_STRING g
45436: EQUAL
45437: IFFALSE 45977
// begin x = task_list [ 1 ] [ 2 ] ;
45439: LD_ADDR_VAR 0 4
45443: PUSH
45444: LD_VAR 0 6
45448: PUSH
45449: LD_INT 1
45451: ARRAY
45452: PUSH
45453: LD_INT 2
45455: ARRAY
45456: ST_TO_ADDR
// y = task_list [ 1 ] [ 3 ] ;
45457: LD_ADDR_VAR 0 5
45461: PUSH
45462: LD_VAR 0 6
45466: PUSH
45467: LD_INT 1
45469: ARRAY
45470: PUSH
45471: LD_INT 3
45473: ARRAY
45474: ST_TO_ADDR
// if GetDistUnitXY ( i , x , y ) > 2 then
45475: LD_VAR 0 1
45479: PPUSH
45480: LD_VAR 0 4
45484: PPUSH
45485: LD_VAR 0 5
45489: PPUSH
45490: CALL_OW 297
45494: PUSH
45495: LD_INT 2
45497: GREATER
45498: IFFALSE 45502
// continue ;
45500: GO 45403
// if InArea ( x , y , camera_area_2 ) then
45502: LD_VAR 0 4
45506: PPUSH
45507: LD_VAR 0 5
45511: PPUSH
45512: LD_INT 15
45514: PPUSH
45515: CALL_OW 309
45519: IFFALSE 45566
// begin HiddenCamera ( x , y , you ) ;
45521: LD_VAR 0 4
45525: PPUSH
45526: LD_VAR 0 5
45530: PPUSH
45531: LD_EXP 3
45535: PPUSH
45536: CALL_OW 244
// need_area_list = need_area_list diff 2 ;
45540: LD_ADDR_VAR 0 7
45544: PUSH
45545: LD_VAR 0 7
45549: PUSH
45550: LD_INT 2
45552: DIFF
45553: ST_TO_ADDR
// SetAreaMapShow ( camera_area_2 , 0 ) ;
45554: LD_INT 15
45556: PPUSH
45557: LD_INT 0
45559: PPUSH
45560: CALL_OW 424
// end else
45564: GO 45948
// if InArea ( x , y , camera_area_3 ) then
45566: LD_VAR 0 4
45570: PPUSH
45571: LD_VAR 0 5
45575: PPUSH
45576: LD_INT 16
45578: PPUSH
45579: CALL_OW 309
45583: IFFALSE 45630
// begin HiddenCamera ( x , y , you ) ;
45585: LD_VAR 0 4
45589: PPUSH
45590: LD_VAR 0 5
45594: PPUSH
45595: LD_EXP 3
45599: PPUSH
45600: CALL_OW 244
// need_area_list = need_area_list diff 3 ;
45604: LD_ADDR_VAR 0 7
45608: PUSH
45609: LD_VAR 0 7
45613: PUSH
45614: LD_INT 3
45616: DIFF
45617: ST_TO_ADDR
// SetAreaMapShow ( camera_area_3 , 0 ) ;
45618: LD_INT 16
45620: PPUSH
45621: LD_INT 0
45623: PPUSH
45624: CALL_OW 424
// end else
45628: GO 45948
// if InArea ( x , y , camera_area_4 ) then
45630: LD_VAR 0 4
45634: PPUSH
45635: LD_VAR 0 5
45639: PPUSH
45640: LD_INT 17
45642: PPUSH
45643: CALL_OW 309
45647: IFFALSE 45694
// begin HiddenCamera ( x , y , you ) ;
45649: LD_VAR 0 4
45653: PPUSH
45654: LD_VAR 0 5
45658: PPUSH
45659: LD_EXP 3
45663: PPUSH
45664: CALL_OW 244
// need_area_list = need_area_list diff 4 ;
45668: LD_ADDR_VAR 0 7
45672: PUSH
45673: LD_VAR 0 7
45677: PUSH
45678: LD_INT 4
45680: DIFF
45681: ST_TO_ADDR
// SetAreaMapShow ( camera_area_4 , 0 ) ;
45682: LD_INT 17
45684: PPUSH
45685: LD_INT 0
45687: PPUSH
45688: CALL_OW 424
// end else
45692: GO 45948
// if InArea ( x , y , camera_area_5 ) then
45694: LD_VAR 0 4
45698: PPUSH
45699: LD_VAR 0 5
45703: PPUSH
45704: LD_INT 18
45706: PPUSH
45707: CALL_OW 309
45711: IFFALSE 45758
// begin HiddenCamera ( x , y , you ) ;
45713: LD_VAR 0 4
45717: PPUSH
45718: LD_VAR 0 5
45722: PPUSH
45723: LD_EXP 3
45727: PPUSH
45728: CALL_OW 244
// need_area_list = need_area_list diff 5 ;
45732: LD_ADDR_VAR 0 7
45736: PUSH
45737: LD_VAR 0 7
45741: PUSH
45742: LD_INT 5
45744: DIFF
45745: ST_TO_ADDR
// SetAreaMapShow ( camera_area_5 , 0 ) ;
45746: LD_INT 18
45748: PPUSH
45749: LD_INT 0
45751: PPUSH
45752: CALL_OW 424
// end else
45756: GO 45948
// if InArea ( x , y , camera_area_6 ) then
45758: LD_VAR 0 4
45762: PPUSH
45763: LD_VAR 0 5
45767: PPUSH
45768: LD_INT 20
45770: PPUSH
45771: CALL_OW 309
45775: IFFALSE 45822
// begin HiddenCamera ( x , y , you ) ;
45777: LD_VAR 0 4
45781: PPUSH
45782: LD_VAR 0 5
45786: PPUSH
45787: LD_EXP 3
45791: PPUSH
45792: CALL_OW 244
// need_area_list = need_area_list diff 6 ;
45796: LD_ADDR_VAR 0 7
45800: PUSH
45801: LD_VAR 0 7
45805: PUSH
45806: LD_INT 6
45808: DIFF
45809: ST_TO_ADDR
// SetAreaMapShow ( camera_area_6 , 0 ) ;
45810: LD_INT 20
45812: PPUSH
45813: LD_INT 0
45815: PPUSH
45816: CALL_OW 424
// end else
45820: GO 45948
// if InArea ( x , y , camera_area_7 ) then
45822: LD_VAR 0 4
45826: PPUSH
45827: LD_VAR 0 5
45831: PPUSH
45832: LD_INT 21
45834: PPUSH
45835: CALL_OW 309
45839: IFFALSE 45886
// begin HiddenCamera ( x , y , you ) ;
45841: LD_VAR 0 4
45845: PPUSH
45846: LD_VAR 0 5
45850: PPUSH
45851: LD_EXP 3
45855: PPUSH
45856: CALL_OW 244
// need_area_list = need_area_list diff 7 ;
45860: LD_ADDR_VAR 0 7
45864: PUSH
45865: LD_VAR 0 7
45869: PUSH
45870: LD_INT 7
45872: DIFF
45873: ST_TO_ADDR
// SetAreaMapShow ( camera_area_7 , 0 ) ;
45874: LD_INT 21
45876: PPUSH
45877: LD_INT 0
45879: PPUSH
45880: CALL_OW 424
// end else
45884: GO 45948
// if InArea ( x , y , camera_area_8 ) then
45886: LD_VAR 0 4
45890: PPUSH
45891: LD_VAR 0 5
45895: PPUSH
45896: LD_INT 22
45898: PPUSH
45899: CALL_OW 309
45903: IFFALSE 45948
// begin HiddenCamera ( x , y , you ) ;
45905: LD_VAR 0 4
45909: PPUSH
45910: LD_VAR 0 5
45914: PPUSH
45915: LD_EXP 3
45919: PPUSH
45920: CALL_OW 244
// need_area_list = need_area_list diff 8 ;
45924: LD_ADDR_VAR 0 7
45928: PUSH
45929: LD_VAR 0 7
45933: PUSH
45934: LD_INT 8
45936: DIFF
45937: ST_TO_ADDR
// SetAreaMapShow ( camera_area_8 , 0 ) ;
45938: LD_INT 22
45940: PPUSH
45941: LD_INT 0
45943: PPUSH
45944: CALL_OW 424
// end ; if need_area_list = 0 then
45948: LD_VAR 0 7
45952: PUSH
45953: LD_INT 0
45955: EQUAL
45956: IFFALSE 45977
// begin ChangeMissionObjectives ( MOutCameras ) ;
45958: LD_STRING MOutCameras
45960: PPUSH
45961: CALL_OW 337
// cameras_placed = true ;
45965: LD_ADDR_EXP 92
45969: PUSH
45970: LD_INT 1
45972: ST_TO_ADDR
// exit ;
45973: POP
45974: POP
45975: GO 45985
// end ; end ; end ;
45977: GO 45403
45979: POP
45980: POP
// until false ;
45981: LD_INT 0
45983: IFFALSE 45325
// end ;
45985: PPOPN 7
45987: END
// on SpontaneousTeleported ( un ) do begin if first_teleport then
45988: LD_EXP 90
45992: IFFALSE 46122
// if See ( you , un ) then
45994: LD_EXP 3
45998: PPUSH
45999: LD_VAR 0 1
46003: PPUSH
46004: CALL_OW 292
46008: IFFALSE 46122
// begin CenterNowOnUnits ( un ) ;
46010: LD_VAR 0 1
46014: PPUSH
46015: CALL_OW 87
// first_teleport = false ;
46019: LD_ADDR_EXP 90
46023: PUSH
46024: LD_INT 0
46026: ST_TO_ADDR
// wait ( 0 0$1.8 ) ;
46027: LD_INT 63
46029: PPUSH
46030: CALL_OW 67
// DialogueOn ;
46034: CALL_OW 6
// ForceSay ( Heike , D6-H-1 ) ;
46038: LD_EXP 10
46042: PPUSH
46043: LD_STRING D6-H-1
46045: PPUSH
46046: CALL_OW 91
// if IsLive ( Ralph ) then
46050: LD_EXP 13
46054: PPUSH
46055: CALL_OW 300
46059: IFFALSE 46075
// ForceSay ( Ralph , D6-Ra-1 ) else
46061: LD_EXP 13
46065: PPUSH
46066: LD_STRING D6-Ra-1
46068: PPUSH
46069: CALL_OW 91
46073: GO 46118
// if IsLive ( Oswald ) then
46075: LD_EXP 12
46079: PPUSH
46080: CALL_OW 300
46084: IFFALSE 46118
// begin if oswald_is_substitute then
46086: LD_EXP 81
46090: IFFALSE 46106
// ForceSay ( Oswald , D6-Os_alt-1 ) else
46092: LD_EXP 12
46096: PPUSH
46097: LD_STRING D6-Os_alt-1
46099: PPUSH
46100: CALL_OW 91
46104: GO 46118
// ForceSay ( Oswald , D6-Os-1 ) ;
46106: LD_EXP 12
46110: PPUSH
46111: LD_STRING D6-Os-1
46113: PPUSH
46114: CALL_OW 91
// end ; DialogueOff ;
46118: CALL_OW 7
// end ; end ;
46122: PPOPN 1
46124: END
// every 0 0$1.6 do
46125: GO 46127
46127: DISABLE
// begin repeat wait ( 0 0$0.5 ) ;
46128: LD_INT 18
46130: PPUSH
46131: CALL_OW 67
// if game_phase = 3 then
46135: LD_EXP 89
46139: PUSH
46140: LD_INT 3
46142: EQUAL
46143: IFFALSE 46147
// exit ;
46145: GO 46233
// if ContactTime ( [ you , you_alt ] ) <= 0 0$1 or ai_contact_time [ you ] [ you_alt ] <= 0 0$1 then
46147: LD_EXP 3
46151: PUSH
46152: LD_EXP 6
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PPUSH
46161: CALL_OW 462
46165: PUSH
46166: LD_INT 35
46168: LESSEQUAL
46169: PUSH
46170: LD_EXP 76
46174: PUSH
46175: LD_EXP 3
46179: ARRAY
46180: PUSH
46181: LD_EXP 6
46185: ARRAY
46186: PUSH
46187: LD_INT 35
46189: LESSEQUAL
46190: OR
46191: IFFALSE 46229
// begin DialogueOn ;
46193: CALL_OW 6
// Say ( Gensher , D11-Ge-1 ) ;
46197: LD_EXP 24
46201: PPUSH
46202: LD_STRING D11-Ge-1
46204: PPUSH
46205: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
46209: LD_INT 18
46211: PPUSH
46212: CALL_OW 68
// YouLost ( AttackedGensher ) ;
46216: LD_STRING AttackedGensher
46218: PPUSH
46219: CALL_OW 104
// DialogueOff ;
46223: CALL_OW 7
// exit ;
46227: GO 46233
// end ; until false ;
46229: LD_INT 0
46231: IFFALSE 46128
// end ;
46233: END
// every 0 0$1 + 0 0$0.2 do var temp_list , i ;
46234: GO 46236
46236: DISABLE
46237: LD_INT 0
46239: PPUSH
46240: PPUSH
// begin repeat wait ( 0 0$1 ) ;
46241: LD_INT 35
46243: PPUSH
46244: CALL_OW 67
// if game_phase > 1 then
46248: LD_EXP 89
46252: PUSH
46253: LD_INT 1
46255: GREATER
46256: IFFALSE 46260
// exit ;
46258: GO 46704
// if ContactTime ( [ you , americans ] ) <= 0 0$2 or ai_contact_time [ americans ] [ you ] <= 0 0$2 then
46260: LD_EXP 3
46264: PUSH
46265: LD_EXP 7
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PPUSH
46274: CALL_OW 462
46278: PUSH
46279: LD_INT 70
46281: LESSEQUAL
46282: PUSH
46283: LD_EXP 76
46287: PUSH
46288: LD_EXP 7
46292: ARRAY
46293: PUSH
46294: LD_EXP 3
46298: ARRAY
46299: PUSH
46300: LD_INT 70
46302: LESSEQUAL
46303: OR
46304: IFFALSE 46700
// begin temp_list = [ ] ;
46306: LD_ADDR_VAR 0 1
46310: PUSH
46311: EMPTY
46312: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , americans ] ) do
46313: LD_ADDR_VAR 0 2
46317: PUSH
46318: LD_INT 22
46320: PUSH
46321: LD_EXP 7
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PPUSH
46330: CALL_OW 69
46334: PUSH
46335: FOR_IN
46336: IFFALSE 46374
// if GetSide ( Attacks ( i ) ) = you then
46338: LD_VAR 0 2
46342: PPUSH
46343: CALL_OW 320
46347: PPUSH
46348: CALL_OW 255
46352: PUSH
46353: LD_EXP 3
46357: EQUAL
46358: IFFALSE 46372
// begin temp_list = i ;
46360: LD_ADDR_VAR 0 1
46364: PUSH
46365: LD_VAR 0 2
46369: ST_TO_ADDR
// break ;
46370: GO 46374
// end ;
46372: GO 46335
46374: POP
46375: POP
// if temp_list = 0 then
46376: LD_VAR 0 1
46380: PUSH
46381: LD_INT 0
46383: EQUAL
46384: IFFALSE 46449
// for i in FilterAllUnits ( [ f_side , you ] ) do
46386: LD_ADDR_VAR 0 2
46390: PUSH
46391: LD_INT 22
46393: PUSH
46394: LD_EXP 3
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PPUSH
46403: CALL_OW 69
46407: PUSH
46408: FOR_IN
46409: IFFALSE 46447
// if GetSide ( Attacks ( i ) ) = americans then
46411: LD_VAR 0 2
46415: PPUSH
46416: CALL_OW 320
46420: PPUSH
46421: CALL_OW 255
46425: PUSH
46426: LD_EXP 7
46430: EQUAL
46431: IFFALSE 46445
// begin temp_list = i ;
46433: LD_ADDR_VAR 0 1
46437: PUSH
46438: LD_VAR 0 2
46442: ST_TO_ADDR
// break ;
46443: GO 46447
// end ;
46445: GO 46408
46447: POP
46448: POP
// if temp_list > 0 then
46449: LD_VAR 0 1
46453: PUSH
46454: LD_INT 0
46456: GREATER
46457: IFFALSE 46468
// CenterOnUnits ( temp_list ) ;
46459: LD_VAR 0 1
46463: PPUSH
46464: CALL_OW 85
// DialogueOn ;
46468: CALL_OW 6
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_class , class_soldier ] ] ) diff [ Simms , Cornell , Khattam ] ;
46472: LD_ADDR_VAR 0 1
46476: PUSH
46477: LD_INT 22
46479: PUSH
46480: LD_EXP 7
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 25
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PPUSH
46503: CALL_OW 69
46507: PUSH
46508: LD_EXP 25
46512: PUSH
46513: LD_EXP 26
46517: PUSH
46518: LD_EXP 27
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: DIFF
46528: ST_TO_ADDR
// if temp_list = 0 then
46529: LD_VAR 0 1
46533: PUSH
46534: LD_INT 0
46536: EQUAL
46537: IFFALSE 46607
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) diff ( GetApes ( americans ) ^ [ Simms , Cornell , Khattam ] ) ;
46539: LD_ADDR_VAR 0 1
46543: PUSH
46544: LD_INT 22
46546: PUSH
46547: LD_EXP 7
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 21
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PPUSH
46570: CALL_OW 69
46574: PUSH
46575: LD_EXP 7
46579: PPUSH
46580: CALL 43838 0 1
46584: PUSH
46585: LD_EXP 25
46589: PUSH
46590: LD_EXP 26
46594: PUSH
46595: LD_EXP 27
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: ADD
46605: DIFF
46606: ST_TO_ADDR
// if temp_list > 0 then
46607: LD_VAR 0 1
46611: PUSH
46612: LD_INT 0
46614: GREATER
46615: IFFALSE 46670
// if GetSex ( temp_list [ 1 ] ) = sex_male then
46617: LD_VAR 0 1
46621: PUSH
46622: LD_INT 1
46624: ARRAY
46625: PPUSH
46626: CALL_OW 258
46630: PUSH
46631: LD_INT 1
46633: EQUAL
46634: IFFALSE 46654
// SayRadio ( temp_list [ 1 ] , D4-SomeM-1 ) else
46636: LD_VAR 0 1
46640: PUSH
46641: LD_INT 1
46643: ARRAY
46644: PPUSH
46645: LD_STRING D4-SomeM-1
46647: PPUSH
46648: CALL_OW 94
46652: GO 46670
// SayRadio ( temp_list [ 1 ] , D4-SomeF-1 ) ;
46654: LD_VAR 0 1
46658: PUSH
46659: LD_INT 1
46661: ARRAY
46662: PPUSH
46663: LD_STRING D4-SomeF-1
46665: PPUSH
46666: CALL_OW 94
// SayRadio ( Simms , D4-Sim-1 ) ;
46670: LD_EXP 25
46674: PPUSH
46675: LD_STRING D4-Sim-1
46677: PPUSH
46678: CALL_OW 94
// dwait ( 0 0$0.5 ) ;
46682: LD_INT 18
46684: PPUSH
46685: CALL_OW 68
// YouLost ( PlayerSeen ) ;
46689: LD_STRING PlayerSeen
46691: PPUSH
46692: CALL_OW 104
// DialogueOff ;
46696: CALL_OW 7
// end ; until false ;
46700: LD_INT 0
46702: IFFALSE 46241
// end ;
46704: PPOPN 2
46706: END
// every 0 0$1 + 0 0$0.9 do var vehicle ;
46707: GO 46709
46709: DISABLE
46710: LD_INT 0
46712: PPUSH
// begin InitUc ;
46713: CALL_OW 18
// InitVc ;
46717: CALL_OW 20
// uc_side = americans ;
46721: LD_ADDR_OWVAR 20
46725: PUSH
46726: LD_EXP 7
46730: ST_TO_ADDR
// uc_nation = nation_american ;
46731: LD_ADDR_OWVAR 21
46735: PUSH
46736: LD_INT 1
46738: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
46739: LD_ADDR_OWVAR 37
46743: PUSH
46744: LD_INT 2
46746: ST_TO_ADDR
// vc_control = control_manual ;
46747: LD_ADDR_OWVAR 38
46751: PUSH
46752: LD_INT 1
46754: ST_TO_ADDR
// vc_engine = engine_siberite ;
46755: LD_ADDR_OWVAR 39
46759: PUSH
46760: LD_INT 3
46762: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
46763: LD_ADDR_OWVAR 40
46767: PUSH
46768: LD_INT 2
46770: ST_TO_ADDR
// vehicle = CreateVehicle ;
46771: LD_ADDR_VAR 0 1
46775: PUSH
46776: CALL_OW 45
46780: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , vehicle ) ;
46781: LD_EXP 28
46785: PPUSH
46786: LD_VAR 0 1
46790: PPUSH
46791: CALL_OW 52
// wait ( Rand ( 0 0$20 , 0 0$30 ) ) ;
46795: LD_INT 700
46797: PPUSH
46798: LD_INT 1050
46800: PPUSH
46801: CALL_OW 12
46805: PPUSH
46806: CALL_OW 67
// while not PlaceUnitXYR ( vehicle , 98 , 30 , 2 , false ) do
46810: LD_VAR 0 1
46814: PPUSH
46815: LD_INT 98
46817: PPUSH
46818: LD_INT 30
46820: PPUSH
46821: LD_INT 2
46823: PPUSH
46824: LD_INT 0
46826: PPUSH
46827: CALL_OW 50
46831: NOT
46832: IFFALSE 46843
// wait ( 0 0$2 ) ;
46834: LD_INT 70
46836: PPUSH
46837: CALL_OW 67
46841: GO 46810
// while IsPlaced ( Joan ) do
46843: LD_EXP 28
46847: PPUSH
46848: CALL_OW 305
46852: IFFALSE 46919
// begin wait ( 0 0$1 ) ;
46854: LD_INT 35
46856: PPUSH
46857: CALL_OW 67
// if GetDistUnitXY ( Joan , 56 , 3 ) > 1 then
46861: LD_EXP 28
46865: PPUSH
46866: LD_INT 56
46868: PPUSH
46869: LD_INT 3
46871: PPUSH
46872: CALL_OW 297
46876: PUSH
46877: LD_INT 1
46879: GREATER
46880: IFFALSE 46899
// ComMoveXY ( Joan , 56 , 3 ) else
46882: LD_EXP 28
46886: PPUSH
46887: LD_INT 56
46889: PPUSH
46890: LD_INT 3
46892: PPUSH
46893: CALL_OW 111
46897: GO 46917
// begin DestroyUnit ( Joan ) ;
46899: LD_EXP 28
46903: PPUSH
46904: CALL_OW 65
// DestroyUnit ( vehicle ) ;
46908: LD_VAR 0 1
46912: PPUSH
46913: CALL_OW 65
// end ; end ;
46917: GO 46843
// end ;
46919: PPOPN 1
46921: END
// every 0 0$1 + 0 0$0.1 do var i , temp_unit , temp_list , temp_list_2 ; var cargo_bay , special_player_units , scout , crate_hex ;
46922: GO 46924
46924: DISABLE
46925: LD_INT 0
46927: PPUSH
46928: PPUSH
46929: PPUSH
46930: PPUSH
46931: PPUSH
46932: PPUSH
46933: PPUSH
46934: PPUSH
// begin special_player_units = [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ;
46935: LD_ADDR_VAR 0 6
46939: PUSH
46940: LD_EXP 10
46944: PUSH
46945: LD_EXP 11
46949: PUSH
46950: LD_EXP 12
46954: PUSH
46955: LD_EXP 13
46959: PUSH
46960: LD_EXP 14
46964: PUSH
46965: LD_EXP 15
46969: PUSH
46970: LD_EXP 16
46974: PUSH
46975: LD_EXP 17
46979: PUSH
46980: LD_EXP 18
46984: PUSH
46985: LD_EXP 19
46989: PUSH
46990: LD_EXP 20
46994: PUSH
46995: LD_EXP 21
46999: PUSH
47000: LD_EXP 22
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: ST_TO_ADDR
// InitUc ;
47020: CALL_OW 18
// InitVc ;
47024: CALL_OW 20
// uc_side = russians ;
47028: LD_ADDR_OWVAR 20
47032: PUSH
47033: LD_EXP 4
47037: ST_TO_ADDR
// uc_nation = nation_russian ;
47038: LD_ADDR_OWVAR 21
47042: PUSH
47043: LD_INT 3
47045: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
47046: LD_ADDR_OWVAR 37
47050: PUSH
47051: LD_INT 22
47053: ST_TO_ADDR
// vc_engine = engine_siberite ;
47054: LD_ADDR_OWVAR 39
47058: PUSH
47059: LD_INT 3
47061: ST_TO_ADDR
// vc_control = control_computer ;
47062: LD_ADDR_OWVAR 38
47066: PUSH
47067: LD_INT 3
47069: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
47070: LD_ADDR_OWVAR 40
47074: PUSH
47075: LD_INT 51
47077: ST_TO_ADDR
// cargo_bay = CreateVehicle ;
47078: LD_ADDR_VAR 0 5
47082: PUSH
47083: CALL_OW 45
47087: ST_TO_ADDR
// SetCargo ( cargo_bay , mat_cans , Rand ( 2 , 5 ) * 10 ) ;
47088: LD_VAR 0 5
47092: PPUSH
47093: LD_INT 1
47095: PPUSH
47096: LD_INT 2
47098: PPUSH
47099: LD_INT 5
47101: PPUSH
47102: CALL_OW 12
47106: PUSH
47107: LD_INT 10
47109: MUL
47110: PPUSH
47111: CALL_OW 290
// SetDir ( cargo_bay , 0 ) ;
47115: LD_VAR 0 5
47119: PPUSH
47120: LD_INT 0
47122: PPUSH
47123: CALL_OW 233
// PlaceUnitXY ( cargo_bay , 103 , 116 , false ) ;
47127: LD_VAR 0 5
47131: PPUSH
47132: LD_INT 103
47134: PPUSH
47135: LD_INT 116
47137: PPUSH
47138: LD_INT 0
47140: PPUSH
47141: CALL_OW 48
// crate_hex = RandHexXYR ( 122 , 93 , 4 , false ) ;
47145: LD_ADDR_VAR 0 8
47149: PUSH
47150: LD_INT 122
47152: PPUSH
47153: LD_INT 93
47155: PPUSH
47156: LD_INT 4
47158: PPUSH
47159: LD_INT 0
47161: PPUSH
47162: CALL_OW 17
47166: ST_TO_ADDR
// CreateCratesXY ( Rand ( 3 , 5 ) , crate_hex [ 1 ] , crate_hex [ 2 ] , false ) ;
47167: LD_INT 3
47169: PPUSH
47170: LD_INT 5
47172: PPUSH
47173: CALL_OW 12
47177: PPUSH
47178: LD_VAR 0 8
47182: PUSH
47183: LD_INT 1
47185: ARRAY
47186: PPUSH
47187: LD_VAR 0 8
47191: PUSH
47192: LD_INT 2
47194: ARRAY
47195: PPUSH
47196: LD_INT 0
47198: PPUSH
47199: CALL_OW 54
// ComMoveXY ( cargo_bay , 122 , 93 ) ;
47203: LD_VAR 0 5
47207: PPUSH
47208: LD_INT 122
47210: PPUSH
47211: LD_INT 93
47213: PPUSH
47214: CALL_OW 111
// AddComStand ( cargo_bay ) ;
47218: LD_VAR 0 5
47222: PPUSH
47223: CALL_OW 225
// i = Rand ( 1 1$30 , 2 2$0 ) ;
47227: LD_ADDR_VAR 0 1
47231: PUSH
47232: LD_INT 3150
47234: PPUSH
47235: LD_INT 4200
47237: PPUSH
47238: CALL_OW 12
47242: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
47243: LD_INT 18
47245: PPUSH
47246: CALL_OW 67
// i = i - 0 0$0.5 ;
47250: LD_ADDR_VAR 0 1
47254: PUSH
47255: LD_VAR 0 1
47259: PUSH
47260: LD_INT 18
47262: MINUS
47263: ST_TO_ADDR
// until i <= 0 0$0 or See ( you , cargo_bay ) ;
47264: LD_VAR 0 1
47268: PUSH
47269: LD_INT 0
47271: LESSEQUAL
47272: PUSH
47273: LD_EXP 3
47277: PPUSH
47278: LD_VAR 0 5
47282: PPUSH
47283: CALL_OW 292
47287: OR
47288: IFFALSE 47243
// while not See ( you , cargo_bay ) do
47290: LD_EXP 3
47294: PPUSH
47295: LD_VAR 0 5
47299: PPUSH
47300: CALL_OW 292
47304: NOT
47305: IFFALSE 47377
// begin wait ( 0 0$0.5 ) ;
47307: LD_INT 18
47309: PPUSH
47310: CALL_OW 67
// temp_unit = NearestUnitToUnit ( FilterAllUnits ( [ f_side , you ] ) , cargo_bay ) ;
47314: LD_ADDR_VAR 0 2
47318: PUSH
47319: LD_INT 22
47321: PUSH
47322: LD_EXP 3
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PPUSH
47331: CALL_OW 69
47335: PPUSH
47336: LD_VAR 0 5
47340: PPUSH
47341: CALL_OW 74
47345: ST_TO_ADDR
// ComMoveXY ( cargo_bay , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
47346: LD_VAR 0 5
47350: PPUSH
47351: LD_VAR 0 2
47355: PPUSH
47356: CALL_OW 250
47360: PPUSH
47361: LD_VAR 0 2
47365: PPUSH
47366: CALL_OW 251
47370: PPUSH
47371: CALL_OW 111
// end ;
47375: GO 47290
// CenterOnUnits ( cargo_bay ) ;
47377: LD_VAR 0 5
47381: PPUSH
47382: CALL_OW 85
// DialogueOn ;
47386: CALL_OW 6
// if IsOk ( Oswald ) then
47390: LD_EXP 12
47394: PPUSH
47395: CALL_OW 302
47399: IFFALSE 47435
// begin if oswald_is_substitute then
47401: LD_EXP 81
47405: IFFALSE 47421
// Say ( Oswald , D2-Os_alt-1 ) else
47407: LD_EXP 12
47411: PPUSH
47412: LD_STRING D2-Os_alt-1
47414: PPUSH
47415: CALL_OW 88
47419: GO 47433
// Say ( Oswald , D2-Os-1 ) ;
47421: LD_EXP 12
47425: PPUSH
47426: LD_STRING D2-Os-1
47428: PPUSH
47429: CALL_OW 88
// end else
47433: GO 47667
// if IsOk ( Olaf ) then
47435: LD_EXP 17
47439: PPUSH
47440: CALL_OW 302
47444: IFFALSE 47460
// Say ( Olaf , D2-Olaf-1 ) else
47446: LD_EXP 17
47450: PPUSH
47451: LD_STRING D2-Olaf-1
47453: PPUSH
47454: CALL_OW 88
47458: GO 47667
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ special_player_units ) ;
47460: LD_ADDR_VAR 0 3
47464: PUSH
47465: LD_INT 22
47467: PUSH
47468: LD_EXP 3
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 21
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PPUSH
47491: CALL_OW 69
47495: PUSH
47496: LD_EXP 3
47500: PPUSH
47501: CALL 43838 0 1
47505: PUSH
47506: LD_VAR 0 6
47510: ADD
47511: DIFF
47512: ST_TO_ADDR
// if temp_list > 0 then
47513: LD_VAR 0 3
47517: PUSH
47518: LD_INT 0
47520: GREATER
47521: IFFALSE 47539
// temp_unit = temp_list [ 1 ] else
47523: LD_ADDR_VAR 0 2
47527: PUSH
47528: LD_VAR 0 3
47532: PUSH
47533: LD_INT 1
47535: ARRAY
47536: ST_TO_ADDR
47537: GO 47626
// begin temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ Heike ) ;
47539: LD_ADDR_VAR 0 3
47543: PUSH
47544: LD_INT 22
47546: PUSH
47547: LD_EXP 3
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 21
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PPUSH
47570: CALL_OW 69
47574: PUSH
47575: LD_EXP 3
47579: PPUSH
47580: CALL 43838 0 1
47584: PUSH
47585: LD_EXP 10
47589: ADD
47590: DIFF
47591: ST_TO_ADDR
// if temp_list > 0 then
47592: LD_VAR 0 3
47596: PUSH
47597: LD_INT 0
47599: GREATER
47600: IFFALSE 47618
// temp_unit = temp_list [ 1 ] else
47602: LD_ADDR_VAR 0 2
47606: PUSH
47607: LD_VAR 0 3
47611: PUSH
47612: LD_INT 1
47614: ARRAY
47615: ST_TO_ADDR
47616: GO 47626
// temp_unit = 0 ;
47618: LD_ADDR_VAR 0 2
47622: PUSH
47623: LD_INT 0
47625: ST_TO_ADDR
// end ; if GetSex ( temp_unit ) = sex_male then
47626: LD_VAR 0 2
47630: PPUSH
47631: CALL_OW 258
47635: PUSH
47636: LD_INT 1
47638: EQUAL
47639: IFFALSE 47655
// Say ( temp_unit , D2-SomeM-1 ) else
47641: LD_VAR 0 2
47645: PPUSH
47646: LD_STRING D2-SomeM-1
47648: PPUSH
47649: CALL_OW 88
47653: GO 47667
// Say ( temp_unit , D2-SomeF-1 ) ;
47655: LD_VAR 0 2
47659: PPUSH
47660: LD_STRING D2-SomeF-1
47662: PPUSH
47663: CALL_OW 88
// end ; Say ( Heike , D2-H-1 ) ;
47667: LD_EXP 10
47671: PPUSH
47672: LD_STRING D2-H-1
47674: PPUSH
47675: CALL_OW 88
// if IsOk ( Kowalski ) then
47679: LD_EXP 14
47683: PPUSH
47684: CALL_OW 302
47688: IFFALSE 47716
// begin Say ( Kowalski , D2-Ko-a-1 ) ;
47690: LD_EXP 14
47694: PPUSH
47695: LD_STRING D2-Ko-a-1
47697: PPUSH
47698: CALL_OW 88
// Say ( Heike , D2-H-a-2 ) ;
47702: LD_EXP 10
47706: PPUSH
47707: LD_STRING D2-H-a-2
47709: PPUSH
47710: CALL_OW 88
// end else
47714: GO 47728
// begin Say ( Heike , D2-H-b-2 ) ;
47716: LD_EXP 10
47720: PPUSH
47721: LD_STRING D2-H-b-2
47723: PPUSH
47724: CALL_OW 88
// end ; dwait ( 0 0$0.2 ) ;
47728: LD_INT 7
47730: PPUSH
47731: CALL_OW 68
// temp_list_2 = FilterAllUnits ( [ f_side , you ] ) diff ( GetApes ( you ) ^ Heike ) ;
47735: LD_ADDR_VAR 0 4
47739: PUSH
47740: LD_INT 22
47742: PUSH
47743: LD_EXP 3
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PPUSH
47752: CALL_OW 69
47756: PUSH
47757: LD_EXP 3
47761: PPUSH
47762: CALL 43838 0 1
47766: PUSH
47767: LD_EXP 10
47771: ADD
47772: DIFF
47773: ST_TO_ADDR
// if UnitFilter ( temp_list_2 , [ f_class , class_soldier ] ) = 0 then
47774: LD_VAR 0 4
47778: PPUSH
47779: LD_INT 25
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PPUSH
47789: CALL_OW 72
47793: PUSH
47794: LD_INT 0
47796: EQUAL
47797: IFFALSE 47812
// temp_list = [ sel_change_class ] else
47799: LD_ADDR_VAR 0 3
47803: PUSH
47804: LD_INT -5
47806: PUSH
47807: EMPTY
47808: LIST
47809: ST_TO_ADDR
47810: GO 47823
// temp_list = [ sel_dont_change_class ] ;
47812: LD_ADDR_VAR 0 3
47816: PUSH
47817: LD_INT -6
47819: PUSH
47820: EMPTY
47821: LIST
47822: ST_TO_ADDR
// temp_list = CharacterSelection (  , 1 , 1 , [ sel_dont_change_class , sel_not_hired , sel_not_changeable , Heike , sel_changeable ] ^ temp_list ^ temp_list_2 , [ [ class_soldier , 1 ] ] ) ;
47823: LD_ADDR_VAR 0 3
47827: PUSH
47828: LD_STRING 
47830: PPUSH
47831: LD_INT 1
47833: PPUSH
47834: LD_INT 1
47836: PPUSH
47837: LD_INT -6
47839: PUSH
47840: LD_INT -2
47842: PUSH
47843: LD_INT -4
47845: PUSH
47846: LD_EXP 10
47850: PUSH
47851: LD_INT -3
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: PUSH
47861: LD_VAR 0 3
47865: ADD
47866: PUSH
47867: LD_VAR 0 4
47871: ADD
47872: PPUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: EMPTY
47884: LIST
47885: PPUSH
47886: CALL_OW 42
47890: ST_TO_ADDR
// temp_unit = temp_list [ 1 ] ;
47891: LD_ADDR_VAR 0 2
47895: PUSH
47896: LD_VAR 0 3
47900: PUSH
47901: LD_INT 1
47903: ARRAY
47904: ST_TO_ADDR
// scout = temp_unit ;
47905: LD_ADDR_VAR 0 7
47909: PUSH
47910: LD_VAR 0 2
47914: ST_TO_ADDR
// dwait ( 0 0$0.2 ) ;
47915: LD_INT 7
47917: PPUSH
47918: CALL_OW 68
// case temp_unit of Sonya :
47922: LD_VAR 0 2
47926: PUSH
47927: LD_EXP 11
47931: DOUBLE
47932: EQUAL
47933: IFTRUE 47937
47935: GO 47952
47937: POP
// Say ( temp_unit , D2-So-1 ) ; Oswald :
47938: LD_VAR 0 2
47942: PPUSH
47943: LD_STRING D2-So-1
47945: PPUSH
47946: CALL_OW 88
47950: GO 48321
47952: LD_EXP 12
47956: DOUBLE
47957: EQUAL
47958: IFTRUE 47962
47960: GO 47997
47962: POP
// begin if oswald_is_substitute then
47963: LD_EXP 81
47967: IFFALSE 47983
// Say ( temp_unit , D2-Os_alt-2 ) else
47969: LD_VAR 0 2
47973: PPUSH
47974: LD_STRING D2-Os_alt-2
47976: PPUSH
47977: CALL_OW 88
47981: GO 47995
// Say ( temp_unit , D2-Os-2 ) ;
47983: LD_VAR 0 2
47987: PPUSH
47988: LD_STRING D2-Os-2
47990: PPUSH
47991: CALL_OW 88
// end ; Ralph :
47995: GO 48321
47997: LD_EXP 13
48001: DOUBLE
48002: EQUAL
48003: IFTRUE 48007
48005: GO 48022
48007: POP
// Say ( temp_unit , D2-Ra-1 ) ; Kowalski :
48008: LD_VAR 0 2
48012: PPUSH
48013: LD_STRING D2-Ra-1
48015: PPUSH
48016: CALL_OW 88
48020: GO 48321
48022: LD_EXP 14
48026: DOUBLE
48027: EQUAL
48028: IFTRUE 48032
48030: GO 48047
48032: POP
// Say ( temp_unit , D2-Ko-1 ) ; Evelyn :
48033: LD_VAR 0 2
48037: PPUSH
48038: LD_STRING D2-Ko-1
48040: PPUSH
48041: CALL_OW 88
48045: GO 48321
48047: LD_EXP 15
48051: DOUBLE
48052: EQUAL
48053: IFTRUE 48057
48055: GO 48072
48057: POP
// Say ( temp_unit , D2-Ev-1 ) ; Suze :
48058: LD_VAR 0 2
48062: PPUSH
48063: LD_STRING D2-Ev-1
48065: PPUSH
48066: CALL_OW 88
48070: GO 48321
48072: LD_EXP 16
48076: DOUBLE
48077: EQUAL
48078: IFTRUE 48082
48080: GO 48097
48082: POP
// Say ( temp_unit , D2-Su-1 ) ; Olaf :
48083: LD_VAR 0 2
48087: PPUSH
48088: LD_STRING D2-Su-1
48090: PPUSH
48091: CALL_OW 88
48095: GO 48321
48097: LD_EXP 17
48101: DOUBLE
48102: EQUAL
48103: IFTRUE 48107
48105: GO 48122
48107: POP
// Say ( temp_unit , D2-Olaf-2 ) ; Kurt :
48108: LD_VAR 0 2
48112: PPUSH
48113: LD_STRING D2-Olaf-2
48115: PPUSH
48116: CALL_OW 88
48120: GO 48321
48122: LD_EXP 18
48126: DOUBLE
48127: EQUAL
48128: IFTRUE 48132
48130: GO 48167
48132: POP
// begin if kurt_is_substitute then
48133: LD_EXP 82
48137: IFFALSE 48153
// Say ( temp_unit , D2-Ku_alt-1 ) else
48139: LD_VAR 0 2
48143: PPUSH
48144: LD_STRING D2-Ku_alt-1
48146: PPUSH
48147: CALL_OW 88
48151: GO 48165
// Say ( temp_unit , D2-Ku-1 ) ;
48153: LD_VAR 0 2
48157: PPUSH
48158: LD_STRING D2-Ku-1
48160: PPUSH
48161: CALL_OW 88
// end ; Dwayne :
48165: GO 48321
48167: LD_EXP 19
48171: DOUBLE
48172: EQUAL
48173: IFTRUE 48177
48175: GO 48192
48177: POP
// Say ( temp_unit , D2-Dw-1 ) ; MarkB :
48178: LD_VAR 0 2
48182: PPUSH
48183: LD_STRING D2-Dw-1
48185: PPUSH
48186: CALL_OW 88
48190: GO 48321
48192: LD_EXP 20
48196: DOUBLE
48197: EQUAL
48198: IFTRUE 48202
48200: GO 48217
48202: POP
// Say ( temp_unit , D2-Ma-1 ) ; Aviradze :
48203: LD_VAR 0 2
48207: PPUSH
48208: LD_STRING D2-Ma-1
48210: PPUSH
48211: CALL_OW 88
48215: GO 48321
48217: LD_EXP 21
48221: DOUBLE
48222: EQUAL
48223: IFTRUE 48227
48225: GO 48254
48227: POP
// begin Say ( temp_unit , D2-Av-1 ) ;
48228: LD_VAR 0 2
48232: PPUSH
48233: LD_STRING D2-Av-1
48235: PPUSH
48236: CALL_OW 88
// Say ( Heike , D2-H-3 ) ;
48240: LD_EXP 10
48244: PPUSH
48245: LD_STRING D2-H-3
48247: PPUSH
48248: CALL_OW 88
// end ; Swansson :
48252: GO 48321
48254: LD_EXP 22
48258: DOUBLE
48259: EQUAL
48260: IFTRUE 48264
48262: GO 48279
48264: POP
// Say ( temp_unit , D2-Sw-1 ) ; else
48265: LD_VAR 0 2
48269: PPUSH
48270: LD_STRING D2-Sw-1
48272: PPUSH
48273: CALL_OW 88
48277: GO 48321
48279: POP
// begin if GetSex ( temp_unit ) = sex_male then
48280: LD_VAR 0 2
48284: PPUSH
48285: CALL_OW 258
48289: PUSH
48290: LD_INT 1
48292: EQUAL
48293: IFFALSE 48309
// Say ( temp_unit , D2-SomeM-2 ) else
48295: LD_VAR 0 2
48299: PPUSH
48300: LD_STRING D2-SomeM-2
48302: PPUSH
48303: CALL_OW 88
48307: GO 48321
// Say ( temp_unit , D2-SomeF-2 ) ;
48309: LD_VAR 0 2
48313: PPUSH
48314: LD_STRING D2-SomeF-2
48316: PPUSH
48317: CALL_OW 88
// end ; end ; DialogueOff ;
48321: CALL_OW 7
// SetSide ( scout , scout_side ) ;
48325: LD_VAR 0 7
48329: PPUSH
48330: LD_EXP 8
48334: PPUSH
48335: CALL_OW 235
// repeat wait ( 0 0$0.7 ) ;
48339: LD_INT 24
48341: PPUSH
48342: CALL_OW 67
// if IsPlaced ( scout ) then
48346: LD_VAR 0 7
48350: PPUSH
48351: CALL_OW 305
48355: IFFALSE 48460
// case GetType ( IsInUnit ( scout ) ) of unit_building :
48357: LD_VAR 0 7
48361: PPUSH
48362: CALL_OW 310
48366: PPUSH
48367: CALL_OW 247
48371: PUSH
48372: LD_INT 3
48374: DOUBLE
48375: EQUAL
48376: IFTRUE 48380
48378: GO 48392
48380: POP
// ComExitBuilding ( scout ) ; unit_vehicle :
48381: LD_VAR 0 7
48385: PPUSH
48386: CALL_OW 122
48390: GO 48460
48392: LD_INT 2
48394: DOUBLE
48395: EQUAL
48396: IFTRUE 48400
48398: GO 48412
48400: POP
// ComExitVehicle ( scout ) ; else
48401: LD_VAR 0 7
48405: PPUSH
48406: CALL_OW 121
48410: GO 48460
48412: POP
// begin if GetDistUnitXY ( scout , 143 , 117 ) > 1 then
48413: LD_VAR 0 7
48417: PPUSH
48418: LD_INT 143
48420: PPUSH
48421: LD_INT 117
48423: PPUSH
48424: CALL_OW 297
48428: PUSH
48429: LD_INT 1
48431: GREATER
48432: IFFALSE 48451
// ComMoveXY ( scout , 143 , 117 ) else
48434: LD_VAR 0 7
48438: PPUSH
48439: LD_INT 143
48441: PPUSH
48442: LD_INT 117
48444: PPUSH
48445: CALL_OW 111
48449: GO 48460
// RemoveUnit ( scout ) ;
48451: LD_VAR 0 7
48455: PPUSH
48456: CALL_OW 64
// end ; end ; if IsPlaced ( cargo_bay ) then
48460: LD_VAR 0 5
48464: PPUSH
48465: CALL_OW 305
48469: IFFALSE 48566
// if GetResourceAmountXY ( crate_hex [ 1 ] , crate_hex [ 2 ] ) > 0 then
48471: LD_VAR 0 8
48475: PUSH
48476: LD_INT 1
48478: ARRAY
48479: PPUSH
48480: LD_VAR 0 8
48484: PUSH
48485: LD_INT 2
48487: ARRAY
48488: PPUSH
48489: CALL_OW 284
48493: PUSH
48494: LD_INT 0
48496: GREATER
48497: IFFALSE 48528
// ComGet ( cargo_bay , crate_hex [ 1 ] , crate_hex [ 2 ] ) else
48499: LD_VAR 0 5
48503: PPUSH
48504: LD_VAR 0 8
48508: PUSH
48509: LD_INT 1
48511: ARRAY
48512: PPUSH
48513: LD_VAR 0 8
48517: PUSH
48518: LD_INT 2
48520: ARRAY
48521: PPUSH
48522: CALL_OW 160
48526: GO 48566
// if not IsInArea ( cargo_bay , ru_enter_area ) then
48528: LD_VAR 0 5
48532: PPUSH
48533: LD_INT 10
48535: PPUSH
48536: CALL_OW 308
48540: NOT
48541: IFFALSE 48557
// ComMoveToArea ( cargo_bay , ru_enter_area ) else
48543: LD_VAR 0 5
48547: PPUSH
48548: LD_INT 10
48550: PPUSH
48551: CALL_OW 113
48555: GO 48566
// DestroyUnit ( cargo_bay ) ;
48557: LD_VAR 0 5
48561: PPUSH
48562: CALL_OW 65
// until not IsPlaced ( scout ) and not IsPlaced ( cargo_bay ) ;
48566: LD_VAR 0 7
48570: PPUSH
48571: CALL_OW 305
48575: NOT
48576: PUSH
48577: LD_VAR 0 5
48581: PPUSH
48582: CALL_OW 305
48586: NOT
48587: AND
48588: IFFALSE 48339
// wait ( Rand ( 5 5$0 , 6 6$0 ) ) ;
48590: LD_INT 10500
48592: PPUSH
48593: LD_INT 12600
48595: PPUSH
48596: CALL_OW 12
48600: PPUSH
48601: CALL_OW 67
// SetDir ( scout , 5 ) ;
48605: LD_VAR 0 7
48609: PPUSH
48610: LD_INT 5
48612: PPUSH
48613: CALL_OW 233
// i = 1 ;
48617: LD_ADDR_VAR 0 1
48621: PUSH
48622: LD_INT 1
48624: ST_TO_ADDR
// while not IsPlaced ( scout ) do
48625: LD_VAR 0 7
48629: PPUSH
48630: CALL_OW 305
48634: NOT
48635: IFFALSE 48683
// begin PlaceUnitXYR ( scout , 143 , 117 , i , false ) ;
48637: LD_VAR 0 7
48641: PPUSH
48642: LD_INT 143
48644: PPUSH
48645: LD_INT 117
48647: PPUSH
48648: LD_VAR 0 1
48652: PPUSH
48653: LD_INT 0
48655: PPUSH
48656: CALL_OW 50
// i = i + 1 ;
48660: LD_ADDR_VAR 0 1
48664: PUSH
48665: LD_VAR 0 1
48669: PUSH
48670: LD_INT 1
48672: PLUS
48673: ST_TO_ADDR
// wait ( 0 0$2 ) ;
48674: LD_INT 70
48676: PPUSH
48677: CALL_OW 67
// end ;
48681: GO 48625
// while not See ( you , scout ) do
48683: LD_EXP 3
48687: PPUSH
48688: LD_VAR 0 7
48692: PPUSH
48693: CALL_OW 292
48697: NOT
48698: IFFALSE 48770
// begin wait ( 0 0$1 ) ;
48700: LD_INT 35
48702: PPUSH
48703: CALL_OW 67
// temp_unit = NearestUnitToUnit ( FilterAllUnits ( [ f_side , you ] ) , scout ) ;
48707: LD_ADDR_VAR 0 2
48711: PUSH
48712: LD_INT 22
48714: PUSH
48715: LD_EXP 3
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PPUSH
48724: CALL_OW 69
48728: PPUSH
48729: LD_VAR 0 7
48733: PPUSH
48734: CALL_OW 74
48738: ST_TO_ADDR
// ComMoveXY ( scout , GetX ( temp_unit ) , GetY ( temp_unit ) ) ;
48739: LD_VAR 0 7
48743: PPUSH
48744: LD_VAR 0 2
48748: PPUSH
48749: CALL_OW 250
48753: PPUSH
48754: LD_VAR 0 2
48758: PPUSH
48759: CALL_OW 251
48763: PPUSH
48764: CALL_OW 111
// end ;
48768: GO 48683
// CenterOnUnits ( scout ) ;
48770: LD_VAR 0 7
48774: PPUSH
48775: CALL_OW 85
// SetSide ( scout , you ) ;
48779: LD_VAR 0 7
48783: PPUSH
48784: LD_EXP 3
48788: PPUSH
48789: CALL_OW 235
// ComStop ( scout ) ;
48793: LD_VAR 0 7
48797: PPUSH
48798: CALL_OW 141
// DialogueOn ;
48802: CALL_OW 6
// Say ( Heike , D3-H-1 ) ;
48806: LD_EXP 10
48810: PPUSH
48811: LD_STRING D3-H-1
48813: PPUSH
48814: CALL_OW 88
// temp_unit = scout ;
48818: LD_ADDR_VAR 0 2
48822: PUSH
48823: LD_VAR 0 7
48827: ST_TO_ADDR
// case temp_unit of Sonya :
48828: LD_VAR 0 2
48832: PUSH
48833: LD_EXP 11
48837: DOUBLE
48838: EQUAL
48839: IFTRUE 48843
48841: GO 48858
48843: POP
// Say ( temp_unit , D3-So-1 ) ; Oswald :
48844: LD_VAR 0 2
48848: PPUSH
48849: LD_STRING D3-So-1
48851: PPUSH
48852: CALL_OW 88
48856: GO 49288
48858: LD_EXP 12
48862: DOUBLE
48863: EQUAL
48864: IFTRUE 48868
48866: GO 48903
48868: POP
// begin if oswald_is_substitute then
48869: LD_EXP 81
48873: IFFALSE 48889
// Say ( temp_unit , D3-Os_alt-1 ) else
48875: LD_VAR 0 2
48879: PPUSH
48880: LD_STRING D3-Os_alt-1
48882: PPUSH
48883: CALL_OW 88
48887: GO 48901
// Say ( temp_unit , D3-Os-1 ) ;
48889: LD_VAR 0 2
48893: PPUSH
48894: LD_STRING D3-Os-1
48896: PPUSH
48897: CALL_OW 88
// end ; Ralph :
48901: GO 49288
48903: LD_EXP 13
48907: DOUBLE
48908: EQUAL
48909: IFTRUE 48913
48911: GO 48977
48913: POP
// begin Say ( temp_unit , D3-Ra-1 ) ;
48914: LD_VAR 0 2
48918: PPUSH
48919: LD_STRING D3-Ra-1
48921: PPUSH
48922: CALL_OW 88
// if IsOk ( Sonya ) then
48926: LD_EXP 11
48930: PPUSH
48931: CALL_OW 302
48935: IFFALSE 48951
// Say ( Sonya , D3-So-2a ) else
48937: LD_EXP 11
48941: PPUSH
48942: LD_STRING D3-So-2a
48944: PPUSH
48945: CALL_OW 88
48949: GO 48963
// Say ( Heike , D3-H-2a ) ;
48951: LD_EXP 10
48955: PPUSH
48956: LD_STRING D3-H-2a
48958: PPUSH
48959: CALL_OW 88
// Say ( Ralph , D3-Ra-2 ) ;
48963: LD_EXP 13
48967: PPUSH
48968: LD_STRING D3-Ra-2
48970: PPUSH
48971: CALL_OW 88
// end ; Kowalski :
48975: GO 49288
48977: LD_EXP 14
48981: DOUBLE
48982: EQUAL
48983: IFTRUE 48987
48985: GO 49002
48987: POP
// Say ( temp_unit , D3-Ko-1 ) ; Evelyn :
48988: LD_VAR 0 2
48992: PPUSH
48993: LD_STRING D3-Ko-1
48995: PPUSH
48996: CALL_OW 88
49000: GO 49288
49002: LD_EXP 15
49006: DOUBLE
49007: EQUAL
49008: IFTRUE 49012
49010: GO 49027
49012: POP
// Say ( temp_unit , D3-Ev-1 ) ; Suze :
49013: LD_VAR 0 2
49017: PPUSH
49018: LD_STRING D3-Ev-1
49020: PPUSH
49021: CALL_OW 88
49025: GO 49288
49027: LD_EXP 16
49031: DOUBLE
49032: EQUAL
49033: IFTRUE 49037
49035: GO 49052
49037: POP
// Say ( temp_unit , D3-Su-1 ) ; Olaf :
49038: LD_VAR 0 2
49042: PPUSH
49043: LD_STRING D3-Su-1
49045: PPUSH
49046: CALL_OW 88
49050: GO 49288
49052: LD_EXP 17
49056: DOUBLE
49057: EQUAL
49058: IFTRUE 49062
49060: GO 49077
49062: POP
// Say ( temp_unit , D3-Olaf-1 ) ; Kurt :
49063: LD_VAR 0 2
49067: PPUSH
49068: LD_STRING D3-Olaf-1
49070: PPUSH
49071: CALL_OW 88
49075: GO 49288
49077: LD_EXP 18
49081: DOUBLE
49082: EQUAL
49083: IFTRUE 49087
49085: GO 49122
49087: POP
// begin if kurt_is_substitute then
49088: LD_EXP 82
49092: IFFALSE 49108
// Say ( temp_unit , D3-Ku_alt-1 ) else
49094: LD_VAR 0 2
49098: PPUSH
49099: LD_STRING D3-Ku_alt-1
49101: PPUSH
49102: CALL_OW 88
49106: GO 49120
// Say ( temp_unit , D3-Ku-1 ) ;
49108: LD_VAR 0 2
49112: PPUSH
49113: LD_STRING D3-Ku-1
49115: PPUSH
49116: CALL_OW 88
// end ; Dwayne :
49120: GO 49288
49122: LD_EXP 19
49126: DOUBLE
49127: EQUAL
49128: IFTRUE 49132
49130: GO 49147
49132: POP
// Say ( temp_unit , D3-Dw-1 ) ; MarkB :
49133: LD_VAR 0 2
49137: PPUSH
49138: LD_STRING D3-Dw-1
49140: PPUSH
49141: CALL_OW 88
49145: GO 49288
49147: LD_EXP 20
49151: DOUBLE
49152: EQUAL
49153: IFTRUE 49157
49155: GO 49172
49157: POP
// Say ( temp_unit , D3-Ma-1 ) ; Aviradze :
49158: LD_VAR 0 2
49162: PPUSH
49163: LD_STRING D3-Ma-1
49165: PPUSH
49166: CALL_OW 88
49170: GO 49288
49172: LD_EXP 21
49176: DOUBLE
49177: EQUAL
49178: IFTRUE 49182
49180: GO 49221
49182: POP
// begin Say ( temp_unit , D3-Av-1 ) ;
49183: LD_VAR 0 2
49187: PPUSH
49188: LD_STRING D3-Av-1
49190: PPUSH
49191: CALL_OW 88
// Say ( Heike , D3-H-2b ) ;
49195: LD_EXP 10
49199: PPUSH
49200: LD_STRING D3-H-2b
49202: PPUSH
49203: CALL_OW 88
// Say ( temp_unit , D3-Av-2 ) ;
49207: LD_VAR 0 2
49211: PPUSH
49212: LD_STRING D3-Av-2
49214: PPUSH
49215: CALL_OW 88
// end ; Swansson :
49219: GO 49288
49221: LD_EXP 22
49225: DOUBLE
49226: EQUAL
49227: IFTRUE 49231
49229: GO 49246
49231: POP
// Say ( temp_unit , D3-Sw-1 ) ; else
49232: LD_VAR 0 2
49236: PPUSH
49237: LD_STRING D3-Sw-1
49239: PPUSH
49240: CALL_OW 88
49244: GO 49288
49246: POP
// begin if GetSex ( temp_unit ) = sex_male then
49247: LD_VAR 0 2
49251: PPUSH
49252: CALL_OW 258
49256: PUSH
49257: LD_INT 1
49259: EQUAL
49260: IFFALSE 49276
// Say ( temp_unit , D3-SomeM-1 ) else
49262: LD_VAR 0 2
49266: PPUSH
49267: LD_STRING D3-SomeM-1
49269: PPUSH
49270: CALL_OW 88
49274: GO 49288
// Say ( temp_unit , D3-SomeF-1 ) ;
49276: LD_VAR 0 2
49280: PPUSH
49281: LD_STRING D3-SomeF-1
49283: PPUSH
49284: CALL_OW 88
// end ; end ; if SeeGreyArea ( you , Ru_base ) then
49288: LD_EXP 3
49292: PPUSH
49293: LD_INT 3
49295: PPUSH
49296: CALL_OW 452
49300: IFFALSE 49316
// begin Say ( Heike , D3-H-a-2 ) ;
49302: LD_EXP 10
49306: PPUSH
49307: LD_STRING D3-H-a-2
49309: PPUSH
49310: CALL_OW 88
// end else
49314: GO 49328
// begin Say ( Heike , D3-H-b-2 ) ;
49316: LD_EXP 10
49320: PPUSH
49321: LD_STRING D3-H-b-2
49323: PPUSH
49324: CALL_OW 88
// end ; case temp_unit of Sonya :
49328: LD_VAR 0 2
49332: PUSH
49333: LD_EXP 11
49337: DOUBLE
49338: EQUAL
49339: IFTRUE 49343
49341: GO 49358
49343: POP
// Say ( temp_unit , D3-So-2 ) ; Oswald :
49344: LD_VAR 0 2
49348: PPUSH
49349: LD_STRING D3-So-2
49351: PPUSH
49352: CALL_OW 88
49356: GO 49715
49358: LD_EXP 12
49362: DOUBLE
49363: EQUAL
49364: IFTRUE 49368
49366: GO 49403
49368: POP
// begin if oswald_is_substitute then
49369: LD_EXP 81
49373: IFFALSE 49389
// Say ( temp_unit , D3-Os_alt-2 ) else
49375: LD_VAR 0 2
49379: PPUSH
49380: LD_STRING D3-Os_alt-2
49382: PPUSH
49383: CALL_OW 88
49387: GO 49401
// Say ( temp_unit , D3-Os-2 ) ;
49389: LD_VAR 0 2
49393: PPUSH
49394: LD_STRING D3-Os-2
49396: PPUSH
49397: CALL_OW 88
// end ; Ralph :
49401: GO 49715
49403: LD_EXP 13
49407: DOUBLE
49408: EQUAL
49409: IFTRUE 49413
49411: GO 49428
49413: POP
// Say ( temp_unit , D3-Ra-3 ) ; Kowalski :
49414: LD_VAR 0 2
49418: PPUSH
49419: LD_STRING D3-Ra-3
49421: PPUSH
49422: CALL_OW 88
49426: GO 49715
49428: LD_EXP 14
49432: DOUBLE
49433: EQUAL
49434: IFTRUE 49438
49436: GO 49453
49438: POP
// Say ( temp_unit , D3-Ko-2 ) ; Evelyn :
49439: LD_VAR 0 2
49443: PPUSH
49444: LD_STRING D3-Ko-2
49446: PPUSH
49447: CALL_OW 88
49451: GO 49715
49453: LD_EXP 15
49457: DOUBLE
49458: EQUAL
49459: IFTRUE 49463
49461: GO 49478
49463: POP
// Say ( temp_unit , D3-Ev-2 ) ; Suze :
49464: LD_VAR 0 2
49468: PPUSH
49469: LD_STRING D3-Ev-2
49471: PPUSH
49472: CALL_OW 88
49476: GO 49715
49478: LD_EXP 16
49482: DOUBLE
49483: EQUAL
49484: IFTRUE 49488
49486: GO 49503
49488: POP
// Say ( temp_unit , D3-Su-2 ) ; Olaf :
49489: LD_VAR 0 2
49493: PPUSH
49494: LD_STRING D3-Su-2
49496: PPUSH
49497: CALL_OW 88
49501: GO 49715
49503: LD_EXP 17
49507: DOUBLE
49508: EQUAL
49509: IFTRUE 49513
49511: GO 49528
49513: POP
// Say ( temp_unit , D3-Olaf-2 ) ; Kurt :
49514: LD_VAR 0 2
49518: PPUSH
49519: LD_STRING D3-Olaf-2
49521: PPUSH
49522: CALL_OW 88
49526: GO 49715
49528: LD_EXP 18
49532: DOUBLE
49533: EQUAL
49534: IFTRUE 49538
49536: GO 49573
49538: POP
// begin if kurt_is_substitute then
49539: LD_EXP 82
49543: IFFALSE 49559
// Say ( temp_unit , D3-Ku_alt-2 ) else
49545: LD_VAR 0 2
49549: PPUSH
49550: LD_STRING D3-Ku_alt-2
49552: PPUSH
49553: CALL_OW 88
49557: GO 49571
// Say ( temp_unit , D3-Ku-2 ) ;
49559: LD_VAR 0 2
49563: PPUSH
49564: LD_STRING D3-Ku-2
49566: PPUSH
49567: CALL_OW 88
// end ; Dwayne :
49571: GO 49715
49573: LD_EXP 19
49577: DOUBLE
49578: EQUAL
49579: IFTRUE 49583
49581: GO 49598
49583: POP
// Say ( temp_unit , D3-Dw-2 ) ; MarkB :
49584: LD_VAR 0 2
49588: PPUSH
49589: LD_STRING D3-Dw-2
49591: PPUSH
49592: CALL_OW 88
49596: GO 49715
49598: LD_EXP 20
49602: DOUBLE
49603: EQUAL
49604: IFTRUE 49608
49606: GO 49623
49608: POP
// Say ( temp_unit , D3-Ma-2 ) ; Aviradze :
49609: LD_VAR 0 2
49613: PPUSH
49614: LD_STRING D3-Ma-2
49616: PPUSH
49617: CALL_OW 88
49621: GO 49715
49623: LD_EXP 21
49627: DOUBLE
49628: EQUAL
49629: IFTRUE 49633
49631: GO 49648
49633: POP
// Say ( temp_unit , D3-Av-3 ) ; Swansson :
49634: LD_VAR 0 2
49638: PPUSH
49639: LD_STRING D3-Av-3
49641: PPUSH
49642: CALL_OW 88
49646: GO 49715
49648: LD_EXP 22
49652: DOUBLE
49653: EQUAL
49654: IFTRUE 49658
49656: GO 49673
49658: POP
// Say ( temp_unit , D3-Sw-2 ) ; else
49659: LD_VAR 0 2
49663: PPUSH
49664: LD_STRING D3-Sw-2
49666: PPUSH
49667: CALL_OW 88
49671: GO 49715
49673: POP
// begin if GetSex ( temp_unit ) = sex_male then
49674: LD_VAR 0 2
49678: PPUSH
49679: CALL_OW 258
49683: PUSH
49684: LD_INT 1
49686: EQUAL
49687: IFFALSE 49703
// Say ( temp_unit , D3-SomeM-2 ) else
49689: LD_VAR 0 2
49693: PPUSH
49694: LD_STRING D3-SomeM-2
49696: PPUSH
49697: CALL_OW 88
49701: GO 49715
// Say ( temp_unit , D3-SomeF-2 ) ;
49703: LD_VAR 0 2
49707: PPUSH
49708: LD_STRING D3-SomeF-2
49710: PPUSH
49711: CALL_OW 88
// end ; end ; Say ( Heike , D3-H-3 ) ;
49715: LD_EXP 10
49719: PPUSH
49720: LD_STRING D3-H-3
49722: PPUSH
49723: CALL_OW 88
// temp_list = UnitFilter ( [ Sonya , Ralph , Kowalski , Suze , Olaf , Dwayne ] , [ f_ok ] ) ;
49727: LD_ADDR_VAR 0 3
49731: PUSH
49732: LD_EXP 11
49736: PUSH
49737: LD_EXP 13
49741: PUSH
49742: LD_EXP 14
49746: PUSH
49747: LD_EXP 16
49751: PUSH
49752: LD_EXP 17
49756: PUSH
49757: LD_EXP 19
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: PPUSH
49770: LD_INT 50
49772: PUSH
49773: EMPTY
49774: LIST
49775: PPUSH
49776: CALL_OW 72
49780: ST_TO_ADDR
// if temp_list > 0 then
49781: LD_VAR 0 3
49785: PUSH
49786: LD_INT 0
49788: GREATER
49789: IFFALSE 50020
// begin temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
49791: LD_ADDR_VAR 0 2
49795: PUSH
49796: LD_VAR 0 3
49800: PUSH
49801: LD_INT 1
49803: PPUSH
49804: LD_VAR 0 3
49808: PPUSH
49809: CALL_OW 12
49813: ARRAY
49814: ST_TO_ADDR
// case temp_unit of Sonya :
49815: LD_VAR 0 2
49819: PUSH
49820: LD_EXP 11
49824: DOUBLE
49825: EQUAL
49826: IFTRUE 49830
49828: GO 49845
49830: POP
// Say ( temp_unit , D3-So-3 ) ; Ralph :
49831: LD_VAR 0 2
49835: PPUSH
49836: LD_STRING D3-So-3
49838: PPUSH
49839: CALL_OW 88
49843: GO 49971
49845: LD_EXP 13
49849: DOUBLE
49850: EQUAL
49851: IFTRUE 49855
49853: GO 49870
49855: POP
// Say ( temp_unit , D3-Ra-4 ) ; Kowalski :
49856: LD_VAR 0 2
49860: PPUSH
49861: LD_STRING D3-Ra-4
49863: PPUSH
49864: CALL_OW 88
49868: GO 49971
49870: LD_EXP 14
49874: DOUBLE
49875: EQUAL
49876: IFTRUE 49880
49878: GO 49895
49880: POP
// Say ( temp_unit , D3-Ko-3 ) ; Suze :
49881: LD_VAR 0 2
49885: PPUSH
49886: LD_STRING D3-Ko-3
49888: PPUSH
49889: CALL_OW 88
49893: GO 49971
49895: LD_EXP 16
49899: DOUBLE
49900: EQUAL
49901: IFTRUE 49905
49903: GO 49920
49905: POP
// Say ( temp_unit , D3-Su-3 ) ; Olaf :
49906: LD_VAR 0 2
49910: PPUSH
49911: LD_STRING D3-Su-3
49913: PPUSH
49914: CALL_OW 88
49918: GO 49971
49920: LD_EXP 17
49924: DOUBLE
49925: EQUAL
49926: IFTRUE 49930
49928: GO 49945
49930: POP
// Say ( temp_unit , D3-Olaf-3 ) ; Dwayne :
49931: LD_VAR 0 2
49935: PPUSH
49936: LD_STRING D3-Olaf-3
49938: PPUSH
49939: CALL_OW 88
49943: GO 49971
49945: LD_EXP 19
49949: DOUBLE
49950: EQUAL
49951: IFTRUE 49955
49953: GO 49970
49955: POP
// Say ( temp_unit , D3-Dw-3 ) ; end ;
49956: LD_VAR 0 2
49960: PPUSH
49961: LD_STRING D3-Dw-3
49963: PPUSH
49964: CALL_OW 88
49968: GO 49971
49970: POP
// if temp_unit in [ Sonya , Olaf ] then
49971: LD_VAR 0 2
49975: PUSH
49976: LD_EXP 11
49980: PUSH
49981: LD_EXP 17
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: IN
49990: IFFALSE 50006
// Say ( Heike , D3-H-a-4 ) else
49992: LD_EXP 10
49996: PPUSH
49997: LD_STRING D3-H-a-4
49999: PPUSH
50000: CALL_OW 88
50004: GO 50018
// Say ( Heike , D3-H-b-4 ) ;
50006: LD_EXP 10
50010: PPUSH
50011: LD_STRING D3-H-b-4
50013: PPUSH
50014: CALL_OW 88
// end else
50018: GO 50032
// begin Say ( Heike , D3-H-c-4 ) ;
50020: LD_EXP 10
50024: PPUSH
50025: LD_STRING D3-H-c-4
50027: PPUSH
50028: CALL_OW 88
// end ; Say ( Heike , D3-H-5 ) ;
50032: LD_EXP 10
50036: PPUSH
50037: LD_STRING D3-H-5
50039: PPUSH
50040: CALL_OW 88
// if yashin_alive then
50044: LD_EXP 86
50048: IFFALSE 50449
// begin case temp_unit of Sonya :
50050: LD_VAR 0 2
50054: PUSH
50055: LD_EXP 11
50059: DOUBLE
50060: EQUAL
50061: IFTRUE 50065
50063: GO 50080
50065: POP
// Say ( temp_unit , D3-So-a-4 ) ; Oswald :
50066: LD_VAR 0 2
50070: PPUSH
50071: LD_STRING D3-So-a-4
50073: PPUSH
50074: CALL_OW 88
50078: GO 50437
50080: LD_EXP 12
50084: DOUBLE
50085: EQUAL
50086: IFTRUE 50090
50088: GO 50125
50090: POP
// begin if oswald_is_substitute then
50091: LD_EXP 81
50095: IFFALSE 50111
// Say ( temp_unit , D3-Os_alt-a-3 ) else
50097: LD_VAR 0 2
50101: PPUSH
50102: LD_STRING D3-Os_alt-a-3
50104: PPUSH
50105: CALL_OW 88
50109: GO 50123
// Say ( temp_unit , D3-Os-a-3 ) ;
50111: LD_VAR 0 2
50115: PPUSH
50116: LD_STRING D3-Os-a-3
50118: PPUSH
50119: CALL_OW 88
// end ; Ralph :
50123: GO 50437
50125: LD_EXP 13
50129: DOUBLE
50130: EQUAL
50131: IFTRUE 50135
50133: GO 50150
50135: POP
// Say ( temp_unit , D3-Ra-a-5 ) ; Kowalski :
50136: LD_VAR 0 2
50140: PPUSH
50141: LD_STRING D3-Ra-a-5
50143: PPUSH
50144: CALL_OW 88
50148: GO 50437
50150: LD_EXP 14
50154: DOUBLE
50155: EQUAL
50156: IFTRUE 50160
50158: GO 50175
50160: POP
// Say ( temp_unit , D3-Ko-a-4 ) ; Evelyn :
50161: LD_VAR 0 2
50165: PPUSH
50166: LD_STRING D3-Ko-a-4
50168: PPUSH
50169: CALL_OW 88
50173: GO 50437
50175: LD_EXP 15
50179: DOUBLE
50180: EQUAL
50181: IFTRUE 50185
50183: GO 50200
50185: POP
// Say ( temp_unit , D3-Ev-a-3 ) ; Suze :
50186: LD_VAR 0 2
50190: PPUSH
50191: LD_STRING D3-Ev-a-3
50193: PPUSH
50194: CALL_OW 88
50198: GO 50437
50200: LD_EXP 16
50204: DOUBLE
50205: EQUAL
50206: IFTRUE 50210
50208: GO 50225
50210: POP
// Say ( temp_unit , D3-Su-a-4 ) ; Olaf :
50211: LD_VAR 0 2
50215: PPUSH
50216: LD_STRING D3-Su-a-4
50218: PPUSH
50219: CALL_OW 88
50223: GO 50437
50225: LD_EXP 17
50229: DOUBLE
50230: EQUAL
50231: IFTRUE 50235
50233: GO 50250
50235: POP
// Say ( temp_unit , D3-Olaf-a-4 ) ; Kurt :
50236: LD_VAR 0 2
50240: PPUSH
50241: LD_STRING D3-Olaf-a-4
50243: PPUSH
50244: CALL_OW 88
50248: GO 50437
50250: LD_EXP 18
50254: DOUBLE
50255: EQUAL
50256: IFTRUE 50260
50258: GO 50295
50260: POP
// begin if kurt_is_substitute then
50261: LD_EXP 82
50265: IFFALSE 50281
// Say ( temp_unit , D3-Ku_alt-a-3 ) else
50267: LD_VAR 0 2
50271: PPUSH
50272: LD_STRING D3-Ku_alt-a-3
50274: PPUSH
50275: CALL_OW 88
50279: GO 50293
// Say ( temp_unit , D3-Ku-a-3 ) ;
50281: LD_VAR 0 2
50285: PPUSH
50286: LD_STRING D3-Ku-a-3
50288: PPUSH
50289: CALL_OW 88
// end ; Dwayne :
50293: GO 50437
50295: LD_EXP 19
50299: DOUBLE
50300: EQUAL
50301: IFTRUE 50305
50303: GO 50320
50305: POP
// Say ( temp_unit , D3-Dw-a-4 ) ; MarkB :
50306: LD_VAR 0 2
50310: PPUSH
50311: LD_STRING D3-Dw-a-4
50313: PPUSH
50314: CALL_OW 88
50318: GO 50437
50320: LD_EXP 20
50324: DOUBLE
50325: EQUAL
50326: IFTRUE 50330
50328: GO 50345
50330: POP
// Say ( temp_unit , D3-Ma-a-3 ) ; Aviradze :
50331: LD_VAR 0 2
50335: PPUSH
50336: LD_STRING D3-Ma-a-3
50338: PPUSH
50339: CALL_OW 88
50343: GO 50437
50345: LD_EXP 21
50349: DOUBLE
50350: EQUAL
50351: IFTRUE 50355
50353: GO 50370
50355: POP
// Say ( temp_unit , D3-Av-a-4 ) ; Swansson :
50356: LD_VAR 0 2
50360: PPUSH
50361: LD_STRING D3-Av-a-4
50363: PPUSH
50364: CALL_OW 88
50368: GO 50437
50370: LD_EXP 22
50374: DOUBLE
50375: EQUAL
50376: IFTRUE 50380
50378: GO 50395
50380: POP
// Say ( temp_unit , D3-Sw-a-3 ) ; else
50381: LD_VAR 0 2
50385: PPUSH
50386: LD_STRING D3-Sw-a-3
50388: PPUSH
50389: CALL_OW 88
50393: GO 50437
50395: POP
// begin if GetSex ( temp_unit ) = sex_male then
50396: LD_VAR 0 2
50400: PPUSH
50401: CALL_OW 258
50405: PUSH
50406: LD_INT 1
50408: EQUAL
50409: IFFALSE 50425
// Say ( temp_unit , D3-SomeM-a-3 ) else
50411: LD_VAR 0 2
50415: PPUSH
50416: LD_STRING D3-SomeM-a-3
50418: PPUSH
50419: CALL_OW 88
50423: GO 50437
// Say ( temp_unit , D3-SomeF-a-3 ) ;
50425: LD_VAR 0 2
50429: PPUSH
50430: LD_STRING D3-SomeF-a-3
50432: PPUSH
50433: CALL_OW 88
// end ; end ; Say ( Heike , D3-H-a-6 ) ;
50437: LD_EXP 10
50441: PPUSH
50442: LD_STRING D3-H-a-6
50444: PPUSH
50445: CALL_OW 88
// end ; DialogueOff ;
50449: CALL_OW 7
// wait ( 0 0$0.2 ) ;
50453: LD_INT 7
50455: PPUSH
50456: CALL_OW 67
// ChangeMissionObjectives ( M2 ) ;
50460: LD_STRING M2
50462: PPUSH
50463: CALL_OW 337
// scout_event_over = true ;
50467: LD_ADDR_EXP 93
50471: PUSH
50472: LD_INT 1
50474: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = russians_allowed_to_attack_gensher_time + tick ;
50475: LD_ADDR_EXP 94
50479: PUSH
50480: LD_EXP 94
50484: PUSH
50485: LD_OWVAR 1
50489: PLUS
50490: ST_TO_ADDR
// end ;
50491: PPOPN 8
50493: END
// every 0 0$1 + 0 0$0.6 do var i ; var ignore_yellow_list , ignore_red_list ;
50494: GO 50496
50496: DISABLE
50497: LD_INT 0
50499: PPUSH
50500: PPUSH
50501: PPUSH
// begin ignore_yellow_list = [ ] ;
50502: LD_ADDR_VAR 0 2
50506: PUSH
50507: EMPTY
50508: ST_TO_ADDR
// ignore_red_list = [ ] ;
50509: LD_ADDR_VAR 0 3
50513: PUSH
50514: EMPTY
50515: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50516: LD_INT 35
50518: PPUSH
50519: CALL_OW 67
// if game_phase > 1 then
50523: LD_EXP 89
50527: PUSH
50528: LD_INT 1
50530: GREATER
50531: IFFALSE 50535
// exit ;
50533: GO 50915
// if ContactTime ( [ you_alt , russians ] ) >= 0 0$8 then
50535: LD_EXP 6
50539: PUSH
50540: LD_EXP 4
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PPUSH
50549: CALL_OW 462
50553: PUSH
50554: LD_INT 280
50556: GREATEREQUAL
50557: IFFALSE 50575
// begin ignore_yellow_list = [ ] ;
50559: LD_ADDR_VAR 0 2
50563: PUSH
50564: EMPTY
50565: ST_TO_ADDR
// ignore_red_list = [ ] ;
50566: LD_ADDR_VAR 0 3
50570: PUSH
50571: EMPTY
50572: ST_TO_ADDR
// continue ;
50573: GO 50516
// end ; for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_human ] ] ) do
50575: LD_ADDR_VAR 0 1
50579: PUSH
50580: LD_INT 22
50582: PUSH
50583: LD_EXP 6
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 21
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PPUSH
50606: CALL_OW 69
50610: PUSH
50611: FOR_IN
50612: IFFALSE 50735
// if GetLives ( i ) <= 250 then
50614: LD_VAR 0 1
50618: PPUSH
50619: CALL_OW 256
50623: PUSH
50624: LD_INT 250
50626: LESSEQUAL
50627: IFFALSE 50674
// begin if not i in ignore_red_list then
50629: LD_VAR 0 1
50633: PUSH
50634: LD_VAR 0 3
50638: IN
50639: NOT
50640: IFFALSE 50672
// begin russian_interference_points = russian_interference_points + 1 ;
50642: LD_ADDR_EXP 97
50646: PUSH
50647: LD_EXP 97
50651: PUSH
50652: LD_INT 1
50654: PLUS
50655: ST_TO_ADDR
// ignore_red_list = ignore_red_list ^ i ;
50656: LD_ADDR_VAR 0 3
50660: PUSH
50661: LD_VAR 0 3
50665: PUSH
50666: LD_VAR 0 1
50670: ADD
50671: ST_TO_ADDR
// end ; end else
50672: GO 50733
// if i in ai_heal_these_humans [ 2 ] then
50674: LD_VAR 0 1
50678: PUSH
50679: LD_EXP 44
50683: PUSH
50684: LD_INT 2
50686: ARRAY
50687: IN
50688: IFFALSE 50733
// begin if not i in ignore_yellow_list then
50690: LD_VAR 0 1
50694: PUSH
50695: LD_VAR 0 2
50699: IN
50700: NOT
50701: IFFALSE 50733
// begin russian_interference_points = russian_interference_points + 1 ;
50703: LD_ADDR_EXP 97
50707: PUSH
50708: LD_EXP 97
50712: PUSH
50713: LD_INT 1
50715: PLUS
50716: ST_TO_ADDR
// ignore_yellow_list = ignore_yellow_list ^ i ;
50717: LD_ADDR_VAR 0 2
50721: PUSH
50722: LD_VAR 0 2
50726: PUSH
50727: LD_VAR 0 1
50731: ADD
50732: ST_TO_ADDR
// end ; end ;
50733: GO 50611
50735: POP
50736: POP
// for i in FilterAllUnits ( [ [ f_side , you_alt ] , [ f_type , unit_building ] ] ) do
50737: LD_ADDR_VAR 0 1
50741: PUSH
50742: LD_INT 22
50744: PUSH
50745: LD_EXP 6
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 21
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PPUSH
50768: CALL_OW 69
50772: PUSH
50773: FOR_IN
50774: IFFALSE 50909
// case GetLives ( i ) of 1 .. 250 :
50776: LD_VAR 0 1
50780: PPUSH
50781: CALL_OW 256
50785: PUSH
50786: LD_INT 1
50788: DOUBLE
50789: GREATEREQUAL
50790: IFFALSE 50798
50792: LD_INT 250
50794: DOUBLE
50795: LESSEQUAL
50796: IFTRUE 50800
50798: GO 50846
50800: POP
// begin if not i in ignore_red_list then
50801: LD_VAR 0 1
50805: PUSH
50806: LD_VAR 0 3
50810: IN
50811: NOT
50812: IFFALSE 50844
// begin russian_interference_points = russian_interference_points + 1 ;
50814: LD_ADDR_EXP 97
50818: PUSH
50819: LD_EXP 97
50823: PUSH
50824: LD_INT 1
50826: PLUS
50827: ST_TO_ADDR
// ignore_red_list = ignore_red_list ^ i ;
50828: LD_ADDR_VAR 0 3
50832: PUSH
50833: LD_VAR 0 3
50837: PUSH
50838: LD_VAR 0 1
50842: ADD
50843: ST_TO_ADDR
// end ; end ; 1 .. 500 :
50844: GO 50907
50846: LD_INT 1
50848: DOUBLE
50849: GREATEREQUAL
50850: IFFALSE 50858
50852: LD_INT 500
50854: DOUBLE
50855: LESSEQUAL
50856: IFTRUE 50860
50858: GO 50906
50860: POP
// begin if not i in ignore_yellow_list then
50861: LD_VAR 0 1
50865: PUSH
50866: LD_VAR 0 2
50870: IN
50871: NOT
50872: IFFALSE 50904
// begin russian_interference_points = russian_interference_points + 1 ;
50874: LD_ADDR_EXP 97
50878: PUSH
50879: LD_EXP 97
50883: PUSH
50884: LD_INT 1
50886: PLUS
50887: ST_TO_ADDR
// ignore_yellow_list = ignore_yellow_list ^ i ;
50888: LD_ADDR_VAR 0 2
50892: PUSH
50893: LD_VAR 0 2
50897: PUSH
50898: LD_VAR 0 1
50902: ADD
50903: ST_TO_ADDR
// end ; end ; end ;
50904: GO 50907
50906: POP
50907: GO 50773
50909: POP
50910: POP
// until false ;
50911: LD_INT 0
50913: IFFALSE 50516
// end ;
50915: PPOPN 3
50917: END
// every 0 0$1 + 0 0$0.3 do var temp_list , hex , time , i ; var hex_list_before , hex_list_after ;
50918: GO 50920
50920: DISABLE
50921: LD_INT 0
50923: PPUSH
50924: PPUSH
50925: PPUSH
50926: PPUSH
50927: PPUSH
50928: PPUSH
// begin time = Rand ( 20 20$0 , 23 23$0 ) ;
50929: LD_ADDR_VAR 0 3
50933: PUSH
50934: LD_INT 42000
50936: PPUSH
50937: LD_INT 48300
50939: PPUSH
50940: CALL_OW 12
50944: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50945: LD_INT 35
50947: PPUSH
50948: CALL_OW 67
// time = time - 0 0$1 ;
50952: LD_ADDR_VAR 0 3
50956: PUSH
50957: LD_VAR 0 3
50961: PUSH
50962: LD_INT 35
50964: MINUS
50965: ST_TO_ADDR
// until time <= 0 0$0 or not 3 in ai_bases ;
50966: LD_VAR 0 3
50970: PUSH
50971: LD_INT 0
50973: LESSEQUAL
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_EXP 59
50982: IN
50983: NOT
50984: OR
50985: IFFALSE 50945
// if difficulty <= 2 and 3 in ai_bases then
50987: LD_OWVAR 67
50991: PUSH
50992: LD_INT 2
50994: LESSEQUAL
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: LD_EXP 59
51003: IN
51004: AND
51005: IFFALSE 51014
// wait ( 4 4$0 ) ;
51007: LD_INT 8400
51009: PPUSH
51010: CALL_OW 67
// if difficulty = 1 and 3 in ai_bases then
51014: LD_OWVAR 67
51018: PUSH
51019: LD_INT 1
51021: EQUAL
51022: PUSH
51023: LD_INT 3
51025: PUSH
51026: LD_EXP 59
51030: IN
51031: AND
51032: IFFALSE 51041
// wait ( 4 4$0 ) ;
51034: LD_INT 8400
51036: PPUSH
51037: CALL_OW 67
// while ( ai_vehicles_attack [ 3 ] > 0 or ai_attacking_scientists [ 3 ] > 0 or ai_attacking_soldiers [ 3 ] > 0 ) and russian_attack_strategy <> 1 and 3 in ai_bases do
51041: LD_EXP 41
51045: PUSH
51046: LD_INT 3
51048: ARRAY
51049: PUSH
51050: LD_INT 0
51052: GREATER
51053: PUSH
51054: LD_EXP 65
51058: PUSH
51059: LD_INT 3
51061: ARRAY
51062: PUSH
51063: LD_INT 0
51065: GREATER
51066: OR
51067: PUSH
51068: LD_EXP 64
51072: PUSH
51073: LD_INT 3
51075: ARRAY
51076: PUSH
51077: LD_INT 0
51079: GREATER
51080: OR
51081: PUSH
51082: LD_EXP 84
51086: PUSH
51087: LD_INT 1
51089: NONEQUAL
51090: AND
51091: PUSH
51092: LD_INT 3
51094: PUSH
51095: LD_EXP 59
51099: IN
51100: AND
51101: IFFALSE 51112
// wait ( 0 0$2 ) ;
51103: LD_INT 70
51105: PPUSH
51106: CALL_OW 67
51110: GO 51041
// if PlayerAtEasternBorder then
51112: CALL 31614 0 0
51116: IFFALSE 51215
// begin hex_list_before = [ [ 148 , 99 ] , [ 153 , 99 ] ] ;
51118: LD_ADDR_VAR 0 5
51122: PUSH
51123: LD_INT 148
51125: PUSH
51126: LD_INT 99
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 153
51135: PUSH
51136: LD_INT 99
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: ST_TO_ADDR
// hex = [ 145 , 58 ] ;
51147: LD_ADDR_VAR 0 2
51151: PUSH
51152: LD_INT 145
51154: PUSH
51155: LD_INT 58
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// hex_list_after = [ [ 140 , 104 ] , [ 126 , 91 ] , [ 123 , 71 ] , [ 118 , 59 ] ] ;
51162: LD_ADDR_VAR 0 6
51166: PUSH
51167: LD_INT 140
51169: PUSH
51170: LD_INT 104
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 126
51179: PUSH
51180: LD_INT 91
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 123
51189: PUSH
51190: LD_INT 71
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 118
51199: PUSH
51200: LD_INT 59
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: ST_TO_ADDR
// end else
51213: GO 51465
// begin hex_list_before = [ [ 134 , 107 ] , [ 121 , 99 ] ] ;
51215: LD_ADDR_VAR 0 5
51219: PUSH
51220: LD_INT 134
51222: PUSH
51223: LD_INT 107
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 121
51232: PUSH
51233: LD_INT 99
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: ST_TO_ADDR
// hex = [ 99 , 108 ] ;
51244: LD_ADDR_VAR 0 2
51248: PUSH
51249: LD_INT 99
51251: PUSH
51252: LD_INT 108
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: ST_TO_ADDR
// hex_list_after = [ [ 122 , 80 ] ] ;
51259: LD_ADDR_VAR 0 6
51263: PUSH
51264: LD_INT 122
51266: PUSH
51267: LD_INT 80
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: EMPTY
51275: LIST
51276: ST_TO_ADDR
// case difficulty of 1 :
51277: LD_OWVAR 67
51281: PUSH
51282: LD_INT 1
51284: DOUBLE
51285: EQUAL
51286: IFTRUE 51290
51288: GO 51350
51290: POP
// hex_list_after = hex_list_after ^ [ [ 143 , 77 ] , [ 143 , 52 ] , [ 134 , 42 ] , [ 115 , 39 ] ] ; 2 :
51291: LD_ADDR_VAR 0 6
51295: PUSH
51296: LD_VAR 0 6
51300: PUSH
51301: LD_INT 143
51303: PUSH
51304: LD_INT 77
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 143
51313: PUSH
51314: LD_INT 52
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 134
51323: PUSH
51324: LD_INT 42
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 115
51333: PUSH
51334: LD_INT 39
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: ADD
51347: ST_TO_ADDR
51348: GO 51465
51350: LD_INT 2
51352: DOUBLE
51353: EQUAL
51354: IFTRUE 51358
51356: GO 51418
51358: POP
// hex_list_after = hex_list_after ^ [ [ 143 , 77 ] , [ 134 , 70 ] , [ 124 , 66 ] , [ 118 , 59 ] ] ; 3 :
51359: LD_ADDR_VAR 0 6
51363: PUSH
51364: LD_VAR 0 6
51368: PUSH
51369: LD_INT 143
51371: PUSH
51372: LD_INT 77
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 134
51381: PUSH
51382: LD_INT 70
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 124
51391: PUSH
51392: LD_INT 66
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 118
51401: PUSH
51402: LD_INT 59
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: ADD
51415: ST_TO_ADDR
51416: GO 51465
51418: LD_INT 3
51420: DOUBLE
51421: EQUAL
51422: IFTRUE 51426
51424: GO 51464
51426: POP
// hex_list_after = hex_list_after ^ [ [ 123 , 71 ] , [ 118 , 59 ] ] ; end ;
51427: LD_ADDR_VAR 0 6
51431: PUSH
51432: LD_VAR 0 6
51436: PUSH
51437: LD_INT 123
51439: PUSH
51440: LD_INT 71
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 118
51449: PUSH
51450: LD_INT 59
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: ADD
51461: ST_TO_ADDR
51462: GO 51465
51464: POP
// end ; temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51465: LD_ADDR_VAR 0 1
51469: PUSH
51470: LD_INT 22
51472: PUSH
51473: LD_EXP 3
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 30
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 30
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PPUSH
51514: CALL_OW 69
51518: ST_TO_ADDR
// if temp_list > 0 then
51519: LD_VAR 0 1
51523: PUSH
51524: LD_INT 0
51526: GREATER
51527: IFFALSE 51577
// hex_list_before = hex_list_before ^ [ [ GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ] ] else
51529: LD_ADDR_VAR 0 5
51533: PUSH
51534: LD_VAR 0 5
51538: PUSH
51539: LD_VAR 0 1
51543: PUSH
51544: LD_INT 1
51546: ARRAY
51547: PPUSH
51548: CALL_OW 250
51552: PUSH
51553: LD_VAR 0 1
51557: PUSH
51558: LD_INT 1
51560: ARRAY
51561: PPUSH
51562: CALL_OW 251
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: EMPTY
51572: LIST
51573: ADD
51574: ST_TO_ADDR
51575: GO 51596
// hex_list_before = hex_list_before ^ [ hex ] ;
51577: LD_ADDR_VAR 0 5
51581: PUSH
51582: LD_VAR 0 5
51586: PUSH
51587: LD_VAR 0 2
51591: PUSH
51592: EMPTY
51593: LIST
51594: ADD
51595: ST_TO_ADDR
// SetDir ( Cornell , 5 ) ;
51596: LD_EXP 26
51600: PPUSH
51601: LD_INT 5
51603: PPUSH
51604: CALL_OW 233
// SetLives ( Cornell , [ 400 , 450 , 500 ] [ difficulty ] ) ;
51608: LD_EXP 26
51612: PPUSH
51613: LD_INT 400
51615: PUSH
51616: LD_INT 450
51618: PUSH
51619: LD_INT 500
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: PUSH
51627: LD_OWVAR 67
51631: ARRAY
51632: PPUSH
51633: CALL_OW 234
// while not PlaceUnitXYR ( Cornell , 146 , 117 , 1 , false ) do
51637: LD_EXP 26
51641: PPUSH
51642: LD_INT 146
51644: PPUSH
51645: LD_INT 117
51647: PPUSH
51648: LD_INT 1
51650: PPUSH
51651: LD_INT 0
51653: PPUSH
51654: CALL_OW 50
51658: NOT
51659: IFFALSE 51670
// wait ( 0 0$2 ) ;
51661: LD_INT 70
51663: PPUSH
51664: CALL_OW 67
51668: GO 51637
// hex = 1 ;
51670: LD_ADDR_VAR 0 2
51674: PUSH
51675: LD_INT 1
51677: ST_TO_ADDR
// time = 1 1$0 ;
51678: LD_ADDR_VAR 0 3
51682: PUSH
51683: LD_INT 2100
51685: ST_TO_ADDR
// repeat wait ( 0 0$0.5 ) ;
51686: LD_INT 18
51688: PPUSH
51689: CALL_OW 67
// if GetDistUnitXY ( Cornell , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) > 2 then
51693: LD_EXP 26
51697: PPUSH
51698: LD_VAR 0 5
51702: PUSH
51703: LD_VAR 0 2
51707: ARRAY
51708: PUSH
51709: LD_INT 1
51711: ARRAY
51712: PPUSH
51713: LD_VAR 0 5
51717: PUSH
51718: LD_VAR 0 2
51722: ARRAY
51723: PUSH
51724: LD_INT 2
51726: ARRAY
51727: PPUSH
51728: CALL_OW 297
51732: PUSH
51733: LD_INT 2
51735: GREATER
51736: IFFALSE 51779
// ComMoveXY ( Cornell , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
51738: LD_EXP 26
51742: PPUSH
51743: LD_VAR 0 5
51747: PUSH
51748: LD_VAR 0 2
51752: ARRAY
51753: PUSH
51754: LD_INT 1
51756: ARRAY
51757: PPUSH
51758: LD_VAR 0 5
51762: PUSH
51763: LD_VAR 0 2
51767: ARRAY
51768: PUSH
51769: LD_INT 2
51771: ARRAY
51772: PPUSH
51773: CALL_OW 111
51777: GO 51840
// if hex < hex_list_before then
51779: LD_VAR 0 2
51783: PUSH
51784: LD_VAR 0 5
51788: LESS
51789: IFFALSE 51807
// hex = hex + 1 else
51791: LD_ADDR_VAR 0 2
51795: PUSH
51796: LD_VAR 0 2
51800: PUSH
51801: LD_INT 1
51803: PLUS
51804: ST_TO_ADDR
51805: GO 51840
// begin time = time - 0 0$0.5 ;
51807: LD_ADDR_VAR 0 3
51811: PUSH
51812: LD_VAR 0 3
51816: PUSH
51817: LD_INT 18
51819: MINUS
51820: ST_TO_ADDR
// if time <= 0 0$0 then
51821: LD_VAR 0 3
51825: PUSH
51826: LD_INT 0
51828: LESSEQUAL
51829: IFFALSE 51840
// KillUnit ( Cornell ) ;
51831: LD_EXP 26
51835: PPUSH
51836: CALL_OW 66
// end ; until ( See ( you , Cornell ) and FilterAllUnits ( [ [ f_side , you ] , [ f_see , americans_alt ] ] ) > 0 ) or IsDead ( Cornell ) ;
51840: LD_EXP 3
51844: PPUSH
51845: LD_EXP 26
51849: PPUSH
51850: CALL_OW 292
51854: PUSH
51855: LD_INT 22
51857: PUSH
51858: LD_EXP 3
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 101
51869: PUSH
51870: LD_EXP 9
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PPUSH
51883: CALL_OW 69
51887: PUSH
51888: LD_INT 0
51890: GREATER
51891: AND
51892: PUSH
51893: LD_EXP 26
51897: PPUSH
51898: CALL_OW 301
51902: OR
51903: IFFALSE 51686
// if See ( you , Cornell ) and FilterAllUnits ( [ [ f_side , you ] , [ f_see , americans_alt ] ] ) > 0 then
51905: LD_EXP 3
51909: PPUSH
51910: LD_EXP 26
51914: PPUSH
51915: CALL_OW 292
51919: PUSH
51920: LD_INT 22
51922: PUSH
51923: LD_EXP 3
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 101
51934: PUSH
51935: LD_EXP 9
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PPUSH
51948: CALL_OW 69
51952: PUSH
51953: LD_INT 0
51955: GREATER
51956: AND
51957: IFFALSE 52280
// begin CenterOnUnits ( Cornell ) ;
51959: LD_EXP 26
51963: PPUSH
51964: CALL_OW 85
// DialogueOn ;
51968: CALL_OW 6
// ForceSay ( Cornell , D5-Cor-1 ) ;
51972: LD_EXP 26
51976: PPUSH
51977: LD_STRING D5-Cor-1
51979: PPUSH
51980: CALL_OW 91
// ForceSay ( Heike , D5-H-1 ) ;
51984: LD_EXP 10
51988: PPUSH
51989: LD_STRING D5-H-1
51991: PPUSH
51992: CALL_OW 91
// DialogueOff ;
51996: CALL_OW 7
// hex = 1 ;
52000: LD_ADDR_VAR 0 2
52004: PUSH
52005: LD_INT 1
52007: ST_TO_ADDR
// repeat if GetDistUnitXY ( Cornell , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) > 3 then
52008: LD_EXP 26
52012: PPUSH
52013: LD_VAR 0 6
52017: PUSH
52018: LD_VAR 0 2
52022: ARRAY
52023: PUSH
52024: LD_INT 1
52026: ARRAY
52027: PPUSH
52028: LD_VAR 0 6
52032: PUSH
52033: LD_VAR 0 2
52037: ARRAY
52038: PUSH
52039: LD_INT 2
52041: ARRAY
52042: PPUSH
52043: CALL_OW 297
52047: PUSH
52048: LD_INT 3
52050: GREATER
52051: IFFALSE 52094
// ComMoveXY ( Cornell , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) else
52053: LD_EXP 26
52057: PPUSH
52058: LD_VAR 0 6
52062: PUSH
52063: LD_VAR 0 2
52067: ARRAY
52068: PUSH
52069: LD_INT 1
52071: ARRAY
52072: PPUSH
52073: LD_VAR 0 6
52077: PUSH
52078: LD_VAR 0 2
52082: ARRAY
52083: PUSH
52084: LD_INT 2
52086: ARRAY
52087: PPUSH
52088: CALL_OW 111
52092: GO 52120
// if hex < hex_list_after then
52094: LD_VAR 0 2
52098: PUSH
52099: LD_VAR 0 6
52103: LESS
52104: IFFALSE 52120
// hex = hex + 1 ;
52106: LD_ADDR_VAR 0 2
52110: PUSH
52111: LD_VAR 0 2
52115: PUSH
52116: LD_INT 1
52118: PLUS
52119: ST_TO_ADDR
// wait ( 0 0$0.5 ) ;
52120: LD_INT 18
52122: PPUSH
52123: CALL_OW 67
// until IsDead ( Cornell ) or ( See ( americans , Cornell ) and FilterAllUnits ( [ [ f_side , americans ] , [ f_see , americans_alt ] ] ) > 0 ) ;
52127: LD_EXP 26
52131: PPUSH
52132: CALL_OW 301
52136: PUSH
52137: LD_EXP 7
52141: PPUSH
52142: LD_EXP 26
52146: PPUSH
52147: CALL_OW 292
52151: PUSH
52152: LD_INT 22
52154: PUSH
52155: LD_EXP 7
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 101
52166: PUSH
52167: LD_EXP 9
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PPUSH
52180: CALL_OW 69
52184: PUSH
52185: LD_INT 0
52187: GREATER
52188: AND
52189: OR
52190: IFFALSE 52008
// if See ( americans , Cornell ) and FilterAllUnits ( [ [ f_side , americans ] , [ f_see , americans_alt ] ] ) > 0 then
52192: LD_EXP 7
52196: PPUSH
52197: LD_EXP 26
52201: PPUSH
52202: CALL_OW 292
52206: PUSH
52207: LD_INT 22
52209: PUSH
52210: LD_EXP 7
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 101
52221: PUSH
52222: LD_EXP 9
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PPUSH
52235: CALL_OW 69
52239: PUSH
52240: LD_INT 0
52242: GREATER
52243: AND
52244: IFFALSE 52280
// begin DialogueOn ;
52246: CALL_OW 6
// SayRadio ( Simms , D4-Sim-2 ) ;
52250: LD_EXP 25
52254: PPUSH
52255: LD_STRING D4-Sim-2
52257: PPUSH
52258: CALL_OW 94
// dwait ( 0 0$0.5 ) ;
52262: LD_INT 18
52264: PPUSH
52265: CALL_OW 68
// YouLost ( PlayerSeen ) ;
52269: LD_STRING PlayerSeen
52271: PPUSH
52272: CALL_OW 104
// DialogueOff ;
52276: CALL_OW 7
// end ; end ; time = Rand ( 22 22$0 , 24 24$0 ) ;
52280: LD_ADDR_VAR 0 3
52284: PUSH
52285: LD_INT 46200
52287: PPUSH
52288: LD_INT 50400
52290: PPUSH
52291: CALL_OW 12
52295: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52296: LD_INT 35
52298: PPUSH
52299: CALL_OW 67
// time = time - 0 0$1 ;
52303: LD_ADDR_VAR 0 3
52307: PUSH
52308: LD_VAR 0 3
52312: PUSH
52313: LD_INT 35
52315: MINUS
52316: ST_TO_ADDR
// until time <= 0 0$0 or not 3 in ai_bases ;
52317: LD_VAR 0 3
52321: PUSH
52322: LD_INT 0
52324: LESSEQUAL
52325: PUSH
52326: LD_INT 3
52328: PUSH
52329: LD_EXP 59
52333: IN
52334: NOT
52335: OR
52336: IFFALSE 52296
// DialogueOn ;
52338: CALL_OW 6
// SayRadio ( Gensher , D8-Ge-1 ) ;
52342: LD_EXP 24
52346: PPUSH
52347: LD_STRING D8-Ge-1
52349: PPUSH
52350: CALL_OW 94
// DialogueOff ;
52354: CALL_OW 7
// wait ( 0 0$0.2 ) ;
52358: LD_INT 7
52360: PPUSH
52361: CALL_OW 67
// time = 8 8$0 ;
52365: LD_ADDR_VAR 0 3
52369: PUSH
52370: LD_INT 16800
52372: ST_TO_ADDR
// russians_allowed_to_attack_gensher_time = tick + time + 1 1$0 ;
52373: LD_ADDR_EXP 94
52377: PUSH
52378: LD_OWVAR 1
52382: PUSH
52383: LD_VAR 0 3
52387: PLUS
52388: PUSH
52389: LD_INT 2100
52391: PLUS
52392: ST_TO_ADDR
// repeat display_strings = [ #Ar11-GensherCountdown , time ] ;
52393: LD_ADDR_OWVAR 47
52397: PUSH
52398: LD_STRING #Ar11-GensherCountdown
52400: PUSH
52401: LD_VAR 0 3
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: ST_TO_ADDR
// time = time - 0 0$1 ;
52410: LD_ADDR_VAR 0 3
52414: PUSH
52415: LD_VAR 0 3
52419: PUSH
52420: LD_INT 35
52422: MINUS
52423: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52424: LD_INT 35
52426: PPUSH
52427: CALL_OW 67
// until time <= 0 0$0 ;
52431: LD_VAR 0 3
52435: PUSH
52436: LD_INT 0
52438: LESSEQUAL
52439: IFFALSE 52393
// display_strings = [ ] ;
52441: LD_ADDR_OWVAR 47
52445: PUSH
52446: EMPTY
52447: ST_TO_ADDR
// game_phase = 2 ;
52448: LD_ADDR_EXP 89
52452: PUSH
52453: LD_INT 2
52455: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
52456: LD_STRING M3
52458: PPUSH
52459: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , americans ] ) do
52463: LD_ADDR_VAR 0 4
52467: PUSH
52468: LD_INT 22
52470: PUSH
52471: LD_EXP 7
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PPUSH
52480: CALL_OW 69
52484: PUSH
52485: FOR_IN
52486: IFFALSE 52504
// NormalAttack ( you , i ) ;
52488: LD_EXP 3
52492: PPUSH
52493: LD_VAR 0 4
52497: PPUSH
52498: CALL_OW 472
52502: GO 52485
52504: POP
52505: POP
// end ;
52506: PPOPN 6
52508: END
// every 0 0$1 do var i ;
52509: GO 52511
52511: DISABLE
52512: LD_INT 0
52514: PPUSH
// begin repeat wait ( 0 0$1 ) ;
52515: LD_INT 35
52517: PPUSH
52518: CALL_OW 67
// if game_phase > 1 then
52522: LD_EXP 89
52526: PUSH
52527: LD_INT 1
52529: GREATER
52530: IFFALSE 52534
// exit ;
52532: GO 52662
// for i in FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
52534: LD_ADDR_VAR 0 1
52538: PUSH
52539: LD_INT 22
52541: PUSH
52542: LD_EXP 3
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 21
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 21
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: LIST
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PPUSH
52583: CALL_OW 69
52587: PUSH
52588: FOR_IN
52589: IFFALSE 52656
// if GetDistUnitArea ( i , Gensher_base ) <= 9 then
52591: LD_VAR 0 1
52595: PPUSH
52596: LD_INT 7
52598: PPUSH
52599: CALL_OW 299
52603: PUSH
52604: LD_INT 9
52606: LESSEQUAL
52607: IFFALSE 52654
// begin CenterOnUnits ( i ) ;
52609: LD_VAR 0 1
52613: PPUSH
52614: CALL_OW 85
// DialogueOn ;
52618: CALL_OW 6
// Say ( Gensher , D12-Ge-1 ) ;
52622: LD_EXP 24
52626: PPUSH
52627: LD_STRING D12-Ge-1
52629: PPUSH
52630: CALL_OW 88
// ForceSay ( Heike , D12-H-1 ) ;
52634: LD_EXP 10
52638: PPUSH
52639: LD_STRING D12-H-1
52641: PPUSH
52642: CALL_OW 91
// DialogueOff ;
52646: CALL_OW 7
// exit ;
52650: POP
52651: POP
52652: GO 52662
// end ;
52654: GO 52588
52656: POP
52657: POP
// until false ;
52658: LD_INT 0
52660: IFFALSE 52515
// end ;
52662: PPOPN 1
52664: END
// every 0 0$1 + 0 0$0.8 trigger game_phase = 2 do var i , val , temp_list , k ; var un_list , scis_list , hex_list , hex , exit_hex , rand_hexes ; var attacking_units , american_base_hex ; var hex_status ;
52665: LD_EXP 89
52669: PUSH
52670: LD_INT 2
52672: EQUAL
52673: IFFALSE 54152
52675: GO 52677
52677: DISABLE
52678: LD_INT 0
52680: PPUSH
52681: PPUSH
52682: PPUSH
52683: PPUSH
52684: PPUSH
52685: PPUSH
52686: PPUSH
52687: PPUSH
52688: PPUSH
52689: PPUSH
52690: PPUSH
52691: PPUSH
52692: PPUSH
// begin ai_bases = ai_bases diff 2 ;
52693: LD_ADDR_EXP 59
52697: PUSH
52698: LD_EXP 59
52702: PUSH
52703: LD_INT 2
52705: DIFF
52706: ST_TO_ADDR
// hex = 1 ;
52707: LD_ADDR_VAR 0 8
52711: PUSH
52712: LD_INT 1
52714: ST_TO_ADDR
// hex_list = [ [ 75 , 23 ] , [ 76 , 36 ] , [ 78 , 43 ] , [ 79 , 51 ] , [ 81 , 61 ] , [ 84 , 71 ] , [ 90 , 81 ] , [ 97 , 88 ] , [ 105 , 93 ] , [ 113 , 95 ] , [ 119 , 92 ] , [ 122 , 87 ] , [ 123 , 79 ] , [ 132 , 82 ] , [ 141 , 88 ] , [ 160 , 104 ] , [ 168 , 109 ] ] ;
52715: LD_ADDR_VAR 0 7
52719: PUSH
52720: LD_INT 75
52722: PUSH
52723: LD_INT 23
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 76
52732: PUSH
52733: LD_INT 36
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 78
52742: PUSH
52743: LD_INT 43
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 79
52752: PUSH
52753: LD_INT 51
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 81
52762: PUSH
52763: LD_INT 61
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 84
52772: PUSH
52773: LD_INT 71
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 90
52782: PUSH
52783: LD_INT 81
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 97
52792: PUSH
52793: LD_INT 88
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 105
52802: PUSH
52803: LD_INT 93
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 113
52812: PUSH
52813: LD_INT 95
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 119
52822: PUSH
52823: LD_INT 92
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 122
52832: PUSH
52833: LD_INT 87
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 123
52842: PUSH
52843: LD_INT 79
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 132
52852: PUSH
52853: LD_INT 82
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 141
52862: PUSH
52863: LD_INT 88
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 160
52872: PUSH
52873: LD_INT 104
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 168
52882: PUSH
52883: LD_INT 109
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: ST_TO_ADDR
// exit_hex = [ 173 , 110 ] ;
52909: LD_ADDR_VAR 0 9
52913: PUSH
52914: LD_INT 173
52916: PUSH
52917: LD_INT 110
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// rand_hexes = [ ] ;
52924: LD_ADDR_VAR 0 10
52928: PUSH
52929: EMPTY
52930: ST_TO_ADDR
// american_base_hex = [ 113 , 36 ] ;
52931: LD_ADDR_VAR 0 12
52935: PUSH
52936: LD_INT 113
52938: PUSH
52939: LD_INT 36
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// attacking_units = [ ] ;
52946: LD_ADDR_VAR 0 11
52950: PUSH
52951: EMPTY
52952: ST_TO_ADDR
// attacking_units = FilterAllUnits ( [ [ f_placed ] , [ f_side , you_alt ] , [ f_type , unit_vehicle ] ] ) ;
52953: LD_ADDR_VAR 0 11
52957: PUSH
52958: LD_INT 52
52960: PUSH
52961: EMPTY
52962: LIST
52963: PUSH
52964: LD_INT 22
52966: PUSH
52967: LD_EXP 6
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 21
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: PPUSH
52991: CALL_OW 69
52995: ST_TO_ADDR
// attacking_units = attacking_units ^ gensher_mortars ;
52996: LD_ADDR_VAR 0 11
53000: PUSH
53001: LD_VAR 0 11
53005: PUSH
53006: LD_EXP 100
53010: ADD
53011: ST_TO_ADDR
// SetAttitude ( you_alt , americans , att_enemy , false ) ;
53012: LD_EXP 6
53016: PPUSH
53017: LD_EXP 7
53021: PPUSH
53022: LD_INT 2
53024: PPUSH
53025: LD_INT 0
53027: PPUSH
53028: CALL_OW 80
// ComAgressiveMove ( attacking_units , american_base_hex [ 1 ] , american_base_hex [ 2 ] ) ;
53032: LD_VAR 0 11
53036: PPUSH
53037: LD_VAR 0 12
53041: PUSH
53042: LD_INT 1
53044: ARRAY
53045: PPUSH
53046: LD_VAR 0 12
53050: PUSH
53051: LD_INT 2
53053: ARRAY
53054: PPUSH
53055: CALL_OW 114
// un_list = original_gensher_people ^ Gensher ;
53059: LD_ADDR_VAR 0 5
53063: PUSH
53064: LD_EXP 83
53068: PUSH
53069: LD_EXP 24
53073: ADD
53074: ST_TO_ADDR
// un_list = un_list ^ gensher_bunker_apes ;
53075: LD_ADDR_VAR 0 5
53079: PUSH
53080: LD_VAR 0 5
53084: PUSH
53085: LD_EXP 99
53089: ADD
53090: ST_TO_ADDR
// scis_list = UnitFilter ( un_list , [ f_class , class_scientistic ] ) ;
53091: LD_ADDR_VAR 0 6
53095: PUSH
53096: LD_VAR 0 5
53100: PPUSH
53101: LD_INT 25
53103: PUSH
53104: LD_INT 4
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PPUSH
53111: CALL_OW 72
53115: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53116: LD_INT 35
53118: PPUSH
53119: CALL_OW 67
// val = true ;
53123: LD_ADDR_VAR 0 2
53127: PUSH
53128: LD_INT 1
53130: ST_TO_ADDR
// for i in un_list do
53131: LD_ADDR_VAR 0 1
53135: PUSH
53136: LD_VAR 0 5
53140: PUSH
53141: FOR_IN
53142: IFFALSE 53218
// case GetType ( IsInUnit ( i ) ) of unit_vehicle :
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL_OW 310
53153: PPUSH
53154: CALL_OW 247
53158: PUSH
53159: LD_INT 2
53161: DOUBLE
53162: EQUAL
53163: IFTRUE 53167
53165: GO 53187
53167: POP
// begin ComExitVehicle ( i ) ;
53168: LD_VAR 0 1
53172: PPUSH
53173: CALL_OW 121
// val = false ;
53177: LD_ADDR_VAR 0 2
53181: PUSH
53182: LD_INT 0
53184: ST_TO_ADDR
// end ; unit_building :
53185: GO 53216
53187: LD_INT 3
53189: DOUBLE
53190: EQUAL
53191: IFTRUE 53195
53193: GO 53215
53195: POP
// begin ComExitBuilding ( i ) ;
53196: LD_VAR 0 1
53200: PPUSH
53201: CALL_OW 122
// val = false ;
53205: LD_ADDR_VAR 0 2
53209: PUSH
53210: LD_INT 0
53212: ST_TO_ADDR
// end ; end ;
53213: GO 53216
53215: POP
53216: GO 53141
53218: POP
53219: POP
// until val ;
53220: LD_VAR 0 2
53224: IFFALSE 53116
// for i in un_list do
53226: LD_ADDR_VAR 0 1
53230: PUSH
53231: LD_VAR 0 5
53235: PUSH
53236: FOR_IN
53237: IFFALSE 53272
// rand_hexes = Replace ( rand_hexes , i , hex_list [ hex ] ) ;
53239: LD_ADDR_VAR 0 10
53243: PUSH
53244: LD_VAR 0 10
53248: PPUSH
53249: LD_VAR 0 1
53253: PPUSH
53254: LD_VAR 0 7
53258: PUSH
53259: LD_VAR 0 8
53263: ARRAY
53264: PPUSH
53265: CALL_OW 1
53269: ST_TO_ADDR
53270: GO 53236
53272: POP
53273: POP
// repeat wait ( 0 0$0.3 ) ;
53274: LD_INT 10
53276: PPUSH
53277: CALL_OW 67
// un_list = UnitFilter ( un_list , [ f_alive ] ) ;
53281: LD_ADDR_VAR 0 5
53285: PUSH
53286: LD_VAR 0 5
53290: PPUSH
53291: LD_INT 51
53293: PUSH
53294: EMPTY
53295: LIST
53296: PPUSH
53297: CALL_OW 72
53301: ST_TO_ADDR
// scis_list = UnitFilter ( scis_list , [ f_alive ] ) ;
53302: LD_ADDR_VAR 0 6
53306: PUSH
53307: LD_VAR 0 6
53311: PPUSH
53312: LD_INT 51
53314: PUSH
53315: EMPTY
53316: LIST
53317: PPUSH
53318: CALL_OW 72
53322: ST_TO_ADDR
// temp_list = [ ] ;
53323: LD_ADDR_VAR 0 3
53327: PUSH
53328: EMPTY
53329: ST_TO_ADDR
// for i in un_list do
53330: LD_ADDR_VAR 0 1
53334: PUSH
53335: LD_VAR 0 5
53339: PUSH
53340: FOR_IN
53341: IFFALSE 53376
// if GetLives ( i ) <= 250 then
53343: LD_VAR 0 1
53347: PPUSH
53348: CALL_OW 256
53352: PUSH
53353: LD_INT 250
53355: LESSEQUAL
53356: IFFALSE 53374
// temp_list = temp_list ^ i ;
53358: LD_ADDR_VAR 0 3
53362: PUSH
53363: LD_VAR 0 3
53367: PUSH
53368: LD_VAR 0 1
53372: ADD
53373: ST_TO_ADDR
53374: GO 53340
53376: POP
53377: POP
// if temp_list > 0 and scis_list > 0 and UnitFilter ( un_list , [ f_lives , 501 ] ) > ( original_gensher_people + 1 ) div 2 then
53378: LD_VAR 0 3
53382: PUSH
53383: LD_INT 0
53385: GREATER
53386: PUSH
53387: LD_VAR 0 6
53391: PUSH
53392: LD_INT 0
53394: GREATER
53395: AND
53396: PUSH
53397: LD_VAR 0 5
53401: PPUSH
53402: LD_INT 24
53404: PUSH
53405: LD_INT 501
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PPUSH
53412: CALL_OW 72
53416: PUSH
53417: LD_EXP 83
53421: PUSH
53422: LD_INT 1
53424: PLUS
53425: PUSH
53426: LD_INT 2
53428: DIV
53429: GREATER
53430: AND
53431: IFFALSE 53554
// begin for i in scis_list do
53433: LD_ADDR_VAR 0 1
53437: PUSH
53438: LD_VAR 0 6
53442: PUSH
53443: FOR_IN
53444: IFFALSE 53466
// ComHeal ( i , temp_list [ 1 ] ) ;
53446: LD_VAR 0 1
53450: PPUSH
53451: LD_VAR 0 3
53455: PUSH
53456: LD_INT 1
53458: ARRAY
53459: PPUSH
53460: CALL_OW 128
53464: GO 53443
53466: POP
53467: POP
// for i in un_list diff scis_list do
53468: LD_ADDR_VAR 0 1
53472: PUSH
53473: LD_VAR 0 5
53477: PUSH
53478: LD_VAR 0 6
53482: DIFF
53483: PUSH
53484: FOR_IN
53485: IFFALSE 53550
// if GetDistUnits ( i , temp_list [ 1 ] ) > 4 then
53487: LD_VAR 0 1
53491: PPUSH
53492: LD_VAR 0 3
53496: PUSH
53497: LD_INT 1
53499: ARRAY
53500: PPUSH
53501: CALL_OW 296
53505: PUSH
53506: LD_INT 4
53508: GREATER
53509: IFFALSE 53548
// ComMoveXY ( i , GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ) ;
53511: LD_VAR 0 1
53515: PPUSH
53516: LD_VAR 0 3
53520: PUSH
53521: LD_INT 1
53523: ARRAY
53524: PPUSH
53525: CALL_OW 250
53529: PPUSH
53530: LD_VAR 0 3
53534: PUSH
53535: LD_INT 1
53537: ARRAY
53538: PPUSH
53539: CALL_OW 251
53543: PPUSH
53544: CALL_OW 111
53548: GO 53484
53550: POP
53551: POP
// end else
53552: GO 54120
// begin val = true ;
53554: LD_ADDR_VAR 0 2
53558: PUSH
53559: LD_INT 1
53561: ST_TO_ADDR
// for i in un_list do
53562: LD_ADDR_VAR 0 1
53566: PUSH
53567: LD_VAR 0 5
53571: PUSH
53572: FOR_IN
53573: IFFALSE 53893
// if hex <= hex_list then
53575: LD_VAR 0 8
53579: PUSH
53580: LD_VAR 0 7
53584: LESSEQUAL
53585: IFFALSE 53760
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 5 then
53587: LD_VAR 0 1
53591: PPUSH
53592: LD_VAR 0 10
53596: PUSH
53597: LD_VAR 0 1
53601: ARRAY
53602: PUSH
53603: LD_INT 1
53605: ARRAY
53606: PPUSH
53607: LD_VAR 0 10
53611: PUSH
53612: LD_VAR 0 1
53616: ARRAY
53617: PUSH
53618: LD_INT 2
53620: ARRAY
53621: PPUSH
53622: CALL_OW 297
53626: PUSH
53627: LD_INT 5
53629: GREATER
53630: IFFALSE 53758
// begin if logsenabled then
53632: LD_EXP 2
53636: IFFALSE 53711
// begin hex_status = HexInfo ( rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
53638: LD_ADDR_VAR 0 13
53642: PUSH
53643: LD_VAR 0 10
53647: PUSH
53648: LD_VAR 0 1
53652: ARRAY
53653: PUSH
53654: LD_INT 1
53656: ARRAY
53657: PPUSH
53658: LD_VAR 0 10
53662: PUSH
53663: LD_VAR 0 1
53667: ARRAY
53668: PUSH
53669: LD_INT 2
53671: ARRAY
53672: PPUSH
53673: CALL_OW 428
53677: ST_TO_ADDR
// display_strings = [ Hex at  , rand_hexes [ i ] ,  has status  , hex_status ] ;
53678: LD_ADDR_OWVAR 47
53682: PUSH
53683: LD_STRING Hex at 
53685: PUSH
53686: LD_VAR 0 10
53690: PUSH
53691: LD_VAR 0 1
53695: ARRAY
53696: PUSH
53697: LD_STRING  has status 
53699: PUSH
53700: LD_VAR 0 13
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: ST_TO_ADDR
// end ; ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
53711: LD_VAR 0 1
53715: PPUSH
53716: LD_VAR 0 10
53720: PUSH
53721: LD_VAR 0 1
53725: ARRAY
53726: PUSH
53727: LD_INT 1
53729: ARRAY
53730: PPUSH
53731: LD_VAR 0 10
53735: PUSH
53736: LD_VAR 0 1
53740: ARRAY
53741: PUSH
53742: LD_INT 2
53744: ARRAY
53745: PPUSH
53746: CALL_OW 111
// val = false ;
53750: LD_ADDR_VAR 0 2
53754: PUSH
53755: LD_INT 0
53757: ST_TO_ADDR
// end ; end else
53758: GO 53891
// if GetDistUnitXY ( i , exit_hex [ 1 ] , exit_hex [ 2 ] ) > 2 then
53760: LD_VAR 0 1
53764: PPUSH
53765: LD_VAR 0 9
53769: PUSH
53770: LD_INT 1
53772: ARRAY
53773: PPUSH
53774: LD_VAR 0 9
53778: PUSH
53779: LD_INT 2
53781: ARRAY
53782: PPUSH
53783: CALL_OW 297
53787: PUSH
53788: LD_INT 2
53790: GREATER
53791: IFFALSE 53822
// ComMoveXY ( i , exit_hex [ 1 ] , exit_hex [ 2 ] ) else
53793: LD_VAR 0 1
53797: PPUSH
53798: LD_VAR 0 9
53802: PUSH
53803: LD_INT 1
53805: ARRAY
53806: PPUSH
53807: LD_VAR 0 9
53811: PUSH
53812: LD_INT 2
53814: ARRAY
53815: PPUSH
53816: CALL_OW 111
53820: GO 53891
// begin if i <> Gensher then
53822: LD_VAR 0 1
53826: PUSH
53827: LD_EXP 24
53831: NONEQUAL
53832: IFFALSE 53850
// saved_gensher_people = saved_gensher_people ^ i ;
53834: LD_ADDR_EXP 95
53838: PUSH
53839: LD_EXP 95
53843: PUSH
53844: LD_VAR 0 1
53848: ADD
53849: ST_TO_ADDR
// un_list = un_list diff i ;
53850: LD_ADDR_VAR 0 5
53854: PUSH
53855: LD_VAR 0 5
53859: PUSH
53860: LD_VAR 0 1
53864: DIFF
53865: ST_TO_ADDR
// scis_list = scis_list diff i ;
53866: LD_ADDR_VAR 0 6
53870: PUSH
53871: LD_VAR 0 6
53875: PUSH
53876: LD_VAR 0 1
53880: DIFF
53881: ST_TO_ADDR
// RemoveUnit ( i ) ;
53882: LD_VAR 0 1
53886: PPUSH
53887: CALL_OW 64
// end ;
53891: GO 53572
53893: POP
53894: POP
// if val then
53895: LD_VAR 0 2
53899: IFFALSE 54120
// begin hex = hex + 1 ;
53901: LD_ADDR_VAR 0 8
53905: PUSH
53906: LD_VAR 0 8
53910: PUSH
53911: LD_INT 1
53913: PLUS
53914: ST_TO_ADDR
// if hex <= hex_list then
53915: LD_VAR 0 8
53919: PUSH
53920: LD_VAR 0 7
53924: LESSEQUAL
53925: IFFALSE 54120
// begin temp_list = [ ] ;
53927: LD_ADDR_VAR 0 3
53931: PUSH
53932: EMPTY
53933: ST_TO_ADDR
// for i in un_list do
53934: LD_ADDR_VAR 0 1
53938: PUSH
53939: LD_VAR 0 5
53943: PUSH
53944: FOR_IN
53945: IFFALSE 54118
// begin k = 0 ;
53947: LD_ADDR_VAR 0 4
53951: PUSH
53952: LD_INT 0
53954: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list [ hex ] [ 1 ] , hex_list [ hex ] [ 2 ] , 2 , false ) ;
53955: LD_ADDR_VAR 0 2
53959: PUSH
53960: LD_VAR 0 7
53964: PUSH
53965: LD_VAR 0 8
53969: ARRAY
53970: PUSH
53971: LD_INT 1
53973: ARRAY
53974: PPUSH
53975: LD_VAR 0 7
53979: PUSH
53980: LD_VAR 0 8
53984: ARRAY
53985: PUSH
53986: LD_INT 2
53988: ARRAY
53989: PPUSH
53990: LD_INT 2
53992: PPUSH
53993: LD_INT 0
53995: PPUSH
53996: CALL_OW 17
54000: ST_TO_ADDR
// k = k + 1 ;
54001: LD_ADDR_VAR 0 4
54005: PUSH
54006: LD_VAR 0 4
54010: PUSH
54011: LD_INT 1
54013: PLUS
54014: ST_TO_ADDR
// if ( not val in temp_list and HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 ) or k >= 10 then
54015: LD_VAR 0 2
54019: PUSH
54020: LD_VAR 0 3
54024: IN
54025: NOT
54026: PUSH
54027: LD_VAR 0 2
54031: PUSH
54032: LD_INT 1
54034: ARRAY
54035: PPUSH
54036: LD_VAR 0 2
54040: PUSH
54041: LD_INT 2
54043: ARRAY
54044: PPUSH
54045: CALL_OW 428
54049: PUSH
54050: LD_INT 0
54052: GREATEREQUAL
54053: AND
54054: PUSH
54055: LD_VAR 0 4
54059: PUSH
54060: LD_INT 10
54062: GREATEREQUAL
54063: OR
54064: IFFALSE 54112
// begin temp_list = temp_list ^ [ val ] ;
54066: LD_ADDR_VAR 0 3
54070: PUSH
54071: LD_VAR 0 3
54075: PUSH
54076: LD_VAR 0 2
54080: PUSH
54081: EMPTY
54082: LIST
54083: ADD
54084: ST_TO_ADDR
// rand_hexes = Replace ( rand_hexes , i , val ) ;
54085: LD_ADDR_VAR 0 10
54089: PUSH
54090: LD_VAR 0 10
54094: PPUSH
54095: LD_VAR 0 1
54099: PPUSH
54100: LD_VAR 0 2
54104: PPUSH
54105: CALL_OW 1
54109: ST_TO_ADDR
// break ;
54110: GO 54116
// end ; until false ;
54112: LD_INT 0
54114: IFFALSE 53955
// end ;
54116: GO 53944
54118: POP
54119: POP
// end ; end ; end ; until un_list = 0 ;
54120: LD_VAR 0 5
54124: PUSH
54125: LD_INT 0
54127: EQUAL
54128: IFFALSE 53274
// wait ( 0 0$0.2 ) ;
54130: LD_INT 7
54132: PPUSH
54133: CALL_OW 67
// ChangeMissionObjectives ( M4 ) ;
54137: LD_STRING M4
54139: PPUSH
54140: CALL_OW 337
// game_phase = 3 ;
54144: LD_ADDR_EXP 89
54148: PUSH
54149: LD_INT 3
54151: ST_TO_ADDR
// end ;
54152: PPOPN 13
54154: END
// every 0 0$1 + 0 0$0.9 trigger game_phase = 2 do
54155: LD_EXP 89
54159: PUSH
54160: LD_INT 2
54162: EQUAL
54163: IFFALSE 54244
54165: GO 54167
54167: DISABLE
// begin wait ( [ 0 0$18 , 0 0$15 , 0 0$12 ] [ difficulty ] ) ;
54168: LD_INT 630
54170: PUSH
54171: LD_INT 525
54173: PUSH
54174: LD_INT 420
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: PUSH
54182: LD_OWVAR 67
54186: ARRAY
54187: PPUSH
54188: CALL_OW 67
// DialogueOn ;
54192: CALL_OW 6
// SayRadio ( Simms , D8-Simm-1_v2 ) ;
54196: LD_EXP 25
54200: PPUSH
54201: LD_STRING D8-Simm-1_v2
54203: PPUSH
54204: CALL_OW 94
// SayRadio ( Powell , D8-Po-1 ) ;
54208: LD_EXP 29
54212: PPUSH
54213: LD_STRING D8-Po-1
54215: PPUSH
54216: CALL_OW 94
// DialogueOff ;
54220: CALL_OW 7
// SetAttitude ( americans , you_alt , att_enemy , true ) ;
54224: LD_EXP 7
54228: PPUSH
54229: LD_EXP 6
54233: PPUSH
54234: LD_INT 2
54236: PPUSH
54237: LD_INT 1
54239: PPUSH
54240: CALL_OW 80
// end ;
54244: END
// every 0 0$1 + 0 0$0.6 trigger GetAttitude ( americans , you_alt ) = att_enemy do var i , val ; var sniper_group_1 , sniper_group_2 , hex_list_1 , hex_list_2 , unit_hex , rand_hexes , k ;
54245: LD_EXP 7
54249: PPUSH
54250: LD_EXP 6
54254: PPUSH
54255: CALL_OW 81
54259: PUSH
54260: LD_INT 2
54262: EQUAL
54263: IFFALSE 55662
54265: GO 54267
54267: DISABLE
54268: LD_INT 0
54270: PPUSH
54271: PPUSH
54272: PPUSH
54273: PPUSH
54274: PPUSH
54275: PPUSH
54276: PPUSH
54277: PPUSH
54278: PPUSH
// begin sniper_group_1 = CreateUnitsWithClass ( difficulty , class_sniper , americans ) ;
54279: LD_ADDR_VAR 0 3
54283: PUSH
54284: LD_OWVAR 67
54288: PPUSH
54289: LD_INT 5
54291: PPUSH
54292: LD_EXP 7
54296: PPUSH
54297: CALL 9662 0 3
54301: ST_TO_ADDR
// sniper_group_2 = CreateUnitsWithClass ( difficulty , class_sniper , americans ) ;
54302: LD_ADDR_VAR 0 4
54306: PUSH
54307: LD_OWVAR 67
54311: PPUSH
54312: LD_INT 5
54314: PPUSH
54315: LD_EXP 7
54319: PPUSH
54320: CALL 9662 0 3
54324: ST_TO_ADDR
// for i in sniper_group_1 ^ sniper_group_2 do
54325: LD_ADDR_VAR 0 1
54329: PUSH
54330: LD_VAR 0 3
54334: PUSH
54335: LD_VAR 0 4
54339: ADD
54340: PUSH
54341: FOR_IN
54342: IFFALSE 54387
// PlaceUnitXYR ( i , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 7 , false ) ;
54344: LD_VAR 0 1
54348: PPUSH
54349: LD_EXP 42
54353: PUSH
54354: LD_INT 1
54356: ARRAY
54357: PUSH
54358: LD_INT 1
54360: ARRAY
54361: PPUSH
54362: LD_EXP 42
54366: PUSH
54367: LD_INT 1
54369: ARRAY
54370: PUSH
54371: LD_INT 2
54373: ARRAY
54374: PPUSH
54375: LD_INT 7
54377: PPUSH
54378: LD_INT 0
54380: PPUSH
54381: CALL_OW 50
54385: GO 54341
54387: POP
54388: POP
// unit_hex = [ ] ;
54389: LD_ADDR_VAR 0 7
54393: PUSH
54394: EMPTY
54395: ST_TO_ADDR
// for i in sniper_group_1 ^ sniper_group_2 do
54396: LD_ADDR_VAR 0 1
54400: PUSH
54401: LD_VAR 0 3
54405: PUSH
54406: LD_VAR 0 4
54410: ADD
54411: PUSH
54412: FOR_IN
54413: IFFALSE 54440
// unit_hex = Replace ( unit_hex , i , 1 ) ;
54415: LD_ADDR_VAR 0 7
54419: PUSH
54420: LD_VAR 0 7
54424: PPUSH
54425: LD_VAR 0 1
54429: PPUSH
54430: LD_INT 1
54432: PPUSH
54433: CALL_OW 1
54437: ST_TO_ADDR
54438: GO 54412
54440: POP
54441: POP
// if FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_inarea , player_base_1 ] ] ) > 0 then
54442: LD_INT 22
54444: PUSH
54445: LD_EXP 3
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: LD_INT 30
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 30
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 95
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: LIST
54496: PPUSH
54497: CALL_OW 69
54501: PUSH
54502: LD_INT 0
54504: GREATER
54505: IFFALSE 54611
// begin hex_list_1 = [ [ 116 , 59 ] , [ 115 , 67 ] , [ 114 , 77 ] ] ;
54507: LD_ADDR_VAR 0 5
54511: PUSH
54512: LD_INT 116
54514: PUSH
54515: LD_INT 59
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 115
54524: PUSH
54525: LD_INT 67
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 114
54534: PUSH
54535: LD_INT 77
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: ST_TO_ADDR
// hex_list_2 = [ [ 116 , 59 ] , [ 124 , 77 ] , [ 123 , 86 ] , [ 135 , 96 ] , [ 128 , 87 ] ] ;
54547: LD_ADDR_VAR 0 6
54551: PUSH
54552: LD_INT 116
54554: PUSH
54555: LD_INT 59
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 124
54564: PUSH
54565: LD_INT 77
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 123
54574: PUSH
54575: LD_INT 86
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 135
54584: PUSH
54585: LD_INT 96
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 128
54594: PUSH
54595: LD_INT 87
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// end else
54609: GO 54702
// begin hex_list_1 = [ [ 116 , 59 ] , [ 117 , 66 ] , [ 116 , 72 ] ] ;
54611: LD_ADDR_VAR 0 5
54615: PUSH
54616: LD_INT 116
54618: PUSH
54619: LD_INT 59
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 117
54628: PUSH
54629: LD_INT 66
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 116
54638: PUSH
54639: LD_INT 72
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: ST_TO_ADDR
// hex_list_2 = [ [ 116 , 59 ] , [ 134 , 69 ] , [ 150 , 82 ] , [ 157 , 98 ] ] ;
54651: LD_ADDR_VAR 0 6
54655: PUSH
54656: LD_INT 116
54658: PUSH
54659: LD_INT 59
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 134
54668: PUSH
54669: LD_INT 69
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 150
54678: PUSH
54679: LD_INT 82
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 157
54688: PUSH
54689: LD_INT 98
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: ST_TO_ADDR
// end ; rand_hexes = [ ] ;
54702: LD_ADDR_VAR 0 8
54706: PUSH
54707: EMPTY
54708: ST_TO_ADDR
// for i in sniper_group_1 do
54709: LD_ADDR_VAR 0 1
54713: PUSH
54714: LD_VAR 0 3
54718: PUSH
54719: FOR_IN
54720: IFFALSE 54753
// rand_hexes = Replace ( rand_hexes , i , hex_list_1 [ 1 ] ) ;
54722: LD_ADDR_VAR 0 8
54726: PUSH
54727: LD_VAR 0 8
54731: PPUSH
54732: LD_VAR 0 1
54736: PPUSH
54737: LD_VAR 0 5
54741: PUSH
54742: LD_INT 1
54744: ARRAY
54745: PPUSH
54746: CALL_OW 1
54750: ST_TO_ADDR
54751: GO 54719
54753: POP
54754: POP
// for i in sniper_group_2 do
54755: LD_ADDR_VAR 0 1
54759: PUSH
54760: LD_VAR 0 4
54764: PUSH
54765: FOR_IN
54766: IFFALSE 54799
// rand_hexes = Replace ( rand_hexes , i , hex_list_2 [ 1 ] ) ;
54768: LD_ADDR_VAR 0 8
54772: PUSH
54773: LD_VAR 0 8
54777: PPUSH
54778: LD_VAR 0 1
54782: PPUSH
54783: LD_VAR 0 6
54787: PUSH
54788: LD_INT 1
54790: ARRAY
54791: PPUSH
54792: CALL_OW 1
54796: ST_TO_ADDR
54797: GO 54765
54799: POP
54800: POP
// repeat wait ( 0 0$1 ) ;
54801: LD_INT 35
54803: PPUSH
54804: CALL_OW 67
// sniper_group_1 = UnitFilter ( sniper_group_1 , [ f_ok ] ) ;
54808: LD_ADDR_VAR 0 3
54812: PUSH
54813: LD_VAR 0 3
54817: PPUSH
54818: LD_INT 50
54820: PUSH
54821: EMPTY
54822: LIST
54823: PPUSH
54824: CALL_OW 72
54828: ST_TO_ADDR
// sniper_group_2 = UnitFilter ( sniper_group_2 , [ f_ok ] ) ;
54829: LD_ADDR_VAR 0 4
54833: PUSH
54834: LD_VAR 0 4
54838: PPUSH
54839: LD_INT 50
54841: PUSH
54842: EMPTY
54843: LIST
54844: PPUSH
54845: CALL_OW 72
54849: ST_TO_ADDR
// if sniper_group_1 = 0 and sniper_group_2 = 0 then
54850: LD_VAR 0 3
54854: PUSH
54855: LD_INT 0
54857: EQUAL
54858: PUSH
54859: LD_VAR 0 4
54863: PUSH
54864: LD_INT 0
54866: EQUAL
54867: AND
54868: IFFALSE 54872
// exit ;
54870: GO 55662
// for i in sniper_group_1 do
54872: LD_ADDR_VAR 0 1
54876: PUSH
54877: LD_VAR 0 3
54881: PUSH
54882: FOR_IN
54883: IFFALSE 55263
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 2 then
54885: LD_VAR 0 1
54889: PPUSH
54890: LD_VAR 0 8
54894: PUSH
54895: LD_VAR 0 1
54899: ARRAY
54900: PUSH
54901: LD_INT 1
54903: ARRAY
54904: PPUSH
54905: LD_VAR 0 8
54909: PUSH
54910: LD_VAR 0 1
54914: ARRAY
54915: PUSH
54916: LD_INT 2
54918: ARRAY
54919: PPUSH
54920: CALL_OW 297
54924: PUSH
54925: LD_INT 2
54927: GREATER
54928: IFFALSE 55065
// begin if unit_hex [ i ] = hex_list_1 + 0 then
54930: LD_VAR 0 7
54934: PUSH
54935: LD_VAR 0 1
54939: ARRAY
54940: PUSH
54941: LD_VAR 0 5
54945: PUSH
54946: LD_INT 0
54948: PLUS
54949: EQUAL
54950: IFFALSE 54993
// ComAgressiveMove ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) else
54952: LD_VAR 0 1
54956: PPUSH
54957: LD_VAR 0 8
54961: PUSH
54962: LD_VAR 0 1
54966: ARRAY
54967: PUSH
54968: LD_INT 1
54970: ARRAY
54971: PPUSH
54972: LD_VAR 0 8
54976: PUSH
54977: LD_VAR 0 1
54981: ARRAY
54982: PUSH
54983: LD_INT 2
54985: ARRAY
54986: PPUSH
54987: CALL_OW 114
54991: GO 55032
// ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
54993: LD_VAR 0 1
54997: PPUSH
54998: LD_VAR 0 8
55002: PUSH
55003: LD_VAR 0 1
55007: ARRAY
55008: PUSH
55009: LD_INT 1
55011: ARRAY
55012: PPUSH
55013: LD_VAR 0 8
55017: PUSH
55018: LD_VAR 0 1
55022: ARRAY
55023: PUSH
55024: LD_INT 2
55026: ARRAY
55027: PPUSH
55028: CALL_OW 111
// if unit_hex [ i ] = hex_list_1 + 0 then
55032: LD_VAR 0 7
55036: PUSH
55037: LD_VAR 0 1
55041: ARRAY
55042: PUSH
55043: LD_VAR 0 5
55047: PUSH
55048: LD_INT 0
55050: PLUS
55051: EQUAL
55052: IFFALSE 55063
// AddComHold ( i ) ;
55054: LD_VAR 0 1
55058: PPUSH
55059: CALL_OW 200
// end else
55063: GO 55261
// if unit_hex [ i ] < hex_list_1 then
55065: LD_VAR 0 7
55069: PUSH
55070: LD_VAR 0 1
55074: ARRAY
55075: PUSH
55076: LD_VAR 0 5
55080: LESS
55081: IFFALSE 55261
// begin unit_hex = Replace ( unit_hex , i , unit_hex [ i ] + 1 ) ;
55083: LD_ADDR_VAR 0 7
55087: PUSH
55088: LD_VAR 0 7
55092: PPUSH
55093: LD_VAR 0 1
55097: PPUSH
55098: LD_VAR 0 7
55102: PUSH
55103: LD_VAR 0 1
55107: ARRAY
55108: PUSH
55109: LD_INT 1
55111: PLUS
55112: PPUSH
55113: CALL_OW 1
55117: ST_TO_ADDR
// k = 0 ;
55118: LD_ADDR_VAR 0 9
55122: PUSH
55123: LD_INT 0
55125: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list_1 [ unit_hex [ i ] ] [ 1 ] , hex_list_1 [ unit_hex [ i ] ] [ 2 ] , 1 , false ) ;
55126: LD_ADDR_VAR 0 2
55130: PUSH
55131: LD_VAR 0 5
55135: PUSH
55136: LD_VAR 0 7
55140: PUSH
55141: LD_VAR 0 1
55145: ARRAY
55146: ARRAY
55147: PUSH
55148: LD_INT 1
55150: ARRAY
55151: PPUSH
55152: LD_VAR 0 5
55156: PUSH
55157: LD_VAR 0 7
55161: PUSH
55162: LD_VAR 0 1
55166: ARRAY
55167: ARRAY
55168: PUSH
55169: LD_INT 2
55171: ARRAY
55172: PPUSH
55173: LD_INT 1
55175: PPUSH
55176: LD_INT 0
55178: PPUSH
55179: CALL_OW 17
55183: ST_TO_ADDR
// k = k + 1 ;
55184: LD_ADDR_VAR 0 9
55188: PUSH
55189: LD_VAR 0 9
55193: PUSH
55194: LD_INT 1
55196: PLUS
55197: ST_TO_ADDR
// until HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 or k >= 10 ;
55198: LD_VAR 0 2
55202: PUSH
55203: LD_INT 1
55205: ARRAY
55206: PPUSH
55207: LD_VAR 0 2
55211: PUSH
55212: LD_INT 2
55214: ARRAY
55215: PPUSH
55216: CALL_OW 428
55220: PUSH
55221: LD_INT 0
55223: GREATEREQUAL
55224: PUSH
55225: LD_VAR 0 9
55229: PUSH
55230: LD_INT 10
55232: GREATEREQUAL
55233: OR
55234: IFFALSE 55126
// rand_hexes = Replace ( rand_hexes , i , val ) ;
55236: LD_ADDR_VAR 0 8
55240: PUSH
55241: LD_VAR 0 8
55245: PPUSH
55246: LD_VAR 0 1
55250: PPUSH
55251: LD_VAR 0 2
55255: PPUSH
55256: CALL_OW 1
55260: ST_TO_ADDR
// end ; end ;
55261: GO 54882
55263: POP
55264: POP
// for i in sniper_group_2 do
55265: LD_ADDR_VAR 0 1
55269: PUSH
55270: LD_VAR 0 4
55274: PUSH
55275: FOR_IN
55276: IFFALSE 55656
// begin if GetDistUnitXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) > 2 then
55278: LD_VAR 0 1
55282: PPUSH
55283: LD_VAR 0 8
55287: PUSH
55288: LD_VAR 0 1
55292: ARRAY
55293: PUSH
55294: LD_INT 1
55296: ARRAY
55297: PPUSH
55298: LD_VAR 0 8
55302: PUSH
55303: LD_VAR 0 1
55307: ARRAY
55308: PUSH
55309: LD_INT 2
55311: ARRAY
55312: PPUSH
55313: CALL_OW 297
55317: PUSH
55318: LD_INT 2
55320: GREATER
55321: IFFALSE 55458
// begin if unit_hex [ i ] = hex_list_2 + 0 then
55323: LD_VAR 0 7
55327: PUSH
55328: LD_VAR 0 1
55332: ARRAY
55333: PUSH
55334: LD_VAR 0 6
55338: PUSH
55339: LD_INT 0
55341: PLUS
55342: EQUAL
55343: IFFALSE 55386
// ComAgressiveMove ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) else
55345: LD_VAR 0 1
55349: PPUSH
55350: LD_VAR 0 8
55354: PUSH
55355: LD_VAR 0 1
55359: ARRAY
55360: PUSH
55361: LD_INT 1
55363: ARRAY
55364: PPUSH
55365: LD_VAR 0 8
55369: PUSH
55370: LD_VAR 0 1
55374: ARRAY
55375: PUSH
55376: LD_INT 2
55378: ARRAY
55379: PPUSH
55380: CALL_OW 114
55384: GO 55425
// ComMoveXY ( i , rand_hexes [ i ] [ 1 ] , rand_hexes [ i ] [ 2 ] ) ;
55386: LD_VAR 0 1
55390: PPUSH
55391: LD_VAR 0 8
55395: PUSH
55396: LD_VAR 0 1
55400: ARRAY
55401: PUSH
55402: LD_INT 1
55404: ARRAY
55405: PPUSH
55406: LD_VAR 0 8
55410: PUSH
55411: LD_VAR 0 1
55415: ARRAY
55416: PUSH
55417: LD_INT 2
55419: ARRAY
55420: PPUSH
55421: CALL_OW 111
// if unit_hex [ i ] = hex_list_2 + 0 then
55425: LD_VAR 0 7
55429: PUSH
55430: LD_VAR 0 1
55434: ARRAY
55435: PUSH
55436: LD_VAR 0 6
55440: PUSH
55441: LD_INT 0
55443: PLUS
55444: EQUAL
55445: IFFALSE 55456
// AddComHold ( i ) ;
55447: LD_VAR 0 1
55451: PPUSH
55452: CALL_OW 200
// end else
55456: GO 55654
// if unit_hex [ i ] < hex_list_2 then
55458: LD_VAR 0 7
55462: PUSH
55463: LD_VAR 0 1
55467: ARRAY
55468: PUSH
55469: LD_VAR 0 6
55473: LESS
55474: IFFALSE 55654
// begin unit_hex = Replace ( unit_hex , i , unit_hex [ i ] + 1 ) ;
55476: LD_ADDR_VAR 0 7
55480: PUSH
55481: LD_VAR 0 7
55485: PPUSH
55486: LD_VAR 0 1
55490: PPUSH
55491: LD_VAR 0 7
55495: PUSH
55496: LD_VAR 0 1
55500: ARRAY
55501: PUSH
55502: LD_INT 1
55504: PLUS
55505: PPUSH
55506: CALL_OW 1
55510: ST_TO_ADDR
// k = 0 ;
55511: LD_ADDR_VAR 0 9
55515: PUSH
55516: LD_INT 0
55518: ST_TO_ADDR
// repeat val = RandHexXYR ( hex_list_2 [ unit_hex [ i ] ] [ 1 ] , hex_list_2 [ unit_hex [ i ] ] [ 2 ] , 1 , false ) ;
55519: LD_ADDR_VAR 0 2
55523: PUSH
55524: LD_VAR 0 6
55528: PUSH
55529: LD_VAR 0 7
55533: PUSH
55534: LD_VAR 0 1
55538: ARRAY
55539: ARRAY
55540: PUSH
55541: LD_INT 1
55543: ARRAY
55544: PPUSH
55545: LD_VAR 0 6
55549: PUSH
55550: LD_VAR 0 7
55554: PUSH
55555: LD_VAR 0 1
55559: ARRAY
55560: ARRAY
55561: PUSH
55562: LD_INT 2
55564: ARRAY
55565: PPUSH
55566: LD_INT 1
55568: PPUSH
55569: LD_INT 0
55571: PPUSH
55572: CALL_OW 17
55576: ST_TO_ADDR
// k = k + 1 ;
55577: LD_ADDR_VAR 0 9
55581: PUSH
55582: LD_VAR 0 9
55586: PUSH
55587: LD_INT 1
55589: PLUS
55590: ST_TO_ADDR
// until HexInfo ( val [ 1 ] , val [ 2 ] ) >= 0 or k >= 10 ;
55591: LD_VAR 0 2
55595: PUSH
55596: LD_INT 1
55598: ARRAY
55599: PPUSH
55600: LD_VAR 0 2
55604: PUSH
55605: LD_INT 2
55607: ARRAY
55608: PPUSH
55609: CALL_OW 428
55613: PUSH
55614: LD_INT 0
55616: GREATEREQUAL
55617: PUSH
55618: LD_VAR 0 9
55622: PUSH
55623: LD_INT 10
55625: GREATEREQUAL
55626: OR
55627: IFFALSE 55519
// rand_hexes = Replace ( rand_hexes , i , val ) ;
55629: LD_ADDR_VAR 0 8
55633: PUSH
55634: LD_VAR 0 8
55638: PPUSH
55639: LD_VAR 0 1
55643: PPUSH
55644: LD_VAR 0 2
55648: PPUSH
55649: CALL_OW 1
55653: ST_TO_ADDR
// end ; end ;
55654: GO 55275
55656: POP
55657: POP
// until false ;
55658: LD_INT 0
55660: IFFALSE 54801
// end ;
55662: PPOPN 9
55664: END
// every 0 0$1 + 0 0$0.9 trigger game_phase = 3 do var old_man , x , y , temp_list , dist ; var hex , hex_list_before , hex_list_after ;
55665: LD_EXP 89
55669: PUSH
55670: LD_INT 3
55672: EQUAL
55673: IFFALSE 57295
55675: GO 55677
55677: DISABLE
55678: LD_INT 0
55680: PPUSH
55681: PPUSH
55682: PPUSH
55683: PPUSH
55684: PPUSH
55685: PPUSH
55686: PPUSH
55687: PPUSH
// begin while ( ai_vehicles_attack [ 3 ] > 0 or ai_attacking_scientists [ 3 ] > 0 or ai_attacking_soldiers [ 3 ] > 0 ) and russian_attack_strategy <> 1 do
55688: LD_EXP 41
55692: PUSH
55693: LD_INT 3
55695: ARRAY
55696: PUSH
55697: LD_INT 0
55699: GREATER
55700: PUSH
55701: LD_EXP 65
55705: PUSH
55706: LD_INT 3
55708: ARRAY
55709: PUSH
55710: LD_INT 0
55712: GREATER
55713: OR
55714: PUSH
55715: LD_EXP 64
55719: PUSH
55720: LD_INT 3
55722: ARRAY
55723: PUSH
55724: LD_INT 0
55726: GREATER
55727: OR
55728: PUSH
55729: LD_EXP 84
55733: PUSH
55734: LD_INT 1
55736: NONEQUAL
55737: AND
55738: IFFALSE 55749
// wait ( 0 0$2 ) ;
55740: LD_INT 70
55742: PPUSH
55743: CALL_OW 67
55747: GO 55688
// if PlayerAtEasternBorder then
55749: CALL 31614 0 0
55753: IFFALSE 55815
// begin hex_list_before = [ [ 127 , 42 ] , [ 139 , 45 ] ] ;
55755: LD_ADDR_VAR 0 7
55759: PUSH
55760: LD_INT 127
55762: PUSH
55763: LD_INT 42
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 139
55772: PUSH
55773: LD_INT 45
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// hex_list_after = [ [ 139 , 45 ] , [ 138 , 39 ] ] ;
55784: LD_ADDR_VAR 0 8
55788: PUSH
55789: LD_INT 139
55791: PUSH
55792: LD_INT 45
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 138
55801: PUSH
55802: LD_INT 39
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: ST_TO_ADDR
// end else
55813: GO 55884
// begin hex_list_before = [ [ 119 , 55 ] , [ 124 , 73 ] , [ 121 , 86 ] ] ;
55815: LD_ADDR_VAR 0 7
55819: PUSH
55820: LD_INT 119
55822: PUSH
55823: LD_INT 55
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 124
55832: PUSH
55833: LD_INT 73
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 121
55842: PUSH
55843: LD_INT 86
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// hex_list_after = [ [ 121 , 99 ] , [ 141 , 118 ] ] ;
55855: LD_ADDR_VAR 0 8
55859: PUSH
55860: LD_INT 121
55862: PUSH
55863: LD_INT 99
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 141
55872: PUSH
55873: LD_INT 118
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: ST_TO_ADDR
// end ; temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55884: LD_ADDR_VAR 0 4
55888: PUSH
55889: LD_INT 22
55891: PUSH
55892: LD_EXP 3
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 30
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 30
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PPUSH
55933: CALL_OW 69
55937: ST_TO_ADDR
// if temp_list > 0 then
55938: LD_VAR 0 4
55942: PUSH
55943: LD_INT 0
55945: GREATER
55946: IFFALSE 55987
// hex = [ GetX ( temp_list [ 1 ] ) , GetY ( temp_list [ 1 ] ) ] else
55948: LD_ADDR_VAR 0 6
55952: PUSH
55953: LD_VAR 0 4
55957: PUSH
55958: LD_INT 1
55960: ARRAY
55961: PPUSH
55962: CALL_OW 250
55966: PUSH
55967: LD_VAR 0 4
55971: PUSH
55972: LD_INT 1
55974: ARRAY
55975: PPUSH
55976: CALL_OW 251
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: ST_TO_ADDR
55985: GO 56025
// if PlayerAtEasternBorder then
55987: CALL 31614 0 0
55991: IFFALSE 56010
// hex = [ 144 , 65 ] else
55993: LD_ADDR_VAR 0 6
55997: PUSH
55998: LD_INT 144
56000: PUSH
56001: LD_INT 65
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: ST_TO_ADDR
56008: GO 56025
// hex = [ 99 , 110 ] ;
56010: LD_ADDR_VAR 0 6
56014: PUSH
56015: LD_INT 99
56017: PUSH
56018: LD_INT 110
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: ST_TO_ADDR
// hex_list_before = hex_list_before ^ [ hex ] ;
56025: LD_ADDR_VAR 0 7
56029: PUSH
56030: LD_VAR 0 7
56034: PUSH
56035: LD_VAR 0 6
56039: PUSH
56040: EMPTY
56041: LIST
56042: ADD
56043: ST_TO_ADDR
// SetDir ( Khattam , 5 ) ;
56044: LD_EXP 27
56048: PPUSH
56049: LD_INT 5
56051: PPUSH
56052: CALL_OW 233
// temp_list = FilterAllUnits ( [ [ f_side , americans ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] , [ f_ok ] ] ) ;
56056: LD_ADDR_VAR 0 4
56060: PUSH
56061: LD_INT 22
56063: PUSH
56064: LD_EXP 7
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: LD_INT 30
56078: PUSH
56079: LD_INT 6
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 30
56088: PUSH
56089: LD_INT 7
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 30
56098: PUSH
56099: LD_INT 8
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 50
56114: PUSH
56115: EMPTY
56116: LIST
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: LIST
56122: PPUSH
56123: CALL_OW 69
56127: ST_TO_ADDR
// if temp_list > 0 then
56128: LD_VAR 0 4
56132: PUSH
56133: LD_INT 0
56135: GREATER
56136: IFFALSE 56264
// begin while not PlaceHumanInUnit ( Khattam , temp_list [ 1 ] ) do
56138: LD_EXP 27
56142: PPUSH
56143: LD_VAR 0 4
56147: PUSH
56148: LD_INT 1
56150: ARRAY
56151: PPUSH
56152: CALL_OW 52
56156: NOT
56157: IFFALSE 56262
// begin if not IsOk ( temp_list [ 1 ] ) or UnitsInside ( temp_list [ 1 ] ) + 0 = 6 then
56159: LD_VAR 0 4
56163: PUSH
56164: LD_INT 1
56166: ARRAY
56167: PPUSH
56168: CALL_OW 302
56172: NOT
56173: PUSH
56174: LD_VAR 0 4
56178: PUSH
56179: LD_INT 1
56181: ARRAY
56182: PPUSH
56183: CALL_OW 313
56187: PUSH
56188: LD_INT 0
56190: PLUS
56191: PUSH
56192: LD_INT 6
56194: EQUAL
56195: OR
56196: IFFALSE 56253
// begin while not PlaceUnitXYR ( Khattam , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 4 , false ) do
56198: LD_EXP 27
56202: PPUSH
56203: LD_EXP 42
56207: PUSH
56208: LD_INT 1
56210: ARRAY
56211: PUSH
56212: LD_INT 1
56214: ARRAY
56215: PPUSH
56216: LD_EXP 42
56220: PUSH
56221: LD_INT 1
56223: ARRAY
56224: PUSH
56225: LD_INT 2
56227: ARRAY
56228: PPUSH
56229: LD_INT 4
56231: PPUSH
56232: LD_INT 0
56234: PPUSH
56235: CALL_OW 50
56239: NOT
56240: IFFALSE 56251
// wait ( 0 0$2 ) ;
56242: LD_INT 70
56244: PPUSH
56245: CALL_OW 67
56249: GO 56198
// break ;
56251: GO 56262
// end ; wait ( 0 0$2 ) ;
56253: LD_INT 70
56255: PPUSH
56256: CALL_OW 67
// end ;
56260: GO 56138
// end else
56262: GO 56317
// begin while not PlaceUnitXYR ( Khattam , ai_human_pullback_hex [ 1 ] [ 1 ] , ai_human_pullback_hex [ 1 ] [ 2 ] , 4 , false ) do
56264: LD_EXP 27
56268: PPUSH
56269: LD_EXP 42
56273: PUSH
56274: LD_INT 1
56276: ARRAY
56277: PUSH
56278: LD_INT 1
56280: ARRAY
56281: PPUSH
56282: LD_EXP 42
56286: PUSH
56287: LD_INT 1
56289: ARRAY
56290: PUSH
56291: LD_INT 2
56293: ARRAY
56294: PPUSH
56295: LD_INT 4
56297: PPUSH
56298: LD_INT 0
56300: PPUSH
56301: CALL_OW 50
56305: NOT
56306: IFFALSE 56317
// wait ( 0 0$2 ) ;
56308: LD_INT 70
56310: PPUSH
56311: CALL_OW 67
56315: GO 56264
// end ; SetAttitude ( you , americans_alt , att_neutral , true ) ;
56317: LD_EXP 3
56321: PPUSH
56322: LD_EXP 9
56326: PPUSH
56327: LD_INT 0
56329: PPUSH
56330: LD_INT 1
56332: PPUSH
56333: CALL_OW 80
// hex = 1 ;
56337: LD_ADDR_VAR 0 6
56341: PUSH
56342: LD_INT 1
56344: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56345: LD_INT 35
56347: PPUSH
56348: CALL_OW 67
// if GetDistUnitXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) > 3 then
56352: LD_EXP 27
56356: PPUSH
56357: LD_VAR 0 7
56361: PUSH
56362: LD_VAR 0 6
56366: ARRAY
56367: PUSH
56368: LD_INT 1
56370: ARRAY
56371: PPUSH
56372: LD_VAR 0 7
56376: PUSH
56377: LD_VAR 0 6
56381: ARRAY
56382: PUSH
56383: LD_INT 2
56385: ARRAY
56386: PPUSH
56387: CALL_OW 297
56391: PUSH
56392: LD_INT 3
56394: GREATER
56395: IFFALSE 56438
// ComMoveXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
56397: LD_EXP 27
56401: PPUSH
56402: LD_VAR 0 7
56406: PUSH
56407: LD_VAR 0 6
56411: ARRAY
56412: PUSH
56413: LD_INT 1
56415: ARRAY
56416: PPUSH
56417: LD_VAR 0 7
56421: PUSH
56422: LD_VAR 0 6
56426: ARRAY
56427: PUSH
56428: LD_INT 2
56430: ARRAY
56431: PPUSH
56432: CALL_OW 111
56436: GO 56464
// if hex < hex_list_before then
56438: LD_VAR 0 6
56442: PUSH
56443: LD_VAR 0 7
56447: LESS
56448: IFFALSE 56464
// hex = hex + 1 ;
56450: LD_ADDR_VAR 0 6
56454: PUSH
56455: LD_VAR 0 6
56459: PUSH
56460: LD_INT 1
56462: PLUS
56463: ST_TO_ADDR
// until See ( you , Khattam ) or IsDead ( Khattam ) ;
56464: LD_EXP 3
56468: PPUSH
56469: LD_EXP 27
56473: PPUSH
56474: CALL_OW 292
56478: PUSH
56479: LD_EXP 27
56483: PPUSH
56484: CALL_OW 301
56488: OR
56489: IFFALSE 56345
// if See ( you , Khattam ) then
56491: LD_EXP 3
56495: PPUSH
56496: LD_EXP 27
56500: PPUSH
56501: CALL_OW 292
56505: IFFALSE 57295
// begin CenterOnUnits ( Khattam ) ;
56507: LD_EXP 27
56511: PPUSH
56512: CALL_OW 85
// DialogueOn ;
56516: CALL_OW 6
// ForceSay ( Khattam , D9-Kh-1 ) ;
56520: LD_EXP 27
56524: PPUSH
56525: LD_STRING D9-Kh-1
56527: PPUSH
56528: CALL_OW 91
// if IsOk ( Oswald ) then
56532: LD_EXP 12
56536: PPUSH
56537: CALL_OW 302
56541: IFFALSE 56577
// begin if oswald_is_substitute then
56543: LD_EXP 81
56547: IFFALSE 56563
// Say ( Oswald , D9-Os_sub-1 ) else
56549: LD_EXP 12
56553: PPUSH
56554: LD_STRING D9-Os_sub-1
56556: PPUSH
56557: CALL_OW 88
56561: GO 56575
// Say ( Oswald , D9-Os-1 ) ;
56563: LD_EXP 12
56567: PPUSH
56568: LD_STRING D9-Os-1
56570: PPUSH
56571: CALL_OW 88
// end else
56575: GO 56589
// ForceSay ( Heike , D9-H-1 ) ;
56577: LD_EXP 10
56581: PPUSH
56582: LD_STRING D9-H-1
56584: PPUSH
56585: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-2 ) ;
56589: LD_EXP 27
56593: PPUSH
56594: LD_STRING D9-Kh-2
56596: PPUSH
56597: CALL_OW 91
// ForceSay ( Heike , D9-H-2 ) ;
56601: LD_EXP 10
56605: PPUSH
56606: LD_STRING D9-H-2
56608: PPUSH
56609: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-3 ) ;
56613: LD_EXP 27
56617: PPUSH
56618: LD_STRING D9-Kh-3
56620: PPUSH
56621: CALL_OW 91
// dwait ( 0 0$0.2 ) ;
56625: LD_INT 7
56627: PPUSH
56628: CALL_OW 68
// khattam_choice = Query ( QKhattamJoin ) ;
56632: LD_ADDR_EXP 96
56636: PUSH
56637: LD_STRING QKhattamJoin
56639: PPUSH
56640: CALL_OW 97
56644: ST_TO_ADDR
// case khattam_choice of 1 :
56645: LD_EXP 96
56649: PUSH
56650: LD_INT 1
56652: DOUBLE
56653: EQUAL
56654: IFTRUE 56658
56656: GO 57086
56658: POP
// begin ForceSay ( Heike , D9-H-1-1 ) ;
56659: LD_EXP 10
56663: PPUSH
56664: LD_STRING D9-H-1-1
56666: PPUSH
56667: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-1-1 ) ;
56671: LD_EXP 27
56675: PPUSH
56676: LD_STRING D9-Kh-1-1
56678: PPUSH
56679: CALL_OW 91
// DialogueOff ;
56683: CALL_OW 7
// SetAttitude ( you , americans_alt , att_friend , true ) ;
56687: LD_EXP 3
56691: PPUSH
56692: LD_EXP 9
56696: PPUSH
56697: LD_INT 1
56699: PPUSH
56700: LD_INT 1
56702: PPUSH
56703: CALL_OW 80
// while FilterAllUnits ( [ [ f_side , americans ] , [ f_ok ] , [ f_dist , Khattam , 17 ] ] ) > 0 do
56707: LD_INT 22
56709: PUSH
56710: LD_EXP 7
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 50
56721: PUSH
56722: EMPTY
56723: LIST
56724: PUSH
56725: LD_INT 91
56727: PUSH
56728: LD_EXP 27
56732: PUSH
56733: LD_INT 17
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: PPUSH
56746: CALL_OW 69
56750: PUSH
56751: LD_INT 0
56753: GREATER
56754: IFFALSE 56918
// begin dist = GetDistUnitXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) ;
56756: LD_ADDR_VAR 0 5
56760: PUSH
56761: LD_EXP 27
56765: PPUSH
56766: LD_VAR 0 7
56770: PUSH
56771: LD_VAR 0 6
56775: ARRAY
56776: PUSH
56777: LD_INT 1
56779: ARRAY
56780: PPUSH
56781: LD_VAR 0 7
56785: PUSH
56786: LD_VAR 0 6
56790: ARRAY
56791: PUSH
56792: LD_INT 2
56794: ARRAY
56795: PPUSH
56796: CALL_OW 297
56800: ST_TO_ADDR
// if not ( dist <= 3 or ( hex = hex_list_before + 0 and dist <= 7 ) ) then
56801: LD_VAR 0 5
56805: PUSH
56806: LD_INT 3
56808: LESSEQUAL
56809: PUSH
56810: LD_VAR 0 6
56814: PUSH
56815: LD_VAR 0 7
56819: PUSH
56820: LD_INT 0
56822: PLUS
56823: EQUAL
56824: PUSH
56825: LD_VAR 0 5
56829: PUSH
56830: LD_INT 7
56832: LESSEQUAL
56833: AND
56834: OR
56835: NOT
56836: IFFALSE 56879
// ComMoveXY ( Khattam , hex_list_before [ hex ] [ 1 ] , hex_list_before [ hex ] [ 2 ] ) else
56838: LD_EXP 27
56842: PPUSH
56843: LD_VAR 0 7
56847: PUSH
56848: LD_VAR 0 6
56852: ARRAY
56853: PUSH
56854: LD_INT 1
56856: ARRAY
56857: PPUSH
56858: LD_VAR 0 7
56862: PUSH
56863: LD_VAR 0 6
56867: ARRAY
56868: PUSH
56869: LD_INT 2
56871: ARRAY
56872: PPUSH
56873: CALL_OW 111
56877: GO 56909
// if hex < hex_list_before then
56879: LD_VAR 0 6
56883: PUSH
56884: LD_VAR 0 7
56888: LESS
56889: IFFALSE 56907
// hex = hex + 1 else
56891: LD_ADDR_VAR 0 6
56895: PUSH
56896: LD_VAR 0 6
56900: PUSH
56901: LD_INT 1
56903: PLUS
56904: ST_TO_ADDR
56905: GO 56909
// break ;
56907: GO 56918
// wait ( 0 0$1 ) ;
56909: LD_INT 35
56911: PPUSH
56912: CALL_OW 67
// end ;
56916: GO 56707
// PrepareNewCharacter ( Khatam ) ;
56918: LD_STRING Khatam
56920: PPUSH
56921: CALL_OW 26
// uc_side = you ;
56925: LD_ADDR_OWVAR 20
56929: PUSH
56930: LD_EXP 3
56934: ST_TO_ADDR
// uc_nation = nation_american ;
56935: LD_ADDR_OWVAR 21
56939: PUSH
56940: LD_INT 1
56942: ST_TO_ADDR
// old_man = Khattam ;
56943: LD_ADDR_VAR 0 1
56947: PUSH
56948: LD_EXP 27
56952: ST_TO_ADDR
// Khattam = CreateHuman ;
56953: LD_ADDR_EXP 27
56957: PUSH
56958: CALL_OW 44
56962: ST_TO_ADDR
// hc_importance = 0 ;
56963: LD_ADDR_OWVAR 32
56967: PUSH
56968: LD_INT 0
56970: ST_TO_ADDR
// CopySkills ( old_man , Khattam ) ;
56971: LD_VAR 0 1
56975: PPUSH
56976: LD_EXP 27
56980: PPUSH
56981: CALL_OW 510
// x = GetX ( old_man ) ;
56985: LD_ADDR_VAR 0 2
56989: PUSH
56990: LD_VAR 0 1
56994: PPUSH
56995: CALL_OW 250
56999: ST_TO_ADDR
// y = GetY ( old_man ) ;
57000: LD_ADDR_VAR 0 3
57004: PUSH
57005: LD_VAR 0 1
57009: PPUSH
57010: CALL_OW 251
57014: ST_TO_ADDR
// SetDir ( Khattam , GetDir ( old_man ) ) ;
57015: LD_EXP 27
57019: PPUSH
57020: LD_VAR 0 1
57024: PPUSH
57025: CALL_OW 254
57029: PPUSH
57030: CALL_OW 233
// SetLives ( Khattam , GetLives ( old_man ) ) ;
57034: LD_EXP 27
57038: PPUSH
57039: LD_VAR 0 1
57043: PPUSH
57044: CALL_OW 256
57048: PPUSH
57049: CALL_OW 234
// RemoveUnit ( old_man ) ;
57053: LD_VAR 0 1
57057: PPUSH
57058: CALL_OW 64
// PlaceUnitXY ( Khattam , x , y , false ) ;
57062: LD_EXP 27
57066: PPUSH
57067: LD_VAR 0 2
57071: PPUSH
57072: LD_VAR 0 3
57076: PPUSH
57077: LD_INT 0
57079: PPUSH
57080: CALL_OW 48
// end ; 2 :
57084: GO 57126
57086: LD_INT 2
57088: DOUBLE
57089: EQUAL
57090: IFTRUE 57094
57092: GO 57125
57094: POP
// begin ForceSay ( Heike , D9-H-2-1 ) ;
57095: LD_EXP 10
57099: PPUSH
57100: LD_STRING D9-H-2-1
57102: PPUSH
57103: CALL_OW 91
// ForceSay ( Khattam , D9-Kh-2-1 ) ;
57107: LD_EXP 27
57111: PPUSH
57112: LD_STRING D9-Kh-2-1
57114: PPUSH
57115: CALL_OW 91
// DialogueOff ;
57119: CALL_OW 7
// end ; end ;
57123: GO 57126
57125: POP
// ComStop ( Khattam ) ;
57126: LD_EXP 27
57130: PPUSH
57131: CALL_OW 141
// if khattam_choice = 2 then
57135: LD_EXP 96
57139: PUSH
57140: LD_INT 2
57142: EQUAL
57143: IFFALSE 57295
// begin hex = 1 ;
57145: LD_ADDR_VAR 0 6
57149: PUSH
57150: LD_INT 1
57152: ST_TO_ADDR
// repeat if GetDistUnitXY ( Khattam , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) > 3 then
57153: LD_EXP 27
57157: PPUSH
57158: LD_VAR 0 8
57162: PUSH
57163: LD_VAR 0 6
57167: ARRAY
57168: PUSH
57169: LD_INT 1
57171: ARRAY
57172: PPUSH
57173: LD_VAR 0 8
57177: PUSH
57178: LD_VAR 0 6
57182: ARRAY
57183: PUSH
57184: LD_INT 2
57186: ARRAY
57187: PPUSH
57188: CALL_OW 297
57192: PUSH
57193: LD_INT 3
57195: GREATER
57196: IFFALSE 57239
// ComMoveXY ( Khattam , hex_list_after [ hex ] [ 1 ] , hex_list_after [ hex ] [ 2 ] ) else
57198: LD_EXP 27
57202: PPUSH
57203: LD_VAR 0 8
57207: PUSH
57208: LD_VAR 0 6
57212: ARRAY
57213: PUSH
57214: LD_INT 1
57216: ARRAY
57217: PPUSH
57218: LD_VAR 0 8
57222: PUSH
57223: LD_VAR 0 6
57227: ARRAY
57228: PUSH
57229: LD_INT 2
57231: ARRAY
57232: PPUSH
57233: CALL_OW 111
57237: GO 57276
// if hex < hex_list_after then
57239: LD_VAR 0 6
57243: PUSH
57244: LD_VAR 0 8
57248: LESS
57249: IFFALSE 57267
// hex = hex + 1 else
57251: LD_ADDR_VAR 0 6
57255: PUSH
57256: LD_VAR 0 6
57260: PUSH
57261: LD_INT 1
57263: PLUS
57264: ST_TO_ADDR
57265: GO 57276
// RemoveUnit ( Khattam ) ;
57267: LD_EXP 27
57271: PPUSH
57272: CALL_OW 64
// wait ( 0 0$1 ) ;
57276: LD_INT 35
57278: PPUSH
57279: CALL_OW 67
// until not IsPlaced ( Khattam ) ;
57283: LD_EXP 27
57287: PPUSH
57288: CALL_OW 305
57292: NOT
57293: IFFALSE 57153
// end ; end ; end ;
57295: PPOPN 8
57297: END
// every 0 0$1 + 0 0$0.8 trigger game_phase = 3 do var init_buildings , init_humans , temp_list , temp_unit ;
57298: LD_EXP 89
57302: PUSH
57303: LD_INT 3
57305: EQUAL
57306: IFFALSE 57879
57308: GO 57310
57310: DISABLE
57311: LD_INT 0
57313: PPUSH
57314: PPUSH
57315: PPUSH
57316: PPUSH
// begin init_buildings = GetAmBuildings ;
57317: LD_ADDR_VAR 0 1
57321: PUSH
57322: CALL 57882 0 0
57326: ST_TO_ADDR
// init_humans = GetAmHumans ;
57327: LD_ADDR_VAR 0 2
57331: PUSH
57332: CALL 57969 0 0
57336: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
57337: LD_INT 175
57339: PPUSH
57340: CALL_OW 67
// until init_buildings >= GetAmBuildings * 2 or init_humans >= GetAmHumans * 2 ;
57344: LD_VAR 0 1
57348: PUSH
57349: CALL 57882 0 0
57353: PUSH
57354: LD_INT 2
57356: MUL
57357: GREATEREQUAL
57358: PUSH
57359: LD_VAR 0 2
57363: PUSH
57364: CALL 57969 0 0
57368: PUSH
57369: LD_INT 2
57371: MUL
57372: GREATEREQUAL
57373: OR
57374: IFFALSE 57337
// DialogueOn ;
57376: CALL_OW 6
// SayRadio ( Simms , D10-Simm-1 ) ;
57380: LD_EXP 25
57384: PPUSH
57385: LD_STRING D10-Simm-1
57387: PPUSH
57388: CALL_OW 94
// ForceSay ( Heike , D10-H-1 ) ;
57392: LD_EXP 10
57396: PPUSH
57397: LD_STRING D10-H-1
57399: PPUSH
57400: CALL_OW 91
// SayRadio ( Simms , D10-Simm-2 ) ;
57404: LD_EXP 25
57408: PPUSH
57409: LD_STRING D10-Simm-2
57411: PPUSH
57412: CALL_OW 94
// ForceSay ( Heike , D10-H-2 ) ;
57416: LD_EXP 10
57420: PPUSH
57421: LD_STRING D10-H-2
57423: PPUSH
57424: CALL_OW 91
// SayRadio ( Simms , D10-Simm-3 ) ;
57428: LD_EXP 25
57432: PPUSH
57433: LD_STRING D10-Simm-3
57435: PPUSH
57436: CALL_OW 94
// ForceSay ( Heike , D10-H-3 ) ;
57440: LD_EXP 10
57444: PPUSH
57445: LD_STRING D10-H-3
57447: PPUSH
57448: CALL_OW 91
// SayRadio ( Simms , D10-Simm-4 ) ;
57452: LD_EXP 25
57456: PPUSH
57457: LD_STRING D10-Simm-4
57459: PPUSH
57460: CALL_OW 94
// temp_list = UnitFilter ( [ Kowalski , Suze , Kurt , Dwayne ] , [ f_alive ] ) ;
57464: LD_ADDR_VAR 0 3
57468: PUSH
57469: LD_EXP 14
57473: PUSH
57474: LD_EXP 16
57478: PUSH
57479: LD_EXP 18
57483: PUSH
57484: LD_EXP 19
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: PPUSH
57495: LD_INT 51
57497: PUSH
57498: EMPTY
57499: LIST
57500: PPUSH
57501: CALL_OW 72
57505: ST_TO_ADDR
// if temp_list = 0 then
57506: LD_VAR 0 3
57510: PUSH
57511: LD_INT 0
57513: EQUAL
57514: IFFALSE 57644
// temp_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff ( GetApes ( you ) ^ [ Heike , Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson ] ) ;
57516: LD_ADDR_VAR 0 3
57520: PUSH
57521: LD_INT 22
57523: PUSH
57524: LD_EXP 3
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 21
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PPUSH
57547: CALL_OW 69
57551: PUSH
57552: LD_EXP 3
57556: PPUSH
57557: CALL 43838 0 1
57561: PUSH
57562: LD_EXP 10
57566: PUSH
57567: LD_EXP 11
57571: PUSH
57572: LD_EXP 12
57576: PUSH
57577: LD_EXP 13
57581: PUSH
57582: LD_EXP 14
57586: PUSH
57587: LD_EXP 15
57591: PUSH
57592: LD_EXP 16
57596: PUSH
57597: LD_EXP 17
57601: PUSH
57602: LD_EXP 18
57606: PUSH
57607: LD_EXP 19
57611: PUSH
57612: LD_EXP 20
57616: PUSH
57617: LD_EXP 21
57621: PUSH
57622: LD_EXP 22
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: ADD
57642: DIFF
57643: ST_TO_ADDR
// if temp_list > 0 then
57644: LD_VAR 0 3
57648: PUSH
57649: LD_INT 0
57651: GREATER
57652: IFFALSE 57845
// begin temp_unit = temp_list [ Rand ( 1 , temp_list ) ] ;
57654: LD_ADDR_VAR 0 4
57658: PUSH
57659: LD_VAR 0 3
57663: PUSH
57664: LD_INT 1
57666: PPUSH
57667: LD_VAR 0 3
57671: PPUSH
57672: CALL_OW 12
57676: ARRAY
57677: ST_TO_ADDR
// case temp_unit of Kowalski :
57678: LD_VAR 0 4
57682: PUSH
57683: LD_EXP 14
57687: DOUBLE
57688: EQUAL
57689: IFTRUE 57693
57691: GO 57708
57693: POP
// ForceSay ( temp_unit , D10-Ko-1 ) ; Suze :
57694: LD_VAR 0 4
57698: PPUSH
57699: LD_STRING D10-Ko-1
57701: PPUSH
57702: CALL_OW 91
57706: GO 57845
57708: LD_EXP 16
57712: DOUBLE
57713: EQUAL
57714: IFTRUE 57718
57716: GO 57733
57718: POP
// ForceSay ( temp_unit , D10-Su-1 ) ; Kurt :
57719: LD_VAR 0 4
57723: PPUSH
57724: LD_STRING D10-Su-1
57726: PPUSH
57727: CALL_OW 91
57731: GO 57845
57733: LD_EXP 18
57737: DOUBLE
57738: EQUAL
57739: IFTRUE 57743
57741: GO 57778
57743: POP
// begin if kurt_is_substitute then
57744: LD_EXP 82
57748: IFFALSE 57764
// ForceSay ( temp_unit , D10-Ku-1 ) else
57750: LD_VAR 0 4
57754: PPUSH
57755: LD_STRING D10-Ku-1
57757: PPUSH
57758: CALL_OW 91
57762: GO 57776
// ForceSay ( temp_unit , D10-Ku-1 ) ;
57764: LD_VAR 0 4
57768: PPUSH
57769: LD_STRING D10-Ku-1
57771: PPUSH
57772: CALL_OW 91
// end ; Dwayne :
57776: GO 57845
57778: LD_EXP 19
57782: DOUBLE
57783: EQUAL
57784: IFTRUE 57788
57786: GO 57803
57788: POP
// ForceSay ( temp_unit , D10-Dw-1 ) ; else
57789: LD_VAR 0 4
57793: PPUSH
57794: LD_STRING D10-Dw-1
57796: PPUSH
57797: CALL_OW 91
57801: GO 57845
57803: POP
// if GetSex ( temp_unit ) = sex_male then
57804: LD_VAR 0 4
57808: PPUSH
57809: CALL_OW 258
57813: PUSH
57814: LD_INT 1
57816: EQUAL
57817: IFFALSE 57833
// ForceSay ( temp_unit , D10-SomeM-1 ) else
57819: LD_VAR 0 4
57823: PPUSH
57824: LD_STRING D10-SomeM-1
57826: PPUSH
57827: CALL_OW 91
57831: GO 57845
// ForceSay ( temp_unit , D10-SomeF-1 ) ; end ;
57833: LD_VAR 0 4
57837: PPUSH
57838: LD_STRING D10-SomeF-1
57840: PPUSH
57841: CALL_OW 91
// end ; dwait ( 0 0$0.9 ) ;
57845: LD_INT 32
57847: PPUSH
57848: CALL_OW 68
// ForceSay ( Heike , D10-H-4 ) ;
57852: LD_EXP 10
57856: PPUSH
57857: LD_STRING D10-H-4
57859: PPUSH
57860: CALL_OW 91
// dwait ( 0 0$0.2 ) ;
57864: LD_INT 7
57866: PPUSH
57867: CALL_OW 68
// EndMission ;
57871: CALL 58013 0 0
// DialogueOff ;
57875: CALL_OW 7
// end ;
57879: PPOPN 4
57881: END
// function GetAmBuildings ; begin
57882: LD_INT 0
57884: PPUSH
// result = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_building ] ] ) diff [ b_ext_computer , b_ext_gun , b_ext_laser , b_ext_noncombat , b_ext_radar , b_ext_radio , b_ext_rocket , b_ext_siberium , b_ext_stitch , b_ext_track ] ;
57885: LD_ADDR_VAR 0 1
57889: PUSH
57890: LD_INT 22
57892: PUSH
57893: LD_EXP 7
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 21
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PPUSH
57916: CALL_OW 69
57920: PUSH
57921: LD_INT 24
57923: PUSH
57924: LD_INT 17
57926: PUSH
57927: LD_INT 25
57929: PUSH
57930: LD_INT 19
57932: PUSH
57933: LD_INT 20
57935: PUSH
57936: LD_INT 22
57938: PUSH
57939: LD_INT 18
57941: PUSH
57942: LD_INT 21
57944: PUSH
57945: LD_INT 23
57947: PUSH
57948: LD_INT 16
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: DIFF
57963: ST_TO_ADDR
// end ;
57964: LD_VAR 0 1
57968: RET
// function GetAmHumans ; begin
57969: LD_INT 0
57971: PPUSH
// result = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
57972: LD_ADDR_VAR 0 1
57976: PUSH
57977: LD_INT 22
57979: PUSH
57980: LD_EXP 7
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 21
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PPUSH
58003: CALL_OW 69
58007: ST_TO_ADDR
// end ; end_of_file
58008: LD_VAR 0 1
58012: RET
// export function EndMission ; var val , all_list , un_list , name_list ; begin
58013: LD_INT 0
58015: PPUSH
58016: PPUSH
58017: PPUSH
58018: PPUSH
58019: PPUSH
// if original_gensher_people + 0 = saved_gensher_people + 0 then
58020: LD_EXP 83
58024: PUSH
58025: LD_INT 0
58027: PLUS
58028: PUSH
58029: LD_EXP 95
58033: PUSH
58034: LD_INT 0
58036: PLUS
58037: EQUAL
58038: IFFALSE 58050
// val = 1 else
58040: LD_ADDR_VAR 0 2
58044: PUSH
58045: LD_INT 1
58047: ST_TO_ADDR
58048: GO 58059
// val = - 1 ;
58050: LD_ADDR_VAR 0 2
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: ST_TO_ADDR
// AddMedal ( GensherPeople , val ) ;
58059: LD_STRING GensherPeople
58061: PPUSH
58062: LD_VAR 0 2
58066: PPUSH
58067: CALL_OW 101
// if val = 1 then
58071: LD_VAR 0 2
58075: PUSH
58076: LD_INT 1
58078: EQUAL
58079: IFFALSE 58093
// SaveVariable ( 1 , AllGensherPeopleSaved_11_cont ) else
58081: LD_INT 1
58083: PPUSH
58084: LD_STRING AllGensherPeopleSaved_11_cont
58086: PPUSH
58087: CALL_OW 39
58091: GO 58103
// SaveVariable ( 0 , AllGensherPeopleSaved_11_cont ) ;
58093: LD_INT 0
58095: PPUSH
58096: LD_STRING AllGensherPeopleSaved_11_cont
58098: PPUSH
58099: CALL_OW 39
// if cameras_placed then
58103: LD_EXP 92
58107: IFFALSE 58119
// val = 1 else
58109: LD_ADDR_VAR 0 2
58113: PUSH
58114: LD_INT 1
58116: ST_TO_ADDR
58117: GO 58153
// if Researched ( you , tech_HidCam ) then
58119: LD_EXP 3
58123: PPUSH
58124: LD_INT 17
58126: PPUSH
58127: CALL_OW 325
58131: IFFALSE 58144
// val = - 1 else
58133: LD_ADDR_VAR 0 2
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: ST_TO_ADDR
58142: GO 58153
// val = - 2 ;
58144: LD_ADDR_VAR 0 2
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: ST_TO_ADDR
// AddMedal ( HiddenCamera , val ) ;
58153: LD_STRING HiddenCamera
58155: PPUSH
58156: LD_VAR 0 2
58160: PPUSH
58161: CALL_OW 101
// if russian_interference_points <= [ 11 , 8 , 5 ] [ difficulty ] then
58165: LD_EXP 97
58169: PUSH
58170: LD_INT 11
58172: PUSH
58173: LD_INT 8
58175: PUSH
58176: LD_INT 5
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: LIST
58183: PUSH
58184: LD_OWVAR 67
58188: ARRAY
58189: LESSEQUAL
58190: IFFALSE 58202
// val = 1 else
58192: LD_ADDR_VAR 0 2
58196: PUSH
58197: LD_INT 1
58199: ST_TO_ADDR
58200: GO 58211
// val = - 1 ;
58202: LD_ADDR_VAR 0 2
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: ST_TO_ADDR
// AddMedal ( RussianInterference , val ) ;
58211: LD_STRING RussianInterference
58213: PPUSH
58214: LD_VAR 0 2
58218: PPUSH
58219: CALL_OW 101
// GiveMedals ( Medals ) ;
58223: LD_STRING Medals
58225: PPUSH
58226: CALL_OW 102
// all_list = FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] ] ) diff GetApes ( you ) ;
58230: LD_ADDR_VAR 0 3
58234: PUSH
58235: LD_INT 22
58237: PUSH
58238: LD_EXP 3
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 21
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PPUSH
58261: CALL_OW 69
58265: PUSH
58266: LD_EXP 3
58270: PPUSH
58271: CALL 43838 0 1
58275: DIFF
58276: ST_TO_ADDR
// if IsLive ( Gonzo ) then
58277: LD_EXP 23
58281: PPUSH
58282: CALL_OW 300
58286: IFFALSE 58304
// all_list = all_list ^ Gonzo ;
58288: LD_ADDR_VAR 0 3
58292: PUSH
58293: LD_VAR 0 3
58297: PUSH
58298: LD_EXP 23
58302: ADD
58303: ST_TO_ADDR
// RewardPeople ( all_list ) ;
58304: LD_VAR 0 3
58308: PPUSH
58309: CALL_OW 43
// SetLastMission ( all_list , 16 ) ;
58313: LD_VAR 0 3
58317: PPUSH
58318: LD_INT 16
58320: PPUSH
58321: CALL_OW 245
// SaveCharacters ( Heike , Heike_11_cont ) ;
58325: LD_EXP 10
58329: PPUSH
58330: LD_STRING Heike_11_cont
58332: PPUSH
58333: CALL_OW 38
// SaveCharacters ( Gensher , Gensher_11_cont ) ;
58337: LD_EXP 24
58341: PPUSH
58342: LD_STRING Gensher_11_cont
58344: PPUSH
58345: CALL_OW 38
// SaveVariable ( oswald_is_substitute , Oswald_is_substitute_11_generic ) ;
58349: LD_EXP 81
58353: PPUSH
58354: LD_STRING Oswald_is_substitute_11_generic
58356: PPUSH
58357: CALL_OW 39
// SaveVariable ( kurt_is_substitute , Kurt_is_substitute_11_generic ) ;
58361: LD_EXP 82
58365: PPUSH
58366: LD_STRING Kurt_is_substitute_11_generic
58368: PPUSH
58369: CALL_OW 39
// un_list = [ Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ] ;
58373: LD_ADDR_VAR 0 4
58377: PUSH
58378: LD_EXP 11
58382: PUSH
58383: LD_EXP 12
58387: PUSH
58388: LD_EXP 13
58392: PUSH
58393: LD_EXP 14
58397: PUSH
58398: LD_EXP 15
58402: PUSH
58403: LD_EXP 16
58407: PUSH
58408: LD_EXP 17
58412: PUSH
58413: LD_EXP 18
58417: PUSH
58418: LD_EXP 19
58422: PUSH
58423: LD_EXP 20
58427: PUSH
58428: LD_EXP 21
58432: PUSH
58433: LD_EXP 22
58437: PUSH
58438: LD_EXP 23
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: ST_TO_ADDR
// name_list = [ Sonya , Oswald , Ralph , Kowalski , Evelyn , Suze , Olaf , Kurt , Dwayne , MarkB , Aviradze , Swansson , Gonzo ] ;
58458: LD_ADDR_VAR 0 5
58462: PUSH
58463: LD_STRING Sonya
58465: PUSH
58466: LD_STRING Oswald
58468: PUSH
58469: LD_STRING Ralph
58471: PUSH
58472: LD_STRING Kowalski
58474: PUSH
58475: LD_STRING Evelyn
58477: PUSH
58478: LD_STRING Suze
58480: PUSH
58481: LD_STRING Olaf
58483: PUSH
58484: LD_STRING Kurt
58486: PUSH
58487: LD_STRING Dwayne
58489: PUSH
58490: LD_STRING MarkB
58492: PUSH
58493: LD_STRING Aviradze
58495: PUSH
58496: LD_STRING Swansson
58498: PUSH
58499: LD_STRING Gonzo
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: ST_TO_ADDR
// for val = 1 to un_list do
58517: LD_ADDR_VAR 0 2
58521: PUSH
58522: DOUBLE
58523: LD_INT 1
58525: DEC
58526: ST_TO_ADDR
58527: LD_VAR 0 4
58531: PUSH
58532: FOR_TO
58533: IFFALSE 58585
// if un_list [ val ] in all_list then
58535: LD_VAR 0 4
58539: PUSH
58540: LD_VAR 0 2
58544: ARRAY
58545: PUSH
58546: LD_VAR 0 3
58550: IN
58551: IFFALSE 58583
// SaveCharacters ( un_list [ val ] , name_list [ val ] & _11_cont ) ;
58553: LD_VAR 0 4
58557: PUSH
58558: LD_VAR 0 2
58562: ARRAY
58563: PPUSH
58564: LD_VAR 0 5
58568: PUSH
58569: LD_VAR 0 2
58573: ARRAY
58574: PUSH
58575: LD_STRING _11_cont
58577: STR
58578: PPUSH
58579: CALL_OW 38
58583: GO 58532
58585: POP
58586: POP
// SaveCharacters ( all_list diff ( Heike ^ Khattam ^ un_list ) , Others_11_cont ) ;
58587: LD_VAR 0 3
58591: PUSH
58592: LD_EXP 10
58596: PUSH
58597: LD_EXP 27
58601: ADD
58602: PUSH
58603: LD_VAR 0 4
58607: ADD
58608: DIFF
58609: PPUSH
58610: LD_STRING Others_11_cont
58612: PPUSH
58613: CALL_OW 38
// if GetLives ( Khattam ) > 0 then
58617: LD_EXP 27
58621: PPUSH
58622: CALL_OW 256
58626: PUSH
58627: LD_INT 0
58629: GREATER
58630: IFFALSE 58644
// SaveCharacters ( Khattam , Khattam_11_cont ) ;
58632: LD_EXP 27
58636: PPUSH
58637: LD_STRING Khattam_11_cont
58639: PPUSH
58640: CALL_OW 38
// SaveVariable ( khattam_choice = 1 , Khattam_accepted_11_cont ) ;
58644: LD_EXP 96
58648: PUSH
58649: LD_INT 1
58651: EQUAL
58652: PPUSH
58653: LD_STRING Khattam_accepted_11_cont
58655: PPUSH
58656: CALL_OW 39
// InGameOn ;
58660: CALL_OW 8
// for val in all_units do
58664: LD_ADDR_VAR 0 2
58668: PUSH
58669: LD_OWVAR 3
58673: PUSH
58674: FOR_IN
58675: IFFALSE 58688
// DestroyUnit ( val ) ;
58677: LD_VAR 0 2
58681: PPUSH
58682: CALL_OW 65
58686: GO 58674
58688: POP
58689: POP
// ResetFog ;
58690: CALL_OW 335
// wait ( 0 0$0.5 ) ;
58694: LD_INT 18
58696: PPUSH
58697: CALL_OW 67
// repeat Query ( QCutscene1 ) ;
58701: LD_STRING QCutscene1
58703: PPUSH
58704: CALL_OW 97
// val = Query ( QCutscene2 ) ;
58708: LD_ADDR_VAR 0 2
58712: PUSH
58713: LD_STRING QCutscene2
58715: PPUSH
58716: CALL_OW 97
58720: ST_TO_ADDR
// until val = 3 or val = 2 ;
58721: LD_VAR 0 2
58725: PUSH
58726: LD_INT 3
58728: EQUAL
58729: PUSH
58730: LD_VAR 0 2
58734: PUSH
58735: LD_INT 2
58737: EQUAL
58738: OR
58739: IFFALSE 58701
// wait ( 0 0$0.5 ) ;
58741: LD_INT 18
58743: PPUSH
58744: CALL_OW 67
// SetNextMission ( val - 1 ) ;
58748: LD_VAR 0 2
58752: PUSH
58753: LD_INT 1
58755: MINUS
58756: PPUSH
58757: CALL_OW 536
// InGameOff ;
58761: CALL_OW 9
// YouWin ;
58765: CALL_OW 103
// end ;
58769: LD_VAR 0 1
58773: RET
