Export testing, logsenabled;

Export you, russians, nature, you_alt, americans, scout_side, americans_alt;

Export Heike, Sonya, Oswald, Ralph, Kowalski, Evelyn, Suze, Olaf, Kurt, Dwayne, MarkB, Aviradze, Swansson, Gonzo;
Export Gensher;
Export Simms, Cornell, Khattam, Joan, Powell;

Export ai_soldiers, ai_engineers, ai_mechanics_defend, ai_scientists, ai_commander, ai_depot, ai_labs, ai_siberite_mines;
Export ai_power_plants, ai_buildings_locations, ai_vehicles_defend, ai_vehicles_attack, ai_human_pullback_hex;
Export ai_building_under_construction, ai_heal_these_humans, ai_all_buildings, ai_building_constructor;
Export ai_upcoming_building_data, ai_facts, ai_armouries, ai_bunkers, ai_oil_mine, ai_fact_extensions;
Export ai_near_base_dist, ai_going_to_attack_this_base, ai_refuel_vehicles_list, ai_turrets, ai_control_tower;
Export ai_vehicle_attack_delay, ai_bases, ai_has_switched_base_target, ai_cargo_bay, ai_cargo_bay_under_construction, ai_apemen_engineers;
Export ai_attacking_soldiers, ai_attacking_scientists, ai_humans_ready_to_attack, ai_retreating_attacking_humans, ai_human_attack_delay;
Export ai_excepted_buildings, ai_new_attack_commencing;
Export ai_crane, ai_time_shift_data, ai_time_shift_hexes, ai_time_shift_hexes_underway, ai_attacking_unit_hex_index;
Export ai_contact_time, ai_attack_ground_info_initial, ai_attack_ground_info_sustain, ai_captured_buildings, ai_vehicles_being_repaired;

Export oswald_is_substitute, kurt_is_substitute, original_gensher_people, russian_attack_strategy, special_russian_attackers;
Export yashin_alive, num_russian_attacks, gensher_spec_research_progress, game_phase, first_teleport, camera_engineers;
Export cameras_placed, scout_event_over, russians_allowed_to_attack_gensher_time, saved_gensher_people, khattam_choice;
Export russian_interference_points, camera_engineers_task_map;

// new stuff that we want to reference outside of this module
Export gensher_bunker_apes,gensher_mortars;
Export us_reserve_troops, russian_reserve_troops;


Starting
begin
     RandomizeAll;
     ResetFog;

     testing = false;  //Testing mission or real campaign?
     logsenabled = true; //print debug stuff

     ai_bases = [1,2,3];  //1 = American base, 2 = Gensher's base, 3 = Russian base
     ai_soldiers = [[],[],[]];  //Soldiers for computer sides
     ai_attacking_soldiers = [[],[],[]];  //Soldiers who are attacking
     ai_engineers = [[],[],[]]; //Engineers for computer sides
     ai_mechanics_defend = [[],[],[]];  //Mechanics for computer sides (in the base)
     ai_scientists = [[],[],[]];  //Scientists for computer sides
     ai_attacking_scientists = [[],[],[]];  //Scientists who are attacking
     ai_apemen_engineers = [[],[],[]];  //Apemen engineers for computer sides
     ai_depot = [0,0,0];  //The depot of each computer side
     ai_labs = [[],[],[]];  //The lab of each computer side
     ai_facts = [[],[],[]];  //The factory of each computer side
     ai_armouries = [[],[],[]];  //The armouries of each computer side
     ai_bunkers = [[],[],[]];  //The bunkers of each computer side
     ai_turrets = [[],[],[]];  //The turrets of each computer side
     ai_oil_mine = [0,0,0];  //The oil mine of each computer side
     ai_siberite_mines = [[],[],[]];  //The siberite mines of each computer side/base
     ai_fact_extensions = [[],[],[]];  //The factory extensions of each computer side
     ai_power_plants = [[],[],[]];  //The power plants of each computer side
     ai_control_tower = [0,0,0];  //Control tower (American) of each side
     ai_buildings_locations = [[],[],[]];  //The locations of all buildings for each side. Data looking like [x,y,dir,btype,labkind1,labkind2,bweapon] (CF. function "ScanBuildings")
     ai_captured_buildings = [[],[],[]];  //Identifiers of the buildings each base has lost because someone captured them. Will be recaptured if possible.
     ai_vehicles_defend = [[],[],[]];  //Vehicles of each computer side (in the base)
     ai_vehicles_attack = [[],[],[]];  //Vehicles of each computer side (attacking the enemy)
     ai_vehicles_being_repaired = [[],[],[]];  //The vehicles which are going to be or are being repaired.
     ai_refuel_vehicles_list = [[],[],[]];  //(defending) vehicles needing to be refueled
     ai_human_pullback_hex = [[106,40],[75,22],[60,81]];  //Hex where humans can safely retreat to (center of the base)
     ai_building_under_construction = [0,0,0];  //Identifier of building under construction (only 1 building at a time)
     ai_heal_these_humans = [[],[],[]];  //Humans needing to be healed
     ai_all_buildings = [[],[],[]];  //Identifiers of all buildings for each computer side
     ai_building_constructor = [0,0,0];  //Identifier of the engineer who are going to build a building
     ai_upcoming_building_data = [[],[],[]];  //Holds the data (building_location syntax) of the building which is going to be build. Isn't reset until the building is completely done.
     ai_near_base_dist = 18;  //Distance within base where the computer scans for enemies to determine if the base is under attack (so this distance also decides how far away from the base retreating attackers will be pursued).
     ai_vehicle_attack_delay = [0$0,0$0,0$0];  //The minimum time between attacking (with vehicles) (cf. function "ResetVehicleAttackDelay").
     ai_human_attack_delay = [0$0,0$0,0$0];  //The minimum time between attacking (with humans) (cf. function "ResetHumanAttackDelay").
     ai_cargo_bay = [0,0,0];  //holds the identifier of the (automatic) cargo bay
     ai_cargo_bay_under_construction = [false,false,false];  //True if the base is currently constructing a cargo bay
     ai_crane = [0,0,0];  //Identifier of the crane of each computer
     ai_attacking_unit_hex_index = [[],[],[]];  //What hex an attacking unit is going for now (index is unit id, value is hex number). Must be reset/prepared when new attacking units are added.
     ai_retreating_attacking_humans = [[],[],[]];  //Holds the attacking humans who are retreating.
     ai_excepted_buildings = [[],[],[]];  //Identifier of the buildings the base will not rebuild. Does not work well with capturing buildings (if the player captures one of these buildings and the computer captures it back the building will remain removed from this list) - it's a rare bug though.
     ai_new_attack_commencing = [false,false,false];  //True when new units have been transfered to the attack variables. The attack procedure should reset. Used only be attack initialize code and attack code.
     ai_time_shift_data = [[],[],[],[],[],[],[],[]];  //[time,radius] - duration and radius of a time shifting rocket (for each side (NOT BASE!)).
     ai_time_shift_hexes = [[],[],[]];  //[x,y,time] - hexes where a time shifting rocket has landed (and how long until the effect disappears).
     ai_time_shift_hexes_underway = [[],[],[]];  //[x,y,id,tick] - The bazooker who have been ordered to fire a time shifting rocket at hex [x,y] but haven't done so yet.
     Initiate_ai_contact_time;
     ai_attack_ground_info_initial = [];  //[attacking_un,target_un,target_un_side,x,y] - Used to determine if we are under attack by attacking ground, cf. "ai_contact_time".
     ai_attack_ground_info_sustain = [];  //[attacking_un,target_un,target_un_side,x,y] - Used to determine if we are under attack by attacking ground, cf. "ai_contact_time".


     oswald_is_substitute = false;  //True if Oswald is substituted by another person (happened in mission 09).
     kurt_is_substitute = false;  //Same as "oswald_is_substitute" but for Kurt.
     original_gensher_people = [];  //The men and women under Gensher's command (not including Gensher himself) from the start of the mission.
     russian_attack_strategy = -1;  //1 for attack Gensher's base, 2 for attack player base (player's base is in area "player_base_outer"), 3 for attack player base (player's base is not in area "player_base_outer")
     special_russian_attackers = [];  //Identifiers of the bazookers making "sniper attacks" on Gensher's base.
     yashin_alive = TestCharacters('Yashin_08');  //If Yashin wasn't killed in mission 08.
     num_russian_attacks = 0;  //The number of times the Russians have attacked (with "ordinary" units). The attacks become stronger and stronger.
     gensher_spec_research_progress = 0;  //Progress of the spec research of the lab in Gensher's base (if it was canceled).
     game_phase = 1;  //1 for before Gensher betrays Americans, 2 when he has betrayed but not escaped yet, 3 when he has escaped and the player must destroy the Americans
     first_teleport = true;  //Turns false when the player has seen a Russian vehicle spontaneously teleport
     camera_engineers = [];  //Identifiers of engineers who have been given order to place a hidden camera. Used to determine if a hidden camera has been placed in one of the camera areas.
     //camera_engineers_task_map = [];  //Index is camera engineer id, value is list of tasks to place a camera in one of the designated areas. CF. module "Events" function "CheckCamerasOnCommand".
     cameras_placed = false;  //Turns true when player has placed a cameras in all marked areas.
     scout_event_over = false;  //Turns true when the event, where Heike sends out a scout to investigate the Russian presence, is over. Russians start attacking hereafter.
     russians_allowed_to_attack_gensher_time = [30$0,25$0,20$0][difficulty]; //[20$0,15$0,10$0][difficulty];  //When the Russians may start attacking Gensher's base. Updated when the scout event is over.
     saved_gensher_people = [];  //Identifiers of those of Gensher's people who survived
     khattam_choice = 0;  //Answer to the query if Khattam may join the player or not
     russian_interference_points = 0;  //The more points the more annoying the Russians have been. Used for the corresponding medal.

     us_reserve_troops = [20, 30, 60][difficulty]; //maximum number of people to spawn for Americans
     russian_reserve_troops = [20, 30, 60][difficulty]; //maximum number of people to spawn for Russians

     PrepareSides;
     PrepareNature;
     PrepareArabians;
     ScanBuildings;
     PrepareComputerSides;
     InitiateTimeShiftData;
     

     Action;
end;

Function Initiate_ai_contact_time;
     var i;
     begin
          //2-dimensional array which tells how long it was since a side was in contact with another side. E.g.
          {
          [[100000,150,100000,100000,1800,100000,100000,100000],
           [150,100000,500,100000,100000,100000,100000,100000],
           [100000,500,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [1800,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000]]
          }
          //Here side 1 (first row) was in contact with side 2 150 ticks ago and with side 5 1800 ticks ago.
          //The variable is necessary because function ContactTime doesn't take attacking ground into consideration
          //(if you attack ground where an enemy unit is, ContactTime doesn't take it as you are attacking the enemy).

          ai_contact_time = [];
          for i = 1 to 8 do
               ai_contact_time = ai_contact_time ^ [[100000,100000,100000,100000,100000,100000,100000,100000]];
     end;

Function InitiateTimeShiftData;
     var side;
     begin
          //The following is approximate data on time shifting rockets.
          //No space-time upgrade researched: Duration 215 tick, radius 4 hexes.
          //Space-time upgrade 1 researched: Duration 320 tick, radius 7 hexes.
          //Space-time upgrade 2 researched: Duration 420 tick, radius 10 hexes.
          //Space-time upgrade 3 researched: Duration 420 tick, radius 10 hexes.

          for side = 1 to 8 do
               if Researched(side,tech_st3) then
                    ai_time_shift_data = Replace(ai_time_shift_data,side,[420,10])
               else
                    if Researched(side,tech_st2) then
                         ai_time_shift_data = Replace(ai_time_shift_data,side,[420,10])
                    else
                         if Researched(side,tech_st1) then
                              ai_time_shift_data = Replace(ai_time_shift_data,side,[320,7])
                         else
                              ai_time_shift_data = Replace(ai_time_shift_data,side,[215,4]);
     end;

Function PrepareSides;
     begin
          //Who is who and decide initial attitudes
          nature = 0;
          americans = 1;
          you = 2;
          russians = 3;
          americans_alt = 4;
          you_alt = 5;
          scout_side = 8;

          SetAttitude(americans,you,att_enemy,true);
          SetAttitude(americans,russians,att_enemy,true);
          SetAttitude(americans,americans_alt,att_friend,true);
          SetAttitude(americans,you_alt,att_friend,true);
          SetAttitude(americans,scout_side,att_friend,true);

          SetAttitude(you,russians,att_enemy,true);
          SetAttitude(you,americans_alt,att_enemy,true);
          SetAttitude(you,you_alt,att_friend,true);
          SetAttitude(you,scout_side,att_friend,true);

          SetAttitude(russians,americans_alt,att_enemy,true);
          SetAttitude(russians,you_alt,att_enemy,true);
          SetAttitude(russians,scout_side,att_friend,true);

          SetAttitude(americans_alt,you_alt,att_enemy,true);
          SetAttitude(americans_alt,scout_side,att_friend,true);

          SetAttitude(you_alt,scout_side,att_friend,true);

          ChangeSideFog(you_alt,you);  //player shares vision with Gensher


          //Technologies
          if difficulty = 3 then
               SetTech(tech_opto1,americans,state_researched);

          if difficulty = 3 then
               SetTech(tech_comp3,russians,state_researched);

          if difficulty = 3 then
               SetTech(tech_st3,russians,state_researched);
     end;

Function PrepareNature;
     var i, spots, num, agres, count, temp_unit;
     begin
          //Clear the map for preplaced nature.
          for i in FilterAllUnits([f_side,nature]) do
               DestroyUnit(i);

//          spots = [[158,91],[140,107],[37,27],[22,4],[38,10],[50,23],[40,20]];
          spots = [[158,91],[140,107],[37,27],[22,4],[38,10],[50,23],[40,20], [158,110], [159,118], [146,115], [135,100], [155,115]];

          InitUc;
          InitHc;

          uc_side = nature;
          uc_nation = nation_nature;

          agres = -10 + difficulty * 20;

          //Apemen
//          count = [4,3,2][difficulty];
          // SHARK bumped the apemen count
//          count = [8,6,4][difficulty];
          // There's 15 wild apemen on the map, so just f it, let them all stay
          count = [15,13,10][difficulty];
          hc_class = class_apeman;
          for i = 1 to count do
               begin
                    if spots = 0 then
                         exit;

                    uc_direction = Rand(0,5);

                    hc_agressivity = Rand(-1*agres,agres);

                    hc_attr = [Rand(11,13),Rand(10,11)];
                    hc_sex = Rand(sex_male,sex_female);
                    hc_skills = [Rand(0,1),Rand(0,1),0,0];

                    num = Rand(1,spots);
                    PlaceUnitXYR(CreateHuman,spots[num][1],spots[num][2],5,false);
                    // 50% chance to delete the spot
                    if Prob(50) then
                         spots = Delete(spots,num);
               end;
     end;

Function PrepareArabians;
     var human_list, i, temp_unit, val, k, gensher_bunker_apes;
     begin
          InitHc;
          InitUc;
          uc_side = you;
          uc_nation = nation_arabian;
          
          if not testing then
               begin
                    Heike = CreateCharacter('Heike_11_sel');

                    if TestCharacters('Oswald_11_sel') then
                         Oswald = CreateCharacter('Oswald_11_sel')
                    else
                         Oswald = 0;
                    oswald_is_substitute = LoadVariable('Oswald_is_substitute_10',false);

                    if TestCharacters('Kurt_11_sel') then
                         Kurt = CreateCharacter('Kurt_11_sel')
                    else
                         Kurt = 0;
                    kurt_is_substitute = LoadVariable('Kurt_is_substitute_10',false);

                    if TestCharacters('Sonya_11_sel') then
                         Sonya = CreateCharacter('Sonya_11_sel')
                    else
                         Sonya = 0;

                    if TestCharacters('Ralph_11_sel') then
                         Ralph = CreateCharacter('Ralph_11_sel')
                    else
                         Ralph = 0;

                    if TestCharacters('Kowalski_11_sel') then
                         Kowalski = CreateCharacter('Kowalski_11_sel')
                    else
                         Kowalski = 0;

                    if TestCharacters('Evelyn_11_sel') then
                         Evelyn = CreateCharacter('Evelyn_11_sel')
                    else
                         Evelyn = 0;

                    if TestCharacters('Suze_11_sel') then
                         Suze = CreateCharacter('Suze_11_sel')
                    else
                         Suze = 0;

                    if TestCharacters('Olaf_11_sel') then
                         Olaf = CreateCharacter('Olaf_11_sel')
                    else
                         Olaf = 0;

                    if TestCharacters('Dwayne_11_sel') then
                         Dwayne = CreateCharacter('Dwayne_11_sel')
                    else
                         Dwayne = 0;

                    if TestCharacters('MarkB_11_sel') then
                         MarkB = CreateCharacter('MarkB_11_sel')
                    else
                         MarkB = 0;

                    if TestCharacters('Aviradze_11_sel') then
                         Aviradze = CreateCharacter('Aviradze_11_sel')
                    else
                         Aviradze = 0;

                    if TestCharacters('Swansson_11_sel') then
                         Swansson = CreateCharacter('Swansson_11_sel')
                    else
                         Swansson = 0;

                    human_list = [Heike,Sonya,Oswald,Ralph,Kowalski,Evelyn,Suze,Olaf,Kurt,Dwayne,MarkB,Aviradze,Swansson] diff 0;

                    human_list = human_list ^ (CreateCharacterSet('Others_11_sel') diff 0);

                    if TestCharacters('Gonzo_10') then
                         begin
                              Gonzo = CreateCharacter('Gonzo_10');
                              human_list = human_list ^ Gonzo;
                         end
                    else
                         Gonzo = 0;
               end
          else
               begin
                    InitHc;
                    
                    PrepareSoldier(sex_female,7);
                    hc_name = 'Heike';
                    Heike = CreateHuman;

                    PrepareScientist(sex_female,7);
                    hc_name = 'Sonya';
                    Sonya = CreateHuman;

                    PrepareSoldier(sex_male,7);
                    hc_name = 'Oswald';
                    Oswald = CreateHuman;
                    oswald_is_substitute = false;

                    PrepareSoldier(sex_male,7);
                    hc_name = 'Ralph';
                    Ralph = CreateHuman;

                    PrepareSoldier(sex_male,7);
                    hc_name = 'Kowalski';
                    Kowalski = CreateHuman;

                    PrepareEngineer(sex_female,7);
                    hc_name = 'Evelyn';
                    Evelyn = CreateHuman;

                    PrepareSoldier(sex_female,7);
                    hc_name = 'Suze';
                    Suze = CreateHuman;

                    PrepareMechanic(sex_male,7);
                    hc_name = 'Olaf';
                    Olaf = CreateHuman;

                    PrepareSoldier(sex_male,7);
                    hc_name = 'Kurt';
                    Kurt = CreateHuman;
                    kurt_is_substitute = false;

                    PrepareMechanic(sex_male,7);
                    hc_name = 'Dwayne';
                    Dwayne = CreateHuman;

                    PrepareScientist(sex_male,7);
                    hc_name = 'Mark';
                    MarkB = CreateHuman;

                    Aviradze = 0;
                    Swansson = 0;

                    human_list = [Heike,Sonya,Oswald,Ralph,Kowalski,Evelyn,Suze,Olaf,Kurt,Dwayne,MarkB,Aviradze,Swansson] diff 0;

                    //Gonzo
                    InitHc;
                    uc_nation = nation_nature;
                    hc_class = class_apeman_soldier;
                    hc_name = 'Gonzo';
                    hc_skills = [3,1,0,0];
                    hc_attr = [13,12];
                    hc_sex = sex_male;
                    Gonzo = CreateHuman;
                    human_list = human_list ^ Gonzo;
               end;

          //A couple of cargo bays with material.
          InitVc;
          uc_direction = 5;
          uc_nation = nation_arabian;
          vc_engine = engine_combustion;
          vc_chassis = ar_half_tracked;
          vc_control = control_manual;
          vc_weapon = ar_cargo_bay;

          for i = 1 to 2 do
               begin
                    temp_unit = CreateVehicle;
                    SetFuel(temp_unit,Rand(50,70));

                    val = Rand(1,human_list-1);  //Don't choose Gonzo
                    PlaceHumanInUnit(human_list[val],temp_unit);
                    human_list = Delete(human_list,val);

                    case i of
                         1: begin
                              SetCargo(temp_unit,mat_cans,100);
                         end;
                         2: begin
                              val = [90,70,50][difficulty];

                              if LoadVariable('Abdul_doubt_07',false) then
                                   val = val - 50;

                              if LoadVariable('Siberite_gathered_on_time_07_cont',true) then
                                   begin
                                        val = val + 20;
                                        if val > 100 then
                                             val = 100;
                                   end
                              else
                                   val = val - 50;

                              if val < 0 then
                                   val = 0;

                              SetCargo(temp_unit,mat_cans,val);
                              AddCargo(temp_unit,mat_oil,100-val);  //fill rest up with oil
                         end;
                    end;

                    PlaceUnitArea(temp_unit,enter_area,false);
               end;

          //Some war vehicles
          val = 0;

          for i = 1 to [3,2,1][difficulty] - LoadVariable('Abdul_doubt_07',false) do
               begin
                    vc_engine = engine_combustion;

                    if val = 0 then
                         begin
                              case Rand(1,4) of
                                   1: vc_chassis = ar_hovercraft;
                                   2: vc_chassis = ar_light_trike;
                                   3: vc_chassis = ar_medium_trike;
                                   4: vc_chassis = ar_half_tracked;
                              end;
                         end
                    else
                         begin
                              case Rand(1,2) of
                                   1: vc_chassis = ar_medium_trike;
                                   2: vc_chassis = ar_half_tracked;
                              end;
                         end;

                    if vc_chassis in [ar_hovercraft,ar_light_trike] then
                         begin
                              val = val + 1;

                              case Rand(1,4) of
                                   1: vc_weapon = ar_multimissile_ballista;
                                   2: vc_weapon = ar_light_gun;
                                   3: vc_weapon = ar_double_machine_gun;
                                   4: vc_weapon = ar_radar;
                              end;

                              if Rand(1,2) = 1 then
                                   vc_engine = engine_solar;
                         end
                    else
                         begin
                              case Rand(1,4) of
                                   1: vc_weapon = ar_gatling_gun;
                                   2: vc_weapon = ar_gun;
                                   3: vc_weapon = ar_flame_thrower;
                                   4: vc_weapon = ar_rocket_launcher;
                              end;
                         end;

                    if Rand(1,5) <= 2 then
                         vc_control = control_apeman
                    else
                         vc_control = control_manual;
                              
                    temp_unit = CreateVehicle;
                    SetFuel(temp_unit,Rand(50,70));

                    if vc_control = control_manual then
                         begin
                              val = Rand(1,human_list-1);  //Don't choose Gonzo
                              PlaceHumanInUnit(human_list[val],temp_unit);
                              human_list = Delete(human_list,val);
                         end;
                       
                    PlaceUnitArea(temp_unit,enter_area,false);
               end;

          //Place the remaining player units
          for i in human_list do
               PlaceUnitArea(i,enter_area,false);
          
          // SHARK give one more apemen radar
          vc_engine = engine_solar;
          vc_chassis = ar_hovercraft;
          vc_control = control_apeman;
          vc_weapon = ar_radar;
          temp_unit = CreateVehicle;
          SetFuel(temp_unit,Rand(50,70));
          PlaceUnitArea(temp_unit,enter_area,false);
          // and one rocketlauncher too
          vc_engine = engine_solar;
          vc_chassis = ar_half_tracked;
          vc_control = control_apeman;
          vc_weapon = ar_rocket_launcher;
          temp_unit = CreateVehicle;
          SetFuel(temp_unit,Rand(50,70));
          PlaceUnitArea(temp_unit,enter_area,false);

          // OLD CODE

          //Gensher's base
          Gensher = NewCharacter('Dietrich');
          SetSide(Gensher,you_alt);
          PlaceHumanInUnit(Gensher,ar_bar);
          
          //Scientists
          InitHc;
          uc_side = you_alt;

          for i = 1 to 4 do
               begin
                    PrepareScientist(false,7);
                    temp_unit = CreateHuman;
                    original_gensher_people = original_gensher_people ^ temp_unit;
                    PlaceHumanInUnit(temp_unit,ar_lab);
               end;

          ai_scientists = Replace(ai_scientists,2,original_gensher_people);

          //Engineers
          PrepareEngineer(false,[7,6,5][difficulty]);
          temp_unit = CreateHuman;
          original_gensher_people = original_gensher_people ^ temp_unit;
          PlaceHumanInUnit(temp_unit,ar_dep);
          ai_engineers = Replace(ai_engineers,2,[temp_unit]);

          //Mechanics - shark added this
          original_gensher_people = original_gensher_people ^ mech1;
          original_gensher_people = original_gensher_people ^ mech2;

          // Healer - shark added this
          original_gensher_people = original_gensher_people ^ healer;

          //Apemen
          InitHc;
          uc_nation = nation_nature;
          hc_class = class_apeman_soldier;
          hc_skills = [Rand(1,2),Rand(0,1),0,0];
          hc_attr = [Rand(11,13),Rand(10,12)];
          
          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_bu1);
          human_list = [temp_unit];
          gensher_bunker_apes = [temp_unit];

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_bu2);
          human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          // populate newly placed turrets - SHARK
          // adding to list is commented out to avoid them leaving their turrets
          // and entering the barracks for some stupid reason
          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_hill1);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_hill2);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_hill3);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_hill4);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_lbu1);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_lbu2);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_lbu3);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_lbu4);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_rbu1);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_rbu2);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_rbu3);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_rbu4);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_rbu5);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          hc_sex = Rand(sex_male,sex_female);
          temp_unit = CreateHuman;
          PlaceHumanInUnit(temp_unit,ar_rbu6);
          //human_list = human_list ^ temp_unit;
          gensher_bunker_apes = gensher_bunker_apes ^ temp_unit;

          //tally the mortars the idiotic way
          gensher_mortars = [mortar1];
          gensher_mortars = gensher_mortars ^ mortar2;
          gensher_mortars = gensher_mortars ^ mortar3;
          gensher_mortars = gensher_mortars ^ mortar4;
          gensher_mortars = gensher_mortars ^ mortar5;
          gensher_mortars = gensher_mortars ^ mortar6;

          // carry on with old code
          ai_soldiers = Replace(ai_soldiers,2,human_list ^ Gensher);

          //Set building levels
          val = GetSkill(ai_engineers[2][1],skill_engineering);
          for i in FilterAllUnits([[f_side,you_alt],[f_type,unit_building]]) do
               SetBLevel(i,val);

          for i in ai_engineers[2] do
               if GetSkill(i,skill_engineering) > val then
                    SetSkill(i,skill_engineering,val);
     end;

Function ScanBuildings;
     var side, i, temp_list, base, area, temp_list_2;
     begin
          if difficulty <= 2 then
               begin
                    temp_list = [GetX(rub3),GetY(rub3),GetDir(rub3),GetBWeapon(rub3)];
                    DestroyUnit(rub3);

                    InitUc;
                    InitBc;
                    uc_nation = nation_russian;
                    uc_side = russians;
                    bc_type = b_turret;

                    i = CreateAndPlaceBuildingXYD(temp_list[1],temp_list[2],temp_list[3]);
                    PlaceWeaponTurret(i,temp_list[4]);
               end;

          if difficulty = 1 then
               begin
                    temp_list = [GetX(rub1),GetY(rub1),GetDir(rub1),GetBWeapon(rub1)];
                    DestroyUnit(rub1);

                    InitUc;
                    InitBc;
                    uc_nation = nation_russian;
                    uc_side = russians;
                    bc_type = b_turret;

                    i = CreateAndPlaceBuildingXYD(temp_list[1],temp_list[2],temp_list[3]);
                    PlaceWeaponTurret(i,temp_list[4]);
               end;

          for base in ai_bases do
               begin
                    case base of
                         1: begin
                              area = Am_base;
                              side = americans;
                         end;
                         2: begin
                              area = Gensher_base;
                              side = you_alt;
                         end;
                         3: begin
                              area = Ru_base;
                              side = russians;
                         end;
                    end;
                    ai_all_buildings = Replace(ai_all_buildings,base, FilterAllUnits([[f_side,side],[f_type,unit_building],[f_inarea,area]]) );

                    for i in ai_all_buildings[base] do
                         UpdateBuildingBasicVariables(base,i,true);

                    if base = 1 then
                         SetBName(ai_depot[base],'epsilon');

                    //Prioritated order
                    //Gensher can't rebuilt the bunkers with weapons since he has no factory so he rebuilds them as breastworks.
                    temp_list = [];
                    //for i in (ai_depot[base] ^ ai_armouries[base] ^ ai_bunkers[base] ^ ai_power_plants[base] ^ ai_control_tower[base] ^ ai_turrets[base] ^ ai_labs[base] ^ ai_facts[base] ^ ai_fact_extensions[base] ^ ai_siberite_mines[base] ^ ai_oil_mine[base]) diff 0 do
                    for i in ai_all_buildings[base] do
                         begin
                              //The Russians do not rebuilt the turrets/bunkers directly overlooking the narrow pass.
                              //Stupid of them but it makes it easier (i.e. possible) for the player to escort
                              //Gensher.
                              if base = 3 and i in [rub1,rub2] then
                                   begin
                                        temp_list_2 = ai_excepted_buildings[base] ^ i;
                                        ai_excepted_buildings = Replace(ai_excepted_buildings,base,temp_list_2);
                                        continue;
                                   end;

                              temp_list = temp_list ^ [ [GetX(i),GetY(i),GetDir(i),GetBType(i),GetLabKind(i,1),GetLabKind(i,2),GetBWeapon(i)] ];

                              if base = 2 and temp_list[temp_list+0][4] = b_bunker then
                                   begin
                                        temp_list_2 = Replace(temp_list[temp_list+0],4,b_breastwork);
                                        temp_list = Replace(temp_list,temp_list+0,temp_list_2);
                                   end;
                         end;

                    ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list);
                    SortBuildingLocationsListInCorrectOrder(base);
                    
                    //Make sources visible
                    for i in ai_siberite_mines[base] ^ ai_oil_mine[base] do
                         SetResourceVisibility(GetX(i),GetY(i),side);
               end;
     end;
Export Function UpdateBuildingBasicVariables(base,un,add);
     var temp_list;
     begin
          //un - unit to add/remove from basic building variables
          //add - boolean (true for add units, false for remove)

          case GetBType(un) of
               b_depot,b_warehouse:
                    if add then
                         ai_depot = Replace(ai_depot,base,un)
                    else
                         if un = ai_depot[base] then
                              ai_depot = Replace(ai_depot,base,0);
               b_lab,b_lab_half,b_lab_full: begin
                    if add then
                         temp_list = ai_labs[base] ^ un
                    else temp_list = ai_labs[base] diff un;
                    ai_labs = Replace(ai_labs,base,temp_list);
               end;
               b_factory,b_workshop: begin
                    if add then
                         temp_list = ai_facts[base] ^ un
                    else temp_list = ai_facts[base] diff un;
                    ai_facts = Replace(ai_facts,base,temp_list);
               end;
               b_armoury,b_barracks: begin
                    if add then
                         temp_list = ai_armouries[base] ^ un
                    else temp_list = ai_armouries[base] diff un;
                    ai_armouries = Replace(ai_armouries,base,temp_list);
               end;
               b_breastwork,b_bunker: begin
                    if add then
                         temp_list = ai_bunkers[base] ^ un
                    else temp_list = ai_bunkers[base] diff un;
                    ai_bunkers = Replace(ai_bunkers,base,temp_list);
               end;
               b_turret: begin
                    if add then
                         temp_list = ai_turrets[base] ^ un
                    else temp_list = ai_turrets[base] diff un;
                    ai_turrets = Replace(ai_turrets,base,temp_list);
               end;
               b_oil_mine:
                    if add then
                         ai_oil_mine = Replace(ai_oil_mine,base,un)
                    else
                         if un = ai_oil_mine[base] then
                              ai_oil_mine = Replace(ai_oil_mine,base,0);
               b_siberite_mine: begin
                    if add then
                         temp_list = ai_siberite_mines[base] ^ un
                    else temp_list = ai_siberite_mines[base] diff un;
                    ai_siberite_mines = Replace(ai_siberite_mines,base,temp_list);
               end;
               b_ext_gun,b_ext_noncombat,b_ext_laser,b_ext_computer,b_ext_radar,b_ext_rocket,b_ext_siberium,b_ext_track,b_ext_stitch: begin
                    if add then
                         temp_list = ai_fact_extensions[base] ^ un
                    else temp_list = ai_fact_extensions[base] diff un;
                    ai_fact_extensions = Replace(ai_fact_extensions,base,temp_list);
               end;
               b_solar_power,b_oil_power,b_siberite_power: begin
                    if add then
                         temp_list = ai_power_plants[base] ^ un
                    else temp_list = ai_power_plants[base] diff un;
                    ai_power_plants = Replace(ai_power_plants,base,temp_list);
               end;
               b_control_tower: begin
                    if add then
                         ai_control_tower = Replace(ai_control_tower,base,un)
                    else
                         if un = ai_control_tower[base] then
                              ai_control_tower = Replace(ai_control_tower,base,0);
               end;
          end;
     end;
Function SortBuildingLocationsListInCorrectOrder(base);
     var i, temp_list, p;
     begin
         temp_list = [];

         for i in ai_buildings_locations[base] do
              begin
                   //Prioritated order in which buildings should be (re-)build.
                   case i[4] of
                        b_depot, b_warehouse: p = 100;
                        b_armoury, b_barracks, b_fort: p = 99;
                        b_solar_power, b_oil_power, b_siberite_power: p = 98;
                        b_breastwork: p = 97;
                        b_factory, b_workshop: p = 96;
                        b_ext_gun, b_ext_noncombat, b_ext_laser, b_ext_computer,
                        b_ext_radar, b_ext_rocket, b_ext_siberium, b_ext_track, b_ext_stitch: p = 95;
                        b_bunker: p = 94;
                        b_control_tower: p = 93;
                        b_turret: p = 92;
                        b_lab, b_lab_half, b_lab_full: p = 91;
                        b_teleport: p = 90;
                        b_siberite_mine: p = 89;
                        b_oil_mine: p = 88;
                   end;

                   temp_list = temp_list ^ p;
              end;

          temp_list = SortListByListDesc(ai_buildings_locations[base],temp_list);
          ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list);
     end;

Function PrepareComputerSides;
     var i, temp_list, side, base, num;
     begin
          for base in ai_bases do
               begin
                    case base of
                         1: begin
                              side = americans;
                         end;
                         2: begin
                              continue;
                         end;
                         3: begin
                              side = russians;
                         end;
                    end;

                    InitUc;
                    InitHc;

                    uc_side = side;
                    case side of
                         americans: uc_nation = nation_american;
                         russians: uc_nation = nation_russian;
                    end;

                    // [SHARK] maaybe limit this as well, but make sure to account for all sides

                    //Soldiers - at least one for each defensive building (remember armouries)
                    //Special units (bazoookers, snipers) go to armouries as first priority.
                    temp_list = CreateUnitsWithClass(ai_bunkers[base]+ai_armouries[base], class_soldier, side);
                    temp_list = temp_list ^ CreateUnitsWithClass([3,4,5][difficulty]*ai_armouries[base], [class_sniper,0,class_bazooker][base], side);
                    ai_soldiers = Replace(ai_soldiers,base,temp_list);


                    //Engineers
                    ai_engineers = Replace(ai_engineers,base, CreateUnitsWithClass([2,3,4][difficulty], class_engineer, side) );

                    //Adapt the level of buildings to the highest engineering skill.
                    temp_list = [];
                    for i in ai_engineers[base] do
                         temp_list = temp_list ^ GetSkill(i,skill_engineering);
                    num = BestFromListByList(temp_list,temp_list);
                    for i in ai_all_buildings[base] do
                         SetBLevel(i,num);

                    //Apemen engineers
                    ai_apemen_engineers = Replace(ai_apemen_engineers,base, CreateApemenWithClass(2,class_apeman_engineer,side) );


                    //Mechanics
                    ai_mechanics_defend = Replace(ai_mechanics_defend,base, CreateUnitsWithClass([4+Rand(0,1), 5+Rand(0,1), 6][difficulty], class_mechanic, side) );


                    //Scientists
                    num = [3,4,5][difficulty];
                    for i = 1 to ai_labs[base] do
                         num = num + Rand(0,1);
                    if base = 1 then
                         num = num + [3,4,5][difficulty];

                    ai_scientists = Replace(ai_scientists,base, CreateUnitsWithClass(num,class_scientistic,side) );


                    //Resources
                    SetResourceType(GetBase(ai_depot[base]),mat_cans,300);
                    SetResourceType(GetBase(ai_depot[base]),mat_oil,300);
                    SetResourceType(GetBase(ai_depot[base]),mat_siberit,300);


                    //Place units
                    for i in ai_soldiers[base] ^ ai_engineers[base] ^ ai_mechanics_defend[base] ^ ai_scientists[base] ^ ai_apemen_engineers[base] do
                         PlaceUnitXYR(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2],7,false);


                    //Reset attack delays.
                    ResetVehicleAttackDelay(base);
                    ResetHumanAttackDelay(base);
               end;

          //Leader of the Americans
          uc_side = americans;
          Simms = NewCharacter('Simms');

          //Other Americans
          Joan = NewCharacter('Joan');
          Powell = NewCharacter('Powell');
          uc_side = americans_alt;
          Cornell = NewCharacter('Cornell');
          Khattam = NewCharacter('Khatam');


          //Since the player isn't allowed to attack the Americans in phase 1 we help a little
          //by setting DoNotAttack on all American units.
          for i in FilterAllUnits([f_side,americans]) do
               DoNotAttack(you,i);
     end;
Export Function CreateUnitsWithClass(num_units,un_class,side);
     var i, overskill;
     begin
          result = [];

          InitUc;
          InitHc;

          case side of
               americans: begin
                    uc_nation = nation_american;
               end;
               russians: begin
                    uc_nation = nation_russian;
               end;
          end;
          uc_side = side;

          overskill = difficulty + 4;

          for i = 1 to num_units do
               begin
                    if Rand(1,3) = 1 then
                         PrepareHuman(false,un_class,-overskill)
                    else PrepareHuman(false,un_class,overskill);

                    result = result ^ CreateHuman;
               end;
     end;
Export Function CreateUnitsWithClassLimited(num_units,un_class,side,limit);
     var i, overskill, count;
     begin
          result = [];

          InitUc;
          InitHc;

          if limit <= 0 then
             exit;

          if limit < num_units then
              count = limit
          else
              count = num_units;

          case side of
               americans: begin
                    uc_nation = nation_american;
               end;
               russians: begin
                    uc_nation = nation_russian;
               end;
          end;
          uc_side = side;

          overskill = difficulty + 4;

          for i = 1 to count do
               begin
                    if Rand(1,3) = 1 then
                         PrepareHuman(false,un_class,-overskill)
                    else PrepareHuman(false,un_class,overskill);

                    result = result ^ CreateHuman;
               end;
     end;
Export Function CreateApemenWithClass(num_units,un_class,side);
     var i;
     begin
          result = [];

          InitUc;
          InitHc;
          uc_side = side;
          uc_nation = nation_nature;
          hc_class = un_class;

          for i = 1 to num_units do
               begin
                    hc_attr = [Rand(11,13),Rand(10,11)];
                    hc_sex = Rand(sex_male,sex_female);
                    hc_skills = [Rand(0,2),Rand(0,2),0,0];

                    result = result ^ CreateHuman;
               end;
     end;


Export Function ResetVehicleAttackDelay(base);
     begin                                                                
          ai_vehicle_attack_delay = Replace(ai_vehicle_attack_delay,base, Rand(5$30,7$30) - 1$0 * difficulty );
     end;
Export Function ResetHumanAttackDelay(base);
     begin
          ai_human_attack_delay = Replace(ai_human_attack_delay,base, Rand(6$30,8$30) - 0$45 * difficulty );
     end;
Export Function sizeof(list);
       begin
            result = list + 0;
       end;


Function Action;
     begin
          wait(2);
          CenterNowOnXY(168,109);
          RevealFogArea(you,Am_base);
          
          wait(0$0.2);
          ChangeMissionObjectives('M1');

          wait(0$0.2);
          SaveForQuickRestart;
     end;