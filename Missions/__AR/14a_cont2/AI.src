
//NOTE TO THIS AI
//The engineer controlling code has a special feature for the small Russian base making engineers attack enemies
//if the base has no defences.
//Function DistributeHumansToBuildings always asks units for base 2 to agressive move to the human pullback hex
//if the base is under attack (not just if the unit is too far away from the hex).
//The engineer and scientist controlling code has a limit on DistributeHumansToBuildings to make space for
//Farmer and Kozlov.
//Soldier control code causes soldiers to stay near burning bunkers/breastworks instead of going for the human
//pullback hex (+ has a special exception for special_defenders for base = 3).


//The computer has unlimited resources
Every 0$10 do
     var i, base;
     begin
          for i = 1 to ai_depot do
               if IsOk(ai_depot[i]) and GetSide(ai_depot[i]) <> you then
                    begin
                         base = GetBase(ai_depot[i]);

                         SetResourceType(base,mat_cans,300);
                         SetResourceType(base,mat_oil,300);
                         SetResourceType(base,mat_siberit,300);
                    end;

          enable;
     end;


On UnitGoesToRed(un) do
     var base;
     begin
          AdjustComputerDepotResources(un);

          if GetSide(un) = you then
               exit;

          base = FindBase(un);
          if base = 0 then
               exit;

          //Russian teleporter exit is reset when teleporter goes to red.
          if un = ai_teleporter[base] then
               ai_teleporter_exit_placed = Replace(ai_teleporter_exit_placed,base,false);
     end;


On UnitDestroyed(un) do
     var side, temp_list, base;
     var btype;
     begin
          if un = Heike then
               begin
                    ExclusiveOn;
                    Wait(0$1);
                    YouLost('HeikeDead');
                    ExclusiveOff;
               end;

          for base in ai_bases do
               begin
                    temp_list = ai_captured_buildings[base] diff un;
                    ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
               end;

          side = GetSide(un);

          if side = you then
               exit;


          //Update computer variables
          case GetType(un) of
               unit_human:
                    for base in ai_bases do
                         RemoveHumanFromVariables(base,un,true,true);
               unit_vehicle:
                    for base in ai_bases do
                         RemoveVehicleFromVariables(base,un,true);
               unit_building:
                    for base in ai_bases do
                         RemoveBuildingFromVariables(base,un);
          end;
     end;
//Annoyingly siberite implosion vehicles and kamikaze apes don't trigger event UnitDestroyed.
//Self destruction (Arab tech) does trigger event UnitDestroyed, though.
Every 0$0.5 do
     var base, i;
     begin
          for base in ai_bases do
               begin
                    for i in ai_implosion_vehicles[base] do
                         if IsDead(i) then
                              RemoveVehicleFromVariables(base,i,true);
                    
                    for i in ai_vehicles_attack[base] do  //Can't do a filter on implosion vehicles because if the vehicle is dead no info about it can be fetched
                         if IsDead(i) then
                              RemoveVehicleFromVariables(base,i,true);
               end;

          enable;
     end;
Export Function RemoveBuildingFromVariables(base,building);
     var temp_list;
     begin
          temp_list = ai_all_buildings[base] diff building;
          ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

          temp_list = ai_excepted_buildings[base] diff building;
          ai_excepted_buildings = Replace(ai_excepted_buildings,base,temp_list);

          temp_list = ai_dismantle_these_buildings[base] diff building;
          ai_dismantle_these_buildings = Replace(ai_dismantle_these_buildings,base,temp_list);

          if building = ai_building_under_construction[base] then
               ai_building_under_construction = Replace(ai_building_under_construction,base,0);

          UpdateBuildingBasicVariables(base,building,false);
     end;
Function RemoveVehicleFromVariables(base,vehicle,remove_from_export_import);
     var temp_list;
     begin
          //Global "basis" lists of vehicles. If a vehicle belong to this base it will be in one
          //and only one of these lists.
          if vehicle in ai_vehicles_defend[base] then
               begin
                    temp_list = ai_vehicles_defend[base] diff vehicle;
                    ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
               end;

          if vehicle in ai_vehicles_attack[base] then
               begin
                    temp_list = ai_vehicles_attack[base] diff vehicle;
                    ai_vehicles_attack = Replace(ai_vehicles_attack,base,temp_list);
               end;

          if vehicle in ai_taufield_vehicles[base] then
               begin
                    temp_list = ai_taufield_vehicles[base] diff vehicle;
                    ai_taufield_vehicles = Replace(ai_taufield_vehicles,base,temp_list);
               end;

          if vehicle in ai_implosion_vehicles[base] then
               begin
                    temp_list = ai_implosion_vehicles[base] diff vehicle;
                    ai_implosion_vehicles = Replace(ai_implosion_vehicles,base,temp_list);
               end;

          if vehicle in ai_control_tower_vehicles[base] then
               begin
                    temp_list = ai_control_tower_vehicles[base] diff vehicle;
                    ai_control_tower_vehicles = Replace(ai_control_tower_vehicles,base,temp_list);
               end;

          if vehicle = ai_cargo_bay[base] then
               begin
                    ai_cargo_bay = Replace(ai_cargo_bay,base,0);
                    ai_cargo_bay_destroy_tick = Replace(ai_cargo_bay_destroy_tick,base,tick);

                    if base = 3 then
                         num_farmer_cargo_bays_destroyed = num_farmer_cargo_bays_destroyed + 1;
               end;

          if vehicle = ai_crane[base] then
               begin
                    ai_crane = Replace(ai_crane,base,0);
                    ai_crane_destroy_tick = Replace(ai_crane_destroy_tick,base,tick);
                    ai_crane_driver = Replace(ai_crane_driver,base,0);
                    ai_crane_is_being_repaired = Replace(ai_crane_is_being_repaired,base,false);

                    if vehicle = ai_building_constructor[base] then
                         ai_building_constructor = Replace(ai_building_constructor,base,0);
               end;


          //Global "transient" lists of vehicles. Vehicles belonging to this base may be in one or more of these lists if
          //it performs a special or temporary job (you could say that the vehicle is in a special state).
          if vehicle in ai_retreating_vehicles_defend[base] then
               begin
                    temp_list = ai_retreating_vehicles_defend[base] diff vehicle;
                    ai_retreating_vehicles_defend = Replace(ai_retreating_vehicles_defend,base,temp_list);
               end;

          if vehicle in ai_vehicles_being_repaired[base] then
               begin
                    temp_list = ai_vehicles_being_repaired[base] diff vehicle;
                    ai_vehicles_being_repaired = Replace(ai_vehicles_being_repaired,base,temp_list);
               end;

          if vehicle in ai_refuel_vehicles_list[base] then
               begin
                    temp_list = ai_refuel_vehicles_list[base] diff vehicle;
                    ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);
               end;

          if vehicle = ai_vehicle_being_moved[base] then
               ai_vehicle_being_moved = Replace(ai_vehicle_being_moved,base,0);

          if vehicle in ai_vehicles_having_been_moved[base] then
               begin
                    temp_list = ai_vehicles_having_been_moved[base] diff vehicle;
                    ai_vehicles_having_been_moved = Replace(ai_vehicles_having_been_moved,base,temp_list);
               end;

          if remove_from_export_import then
               RemoveUnitFromExportImport(base,vehicle);
     end;
Export Function RemoveHumanFromVariables(base,human,check_if_base_is_dead,remove_from_export_import);
     var temp_list, i;
     begin                
          //Global "basis" lists of humans. If a human belong to this base he/she will be in one
          //and only one of these lists.
          if human in ai_soldiers[base] then
               begin
                    temp_list = ai_soldiers[base] diff human;
                    ai_soldiers = Replace(ai_soldiers,base,temp_list);
               end;

          if human in ai_attacking_soldiers[base] then
               begin
                    temp_list = ai_attacking_soldiers[base] diff human;
                    ai_attacking_soldiers = Replace(ai_attacking_soldiers,base,temp_list);
               end;

          if human in ai_engineers[base] then
               begin
                    temp_list = ai_engineers[base] diff human;
                    ai_engineers = Replace(ai_engineers,base,temp_list);
               end;

          if human in ai_apemen_engineers[base] then
               begin
                    temp_list = ai_apemen_engineers[base] diff human;
                    ai_apemen_engineers = Replace(ai_apemen_engineers,base,temp_list);
               end;

          if human in ai_mechanics_defend[base] then
               begin
                    temp_list = ai_mechanics_defend[base] diff human;
                    ai_mechanics_defend = Replace(ai_mechanics_defend,base,temp_list);
               end;

          if human in ai_mechanics_attack[base] then
               begin
                    temp_list = ai_mechanics_attack[base] diff human;
                    ai_mechanics_attack = Replace(ai_mechanics_attack,base,temp_list);
               end;

          if human in ai_scientists[base] then
               begin
                    temp_list = ai_scientists[base] diff human;
                    ai_scientists = Replace(ai_scientists,base,temp_list);
               end;

          if human in ai_attacking_scientists[base] then
               begin
                    temp_list = ai_attacking_scientists[base] diff human;
                    ai_attacking_scientists = Replace(ai_attacking_scientists,base,temp_list);
               end;


          //Global "transient" lists of humans. Humans belonging to this base may be in one or more of these lists if
          //he/she performs a special or temporary job (you could say that the human is in a special state).
          if human in ai_heal_these_humans[base] then
               begin
                    temp_list = ai_heal_these_humans[base] diff human;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
               end;

          if human = ai_building_constructor[base] then
               ai_building_constructor = Replace(ai_building_constructor,base,0);

          if human in ai_retreating_attacking_humans[base] then
               begin
                    temp_list = ai_retreating_attacking_humans[base] diff human;
                    ai_retreating_attacking_humans = Replace(ai_retreating_attacking_humans,base,temp_list);
               end;

          if human = ai_crane_driver[base] then
               ai_crane_driver = Replace(ai_crane_driver,base,0);

          if remove_from_export_import then
               RemoveUnitFromExportImport(base,human);

          //If there are no human units left the base is "dead"
          if check_if_base_is_dead then
               if ((ai_soldiers[base] ^ ai_attacking_soldiers[base] ^ ai_engineers[base] ^ ai_apemen_engineers[base] ^ ai_mechanics_defend[base] ^ ai_mechanics_attack[base] ^ ai_scientists[base] ^
                   ai_attacking_scientists[base]) diff 0) = 0 then
                    begin
                         for i in ai_imported_units[base] do
                              RemoveUnitFromExportImport(base,i);

                         if base = 3 then
                              farmer_attack_anyway_phase = 0;

                         ai_bases = ai_bases diff base;
                    end;
     end;
Export Function RemoveUnitFromExportImport(base,un);
     var i, temp_list;
     begin
          if un in ai_units_to_export[base] then
               begin
                    temp_list = ai_units_to_export[base] diff un;
                    ai_units_to_export = Replace(ai_units_to_export,base,temp_list);
               end;

          if un in ai_imported_units[base] then
               begin
                    temp_list = ai_imported_units[base] diff un;
                    ai_imported_units = Replace(ai_imported_units,base,temp_list);
               end;

          for i in ai_bases do
               begin
                    if un in ai_exported_units[i] then
                         begin
                              temp_list = ai_exported_units[i] diff un;
                              ai_exported_units = Replace(ai_exported_units,i,temp_list);
                         end;
               end;
     end;


Export Function GetBaseArea(base);
     begin
          case base of
               1: result = Ru_base;
               2: result = Ru_small_base;
               3: result = Farmer_base;
          end;
     end;
Export Function GetBaseSide(base);
     begin
          case base of
               1: result = russians;
               2: result = russians;
               3: result = farmer_side;
          end;
     end;
Function GetBaseNation(base);
     begin
          case base of
               1: result = nation_russian;
               2: result = nation_russian;
               3: result = nation_arabian;
          end;
     end;
Function FindBase(un);
     var base;
     begin
          result = 0;

          for base in ai_bases do
               if IsInArea(un,GetBaseArea(base)) then
                    begin
                         result = base;
                         exit;
                    end;
     end;


//Place teleporter exits. The function won't do anything if there is a unit on the specified hex
//so we keep trying until we succeed.
Every 0$1+0$0.3 do
     begin
          repeat
          wait(0$1);

          if ai_teleporter[1] > 0 and not ai_teleporter_exit_placed[1] then
               if TeleportExit(ai_teleporter[1],ai_human_pullback_hex[3][1],ai_human_pullback_hex[3][2]) then
                    ai_teleporter_exit_placed = Replace(ai_teleporter_exit_placed,1,true);

          if ai_teleporter[3] > 0 and not ai_teleporter_exit_placed[3] then
               if TeleportExit(ai_teleporter[3],52,74) then
                    ai_teleporter_exit_placed = Replace(ai_teleporter_exit_placed,3,true);

          until false;
     end;

//If the Russians are under attack and haven't got many vehicles to defend themselves with Farmer sends some of his
//(if he has any) trough the teleporter.
//The Russians return them after a while.
Every 0$1 do
     var num, i, vehicles_list, temp_list, temp_list_2;
     var not_under_attack_count, rus_base, farm_base;
     begin
          rus_base = 1;
          farm_base = 3;
          not_under_attack_count = 0;
                           
          repeat          
          wait(0$1);

          if not rus_base in ai_bases or not farm_base in ai_bases or ( ai_teleporter[farm_base] = 0 and ai_imported_units[rus_base] = 0 ) then  //Farmer can't rebuild his teleporter (but wait with exit until all borrowed vehicles have been returned)
               begin
                    //Return everything to it's original state.
                    for i in [rus_base,farm_base] do
                         begin
                              temp_list_2 = UnitFilter(ai_exported_units[i] ^ ai_units_to_export[i],war_vehicle_filter);
                              temp_list = ai_vehicles_defend[i] ^ temp_list_2;
                              ai_vehicles_defend = Replace(ai_vehicles_defend,i,temp_list);

                              temp_list = ai_exported_units[i] diff temp_list_2;
                              ai_exported_units = Replace(ai_exported_units,i,temp_list);

                              temp_list = ai_units_to_export[i] diff temp_list_2;
                              ai_units_to_export = Replace(ai_units_to_export,i,temp_list);

                              temp_list = ai_imported_units[i] diff UnitFilter(ai_imported_units[i],war_vehicle_filter);
                              ai_imported_units = Replace(ai_imported_units,i,temp_list);
                         end;

                    exit;
               end;

          //If the teleporter isn't functional then we keep the borrowed vehicles.
          for i in [rus_base,farm_base] do
               begin
                    if not IsOk(ai_teleporter[i]) then
                         begin
                              temp_list = UnitFilter(ai_units_to_export[i],war_vehicle_filter);

                              if temp_list > 0 then
                                   begin
                                        temp_list_2 = ai_vehicles_defend[i] ^ temp_list;
                                        ai_vehicles_defend = Replace(ai_vehicles_defend,i,temp_list_2);

                                        temp_list_2 = ai_units_to_export[i] diff temp_list;
                                        ai_units_to_export = Replace(ai_units_to_export,i,temp_list_2);
                                   end;
                         end;
               end;

          if BaseUnderAttack(rus_base,-1) and farmer_attack_anyway_phase <> 2 then
               begin
                    not_under_attack_count = 0;

                    //The Russians also keep the borrowed vehicles if they are attacked again.
                   { temp_list = UnitFilter(ai_units_to_export[rus_base],war_vehicle_filter);
                    if temp_list > 0 then
                         begin
                              temp_list_2 = ai_vehicles_defend[rus_base] ^ temp_list;
                              ai_vehicles_defend = Replace(ai_vehicles_defend,rus_base,temp_list_2);

                              temp_list_2 = ai_units_to_export[rus_base] diff temp_list;
                              ai_units_to_export = Replace(ai_units_to_export,rus_base,temp_list_2);
                         end;  -> Will fail if the unit teleports anyway e.g. because it isn't given any orders to cancel the teleport order. A stop command here could work.
                         }

                    if IsOk(ai_teleporter[farm_base]) then
                         begin
                              num = [3,5,7][difficulty] - ai_vehicles_defend[rus_base] - UnitFilter(ai_units_to_export[farm_base] ^ ai_exported_units[farm_base],war_vehicle_filter);
                              vehicles_list = UnitFilter(ai_vehicles_defend[farm_base],[[f_control,control_remote],[f_lives,750]]);

                              if num > 0 and vehicles_list > 0 then  //Will export even if Farmer's base is under attack
                                   begin
                                        if num >= vehicles_list then
                                             temp_list = vehicles_list
                                        else
                                             begin
                                                  temp_list = [];
                                                  for i = 1 to num do
                                                       begin
                                                            temp_list = temp_list ^ vehicles_list[1];
                                                            vehicles_list = Delete(vehicles_list,1);
                                                       end;
                                             end;

                                        for i in temp_list do
                                             RemoveVehicleFromVariables(farm_base,i,true);

                                        temp_list_2 = ai_units_to_export[farm_base] ^ temp_list;
                                        ai_units_to_export = Replace(ai_units_to_export,farm_base,temp_list_2);
                                   end;
                         end;
               end
          else
               begin
                    {if ai_units_to_export[farm_base] > 0 then
                         begin
                              ComStop(ai_units_to_export[farm_base]);  //So the vehicles won't teleport anyway (they still have the order)

                              temp_list = UnitFilter(ai_units_to_export[farm_base],war_vehicle_filter);
                              if temp_list > 0 then
                                   begin
                                        temp_list_2 = ai_vehicles_defend[farm_base] ^ temp_list;
                                        ai_vehicles_defend = Replace(ai_vehicles_defend,farm_base,temp_list_2);

                                        temp_list_2 = ai_units_to_export[farm_base] diff temp_list;
                                        ai_units_to_export = Replace(ai_units_to_export,farm_base,temp_list_2);
                                   end;
                         end; -> dangerous if the stop command fails causing the vehicles to be part of both ai_vehicle_defend[farmer_base] and ai_imported_units[rus_nase], hence they are given dual-orders.
                         }

                    if ai_imported_units[rus_base] > 0 then
                         begin
                              if farmer_attack_anyway_phase <> 2 then
                                   not_under_attack_count = not_under_attack_count + 1;

                              if ( not_under_attack_count >= 10 or farmer_attack_anyway_phase = 2 ) and IsOk(ai_teleporter[rus_base]) then
                                   begin
                                        //Return the borrowed units.
                                        temp_list_2 = UnitFilter(ai_imported_units[rus_base],war_vehicle_filter ^ [[f_ok]]);

                                        for i in temp_list_2 do
                                             begin
                                                  RemoveVehicleFromVariables(rus_base,i,false);
                                             end;

                                        temp_list = ai_units_to_export[rus_base] union temp_list_2;
                                        ai_units_to_export = Replace(ai_units_to_export,rus_base,temp_list);
                                   end;
                         end;
               end;

          until false;
     end;

//Move units to export into the teleporter.
Every 0$1+0$0.7 do
     var base, i;
     begin

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if not IsOk(ai_teleporter[base]) then
                         continue;

                    for i in ai_units_to_export[base] do
                         begin
                              if i in ai_units_to_export[base] then  //Could have been removed in the meantime
                                   ComEnterUnit(i,ai_teleporter[base]);

                              wait(20);  //Farmer's teleporter can be crowded so make a few delays to mitigate this
                         end;
               end;

          until false;
     end;

//When a unit has been teleported.
On UnitTeleported(teleporter, teleported_unit) do
     var from_base, to_base, temp_list;
     begin
          if GetSide(teleported_unit) = you then
               exit;

          if teleported_unit in [Farmer,farmer_vehicle] then
               begin
                    farmer_has_teleported = true;
                    exit;
               end;

          from_base = FindBase(teleporter);
          case from_base of
               1: begin
                    //From Russians to Farmer
                    to_base = 3;

                    if teleported_unit = Kozlov then
                         begin
                              kozlov_has_teleported = true;
                              kozlov_trying_to_escape = false;
                              SetSide(Kozlov,farmer_side);

                              RemoveHumanFromVariables(1,Kozlov,true,false);

                              temp_list = ai_scientists[to_base] ^ teleported_unit;
                              ai_scientists = Replace(ai_scientists,to_base,temp_list);

                              exit;
                         end;

                    case GetWeapon(teleported_unit) of
                         ru_cargo_bay: begin
                              //Gives Farmer a cargo bay.
                              ai_cargo_bay = Replace(ai_cargo_bay,to_base,teleported_unit);
                              SetSide(teleported_unit,farmer_side);
                         end;
                         ru_time_lapser: begin
                              temp_list = ai_taufield_vehicles[to_base] ^ teleported_unit;
                              ai_taufield_vehicles = Replace(ai_taufield_vehicles,to_base,temp_list);
                              SetSide(teleported_unit,farmer_side);
                         end;
                         else begin
                              //Returns borrowed war vehicles.
                              temp_list = ai_vehicles_defend[to_base] ^ teleported_unit;
                              ai_vehicles_defend = Replace(ai_vehicles_defend,to_base,temp_list);
                         end;
                    end;
               end;
               3: begin
                    //From Farmer to Russians
                    to_base = 1;

                    //Farmer only sends war vehicles.
                    temp_list = ai_vehicles_defend[to_base] ^ teleported_unit;
                    ai_vehicles_defend = Replace(ai_vehicles_defend,to_base,temp_list);
               end;
               else exit;
          end;

          temp_list = ai_units_to_export[from_base] diff teleported_unit;
          ai_units_to_export = Replace(ai_units_to_export,from_base,temp_list);

          if teleported_unit in ai_exported_units[to_base] then
               begin
                    //A borrowed unit returns to its original base.
                    temp_list = ai_exported_units[to_base] diff teleported_unit;
                    ai_exported_units = Replace(ai_exported_units,to_base,temp_list);

                    temp_list = ai_imported_units[from_base] diff teleported_unit;
                    ai_imported_units = Replace(ai_imported_units,from_base,temp_list);
               end
          else
               begin
                    //Someone is borrowing this unit.
                    temp_list = ai_exported_units[from_base] ^ teleported_unit;
                    ai_exported_units = Replace(ai_exported_units,from_base,temp_list);

                    temp_list = ai_imported_units[to_base] ^ teleported_unit;
                    ai_imported_units = Replace(ai_imported_units,to_base,temp_list);
               end;
     end;


//Soldiers
//Keep them in bunkers/armouries. If that's not possible due to structure restrictions then help construct buildings. Else retreat to
//the center of the base.
Every 0$1+0$0.1 do
     var side, i, temp_list, buildings_list, soldiers_list, temp_unit, base, val, special_units, bunkers, under_attack, j;
     var special_defenders, temp_list_2;
     begin
          for base in ai_bases do
               begin
                    side = GetBaseSide(base);

                    soldiers_list = ai_soldiers[base] diff (Farmer ^ ai_excepted_soldiers[base]);
                    under_attack := BaseUnderAttack(base,-1);

                    //Farmer stays in the depot.
                    if base = 3 and IsLive(Farmer) and Farmer in ai_soldiers[base] and not Farmer in ai_heal_these_humans[base] then
                         begin
                              if GetLives(Farmer) <= 500 then
                                   begin
                                        temp_list = ai_heal_these_humans[base] ^ Farmer;
                                        ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
                                   end
                              else
                                   DistributeHumansToBuildings(base,[Farmer], UnitFilter(ai_depot[base],[[f_ok],[f_not,[f_constructed]]]),
                                   0,6,true,true);
                         end;
                     
                    if base in [1,3] and under_attack then
                         special_defenders = UnitFilter(soldiers_list,[[f_or,[f_class,class_sniper],[f_class,class_mortar],[f_class,class_bazooker]],[f_not,[f_inside]]])
                    else
                         special_defenders = [];

                    //Identify soldiers who need healing.
                    if base in [1,3] then
                         begin
                              temp_list = ai_heal_these_humans[base];
                              for i in soldiers_list diff ai_heal_these_humans[base] do
                                   if GetLives(i) <= 500 or ( GetLives(i) < 800 and not i in special_defenders ) then
                                        temp_list = temp_list ^ i;
                              ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
                         end;

                    //Make soldiers needing healing go outside (else they won't be healed, cf. the healing
                    //code (controlling scientists) below.
                    if not under_attack then  //Soldiers don't care if they are wounded if the base is under attack
                         begin
                              for i in ai_heal_these_humans[base] do
                                   if i in soldiers_list then
                                        case GetType(IsInUnit(i)) of
                                             unit_vehicle: ComExitVehicle(i);
                                             unit_building: ComExitBuilding(i);
                                        end;

                              soldiers_list = soldiers_list diff ai_heal_these_humans[base];
                              special_defenders = special_defenders diff ai_heal_these_humans[base];
                         end;
                         

                    if soldiers_list = 0 then
                         continue;


                    //Special defenders charge towards attackers attacking from "unusual" directions.
                    if special_defenders > 0 and not base = 3 then
                         begin
                              case base of
                                   1: begin
                                        temp_list_2 = FilterAllUnits([[f_enemy,side],[f_type,unit_human],[f_inarea,ru_bazooker_defend_area_south]]);

                                        if temp_list_2 = 0 then
                                             temp_list_2 = FilterAllUnits([[f_enemy,side],[f_type,unit_human],[f_inarea,ru_bazooker_defend_area_north]]);
                                   end;
                                   2: begin
                                        temp_list_2 = [];
                                   end;
                                   3: begin
                                        temp_list_2 = FilterAllUnits([[f_enemy,side],[f_type,unit_human],[f_inarea,ar_mortar_defend_area]]);
                                   end;
                              end;

                              if temp_list_2 > 0 then
                                   begin
                                        soldiers_list = soldiers_list diff special_defenders;

                                        //Charge!
                                        ComAgressiveMove(GetHumansOutOfUnits(special_defenders),GetX(temp_list_2[1]),GetY(temp_list_2[1]));
                                   end;
                         end;


                    //Find the bunkers which need to be occupied.
                    //Remember which soldiers are already inside a building.
                    //Don't occupy b_bunker if there is no power.
                    i = false;
                    if IsOk(ai_depot[base]) then
                         if GetEnergy(GetBase(ai_depot[base]))[4] > 0 then
                              i = true;

                    if i then
                         bunkers = ai_bunkers[base]
                    else
                         begin
                              bunkers = [];
                              for i in ai_bunkers[base] do
                                   if GetBType(i) = b_breastwork then
                                        bunkers = bunkers ^ i;
                         end;

                    buildings_list = [];
                    //for i in UnitFilter(bunkers,[f_ok]) do
                    for i in bunkers do
                         begin
                              temp_unit = UnitsInside(i);
                              if temp_unit = 0 then
                                   buildings_list = buildings_list ^ i
                              else soldiers_list = soldiers_list diff temp_unit;
                         end;
                     

                    //The best soldiers should go to the bunkers. The rest in the armouries.
                    //If the base is under attack then just the nearest soldier.
                    if buildings_list > 0 then
                         begin
                              if not under_attack then
                                   begin
                                        temp_list = [];
                                        for i in soldiers_list do
                                             temp_list = temp_list ^ GetSkill(i,skill_combat);
                                        soldiers_list = SortListByListDesc(soldiers_list,temp_list);
                                   end;

                              //Bazookers/snipers/mortar in armouries or breastworks if possible.
                              special_units = UnitFilter(soldiers_list,[f_or,[f_class,class_bazooker],[f_class,class_sniper],[f_class,class_mortar]]);
                              soldiers_list = soldiers_list diff special_units;

                              for i = 1 to buildings_list do
                                   begin
                                        if soldiers_list = 0 then
                                             begin
                                                  if special_units = 0 then
                                                       break;

                                                  soldiers_list = special_units;
                                                  special_units = [];
                                             end;

                                        if not under_attack then
                                             begin
                                                  if GetBType(buildings_list[i]) = b_breastwork and special_units > 0 then
                                                       temp_unit = special_units[1]
                                                  else
                                                       temp_unit = soldiers_list[1];
                                             end
                                        else
                                             begin
                                                  if GetBType(buildings_list[i]) = b_breastwork and special_units > 0 then
                                                       temp_list_2 = special_units
                                                  else
                                                       temp_list_2 = soldiers_list;

                                                  temp_list = [];
                                                  for j in temp_list_2 do
                                                       temp_list = temp_list ^ GetDistUnits(j,buildings_list[i]);

                                                  temp_unit = WorstFromListByList(temp_list_2,temp_list);
                                             end;

                                        if IsOk(buildings_list[i]) then
                                             ComEnterUnit(temp_unit,buildings_list[i])
                                        else
                                             if GetDistUnits(temp_unit,buildings_list[i]) > 4 then
                                                  ComAgressiveMove(temp_unit,GetX(buildings_list[i]),GetY(buildings_list[i]));

                                        soldiers_list = soldiers_list diff temp_unit;
                                        special_units = special_units diff temp_unit;
                                   end;
                         end
                    else
                         special_units = [];


                    //The rest enter armouries (if possible)
                    DistributeHumansToBuildings(base,soldiers_list ^ special_units, UnitFilter(ai_armouries[base],[[f_ok],[f_not,[f_constructed]]]),
                         false,6,true,true);
               end;   

          enable;
     end;   

//Replace defensive mines in front of Farmer's base as necessary.
Every 0$1+0$0.3 do
     var target_hex, center_hexes, i, temp_list, k;
     begin
          target_hex = [];

          repeat
          wait(0$1);

          if IsDead(farmer_mine_guy) then
               exit;

          if GetLives(farmer_mine_guy) < 900 and farmer_mine_guy in ai_excepted_soldiers[3] and not farmer_mine_guy in ai_heal_these_humans[3] then
               begin
                    temp_list = ai_heal_these_humans[3] ^ farmer_mine_guy;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,3,temp_list);
               end;

          if farmer_defence_mines_hexes >= farmer_defence_num_mines or BaseUnderAttack(3,-1) or farmer_mine_guy in ai_heal_these_humans[3] then
               begin
                    if farmer_mine_guy in ai_excepted_soldiers[3] then
                         begin
                              temp_list = ai_excepted_soldiers[3] diff farmer_mine_guy;
                              ai_excepted_soldiers = Replace(ai_excepted_soldiers,3,temp_list);
                         end;

                    continue;
               end;

          if target_hex = 0 then
               begin
                    //Determine free centerhexes.
                    center_hexes = farmer_defence_mines_centerhexes;

                    for i in farmer_defence_mines_hexes do
                         begin
                              temp_list = [];
                              for k in center_hexes do
                                   temp_list = temp_list ^ GetDistXY(i[1],i[2],k[1],k[2]);

                              center_hexes = center_hexes diff [WorstFromListByList(center_hexes,temp_list)];
                         end;

                    if center_hexes = 0 then
                         continue;  //should never happen

                    //Pick one and find a hex therein.
                    k = Rand(1,center_hexes);
                    k = center_hexes[k];
                    temp_list = GetHexesNearHex(k[1],k[2],3);

                    repeat
                    k = Rand(1,temp_list);
                    if not temp_list[k] in farmer_defence_mines_hexes then
                         break;

                    temp_list = Delete(temp_list,k);
                    until temp_list = 0;

                    if temp_list > 0 then
                         target_hex = temp_list[k];
               end;

          if target_hex = 0 then
               continue;

          if not farmer_mine_guy in ai_excepted_soldiers[3] then
               begin
                    temp_list = ai_excepted_soldiers[3] ^ farmer_mine_guy;
                    ai_excepted_soldiers = Replace(ai_excepted_soldiers,3,temp_list);
               end;

          if GetClass(farmer_mine_guy) <> class_soldier then
               begin
                    case GetType(IsInUnit(farmer_mine_guy)) of
                         unit_vehicle: ComExitVehicle(farmer_mine_guy);
                         unit_building: begin
                              if GetBType(IsInUnit(farmer_mine_guy)) in [b_armoury,b_barracks] then
                                   ComChangeProfession(farmer_mine_guy,class_soldier)
                              else
                                   ComExitBuilding(farmer_mine_guy);
                         end;
                         else begin
                              //Find a barracks with enough space to fit one more person.
                              k = 0;
                              for i in ai_armouries[3] do
                                   if UnitsInside(i) < 6 then
                                        begin
                                             k = i;
                                             break;
                                        end;

                              if k = 0 then
                                   SetClass(farmer_mine_guy,class_soldier)  //cheating a little
                              else
                                   ComEnterUnit(farmer_mine_guy,k);
                         end;
                    end;
               end
          else
               begin
                    temp_list = MineOfUnit(farmer_mine_guy);
                    if temp_list = 0 then
                         begin
                              if GetDistUnitXY(farmer_mine_guy,target_hex[1],target_hex[2]) > 1 then
                                   ComAgressiveMove(farmer_mine_guy,target_hex[1],target_hex[2])
                              else
                                   ComPlaceRemoteCharge(farmer_mine_guy,target_hex[1],target_hex[2],0);
                         end
                    else
                         begin
                              PlaceMine(temp_list[1],temp_list[2],mines_side,0);
                              farmer_defence_mines_hexes = farmer_defence_mines_hexes ^ [temp_list];
                              all_mines_hexes = all_mines_hexes ^ [temp_list];
                              RemoveMineOfUnit(farmer_mine_guy);
                              target_hex = [];
                         end;
               end;

          until false;
     end;

//When someone steps on a landmine.
Every 0$1+0$0.2 do
     var i, un;
     begin
          repeat
          wait(0$0.5);

          i = 1;
          while i <= all_mines_hexes do
               begin
                    un = HexInfo(all_mines_hexes[i][1],all_mines_hexes[i][2]);

                    if un <= 0 then
                         begin
                              i = i + 1;
                              continue;
                         end;

                    if GetSide(un) = you or not all_mines_hexes[i] in farmer_defence_mines_hexes then
                         begin
                              LaunchMineAtPos(all_mines_hexes[i][1],all_mines_hexes[i][2],mines_side);

                              //These mines just don't hurt very much so we have to add some extra
                              //power manually.
                              //The mines in mine_area_ru_north_2 and mine_area_ru_south_2 are instant kills because attacking from here is way too easy.
                              if InArea(all_mines_hexes[i][1],all_mines_hexes[i][2],mine_area_ru_north_2) or InArea(all_mines_hexes[i][1],all_mines_hexes[i][2],mine_area_ru_south_2) then
                                   begin
                                        KillUnit(un);
                                   end
                              else
                                   if GetLives(un) > [0,150,300][difficulty] then
                                        SetLives(un,GetLives(un)-[0,150,300][difficulty]);

                              farmer_defence_mines_hexes = farmer_defence_mines_hexes diff [all_mines_hexes[i]];
                              all_mines_hexes = Delete(all_mines_hexes,i);

                              continue;
                         end;

                    i = i + 1;
               end;

          until false;
     end;

//Make defending bazookers shoot time shifting rockets at their targets.
Every 0$1+0$0.1 do
     var side, base, i, temp_list, un1, temp_list_2, temp_value, val, lapsers;
     begin


          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if base in [3] then
                         continue;

                    side = GetBaseSide(base);

                    //Find time lapsers
                    lapsers = [];
                    val = false;
                    if IsOk(ai_depot[base]) then
                         if GetEnergy(GetBase(ai_depot[base]))[4] > 0 then
                              val = true;

                    if val then
                         for i in ai_bunkers[base] ^ ai_turrets[base] do
                              if GetBWeapon(i) = ru_time_lapser and IsOk(i) and ( UnitsInside(i) > 0 or GetBType(i) = b_turret ) then
                                   lapsers = lapsers ^ i;

                    //Control bazookers
                    for i in ai_soldiers[base] diff ai_heal_these_humans[base] do
                              if GetClass(i) = class_bazooker then
                                   begin
                                        //Don't bother the bazooker if he/she is about to fire a time shifting or space shifting rocket.
                                        temp_list = GetTaskList(i);
                                        if temp_list > 0 then
                                             if temp_list[1][1] = '&' or temp_list[1][1] = '%' then
                                                  continue;

                                        un1 = Attacks(i);
                                        if un1 > 0 and DangerousUnits([un1]) > 0 then
                                             begin
                                                  temp_list_2 = [GetX(un1),GetY(un1)];
                                                  temp_value = false;

                                                  for val in ai_time_shift_hexes[base] ^ ai_time_shift_hexes_underway[base] do  //don't send a rocket where someone already have or (probably) soon will
                                                       if GetDistXY(temp_list_2[1],temp_list_2[2],val[1],val[2]) <= ai_time_shift_data[side][2] then
                                                            begin
                                                                 temp_value = true;
                                                                 break;
                                                            end;

                                                  //Don't shoot rockets in areas permanently time shiftet by time lapsers.
                                                  //Time lapsers affect an area with about 11 hexes radius no matter the level of space time technology you have
                                                  //and it is not affected by height. The radius is affected by stacking lapsers close to each other, though,
                                                  //but the effect is not very predictable so we will not take that into consideration here.
                                                  if not temp_value then
                                                       for val in lapsers do
                                                            if GetDistXY(temp_list_2[1],temp_list_2[2],GetX(val),GetY(val)) <= 11 then
                                                                 begin
                                                                      temp_value = true;
                                                                      break;
                                                                 end;

                                                  if not temp_value then  //not inside a time shifted area
                                                       begin
                                                            ComTimeShift(i,temp_list_2[1],temp_list_2[2]);

                                                            //The bazooker could die before he/she fires the rocket
                                                            //so we store the hex temporarily and check if the rocket actually is fired later.
                                                            temp_list = Insert(ai_time_shift_hexes_underway[base],1,[temp_list_2[1],temp_list_2[2],i,tick]);
                                                            ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);
                                                       end;
                                             end;
                                   end;
               end;

          until false;
     end;

//Make defending bazookers shoot space shifting rockets at their targets.
//Doing this intelligently is extremely difficult so we just shoot one rocket from time
//to time behind a target hoping we push the target closer to our base instead of
//pushing it away.
//Only bazookers inside barrackses.
Every 0$1+0$0.2 do
     var base, i, temp_list, un1, temp_list_2, temp_value;
     var shooting_delay;
     begin
          shooting_delay = [0$0,0$0,0$0];

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if base in [3] then
                         continue;

                    if shooting_delay[base] > 0$0 then
                         begin
                              shooting_delay = Replace(shooting_delay,base, shooting_delay[base] - 0$1 );
                              continue;
                         end;

                    if Rand(1,15) > 1 then
                         continue;

                    temp_list = [];
                    for i in ai_soldiers[base] diff ai_heal_these_humans[base] do
                         if IsInUnit(i) in ai_armouries[base] then
                              temp_list = temp_list ^ i;

                    for i in temp_list do
                              if GetClass(i) = class_bazooker then
                                   begin
                                        //Don't bother the bazooker if he/she is about to fire a time shifting or space shifting rocket.
                                        temp_list = GetTaskList(i);
                                        if temp_list > 0 then
                                             if temp_list[1][1] = '&' or temp_list[1][1] = '%' then
                                                  continue;

                                        un1 = Attacks(i);
                                        if un1 > 0 and not IsInArea(un1,GetBaseArea(base)) then
                                             begin
                                                  //Shoot just behind the target. We are higher elevated so this should be possible
                                                  temp_list_2 = [GetX(un1),GetY(un1)];
                                                  temp_value = AI_GetTurnDirection(GetX(i),GetY(i),temp_list_2[1],temp_list_2[2]);
                                                  ComSpaceShift(i, ShiftX(temp_list_2[1],temp_value,1), ShiftY(temp_list_2[2],temp_value,1) );

                                                  shooting_delay = Replace(shooting_delay,base,0$5);

                                                  break;
                                             end;
                                   end;
               end;

          until false;
     end;

//Determine which bazookers have successfully fired their time shifting rocket.
//We need an extremely short update time on this update to prevent the situation where
//a bazooker has shot a time shifting rocket but is brought to red life before the
//update runs (in which case we do not detect the time shifting rocket as fired).
Every 0$1 do
     var base, side, val, temp_value, temp_list;
     begin

          repeat
          wait(1);

          for base in ai_bases do
               begin
                    if base in [3] then
                         continue;

                    side = GetBaseSide(base);

                    val = 1;
                    while val <= ai_time_shift_hexes_underway[base] do
                         begin
                              if tick = ai_time_shift_hexes_underway[base][val][4] then  //If the order was given at exactly this tick then the unit's task list is not yet updated
                                   begin
                                        val = val + 1;
                                        continue;
                                   end;

                              temp_value = false;
                              temp_list = GetTaskList(ai_time_shift_hexes_underway[base][val][3]);

                              if IsOk(ai_time_shift_hexes_underway[base][val][3]) then  //Task list is reset upon going to red life
                                   begin
                                        if temp_list = 0 then
                                             temp_value = true
                                        else
                                             if not temp_list[1][1] = '&' then
                                                  temp_value = true;
                                   end
                              else
                                   begin
                                        temp_list = Delete(ai_time_shift_hexes_underway[base],val);
                                        ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);

                                        continue;
                                   end;

                              if temp_value then
                                   begin
                                        temp_list = Insert(ai_time_shift_hexes[base],1,[ai_time_shift_hexes_underway[base][val][1],ai_time_shift_hexes_underway[base][val][2],ai_time_shift_data[side][1]]);
                                        ai_time_shift_hexes = Replace(ai_time_shift_hexes,base,temp_list);

                                        temp_list = Delete(ai_time_shift_hexes_underway[base],val);
                                        ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);

                                        continue;
                                   end;

                              val = val + 1;
                         end;
               end;

          until false;
     end;

//Update time shifted areas (determine when they have faded away).
Every 0$1+0$0.3 do
     var base, val, temp_list, time;
     begin

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if base in [3] then
                         continue;

                    val = 1;
                    while val <= ai_time_shift_hexes[base] do
                         begin
                              time = ai_time_shift_hexes[base][val][3]-0$1;

                              if time <= 0$0 then
                                   begin
                                        temp_list = Delete(ai_time_shift_hexes[base],val);
                                        ai_time_shift_hexes = Replace(ai_time_shift_hexes,base,temp_list);

                                        continue;
                                   end
                              else
                                   begin
                                        temp_list = Replace(ai_time_shift_hexes[base][val],3,time);
                                        temp_list = Replace(ai_time_shift_hexes[base],val,temp_list);
                                        ai_time_shift_hexes = Replace(ai_time_shift_hexes,base,temp_list);
                                   end;

                              val = val + 1;
                         end;
               end;

          until false;
     end;

//To prevent the tactic where the player buildings a barracks near the Russians defences and progressively
//move closer to the base (tactic from Soldier War) the Russian defences will shoot at buildings near
//the big Russian base (if there are no humans nearby).
Every 0$1+0$0.4 do
     var side, base, building_attacker_cant_map, attacker_building_pairs;
     var i, un_list, buildings_list, att, b;
     begin
          base = 1;
          side = GetBaseSide(base);
          building_attacker_cant_map = [];

          repeat
          wait(0$1);

          buildings_list = FilterAllUnits([[f_enemy,side],[f_type,unit_building],[f_inarea,ru_attack_buildings_area]]);
          if buildings_list = 0 then
               continue;

          for i in buildings_list do
               if building_attacker_cant_map < i then
                    building_attacker_cant_map = Replace(building_attacker_cant_map,i,[])
               else
                    if building_attacker_cant_map[i] = 0 then
                         building_attacker_cant_map = Replace(building_attacker_cant_map,i,[]);

          un_list = ai_bunkers[base] ^ ai_turrets[base];
          for i in ai_armouries[base] do
               un_list = un_list ^ UnitFilter(UnitsInside(i),[f_or,[f_class,class_bazooker],[f_class,class_mortar]]);

          attacker_building_pairs = [];
          for i in un_list do
               begin
                    att = Attacks(i);
                    if att > 0 then
                         begin
                              if GetType(att) = unit_building and DangerousUnits([att]) = 0 then
                                   begin
                                        if DangerousUnits( FilterAllUnits([[f_enemy,side],[f_dist,i,GetDistUnits(i,att)]]) ) > 0 then
                                             ComStop(i);  //Attack dangerous units instead of the building
                                   end;
                         end
                    else
                         begin
                              for b in buildings_list do
                                   begin
                                        if i in building_attacker_cant_map[b] then
                                             continue;

                                        ComAttackUnit(i,b);

                                        attacker_building_pairs = Insert(attacker_building_pairs,1,[i,b]);
                                        break;
                                   end;
                         end;
               end;

          wait(0$0.2);  //Wait for defences to start attack (if they can)
          for i in attacker_building_pairs do
               begin
                    if Attacks(i[1]) <> i[2] then
                         building_attacker_cant_map = Replace(building_attacker_cant_map,i[2], building_attacker_cant_map[i[2]] ^ i[1] );
               end;

          until false;
     end;


//Function which sends humans to buildings, distributing them equally and changing their class (if specified).
//The humans there wasn't space for will stay near the pullback hex.
//base - the base calling the function.
//human_list - list of humans
//building_list - list of buildings
//change_to_this_class - class to change to when the human has entered the building (false if none)
//building_capacity - the number of humans the building can handle
//help_building - boolean. If true then units which could not enter a building will help building the building under
//construction (if any).
//aggressive_pullback - boolean. True if movement to pullback hex should be aggressive (else just normal move)
Function DistributeHumansToBuildings(base,human_list,building_list,change_to_this_class,building_capacity,help_building,aggressive_pullback);
     var i, temp_list, val, temp_unit, area, special_un_count, counter, k, under_attack;
     begin
          if human_list = 0 then
               exit;

          area = GetBaseArea(base);
          under_attack = BaseUnderAttack(base,-1);

          //If this is soldiers going to armouries then special units
          //should be distributed equally among the armouries.
          if not GetClass(human_list[1]) in [class_engineer,class_apeman_engineer,class_mechanic,class_scientistic] and building_list > 0 then
               begin
                    val = 0;
                    for i in human_list do
                         if GetClass(i) in [class_sniper,class_mortar,class_bazooker] then
                              val = val + 1;

                    special_un_count = val div (building_list+0);
               end
          else
               special_un_count = 0;

          val = building_list+0;
          while val > 0 and human_list > 0 do
               begin
                    //Rearrange "human_list" so humans already inside this building goes
                    //first in the list. Else this algorithm could pick 6 people for a barracks
                    //let's say 2 outside and 4 actually in the barracks but there is a 5. unit
                    //inside the barracks already which is further down "human_list"- the result is
                    //one human can't get in because there isn't space.
                    temp_list = [];
                    for i in human_list do
                         if IsInUnit(i) = building_list[val] then
                              temp_list = temp_list ^ i;
                    human_list = temp_list ^ (human_list diff temp_list);

                    //Distribute humans equally to the buildings
                    counter = 0;
                    temp_list = [];
                    for i = 1 to human_list div val do
                         begin
                              if i > building_capacity then
                                   break;

                              if special_un_count = 0 then
                                   begin
                                        temp_list = temp_list ^ human_list[1];
                                        human_list = Delete(human_list,1);
                                   end
                              else
                                   if counter = special_un_count then
                                        begin
                                             //Search for a non-special unit in the list.
                                             temp_unit = 0;
                                             for k = 1 to human_list do
                                                  if not GetClass(human_list[k]) in [class_sniper,class_mortar,class_bazooker] then
                                                       begin
                                                            temp_unit = k;
                                                            break;
                                                       end;

                                             if temp_unit = 0 then
                                                  temp_unit = 1;

                                             temp_list = temp_list ^ human_list[temp_unit];
                                             human_list = Delete(human_list,temp_unit);
                                        end
                                   else
                                        begin
                                             counter = counter + 1;

                                             //Search for a special unit in the list.
                                             temp_unit = 0;
                                             for k = 1 to human_list do
                                                  if GetClass(human_list[k]) in [class_sniper,class_mortar,class_bazooker] then
                                                       begin
                                                            temp_unit = k;
                                                            break;
                                                       end;

                                             if temp_unit = 0 then
                                                  temp_unit = 1;

                                             temp_list = temp_list ^ human_list[temp_unit];
                                             human_list = Delete(human_list,temp_unit);
                                        end;
                         end;

                    for i in temp_list do
                         begin
                              temp_unit = IsInUnit(i);
                              if temp_unit <> building_list[val] then
                                   case GetType(IsInUnit(i)) of
                                        unit_vehicle: ComExitVehicle(i);
                                        unit_building: ComExitBuilding(i);
                                        else
                                             begin
                                                  if IsInArea(i,area) or not aggressive_pullback then
                                                       ComEnterUnit(i,building_list[val])
                                                  else
                                                       ComAgressiveMove(i,GetX(building_list[val]),GetY(building_list[val]));

                                                  if change_to_this_class > 0 then
                                                       begin
                                                            if GetClass(i) <> change_to_this_class and GetNation(i) <> nation_nature then  //ignore apemen
                                                                 if not ( change_to_this_class in [class_sniper,class_mortar,class_bazooker] and not GetBType(building_list[val]) in [b_barracks,b_fort] ) then  //Will change class to sniper/mortar/bazooker even if the building is only an armoury
                                                                      AddComChangeProfession(i,change_to_this_class);
                                                       end
                                                  else
                                                       begin
                                                            //If the building is a barracks then always change to the special combat class the barracks allows.
                                                            if GetBType(building_list[val]) in [b_barracks,b_fort] then
                                                                 case GetNation(building_list[val]) of
                                                                      nation_american: AddComChangeProfession(i,class_sniper);
                                                                      nation_arabian: AddComChangeProfession(i,class_mortar);
                                                                      nation_russian: AddComChangeProfession(i,class_bazooker);
                                                                 end;
                                                       end;
                                             end;
                                   end;
                         end;

                    val = val - 1;
               end;

          if human_list > 0 then
               if ai_building_under_construction[base] > 0 and help_building and not under_attack then
                    begin
                         for i in GetHumansOutOfUnits(human_list) do
                              SetTaskList(i,[['h',0,0,ai_building_under_construction[base],0,0,0]]);  //'h' is "help building building"
                    end
               else
                    for i in GetHumansOutOfUnits(human_list) do
                         if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                              if aggressive_pullback then
                                   ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2])
                              else
                                   ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
     end;


//Engineers and Apemen Engineers
//These are the priorities (descending order):
//- If an engineer is hurt, them pull him/her back for healing.
//- Reparation of red buildings
//- Reparation of any building
//- Reconstruct destroyed buildings if necessary, but only if the base is not under attack (only engineers)
//- Gather crates in the vicinity of the base, but for engineers only if the base is not under attack.
//- Return to and stay inside the depot (if possible).
Every 0$1+0$0.3 do
     var side, i, engineers_list, temp_list, buildings_list, temp_unit, away_dist, temp_list_2, base, apemen_engineers_list;
     var humans_list, crane_usable, b_value, engineers_not_allowed_to_repair_area, crane_not_allowed_to_repair_area, workers_list;
     var k, repairing_buildings, under_attack, is_dismantling;
     var crane_is_refueling, try_rebuild_again_time;
     begin
          crane_is_refueling = [false,false,false,false];

          try_rebuild_again_time = [];
          for base in ai_bases do
               try_rebuild_again_time = Replace(try_rebuild_again_time,base,0$0);

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    side = GetBaseSide(base);
                    under_attack := BaseUnderAttack(base,-1);

                    //Reset "move empty manual vehicles so we can build our building"-variables if we are under attack so we can use our vehicles freely.
                    if under_attack then
                         begin
                              ai_vehicle_being_moved = Replace(ai_vehicle_being_moved,base,0);
                              ai_vehicles_having_been_moved = Replace(ai_vehicles_having_been_moved,base,[]);
                         end;

                    //Check if we can rebuild some of the buildings we couldn't before.
                    if ai_cannot_rebuild_these_buildings[base] > 0 and ( ai_engineers[base] > 0 or try_rebuild_again_time[base] >= 0$20 ) then
                         begin
                              ai_cannot_rebuild_these_buildings = Replace(ai_cannot_rebuild_these_buildings,base,[]);
                              try_rebuild_again_time = Replace(try_rebuild_again_time,base,0$0);
                         end
                    else
                         try_rebuild_again_time = Replace(try_rebuild_again_time,base, try_rebuild_again_time[base] + 0$1 );


                    engineers_list = ai_engineers[base] diff ai_heal_these_humans[base];
                    apemen_engineers_list = ai_apemen_engineers[base] diff ai_heal_these_humans[base];


                    //Identify engineers who need healing
                    if base in [1,3] then
                         begin
                              temp_list = ai_heal_these_humans[base];
                              humans_list = engineers_list ^ apemen_engineers_list;
                              i = 1;
                              while i <= humans_list do
                                   begin
                                        if GetLives(humans_list[i]) <= 700 then
                                             begin
                                                  temp_list = temp_list ^ humans_list[i];
                                                  engineers_list = engineers_list diff humans_list[i];
                                                  apemen_engineers_list = apemen_engineers_list diff humans_list[i];
                                                  humans_list = Delete(humans_list,i);

                                                  continue;
                                             end;

                                        i = i + 1;
                                   end;
                              ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
                         end;

                    //Crane
                    crane_usable = false;
                    if ai_crane[base] > 0 then
                         begin
                              if GetControl(ai_crane[base]) = control_manual and not ai_crane[base] = ai_vehicle_being_moved[base] then
                                   begin
                                        temp_list = UnitsInside(ai_crane[base]);
                                        if temp_list > 0 then
                                             if temp_list[1] <> ai_crane_driver[base] then
                                                  ComExitVehicle(temp_list[1]);
                                   end;
                              
                              if GetLives(ai_crane[base]) <= 500 or ( ai_crane_driver[base] > 0 and GetLives(ai_crane_driver[base]) <= 500 ) or ( ai_crane_is_being_repaired[base] and ( GetLives(ai_crane[base]) < 1000 or ( ai_crane_driver[base] > 0 and GetLives(ai_crane_driver[base]) < 1000 ) ) ) then
                                   begin
                                        ai_crane_is_being_repaired = Replace(ai_crane_is_being_repaired,base,true);

                                        //Code for defending mechanics below will take care of repairing the crane
                                        if GetDistUnitXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 6 then
                                             ComMoveXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                                   end
                              else
                                   begin
                                        ai_crane_is_being_repaired = Replace(ai_crane_is_being_repaired,base,false);

                                        //Refuel if necessary
                                        if GetEngine(ai_crane[base]) = engine_combustion then
                                             begin
                                                  i = GetFuel(ai_crane[base]);
                                                  if i > 90 or not IsOk(ai_depot[base]) then
                                                       crane_is_refueling = Replace(crane_is_refueling,base,false)
                                                  else
                                                       if i < 25 or crane_is_refueling[base] then
                                                            begin
                                                                 ComMoveUnit(ai_crane[base],ai_depot[base]);
                                                                 AddComRefuel(ai_crane[base],ai_depot[base]);
                                                                 crane_is_refueling = Replace(crane_is_refueling,base,true);
                                                            end;
                                             end;

                                        if not crane_is_refueling[base] then
                                             crane_usable = true;
                                   end;
                         end;

                    //Special for the small Russian base. Attack nearby enemies if we have no defences.
                    if base = 2 and ai_bunkers[base] = 0 and engineers_list > 0 then
                         begin
                              temp_list = FilterAllUnits([[f_side,you],[f_inarea,ru_small_base]]);
                              temp_list = DangerousUnits(temp_list);
                              if temp_list > 0 then
                                   begin
                                        ComAgressiveMove(engineers_list,GetX(temp_list[1]),GetY(temp_list[1]));
                                        engineers_list = [];
                                   end;
                         end;

                    if engineers_list = 0 and apemen_engineers_list = 0 and not crane_usable then
                         continue;

                    //Recapture buildings if necessary. Depots first. Here we assume the player hasn't changed the base
                    //of the captured building.
                    //Apemen engineers and cranes can't capture buildings.
                    temp_list_2 = UnitFilter(engineers_list,[f_class,class_engineer]);
                    if ai_captured_buildings[base] > 0 and temp_list_2 > 0 then
                         begin
                              temp_list = [];
                              for i in ai_captured_buildings[base] do
                                   if GetBType(i) in [b_depot,b_warehouse] then
                                        temp_list = temp_list ^ 1
                                   else
                                        temp_list = temp_list ^ 0;

                              temp_list = SortListByListDesc(ai_captured_buildings[base],temp_list);

                              //Normal "ComEnterUnit" for capturing doesn't work for buildings which can't be entered (e.g. power plants).
                              temp_list_2 = GetHumansOutOfUnits(temp_list_2);
                              if temp_list_2 > 0 then
                                   begin
                                        temp_list_2 = SortListByListDesc(temp_list_2, temp_list_2);  //To ensure we take the same unit each time
                                        SetTaskList(temp_list_2[1],[['e',GetX(temp_list[1]),GetY(temp_list[1]),temp_list[1],0,0,0]]);
                                        engineers_list = engineers_list diff temp_list_2[1];
                                   end;

                              if engineers_list = 0 and apemen_engineers_list = 0 and not crane_usable then
                                   continue;
                         end;

                    //Find buildings which need to be repaired. At least one engineer for each if possible.
                    //If the base is under attack human (not including apemen) engineers may not be allowed
                    //to repair certain buildings.
                    //The crane may not be allowed to repair certain buildings at all (e.g. because it can't reach
                    //them).
                    case base of
                         1: begin
                              engineers_not_allowed_to_repair_area = ru_no_engineer_repair_area;
                              crane_not_allowed_to_repair_area = ru_no_crane_repair_area;
                         end;
                         2: begin
                              engineers_not_allowed_to_repair_area = 0;
                              crane_not_allowed_to_repair_area = 0;
                         end;
                         3: begin
                              engineers_not_allowed_to_repair_area = ar_no_engineer_repair_area;
                              crane_not_allowed_to_repair_area = ar_no_crane_repair_area;
                         end;
                    end;

                    repairing_buildings = false;  //True if anyone is repairing a building

                    for k = 1 to 3 do begin

                    //1 = apemen engineers
                    //2 = human engineers
                    //3 = crane

                    i = 1;
                    buildings_list = [];
                    repeat
                         case i of
                              1: buildings_list = UnitFilter(ai_all_buildings[base] diff ai_dismantle_these_buildings[base],[f_not,[f_ok]]);  //If building is dead then it won't be part of ai_all_buildings
                              2: buildings_list = UnitFilter(ai_all_buildings[base] diff ai_dismantle_these_buildings[base],[f_not,[f_lives,1000]]);
                         end;

                         if base = 1 and i = 2 and ai_building_under_construction[base] > 0 then  //For anti-harassment the Russians persistently rebuild buildings even if the base is under attack.
                              buildings_list = buildings_list ^ ai_building_under_construction[base];

                         case k of
                              2: begin
                                   if under_attack and engineers_not_allowed_to_repair_area > 0 then
                                        buildings_list = UnitFilter(buildings_list,[f_not,[f_inarea,engineers_not_allowed_to_repair_area]]);
                              end;
                              3: begin
                                   if crane_not_allowed_to_repair_area > 0 then
                                        buildings_list = UnitFilter(buildings_list,[f_not,[f_inarea,crane_not_allowed_to_repair_area]]);
                              end;
                         end;

                         i = i + 1;
                    until buildings_list > 0 or i > 2;

                    if buildings_list > 0 then
                         begin
                              case k of
                                   1: begin
                                        if apemen_engineers_list > 0 then
                                             repairing_buildings = true;

                                        workers_list = GetHumansOutOfUnits(apemen_engineers_list);
                                   end;
                                   2: begin
                                        if engineers_list > 0 then
                                             repairing_buildings = true;

                                        workers_list = GetHumansOutOfUnits(engineers_list);
                                   end;
                                   3: begin
                                        if ai_crane[base] > 0 then
                                             repairing_buildings = true;

                                        if ai_crane[base] > 0 and crane_usable then
                                             begin
                                                  workers_list = [ai_crane[base]];
                                                  crane_usable = false;
                                             end
                                        else
                                             workers_list = [];
                                   end;
                              end;

                              if base = 1 then  //For anti-harassment the Russians persistently rebuild buildings even if the base is under attack.
                                   workers_list = workers_list diff ai_building_constructor[base];

                              repeat
                                   i = 1;
                                   while i <= buildings_list do
                                        begin
                                             if workers_list = 0 then
                                                  break;

                                             temp_unit = NearestUnitToUnit(workers_list,buildings_list[i]);
                                             ComRepairBuilding(temp_unit,buildings_list[i]);

                                             workers_list = workers_list diff temp_unit;
                                             engineers_list = engineers_list diff temp_unit;
                                             apemen_engineers_list = apemen_engineers_list diff temp_unit;

                                             i = i + 1;
                                        end;

                              until workers_list = 0;
                         end;
                    end;

                    if repairing_buildings and base <> 1 then  //For anti-harassment the Russians persistently rebuild buildings even if the base is under attack.
                         continue;


                    //For anti-harassment the Russians persistently rebuild buildings even if the base is under attack.
                    if not under_attack or base = 1 then
                         begin
                              //Reconstruct buildings if any has been destroyed.
                              //First check if a building is already being constructed - then build that one first.
                              //Upgrading buildings can be hard if the building is working or something, so check if the
                              //building is actually under construction (or being upgraded) - if not then reset the
                              //relevant variables.
                              if ai_building_under_construction[base] > 0 then
                                   if BuildingStatus(ai_building_under_construction[base]) = bs_build then
                                        begin
                                             temp_list_2 = GetHumansOutOfUnits(engineers_list ^ apemen_engineers_list);

                                             if crane_usable and not IsInArea(ai_building_under_construction[base],crane_not_allowed_to_repair_area) then
                                                  temp_list_2 = temp_list_2 ^ ai_crane[base];

                                             for i in temp_list_2 do
                                                  ComRepairBuilding(i,ai_building_under_construction[base]);

                                             continue;
                                        end
                                   else
                                        begin
                                             ComCancel(ai_building_under_construction[base]);  //To make sure upgrade of building is possible
                                             ai_building_under_construction = Replace(ai_building_under_construction,base,0);
                                        end;

                              //Dismantle buildings. This goes before constructing buildings because we may have to construct a building
                              //on the spot where a building to dismantle is now. If we are already constructing a building we wait, though.
                              //Only engineers can dismantle buildings (apemen engineers and cranes cannot).
                              if ai_dismantle_these_buildings[base] > 0 and engineers_list > 0 then
                                   begin
                                        is_dismantling = true;

                                        //Find someone to dismantle, preferably the building constructor
                                        if ai_building_constructor[base] in engineers_list then
                                             k = ai_building_constructor[base]
                                        else
                                             k = BestFromListByList(engineers_list, engineers_list);  //Make sure we take the same unit each time

                                        engineers_list = engineers_list diff k;

                                        case GetType(IsInUnit(k)) of
                                             unit_vehicle: ComExitVehicle(k);
                                             unit_building: ComExitBuilding(k);
                                             else
                                                  ComDismantle(k,ai_dismantle_these_buildings[base][1]);
                                        end;
                                   end
                              else
                                   is_dismantling = false;

                              if ( ai_all_buildings[base] - ai_excepted_buildings[base] < ai_buildings_locations[base] or ai_upcoming_building_data[base] > 0 or do_upgrade_armoury ) and not is_dismantling then
                                   begin
                                        //Decide which building to construct. We take the first building in the location list which is
                                        //arranged in prioritated order.
                                        if ai_upcoming_building_data[base] = 0 then
                                             begin
                                                  temp_list = [];
                                                  if do_upgrade_armoury then
                                                       begin
                                                            do_upgrade_armoury = false;

                                                            for i in ai_buildings_locations[base] do
                                                                 if GetBType(HexInfo(i[1],i[2])) = b_armoury then
                                                                      begin
                                                                           temp_list = i;
                                                                           break;
                                                                      end;
                                                       end;

                                                  if temp_list = 0 then
                                                  for i in ai_buildings_locations[base] do
                                                       if GetBType(HexInfo(i[1],i[2])) = -1 and not i in ai_cannot_rebuild_these_buildings[base] then  //no building on the spot
                                                            begin
                                                                 temp_list = i;
                                                                 break;
                                                            end;

                                                  if temp_list > 0 then  //Not necessarily the case (one of our buildings could have been captured)
                                                       begin
                                                            //If the building is a bunker then check if we have enough soldiers
                                                            //to occupy it. If not then build a turret instead.
                                                            if temp_list[4] = b_bunker and GetBaseNation(base) in [nation_american,nation_russian] then
                                                                 begin
                                                                      k = 0;

                                                                      for i in ai_buildings_locations[base] do
                                                                           if i[4] in [b_breastwork,b_bunker,b_armoury,b_barracks,b_fort] then
                                                                                k = k + 1;

                                                                      if k > ai_soldiers[base] then
                                                                           begin
                                                                                //Permanently change this to a turret. It would be nice if it would still be built as a
                                                                                //bunker if soldiers are added later but that's a rare case and adds unnecessary complexity.
                                                                                for i = 1 to ai_buildings_locations[base] do
                                                                                     if ai_buildings_locations[base][i] = temp_list then
                                                                                          begin
                                                                                               temp_list_2 = Replace(ai_buildings_locations[base][i],4,b_turret);
                                                                                               temp_list_2 = Replace(ai_buildings_locations[base],i,temp_list_2);
                                                                                               ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list_2);

                                                                                               break;
                                                                                          end;

                                                                                temp_list = Replace(temp_list,4,b_turret);
                                                                           end;
                                                                 end;

                                                            ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,temp_list);
                                                       end;
                                             end;

                                        if ai_upcoming_building_data[base] > 0 then
                                             begin
                                                  //Find the best engineer to construct the building
                                                  if ai_building_constructor[base] = 0 then
                                                       begin
                                                            temp_list_2 = UnitFilter(ai_engineers[base],[f_class,class_engineer]);

                                                            if temp_list_2 > 0 then
                                                                 begin
                                                                      temp_list = [];
                                                                      for i in temp_list_2 do
                                                                           temp_list = temp_list ^ GetSkill(i,skill_engineering);
                                                                      ai_building_constructor = Replace(ai_building_constructor,base, BestFromListByList(temp_list_2,temp_list) );
                                                                 end
                                                            else
                                                                 if ai_engineers[base] = 0 and ai_crane[base] > 0 and crane_usable then
                                                                      begin
                                                                           if InArea(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],crane_not_allowed_to_repair_area) then
                                                                                begin
                                                                                     //Can't build this building with a crane.
                                                                                     temp_list = ai_cannot_rebuild_these_buildings[base] ^ [ai_upcoming_building_data[base]];
                                                                                     ai_cannot_rebuild_these_buildings = Replace(ai_cannot_rebuild_these_buildings,base,temp_list);

                                                                                     ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);
                                                                                end
                                                                           else
                                                                                ai_building_constructor = Replace(ai_building_constructor,base,ai_crane[base]);
                                                                      end;
                                                       end;

                                                  if ai_building_constructor[base] > 0 and ( ai_building_constructor[base] in engineers_list or ( ai_building_constructor[base] = ai_crane[base] and crane_usable ) ) then
                                                       begin
                                                            engineers_list = engineers_list diff ai_building_constructor[base];

                                                            if ai_building_constructor[base] = ai_crane[base] then
                                                                 crane_usable = false;

                                                            //Move vehicles away from the building site.
                                                            away_dist = 7; //Max distance needed for a workshop
                                                            if ai_vehicle_being_moved[base] = 0 then
                                                                 begin
                                                                      temp_list = UnitFilter(ai_vehicles_defend[base] ^ ai_taufield_vehicles[base] ^ ai_implosion_vehicles[base] ^ ai_control_tower_vehicles[base] ^ ai_crane[base] ^ ai_cargo_bay[base],
                                                                                             [[f_control,control_manual],[f_empty],[f_distxy,ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],away_dist]]);  //Don't consider "ai_vehicles_attack" - they will soon move by themselves
                                                                      if temp_list > 0 then
                                                                           begin
                                                                                if ai_building_constructor[base] = ai_crane[base] then
                                                                                     begin
                                                                                          //Can't build this building with a crane.
                                                                                          temp_list = ai_cannot_rebuild_these_buildings[base] ^ [ai_upcoming_building_data[base]];
                                                                                          ai_cannot_rebuild_these_buildings = Replace(ai_cannot_rebuild_these_buildings,base,temp_list);

                                                                                          ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);
                                                                                          ai_building_constructor = Replace(ai_building_constructor,base,0);
                                                                                     end
                                                                                else
                                                                                     begin
                                                                                          ai_vehicle_being_moved = Replace(ai_vehicle_being_moved,base,temp_list[1]);
                                                                                          temp_list_2 = ai_vehicles_having_been_moved[base] ^ temp_list[1];
                                                                                          ai_vehicles_having_been_moved = Replace(ai_vehicles_having_been_moved,base,temp_list_2);
                                                                                     end;
                                                                           end
                                                                      else
                                                                           //Build/upgrade the building
                                                                           case GetType(IsInUnit(ai_building_constructor[base])) of
                                                                                unit_building: ComExitBuilding(ai_building_constructor[base]);
                                                                                unit_vehicle: ComExitVehicle(ai_building_constructor[base]);
                                                                                else
                                                                                case GetBType(HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2])) of
                                                                                     -1: begin
                                                                                          case ai_upcoming_building_data[base][4] of
                                                                                               b_warehouse: i = b_depot;
                                                                                               b_factory: i = b_workshop;
                                                                                               b_lab_half,b_lab_full: i = b_lab;
                                                                                               b_barracks: i = b_armoury;
                                                                                               else i = ai_upcoming_building_data[base][4];
                                                                                          end;

                                                                                          //ComBuild(ai_building_constructor[base],i,ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],ai_upcoming_building_data[base][3]);
                                                                                          //ComBuild doesn't work with cranes even though their task list looks the same after having been given the order.
                                                                                          //The task list order looks like this:
                                                                                          {
                                                                                          SetTaskList(crane,[['B',x,y,0,value_from_below,dir,0]]);
                                                                                          b_depot (0) = (ru) 64, (am) 1, (ar) 34
                                                                                          b_workshop (2) = (ru) 68, (am) 5, (ar) 38
                                                                                          b_armoury (4) = (ru) 66, (am) 3, (ar) 36
                                                                                          b_lab (6) = (ru) 77, (am) 17, (ar) 48
                                                                                          b_oil_power (26) = (ru) 85, (am) 25, (ar) 56
                                                                                          b_solar_power (27) = (am) 26, (ar) 57
                                                                                          b_siberite_power (28) = (ru) 86, (am) 27, (ar) 58
                                                                                          b_oil_mine (29) = (ru) 87, (am) 28, (ar) 59
                                                                                          b_siberite_mine (30) = (ru) 88, (am) 29, (ar) 60
                                                                                          b_breastwork (31) = (ru) 89, (am) 30, (ar) 61
                                                                                          b_bunker (32) = (ru) 90, (am) 31, (ar) 62
                                                                                          b_turret (33) = (ru) 91, (am) 32
                                                                                          b_teleport (34) = (ru) 92
                                                                                          b_control_tower (36) = (am) 94
                                                                                          b_ext_track (16) = (ru) 70, (am) 7, (ar) 40
                                                                                          b_ext_gun (17) = (ru) 71, (am) 8, (ar) 41
                                                                                          b_ext_rocket (18) = (ru) 72, (am) 9, (ar) 42
                                                                                          b_ext_noncombat (19) = (ru) 73, (am) 10
                                                                                          b_ext_radar (20) = (am) 11, (ar) 44
                                                                                          b_ext_siberium (21) = (ru) 75, (am) 12, (ar) 45
                                                                                          b_ext_stitch (23) = (ar) 43
                                                                                          b_ext_computer (24) = (ru) 76, (am) 15
                                                                                          b_ext_laser (25) = (am) 16
                                                                                          }
                                                                                          case i of
                                                                                               b_depot: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 64;
                                                                                                         nation_american: b_value = 1;
                                                                                                         nation_arabian: b_value = 34;
                                                                                                    end;
                                                                                               end;
                                                                                               b_workshop: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 68;
                                                                                                         nation_american: b_value = 5;
                                                                                                         nation_arabian: b_value = 38;
                                                                                                    end;
                                                                                               end;
                                                                                               b_armoury: begin             
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 66;
                                                                                                         nation_american: b_value = 3;
                                                                                                         nation_arabian: b_value = 36;
                                                                                                    end;
                                                                                               end;
                                                                                               b_lab: begin            
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 77;
                                                                                                         nation_american: b_value = 17;
                                                                                                         nation_arabian: b_value = 48;
                                                                                                    end;
                                                                                               end;
                                                                                               b_oil_power: begin          
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 85;
                                                                                                         nation_american: b_value = 25;
                                                                                                         nation_arabian: b_value = 56;
                                                                                                    end;
                                                                                               end;
                                                                                               b_solar_power: begin         
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 26;
                                                                                                         nation_arabian: b_value = 57;
                                                                                                    end;
                                                                                               end;
                                                                                               b_siberite_power: begin       
                                                                                                   case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 86;
                                                                                                         nation_american: b_value = 27;
                                                                                                         nation_arabian: b_value = 58;
                                                                                                    end;
                                                                                               end;
                                                                                               b_oil_mine: begin           
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 87;
                                                                                                         nation_american: b_value = 28;
                                                                                                         nation_arabian: b_value = 59;
                                                                                                    end;
                                                                                               end;
                                                                                               b_siberite_mine: begin      
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 88;
                                                                                                         nation_american: b_value = 29;
                                                                                                         nation_arabian: b_value = 60;
                                                                                                    end;
                                                                                               end;
                                                                                               b_breastwork: begin         
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 89;
                                                                                                         nation_american: b_value = 30;
                                                                                                         nation_arabian: b_value = 61;
                                                                                                    end;
                                                                                               end;
                                                                                               b_bunker: begin       
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 90;
                                                                                                         nation_american: b_value = 31;
                                                                                                         nation_arabian: b_value = 62;
                                                                                                    end;
                                                                                               end;
                                                                                               b_turret: begin       
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 91;
                                                                                                         nation_american: b_value = 32;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_teleport: begin      
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 92;
                                                                                                         nation_american: b_value = -7;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_control_tower: begin   
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 94;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_track: begin     
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 70;
                                                                                                         nation_american: b_value = 7;
                                                                                                         nation_arabian: b_value = 40;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_gun: begin  
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 71;
                                                                                                         nation_american: b_value = 8;
                                                                                                         nation_arabian: b_value = 41;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_rocket: begin       
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 72;
                                                                                                         nation_american: b_value = 9;
                                                                                                         nation_arabian: b_value = 42;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_noncombat: begin      
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 73;
                                                                                                         nation_american: b_value = 10;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_radar: begin        
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 11;
                                                                                                         nation_arabian: b_value = 44;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_siberium: begin     
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 75;
                                                                                                         nation_american: b_value = 12;
                                                                                                         nation_arabian: b_value = 45;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_stitch: begin  
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = -7;
                                                                                                         nation_arabian: b_value = 43;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_computer: begin             
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 76;
                                                                                                         nation_american: b_value = 15;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_laser: begin          
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 16;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               else
                                                                                                    b_value = -42;
                                                                                          end;

                                                                                          SetTaskList(ai_building_constructor[base],[['B',ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],0,b_value,ai_upcoming_building_data[base][3],0]]);
                                                                                     end;
                                                                                     b_depot: begin
                                                                                          ComUpgrade(ai_depot[base]);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,ai_depot[base]);
                                                                                     end;
                                                                                     b_workshop: begin
                                                                                          temp_unit = HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]);
                                                                                          ComUpgrade(temp_unit);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,temp_unit);
                                                                                     end;
                                                                                     b_lab,b_lab_half: begin
                                                                                          temp_unit = HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]);

                                                                                          if ai_upcoming_building_data[base][5] <> b_lab_basic and not ai_upcoming_building_data[base][5] in [GetLabKind(temp_unit,1),GetLabKind(temp_unit,2)] then
                                                                                               ComUpgradeLab(temp_unit,ai_upcoming_building_data[base][5])
                                                                                          else
                                                                                               if ai_upcoming_building_data[base][6] <> b_lab_basic then
                                                                                                    ComUpgradeLab(temp_unit,ai_upcoming_building_data[base][6])
                                                                                               else  //should never happen
                                                                                                    begin
                                                                                                         ai_building_constructor = Replace(ai_building_constructor,base,0);
                                                                                                         ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);
                                                                                                    end;

                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,temp_unit);
                                                                                     end;
                                                                                     b_armoury: begin
                                                                                          temp_unit = HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]);
                                                                                          ComUpgrade(temp_unit);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,temp_unit);
                                                                                     end;
                                                                                end;
                                                                           end;
                                                                 end
                                                            else
                                                                 if UnitsInside(ai_vehicle_being_moved[base]) > 0 then
                                                                      begin
                                                                           if GetDistUnitXY(ai_vehicle_being_moved[base],ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]) <= away_dist then
                                                                                AI_GetAwayFromXY(ai_vehicle_being_moved[base],ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],away_dist+2,false)
                                                                           else
                                                                                ai_vehicle_being_moved = Replace(ai_vehicle_being_moved,base,0);
                                                                      end
                                                                 else
                                                                      case GetType(IsInUnit(ai_building_constructor[base])) of
                                                                           unit_building: ComExitBuilding(ai_building_constructor[base]);
                                                                           unit_vehicle: ComExitVehicle(ai_building_constructor[base]);
                                                                           else
                                                                                ComEnterUnit(ai_building_constructor[base],ai_vehicle_being_moved[base]);
                                                                      end;
                                                       end;
                                             end;
                                   end;


                              //Gather crates in the vicinity of the base (engineers).
                              //Everyone go after the same bunch of crates.
                              if (engineers_list ^ apemen_engineers_list) > 0 and ai_depot[base] > 0 and not under_attack then
                                   begin
                                        temp_list = GetListOfCratesInArea(GetBaseArea(base));
                                        if temp_list > 0 then
                                             begin
                                                  ComCollect(GetHumansOutOfUnits(engineers_list ^ apemen_engineers_list),temp_list[1],temp_list[2]);
                                                  engineers_list = [];
                                                  apemen_engineers_list = [];
                                             end;
                                   end;
                         end;


                    //Return to and stay inside the depot (if possible)
                    //!!!!!!!!!!!!!!!!
                    //CAPACITY 5 BECAUSE OF FARMER
                    //!!!!!!!!!!!!!!!!                
                    DistributeHumansToBuildings(base,engineers_list ^ apemen_engineers_list, UnitFilter(ai_depot[base],[[f_ok],[f_not,[f_constructed]]]),
                         class_engineer,[6,6,5][base],false,false);

                    if crane_usable then
                         if not IsInArea(ai_crane[base],GetBaseArea(base)) or IsInArea(ai_crane[base],ru_no_engineer_repair_area) then  //Blocks attacking vehicles if is in ru_no_engineer_repair_area.
                              ComMoveXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2])
                         else
                              if GetLives(ai_crane[base]) < 1000 and not under_attack then
                                   ai_crane_is_being_repaired = Replace(ai_crane_is_being_repaired,base,true);
               end;

          until false;
     end;
On BuildingStarted(building,builder) do
     var side, temp_list, base, i;
     begin
          side = GetSide(building);
          if side = you then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          ai_building_constructor = Replace(ai_building_constructor,base,0);
          ai_vehicles_having_been_moved = Replace(ai_vehicles_having_been_moved,base,[]);

          //ONLY 1 building is under construction at a time!
          ai_building_under_construction = Replace(ai_building_under_construction,base,building);
     end;
On BuildingComplete(building) do
     var side, temp_list, temp_unit, base, i, hex;
     begin
          if IsInArea(building,Farmer_base) and GetBType(building) = b_depot then
               if FilterAllUnits([[f_inarea,Farmer_base],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]],[f_not,[f_constructed]]]) = 1 then
                    SetBName(building,'campbar');

          side = GetSide(building);
          if side = you then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          hex = [GetX(building),GetY(building)];
          if hex in [ai_fact_extension_replace_location[base]] then
               begin
                    for i in ai_facts[base] do
                         if ai_facts_with_ext_rebuild_map >= i then
                              begin
                                   temp_list = ai_facts_with_ext_rebuild_map[i] diff [hex];
                                   ai_facts_with_ext_rebuild_map = Replace(ai_facts_with_ext_rebuild_map,i,temp_list);
                              end;
               end;

          BuildUpgradeCommon(base,building);

          temp_list = ai_all_buildings[base] ^ building;
          ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

          UpdateBuildingBasicVariables(base,building,true);
     end;
On UpgradeComplete(building) do
     var side, temp_list, base;
     begin
          side = GetSide(building);
          if side = you then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          BuildUpgradeCommon(base,building);
     end;
Function BuildUpgradeCommon(base,building);
     begin
          //Some buildings require upgrade - e.g. workshop -> factory
          if GetBType(building) = ai_upcoming_building_data[base][4] then
               ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);

          ai_building_under_construction = Replace(ai_building_under_construction,base,0);
     end;
On BuildingCaptured(captured_building,building_former_side,capturing_unit) do
     var temp_list, base;
     begin
          AdjustComputerDepotResources(captured_building);

          base = FindBase(captured_building);

          if base = 0 then
               exit;

          if building_former_side = GetBaseSide(base) then
               begin
                    if captured_building in ai_all_buildings[base] then
                         begin
                              //Someone captured one of our buildings!
                              RemoveBuildingFromVariables(base,captured_building);

                              temp_list = ai_captured_buildings[base] ^ captured_building;
                              ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
                         end;
               end
          else
               begin
                    if GetSide(captured_building) = GetBaseSide(base) then
                         begin
                              //Ha! We captured it back again!
                              temp_list = ai_all_buildings[base] ^ captured_building;
                              ai_all_buildings = Replace(ai_all_buildings,base,temp_list);
                             
                              UpdateBuildingBasicVariables(base,captured_building,true);

                              temp_list = ai_captured_buildings[base] diff captured_building;
                              ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
                         end;
               end;
     end;
Function AdjustComputerDepotResources(building);
     begin
          if building = ai_depot[2] then
               begin
                    SetResourceType(GetBase(building),mat_cans,[90,60,30][difficulty] + Rand(0,2)*10);
                    SetResourceType(GetBase(building),mat_oil,0);
                    SetResourceType(GetBase(building),mat_siberit,0);
               end;

          if building in [ai_depot[1],ai_depot[3]] then
               begin
                    SetResourceType(GetBase(building),mat_cans,[200,150,100][difficulty] + Rand(0,3)*10);
                    SetResourceType(GetBase(building),mat_oil,[300,250,200][difficulty] + Rand(0,100));
                    SetResourceType(GetBase(building),mat_siberit,[100,70,40][difficulty] + Rand(0,30));
               end;
     end;


//Function which orders human units inside other units to exit them. Returns a list with the units which weren't inside other units.
Export Function GetHumansOutOfUnits(un_list);
     var i;
     begin
          result = [];
          for i in un_list do
               case GetType(IsInUnit(i)) of
                    unit_building: ComExitBuilding(i);
                    unit_vehicle: ComExitVehicle(i);
                    else result = result ^ i;
               end;
     end;

//Function which tells if a base is under attack.
//attack_side - side which is attacking def_side's base. -1 if any enemy side of the base's side.
Export Function BaseUnderAttack(base,attack_side);
     var area, i, val, def_side, temp_list;
     begin
          result = false;

          def_side = GetBaseSide(base);
          area = GetBaseArea(base);

          if attack_side = def_side then
               exit;

          if attack_side = -1 then
               begin
                    if FilterAllUnits([[f_enemy,def_side],[f_inarea,area]]) > 0 then
                         begin
                              result = true;
                              exit;
                         end;

                    val = true;
                    for i in ai_contact_time[def_side] do
                         if i < 0$10 then
                              begin
                                   val = false;
                                   break;
                              end;

                    if ContactTime(def_side) >= 0$10 and val then
                         exit;

                    //if ListFilterNearArea( FilterAllUnits([f_enemy,def_side]) ,area) = 0 then
                    //     exit;
                    //The above was the former way of checking if enemy units was nearby but this implied looping through
                    //a lot of units on the map (in function ListFilterNearArea). This caused laggs. Filter-functions like
                    //FilterAllUnits are much much faster than loops with function calls. All we need is to assume that no
                    //unit inside another base's area will ever attack another base which seems reasonable.
                    temp_list = [];
                    for i in (ai_bases diff base) do
                         temp_list = Insert(temp_list,1,[f_not,[f_inarea,GetBaseArea(i)]]);

                    temp_list = FilterAllUnits([[f_enemy,def_side],[f_not,[f_type,unit_building]]] ^ temp_list);
                    if not AnyNearBaseArea(temp_list,base) then
                         exit;
               end
          else
               begin
                    if FilterAllUnits([[f_side,attack_side],[f_inarea,area]]) > 0 then
                         begin
                              result = true;
                              exit;
                         end;

                    if ContactTime([def_side,attack_side]) >= 0$10 and ai_contact_time[def_side][attack_side] >= 0$10 then
                         exit;

                    //if ListFilterNearArea( FilterAllUnits([f_side,attack_side]) ,area) = 0 then
                    //     exit;
                    temp_list = [];
                    for i in (ai_bases diff base) do
                         temp_list = Insert(temp_list,1,[f_not,[f_inarea,GetBaseArea(i)]]);

                    temp_list = FilterAllUnits([[f_side,attack_side],[f_not,[f_type,unit_building]]] ^ temp_list);
                    if not AnyNearBaseArea(temp_list,base) then
                         exit;
               end;

          result = true;
     end;
Export Function ListFilterNearArea(list,area);
     var i;
     begin
          result = [];

          for i in list do
               if GetDistUnitArea(i,area) <= ai_near_base_dist then
                    result = result ^ i;
     end;
Function AnyNearBaseArea(list,base);
     var i, area;
     begin
          result = false;
          area = GetBaseArea(base);

          for i in list do
               if GetDistUnitArea(i,area) <= ai_near_base_dist then
                    begin
                         result = true;
                         break;
                    end;
     end;

On Command(com) do
     var i, temp_list, hex_list, un, k, target_hex;
     begin
          OnCommand_CrateDropDetection(com);

          if com = 124 then  //attack ground
               begin
                    //Find one of the unit which were given the command
                    for i in FilterAllUnits([f_side,you]) do
                         if IsSelected(i) and HasTask(i) then
                              begin
                                   target_hex = [];
                                   for k in GetTaskList(i) do
                                        if k[1] = '|' then  //Attack ground is ['|',x,y,0,0,0,0]
                                             begin
                                                  target_hex = [k[2],k[3]];
                                                  break;
                                             end;

                                   if target_hex > 0 then
                                             begin
                                                  hex_list = target_hex;

                                                  //Units within distance 1 of the hex will take damage. Find all units within that distance.
                                                  temp_list = [];
                                                  for k = 0 to 5 do
                                                       temp_list = Insert(temp_list,1,[ShiftX(hex_list[1],k,1),ShiftY(hex_list[2],k,1)]);

                                                  hex_list = [hex_list] ^ temp_list;

                                                  temp_list = [];
                                                  for k in hex_list do
                                                       begin
                                                            un = HexInfo(k[1],k[2]);

                                                            if un > 0 and not un in temp_list then
                                                                 begin
                                                                      ai_attack_ground_info_initial = Insert(ai_attack_ground_info_initial,1,[i,un,GetSide(un),target_hex[1],target_hex[2]]);
                                                                      temp_list = temp_list ^ un;
                                                                 end;
                                                       end;
                                             end;
                              end;
               end;
     end;
//Every updating "ai_contact_time", "ai_attack_ground_info_initial" and "ai_attack_ground_info_sustain".
Every 0$1+0$0.1 do
     var a, b, temp_list, temp_list_2, yup, i, t;
     begin
          repeat
          wait(0$0.5);

          //Check if some of the units, that were going to attack ground, gave up before
          //doing so.
          i = 1;
          while i <= ai_attack_ground_info_initial do
               begin
                    yup = false;
                    for t in GetTaskList(ai_attack_ground_info_initial[i][1]) do
                         if t[1] = '|' then  //Attack ground is ['|',x,y,0,0,0,0]
                              if t[2] = ai_attack_ground_info_initial[i][4] and t[3] = ai_attack_ground_info_initial[i][5] then
                                   begin
                                        yup = true;
                                        break;
                                   end;

                    if not yup then
                         begin
                              ai_attack_ground_info_initial = Delete(ai_attack_ground_info_initial,i);
                              continue;
                         end;

                    i = i + 1;
               end;

          //Check if some of the units attacking ground has stopped.
          i = 1;
          while i <= ai_attack_ground_info_sustain do
               begin
                    yup = false;
                    for t in GetTaskList(ai_attack_ground_info_sustain[i][1]) do
                         if t[1] = '|' then  //Attack ground is ['|',x,y,0,0,0,0]
                              if t[2] = ai_attack_ground_info_sustain[i][4] and t[3] = ai_attack_ground_info_sustain[i][5] then
                                   begin
                                        yup = true;
                                        break;
                                   end;

                    if not yup then
                         begin
                              ai_attack_ground_info_sustain = Delete(ai_attack_ground_info_sustain,i);
                              continue;
                         end;

                    i = i + 1;
               end;

          //Update all times
          temp_list = ai_contact_time;
          for a = 1 to temp_list do
               for b = 1 to temp_list[a] do
                    if temp_list[a][b] < 100000 then
                         begin
                              temp_list_2 = Replace(ai_contact_time[a],b, temp_list[a][b] + 0$0.5 );
                              ai_contact_time = Replace(ai_contact_time,a,temp_list_2);
                         end;

          //New attacks?
          //Function SideShoot and UnitShoot does detect damage from attacking ground.
          for a in ai_attack_ground_info_initial do
               begin
                         if IsDead(a[2]) or UnitShoot(a[2]) = a[1] then
                              begin
                                   temp_list = Replace(ai_contact_time[you],a[3],0);
                                   ai_contact_time = Replace(ai_contact_time,you,temp_list);

                                   temp_list = Replace(ai_contact_time[a[3]],you,0);
                                   ai_contact_time = Replace(ai_contact_time,a[3],temp_list);

                                   ai_attack_ground_info_initial = ai_attack_ground_info_initial diff [a];
                                   ai_attack_ground_info_sustain = Insert(ai_attack_ground_info_sustain,1,a);
                              end;
               end;

          //Sustained attacks?
          for a in ai_attack_ground_info_sustain do
               begin
                    temp_list = Replace(ai_contact_time[you],a[3],0);
                    ai_contact_time = Replace(ai_contact_time,you,temp_list);

                    temp_list = Replace(ai_contact_time[a[3]],you,0);
                    ai_contact_time = Replace(ai_contact_time,a[3],temp_list);
               end;

          until false;
     end;


//Mechanics (defending, i.e. in the base)
//Priorities if base is under attack (descending):
//- If a mechanic is hurt, pull him back for healing.
//- Repair war vehicles defending the base.
//- Stay in factory.
//Priorites if not under attack (decending):
//- If a mechanic is hurt, pull him back for healing.
//- Refuel vehicles
//- Repair damaged war vehicles within the base
//- Stay in factory (and possibly construct a vehicle or weapon)
//When it comes to American remote control we pick some mechanics to control
//specific vehicles. Their priorities are (descending):
//- If a mechanic is hurt, pull him back for healing.
//- Repair war vehicles defending the base (if all vehicles you control are burning or dead)
//- Stay in control tower and link to vehicles.
//Priorites if not under attack (decending):
//- If a mechanic is hurt, pull him back for healing.
//- Repair damaged war vehicles within the base (if all remote vehicles are inside the base)
//- Stay in control tower and link to vehicles.
Every 0$1+0$0.4 do
     var side, i, mechanics_list, temp_list, temp_list_3, temp_unit, vehicles_list, allowed_to_repair_vehicles;
     var under_attack, free_parking_spots, k, base, area, temp_list_2, remote_mechanics, parked_vehicles, n, a;
     var temp_list_4, temp_list_5, num_control_stations, already_inside_mecs;
     var vehicles_to_consider, vehicles_allowed_to_park, human_pullback_hex_max_dist, vehicles_to_park;
     var vehicles_drivers, remote_driver_vehicles;
     begin
          //Index is vehicle id, value is driver id.
          //For use to ensure the driver first chosen to drive the
          //vehicle goes for it (doesn't change to another driver).
          vehicles_drivers = [];

          remote_driver_vehicles = [[],[],[]];  //For remote control. [driver_id,[veh1,veh2,veh3]]

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    side = GetBaseSide(base);
                    area = GetBaseArea(base);
                    under_attack = BaseUnderAttack(base,-1);  //Base under attack
                    

                    //Update vehicles drivers so vehicles with a driver no longer has that driver assigned
                    //so a possible new driver can be assigned next time.
                    for i in ai_vehicles_defend[base] ^ ai_taufield_vehicles[base] ^ ai_implosion_vehicles[base] do
                         if vehicles_drivers >= i then
                              if vehicles_drivers[i] > 0 then
                                   if IsInUnit(vehicles_drivers[i]) = i or IsDead(vehicles_drivers[i]) then
                                        vehicles_drivers = Replace(vehicles_drivers,i,0);


                    //Find a driver for the crane if necessary.
                    if ai_crane[base] > 0 and GetControl(ai_crane[base]) = control_manual and ai_crane_driver[base] = 0 and ai_mechanics_defend[base] > 0 then
                         begin
                              ai_crane_driver = Replace(ai_crane_driver,base, FindBestCraneDriver(base) );

                              for i = 1 to remote_driver_vehicles[base]+0 do
                                   if remote_driver_vehicles[base][i][1] = ai_crane_driver[base] then
                                        begin
                                             temp_list = Delete(remote_driver_vehicles[base],i);
                                             remote_driver_vehicles = Replace(remote_driver_vehicles,base,temp_list);

                                             break;
                                        end;
                         end;

                    //Clear crane driver from vehicles drivers
                    {if ai_crane_driver[base] > 0 and ai_crane_driver[base] in vehicles_drivers then
                         begin
                              for i = 1 to vehicles_drivers do
                                   if vehicles_drivers[i] = ai_crane_driver[base] then
                                        begin
                                             vehicles_drivers = Replace(vehicles_drivers,i,0);
                                             break;
                                        end;
                         end; -> if not crane driver is in mechanics_list then another driver will be found, cf. function "FindDriverHelper"}


                    mechanics_list = UnitFilter(ai_mechanics_defend[base] diff (ai_heal_these_humans[base] ^ ai_crane_driver[base]),[f_not,[f_driving]]);
                    if ai_crane_driver[base] > 0 and not IsOk(ai_crane[base]) then
                         mechanics_list = mechanics_list ^ ai_crane_driver[base];

                    remote_mechanics = [];


                    //Identify mechanics who need healing
                    temp_list = ai_heal_these_humans[base];
                    i = 1;
                    while i <= mechanics_list do
                         begin
                              if GetLives(mechanics_list[i]) <= 900 then
                                   begin
                                        temp_list = temp_list ^ mechanics_list[i];
                                        mechanics_list = Delete(mechanics_list,i);
                                        continue;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Remote control
                    if ai_control_tower[base] > 0 or ai_control_tower_vehicles[base] > 0 then
                         begin
                              //Sort away dead vehicles and vehicles controlled by dead mechanics.
                              //Demote remote mechanics if there aren't enough control stations for everyone.
                              //Find vehicles currently connected to a mechanic.
                              temp_list = remote_driver_vehicles[base];
                              vehicles_list = [];

                              i = 1;
                              while i <= temp_list do
                                   begin
                                        if IsDead(temp_list[i][1]) then
                                             begin
                                                  temp_list = Delete(temp_list,i);
                                                  continue;
                                             end
                                        else
                                             begin
                                                  temp_list_3 = temp_list[i][2];

                                                  k = 1;
                                                  while k <= temp_list_3 do
                                                       begin
                                                            if IsDead(temp_list_3[k]) then
                                                                 begin
                                                                      temp_list_3 = Delete(temp_list_3,k);
                                                                      continue;
                                                                 end;

                                                            k = k + 1;
                                                       end;

                                                  if temp_list_3 > 0 then
                                                       begin
                                                            temp_list_2 = Replace(temp_list[i],2,temp_list_3);
                                                            temp_list = Replace(temp_list,i,temp_list_2);
                                                       end
                                                  else
                                                       begin
                                                            temp_list = Delete(temp_list,i);
                                                            continue;
                                                       end;
                                             end;

                                        vehicles_list = vehicles_list ^ temp_list[i][2];

                                        i = i + 1;
                                   end;

                              num_control_stations = ai_control_tower_vehicles[base] + (ai_control_tower[base] > 0)*3;
                              while temp_list > num_control_stations do
                                   begin
                                        vehicles_list = vehicles_list diff temp_list[temp_list+0][2];
                                        temp_list = Delete(temp_list,temp_list+0);
                                   end;

                              remote_driver_vehicles = Replace(remote_driver_vehicles,base,temp_list);

                              //Connect remote vehicles to mechanics.
                              temp_list = UnitFilter((ai_vehicles_defend[base] ^ (ai_cargo_bay[base] diff 0) ^ (ai_crane[base] diff 0) ^ ai_exported_units[base] ^ ai_units_to_export[base] ^
                                                      ai_vehicles_attack[base] ^ ai_taufield_vehicles[base] ^ ai_implosion_vehicles[base])
                                                      diff vehicles_list,[f_control,control_remote]);
                              if temp_list > 0 then
                                   begin
                                        //By omitting some mechanics here (e.g. those being healed) we may end up assigning more vehicles to a single
                                        //mechanic than we should. And those will not be reassigned. It's rare, though, and not so simple to fix
                                        //so let's just omit those lines of code.
                                        //Always leave at least one mechanic to work in the factory.
                                        temp_list_3 = mechanics_list;
                                        for i in remote_driver_vehicles[base] do
                                             temp_list_3 = temp_list_3 diff i[1];

                                        if temp_list_3 > 0 then
                                             temp_list_3 = temp_list_3 diff FindMinSkill(temp_list_3,skill_mechanical);

                                        i = 1;
                                        while i <= temp_list do    
                                             begin
                                                            //Find a suitable mechanic already controlling other vehicles.
                                                            //We want two vehicles per mechanic (it can be mathematically proven that this is the
                                                            //best number to pick given that no vehicles block another vehicle so it can't attack during a fight).
                                                            //If all have 2 or more vehicles then take the one controlling the least vehicles.
                                                            a = 1;
                                                            while a <= remote_driver_vehicles[base] do
                                                                 begin
                                                                      if remote_driver_vehicles[base][a][2] < 2 and GetSkill(remote_driver_vehicles[base][a][1],skill_mechanical) >= 2 then
                                                                           break;

                                                                      a = a + 1;
                                                                 end;

                                                            if a > remote_driver_vehicles[base] then
                                                                 begin
                                                                      if remote_driver_vehicles[base] >= num_control_stations then
                                                                           begin
                                                                                //Not enough control stations for another remote mechanic.
                                                                                temp_list_3 = [];
                                                                           end;

                                                                      if temp_list_3 > 0 then
                                                                           begin
                                                                                //Assign a new remote mechanic.
                                                                                //Take the best mechanic
                                                                                temp_unit = FindMaxSkill(temp_list_3,skill_mechanical);
                                                                                temp_list_3 = temp_list_3 diff temp_unit;
                                                                                
                                                                                temp_list_2 = remote_driver_vehicles[base] ^ [[temp_unit,[temp_list[i]]]];
                                                                                remote_driver_vehicles = Replace(remote_driver_vehicles,base,temp_list_2);

                                                                                i = i + 1;
                                                                                continue;
                                                                           end;

                                                                      //Sort away drivers who cannot control more vehicles.
                                                                      temp_list_4 = [];
                                                                      for a in remote_driver_vehicles[base] do
                                                                           if GetSkill(a[1],skill_mechanical) > a[2] then
                                                                                temp_list_4 = temp_list_4 ^ [a];

                                                                      if temp_list_4 = 0 then
                                                                           break;

                                                                      temp_list_2 = [];
                                                                      for a in temp_list_4 do
                                                                           temp_list_2 = temp_list_2 ^ (a[2]+0);

                                                                      temp_list_2 = WorstFromListByList(temp_list_4,temp_list_2);

                                                                      for a = 1 to remote_driver_vehicles[base] do
                                                                           if remote_driver_vehicles[base][a][1] = temp_list_2[1] then
                                                                                break;
                                                                 end;

                                                            temp_list_2 = remote_driver_vehicles[base][a][2] ^ temp_list[i];
                                                            temp_list_2 = Replace(remote_driver_vehicles[base][a],2,temp_list_2);
                                                            temp_list_2 = Replace(remote_driver_vehicles[base],a,temp_list_2);
                                                            remote_driver_vehicles = Replace(remote_driver_vehicles,base,temp_list_2);

                                                            i = i + 1;
                                             end;
                                   end;

                              //Find all remote mechanics
                              for i in remote_driver_vehicles[base] do
                                   remote_mechanics = remote_mechanics ^ i[1];

                              mechanics_list = mechanics_list diff remote_mechanics;
                              remote_mechanics = remote_mechanics diff ai_heal_these_humans[base];

                              //There must always be at least one mechanic to work in the factory.
                              if mechanics_list = 0 and remote_driver_vehicles[base] > 0 then
                                   begin
                                        //Release the mechanic controlling the least vehicles.
                                        n = 0;
                                        a = 9999;
                                        for i = 1 to (remote_driver_vehicles[base]+0) do
                                             begin
                                                  if remote_driver_vehicles[base][i][2]+0 < a then
                                                       begin
                                                            a = remote_driver_vehicles[base][i][2]+0;
                                                            n = i;
                                                       end;
                                             end;

                                        mechanics_list = mechanics_list ^ remote_driver_vehicles[base][n][1];
                                        remote_mechanics = remote_mechanics diff remote_driver_vehicles[base][n][1];
                                        temp_list_2 = Delete(remote_driver_vehicles[base],n);
                                        remote_driver_vehicles = Replace(remote_driver_vehicles,base,temp_list_2);
                                   end;
                         end
                    else
                         begin
                              remote_driver_vehicles = Replace(remote_driver_vehicles,base,[]);
                         end;


                    //Find vehicles which no longer need to be repaired (fully repaired).
                    temp_list = [];
                    for i in ai_vehicles_being_repaired[base] do
                         if GetLives(i) < 1000 then
                              temp_list = temp_list ^ i;
                    ai_vehicles_being_repaired = Replace(ai_vehicles_being_repaired,base,temp_list);


                    //Find vehicles which do no longer need to retreat (they have been fully repaired)
                    temp_list = [];
                    for i in ai_retreating_vehicles_defend[base] do//diff ai_vehicles_being_repaired[base] do  -> Don't want them to move to the enemy with a team of mechanics following it to repair it
                         if GetLives(i) < 1000 then
                              temp_list = temp_list ^ i;
                    ai_retreating_vehicles_defend = Replace(ai_retreating_vehicles_defend,base,temp_list);


                    //Identify defending vehicles which need to retreat.
                    //Make vehicles retreat if they exceed a certain threshold of damage. Works for any amount of health
                    //(except full health) but is only used when the vehicles are burning. Defend the base at all costs!
                    temp_list = ai_retreating_vehicles_defend[base];
                    for i in ai_vehicles_defend[base] diff ai_retreating_vehicles_defend[base] do// ^ ai_vehicles_being_repaired[base]) do
                         if GetLives(i) <= 250 then
                              temp_list = temp_list ^ i;
                    ai_retreating_vehicles_defend = Replace(ai_retreating_vehicles_defend,base,temp_list);


                    //Find vehicles which no longer need to refuel.
                    //If a vehicles was scheduled to refuel but didn't make it before the base was attacked
                    //and was added to retreating vehicles during the attack it must be removed from
                    //refueling vehicles.
                    //Clear pending refuels if we are under attack.
                    if not under_attack then
                         begin
                              temp_list = [];
                              for i in ai_refuel_vehicles_list[base] diff (ai_retreating_vehicles_defend[base] ^ ai_vehicles_being_repaired[base] ^ ai_vehicle_being_moved[base] ^ ai_vehicles_having_been_moved[base]) do
                                   if GetFuel(i) < 95 then
                                        temp_list = temp_list ^ i;
                              ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);
                         end
                    else
                         ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,[]);


                    //The following part of the code only has to consider these vehicles. Other vehicles are handled elsewhere.
                    vehicles_to_consider = ai_vehicles_defend[base] ^ ai_control_tower_vehicles[base] ^ ai_taufield_vehicles[base] ^ ai_implosion_vehicles[base];

                    if under_attack then
                         begin
                              //Find the vehicles which need a driver and get them a driver (take the
                              //nearest available mechanic).
                              vehicles_list = ai_vehicles_defend[base] diff (ai_refuel_vehicles_list[base] ^ ai_retreating_vehicles_defend[base] ^ ai_vehicles_being_repaired[base] ^ ai_vehicles_having_been_moved[base] ^ ai_vehicle_being_moved[base]);

                              temp_list = UnitFilter(vehicles_list,[[f_control,control_manual],[f_ok],[f_empty],[f_inarea,area]]);
                              temp_list = FindDriverHelper(temp_list,mechanics_list,vehicles_drivers);
                              mechanics_list = temp_list[1];
                              vehicles_drivers = temp_list[2];

                              //Order the vehicles to attack an enemy unit near the base.
                              //if base = 1 then
                              //     temp_list = DangerousUnits(FilterAllUnits([[f_enemy,side],[f_inarea,ru_vehicle_defend_area]]))
                              //else
                                   temp_list = DangerousUnits(ListFilterNearArea( FilterAllUnits([f_enemy,side]),area));

                              case base of
                                   1: temp_list = UnitFilter(temp_list,[f_not,[f_inarea,ru_no_vehicle_defend_area]]);
                                   2: begin end;
                                   3: temp_list = UnitFilter(temp_list,[f_not,[f_inarea,ar_no_vehicle_defend_area]]);
                              end;

                              if temp_list > 0 then
                                   begin
                                        if base = 1 then
                                             begin
                                                  //If the enemy attacks from northeast go to the northeastern border of the base instead of outside the base.
                                                  n = 99999;
                                                  for i in temp_list do
                                                       begin
                                                            k = GetY(i);
                                                            if not IsInArea(i,area) and k < n then
                                                                 begin
                                                                      n = k;
                                                                 end;
                                                       end;

                                                  if n < 37 then
                                                       ComAgressiveMove(vehicles_list,35,38)
                                                  else
                                                       if n < 53 then
                                                            ComAgressiveMove(vehicles_List,45,47)
                                                       else
                                                            ComAgressiveMove(vehicles_list,GetX(temp_list[1]),GetY(temp_list[1]));
                                             end
                                        else
                                             ComAgressiveMove(vehicles_list,GetX(temp_list[1]),GetY(temp_list[1]))
                                   end
                              else
                                   begin
                                        temp_list = FilterAllUnits([[f_enemy,side],[f_inarea,area]]);
                                        if base = 1 then
                                             temp_list = temp_list ^ FilterAllUnits([[f_enemy,side],[f_inarea,ru_attack_buildings_area]]);

                                        if temp_list > 0 then
                                             begin
                                                  temp_list_2 = DangerousUnits(temp_list);

                                                  if temp_list_2 = 0 then
                                                       ComAttackUnit(vehicles_list,temp_list[1]);  //Destroy e.g. empty manual vehicles so they won't block.
                                             end;
                                   end;
                         end
                    else
                         begin
                              if IsOk(ai_depot[base]) then
                                   begin
                                        //If some vehicles need to refuel then make 'em refuel.
                                        temp_list = ai_refuel_vehicles_list[base];
                                        for i in vehicles_to_consider diff ai_refuel_vehicles_list[base] do
                                             if GetFuel(i) < 70 and GetEngine(i) = engine_combustion then
                                                  temp_list = temp_list ^ i;
                                        temp_list = temp_list diff (ai_retreating_vehicles_defend[base] ^ ai_vehicles_being_repaired[base] ^ ai_vehicle_being_moved[base] ^ ai_vehicles_having_been_moved[base]);
                                        ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);

                                        temp_list = UnitFilter(ai_refuel_vehicles_list[base],[[f_control,control_manual],[f_empty],[f_ok]]) diff ai_control_tower_vehicles[base];  //Remote mechanics are assigned to control tower vehicles
                                        temp_list = FindDriverHelper(temp_list,mechanics_list,vehicles_drivers);
                                        mechanics_list = temp_list[1];
                                        vehicles_drivers = temp_list[2];

                                        for i in ai_refuel_vehicles_list[base] do
                                             begin
                                                  if IsInArea(i,area) then
                                                       begin
                                                            ComMoveUnit(i,ai_depot[base]);
                                                            AddComRefuel(i,ai_depot[base]);
                                                       end
                                                  else
                                                       ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                                             end;
                                   end;

                              //Move non-manual vehicles outside the base inside
                              for i in UnitFilter(vehicles_to_consider,[f_not,[f_control,control_manual]]) diff (ai_refuel_vehicles_list[base] ^ ai_retreating_vehicles_defend[base] ^ ai_vehicles_being_repaired[base] ^ ai_vehicle_being_moved[base] ^ ai_vehicles_having_been_moved[base]) do
                                   if not IsInArea(i,area) then
                                        ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]); 
                         end;


                    //Park vehicles.
                    free_parking_spots = [];  //Keeps track of the pullback hexes available
                    parked_vehicles = [];  //Keeps track of vehicles on pullback hexes

                    //Only these vehicles will need to be parked on a parking spot. Other vehicles either don't need to or are parking somewhere else.
                    vehicles_allowed_to_park = UnitFilter(vehicles_to_consider,[f_control,control_manual]);

                    //Non-manual vehicles pull back to the human pullback hex when retreating when under attack. The max distance they should have to the human pullback hex
                    //is determined by how many vehicles we have of that kind.
                    case (vehicles_to_consider diff vehicles_allowed_to_park)+0 of
                         0..1: human_pullback_hex_max_dist = 4;
                         2: human_pullback_hex_max_dist = 5;
                         3..4: human_pullback_hex_max_dist = 6;
                         else human_pullback_hex_max_dist = 7;
                    end;

                    for i in ai_vehicle_pullback_hexes[base] do
                         begin
                              temp_unit = HexInfo(i[1],i[2]);

                              if temp_unit in vehicles_allowed_to_park then
                                   begin
                                        parked_vehicles = parked_vehicles ^ temp_unit;
                                   end
                              else
                                   if temp_unit = 0 or not ( GetType(temp_unit) = unit_building or ( GetType(temp_unit) = unit_vehicle and ( ( GetControl(temp_unit) = control_manual and IsDrivenBy(temp_unit) = 0 ) or ( GetControl(temp_unit) = control_remote and IsControledBy(temp_unit) = 0 ) ) ) ) then
                                        free_parking_spots = Insert(free_parking_spots,1,i);
                         end;

                    if under_attack then
                         begin
                              vehicles_to_park = (ai_vehicles_being_repaired[base] union ai_retreating_vehicles_defend[base]) isect vehicles_allowed_to_park; //We take ai_vehicles_being_repaired[base] and ai_retreating_vehicles_defend[base] because these vehicles are not fighting or have other tasks.
                              vehicles_to_park = UnitFilter(vehicles_to_park diff parked_vehicles,[f_ok]);
                              vehicles_to_park = vehicles_to_park union UnitFilter(ai_control_tower_vehicles[base] diff (parked_vehicles ^ ai_refuel_vehicles_list[base] ^ ai_vehicles_having_been_moved[base] ^ ai_vehicle_being_moved[base]),[f_ok]);

                              //Man retreating/(under repair) vehicles which are parked on a parking spot and ( are under attack
                              //or where mechanics are under attack nearby (i.e. the enemy is near) ).
                              //Else use your time on repairing the vehicles.
                              //UnitShoot resets after 10 seconds and detects all kinds of contact (direct hit, bombs, attack ground etc.).
                              temp_list = [];
                              temp_list_3 = (ai_vehicles_being_repaired[base] union ai_retreating_vehicles_defend[base]) isect parked_vehicles;
                              temp_list_3 = UnitFilter(temp_list_3,[f_ok]) diff ai_control_tower_vehicles[base];  //Remote mechanics are assigned to control tower vehicles
                              for i in temp_list_3 do
                                   if UnitShoot(i) > 0 then
                                        if GetSide(UnitShoot(i)) <> side then
                                             temp_list = temp_list ^ i;

                              for i in ai_mechanics_defend[base] do
                                   if UnitShoot(i) > 0 then
                                        if GetSide(UnitShoot(i)) <> side then
                                             temp_list = temp_list union UnitFilter(temp_list_3,[f_dist,i,5]);

                              for i in temp_list_3 diff temp_list do
                                   begin
                                        if not i in (ai_refuel_vehicles_list[base] ^ ai_vehicle_being_moved[base] ^ ai_vehicles_having_been_moved[base]) then
                                             begin
                                                  k = IsDrivenBy(i);
                                                  if k > 0 then
                                                       ComExitVehicle(k);
                                             end;
                                   end;

                              temp_list = UnitFilter(temp_list ^ vehicles_to_park,[[f_control,control_manual],[f_empty]]) diff ai_control_tower_vehicles[base];  //Remote mechanics are assigned to control tower vehicles
                              temp_list = FindDriverHelper(temp_list,mechanics_list,vehicles_drivers);
                              mechanics_list = temp_list[1];
                              vehicles_drivers = temp_list[2];
                         end
                    else
                         begin
                              vehicles_to_park = UnitFilter(vehicles_allowed_to_park diff (parked_vehicles ^ ai_refuel_vehicles_list[base] ^ ai_vehicles_having_been_moved[base] ^ ai_vehicle_being_moved[base]),[f_ok]);

                              for i in parked_vehicles do
                                   begin
                                        if not i in (ai_refuel_vehicles_list[base] ^ ai_vehicle_being_moved[base] ^ ai_vehicles_having_been_moved[base]) then
                                             begin
                                                  k = IsDrivenBy(i);
                                                  if k > 0 and not ( k in remote_mechanics and i in ai_control_tower_vehicles[base] ) then  //Remote mechanics are assigned to control tower vehicles
                                                       begin
                                                            ComExitVehicle(k);
                                                       end;
                                             end;
                                   end;

                              //Find drivers for the vehicles which aren't parked correctly
                              temp_list = UnitFilter(vehicles_to_park,[[f_control,control_manual],[f_empty]]) diff ai_control_tower_vehicles[base];  //Remote mechanics are assigned to control tower vehicles
                              temp_list = FindDriverHelper(temp_list,mechanics_list,vehicles_drivers);
                              mechanics_list = temp_list[1];
                              vehicles_drivers = temp_list[2];
                         end;

                    //Command vehicles to park on the pullback hexes.
                    //If no pullback hexes are available then the vehicle won't park anywhere.
                    while vehicles_to_park > 0 do
                         begin
                              if free_parking_spots = 0 then
                                   break;

                              //Take the closest spot
                              temp_list = [];
                              for k in free_parking_spots do
                                   temp_list = temp_list ^ GetDistUnitXY(vehicles_to_park[1],k[1],k[2]);
                              temp_list = WorstFromListByList(free_parking_spots,temp_list);

                              ComMoveXY(vehicles_to_park[1],temp_list[1],temp_list[2]);
                              AddComHold(vehicles_to_park[1]);

                              free_parking_spots = free_parking_spots diff [temp_list];
                              vehicles_to_park = Delete(vehicles_to_park,1);
                         end;

                    //When under attack, the retreating vehicles and vehicles being repaired, which are not allowed to park on the vehicle parking hexes,
                    //pull back to the human pullback hex instead.
                    if under_attack then
                         begin
                              for i in UnitFilter((ai_retreating_vehicles_defend[base] union ai_vehicles_being_repaired[base]) diff vehicles_allowed_to_park,[f_ok]) do
                                   begin
                                        if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > human_pullback_hex_max_dist then
                                             ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                                   end;
                         end;


                    //Repair vehicles.
                    //All mechanics go for the same vehicle.
                    if under_attack then
                         begin
                              allowed_to_repair_vehicles = parked_vehicles ^ UnitFilter(vehicles_to_consider diff vehicles_allowed_to_park,[f_distxy,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2],human_pullback_hex_max_dist]);
                              allowed_to_repair_vehicles = allowed_to_repair_vehicles diff (ai_refuel_vehicles_list[base] ^ ai_vehicles_having_been_moved[base] ^ ai_vehicle_being_moved[base]);  //Trying to repair a vehicle in one of these states could cause caos. Wait for it to finish.
                         end
                    else
                         begin
                              allowed_to_repair_vehicles = vehicles_to_consider diff (ai_refuel_vehicles_list[base] ^ ai_vehicles_having_been_moved[base] ^ ai_vehicle_being_moved[base]);  //Trying to repair a vehicle in one of these states could cause caos. Wait for it to finish.
                              allowed_to_repair_vehicles = allowed_to_repair_vehicles ^ UnitFilter(ai_cargo_bay[base] diff 0,[f_inarea,area]);

                              //Don't go near burning vehicles too far away from the base - could be dangerous if the
                              //enemy has set up an ambush.
                              i = 1;
                              while i <= allowed_to_repair_vehicles do
                                   begin
                                        if not IsOk(allowed_to_repair_vehicles[i]) and GetDistUnitArea(allowed_to_repair_vehicles[i],area) > 7 then
                                             begin
                                                  allowed_to_repair_vehicles = Delete(allowed_to_repair_vehicles,i);
                                                  continue;
                                             end;

                                        i = i + 1;
                                   end;
                         end;

                    allowed_to_repair_vehicles = UnitFilter(allowed_to_repair_vehicles,[[f_not,[f_lives,1000]],[f_or,[f_not,[f_ok]],[f_inarea,area]]]);  //Only repair a vehicle outside the base area if it can't move inside. Else wait for it to move inside.

                    if ai_crane[base] > 0 then
                         begin
                              k = false;

                              if ai_crane_is_being_repaired[base] and ( GetDistUnitXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) <= 6 or ( IsInArea(ai_crane[base],area) and not under_attack ) ) then
                                   begin
                                        if GetLives(ai_crane[base]) < 1000 then
                                             allowed_to_repair_vehicles = ai_crane[base] ^ allowed_to_repair_vehicles;

                                        if ai_crane_driver[base] > 0 then
                                             begin
                                                  if GetLives(ai_crane_driver[base]) = 1000 then
                                                       begin
                                                            mechanics_list = mechanics_list ^ ai_crane_driver[base];  //Help repairing
                                                       end
                                                  else
                                                       begin
                                                            if GetDistUnitXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) <= 6 then
                                                                 begin
                                                                      if GetHumansOutOfUnits([ai_crane_driver[base]]) > 0 and not ai_crane_driver[base] in ai_heal_these_humans[base] then
                                                                           begin
                                                                                temp_list = ai_heal_these_humans[base] ^ ai_crane_driver[base];
                                                                                ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
                                                                           end;
                                                                 end
                                                            else
                                                                 k = true;
                                                       end;
                                             end;
                                   end
                              else
                                   k = true;

                              if k then
                                   begin
                                        if IsOk(ai_crane[base]) and ai_crane_driver[base] > 0 and not ai_crane_driver[base] in mechanics_list and not ai_crane_driver[base] in ai_heal_these_humans[base] then
                                             begin
                                                  if IsInUnit(ai_crane_driver[base]) <> ai_crane[base] then
                                                       case GetType(IsInUnit(ai_crane_driver[base])) of
                                                            unit_building: ComExitBuilding(ai_crane_driver[base]);
                                                            unit_vehicle: ComExitVehicle(ai_crane_driver[base]);
                                                            else
                                                                 ComEnterUnit(ai_crane_driver[base],ai_crane[base]);
                                                       end;
                                             end;
                                   end;
                         end;

                    if mechanics_list = 0 and remote_mechanics = 0 then
                         continue;

                    allowed_to_repair_vehicles = allowed_to_repair_vehicles diff ai_vehicles_being_repaired[base];
                    if allowed_to_repair_vehicles > 0 or ai_vehicles_being_repaired[base] > 0 then
                         begin
                              if remote_mechanics > 0 then
                                   begin
                                        if under_attack or UnitFilter(ai_vehicles_attack[base],[[f_control,control_remote],[f_ok]]) > 0 then
                                             begin
                                                  //Repair vehicles if all vehicles you control are burning or dead
                                                  for i in remote_driver_vehicles[base] do
                                                       if UnitFilter(i[2],[f_ok]) = 0 and i[1] in remote_mechanics then
                                                            begin
                                                                 mechanics_list = mechanics_list ^ i[1];
                                                                 remote_mechanics = remote_mechanics diff i[1];
                                                            end;
                                             end
                                        else
                                             begin
                                                  //All help repair vehicles if all vehicles are inside the base
                                                  //(to prevent a lot of destination unreachable messages from other vehicles
                                                  //all must be inside the base).
                                                  //Perhaps it's not so smart if we have a remotely controlled cargo bay but hopefully the
                                                  //repair won't take long now that everybody is helping.
                                                  //Remember some remote vehicles may not be controlled by anyone.
                                                  temp_unit = true;
                                                  for i in vehicles_to_consider do
                                                       if not IsInArea(i,area) then
                                                            begin
                                                                 temp_unit = false;
                                                                 break;
                                                            end;

                                                  if temp_unit then
                                                       begin
                                                            mechanics_list = mechanics_list ^ remote_mechanics;
                                                            remote_mechanics = [];
                                                       end;
                                             end;
                                   end;

                              if allowed_to_repair_vehicles > 0 then
                                   begin
                                        k = false;
                                        if ai_vehicles_being_repaired[base] = 0 then
                                             k = true
                                        else
                                             if IsOk(ai_vehicles_being_repaired[base][1]) then
                                                  begin
                                                       allowed_to_repair_vehicles = UnitFilter(allowed_to_repair_vehicles,[f_not,[f_ok]]);
                                                       k := allowed_to_repair_vehicles > 0;
                                                  end;

                                        if k then
                                             begin
                                                  temp_list = [];
                                                  for i in allowed_to_repair_vehicles do
                                                       temp_list = temp_list ^ GetLives(i);
                                                  temp_unit = WorstFromListByList(allowed_to_repair_vehicles,temp_list);

                                                  temp_list = temp_unit ^ ai_vehicles_being_repaired[base];
                                                  ai_vehicles_being_repaired = Replace(ai_vehicles_being_repaired,base,temp_list);

                                                  //temp_list = ai_retreating_vehicles_defend[base] diff temp_unit;
                                                  //ai_retreating_vehicles_defend = Replace(ai_retreating_vehicles_defend,base,temp_list);  -> The vehicle stays in "retreating" until the code managing retreating vehicles pulls it out of that state
                                             end;
                                   end;

                              ComRepairVehicle( GetHumansOutOfUnits(mechanics_list) , ai_vehicles_being_repaired[base][1]);
                         end
                    else
                         begin
                              //Rest mechanics stay inside the factory (if possible).
                              //Change class if necessary
                              DistributeHumansToBuildings(base,mechanics_list, UnitFilter(ai_facts[base],[[f_ok],[f_not,[f_constructed]]]),
                                   class_mechanic,6,true,false);
                         end;


                    //Connect remote driver and vehicles
                    if remote_driver_vehicles[base] > 0 then
                         begin
                              if not IsOk(ai_control_tower[base]) and UnitFilter(ai_control_tower_vehicles[base],[f_ok]) = 0 then
                                   begin
                                        //Just go to factory
                                        DistributeHumansToBuildings(base,remote_mechanics, UnitFilter(ai_facts[base],[[f_ok],[f_not,[f_constructed]]]),
                                             class_mechanic,6,true,false);
                                   end
                              else
                                   begin
                                        temp_list_3 = [[],0];  //[The control tower vehicles mecs have been sent to, Number of mecs sent to control tower]
                                        temp_list_2 = [];  //Remote mechanics who should just go to the factory
                                        already_inside_mecs = [];  //Remote mechanics already inside a control tower or control tower vehicle.

                                        for i in remote_driver_vehicles[base] do
                                             begin
                                                  if GetClass(i[1]) <> class_mechanic then
                                                       continue;

                                                  k = IsInUnit(i[1]);

                                                  if k > 0 and ( k in ai_control_tower_vehicles[base] or k = ai_control_tower[base] ) then
                                                       begin
                                                            already_inside_mecs = already_inside_mecs ^ i[1];

                                                            if k in ai_control_tower_vehicles[base] then
                                                                 begin
                                                                      temp_list = temp_list_3[1] ^ k;
                                                                      temp_list_3 = Replace(temp_list_3,1,temp_list);
                                                                 end
                                                            else
                                                                 temp_list_3 = Replace(temp_list_3,2,temp_list_3[2]+1);
                                                       end;
                                             end;

                                        for i in remote_driver_vehicles[base] do
                                             begin
                                                  if not i[1] in remote_mechanics then
                                                       continue;

                                                  //Class must be mechanic
                                                  if GetClass(i[1]) <> class_mechanic then
                                                       begin
                                                            temp_unit = 0;
                                                            for k in ai_facts[base] do
                                                                 if IsOk(k) and UnitsInside(k) < 6 then
                                                                      begin
                                                                           temp_unit = k;
                                                                           break;
                                                                      end;

                                                            if temp_unit > 0 then
                                                                 begin
                                                                      if IsInUnit(i[1]) = temp_unit then
                                                                           ComChangeProfession(i[1],class_mechanic)
                                                                      else
                                                                           begin
                                                                                case GetType(IsInUnit(i[1])) of
                                                                                     unit_building: ComExitBuilding(i[1]);
                                                                                     unit_vehicle: ComExitVehicle(i[1]);
                                                                                     else
                                                                                          ComEnterUnit(i[1],temp_unit);
                                                                                end;
                                                                           end;
                                                                 end;
                                                       end
                                                  else
                                                       begin
                                                            //Send to control tower vehicles as first priority (so empty manual vehicles won't block). Then control tower.
                                                            temp_unit = 0;

                                                            if i[1] in already_inside_mecs then
                                                                 begin
                                                                      temp_unit = IsInUnit(i[1]);  //just stay where you are pall
                                                                 end
                                                            else
                                                                 begin
                                                                      if (ai_control_tower_vehicles[base] diff temp_list_3[1]) > 0 then
                                                                           begin
                                                                                //temp_unit = AllNearestUnitToUnit(ai_control_tower_vehicles[base] diff temp_list_3[1],i[1]);  -> doesn't work if the mechanic is inside another unit
                                                                                temp_list = [GetX(i[1]),GetY(i[1])];
                                                                                temp_list_4 = [];
                                                                                temp_list_5 = ai_control_tower_vehicles[base] diff temp_list_3[1];
                                                                                for k in temp_list_5 do
                                                                                     temp_list_4 = temp_list_4 ^ GetDistUnitXY(k,temp_list[1],temp_list[2]);

                                                                                temp_unit = WorstFromListByList(temp_list_5,temp_list_4);

                                                                                temp_list = temp_list_3[1] ^ temp_unit;
                                                                                temp_list_3 = Replace(temp_list_3,1,temp_list);
                                                                           end
                                                                      else
                                                                           if IsOk(ai_control_tower[base]) and temp_list_3[2] < 3 then
                                                                                begin
                                                                                     temp_unit = ai_control_tower[base];
                                                                                     temp_list_3 = Replace(temp_list_3,2,temp_list_3[2]+1);
                                                                                end
                                                                           else
                                                                                temp_list_2 = temp_list_2 ^ i;
                                                                 end;

                                                            if temp_unit > 0 then
                                                                 begin
                                                                      k = IsInUnit(i[1]);
                                                                      if k <> temp_unit then
                                                                           begin
                                                                                case GetType(k) of
                                                                                     unit_building: ComExitBuilding(i[1]);
                                                                                     unit_vehicle: ComExitVehicle(i[1]);
                                                                                     else
                                                                                          ComEnterUnit(i[1],temp_unit);
                                                                                end;
                                                                           end
                                                                      else
                                                                           for k in i[2] do
                                                                                if IsOk(k) and IsControledBy(k) <> i[1] then
                                                                                     ComLinkTo(k,i[1])
                                                                                else
                                                                                     if not IsOk(k) and IsControledBy(k) > 0 then  //Unlink to improve performance of other vehicles controlled by the mechanic
                                                                                          ComUnlink(k);
                                                                 end;
                                                       end;
                                             end;

                                        DistributeHumansToBuildings(base,temp_list_2, UnitFilter(ai_facts[base],[[f_ok],[f_not,[f_constructed]]]),
                                             class_mechanic,6,true,false);
                                   end;
                         end;
               end;

          until false;
     end;
Function FindDriverHelper(vehicles_list,mechanics_list,vehicles_drivers);
     var i, k, temp_unit;
     begin
          for i in vehicles_list do
               begin
                    if mechanics_list = 0 then
                         break;

                    k = false;
                    if vehicles_drivers < i then
                         k = true
                    else
                         if not vehicles_drivers[i] in mechanics_list then
                              k = true;

                    if k then
                         vehicles_drivers = Replace(vehicles_drivers,i,AllNearestUnitToUnit(mechanics_list,i));

                    if vehicles_drivers[i] > 0 then
                        begin
                             temp_unit = IsInUnit(vehicles_drivers[i]);

                             if temp_unit <> i then
                                  case GetType(temp_unit) of
                                       unit_vehicle: ComExitVehicle(vehicles_drivers[i]);  //could sit in a vehicle which is now parked correctly
                                       unit_building: ComExitBuilding(vehicles_drivers[i]);
                                       else ComEnterUnit(vehicles_drivers[i],i);
                                  end;

                             mechanics_list = mechanics_list diff vehicles_drivers[i];
                        end;
               end;

          result = [mechanics_list,vehicles_drivers];
     end;
//The funny thing about a crane is that it repairs buildings faster the higher mechanic skill the driver has,
//but when constructing buildings the building's level will correspond to the driver's engineering skill.
//Therefore the crane driver should be the mechanic with the highest engineering and mechanical skill combined.
Function FindBestCraneDriver(base);
     var i, temp_list;
     begin
          if ai_mechanics_defend[base] = 0 then
               begin
                    result = 0;
                    exit;
               end;

          temp_list = [];
          for i in ai_mechanics_defend[base] do
               temp_list = temp_list ^ (GetSkill(i,skill_engineering)+GetSkill(i,skill_mechanical));

          result = BestFromListByList(ai_mechanics_defend[base],temp_list);
     end;
Function MaxNumWarVehicles(base);
     begin
          result = ai_max_num_vehicles_defend[base];
     end;
//Construct combat vehicles and weapons for bunkers. Weapons for bunkers have highest priority.
//Construct a crane if we don't have one.
//Construct a cargo bay if we don't have one (but not if we are under attack).
Every 0$1+0$0.6 do
     var i, temp_value, temp_unit, temp_list, base, idle_factories, fact, b;
     var vehicle_prod_delay, under_attack;
     begin
          vehicle_prod_delay = [0$0,0$0,0$0];


          repeat
          wait(0$1);
          
          for base in ai_bases do
               begin
                    if base = 2 then
                         continue;

                    under_attack = BaseUnderAttack(base,-1);

                    if under_attack and ai_vehicles_defend[base] >= [0,1,2][difficulty] then
                         begin
                              vehicle_prod_delay = Replace(vehicle_prod_delay,base,[1$15,0$45,0$30][difficulty]);
                         end;

                    idle_factories = [];
                    for i in ai_facts[base] do
                         if BuildingStatus(i) = bs_idle and IsOk(i) and GetBType(i) = b_factory then
                              begin
                                   b = true;
                                   if ai_facts_with_ext_rebuild_map >= i then
                                        if ai_facts_with_ext_rebuild_map[i] > 0 then
                                             b = false;  

                                   if b then
                                        idle_factories = idle_factories ^ i;
                              end;
                   
                    if idle_factories = 0 then
                         continue;


                    //Check if any bunker needs a weapon
                    temp_value = false;
                    for i in ai_buildings_locations[base] do
                         if i[4] in [b_bunker,b_turret] then
                              begin
                                   temp_unit = HexInfo(i[1],i[2]);

                                   if GetBType(temp_unit) in [b_bunker,b_turret] and not IsConstructed(temp_unit) and GetBWeapon(temp_unit) <> i[7] then
                                        for fact in idle_factories do
                                             //if i[7] in AvailableWeaponList(fact) then  //Can the factory produce the weapon? (does it have the gun extension, that is).
                                             if IsWeaponFactory(fact) then
                                                  begin
                                                       //Check if we have the right extension to construct a time lapser (if that's the weapon to place).
                                                       if base = 1 and i[7] = ru_time_lapser then
                                                            begin
                                                                 b = CanRusConstructThis(i[7],true);
                                                                 if b in [0,2] then
                                                                      begin
                                                                           if b = 0 then
                                                                                temp_value = true;

                                                                           break;
                                                                      end;
                                                            end;

                                                       //If there are multiple weapon factories and more than one or another factory than
                                                       //the factory getting the job invokes this part of the function the bunker/turret may
                                                       //get the weapon placed several times, but since factories don't have a task list
                                                       //there is no simple way to stop this. Better several times than never.
                                                       ComPlaceWeapon(temp_unit,i[7]);
                                                       temp_value = true;
                                                       break;
                                                  end;

                                   if temp_value then
                                        break;
                              end;

                    if temp_value then
                         continue;

                   
                    //Construct cargo bay if we have none.
                    //In this mission the Russians also produce a cargo bay for Farmer if he needs one (more practical since it's computer controlled).
                    if not under_attack and base = 1 then
                         begin
                              if {( ai_cargo_bay[base] = 0 and not ai_cargo_bay_under_construction[base] and tick - ai_cargo_bay_destroy_tick[base] >= [6$0,4$30,3$0][difficulty] ) or}
                                 ( ai_cargo_bay[3] = 0 and not ai_cargo_bay_under_construction[3] and tick - ai_cargo_bay_destroy_tick[3] >= [6$0,4$30,3$0][difficulty] and UnitFilter(ai_units_to_export[1],[[f_type,unit_vehicle],[f_weapon,ru_cargo_bay]]) = 0 and 3 in ai_bases ) then

                                   begin
                                        temp_unit = 0;
                                        temp_list = [];

                                        for fact in idle_factories do
                                             begin
                                                  case GetBaseNation(base) of
                                                       nation_american: begin
                                                            if us_medium_tracked in AvailableChassisList(fact) and us_cargo_bay in AvailableWeaponList(fact) then
                                                                 begin
                                                                      temp_unit = fact;
                                                                      temp_list = [us_medium_tracked,engine_siberite,control_computer,us_cargo_bay];

                                                                      break;
                                                                 end;
                                                       end;
                                                       nation_arabian: begin
                                                            if ar_half_tracked in AvailableChassisList(fact) and ar_cargo_bay in AvailableWeaponList(fact) and ai_control_tower_vehicles[base] > 0 then
                                                                 begin
                                                                      temp_unit = fact;
                                                                      temp_list = [ar_half_tracked,engine_siberite,control_remote,ar_cargo_bay];

                                                                      break;
                                                                 end;
                                                       end;
                                                       nation_russian: begin
                                                            if ru_medium_tracked in AvailableChassisList(fact) {and ru_cargo_bay in AvailableWeaponList(fact)} then  //In this mission the Russian factory switches between noncombat and siberite extension as needed
                                                                 begin
                                                                      temp_unit = fact;
                                                                      temp_list = [ru_medium_tracked,engine_combustion,control_computer,ru_cargo_bay];

                                                                      break;
                                                                 end;
                                                       end;
                                                  end;
                                             end;

                                        if temp_unit > 0 then
                                             begin
                                                  //Check if we have the right extension to construct a cargo bay.
                                                  b = CanRusConstructThis(temp_list[4],true);

                                                  if b = 0 then
                                                       continue;

                                                  if b = 1 then
                                                       begin
                                                            ComConstruct(fact,temp_list[1],temp_list[2],temp_list[3],temp_list[4]);

                                                          {  if ai_cargo_bay[base] = 0 then
                                                                 ai_cargo_bay_under_construction = Replace(ai_cargo_bay_under_construction,base,true)
                                                            else     }
                                                                 ai_cargo_bay_under_construction = Replace(ai_cargo_bay_under_construction,3,true);  //For Farmer

                                                            continue;
                                                       end;
                                             end;
                                   end;
                         end;

                      
                    //Construct a crane if we have none.
                    if base = 1 and difficulty > 1 then
                         begin                                                                                                                   
                              if ai_crane[base] = 0 and not ai_crane_under_construction[base] and tick - ai_crane_destroy_tick[base] >= [8$0,6$0,4$0][difficulty] then
                                   begin
                                        temp_unit = 0;
                                        temp_list = [];

                                        for fact in idle_factories do
                                             begin
                                                  case GetBaseNation(base) of
                                                       nation_american: begin
                                                            if us_medium_tracked in AvailableChassisList(fact) and us_crane in AvailableWeaponList(fact) then
                                                                 begin
                                                                      temp_unit = fact;
                                                                      temp_list = [us_medium_tracked,engine_siberite,control_manual,us_crane];

                                                                      break;
                                                                 end;
                                                       end;
                                                       nation_russian: begin
                                                            if ru_medium_tracked in AvailableChassisList(fact) {and ru_crane in AvailableWeaponList(fact)} then  //In this mission the Russian factory switches between noncombat and siberite extension as needed
                                                                 begin
                                                                      temp_unit = fact;
                                                                      temp_list = [ru_medium_tracked,engine_combustion,control_manual,ru_crane];

                                                                      break;
                                                                 end;
                                                       end;
                                                  end;
                                             end;

                                        if temp_unit > 0 then
                                             begin
                                                  //Check if we have the right extension to construct a crane.
                                                  b = CanRusConstructThis(temp_list[4],true);

                                                  if b = 0 then
                                                       continue;

                                                  if b = 1 then
                                                       begin
                                                            if ai_mechanics_defend[base] + ai_mechanics_attack[base] = 1 then  //We need someone to work in the factory
                                                                 temp_list = Replace(temp_list,3,control_computer);
                                                           
                                                            ComConstruct(fact,temp_list[1],temp_list[2],temp_list[3],temp_list[4]);
                                                            ai_crane_under_construction = Replace(ai_crane_under_construction,base,true);

                                                            continue;
                                                       end;
                                             end;
                                   end;
                         end;

                  
                    //Construct war vehicles.
                    if base = 3 and ai_control_tower_vehicles[base] = 0 and UnitFilter(ai_vehicles_defend[base] ^ ai_vehicles_attack[base] ^ ai_exported_units[base] ^ ai_units_to_export[base] ^ ai_taufield_vehicles[base] ^ ai_implosion_vehicles[base],[f_control,control_remote]) > 0 then
                         begin
                              ComConstruct(idle_factories[1],ar_half_tracked,engine_siberite,control_manual,ar_control_tower);
                              continue;
                         end;

                    if vehicle_prod_delay[base] > 0$0 then
                         begin
                              vehicle_prod_delay = Replace(vehicle_prod_delay,base, vehicle_prod_delay[base] - 0$1 );
                              continue;
                         end;

                    if ai_vehicles_defend[base] + UnitFilter(ai_exported_units[base] ^ ai_units_to_export[base] ^ ai_vehicles_attack[base],war_vehicle_filter) - UnitFilter(ai_imported_units[base],war_vehicle_filter) < MaxNumWarVehicles(base) then
                         begin
                              case base of
                                   1: begin
                                        case Rand(1,5) of
                                             1: temp_value = ru_gun;
                                             2: temp_value = ru_heavy_gun;
                                             3: temp_value = ru_rocket_launcher;
                                             4: temp_value = ru_rocket;
                                             5: temp_value = ru_gatling_gun;
                                        end;
                                       
                                        if difficulty = 1 and temp_value = ru_heavy_gun then
                                             temp_value = ru_gun;

                                        if Rand(1,[2,3,4][difficulty]) = 1 and not temp_value in [ru_heavy_gun,ru_rocket] then
                                             i = ru_medium_tracked
                                        else     
                                             i = ru_heavy_tracked;

                                        temp_list = UnitFilter(ai_vehicles_defend[base] ^ ai_vehicles_attack[base],[f_control,control_manual]);
                                        if temp_list < [0,2,3][difficulty] and ai_mechanics_defend[base] + ai_mechanics_attack[base] - 3 > temp_list then  //There should at least be enough mechanics for a crane driver
                                             temp_unit = control_manual
                                        else
                                             temp_unit = control_computer;

                                        ComConstruct(idle_factories[1],i,engine_combustion,temp_unit,temp_value);
                                   end;
                                   2: begin
                                   end;
                                   3: begin
                                        if ai_vehicles_defend[base] + ai_exported_units[base] + ai_units_to_export[base] >= ai_control_tower_vehicles[base] * 2 then
                                             begin
                                                  ComConstruct(idle_factories[1],ar_half_tracked,engine_siberite,control_manual,ar_control_tower);
                                             end
                                        else
                                             begin
                                                  case Rand(1,2) of
                                                       1: temp_value = ar_gun;
                                                       2: temp_value = ar_rocket_launcher;
                                                  end; 

                                                  ComConstruct(idle_factories[1],ar_half_tracked,engine_siberite,control_remote,temp_value);

                                                  if BaseUnderAttack(1,-1) and 1 in ai_bases and farmer_attack_anyway_phase = 0 then  //Farmer sends vehicles to the Russians
                                                       vehicle_prod_delay = Replace(vehicle_prod_delay,base,[1$0,0$30,0$15][difficulty]);
                                             end;
                                   end;
                              end;

                              //vehicle_prod_delay = Replace(vehicle_prod_delay,base,[1$0,0$30,0$15][difficulty]);  -> Disrupts the planned attack time
                              continue;
                         end;    

                       
                    //Taufield vehicles
                    if base = 1 and ai_taufield_vehicles[base] + UnitFilter(ai_exported_units[base] ^ ai_units_to_export[base] ^ ai_vehicles_attack[base],[f_weapon,ru_time_lapser]) < ai_max_num_taufield_vehicles[3] then
                         begin
                              //Check if we have the right extension to construct a taufield vehicle.
                              b = CanRusConstructThis(ru_time_lapser,true);
                                        
                              if b = 0 then
                                   continue;

                              if b = 1 then
                                   begin
                                        ComConstruct(idle_factories[1],ru_medium_tracked,engine_combustion,control_computer,ru_time_lapser);
                                        continue;
                                   end;
                         end;


                    //Siberite implosion vehicles
                    if base = 3 and ai_implosion_vehicles[base] + UnitFilter(ai_exported_units[base] ^ ai_units_to_export[base] ^ ai_vehicles_attack[base],[f_weapon,ar_selfpropelled_bomb]) < ai_max_num_implosion_vehicles[base] then
                         begin
                              if ai_control_tower_vehicles[base] = 0 then
                                   begin
                                        ComConstruct(idle_factories[1],ar_half_tracked,engine_siberite,control_manual,ar_control_tower);
                                        continue;
                                   end;

                              ComConstruct(idle_factories[1],ar_half_tracked,engine_siberite,control_remote,ar_selfpropelled_bomb);
                         end
                    else
                         if base = 3 and farmer_attack_anyway_phase = 1 then
                              farmer_attack_anyway_phase = 2;
               end;

          until false;
     end;
//If a factory has the gun extension we presume it has all necessary extensions to construct
//any weapon.
Function IsWeaponFactory(factory);
     begin
          if FilterAllUnits([[f_dist,factory,4],[f_btype,b_ext_gun]]) > 0 then
               result = true
          else
               result = false;
     end;
//0 -> can't build it but we are gonna do something about it.
//1 -> can build it. Go ahead.
//2 -> can't built it and we can't do anything about it.
Function CanRusConstructThis(weapon,do_something_about_it);
     var i, temp_list, un, btype;
     begin
          result = 0;
           
          i = 1;
          while i <= ai_buildings_locations[1] do
               begin
                    if ai_buildings_locations[1][i][1] = ai_fact_extension_replace_location[1][1] and ai_buildings_locations[1][i][2] = ai_fact_extension_replace_location[1][2] then
                         begin
                              un = HexInfo(ai_buildings_locations[1][i][1],ai_buildings_locations[1][i][2]);
                             
                              if un > 0 and GetType(un) = unit_building and not IsConstructed(un) then
                                   begin
                                        btype = -1;

                                        case weapon of
                                             ru_cargo_bay, ru_crane: begin
                                                  if GetBType(un) = b_ext_noncombat then
                                                       result = 1
                                                  else
                                                       if ai_buildings_locations[1][i][4] <> b_ext_noncombat then
                                                            btype = b_ext_noncombat;
                                             end;
                                             ru_time_lapser: begin
                                                  if GetBType(un) = b_ext_siberium then
                                                       result = 1
                                                  else
                                                       if ai_buildings_locations[1][i][4] <> b_ext_siberium then
                                                            btype = b_ext_siberium;
                                             end;
                                        end;
                                            
                                        if btype > -1 then  
                                             begin
                                                  if ai_engineers[1] = 0 then  //Only engineers can dismantle
                                                       begin
                                                            result = 2;
                                                            exit;
                                                       end;

                                                  if not do_something_about_it then
                                                       exit;

                                                  //Dismantle the old factory extension and replace it with the right one.
                                                  temp_list = Replace(ai_buildings_locations[1][i],4,btype);
                                                  temp_list = Replace(ai_buildings_locations[1],i,temp_list);
                                                  ai_buildings_locations = Replace(ai_buildings_locations,1,temp_list);

                                                  temp_list = ai_dismantle_these_buildings[1] ^ un;
                                                  ai_dismantle_these_buildings = Replace(ai_dismantle_these_buildings,1,temp_list);

                                                  if ai_facts[1] > 0 then
                                                       begin
                                                            if ai_facts_with_ext_rebuild_map < ai_facts[1][1] then
                                                                 ai_facts_with_ext_rebuild_map = Replace(ai_facts_with_ext_rebuild_map,ai_facts[1][1],[]);

                                                            temp_list = ai_facts_with_ext_rebuild_map[ai_facts[1][1]] ^ [[ai_buildings_locations[1][i][1],ai_buildings_locations[1][i][2]]];
                                                            ai_facts_with_ext_rebuild_map = Replace(ai_facts_with_ext_rebuild_map,ai_facts[1][1],temp_list);
                                                       end;
                                             end;
                                   end;

                              exit;
                         end;

                    i = i + 1;
               end;
     end;
//If the player captures one of the computer's vehicles, then remove it from our variables-system.
On VehicleCaptured(new_identifier,old_identifier,old_side,capturing_unit) do
     var temp_list, base;
     begin
          if old_side = you then
               exit;

          for base in ai_bases do
               RemoveVehicleFromVariables(base,old_identifier,true);
     end;
//When a vehicle is constructed
On VehicleConstructed(vehicle,factory) do
     var side, temp_list, base, un;
     begin
          side = GetSide(vehicle);
          if side = you then
               exit;

          base = FindBase(vehicle);
          if base = 0 then
               exit;

          case GetWeapon(vehicle) of
               us_cargo_bay,ar_cargo_bay,ru_cargo_bay: begin
                  {  if base = 1 and ai_cargo_bay[1] > 0 then
                         begin   }
                              //The Russians produced a cargo bay for Farmer
                              temp_list = ai_units_to_export[base] ^ vehicle;
                              ai_units_to_export = Replace(ai_units_to_export,base,temp_list);

                              ai_cargo_bay_under_construction = Replace(ai_cargo_bay_under_construction,3,false);
                        { end
                    else
                         begin
                              ai_cargo_bay = Replace(ai_cargo_bay,base,vehicle);
                              ai_cargo_bay_under_construction = Replace(ai_cargo_bay_under_construction,base,false);
                         end;   }
               end;
               us_crane,ru_crane: begin     
                    ai_crane = Replace(ai_crane,base,vehicle);
                    ai_crane_under_construction = Replace(ai_crane_under_construction,base,false);
               end;
               ar_control_tower: begin
                    temp_list = ai_control_tower_vehicles[base] ^ vehicle;
                    ai_control_tower_vehicles = Replace(ai_control_tower_vehicles,base,temp_list);
               end;
               ar_selfpropelled_bomb: begin
                    temp_list = ai_implosion_vehicles[base] ^ vehicle;
                    ai_implosion_vehicles = Replace(ai_implosion_vehicles,base,temp_list);
               end;
               ru_time_lapser: begin
                    temp_list = ai_taufield_vehicles[base] ^ vehicle;
                    ai_taufield_vehicles = Replace(ai_taufield_vehicles,base,temp_list);
               end;
               else begin
                    temp_list = ai_vehicles_defend[base] ^ vehicle;
                    ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
               end;
          end;
     end;


//Preparation for attack.
//Russians and Farmer attack together.
Every 0$1+0$0.3 do
     var val, i, b, temp_list, temp_list_2, temp_list_3, temp_list_4, base_list;
     var rus_base, farm_base;
     begin
          rus_base = 1;
          farm_base = 3;

          repeat
          wait(0$1);

          if ai_bases = 0 then
               exit;

          val = true;

          for i in [rus_base,farm_base] do
               begin
                    if ( ai_vehicles_attack[i] > 0 or ai_mechanics_attack[i] > 0 ) and i in ai_bases then
                         begin
                              val = false;
                              break;
                         end;
               end;

          if not val then
               continue;

          ai_vehicle_attack_delay = Replace(ai_vehicle_attack_delay,rus_base, ai_vehicle_attack_delay[rus_base] - 0$1 );

          if ai_vehicle_attack_delay[rus_base] > 0$0 then
               continue;

          temp_list = [BaseUnderAttack(rus_base,-1),BaseUnderAttack(farm_base,-1)];
          if temp_list[2] and farm_base in ai_bases then
               continue;

          if temp_list[1] and rus_base in ai_bases then
               if farm_base in ai_bases then  //Farmer attacks alone then
                    begin
                         if farmer_attack_anyway_phase = 0 then
                              //if FilterAllUnits([[f_side,you],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]]]) > 0 then  //Doesn't make sense to attack if the player has no base
                                   farmer_attack_anyway_phase = 1  //If there is no base then what the heck. If the player is harassing the Russians just going outside Farmer's base could help
                              //else
                                   //continue;
                    end
               else
                    continue;
          //if ( BaseUnderAttack(rus_base,-1) and rus_base in ai_bases ) or ( BaseUnderAttack(farm_base,-1) and farm_base in ai_bases ) then
          //     continue;

          temp_list = [farm_base];
          if farmer_attack_anyway_phase = 0 then
               temp_list = temp_list ^ rus_base;

          for i in temp_list do
               begin
                    b = WorstFromListByList([ai_max_num_vehicles_defend[i],ai_max_num_vehicles_attack[i]],[ai_max_num_vehicles_defend[i],ai_max_num_vehicles_attack[i]]);
                    if ai_vehicles_defend[i] - UnitFilter(ai_imported_units[i],war_vehicle_filter) < b and i in ai_bases then
                         begin
                              val = false;
                              break;
                         end;
               end;

          if not val then
               continue;

          b = ai_taufield_vehicles[rus_base]+0;
          if farm_base in ai_bases then
               b = b + ai_taufield_vehicles[farm_base];

          if b < ai_max_num_taufield_vehicles[farm_base] and rus_base in ai_bases and CanRusConstructThis(ru_time_lapser,false) <> 2 and farmer_attack_anyway_phase = 0 then
               continue;

          if ai_implosion_vehicles[farm_base] < ai_max_num_implosion_vehicles[farm_base] and farm_base in ai_bases then
               continue;

          if farmer_attack_anyway_phase = 1 then
               continue;


          //Ok all are ready. We just (perhaps) need to export the Russian taufield vehicles to Farmer.
          if farm_base in ai_bases and rus_base in ai_bases and farmer_attack_anyway_phase = 0 then
               begin
                    temp_list = ai_units_to_export[rus_base] ^ ai_taufield_vehicles[rus_base];

                    //ai_taufield_vehicles = Replace(ai_taufield_vehicles,rus_base,[]);
                    for i in ai_taufield_vehicles[rus_base] do
                         RemoveVehicleFromVariables(rus_base,i,true);

                    ai_units_to_export = Replace(ai_units_to_export,rus_base,temp_list);

                    repeat
                    wait(0$1);
                    until UnitFilter(ai_units_to_export[rus_base],[[f_type,unit_vehicle],[f_weapon,ru_time_lapser]]) = 0;
               end;

          //Pick vehicles and drivers. Don't pick borrowed vehicles.
          //Picking drivers for the manual vehicles doesn't take remote control into consideration so
          //this will screw up if a base attacks with both manual and remote vehicles.
          //We presume taufield vehicles and implosion vehicles are NOT manually controlled.
          base_list = [];
          if rus_base in ai_bases and farmer_attack_anyway_phase = 0 then
               base_list = base_list ^ rus_base;
          if farm_base in ai_bases then
               base_list = base_list ^ farm_base;

          for b in base_list do
               begin
                    temp_list = [];
                    temp_list_2 = ai_vehicles_defend[b] diff UnitFilter(ai_imported_units[b],war_vehicle_filter);
                    temp_list_3 = [];
                    temp_list_4 = ai_mechanics_defend[b] diff ai_crane_driver[b];

                    for i = 1 to ai_max_num_vehicles_attack[b] do
                         begin
                              if temp_list_2 = 0 then
                                   break;

                              if GetControl(temp_list_2[1]) = control_manual then
                                   begin
                                        if temp_list_4 = 0 then
                                             continue;

                                        temp_list_3 = temp_list_3 ^ temp_list_4[1];
                                        RemoveHumanFromVariables(b,temp_list_4[1],false,false);
                                        temp_list_4 = Delete(temp_list_4,1);
                                   end;

                              temp_list = temp_list ^ temp_list_2[1];
                              RemoveVehicleFromVariables(b,temp_list_2[1],false);
                              temp_list_2 = Delete(temp_list_2,1);
                         end;
                    
                    ai_vehicles_attack = Replace(ai_vehicles_attack,b,temp_list);
                    ai_mechanics_attack = Replace(ai_mechanics_attack,b,temp_list_3);
               end;

          if farm_base in ai_bases then
               begin
                    temp_list = ai_vehicles_attack[farm_base] ^ ai_taufield_vehicles[farm_base] ^ ai_implosion_vehicles[farm_base];

                    //ai_taufield_vehicles = Replace(ai_taufield_vehicles,farm_base,[]);
                    //ai_implosion_vehicles = Replace(ai_implosion_vehicles,farm_base,[]);
                    for i in ai_taufield_vehicles[farm_base] ^ ai_implosion_vehicles[farm_base] do
                         RemoveVehicleFromVariables(farm_base,i,false);

                    ai_vehicles_attack = Replace(ai_vehicles_attack,farm_base,temp_list);
               end
          else
               if rus_base in ai_bases then  //should be the case
                    begin
                         temp_list = ai_vehicles_attack[rus_base] ^ ai_taufield_vehicles[rus_base];

                         //ai_taufield_vehicles = Replace(ai_taufield_vehicles,rus_base,[]);
                         for i in ai_taufield_vehicles[rus_base] do
                              RemoveVehicleFromVariables(rus_base,i,false);

                         ai_vehicles_attack = Replace(ai_vehicles_attack,rus_base,temp_list);
                    end;


          //Reset attack delay
          ResetVehicleAttackDelay(rus_base);
          farmer_attack_anyway_phase = 0;

          //Set attack strategies.
          //The attack strategy depends on where the player has build his/her base. Detect where the player has built a base.
          player_bases_areas = [];

          for i in [Ru_small_base,player_base_2,player_base_3,player_base_4,Ru_base,Farmer_base] do
               if FilterAllUnits([[f_side,you],[f_inarea,i],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]]]) > 0 then
                    player_bases_areas = player_bases_areas ^ i;

          //Farmer's attacking units either exit the base using the western or southern exit.
          farmer_attack_exit_point = Rand(1,2);


          for i in ai_vehicles_attack[rus_base] ^ ai_vehicles_attack[farm_base] do
               ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index,i,1);

          until false;
     end;

//Control the attack.
Every 0$1 do
     var base, init_attack_hexes, normal_attack_hexes, k, i, g, temp_list_3;
     var temp_unit, temp_list, temp_list_2, dist, temp_value, inside_ok, attacking_vehicles;
     var vehicle_dist, all_are_ready, random_rus, base_out_list, retreat_vehicles_list, retreat_mechanics_list, orig_ai_bases;
     begin
          vehicle_dist = 6;  //Max dist to attack hex for vehicles before proceeding to the next hex
          all_are_ready = [false,-1,false];  //True when all vehicles are ready to attack (manual vehicles have been manned).
          random_rus = Rand(1,2);
          base_out_list = [];
          retreat_vehicles_list = [[],[],[]];
          retreat_mechanics_list = [[],[],[]];
          orig_ai_bases = ai_bases;

          repeat
          wait(0$1);

          for base in orig_ai_bases do
               begin
                    if base = 2 then
                         continue;

                    if ( UnitFilter(ai_vehicles_attack[base],[[f_not,[f_control,control_manual]],[f_ok]]) = 0 and UnitFilter(ai_mechanics_attack[base],[f_ok]) = 0 ) or not base in ai_bases then
                         begin
                              base_out_list = base_out_list union base;
                              if ([1,3] diff base_out_list) = 0 then
                                   all_are_ready = [false,-1,false]
                              else
                                   all_are_ready = Replace(all_are_ready,base,true);

                              if base = 1 then
                                  random_rus = Rand(1,2);

                              //There could still be manual war vehicles out in the field. Just remove them. Other control type
                              //vehicles could come in handy again if the player is stupid enough to repair them.
                              ai_vehicles_attack = Replace(ai_vehicles_attack,base, UnitFilter(ai_vehicles_attack[base],[f_not,[f_control,control_manual]]) );

                              continue;
                         end
                    else
                         base_out_list = base_out_list diff base;

                    case base of
                         1: begin  //Russians
                              init_attack_hexes = [[65,72],[82,84]];
                              normal_attack_hexes = init_attack_hexes;

                              if Ru_small_base in player_bases_areas then
                                   normal_attack_hexes = normal_attack_hexes ^ [[93,94],[97,110],[93,94]];

                              normal_attack_hexes = normal_attack_hexes ^ [[95,85]];

                              if Farmer_base in player_bases_areas and random_rus = 1 then  //Attack Farmer base from the east
                                   normal_attack_hexes = normal_attack_hexes ^ [[89,69],[86,55],[92,46],[92,33],[103,33],[103,46],[92,46],[86,55],[89,69]];

                              normal_attack_hexes = normal_attack_hexes ^ [[105,83]];

                              if player_base_3 in player_bases_areas then
                                   normal_attack_hexes = normal_attack_hexes ^ [[121,89],[135,115],[121,89]];

                              normal_attack_hexes = normal_attack_hexes ^ [[117,80]];

                              if Farmer_base in player_bases_areas and random_rus = 2 then  //Attack Farmer base from the south
                                   normal_attack_hexes = normal_attack_hexes ^ [[116,65],[103,46],[103,33],[92,33],[92,46],[103,46],[116,65]];

                              normal_attack_hexes = normal_attack_hexes ^ [[126,75],[131,67],[146,83],[158,94],[161,108]];

                              //Back to base
                              normal_attack_hexes = normal_attack_hexes ^ [[148,94],[133,89],[120,86],[108,87],[95,85],[82,84]];  //Ends outside base so ordinary vehicle control code tells vehicles to go inside
                         end;
                         3: begin  //Farmer
                              init_attack_hexes = [];
                              normal_attack_hexes = init_attack_hexes;

                              if farmer_attack_exit_point = 1 then
                                   begin
                                        //Exit east
                                        normal_attack_hexes = normal_attack_hexes ^ [[87,52],[88,67]];

                                        if Ru_small_base in player_bases_areas then
                                             normal_attack_hexes = normal_attack_hexes ^ [[93,82],[93,94],[97,110],[93,94]];

                                        if Ru_base in player_bases_areas then
                                             normal_attack_hexes = normal_attack_hexes ^ [[93,82],[80,82],[65,72],[50,60],[52,72],[45,77],[39,62],[35,46],[50,60],[65,72],[80,82],[93,82]]
                                        else
                                             if Ru_small_base in player_bases_areas then
                                                  normal_attack_hexes = normal_attack_hexes ^ [[93,82]];

                                        normal_attack_hexes = normal_attack_hexes ^ [[104,80]];

                                        if player_base_3 in player_bases_areas then
                                             normal_attack_hexes = normal_attack_hexes ^ [[121,89],[135,115],[121,89]];

                                        normal_attack_hexes = normal_attack_hexes ^ [[117,80],[126,75],[142,82],[158,94],[161,108]];

                                        //Back to base
                                        normal_attack_hexes = normal_attack_hexes ^ [[151,91],[140,75],[125,65],[105,47]];
                                   end
                              else
                                   begin
                                        //Exit south
                                        normal_attack_hexes = normal_attack_hexes ^ [[116,62]];

                                        if player_base_4 in player_bases_areas or player_base_3 in player_bases_areas then
                                             begin
                                                  if player_base_4 in player_bases_areas then
                                                       begin
                                                            normal_attack_hexes = normal_attack_hexes ^ [[130,71],[146,83],[158,94],[161,108]];

                                                            if player_base_3 in player_bases_areas then
                                                                 normal_attack_hexes = normal_attack_hexes ^ [[148,94],[139,101],[130,115],[139,101],[148,94],[146,83],[130,71]]
                                                            else
                                                                 normal_attack_hexes = normal_attack_hexes ^ [[158,94],[146,83],[130,71]];
                                                       end
                                                  else
                                                       normal_attack_hexes = normal_attack_hexes ^ [[128,63],[143,75],[145,93],[139,101],[130,115],[139,101],[145,93],[133,83]]
                                             end;

                                        normal_attack_hexes = normal_attack_hexes ^ [[120,76],[113,82],[104,86]];

                                        if Ru_small_base in player_bases_areas then
                                             normal_attack_hexes = normal_attack_hexes ^ [[93,94],[97,110],[93,94]];

                                        if Ru_base in player_bases_areas then
                                             normal_attack_hexes = normal_attack_hexes ^ [[93,82],[80,82],[65,72],[50,60],[52,72],[45,77],[39,62],[35,46],[50,60],[65,72],[80,82],[93,82]]
                                        else
                                             normal_attack_hexes = normal_attack_hexes ^ [[96,76]];

                                        //Back to base
                                        normal_attack_hexes = normal_attack_hexes ^ [[88,66],[88,54],[98,46]];
                                   end;
                         end;
                    end;


                    //Check which vehicles should retreat to base (only manual vehicles).
                    //Only the Russians are using manual vehicles and they have limited spontaneous teleportation.
                    temp_list = UnitFilter(retreat_vehicles_list[base],[f_alive]);
                    for i in UnitFilter(ai_vehicles_attack[base],[f_control,control_manual]) diff retreat_vehicles_list[base] do
                         if GetLives(i) <= 250 then
                              temp_list = temp_list ^ i;

                    retreat_vehicles_list = Replace(retreat_vehicles_list,base,temp_list);


                    //Check which mechanics should retreat to base (on foot) (if they are not inside a vehicle and there are not enough
                    //vehicles for all mechanics then retreat).
                    temp_list = UnitFilter(retreat_mechanics_list[base],[f_alive]);
                    temp_list_2 = ai_mechanics_attack[base] diff retreat_mechanics_list[base];
                    for i = 1 to temp_list_2 - UnitFilter(ai_vehicles_attack[base],[[f_control,control_manual],[f_ok]]) do
                         begin
                              temp_unit = 0;
                              for k in temp_list_2 do
                                   if not IsInUnit(k) in ai_vehicles_attack[base] then
                                        begin
                                             temp_unit = k;
                                             break;
                                        end;

                              if temp_unit > 0 then
                                   begin
                                        temp_list = temp_list ^ temp_unit;
                                   end;
                         end;

                    retreat_mechanics_list = Replace(retreat_mechanics_list,base,temp_list);


                    //Make retreating vehicles and mechanics retreat to base.
                    //When they reach the base then remove them from the attacking variables and add them to the
                    //defending variables so they are taken properly care of (see every for defending mechanics above).
                    for i in retreat_vehicles_list[base] ^ retreat_mechanics_list[base] do
                         if IsInArea(i,GetBaseArea(base)) then
                              begin
                                   if GetType(i) = unit_vehicle then
                                        begin
                                             temp_list = ai_vehicles_attack[base] diff i;
                                             ai_vehicles_attack = Replace(ai_vehicles_attack,base,temp_list);

                                             case GetWeapon(i) of
                                                  ru_time_lapser: begin
                                                       temp_list = ai_taufield_vehicles[base] ^ i;
                                                       ai_taufield_vehicles = Replace(ai_taufield_vehicles,base,temp_list);
                                                  end;
                                                  ar_selfpropelled_bomb: begin
                                                       temp_list = ai_implosion_vehicles[base] ^ i;
                                                       ai_implosion_vehicles = Replace(ai_implosion_vehicles,base,temp_list);
                                                  end;
                                                  else begin
                                                       temp_list = ai_vehicles_defend[base] ^ i;
                                                       ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
                                                  end;
                                             end;

                                             temp_list = retreat_vehicles_list[base] diff i;
                                             retreat_vehicles_list = Replace(retreat_vehicles_list,base,temp_list);

                                             i = UnitsInside(i);
                                        end;

                                   if i > 0 then
                                        begin
                                             temp_list = ai_mechanics_attack[base] diff i;
                                             ai_mechanics_attack = Replace(ai_mechanics_attack,base,temp_list);

                                             temp_list = ai_mechanics_defend[base] ^ i;
                                             ai_mechanics_defend = Replace(ai_mechanics_defend,base,temp_list);

                                             temp_list = retreat_mechanics_list[base] diff i;
                                             retreat_mechanics_list = Replace(retreat_mechanics_list,base,temp_list);
                                        end;
                              end
                         else
                              ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);


                    //Make sure units inside war vehicles are attacking mechanics
                    inside_ok = true;
                    for i in UnitFilter(ai_vehicles_attack[base] diff retreat_vehicles_list[base],[[f_control,control_manual],[f_not,[f_empty]]]) do
                         begin
                              temp_unit = UnitsInside(i)[1];
                              if not temp_unit in ai_mechanics_attack[base] then
                                   begin
                                        ComExitVehicle(temp_unit);
                                        inside_ok = false;
                                   end;
                         end;


                    //Make sure mechanics are inside vehicles (should only be applicable for initialization)
                    temp_list = UnitFilter(ai_vehicles_attack[base],[[f_control,control_manual],[f_ok],[f_empty]]);
                    if temp_list > 0 then
                         begin
                              temp_list_2 = UnitFilter(ai_mechanics_attack[base] diff retreat_mechanics_list[base],[f_not,[f_driving]]);
                              for i in temp_list do
                                   begin
                                        if temp_list_2 = 0 then
                                             break;  //Should never be applicable

                                        temp_unit = AllNearestUnitToUnit(temp_list_2,i);

                                        k = IsInUnit(temp_unit);
                                        if k <> i then
                                             case GetType(k) of
                                                  unit_vehicle: ComExitVehicle(temp_unit);
                                                  unit_building: ComExitBuilding(temp_unit);
                                                  else ComEnterUnit(temp_unit,i);
                                             end;

                                        temp_list_2 = temp_list_2 diff temp_unit;
                                   end;
                         end
                    else
                         if inside_ok then
                              all_are_ready = Replace(all_are_ready,base,true);


                    if false in all_are_ready then
                         continue;

                    attacking_vehicles = ai_vehicles_attack[base] diff retreat_vehicles_list[base];


                    //Check what units are ready to go for the next hex.
                    //Don't spread too far.
                    //If we have implosion and/or taufield vehicles then they should be in front.
                    //Don't wait for ru_rocket vehicles (they have special attack, see below).
                    temp_list_2 = [9999999,9999999];
                    for i in UnitFilter(attacking_vehicles,[[f_not,[f_weapon,ru_time_lapser]],[f_not,[f_weapon,ar_selfpropelled_bomb],[f_not,[f_weapon,ru_rocket]]],[f_ok]]) do
                         if ai_attacking_unit_hex_index[i] < temp_list_2[1] then
                              temp_list_2 = Replace(temp_list_2,1,ai_attacking_unit_hex_index[i]);

                    for i in UnitFilter(attacking_vehicles,[[f_or,[f_weapon,ru_time_lapser],[f_weapon,ar_selfpropelled_bomb]],[f_ok]]) do
                         if ai_attacking_unit_hex_index[i] < temp_list_2[2] then
                              temp_list_2 = Replace(temp_list_2,2,ai_attacking_unit_hex_index[i]);

                    if temp_list_2[2] <= normal_attack_hexes and temp_list_2[2] > 1 then
                         begin
                              temp_list = [normal_attack_hexes[temp_list_2[2]-1],normal_attack_hexes[temp_list_2[2]]];
                              k = AI_GetTurnDirection(temp_list[1][1],temp_list[1][2],temp_list[2][1],temp_list[2][2]);

                              dist = 9999999;
                              for i in UnitFilter(attacking_vehicles,[[f_or,[f_weapon,ru_time_lapser],[f_weapon,ar_selfpropelled_bomb]],[f_ok]]) do
                                   begin
                                        g = GetDistUnitXY(i,temp_list[1][1],temp_list[1][2]);
                                        if g < dist then
                                             begin
                                                  dist = g;
                                                  temp_list_3 = [GetX(i),GetY(i)];
                                             end;
                                   end;
                         end
                    else
                         k = -1;

                    for i in attacking_vehicles do
                         if ai_attacking_unit_hex_index[i] <= normal_attack_hexes then
                              begin
                                   temp_value = false;
                                   if ai_attacking_unit_hex_index[i] + 1 <= normal_attack_hexes then
                                        if normal_attack_hexes[ai_attacking_unit_hex_index[i]+1] in init_attack_hexes then
                                             temp_value = true;

                                   if not temp_value then
                                     if not GetWeapon(i) in [ru_time_lapser,ar_selfpropelled_bomb] then
                                        begin
                                             temp_value := ai_attacking_unit_hex_index[i] + 1 <= temp_list_2[1] + 1 and ai_attacking_unit_hex_index[i] + 1 <= temp_list_2[2];

                                             if temp_value and ai_attacking_unit_hex_index[i] + 1 = temp_list_2[2] and k <> -1 then
                                                  begin
                                                      { g = 4;
                                                       case k of
                                                            0: begin
                                                                 if GetY(i) - g < temp_list_3[2] then
                                                                      temp_value = false;
                                                            end;
                                                            1: begin
                                                                 if GetX(i) + g > temp_list_3[1] then
                                                                      temp_value = false;
                                                            end;
                                                            2: begin
                                                                 if GetX(i) + g > temp_list_3[1] or GetY(i) + g > temp_list_3[2] then
                                                                      temp_value = false;
                                                            end;
                                                            3: begin
                                                                 if GetY(i) + g > temp_list_3[2] then
                                                                      temp_value = false;
                                                            end;
                                                            4: begin
                                                                 if GetX(i) - g < temp_list_3[1] then
                                                                      temp_value = false;
                                                            end;
                                                            5: begin
                                                                 if GetX(i) - g < temp_list_3[1] or GetY(i) - g < temp_list_3[2] then
                                                                      temp_value = false;
                                                            end;
                                                       end; }
                                                       if not BehindLine(i,temp_list_3[1],temp_list_3[2],k,4) then
                                                            temp_value = false;
                                                  end;
                                        end
                                   else
                                        begin
                                             temp_value := ai_attacking_unit_hex_index[i] + 1 <= temp_list_2[1] + 2 and ai_attacking_unit_hex_index[i] + 1 <= temp_list_2[2] + 1;
                                        end;

                                   if GetDistUnitXY(i,normal_attack_hexes[ai_attacking_unit_hex_index[i]][1],normal_attack_hexes[ai_attacking_unit_hex_index[i]][2]) <= vehicle_dist and temp_value then
                                        begin
                                             ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index,i, ai_attacking_unit_hex_index[i]+1 );
                                        end;

                                   if ai_attacking_unit_hex_index[i] > normal_attack_hexes then
                                        begin
                                             //End of the line.
                                             if GetType(i) = unit_vehicle then
                                                  begin
                                                       temp_list = ai_vehicles_attack[base] diff i;
                                                       ai_vehicles_attack = Replace(ai_vehicles_attack,base,temp_list);

                                                       attacking_vehicles = attacking_vehicles diff i;

                                                       case GetWeapon(i) of
                                                            ru_time_lapser: begin
                                                                 temp_list = ai_taufield_vehicles[base] ^ i;
                                                                 ai_taufield_vehicles = Replace(ai_taufield_vehicles,base,temp_list);
                                                            end;
                                                            ar_selfpropelled_bomb: begin
                                                                 temp_list = ai_implosion_vehicles[base] ^ i;
                                                                 ai_implosion_vehicles = Replace(ai_implosion_vehicles,base,temp_list);
                                                            end;
                                                            else begin
                                                                 temp_list = ai_vehicles_defend[base] ^ i;
                                                                 ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
                                                            end;
                                                       end;

                                                       i = UnitsInside(i);
                                                  end;
                                                             
                                             if i > 0 then
                                                  begin
                                                       temp_list = ai_mechanics_attack[base] diff i;
                                                       ai_mechanics_attack = Replace(ai_mechanics_attack,base,temp_list);

                                                       temp_list = ai_mechanics_defend[base] ^ i;
                                                       ai_mechanics_defend = Replace(ai_mechanics_defend,base,temp_list);
                                                  end;
                                        end;
                              end;


                    //Make the attack
                    for i in attacking_vehicles do
                         begin
                              //If the unit is shooting at a unit which is Ok and there is a dying human
                              //unit within the same distance or closer than the current target then
                              //kill off that human unit first.
                              {temp_value = GetTaskList(i);
                              if temp_value > 0 then
                                        if temp_value[1][1] = '^' then  //'^' is auto attack
                                             begin
                                                  //The unit is auto attacking because it has met an enemy.
                                                  temp_unit = Attacks(i);
                                                  if temp_unit > 0 and IsOk(temp_unit) then
                                                       begin
                                                            temp_value = GetDistUnits(i,temp_unit);
                                                            temp_list = FilterAllUnits([[f_enemy,GetBaseSide(base)],[f_type,unit_human],[f_not,[f_ok]],[f_dist,i,temp_value]]);
                                                            if temp_list > 0 then
                                                                 ComAttackUnit(i,temp_list[1]);

                                                            continue;
                                                       end;
                                             end;}

                              //If the unit is near the base then start shooting at humans if possible - else vehicles and buildings.
                              //Shoot at nearest non-human unit (not so important with human units since we just agressive move).
                              if GetWeapon(i) = ru_rocket and not normal_attack_hexes[ai_attacking_unit_hex_index[i]] in init_attack_hexes then
                                   begin
                                        //We cheat a little. To fully exploit the range of ru_rocket we scan the area around the vehicle for buildings
                                        //and attack ground if we find one.
                                        //Range of ru_rocket is approximately 22 hexes.
                                        temp_list = FilterAllUnits([[f_enemy,GetBaseSide(base)],[f_type,unit_building],[f_dist,i,30]]);
                                        if temp_list > 0 then
                                             begin
                                                  temp_unit = AllNearestUnitToUnit(temp_list,i);
                                                  ComAttackPlace(i,GetX(temp_unit),GetY(temp_unit));

                                                  continue;
                                             end;
                                   end;
                              
                              if GetWeapon(i) = ar_selfpropelled_bomb then
                                   k = true  //Blow up everything muhahaha!
                              else
                                   k = false;

                              if not k and not normal_attack_hexes[ai_attacking_unit_hex_index[i]] in init_attack_hexes then
                                   begin
                                        temp_list = FilterAllUnits([[f_side,you],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]]]);

                                        if temp_list > 0 then
                                             begin
                                                  temp_unit = AllNearestUnitToUnit(temp_list,i);
                                                  if GetBType(temp_unit) = b_depot then
                                                       dist = 26  //build distance for depot
                                                  else
                                                       dist = 34; //build distance for warehouse

                                                  k = GetDistUnits(i,temp_unit) <= dist;
                                             end;

                                        if not k then
                                             begin
                                                  temp_list = FilterAllUnits([[f_side,you],[f_type,unit_building]]);
                                                  if temp_list > 0 then
                                                       begin
                                                            temp_unit = AllNearestUnitToUnit(temp_list,i);

                                                            k = GetDistUnits(i,temp_unit) <= 20;
                                                       end;
                                             end;
                                   end;
                                 
                              if k then
                                   begin
                                        temp_list = FilterAllUnits([[f_enemy,GetBaseSide(base)],[f_type,unit_human],[f_dist,i,20],[f_see,GetBaseSide(base)]]);
                                        if temp_list > 0 then
                                             begin
                                                  //Finish off dying humans as first priority
                                                  temp_list_2 = UnitFilter(temp_list,[f_not,[f_lives,250]]);
                                                  if temp_list_2 > 0 then
                                                       temp_list = temp_list_2;

                                                  temp_unit = AllNearestUnitToUnit(temp_list,i);
                                                  
                                                  if GetWeapon(i) = ar_selfpropelled_bomb then
                                                       ComAttackUnit(i,temp_unit)
                                                  else
                                                       if GetWeapon(i) = ru_time_lapser then
                                                            begin
                                                                 //Don't go too near. Could be damaged by our own units or caught in the explosion
                                                                 //from an implosion vehicle or a dying unit.
                                                                 dist = GetDistUnits(i,temp_unit);
                                                                 if dist > 8 then
                                                                      ComMoveXY(i,GetX(temp_unit),GetY(temp_unit))
                                                                 else
                                                                      if dist < 6 then
                                                                           AI_GetAwayFromXY(i,GetX(temp_unit),GetY(temp_unit),6,false);
                                                            end
                                                       else
                                                            if GetLives(temp_unit) > 250 then
                                                                 ComAgressiveMove(i,GetX(temp_unit),GetY(temp_unit))
                                                            else
                                                                 ComAttackUnit(i,temp_unit);
                                             end
                                        else
                                             begin
                                                  temp_list = FindNonhumansNearUnit(GetBaseSide(base),i,20,true);
                                                  if temp_list > 0 then
                                                       begin
                                                            temp_unit = AllNearestUnitToUnit(temp_list,i);
                                                           
                                                            if GetWeapon(i) = ar_selfpropelled_bomb then
                                                                 ComAttackUnit(i,temp_unit)
                                                            else
                                                                 if GetWeapon(i) = ru_time_lapser then
                                                                      begin
                                                                           //Don't go too near. Could be damaged by our own units or caught in the explosion
                                                                           //from an implosion vehicle or a dying unit.
                                                                           dist = GetDistUnits(i,temp_unit);
                                                                           if dist > 8 then
                                                                                ComMoveXY(i,GetX(temp_unit),GetY(temp_unit))
                                                                           else
                                                                                if dist < 6 then
                                                                                     AI_GetAwayFromXY(i,GetX(temp_unit),GetY(temp_unit),6,false);
                                                                      end
                                                                 else
                                                                      ComAgressiveMove(i,GetX(temp_unit),GetY(temp_unit));
                                                       end
                                                  else
                                                       begin
                                                            temp_list = FindNonhumansNearUnit(GetBaseSide(base),i,20,false);
                                                            if temp_list > 0 then
                                                                 begin
                                                                      temp_unit = AllNearestUnitToUnit(temp_list,i);

                                                                      if GetWeapon(i) = ru_time_lapser then
                                                                           begin
                                                                                //Don't go too near. Could be damaged by our own units or caught in the explosion
                                                                                //from an implosion vehicle or a dying unit.
                                                                                dist = GetDistUnits(i,temp_unit);
                                                                                if dist > 8 then
                                                                                     ComMoveXY(i,GetX(temp_unit),GetY(temp_unit))
                                                                                else
                                                                                     if dist < 6 then
                                                                                          AI_GetAwayFromXY(i,GetX(temp_unit),GetY(temp_unit),6,false);
                                                                           end
                                                                      else
                                                                           begin
                                                                                ComAttackUnit(i,temp_unit);
                                                                           end;
                                                                 end
                                                            else
                                                                 k = false;
                                                       end;
                                             end;

                                        if k then  //found something to shoot at
                                             continue;
                                   end;

                              //Movement to enemy base
                              if GetDistUnitXY(i,normal_attack_hexes[ai_attacking_unit_hex_index[i]][1],normal_attack_hexes[ai_attacking_unit_hex_index[i]][2]) > vehicle_dist then
                                   if not normal_attack_hexes[ai_attacking_unit_hex_index[i]] in init_attack_hexes then
                                        ComAgressiveMove(i,normal_attack_hexes[ai_attacking_unit_hex_index[i]][1],normal_attack_hexes[ai_attacking_unit_hex_index[i]][2])
                                   else
                                        ComMoveXY(i,normal_attack_hexes[ai_attacking_unit_hex_index[i]][1],normal_attack_hexes[ai_attacking_unit_hex_index[i]][2]);
                         end;
               end;

          until false;
     end;
Export Function FindNonhumansNearUnit(side,un,dist,only_dangerous);
     var weapon_list, temp_list, i, btype, b, val;
     begin
          temp_list = FilterAllUnits([[f_enemy,side],[f_not,[f_type,unit_human]],[f_dist,un,dist],[f_see,side]]);

          if only_dangerous then
               begin
                    result = DangerousUnits(temp_list);
               end
          else
               result = temp_list
     end;
Function DangerousUnits(list);
     var weapon_list, i, btype, b, val;
     begin
          weapon_list = [us_machine_gun,us_light_gun,us_gatling_gun,us_double_gun,us_heavy_gun,us_rocket_launcher,
                                   us_siberium_rocket,us_laser,us_double_laser,
                                   ar_multimissile_ballista,ar_light_gun,ar_double_machine_gun,ar_gatling_gun,
                                   ar_flame_thrower,ar_gun,ar_rocket_launcher,ar_selfpropelled_bomb,
                                   ru_heavy_machine_gun,ru_gatling_gun,ru_gun,ru_rocket_launcher,ru_heavy_gun,
                                   ru_rocket,ru_siberium_rocket,ru_time_lapser];

                    result = [];

                    for i in list do
                         case GetType(i) of
                              unit_human: begin
                                   if not IsOk(i) then  //IsOk does take stimulation drugs into consideration
                                        continue;

                                   result = result ^ i;
                              end;
                              unit_vehicle: begin
                                   if not IsOk(i) then
                                        continue;

                                   case GetControl(i) of
                                        control_manual,control_rider: begin
                                             if UnitsInside(i) = 0 then
                                                  continue;
                                        end;
                                        control_remote: begin
                                             if IsControledBy(i) = 0 then
                                                  continue;
                                        end;
                                        control_computer,control_apeman: begin
                                        end;
                                   end;

                                   if GetWeapon(i) in weapon_list then
                                        result = result ^ i;
                              end;
                              unit_building: begin
                                   if not IsOk(i) then
                                        continue;

                                   btype = GetBType(i);

                                   case btype of
                                        b_turret: begin
                                        end;
                                        b_bunker,b_breastwork,b_armoury,b_barracks,b_fort: begin
                                             if UnitsInside(i) = 0 then
                                                  continue;
                                        end;
                                        else
                                             continue;
                                   end;

                                   if btype in [b_bunker,b_turret] then
                                        if not GetBWeapon(i) in weapon_list then
                                             continue
                                        else
                                             begin
                                                  b = GetBase(i);
                                                  val = false;

                                                  if b = 0 then
                                                       val = true
                                                  else
                                                       if GetEnergy(b)[4] = 0 then
                                                            val = true;

                                                  if val then
                                                       continue;
                                             end;

                                   result = result ^ i;
                              end;
                         end;
     end;


//The computers's vehicles never seem to run completely out of fuel...
Every 0$5 do
     var base, i;
     begin
          for base in ai_bases do
               for i in (ai_vehicles_attack[base] ^ ai_vehicles_defend[base] ^ ai_cargo_bay[base] ^ ai_crane[base] ^ ai_taufield_vehicles[base] ^ ai_implosion_vehicles[base] ^ ai_control_tower_vehicles[base]) diff 0 do
                    if GetFuel(i) < 10 and GetEngine(i) = engine_combustion then
                         SetFuel(i,10);

          enable;
     end;


//Another cheat. The entrance to the major Russian base is narrow so outgoing and incoming vehicles may block for
//each other. Instead of doing some fancy routing of vehicles we cheat. If a vehicle gets stuck in this area
//and is trying to get into the base then "teleport" it into the base.
Every 0$1.4 do
     var base, i, val, un;
     var veh_hex_map;
     begin
          base = 1;
          veh_hex_map = [];  //Index is vehicle id, value is hex and time

          repeat
          wait(0$1);

          if not base in ai_bases then
               exit;

          for i in (ai_vehicles_attack[base] ^ ai_vehicles_defend[base] ^ ai_cargo_bay[base] ^ ai_crane[base] ^ ai_taufield_vehicles[base] ^ ai_implosion_vehicles[base] ^ ai_control_tower_vehicles[base]) diff 0 do
               begin
                    val = false;
                    if veh_hex_map < i then
                         val = true
                    else
                         if veh_hex_map[i] = 0 then
                              val = true;

                    if val then
                         veh_hex_map = Replace(veh_hex_map,i,[0,0,0$0]);

                    if IsInArea(i,rus_veh_stuck_area) then
                         begin
                              if veh_hex_map[i][1] = 0 and veh_hex_map[i][2] = 0 then
                                   veh_hex_map = Replace(veh_hex_map,i,[GetX(i),GetY(i),0$0])
                              else
                                   if GetDistUnitXY(i,veh_hex_map[i][1],veh_hex_map[i][2]) > 2 then
                                        veh_hex_map = Replace(veh_hex_map,i,[GetX(i),GetY(i),0$0])
                                   else
                                        begin
                                             veh_hex_map = Replace(veh_hex_map,i,[veh_hex_map[i][1],veh_hex_map[i][2],veh_hex_map[i][3]+0$1]);

                                             if veh_hex_map[i][3] >= 0$8 and not See(you,i) then  //vehicle is stuck (and the player is not looking)
                                                  begin
                                                       val = GetTaskList(i);

                                                       if val = 0 then  //Just standing there...
                                                            begin
                                                                 veh_hex_map = Replace(veh_hex_map,i,[GetX(i),GetY(i),0$0]);
                                                            end
                                                       else
                                                            begin
                                                                 if val[1][2] = 0 and val[1][3] = 0 then  //bad task
                                                                      begin
                                                                           veh_hex_map = Replace(veh_hex_map,i,[GetX(i),GetY(i),0$0]);
                                                                      end
                                                                 else
                                                                      if not InArea(val[1][2],val[1][3],GetBaseArea(base)) then  //not headed into the base
                                                                           begin
                                                                                veh_hex_map = Replace(veh_hex_map,i,[GetX(i),GetY(i),0$0]);
                                                                           end
                                                                      else
                                                                           begin
                                                                                //Do "teleport"
                                                                                RemoveUnit(i);

                                                                                if not PlaceUnitXYR(i,val[1][2],val[1][3],7,false) then  //couldn't place the unit again
                                                                                     begin
                                                                                          un = UnitsInside(i);
                                                                                          if un > 0 then
                                                                                               begin
                                                                                                    RemoveHumanFromVariables(base,un[1],true,true);
                                                                                                    DestroyUnit(un[1]);
                                                                                               end;

                                                                                          RemoveVehicleFromVariables(base,i,true);
                                                                                          DestroyUnit(i);
                                                                                     end;

                                                                                veh_hex_map = Replace(veh_hex_map,i,[0,0,0$0]);  //reset
                                                                           end;
                                                            end;
                                                  end;
                                        end;
                         end
                    else
                         begin
                              veh_hex_map = Replace(veh_hex_map,i,[0,0,0$0]);  //reset
                         end;
               end;

          until false;
     end;


//Automatic cargo bay
Every 0$1+0$0.5 do
     var base, area_list, area, c, temp_list, crates_list, b, temp_value;
     var refueling;
     begin
          refueling = [false,false,false];

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if ai_cargo_bay[base] = 0 then
                         continue;

                    //If cargo bay is damaged and inside the base then do nothing (mechanics will repair it).
                    //If cargo bay is outside the base and somewhat damaged then pull back to base.
                    temp_value = GetLives(ai_cargo_bay[base]);

                    area = GetBaseArea(base);

                    if IsInArea(ai_cargo_bay[base],area) then
                         begin
                              if temp_value < 1000 then
                                   continue;
                         end
                    else
                         if temp_value < 600 then
                              begin
                                   if IsLive(ai_depot[base]) then
                                        ComGive(ai_cargo_bay[base],ai_depot[base])
                                   else
                                        ComMoveXY(ai_cargo_bay[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);

                                   continue;
                              end;

                    //Refuel if necessary
                    if GetEngine(ai_cargo_bay[base]) = engine_combustion then
                         begin
                              c = GetFuel(ai_cargo_bay[base]);
                              if c > 90 or not IsOk(ai_depot[base]) then
                                   refueling = Replace(refueling,base,false)
                              else
                                   if c < 25 or refueling[base] then
                                        begin
                                             ComMoveUnit(ai_cargo_bay[base],ai_depot[base]);
                                             AddComRefuel(ai_cargo_bay[base],ai_depot[base]);
                                             refueling = Replace(refueling,base,true);

                                             continue;
                                        end;
                         end;

                    //Determine which areas to check for crates
                    case base of
                         1: begin
                              area_list = [ru_crate_safe_area];

                              if FilterAllUnits([[f_side,you],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]],[f_inarea,ru_small_base]]) = 0 then  //Player haven't taken over the small Russian base
                                   area_list = area_list ^ ru_crate_relativesafe_area;
                         end;
                         2: area_list = [];
                         3: begin
                              area_list = [ar_crate_safe_area,ru_crate_safe_area];

                              if num_farmer_cargo_bays_destroyed <= [0,1,3][difficulty] then
                                   area_list = area_list ^ ar_crate_relativesafe_area;

                              if FilterAllUnits([[f_side,you],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]],[f_inarea,ru_small_base]]) = 0 then  //Player haven't taken over the small Russian base
                                   area_list = area_list ^ ru_crate_relativesafe_area;
                         end;
                    end;

                    //Check for crates in the areas
                    crates_list = [];
                    for b in area_list do
                         begin
                              crates_list = crates_list ^ GetListOfCratesInArea_ForGathering(base,b);
                         end;

                    //If there are any crates then collect them - else stay inside the base.
                    if crates_list > 0 and ai_depot[base] > 0 then
                         begin
                              //find the closest crate
                              temp_list = [];
                              for c in crates_list do
                                   temp_list = temp_list ^ GetDistUnitXY(ai_cargo_bay[base],c[1],c[2]);
                              temp_list = WorstFromListByList(crates_list,temp_list);

                              ComCollect(ai_cargo_bay[base],temp_list[1],temp_list[2]);
                         end
                    else
                         if IsOk(ai_depot[base]) and Carry(ai_cargo_bay[base]) then
                              ComGive(ai_cargo_bay[base],ai_depot[base])
                         else
                              if not IsInArea(ai_cargo_bay[base],area) then
                                   if IsOk(ai_depot[base]) then
                                        ComGive(ai_cargo_bay[base],ai_depot[base])
                                   else
                                        ComMoveXY(ai_cargo_bay[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
               end;

          until false;
     end;


//Scientists
//If a scientist is wounded them pull him/her back. Else heal what people needs healing. Else stay inside a lab (if no lab is Ok then help
//construct buildings).
Every 0$1+0$0.7 do
     var side, i, scientists_list, temp_list, temp_unit, base, k, temp_list_3, area;
     begin
          for base in ai_bases do
               begin
                    side = GetBaseSide(base);

                    scientists_list = ai_scientists[base] diff ai_heal_these_humans[base];


                    //Kozlov stays in one of the labs.
                    if base in [1,3] then
                         scientists_list = scientists_list diff Kozlov;

                    if base in [1,3] and IsLive(Kozlov) and Kozlov in ai_scientists[base] and not Kozlov in ai_heal_these_humans[base] and not kozlov_trying_to_escape then
                         begin
                              if GetLives(Kozlov) <= 500 then
                                   begin
                                        temp_list = ai_heal_these_humans[base] ^ Kozlov;
                                        ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
                                   end
                              else
                                   DistributeHumansToBuildings(base,[Kozlov], UnitFilter(ai_labs[base],[[f_ok],[f_not,[f_constructed]]]),
                                   0,6,true,true);
                         end;


                    //Identify scientists who need healing
                    temp_list = ai_heal_these_humans[base];
                    i = 1;
                    while i <= scientists_list do
                         begin
                              if GetLives(scientists_list[i]) <= 700 then
                                   begin
                                        temp_list = temp_list ^ scientists_list[i];
                                        scientists_list = Delete(scientists_list,i);
                                        continue;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Update people who need healing. People at full HP or people inside a unit (relevant for soldiers and mechanics)
                    //will not receive healing.
                    temp_list = [];
                    for i in ai_heal_these_humans[base] do
                         if GetLives(i) < 1000 and IsInUnit(i) = 0 then
                              temp_list = temp_list ^ i;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Control people who need healing. Make 'em retreat to the human pullback hex.
                    for i in ai_heal_these_humans[base] do
                         begin
                              if i = Kozlov and kozlov_trying_to_escape then
                                   continue;

                              if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                                   ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                         end;


                    if scientists_list = 0 then
                         continue;


                    //Heal people. At least one scientist for each human if possible.
                    //Only heal people inside the base.
                    if ai_heal_these_humans[base] > 0 then
                         begin
                              area = GetBaseArea(base);
                              temp_list = UnitFilter(ai_heal_these_humans[base],[f_inarea,area]);

                              if temp_list > 0 then
                                   begin
                                        scientists_list = GetHumansOutOfUnits(scientists_list);

                                        repeat
                                             i = 1;
                                             while i <= temp_list do
                                                  begin
                                                       if scientists_list = 0 then
                                                            break;

                                                       temp_unit = NearestUnitToUnit(scientists_list,temp_list[i]);
                                                       ComHeal(temp_unit,temp_list[i]);
                                                       scientists_list = scientists_list diff temp_unit;

                                                       i = i + 1;
                                                  end;

                                        until scientists_list = 0;
                                   end;
                         end;


                    //Enter and stay in lab
                    //!!!!!!!!!!!!!!!!
                    //CAPACITY 5 BECAUSE OF KOZLOV
                    //!!!!!!!!!!!!!!!!
                    DistributeHumansToBuildings(base,scientists_list, UnitFilter(ai_labs[base],[[f_ok],[f_not,[f_constructed]]]),
                         class_scientistic,[5,6,5][base],true,false);
               end;

          enable;
     end;