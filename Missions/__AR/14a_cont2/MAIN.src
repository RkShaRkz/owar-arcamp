
Export testing;              

Export you, russians, nature, you_alt, farmer_side, mines_side, russians_alt;
       
Export Heike, Olaf, Sonya, Oswald, Ralph, Kowalski, Suze, MarkB, Kurt, Martin, Louis, Khattam;
Export Farmer, Gordon, Willard;
Export Kozlov;

Export ai_bases;
Export ai_soldiers, ai_attacking_soldiers, ai_engineers, ai_mechanics_defend, ai_mechanics_attack, ai_scientists, ai_attacking_scientists;
Export ai_apemen_engineers, ai_excepted_soldiers, ai_depot, ai_labs, ai_facts, ai_armouries, ai_bunkers, ai_turrets, ai_oil_mine, ai_siberite_mines;
Export ai_fact_extensions, ai_power_plants, ai_control_tower, ai_teleporter, ai_buildings_locations, ai_captured_buildings;
Export ai_vehicles_defend, ai_vehicles_attack, ai_retreating_vehicles_defend, ai_vehicles_being_repaired, ai_refuel_vehicles_list;
Export ai_vehicle_pullback_hexes, ai_human_pullback_hex, ai_building_under_construction, ai_heal_these_humans, ai_all_buildings;
Export ai_building_constructor, ai_vehicle_being_moved, ai_vehicles_having_been_moved, ai_upcoming_building_data, ai_cannot_rebuild_these_buildings;
Export ai_near_base_dist{, ai_vehicle_attack_delay, ai_human_attack_delay}, ai_cargo_bay, ai_cargo_bay_under_construction;
Export ai_cargo_bay_destroy_tick, ai_crane, ai_crane_under_construction, ai_crane_destroy_tick, ai_crane_is_being_repaired;
Export ai_crane_driver, ai_attacking_unit_hex_index, ai_retreating_attacking_humans, ai_control_tower_vehicles;
Export ai_teleporter_exit_placed, ai_excepted_buildings, ai_fact_extension_replace_location, ai_dismantle_these_buildings;
Export ai_units_to_export, ai_exported_units, ai_imported_units, ai_taufield_vehicles, ai_implosion_vehicles;
Export ai_facts_with_ext_rebuild_map;
Export ai_time_shift_data, ai_time_shift_hexes, ai_time_shift_hexes_underway;
Export ai_contact_time, ai_attack_ground_info_initial, ai_attack_ground_info_sustain;

//Variables used by computer level up system, cf. module "Functions", function "InitComputerLvlSystem".
Export computer_level_features_1, ai_max_num_vehicles_defend, ai_max_num_vehicles_attack, ai_max_num_taufield_vehicles;
Export ai_max_num_implosion_vehicles, ai_human_attack_delay, ai_vehicle_attack_delay, computer_level_features_2;
Export base_time_features_1, base_time_features_2, do_upgrade_armoury;

//Constants used by computer level up system, cf. module "Functions", function "InitComputerLvlSystem".
Export cl_building, cl_rus_veh_defend, cl_rus_veh_attack, cl_rus_taufield_veh, cl_ar_implosion_veh, cl_ar_veh_attack, cl_attack_time;
Export cl_ar_veh_defend;

Export num_farmer_cargo_bays_destroyed, all_mines_hexes, farmer_defence_mines_centerhexes, farmer_defence_num_mines;
Export farmer_mine_guy, farmer_defence_mines_hexes, war_vehicle_filter, player_bases_areas;
Export farmer_attack_exit_point, buildings_except_from_lvlup, farmer_attack_anyway_phase;

Export hiding_player_units, hiding_player_units_found, rus_obj_given_before_survivors_found, heike_farmer_dialogue_done, kozlov_captured;
Export kozlov_has_teleported, kozlov_escaped, kozlov_teleport_event_over, farmer_vehicle, farmer_has_teleported, farmer_luring_used;
Export num_damaged_or_destroyed_buildings_farmer_base, time_determined_situation, russians_defeated, farmer_defeated;
Export heike_farmer_dialogue_started, time_that_has_passed, kozlov_trying_to_escape, kozlov_gained, Ralph_alive;


Starting
begin
     RandomizeAll;
     ResetFog;

     testing = false;  //Testing mission or real campaign?

     ai_bases = [1,2,3];  //1 = Russian main base, 2 = Small Russian base, 3 = Farmer base
     ai_soldiers = [[],[],[]];  //Soldiers for computer sides
     ai_attacking_soldiers = [[],[],[]];  //Soldiers who are attacking
     ai_excepted_soldiers = [[],[],[]];  //Soldiers who should not be controlled by the ordinary soldier control mechanism.
     ai_engineers = [[],[],[]]; //Engineers for computer sides
     ai_mechanics_defend = [[],[],[]];  //Mechanics for computer sides (in the base)
     ai_mechanics_attack = [[],[],[]];  //Mechanics for computer sides (attacking in vehicles)
     ai_scientists = [[],[],[]];  //Scientists for computer sides
     ai_attacking_scientists = [[],[],[]];  //Scientists who are attacking
     ai_apemen_engineers = [[],[],[]];  //Apemen engineers for computer sides
     ai_depot = [0,0,0];  //The depot of each computer side
     ai_labs = [[],[],[]];  //The lab of each computer side
     ai_facts = [[],[],[]];  //The factory of each computer side
     ai_armouries = [[],[],[]];  //The armouries of each computer side
     ai_bunkers = [[],[],[]];  //The bunkers of each computer side
     ai_turrets = [[],[],[]];  //The turrets of each computer side
     ai_oil_mine = [0,0,0];  //The oil mine of each computer side
     ai_siberite_mines = [[],[],[]];  //The siberite mines of each computer side/base
     ai_fact_extensions = [[],[],[]];  //The factory extensions of each computer side
     ai_power_plants = [[],[],[]];  //The power plants of each computer side
     ai_control_tower = [0,0,0];  //Control tower (American) of each side
     ai_teleporter = [0,0,0];  //Teleporter (Russian) of each base
     ai_buildings_locations = [[],[],[]];  //The locations of all buildings for each side. Data looking like [x,y,dir,btype,labkind1,labkind2,bweapon] (CF. function "ScanBuildings")
     ai_captured_buildings = [[],[],[]];  //Identifiers of the buildings each base has lost because someone captured them. Will be recaptured if possible.
     ai_vehicles_defend = [[],[],[]];  //Vehicles of each computer side (in the base)
     ai_vehicles_attack = [[],[],[]];  //Vehicles of each computer side (attacking the enemy)
     ai_retreating_vehicles_defend = [[],[],[]];  //The defending vehicles which need to retreat during an attack on the base.
     ai_vehicles_being_repaired = [[],[],[]];  //The vehicles which are going to be or are being repaired.
     ai_refuel_vehicles_list = [[],[],[]];  //(defending) vehicles needing to be refueled
     ai_vehicle_pullback_hexes = [ [[33,61],[29,38],[31,44],[47,61]],
                                   [],
                                   [ [87,33],[91,34],[97,36] ]];  //Hexes where vehicles can be parked
     ai_human_pullback_hex = [[44,66],[94,104],[99,45]];  //Hex where humans can safely retreat to (center of the base)
     ai_building_under_construction = [0,0,0];  //Identifier of building under construction (only 1 building at a time)
     ai_heal_these_humans = [[],[],[]];  //Humans needing to be healed
     ai_all_buildings = [[],[],[]];  //Identifiers of all buildings for each computer side
     ai_building_constructor = [0,0,0];  //Identifier of the engineer who are going to build a building
     ai_vehicle_being_moved = [0,0,0];  //Identifier of vehicle which is being moved away from building site
     ai_vehicles_having_been_moved = [[],[],[]];  //Identifiers of the vehicles which have been moved away from building site. Don't move them again until construction has started
     ai_upcoming_building_data = [[],[],[]];  //Holds the data (building_location syntax) of the building which is going to be build. Isn't reset until the building is completely done.
     ai_cannot_rebuild_these_buildings = [[],[],[]];  //Holds the buildings the AI cannot rebuild, typically because the constructor is a crane and a crane can't move blocking vehicles or reach all places like a human. Same format as "ai_buildings_locations".
     ai_near_base_dist = 18;  //Distance within base where the computer scans for enemies to determine if the base is under attack (so this distance also decides how far away from the base retreating attackers will be pursued).
     ai_vehicle_attack_delay = [0$0,0$0,0$0];  //The minimum time between attacking (with vehicles) (cf. function "ResetVehicleAttackDelay").
     ai_human_attack_delay = [0$0,0$0,0$0];  //The minimum time between attacking (with humans) (cf. function "ResetHumanAttackDelay").
     ai_cargo_bay = [0,0,0];  //holds the identifier of the (automatic) cargo bay
     ai_cargo_bay_under_construction = [false,false,false];  //True if the base is currently constructing a cargo bay
     ai_cargo_bay_destroy_tick = [tick,tick,tick];  //To make it worth destroying the cargo bay there is a cooldown on its reconstruction. This variable holds the tick when the cargo bay was destroyed for each base.
     ai_crane = [0,0,0];  //Identifier of the crane of each computer
     ai_crane_under_construction = [false,false,false];  //True if the base is currently constructing a crane
     ai_crane_destroy_tick = [tick,tick,tick];  //To make it worth destroying the crane there is a cooldown on its reconstruction. This variable holds the tick when the crane was destroyed for each base.
     ai_crane_is_being_repaired = [false,false,false];  //True if the crane is under repairation (or needs repairation).
     ai_crane_driver = [0,0,0];  //Identifier of the mechanic driving the crane (if the crane is manual).
     ai_attacking_unit_hex_index = [];  //What hex an attacking unit is going for now (index is unit id, value is hex number). Must be reset/prepared when new attacking units are added.
     ai_retreating_attacking_humans = [[],[],[]];  //Holds the attacking humans who are retreating.
     ai_control_tower_vehicles = [[],[],[]];  //The control tower vehicles of each base (Arabian remote control).
     ai_teleporter_exit_placed = [false,false,false];  //Tells if the base's teleport's exit has been placed. There is no function to check if a teleporter's exit has been placed, hence this variable.
     ai_excepted_buildings = [[],[],[]];  //Identifier of the buildings the base will not rebuild. Does not work well with capturing buildings (if the player captures one of these buildings and the computer captures it back the building will remain removed from this list) - it's a rare bug though.
     ai_fact_extension_replace_location = [[],[],[]];  //Coordinates of the factory extension which may be switched with another extension (dismantled and the other extension build instead). Note that ongoing construction stops if a required extensions is removed.
     ai_facts_with_ext_rebuild_map = [];  //Identifiers of factories that is going to have one or more factory extensions rebuilt is index; value is a list of coordinates for the extensions to rebuild. Used to determine when all extensions have been rebuild for a certain factory.
     ai_dismantle_these_buildings = [[],[],[]];  //Identifiers of the buildings which should be dismantled. Does not work well with capturing buildings (if the player captures one of these buildings and the computer captures it back the building will remain removed from this list) - it's a rare bug though.
     ai_units_to_export = [[],[],[]];  //Identifiers of the units we are going to teleport (and thereby lend) to another base.
     ai_exported_units = [[],[],[]];  //Identifiers of the units we have teleported (and thereby lend) to another base.
     ai_imported_units = [[],[],[]];  //Identifiers of the units we have borrowed from another base (send to us by teleport).
     ai_taufield_vehicles = [[],[],[]];  //Identifiers of the taufield vehicles (Russian) for each base.
     ai_implosion_vehicles = [[],[],[]];  //Identifiers of the siberite implosion vehicles (Arabian) for each base.
     ai_time_shift_data = [[],[],[],[],[],[],[],[]];  //[time,radius] - duration and radius of a time shifting rocket (for each side (NOT BASE!)).
     ai_time_shift_hexes = [[],[],[]];  //[x,y,time] - hexes where a time shifting rocket has landed (and how long until the effect disappears).
     ai_time_shift_hexes_underway = [[],[],[]];  //[x,y,id,tick] - The bazooker who have been ordered to fire a time shifting rocket at hex [x,y] but haven't done so yet.
     Initiate_ai_contact_time;
     ai_attack_ground_info_initial = [];  //[attacking_un,target_un,target_un_side,x,y] - Used to determine if we are under attack by attacking ground, cf. "ai_contact_time".
     ai_attack_ground_info_sustain = [];  //[attacking_un,target_un,target_un_side,x,y] - Used to determine if we are under attack by attacking ground, cf. "ai_contact_time".
     InitComputerLvlSystem;  //Computer level up system. CF. module "Functions".

     InitCrateModule;

     num_farmer_cargo_bays_destroyed = 0;  //How many of Farmer's cargo bays the player has destroyed.
     all_mines_hexes = [];  //The hexes where mines are placed by the computer.
     farmer_defence_mines_centerhexes = [];  //The central hexes in the vicinity of which Farmer will place defensive mines which will only blow when the player steps on them.
     farmer_defence_num_mines = -1;  //The number of defensive mines Farmer will place.
     farmer_mine_guy = 0;  //Identifier of the soldier who replaces the mines outside Farmer's base.
     farmer_defence_mines_hexes = [];  //The hexes where Farmer's defensive mines are placed.
     war_vehicle_filter = [[f_not,[f_weapon,ru_cargo_bay]],[f_not,[f_weapon,ru_time_lapser]]];  //The filter defining which vehicles in ai_exported_units, ai_units_to_export or ai_imported_units are war vehicles.
     player_bases_areas = [];  //Indicator of where the player has build a base. For use when the computer is attacking.
     farmer_attack_exit_point = 0;  //Defines how Farmer's attacking units should leave his base.
     buildings_except_from_lvlup = [];  //Identifiers of the (Russian) buildings to be ignored by the Lvl up system.
     farmer_attack_anyway_phase = 0;  //If it's time to attack the player Farmer does so anyway even if the Russians are under attack (but without the Russians). 0 = Nothing, 1 = start producing vehicles for the attack, 2 = pull back vehicles sent to help the Russians

     base_time_features_1 = 0$0;  //The time that should pass between each level up on computer_level_features_1.
     base_time_features_2 = 0$0;  //The time that should pass between each level up on computer_level_features_2.


     time_determined_situation = LoadVariable('Time_determined_situation_14a_cont',1);
     hiding_player_units = [];  //Identifiers of the units loyal to the player hiding from Farmer.
     hiding_player_units_found = false;  //True when the player finds the hiding units.
     rus_obj_given_before_survivors_found = false;  //True if the objective about destroying the Russians was given before the player found the survivors.
     heike_farmer_dialogue_started = false;  //True when the first dialogue between Heike and Farmer starts.
     heike_farmer_dialogue_done = false;  //True when the first dialogue between Heike and Farmer is over.
     kozlov_trying_to_escape = false;  //True when Kozlov tries to escape to Farmer's base through the teleporter.
     kozlov_captured = false;  //Turns true if the player captures Kozlov. Turns false if Kozlov tries to escape afterwards.
     kozlov_has_teleported = false;  //True if Kozlov successfully teleports to Farmer's base because his own base is as good as destroyed by the player.
     kozlov_escaped = false;  //True if Kozlov successfully escapes the map after having been taken captive or running away with Farmer's men.
     kozlov_teleport_event_over = false;  //True when Kozlov should no longer ever try to escape through the teleporter.
     kozlov_gained = false;  //True if the player convinces Kozlov to join Legion.
     farmer_vehicle = 0;  //Identifier of the vehicle Farmer will use when going through the teleporter.
     farmer_has_teleported = false;  //True if Farmer teleports to the Russians's base (lured there).
     farmer_luring_used = false;  //Turns true if the player uses the tactic with luring Farmer to the Russians's base.
     num_damaged_or_destroyed_buildings_farmer_base = 0;  //The number of damaged or destroyed buildings in Farmer's base when the player recaptures it.
     russians_defeated = false;  //True when the player has defeated the Russians.
     farmer_defeated = false;  //True when the player has defeated Farmer.
     time_that_has_passed = 0$0;  //If the player was slow to get from 14a_cont to this mission we simulate that some time has passed.
     Ralph_alive = false;  //True if Ralph didn't die in an earlier mission.

            
     LoadEnvironment;
     PrepareSides;
     PrepareFog;
     PrepareNature;
     PrepareArabians;
     ScanBuildings;
     PrepareComputerSides;
     PrepareMines;
     InitiateTimeShiftData;
     InitComputerLvlFeatures;
               

     Action;
end;

Function Initiate_ai_contact_time;
     var i;
     begin
          //2-dimensional array which tells how long it was since a side was in contact with another side. E.g.
          {
          [[100000,150,100000,100000,1800,100000,100000,100000],
           [150,100000,500,100000,100000,100000,100000,100000],
           [100000,500,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [1800,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000]]
          }
          //Here side 1 (first row) was in contact with side 2 150 ticks ago and with side 5 1800 ticks ago.
          //The variable is necessary because function ContactTime doesn't take attacking ground into consideration
          //(if you attack ground where an enemy unit is, ContactTime doesn't take it as you are attacking the enemy).

          ai_contact_time = [];
          for i = 1 to 8 do
               ai_contact_time = ai_contact_time ^ [[100000,100000,100000,100000,100000,100000,100000,100000]];
     end;

Function InitiateTimeShiftData;
     var side;
     begin
          //The following is approximate data on time shifting rockets.
          //No space-time upgrade researched: Duration 215 tick, radius 4 hexes.
          //Space-time upgrade 1 researched: Duration 320 tick, radius 7 hexes.
          //Space-time upgrade 2 researched: Duration 420 tick, radius 10 hexes.
          //Space-time upgrade 3 researched: Duration 420 tick, radius 10 hexes.

          for side = 1 to 8 do
               if Researched(side,tech_st3) then
                    ai_time_shift_data = Replace(ai_time_shift_data,side,[420,10])
               else
                    if Researched(side,tech_st2) then
                         ai_time_shift_data = Replace(ai_time_shift_data,side,[420,10])
                    else
                         if Researched(side,tech_st1) then
                              ai_time_shift_data = Replace(ai_time_shift_data,side,[320,7])
                         else
                              ai_time_shift_data = Replace(ai_time_shift_data,side,[215,4]);
     end;

Function LoadEnvironment;
     var list, i;
     begin
          list = LoadVariable('Environment_13a_cont',[]);
          if list > 0 then
               begin
                    //Since some environment has been removed to place buildings on this map, we can't remove all environment
                    //on the map and replace with the saved environment from last mission. Instead we remove
                    //a piece of environment if wasn't present in the previous mission.
                    for i in ListEnvironmentArea(whole_map_area) do
                         begin
                              if not i in list then
                                   RemoveEnvironment(i[1],i[2]);
                         end;
               end;
     end;

Function PrepareSides;
     begin
          //Who is who and decide initial attitudes
          nature = 0;
          russians = 3;
          farmer_side = 5;
          russians_alt = 6;
          you_alt = 7;
          you = 8;
          mines_side = 0; //Side mines will be set to belong to

          SetAttitude(russians,farmer_side,att_friend,true);
          SetAttitude(russians,russians_alt,att_friend,true);
          SetAttitude(russians,you_alt,att_friend,true);  //So won't attack the hiding player units
          SetAttitude(russians,you,att_enemy,true);

          SetAttitude(farmer_side,you_alt,att_friend,true);  //So won't attack the hiding player units
          SetAttitude(farmer_side,russians_alt,att_friend,true);
          SetAttitude(farmer_side,you,att_enemy,true);

          SetAttitude(russians_alt,you_alt,att_friend,true);
          SetAttitude(russians_alt,you,att_friend,true);

          SetAttitude(you_alt,you,att_friend,true);

          ChangeSideFog(russians_alt,you);  //russians_alt is the side Kozlov turns to if captured
     end;

Function PrepareFog;
     var i, loc_list, un, temp_list, ex_loc_list, ex_id_list;
     var rubun13new, rubun15new, rubun19new;
     begin
          //Heike has been here before so remove all black fog leaving only grey. No buildings should become visible
          //through this process so remove them before revealing fog and then replace them.

          rubun13new = rubun13;
          rubun15new = rubun15;
          rubun19new = rubun19;

          if difficulty <= 2 then
               begin
                    //Russians
                    ReplaceBunkerWithTurret(rubun16);
                    rubun13new = ReplaceBunkerWithTurret(rubun13);
                    ReplaceBunkerWithTurret(rubun12);
                    rubun19new = ReplaceBunkerWithTurret(rubun19);
                    DestroyUnit(rubun14);


                    //Farmer
                    DestroyUnit(arbun4);
                    ReplaceBunkerWithBreastwork(arbun15);
                    DestroyUnit(arbun8);
                    DestroyUnit(arbun12);
               end;

          if difficulty = 1 then
               begin
                    //Russians
                    DestroyUnit(rubun17);
                    DestroyUnit(rubun15);
                    rubun15new = 0;
                    DestroyUnit(rubun2);
                    ReplaceBunkerWithTurret(rubun9);
                    ReplaceBunkerWithTurret(rubun3);
                    ReplaceBunkerWithTurret(rubun18);


                    //Farmer
                    DestroyUnit(arbun2);
                    DestroyUnit(arbun1);
                    DestroyUnit(arbun14);
                    DestroyUnit(arbun9);
                    ReplaceBarracksWithArmoury(arbar1);
               end;
                 
          buildings_except_from_lvlup = [rubun13new, rubun15new, rubun19new];
          ex_loc_list = [];
          ex_id_list = [];

                    loc_list = [];
                    for i in FilterAllUnits([f_type,unit_building]) do
                         begin
                              loc_list = loc_list ^ [[GetX(i),GetY(i),GetDir(i),GetBType(i),GetLabKind(i,1),GetLabKind(i,2),GetBWeapon(i),GetNation(i),GetSide(i)]];

                              if i in buildings_except_from_lvlup then
                                   ex_loc_list = Insert(ex_loc_list,1,[loc_list[loc_list+0][1],loc_list[loc_list+0][2]]);

                              DestroyUnit(i);
                         end;

                    ClearAllFogForSide(you);

                    InitUc;
                    InitBc;

                    for i in loc_list do
                         begin
                              uc_side = i[9];
                              uc_nation = i[8];

                              bc_type = i[4];
                              bc_kind1 = i[5];
                              bc_kind2 = i[6];

                              if bc_type in [b_oil_mine,b_siberite_mine] then
                                   SetResourceVisibility(i[1],i[2],uc_side);

                              un = CreateAndPlaceBuildingXYD(i[1],i[2],i[3]);

                              if i[7] > 0 then
                                   PlaceWeaponTurret(un,i[7]);

                              if [i[1],i[2]] in ex_loc_list then
                                   ex_id_list = ex_id_list ^ un;
                         end;

          buildings_except_from_lvlup = ex_id_list;
     end;

Function PrepareNature;
     var i, spots, num, agres, count;
     begin
          spots = [[118,6],[135,78],[134,87],[172,115],[128,94],[132,114],[108,101],[12,4],[36,13],[42,22],[50,31],[147,84]];

          InitUc;
          InitHc;

          uc_side = nature;
          uc_nation = nation_nature;

          agres = -10 + difficulty * 20;

          //Apemen
          count = [4,3,2][difficulty];
          hc_class = class_apeman;
          for i = 1 to count do
               begin
                    if spots = 0 then
                         exit;

                    uc_direction = Rand(0,5);

                    hc_agressivity = Rand(-1*agres,agres);

                    hc_attr = [Rand(11,13),Rand(10,11)];
                    hc_sex = Rand(sex_male,sex_female);
                    hc_skills = [Rand(0,1),Rand(0,1),0,0];

                    num = Rand(1,spots);
                    PlaceUnitXYR(CreateHuman,spots[num][1],spots[num][2],5,false);
                    spots = Delete(spots,num);
               end;

          //Tigers
          count = [0,1,2][difficulty];
          hc_gallery = 'nature_foreg';
          hc_face_number = 3;
          hc_class = class_tiger;
          hc_sex = sex_male;
          for i = 1 to count do
               begin
                    if spots = 0 then
                         exit;

                    uc_direction = Rand(0,5);
                    hc_agressivity = Rand(0,agres);
                    hc_attr = [Rand(11,12),Rand(10,11)];
                    hc_skills = [Rand(2,difficulty+1),0,0,0];

                    num = Rand(1,spots);
                    PlaceUnitXYR(CreateHuman,spots[num][1],spots[num][2],5,false);
                    spots = Delete(spots,num);
               end;

          //Phororhacoses (big birds)
          hc_class = class_phororhacos;
          hc_gallery = 'nature_foreg';
          hc_face_number = 1;
          hc_skills = [0,0,0,0];
          for i = 1 to 2 do
               begin
                    if spots = 0 then
                         exit;

                    uc_direction = Rand(0,5);
                    hc_agressivity = Rand(-30,0);
                    hc_attr = [Rand(9,10),Rand(11,12)];

                    num = Rand(1,spots);
                    PlaceUnitXYR(CreateHuman,spots[num][1],spots[num][2],5,false);
                    spots = Delete(spots,num);
               end;
     end;

Function PrepareArabians;
     var with_player_list, escaped_list, i, temp_unit, val, k, temp_list, temp_list_2, g, t, temp_list_3;
     begin
          InitHc;
          InitUc;
          uc_side = you;
          uc_nation = nation_arabian;

          with_player_list = [];
          escaped_list = [];
          
          if not testing then
               begin
                    Heike = CreateCharacter('Heike_14a_cont');
                    with_player_list = with_player_list ^ Heike;
                            
                    if TestCharacters('Olaf_14a_cont') then
                         begin
                              Olaf = CreateCharacter('Olaf_14a_cont');
                              with_player_list = with_player_list ^ Olaf;
                         end
                    else
                         if TestCharacters('Olaf_14a_not_sel') then
                              begin
                                   Olaf = CreateCharacter('Olaf_14a_not_sel');
                                   escaped_list = escaped_list ^ Olaf;
                              end
                         else
                              Olaf = 0;

                    if TestCharacters('Sonya_14a_cont') then
                         begin
                              Sonya = CreateCharacter('Sonya_14a_cont');
                              with_player_list = with_player_list ^ Sonya;
                         end
                    else
                         if TestCharacters('Sonya_14a_not_sel') then
                              begin
                                   Sonya = CreateCharacter('Sonya_14a_not_sel');
                                   escaped_list = escaped_list ^ Sonya;
                              end
                         else
                              Sonya = 0;

                    if TestCharacters('Oswald_14a_cont') then
                         begin
                              Oswald = CreateCharacter('Oswald_14a_cont');
                              with_player_list = with_player_list ^ Oswald;
                         end
                    else
                         if TestCharacters('Oswald_14a_not_sel') then
                              begin
                                   Oswald = CreateCharacter('Oswald_14a_not_sel');
                                   escaped_list = escaped_list ^ Oswald;
                              end
                         else
                              Oswald = 0;

                    if TestCharacters('Ralph_14a_cont') then
                         begin
                              Ralph = CreateCharacter('Ralph_14a_cont');
                              with_player_list = with_player_list ^ Ralph;
                              Ralph_alive = true;
                         end
                    else
                         if TestCharacters('Ralph_14a_not_sel') then
                              begin
                                   Ralph = CreateCharacter('Ralph_14a_not_sel');
                                   escaped_list = escaped_list ^ Ralph;
                                   Ralph_alive = true;
                              end
                         else
                              Ralph = 0;

                    if TestCharacters('Kowalski_14a_cont') then
                         begin
                              Kowalski = CreateCharacter('Kowalski_14a_cont');
                              with_player_list = with_player_list ^ Kowalski;
                         end
                    else
                         if TestCharacters('Kowalski_14a_not_sel') then
                              begin
                                   Kowalski = CreateCharacter('Kowalski_14a_not_sel');
                                   escaped_list = escaped_list ^ Kowalski;
                              end
                         else
                              Kowalski = 0;

                    if TestCharacters('Suze_14a_cont') then
                         begin
                              Suze = CreateCharacter('Suze_14a_cont');
                              with_player_list = with_player_list ^ Suze;
                         end
                    else
                         if TestCharacters('Suze_14a_not_sel') then
                              begin
                                   Suze = CreateCharacter('Suze_14a_not_sel');
                                   escaped_list = escaped_list ^ Suze;
                              end
                         else
                              Suze = 0;

                    if TestCharacters('MarkB_14a_cont') then
                         begin
                              MarkB = CreateCharacter('MarkB_14a_cont');
                              with_player_list = with_player_list ^ MarkB;
                         end
                    else
                         if TestCharacters('MarkB_14a_not_sel') then
                              begin
                                   MarkB = CreateCharacter('MarkB_14a_not_sel');
                                   escaped_list = escaped_list ^ MarkB;
                              end
                         else
                              MarkB = 0;

                    if TestCharacters('Kurt_14a_cont') then
                         begin
                              Kurt = CreateCharacter('Kurt_14a_cont');
                              with_player_list = with_player_list ^ Kurt;
                         end
                    else
                         if TestCharacters('Kurt_14a_not_sel') then
                              begin
                                   Kurt = CreateCharacter('Kurt_14a_not_sel');
                                   escaped_list = escaped_list ^ Kurt;
                              end
                         else
                              Kurt = 0;

                    if TestCharacters('Martin_14a_cont') then
                         begin
                              Martin = CreateCharacter('Martin_14a_cont');
                              with_player_list = with_player_list ^ Martin;
                         end
                    else
                         if TestCharacters('Martin_14a_not_sel') then
                              begin
                                   Martin = CreateCharacter('Martin_14a_not_sel');
                                   escaped_list = escaped_list ^ Martin;
                              end
                         else
                              Martin = 0;

                    if TestCharacters('Louis_14a_cont') then
                         begin
                              Louis = CreateCharacter('Louis_14a_cont');
                              with_player_list = with_player_list ^ Louis;
                         end
                    else
                         if TestCharacters('Louis_14a_not_sel') then
                              begin
                                   Louis = CreateCharacter('Louis_14a_not_sel');
                                   escaped_list = escaped_list ^ Louis;
                              end
                         else
                              Louis = 0;

                    if TestCharacters('Khattam_14a_cont') then
                         begin
                              Khattam = CreateCharacter('Khattam_14a_cont');
                              with_player_list = with_player_list ^ Khattam;
                         end
                    else
                         if TestCharacters('Khattam_14a_not_sel') then
                              begin
                                   Khattam = CreateCharacter('Khattam_14a_not_sel');
                                   escaped_list = escaped_list ^ Khattam;
                              end
                         else
                              Khattam = 0;

                    with_player_list = with_player_list ^ (CreateCharacterSet('Others_14a_cont') diff 0);
               end
          else
               begin
                    InitHc;

                    PrepareSoldier(sex_female,9);
                    hc_name = 'Heike';
                    Heike = CreateHuman;

                    PrepareMechanic(sex_male,9);
                    hc_name = 'Olaf';
                    Olaf = CreateHuman;

                    PrepareScientist(sex_female,9);
                    hc_name = 'Sonya';
                    Sonya = CreateHuman;

                    PrepareSoldier(sex_male,9);
                    hc_name = 'Oswald';
                    Oswald = CreateHuman;

                    PrepareSoldier(sex_male,9);
                    hc_name = 'Ralph';
                    Ralph = CreateHuman;
                    Ralph_alive = true;

                    PrepareSoldier(sex_male,9);
                    hc_name = 'Kowalski';
                    Kowalski = CreateHuman;

                    PrepareSoldier(sex_female,9);
                    hc_name = 'Suze';
                    Suze = CreateHuman;

                    PrepareScientist(sex_male,9);
                    hc_name = 'Mark';
                    MarkB = CreateHuman;

                    PrepareSoldier(sex_male,9);
                    hc_name = 'Kurt';
                    Kurt = CreateHuman;

                    PrepareMechanic(sex_male,9);
                    hc_name = 'Martin';
                    Martin = CreateHuman;

                    PrepareSoldier(sex_male,9);
                    hc_name = 'Louis';
                    Louis = CreateHuman;
                    SetClass(Louis,class_mortar);

                    PrepareScientist(sex_male,9);
                    hc_name = 'Khattam';
                    Khattam = CreateHuman;

                    with_player_list = [Heike,Oswald] diff 0;
                    escaped_list = [Olaf, Sonya, Ralph, Kowalski, Suze, MarkB, Kurt, Martin, Louis, Khattam] diff 0;
                    
                    InitHc;
                    for i = 1 to [5,4,3][difficulty] do
                         begin
                              PrepareHuman(false,[class_soldier,class_mechanic,class_scientistic][Rand(1,3)],9);
                              with_player_list = with_player_list ^ CreateHuman;
                         end;

                    PrepareEngineer(false,9);
                    with_player_list = with_player_list ^ CreateHuman;
               end;

          //Limit the amount of people the player has to his/her disposal.
          val = LoadVariable('Num_people_to_next_map_14a',6+1);
          val = [17,15,14][difficulty] - val;

          //Pick out Ralph. There's a little
          //event between him and Sonya in the intro to mission 15a.
          if Ralph in escaped_list and Sonya in escaped_list then
               begin
                    SetLastMission(Ralph,17);  //For correct xp bonus later on
                    SaveCharacters(Ralph,'Ralph_14a_cont2_run_away');
                    escaped_list = escaped_list diff Ralph;
                    DestroyUnit(Ralph);
                    Ralph = 0;
               end;

          if escaped_list < val then
               begin
                    InitHc;
                    while escaped_list < val do
                         begin
                              PrepareHuman(false,[class_soldier,class_engineer,class_mechanic,class_scientistic][Rand(1,4)],8);
                              escaped_list = escaped_list ^ CreateHuman;
                         end;
               end
          else
               if escaped_list > val then
                    begin
                         //Don't pick Sonya.
                         if Sonya in escaped_list then
                              begin
                                   temp_list = [Sonya];
                                   escaped_list = escaped_list diff Sonya;
                              end
                         else
                              temp_list = [];

                         //Pick out a random person who represents the class most people belong to. For example if there are
                         //2 soldiers, 2 engineers, 4 mechanics and 3 scientists then pick out a mechanic. What class a person
                         //belongs to is decided by his/her best skill.
                         temp_list_2 = [[],[],[],[]];  //soldiers, engineers, mechanics, scientists
                         temp_list_3 = [skill_combat,skill_engineering, skill_mechanical, skill_scientistic];
                         for i in escaped_list do
                              begin
                                   g = GetSkill(i,skill_combat);
                                   k = 1;

                                   for t = 2 to temp_list_3 do
                                        begin
                                             if GetSkill(i,temp_list_3[t]) > g then
                                                  begin
                                                       g = GetSkill(i,temp_list_3[t]);
                                                       k = t;
                                                  end;
                                        end;

                                   temp_list_2 = Replace(temp_list_2,k, temp_list_2[k] ^ i );
                              end;

                         while escaped_list + temp_list > val do
                              begin
                                   if escaped_list = 0 then
                                        break;

                                   g = 1;  
                                   for k = 2 to temp_list_2 do
                                        begin
                                             if temp_list_2[k]+0 > temp_list_2[g]+0 then
                                                  g = k;
                                        end;

                                   temp_list_3 = temp_list_2[g];
                                   t = Rand(1,temp_list_3);
                                   i = temp_list_2[g][t]; 
                                   temp_list_2 = Replace(temp_list_2,g, temp_list_2[g] diff i );

                                   case i of
                                        Olaf: begin
                                             k = 'Olaf';
                                             Olaf = 0;
                                        end;
                                        Sonya: begin
                                             k = 'Sonya';
                                             Sonya = 0;
                                        end;
                                        Oswald: begin
                                             k = 'Oswald';
                                             Oswald = 0;
                                        end;
                                        Ralph: begin
                                             k = 'Ralph';
                                             Ralph = 0;
                                        end;
                                        Kowalski: begin
                                             k = 'Kowalski';
                                             Kowalski = 0;
                                        end;
                                        Suze: begin
                                             k = 'Suze';
                                             Suze = 0;
                                        end;
                                        MarkB: begin
                                             k = 'MarkB';
                                             MarkB = 0;
                                        end;
                                        Kurt: begin
                                             k = 'Kurt';
                                             Kurt = 0;
                                        end;
                                        Martin: begin
                                             k = 'Martin';
                                             Martin = 0;
                                        end;
                                        Louis: begin
                                             k = 'Louis';
                                             Louis = 0;
                                        end;
                                        Khattam: begin
                                             k = 'Khattam';
                                             Khattam = 0;
                                        end;
                                        else k = -1;
                                   end;

                                   if k > -1 then
                                        begin
                                             SetLastMission(i,17);  //For correct xp bonus later on
                                             SaveCharacters(i,k & '_14a_cont2_run_away');
                                             DestroyUnit(i);
                                        end;

                                   escaped_list = escaped_list diff i;
                              end;

                         escaped_list = escaped_list ^ temp_list;
                    end; 
           
          //At least one of the escaped units should have class engineer (if the player lost his/her engineer in 14a_cont).
          if UnitFilter(escaped_list,[f_class,class_engineer]) = 0 and escaped_list > 0 then
               SetClass(escaped_list[1],class_engineer);
             
          //Limit the amount of mortars.
          k = 1;
          for i in escaped_list do
               if GetClass(i) = class_mortar then
                    begin
                         k = k - 1;
                         if k < 0 then
                              SetClass(i,class_soldier);
                    end;  

          //Load and place the vehicles from last map.
          //Limit the number of war vehicles.
          if not testing then
               temp_list_2 = LoadVariable('Vehicles_14a_cont',[])
          else
               temp_list_2 = [[nation_arabian,ar_half_tracked,engine_siberite,control_manual,ar_cargo_bay,80,20,0],[nation_russian,ru_medium_tracked,engine_combustion,control_manual,ru_gun,0,0,0],[nation_arabian,ar_half_tracked,engine_siberite,control_manual,ar_gatling_gun,0,0,0]];

          for i in temp_list_2 do
               begin
                    uc_nation = i[1];
                    vc_chassis = i[2];
                    vc_engine = i[3];
                    vc_control = i[4];
                    vc_weapon = i[5];

                    val = CreateVehicle;

                    if vc_weapon in [us_cargo_bay,ru_cargo_bay,ar_cargo_bay] then
                         begin
                              AddCargo(val,mat_cans,i[6]);
                              AddCargo(val,mat_oil,i[7]);
                              AddCargo(val,mat_siberit,i[8]);
                         end;

                    if vc_engine = engine_combustion then
                         SetFuel(val,Rand(70,80));

                    //Find a driver. Preferably mechanic.
                    temp_unit = 0;
                    temp_list_2 = UnitFilter(with_player_list,[f_class,class_mechanic]);
                    if temp_list_2 > 0 then
                         temp_unit = temp_list_2[1]
                    else
                         if with_player_list > 0 then
                              temp_unit = with_player_list[1];
                         
                    if temp_unit > 0 then
                         begin
                              with_player_list = with_player_list diff temp_unit;
                              PlaceHumanInUnit(temp_unit,val);
                         end;

                    SetDir(val,[0,5][Rand(1,2)]);
                    PlaceUnitArea(val,player_enter_area,false);
               end;

          //Place the remaining player units
          for i in with_player_list do
               PlaceUnitArea(i,player_enter_area,false);
           
          for i in escaped_list do
               begin
                    SetSide(i,you_alt);
                    PlaceUnitXYR(i,140,50,4,false);
               end;

          hiding_player_units = escaped_list;
     end;

Function ScanBuildings;
     var side, i, temp_list, base, area, temp_list_2, k;
     begin
          for base in ai_bases do
               begin
                    if base = 2 then
                         continue;  //see below this loop

                    area = GetBaseArea(base);
                    side = GetBaseSide(base);

                    ai_all_buildings = Replace(ai_all_buildings,base, FilterAllUnits([[f_side,side],[f_type,unit_building],[f_inarea,area]]) );

                    for i in ai_all_buildings[base] do
                         UpdateBuildingBasicVariables(base,i,true);

                    if base = 3 then
                         SetBName(ai_depot[base],'campbar');

                    //Update buildings locations.
                    temp_list = [];
                    //for i in (ai_depot[base] ^ ai_armouries[base] ^ ai_bunkers[base] ^ ai_power_plants[base] ^ ai_control_tower[base] ^ ai_turrets[base] ^ ai_labs[base] ^ ai_facts[base] ^ ai_fact_extensions[base] ^ ai_siberite_mines[base] ^ ai_oil_mine[base] ^ ai_teleporter[base]) diff 0 do
                    for i in ai_all_buildings[base] do
                         begin
                              //The Arab base can't rebuild their teleporter.
                              if base = 3 and i = ai_teleporter[base] then
                                   begin
                                        ai_excepted_buildings = Replace(ai_excepted_buildings,base,[i]);
                                        continue;
                                   end;

                              temp_list = temp_list ^ [ [GetX(i),GetY(i),GetDir(i),GetBType(i),GetLabKind(i,1),GetLabKind(i,2),GetBWeapon(i)] ];
                         end;

                    ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list);
                    SortBuildingLocationsListInCorrectOrder(base);
                    
                    //Make sources visible
                    for i in ai_siberite_mines[base] ^ ai_oil_mine[base] do
                         SetResourceVisibility(GetX(i),GetY(i),side);
               end;

          //The small Russian base doesn't have any buildings to begin with. It builds them from scratch so we have to
          //initiate its building list manually.
          //But if the player was slow getting the first part of the mission done some buildings are completed.
          temp_list = [[96,108,0,b_depot,0,0,0],[91,98,3,b_breastwork,0,0,0],[97,100,3,b_breastwork,0,0,0],[87,111,Rand(0,5),b_siberite_mine,0,0,0]];
          ai_buildings_locations = Replace(ai_buildings_locations,2,temp_list);
          SortBuildingLocationsListInCorrectOrder(2);
          SetResourceVisibility(87,111,russians);

          if time_determined_situation = 2 then
               begin
                    InitUc;
                    InitBc;
                    uc_side = russians;
                    uc_nation = nation_russian;

                    for i = 1 to ai_buildings_locations[2] do
                         if ai_buildings_locations[2][i][4] = b_depot then
                              begin
                                   bc_type = b_depot;
                                   k = CreateAndPlaceBuildingXYD(ai_buildings_locations[2][i][1],ai_buildings_locations[2][i][2],ai_buildings_locations[2][i][3]);

                                   temp_list = ai_all_buildings[2] ^ k;
                                   ai_all_buildings = Replace(ai_all_buildings,2,temp_list);

                                   UpdateBuildingBasicVariables(2,k,true);

                                   break;
                              end;
               end;

          if time_determined_situation = 3 then
               begin
                    InitUc;
                    InitBc;
                    uc_side = russians;
                    uc_nation = nation_russian;

                    for i in ai_buildings_locations[2] do
                         begin
                              bc_type = i[4];
                              k = CreateAndPlaceBuildingXYD(i[1],i[2],i[3]);

                              temp_list = ai_all_buildings[2] ^ k;
                              ai_all_buildings = Replace(ai_all_buildings,2,temp_list);

                              UpdateBuildingBasicVariables(2,k,true);
                         end;
               end; 
             
          //The Russian factory switches between siberite extension and noncombat extension as needed.
          for i in ai_fact_extensions[1] do
               if GetBType(i) = b_ext_noncombat then
                    begin
                         ai_fact_extension_replace_location = Replace(ai_fact_extension_replace_location,1,[GetX(i),GetY(i)]);   //Can't be done with a hardcoded map identifier because buildings are destroyed and rebuild in function PrepareFog
                         break;
                    end;
     end;
Function ReplaceBunkerWithTurret(id);
     var un, temp_list;
     begin
          InitUc;
          InitBc;
          uc_nation = GetNation(id);
          uc_side = GetSide(id);

          temp_list = [GetX(id),GetY(id),GetDir(id),GetBWeapon(id)];
          DestroyUnit(id);
          bc_type = b_turret;
          un = CreateAndPlaceBuildingXYD(temp_list[1],temp_list[2],temp_list[3]);
          PlaceWeaponTurret(un,temp_list[4]);

          result = un;
     end;
Function ReplaceBunkerWithBreastwork(id);
     var un, temp_list;
     begin
          InitUc;
          InitBc;
          uc_nation = GetNation(id);
          uc_side = GetSide(id);

          temp_list = [GetX(id),GetY(id),GetDir(id)];
          DestroyUnit(id);
          bc_type = b_breastwork;
          un = CreateAndPlaceBuildingXYD(temp_list[1],temp_list[2],temp_list[3]);

          result = un;
     end;
Function ReplaceBarracksWithArmoury(id);
     var un, temp_list;
     begin
          InitUc;
          InitBc;
          uc_nation = GetNation(id);
          uc_side = GetSide(id);

          temp_list = [GetX(id),GetY(id),GetDir(id)];
          DestroyUnit(id);
          bc_type = b_armoury;
          un = CreateAndPlaceBuildingXYD(temp_list[1],temp_list[2],temp_list[3]);

          result = un;
     end;
Export Function UpdateBuildingBasicVariables(base,un,add);
     var temp_list;
     begin
          //un - unit to add/remove from basic building variables
          //add - boolean (true for add units, false for remove)

          case GetBType(un) of
               b_depot,b_warehouse:
                    if add then
                         ai_depot = Replace(ai_depot,base,un)
                    else
                         if un = ai_depot[base] then
                              ai_depot = Replace(ai_depot,base,0);
               b_lab,b_lab_half,b_lab_full: begin
                    if add then
                         temp_list = ai_labs[base] ^ un
                    else temp_list = ai_labs[base] diff un;
                    ai_labs = Replace(ai_labs,base,temp_list);
               end;
               b_factory,b_workshop: begin
                    if add then
                         temp_list = ai_facts[base] ^ un
                    else temp_list = ai_facts[base] diff un;
                    ai_facts = Replace(ai_facts,base,temp_list);
               end;
               b_armoury,b_barracks,b_fort: begin
                    if add then
                         temp_list = ai_armouries[base] ^ un
                    else temp_list = ai_armouries[base] diff un;
                    ai_armouries = Replace(ai_armouries,base,temp_list);
               end;
               b_breastwork,b_bunker: begin
                    if add then
                         temp_list = ai_bunkers[base] ^ un
                    else temp_list = ai_bunkers[base] diff un;
                    ai_bunkers = Replace(ai_bunkers,base,temp_list);
               end;
               b_turret: begin
                    if add then
                         temp_list = ai_turrets[base] ^ un
                    else temp_list = ai_turrets[base] diff un;
                    ai_turrets = Replace(ai_turrets,base,temp_list);
               end;
               b_oil_mine:
                    if add then
                         ai_oil_mine = Replace(ai_oil_mine,base,un)
                    else
                         if un = ai_oil_mine[base] then
                              ai_oil_mine = Replace(ai_oil_mine,base,0);
               b_siberite_mine: begin
                    if add then
                         temp_list = ai_siberite_mines[base] ^ un
                    else temp_list = ai_siberite_mines[base] diff un;
                    ai_siberite_mines = Replace(ai_siberite_mines,base,temp_list);
               end;
               b_ext_gun,b_ext_noncombat,b_ext_laser,b_ext_computer,b_ext_radar,b_ext_rocket,b_ext_siberium,b_ext_track,b_ext_stitch: begin
                    if add then
                         temp_list = ai_fact_extensions[base] ^ un
                    else temp_list = ai_fact_extensions[base] diff un;
                    ai_fact_extensions = Replace(ai_fact_extensions,base,temp_list);
               end;
               b_solar_power,b_oil_power,b_siberite_power: begin
                    if add then
                         temp_list = ai_power_plants[base] ^ un
                    else temp_list = ai_power_plants[base] diff un;
                    ai_power_plants = Replace(ai_power_plants,base,temp_list);
               end;
               b_control_tower: begin
                    if add then
                         ai_control_tower = Replace(ai_control_tower,base,un)
                    else
                         if un = ai_control_tower[base] then
                              ai_control_tower = Replace(ai_control_tower,base,0);
               end;
               b_teleport: begin
                    if add then
                         begin
                              ai_teleporter = Replace(ai_teleporter,base,un);
                              ai_teleporter_exit_placed = Replace(ai_teleporter_exit_placed,base,false);
                         end
                    else
                         if un = ai_teleporter[base] then
                              begin
                                   ai_teleporter = Replace(ai_teleporter,base,0);
                                   ai_teleporter_exit_placed = Replace(ai_teleporter_exit_placed,base,false);
                              end;
               end;
          end;
     end;
Export Function SortBuildingLocationsListInCorrectOrder(base);
     var i, temp_list, p;
     begin
         temp_list = [];

         for i in ai_buildings_locations[base] do
              begin
                   //Prioritated order in which buildings should be (re-)build.
                   case i[4] of
                        b_depot, b_warehouse: p = 100;
                        b_armoury, b_barracks, b_fort: p = 99;
                        b_solar_power, b_oil_power, b_siberite_power: p = 98;
                        b_breastwork: p = 97;
                        b_factory, b_workshop: p = 96;
                        b_ext_gun, b_ext_noncombat, b_ext_laser, b_ext_computer,
                        b_ext_radar, b_ext_rocket, b_ext_siberium, b_ext_track, b_ext_stitch: p = 95;
                        b_bunker: p = 94;
                        b_control_tower: p = 93;
                        b_turret: p = 92;
                        b_lab, b_lab_half, b_lab_full: p = 91;
                        b_teleport: p = 90;
                        b_siberite_mine: p = 89;
                        b_oil_mine: p = 88;
                   end;

                   temp_list = temp_list ^ p;
              end;

          temp_list = SortListByListDesc(ai_buildings_locations[base],temp_list);
          ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list);
     end;

Function PrepareComputerSides;
     var i, temp_list, side, base, num;
     begin
          for base in ai_bases do
               begin
                    side = GetBaseSide(base);

                    InitUc;
                    InitHc;

                    uc_side = side;
                    case side of
                         russians: uc_nation = nation_russian;
                         farmer_side: uc_nation = nation_arabian;
                    end;


                    //Soldiers - at least one for each defensive building (remember armouries)
                    //Special units (bazoookers, snipers, mortars) go to armouries as first priority.
                    case base of
                         1: begin
                              temp_list = CreateUnitsWithClass([1,3,4][difficulty] + UnitFilter(buildings_except_from_lvlup,[f_or,[f_btype,b_bunker],[f_btype,b_breastwork]]), class_soldier, side);
                              temp_list = temp_list ^ CreateUnitsWithClass([2,3,4][difficulty], class_bazooker, side);
                         end;
                         2: begin
                              temp_list = CreateUnitsWithClass([2,1,0][difficulty],class_soldier,side);
                              temp_list = temp_list ^ CreateUnitsWithClass([0,1,2][difficulty],class_bazooker,side);
                         end;
                         3: begin
                              temp_list = CreateUnitsWithClass(ai_bunkers[base]+ai_armouries[base], class_soldier, side);
                              temp_list = temp_list ^ CreateUnitsWithClass([2,3,4][difficulty]*ai_armouries[base], class_mortar, side);
                         end;
                    end;

                    ai_soldiers = Replace(ai_soldiers,base,temp_list);
                    PlaceComputerUnits(base,ai_soldiers[base],[]);


                    //Engineers
                    ai_engineers = Replace(ai_engineers,base, CreateUnitsWithClass([[4,5,6][difficulty],1,[1,2,3][difficulty]][base], class_engineer, side) );
                    if ai_depot[base] > 0 then
                         PlaceComputerUnits(base,ai_engineers[base],[ai_depot[base]])
                    else
                         PlaceComputerUnits(base,ai_engineers[base],[]);

                    //Adapt the level of buildings to the highest engineering skill.
                    temp_list = [];
                    for i in ai_engineers[base] do
                         temp_list = temp_list ^ GetSkill(i,skill_engineering);
                    num = BestFromListByList(temp_list,temp_list);
                    for i in ai_all_buildings[base] do
                         SetBLevel(i,num);

                    //Apemen engineers
                    //ai_apemen_engineers = Replace(ai_apemen_engineers,base, CreateApemenWithClass(2,class_apeman_engineer,side) );
                    //PlaceComputerUnits(base,ai_apemen_engineers[base],[ai_depot[base]]);

                    //Mechanics                                                                  
                    ai_mechanics_defend = Replace(ai_mechanics_defend,base, CreateUnitsWithClass([4,5,6][difficulty] * (base <> 2), class_mechanic, side) );
                    PlaceComputerUnits(base,ai_mechanics_defend[base],ai_facts[base]);


                    //Scientists
                    if base in [1,3] then
                         begin
                              num = [[4,5,6][difficulty],-1,[2,3,4][difficulty]][base];
                              num = num + Rand(0,1);
                              ai_scientists = Replace(ai_scientists,base, CreateUnitsWithClass(num,class_scientistic,side) );
                         end;
                    PlaceComputerUnits(base,ai_scientists[base],ai_labs[base]);


                    //Resources
                    SetResourceType(GetBase(ai_depot[base]),mat_cans,300);
                    SetResourceType(GetBase(ai_depot[base]),mat_oil,300);
                    SetResourceType(GetBase(ai_depot[base]),mat_siberit,300);


                    //Place units
                    //for i in ai_soldiers[base] ^ ai_engineers[base] ^ ai_mechanics_defend[base] ^ ai_scientists[base] ^ ai_apemen_engineers[base] do
                    //     PlaceUnitXYR(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2],7,false);
               end;

          //Farmer, Gordon, Willard
          uc_side = farmer_side;
          uc_nation = nation_arabian;

          if not testing then
               begin
                    Farmer = CreateCharacter('Farmer_14a_not_sel');
                    SetClass(Farmer,class_soldier);
                    temp_list = ai_soldiers[3] ^ Farmer;
                    ai_soldiers = Replace(ai_soldiers,3,temp_list);
                    PlaceUnitXYR(Farmer,ai_human_pullback_hex[3][1],ai_human_pullback_hex[3][2],7,false);

                    if TestCharacters('Gordon_13a_cont') then
                         begin
                              Gordon = CreateCharacter('Gordon_13a_cont');

                              SetClass(Gordon,class_soldier);

                              temp_list = ai_soldiers[3] ^ Gordon;
                              if difficulty = 3 then
                                   begin
                                        DestroyUnit(temp_list[1]);
                                        temp_list = Delete(temp_list,1);
                                   end;
                              ai_soldiers = Replace(ai_soldiers,3,temp_list);

                              PlaceUnitXYR(Gordon,ai_human_pullback_hex[3][1],ai_human_pullback_hex[3][2],7,false);
                         end
                    else
                         Gordon = 0;

                    if TestCharacters('Willard_13a_cont') then
                         begin
                              Willard = CreateCharacter('Willard_13a_cont');

                              SetClass(Willard,class_mechanic);

                              temp_list = ai_mechanics_defend[3] ^ Willard;
                              if difficulty = 3 then
                                   begin
                                        DestroyUnit(temp_list[1]);
                                        temp_list = Delete(temp_list,1);
                                   end;
                              ai_mechanics_defend = Replace(ai_mechanics_defend,3,temp_list);

                              PlaceUnitXYR(Willard,ai_human_pullback_hex[3][1],ai_human_pullback_hex[3][2],7,false);
                         end
                    else
                         Willard = 0;
               end
          else
               begin
                    InitHc;

                    PrepareSoldier(sex_male,10);
                    hc_name = 'Farmer';
                    Farmer = CreateHuman;

                    PrepareSoldier(sex_male,10);
                    hc_name = 'Gordon';
                    Gordon = CreateHuman;

                    PrepareMechanic(sex_male,10);
                    hc_name = 'Willard';
                    Willard = CreateHuman;

                    temp_list = ai_soldiers[3] ^ Farmer ^ Gordon;
                    if difficulty = 3 then
                         begin
                              DestroyUnit(temp_list[1]);
                              temp_list = Delete(temp_list,1);
                         end;
                    ai_soldiers = Replace(ai_soldiers,3,temp_list);

                    temp_list = ai_mechanics_defend[3] ^ Willard;
                    if difficulty = 3 then
                         begin
                              DestroyUnit(temp_list[1]);
                              temp_list = Delete(temp_list,1);
                         end;
                    ai_mechanics_defend = Replace(ai_mechanics_defend,3,temp_list);

                    for i in [Farmer,Gordon,Willard] do
                         PlaceUnitXYR(i,ai_human_pullback_hex[3][1],ai_human_pullback_hex[3][2],7,false);
               end;

          //Farmer's vehicle. Placed in the woods northeast of his base.
          InitVc;
          vc_chassis = ar_half_tracked;
          vc_engine = engine_siberite;
          vc_control = control_manual;
          vc_weapon = ar_gun;
          farmer_vehicle = CreateVehicle;
          SetDir(farmer_vehicle,2);
          PlaceUnitXY(farmer_vehicle,100,17,false);


          //Kozlov
          uc_side = russians;
          uc_nation = nation_russian;

          Kozlov = NewCharacter('Kozlov');
          SetClass(Kozlov,class_scientistic);
          temp_list = ai_scientists[1] ^ Kozlov;
          ai_scientists = Replace(ai_scientists,1,temp_list);
          PlaceUnitXYR(Kozlov,ai_human_pullback_hex[1][1],ai_human_pullback_hex[1][2],7,false);


          //Technologies
          for side in [russians,farmer_side] do
               begin
                    SetTech(tech_stimdrugs,side,state_researched);
                    SetTech(tech_targteleport,side,state_researched);
                    SetTech(tech_taufield,side,state_researched);
                    SetTech(tech_limteleport,side,state_researched);
                    SetTech(31,side,state_researched);  //Homogenous tau field
                    SetTech(tech_spacanom,side,state_researched);
                    SetTech(tech_taurad,side,state_researched);
                    SetTech(tech_bazooka,side,state_researched);
                    SetTech(tech_mortar,side,state_researched);

                    SetTech(tech_tech1,side,state_researched);
                    SetTech(tech_tech2,side,state_researched);
                    SetTech(tech_weap1,side,state_researched);
                    SetTech(tech_sib1,side,state_researched);
                    SetTech(tech_comp1,side,state_researched);

                    if difficulty >= 2 then
                         begin
                              SetTech(tech_tech3,side,state_researched);
                              SetTech(tech_weap2,side,state_researched);
                              SetTech(tech_sib2,side,state_researched);
                              SetTech(tech_comp2,side,state_researched);
                              SetTech(tech_st1,side,state_researched);
                              SetTech(tech_opto1,side,state_researched);
                              SetTech(tech_opto2,side,state_researched);
                              SetTech(tech_bio1,side,state_researched);
                              SetTech(tech_bio2,side,state_researched);
                         end;

                    if difficulty = 3 then
                         begin
                              SetTech(tech_weap3,side,state_researched);
                              SetTech(tech_sib3,side,state_researched);
                              SetTech(tech_comp3,side,state_researched);
                              SetTech(tech_st2,side,state_researched);
                              SetTech(tech_st3,side,state_researched);
                              SetTech(tech_opto3,side,state_researched);
                              SetTech(tech_bio3,side,state_researched);
                         end;
               end;
     end;
Export Function CreateUnitsWithClass(num_units,un_class,side);
     var i, overskill;
     begin
          result = [];

          InitUc;
          InitHc;
          
          case side of
               you, you_alt, farmer_side: begin
                    uc_nation = nation_arabian;
               end;
               russians: begin
                    uc_nation = nation_russian;
               end;
          end;
          uc_side = side;

          overskill = difficulty + 7;

          for i = 1 to num_units do
               begin
                    if Rand(1,3) = 1 then
                         PrepareHuman(false,un_class,-overskill)
                    else PrepareHuman(false,un_class,overskill);

                    result = result ^ CreateHuman;
               end;
     end;
Export Function CreateApemenWithClass(num_units,un_class,side);
     var i;
     begin
          result = [];

          InitUc;
          InitHc;
          uc_side = side;
          uc_nation = nation_nature;
          hc_class = un_class;

          for i = 1 to num_units do
               begin
                    hc_attr = [Rand(11,13),Rand(10,11)];
                    hc_sex = Rand(sex_male,sex_female);
                    hc_skills = [Rand(0,2),Rand(0,2),0,0];

                    result = result ^ CreateHuman;
               end;
     end;
Function PlaceComputerUnits(base,un_list,buildings_list);
     var num, i, b;
     begin
          //buildings_list contains the buildings in which the units should be placed.
          //It's assumed the buildings can contain 6 units (depot, armoury, workshop, lab).
          //If there isn't space the rest is placed on the human pullback hex.

          num = 1;
          for b in buildings_list do
               begin
                    if num > un_list then
                         break;

                    for i = UnitsInside(b)+1 to 6 do
                         begin
                              if num > un_list then
                                   break;

                              PlaceHumanInUnit(un_list[num],b);
                              num = num + 1;
                         end;
               end;

          for i = num to un_list do
               PlaceUnitXYR(un_list[i],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2],7,false);
     end;

Function PrepareMines;
     var hex, temp_list, i, k, temp_list_2;
     begin
          //Function PlaceMinesToArea places mines randomly and doesn't take into account if there's already a mine placed
          //on a hex. We want the mine area completely filled with mines so we have to place the mines manually.

          //mine_area_ru_north_1
          temp_list = [[14,11],[13,11],[13,12],[14,12],[14,13],[14,14],[15,13],[15,14],[15,15]];
          all_mines_hexes = all_mines_hexes ^ temp_list;
          for hex in temp_list do
               PlaceMine(hex[1],hex[2],mines_side,0);

          //mine_area_ru_north_2
          temp_list = [[16,14],[16,15],[16,16],[16,17],[17,15],[17,16],[17,17],[17,18],[18,15],[18,16],[18,17],[18,18],[18,19],[18,20],[19,19],[19,20],[20,20]];
          all_mines_hexes = all_mines_hexes ^ temp_list;
          for hex in temp_list do
               PlaceMine(hex[1],hex[2],mines_side,0);

          //mine_area_ru_south_1
          temp_list = [[62,98],[62,99],[62,100],[63,98],[63,99],[63,100],[63,101],[64,98],[64,99],[64,100],[64,101],[64,102],[65,98],[65,99],[65,100],[65,101],[65,102],[65,103],[66,98],[66,99],[66,100],[66,101],[66,102],[66,103],[67,99],[67,100],[67,101]];
          all_mines_hexes = all_mines_hexes ^ temp_list;
          for hex in temp_list do
               PlaceMine(hex[1],hex[2],mines_side,0);

          //mine_area_ru_south_2
          temp_list = [[62,101],[62,102],[62,103],[63,102],[63,103],[63,104],[64,103],[64,104],[64,105],[65,104],[65,105],[65,106],[66,105],[66,106],[66,107],[67,105],[67,106],[67,107]];
          all_mines_hexes = all_mines_hexes ^ temp_list;
          for hex in temp_list do
               PlaceMine(hex[1],hex[2],mines_side,0);

          //mine_area_farmer_north
          temp_list = [[50,12],[50,13],[51,13],[52,13],[52,14],[53,14],[53,15],[54,14],[54,15],[54,16],[55,14],[55,15],[55,16],[55,17]];
          all_mines_hexes = all_mines_hexes ^ temp_list;
          for hex in temp_list do
               PlaceMine(hex[1],hex[2],mines_side,0);

          //Farmer defensive mines.
          farmer_defence_num_mines = [0,3,6][difficulty];
          farmer_defence_mines_centerhexes = [[84,52],[88,56],[117,70],[120,68],[123,65],[124,61]];

          temp_list = ai_soldiers[3] diff [Farmer,Gordon,Willard];
          farmer_mine_guy = temp_list[Rand(1,temp_list)];

          temp_list = farmer_defence_mines_centerhexes;
          for i = 1 to farmer_defence_num_mines do
               begin
                    k = Rand(1,temp_list);
                    hex = temp_list[k];
                    temp_list = Delete(temp_list,k);

                    temp_list_2 = GetHexesNearHex(hex[1],hex[2],3);
                    repeat
                    k = Rand(1,temp_list_2);
                    if not temp_list_2[k] in farmer_defence_mines_hexes then
                         break;

                    temp_list_2 = Delete(temp_list_2,k);

                    until temp_list_2 = 0;

                    if temp_list_2 > 0 then
                         begin
                              PlaceMine(temp_list_2[k][1],temp_list_2[k][2],mines_side,0);

                              all_mines_hexes = all_mines_hexes ^ [temp_list_2[k]];
                              farmer_defence_mines_hexes = farmer_defence_mines_hexes ^ [temp_list_2[k]];
                         end;
               end;
     end;

Function InitComputerLvlFeatures;
     var buildings_loc, i, temp_list, p, info_list;
     var temp_list_2;
     begin
          //Find the Russian buildings which should be build as the computer levels up.
          temp_list_2 = [];
          for i in buildings_except_from_lvlup diff 0 do
               temp_list_2 = Insert(temp_list_2,1,[GetX(i),GetY(i)]);
          
          buildings_loc = [];
          i = 1;
          while i <= ai_buildings_locations[1] do
               begin
                    if ai_buildings_locations[1][i][4] in [b_breastwork,b_bunker,b_turret] and not [ai_buildings_locations[1][i][1],ai_buildings_locations[1][i][2]] in temp_list_2 then
                         begin
                              buildings_loc = buildings_loc ^ [ai_buildings_locations[1][i]];

                              p = HexInfo(ai_buildings_locations[1][i][1],ai_buildings_locations[1][i][2]);
                              RemoveBuildingFromVariables(1,p);
                              DestroyUnit(p);

                              temp_list = Delete(ai_buildings_locations[1],i);
                              ai_buildings_locations = Replace(ai_buildings_locations,1,temp_list);

                              continue;
                         end;

                    i = i + 1;
               end;

          //Randomize the order in which they are build. Some weapons come first, though.
          temp_list = [];
          for i in buildings_loc do
               begin
                    temp_list = temp_list ^ Rand(1,100);
               end;

          buildings_loc = SortListByListDesc(buildings_loc,temp_list);
          
                           
          //Make a randomized even distribution of all categories.
          //The categories going lastly will be scattered the least uniformly because they just have to "fill out" the holes.
          //The doubles define where in the computer_level_features list the items should be distributed (0.2,0.5 means from the 20% point to the 50% point).
          //They will be distributed evenly but with a slight randomized scatter.
          info_list = [[cl_rus_veh_defend,0.00,1.00,[1,2,3,4,5,6,7]],
                       [cl_building,0.00,1.00,buildings_loc]
                      ];   
         
          computer_level_features_1 = RandomizeEvenDistribution(info_list);  //Defensive upgrades
          base_time_features_1 = RoundDouble([65$0,50$0,40$0][difficulty] / computer_level_features_1);
          
          ai_max_num_vehicles_defend = Replace(ai_max_num_vehicles_defend,3,[2,3,3][difficulty]);
          ai_max_num_vehicles_attack = Replace(ai_max_num_vehicles_attack,3,[0,1,2][difficulty]);

          temp_list = [];
          for i = ai_max_num_vehicles_attack[3]+1 to ai_max_num_vehicles_defend[3] do
               temp_list = temp_list ^ i;

          info_list = [[cl_ar_veh_attack,0.00,0.20,temp_list],
                       [cl_ar_implosion_veh,[0.70,0.60,0.50][difficulty],1.00,[1,2,3]],
                       [cl_rus_taufield_veh,[0.50,0.40,0.30][difficulty],1.00,[1,2,3]],
                       [cl_rus_veh_attack,0.00,1.00,[1,2,3,4,5,6,7]]
                      ];

          computer_level_features_2 = RandomizeEvenDistribution(info_list);  //Offensive upgrades
          //base_time_features_2 = RoundDouble([55$0,42$0,35$0][difficulty] / computer_level_features_2);
          base_time_features_2 = RoundDouble([65$0,50$0,40$0][difficulty] / computer_level_features_2);


          //The Russian barracks. It can almost protect the Russians itself so it's decisive when it's build and upgraded.
          temp_list_2 = [];
          i = 1;
          while i <= ai_buildings_locations[1] do
               begin
                    if ai_buildings_locations[1][i][4] = b_barracks then
                         begin
                              temp_list_2 = ai_buildings_locations[1][i];

                              p = HexInfo(ai_buildings_locations[1][i][1],ai_buildings_locations[1][i][2]);
                              RemoveBuildingFromVariables(1,p);
                              DestroyUnit(p);

                              temp_list = Delete(ai_buildings_locations[1],i);
                              ai_buildings_locations = Replace(ai_buildings_locations,1,temp_list);

                              break;
                         end;

                    i = i + 1;
               end;

          i = RoundDouble(computer_level_features_1 / 5);
          computer_level_features_1 = Insert(computer_level_features_1,i*4,[cl_building,temp_list_2]);
          computer_level_features_1 = Insert(computer_level_features_1,i*3,[cl_building,Replace(temp_list_2,4,b_armoury)]);


          //Attack delay.
          //At the very end Farmer raises his vehicle amount to 6.
          computer_level_features_2 = Insert(computer_level_features_2,1,[cl_attack_time,[5$0,4$30,4$0][difficulty]]);
          i = RoundDouble(computer_level_features_2 / 3);
          computer_level_features_2 = Insert(computer_level_features_2,i*2,[cl_attack_time,[4$0,3$30,3$0][difficulty]]);
          computer_level_features_2 = Insert(computer_level_features_2,i,[cl_attack_time,[4$30,4$0,3$30][difficulty]]);
          
          if difficulty > 1 then
               begin
                    for i = ai_max_num_vehicles_defend[3]+1 to 6 do
                         begin
                              computer_level_features_2 = computer_level_features_2 ^ [[cl_ar_veh_defend,i],[cl_ar_veh_attack,i]];
                         end;

                    computer_level_features_2 = computer_level_features_2 ^ [[cl_attack_time,0$0]];  //Attack as fast as you can
               end;


          //Go to level 1 so attack delay is initialized.
          ComputerLvlUp(2);

          //Level up the computer according to how fast the player finished the first part of the mission.
          case time_determined_situation of
               1: time_that_has_passed = 0$0;
               2: time_that_has_passed = 2$30;
               3: time_that_has_passed = 5$0;
          end;

          //Reset attack delays.
          for i in ai_bases do
               begin
                    ResetVehicleAttackDelay(i);
                    ResetHumanAttackDelay(i);
               end;
                            
          {
          -- Some stuff for testing --

          temp_list = [[],[],[],[],[],[],[],[]];
          for i = 1 to computer_level_features do
               begin
                    case computer_level_features[i][1] of
                         cl_building: temp_list = Replace(temp_list,1,temp_list[1]^i);
                         cl_rus_veh_defend: temp_list = Replace(temp_list,2,temp_list[2]^i);
                         cl_rus_veh_attack: temp_list = Replace(temp_list,3,temp_list[3]^i);
                         cl_rus_taufield_veh: temp_list = Replace(temp_list,4,temp_list[4]^i);
                         cl_ar_implosion_veh: temp_list = Replace(temp_list,5,temp_list[5]^i);
                         cl_ar_veh_attack: temp_list = Replace(temp_list,6,temp_list[6]^i);
                         cl_attack_time: temp_list = Replace(temp_list,7,temp_list[7]^i);
                         else temp_list = Replace(temp_list,8,temp_list[8]^i);
                            


                         cl_rus_veh_defend: temp_list = Replace(temp_list,2,temp_list[2]^computer_level_features[i][2]);
                         cl_rus_veh_attack: temp_list = Replace(temp_list,3,temp_list[3]^computer_level_features[i][2]);
                         cl_rus_taufield_veh: temp_list = Replace(temp_list,4,temp_list[4]^computer_level_features[i][2]);
                         cl_ar_implosion_veh: temp_list = Replace(temp_list,5,temp_list[5]^computer_level_features[i][2]);
                         cl_ar_veh_attack: temp_list = Replace(temp_list,6,temp_list[6]^computer_level_features[i][2]);
                    end;
               end;

          display_strings = ['ALL IN ALL ' & (computer_level_features+0)];

          display_strings = display_strings ^ (cl_building & ' ' & temp_list[1] & ' ' & (temp_list[1]+0));
          display_strings = display_strings ^ (cl_rus_veh_defend & ' ' & temp_list[2] & ' ' & (temp_list[2]+0));
          display_strings = display_strings ^ (cl_rus_veh_attack & ' ' & temp_list[3] & ' ' & (temp_list[3]+0));
          display_strings = display_strings ^ (cl_rus_taufield_veh & ' ' & temp_list[4] & ' ' & (temp_list[4]+0));
          display_strings = display_strings ^ (cl_ar_implosion_veh & ' ' & temp_list[5] & ' ' & (temp_list[5]+0));
          display_strings = display_strings ^ (cl_ar_veh_attack & ' ' & temp_list[6] & ' ' & (temp_list[6]+0));
          display_strings = display_strings ^ (cl_attack_time & ' ' & temp_list[7] & ' ' & (temp_list[7]+0));
          display_strings = display_strings ^ ('NONE ' & temp_list[8] & ' ' & (temp_list[8]+0));       


          temp_list_2 = false;
          for i = 2 to 6 do
          begin
               k = 1;
               
               for p in temp_list[i] do
                    begin

                         if p <> k then
                         begin
                              temp_list_2 = true;
                              display_strings = display_strings ^ ['increment error at '&i];
                              break;
                         end;

                         k = k + 1;
                    end;
          end;   
           
          temp_list_2 = false;
                    k = 0;
                    for i in computer_level_features do
                         begin
                              if i[1] = cl_rus_veh_defend then
                              k = i[2];

                              if i[1] = cl_rus_veh_attack then
                                   if i[2] > k then
                                        begin
                                             temp_list_2 = true;
                                             display_strings = display_strings ^ ['attack def error'];
                                             break;
                                        end;
                           end;
          }
     end;
Function RandomizeEvenDistribution(info_list);
     var p, computer_level_features, scatter, start, index, high, low, orig_index, k, i, temp_list, temp_list_2, space;
     begin
          computer_level_features = [];

          p = 0;
          for i in info_list do
               p = p + i[4];

          for i = 1 to p do
               computer_level_features = computer_level_features ^ 0;

          scatter = RoundDouble(computer_level_features * 0.06);

          for p in info_list do
               begin
                    if p[4] > 1 then
                         space = (computer_level_features * (p[3] - p[2])) / (p[4] - 1)
                    else
                         space = -1;

                    start = RoundDouble(computer_level_features * p[2]);
                    if start = 0 then
                         start = 1;

                    index = start;

                    for i = 1 to p[4] do
                         begin
                              k = index - scatter;
                              if k < 1 then
                                   k = 1;

                              index = Rand(k,index+scatter);
                              if index > computer_level_features then
                                   index = computer_level_features+0;

                              low = index;
                              high = index;
                              orig_index = index;

                              repeat

                              if computer_level_features[index] = 0 then
                                   begin
                                        computer_level_features = Replace(computer_level_features,index,[p[1],p[4][i]]);
                                        break;
                                   end;

                              if low = 0 and high = computer_level_features+0 then
                                   begin
                                        //Should never happen
                                        break;
                                   end
                              else
                                   if low > 1 and ( high = computer_level_features+0 or orig_index - low < high - orig_index or ( orig_index - low = high - orig_index and Rand(1,2) = 1 ) ) then
                                        begin
                                             low = low - 1;
                                             index = low;
                                        end
                                   else
                                        begin
                                             high = high + 1;
                                             index = high;
                                        end;

                              until false;

                              index = start + RoundDouble(space * i);
                         end;
               end;

          //Clean up computer_level_features. The number of attacking vehicles must never exceed the number of defending vehicles (if it does the AI will
          //never attack).
         { p = 0;   -> no longer necessary. If the number of attacking vehicles is bigger than the number of defending vehicles we just attack with the number of defending vehicles
          for i = 1 to computer_level_features do
               begin
                    if computer_level_features[i][1] = cl_rus_veh_defend then
                         begin
                              p = p + 1;
                         end;

                    if computer_level_features[i][1] = cl_rus_veh_attack then
                         begin
                              p = p - 1;

                              if p < 0 then
                                   begin
                                        for k = i+1 to computer_level_features do
                                             if computer_level_features[k][1] = cl_rus_veh_defend then
                                                  begin
                                                       temp_list = computer_level_features[i];
                                                       computer_level_features = Replace(computer_level_features,i,computer_level_features[k]);
                                                       computer_level_features = Replace(computer_level_features,k,temp_list);
                                                       break;
                                                  end;

                                        p = 1;
                                   end;
                         end;
               end;   }

          //Clean up computer_level_features so incrementing categories actually occur
          //in incrementing order. The random scattering could have switched the order as well as the cleanup above.
          for p in [cl_rus_veh_defend,cl_ar_veh_attack,cl_rus_veh_defend,cl_rus_veh_attack,cl_rus_taufield_veh,cl_ar_implosion_veh] do
               begin
                    temp_list = [];
                    for i in computer_level_features do
                         if i[1] = p then
                              temp_list = temp_list ^ i[2];

                    temp_list = SortListByListAsc(temp_list,temp_list);

                    k = 1;
                    for i = 1 to computer_level_features do
                         begin
                              if computer_level_features[i][1] = p then
                                   begin
                                        temp_list_2 = Replace(computer_level_features[i],2,temp_list[k]);
                                        computer_level_features = Replace(computer_level_features,i,temp_list_2);
                                        k = k + 1;
                                   end;
                         end;
               end;

          result = computer_level_features;
     end;


Function Action;
     var i;
     begin
          wait(2);
          CenterNowOnXY(137,117);
          
          wait(0$0.2);
          ChangeMissionObjectives('M2');

          wait(0$0.2);
          SaveForQuickRestart;
     end;