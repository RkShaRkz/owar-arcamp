
//Russians have unlimited resources
Every 0$10 do
     var i, base;
     begin
          for i = 1 to ai_depot do
               if IsOk(ai_depot[i]) and GetSide(ai_depot[i]) = russians then
                    begin
                         base = GetBase(ai_depot[i]);

                         SetResourceType(base,mat_cans,300);
                         SetResourceType(base,mat_oil,300);
                    end;

          enable;
     end;


On UnitDestroyed(un) do
     var side, temp_list, base;
     begin
          if un = Heike then
               begin
                    ExclusiveOn;
                    Wait(0$1);
                    YouLost('HeikeDead');
                    ExclusiveOff;
               end;

          if un = MarkB and survivors_found > 0 then
               begin
                    ExclusiveOn;
                    wait(0$1);
                    YouLost('MarkDead');
                    ExclusiveOff;
               end;

          
          for base in ai_bases do
               begin
                    temp_list = ai_captured_buildings[base] diff un;
                    ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
               end;

          side = GetSide(un);
          if side <> russians then
               exit;

          //Update computer variables
          case GetType(un) of
               unit_human:
                    for base in ai_bases do
                         RemoveHumanFromVariables(base,un,true);
               unit_vehicle:
                    for base in ai_bases do
                         RemoveVehicleFromVariables(base,un);
               unit_building:
                    for base in ai_bases do
                         RemoveBuildingFromVariables(base,un);
          end;
     end;
Function RemoveBuildingFromVariables(base,building);
     var temp_list;
     begin
          temp_list = ai_all_buildings[base] diff building;
          ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

          if building = ai_building_under_construction[base] then
               ai_building_under_construction = Replace(ai_building_under_construction,base,0);

          UpdateBuildingBasicVariables(base,building,false);
     end;
Function RemoveVehicleFromVariables(base,vehicle);
     var temp_list;
     begin
          //Global "basis" lists of vehicles. If a vehicle belong to this base it will be in one
          //and only one of these lists.
          if vehicle in ai_vehicles_defend[base] then
               begin
                    temp_list = ai_vehicles_defend[base] diff vehicle;
                    ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
               end;

          if vehicle in ai_vehicles_attack[base] then
               begin
                    temp_list = ai_vehicles_attack[base] diff vehicle;
                    ai_vehicles_attack = Replace(ai_vehicles_attack,base,temp_list);
               end;

          if vehicle = ai_cargo_bay[base] then
               ai_cargo_bay = Replace(ai_cargo_bay,base,0);


          //Global "transient" lists of vehicles. Vehicles belonging to this base may be in one or more of these lists if
          //it performs a special or temporary job (you could say that the vehicle is in a special state).
          if vehicle in ai_refuel_vehicles_list[base] then
               begin
                    temp_list = ai_refuel_vehicles_list[base] diff vehicle;
                    ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);
               end;
     end;
Function RemoveHumanFromVariables(base,human,check_if_base_is_dead);
     var temp_list;
     begin
          //Global "basis" lists of humans. If a human belong to this base he/she will be in one
          //and only one of these lists.
          if human in ai_soldiers[base] then
               begin
                    temp_list = ai_soldiers[base] diff human;
                    ai_soldiers = Replace(ai_soldiers,base,temp_list);
               end;

          if human in ai_engineers[base] then
               begin
                    temp_list = ai_engineers[base] diff human;
                    ai_engineers = Replace(ai_engineers,base,temp_list);
               end;

          if human in ai_mechanics_defend[base] then
               begin
                    temp_list = ai_mechanics_defend[base] diff human;
                    ai_mechanics_defend = Replace(ai_mechanics_defend,base,temp_list);
               end;

          if human in ai_scientists[base] then
               begin
                    temp_list = ai_scientists[base] diff human;
                    ai_scientists = Replace(ai_scientists,base,temp_list);
               end;


          //Global "transient" lists of humans. Humans belonging to this base may be in one or more of these lists if
          //he/she performs a special or temporary job (you could say that the human is in a special state).
          if human in ai_heal_these_humans[base] then
               begin
                    temp_list = ai_heal_these_humans[base] diff human;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
               end;

          if human = ai_building_constructor[base] then
               ai_building_constructor = Replace(ai_building_constructor,base,0);

          //If there are no human units left the base is "dead"
          if check_if_base_is_dead then
               if ((ai_soldiers[base] ^ ai_engineers[base] ^ ai_mechanics_defend[base] ^ ai_scientists[base]) diff 0) = 0 then
                    ai_bases = ai_bases diff base;
     end;


Function FindBase(un);
     var i, hexes, k;
     begin
          hexes = [];

          for i in ai_bases do
               for k in ai_buildings_locations[i] do
                    if k[4] in [b_depot,b_warehouse] then
                         begin
                              hexes = Replace(hexes,i,[k[1],k[2]]);
                              continue;
                         end;

          for i in ai_bases do
               if GetDistUnitXY(un,hexes[i][1],hexes[i][2]) <= 40 then
                    begin
                         result = i;
                         exit;
                    end;

          result = 0;
     end;

Function GetBaseSide(base);
     begin
          result = russians;
     end;

Function GetBaseNation(base);
     begin
          result = nation_russian;
     end;

Export Function GetBaseArea(base);
     begin
          case base of
               1: result = rubase1;
               2: result = rubase2;
               3: result = rubase3;
          end;
     end;


//Soldiers
//Keep them in bunkers/armoury. If that's not possible due to structure restrictions then help construct buildings. Else retreat to
//the center of the base.
Every 0$1 do
     var side, i, temp_list, buildings_list, soldiers_list, temp_unit, base, bunkers, under_attack, j;
     begin
          side = russians;

          for base in ai_bases do
               begin
                    soldiers_list = ai_soldiers[base];
                    under_attack := BaseUnderAttack(side,base);


                    //Identify soldiers who need healing.
                    temp_list = ai_heal_these_humans[base];
                    for i in soldiers_list diff ai_heal_these_humans[base] do
                         if GetLives(i) < 800 then
                              temp_list = temp_list ^ i;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);

                    if not under_attack then  //Soldiers don't care if they are wounded if the base is under attack
                         begin
                              //Make soldiers needing healing go outside (else they won't be healed, cf. the healing
                              //code (controlling scientists) below.
                              for i in ai_heal_these_humans[base] do
                                   if i in soldiers_list then
                                        case GetType(IsInUnit(i)) of
                                             unit_vehicle: ComExitVehicle(i);
                                             unit_building: ComExitBuilding(i);
                                        end;

                              soldiers_list = soldiers_list diff ai_heal_these_humans[base];
                         end;

                    if soldiers_list = 0 then
                         continue;


                    //Find the bunkers which need to be occupied.
                    //Remember which soldiers are already inside a building.
                    //Don't occupy b_bunker if there is no power.
                    i = false;
                    if IsOk(ai_depot[base]) then
                         if GetEnergy(GetBase(ai_depot[base]))[4] > 0 then
                              i = true;

                    if i then
                         bunkers = ai_bunkers[base]
                    else
                         begin
                              bunkers = [];
                              for i in ai_bunkers[base] do
                                   if GetBType(i) = b_breastwork then
                                        bunkers = bunkers ^ i;
                         end;

                    buildings_list = [];
                    for i in UnitFilter(bunkers,[f_ok]) do
                         begin
                              temp_unit = UnitsInside(i);
                              if temp_unit = 0 then
                                   buildings_list = buildings_list ^ i
                              else soldiers_list = soldiers_list diff temp_unit;
                         end;


                    //The best soldiers should go to the bunkers. The rest in the armoury.
                    //If the base is under attack then just the nearest soldier.
                    if buildings_list > 0 then
                         begin
                              if not under_attack then
                                   begin
                                        temp_list = [];
                                        for i in soldiers_list do
                                             temp_list = temp_list ^ GetSkill(i,skill_combat);
                                        soldiers_list = SortListByListDesc(soldiers_list,temp_list);
                                   end;

                              for i = 1 to buildings_list do
                                   begin
                                        if soldiers_list = 0 then
                                             break;

                                        if not under_attack then
                                             temp_unit = soldiers_list[1]
                                        else
                                             begin
                                                  temp_list = [];
                                                  for j in soldiers_list do
                                                       temp_list = temp_list ^ GetDistUnits(j,buildings_list[i]);

                                                  temp_unit = WorstFromListByList(soldiers_list,temp_list);
                                             end;

                                        ComEnterUnit(temp_unit,buildings_list[i]);
                                        soldiers_list = soldiers_list diff temp_unit;
                                   end;
                         end;


                    //The rest enter armoury (if possible)
                    if IsOk(ai_armoury[base]) and BuildingStatus(ai_armoury[base]) <> bs_build then
                         begin
                              if IsOk(ai_armoury[base]) then
                                   begin
                                        temp_list = UnitsInside(ai_armoury[base]);
                                        soldiers_list = soldiers_list diff temp_list;

                                        for i = 5 downto temp_list+0 do
                                             begin
                                                  if soldiers_list = 0 then
                                                       break;

                                                  ComEnterUnit(soldiers_list[1],ai_armoury[base]);
                                                  soldiers_list = Delete(soldiers_list,1);
                                             end;
                                   end;

                              for i in soldiers_list do
                                   if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                                        ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                         end
                    else
                         if ai_building_under_construction[base] > 0 and not under_attack then
                              begin
                                   for i in soldiers_list do
                                        SetTaskList(i,[['h',0,0,ai_building_under_construction[base],0,0,0]]);  //'h' is "help building building"
                              end
                         else
                              for i in soldiers_list do
                                   if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                                        ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
               end;

          enable;
     end;


//Engineers
//These are the priorities (descending order):
//- If an engineer is hurt, them pull him/her back for healing.
//- Reparation of red buildings
//- Reparation of any building
//- Reconstruct destroyed buildings if necessary, but only if the base is not under attack.
//- Gather crates in the vicinity of the base, but only if the base is not under attack.
//- Return to and stay inside the depot.
Every 0$1 do
     var side, i, engineers_list, temp_list, buildings_list, temp_unit, away_dist, temp_list_2, base, k;
     var under_attack;
     begin
          side = russians;

          for base in ai_bases do
               begin
                    under_attack = BaseUnderAttack(side,base);

                    engineers_list = ai_engineers[base] diff ai_heal_these_humans[base];

                    //Identify engineers who need healing
                    temp_list = ai_heal_these_humans[base];
                    i = 1;
                    while i <= engineers_list do
                         begin
                              if GetLives(engineers_list[i]) <= 700 then
                                   begin
                                        temp_list = temp_list ^ engineers_list[i];
                                        engineers_list = Delete(engineers_list,i);
                                        i = i - 1;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    if engineers_list = 0 then
                         continue;


                    //Recapture buildings if necessary. Depots first. Here we assume the player hasn't changed the base
                    //of the captured building.
                    //Apemen engineers can't capture buildings.
                    temp_list_2 = UnitFilter(engineers_list,[f_class,class_engineer]);
                    if ai_captured_buildings[base] > 0 and temp_list_2 > 0 then
                         begin
                              temp_list = [];
                              for i in ai_captured_buildings[base] do
                                   if GetBType(i) in [b_depot,b_warehouse] then
                                        temp_list = temp_list ^ 1
                                   else
                                        temp_list = temp_list ^ 0;

                              temp_list = SortListByListDesc(ai_captured_buildings[base],temp_list);

                              //Normal "ComEnterUnit" for capturing doesn't work for buildings which can't be entered (e.g. power plants).
                              temp_list_2 = GetHumansOutOfUnits(temp_list_2);
                              if temp_list_2 > 0 then
                                   begin
                                        temp_list_2 = SortListByListDesc(temp_list_2, temp_list_2);  //To ensure we take the same unit each time
                                        SetTaskList(temp_list_2[1],[['e',GetX(temp_list[1]),GetY(temp_list[1]),temp_list[1],0,0,0]]);
                                        engineers_list = engineers_list diff temp_list_2[1];
                                   end;

                              if engineers_list = 0 then
                                   continue;
                         end;


                    //Find buildings which need to be repaired. At least one engineer for each if possible.
                    i = 1;
                    buildings_list = [];
                    repeat
                         case i of
                              1: buildings_list = UnitFilter(ai_all_buildings[base],[f_not,[f_ok]]);  //If building is dead then it won't be part of ai_all_buildings
                              2: buildings_list = UnitFilter(ai_all_buildings[base],[f_not,[f_lives,1000]]);
                         end;

                         i = i + 1;
                    until buildings_list > 0 or i > 2;

                    if buildings_list > 0 then
                         begin
                              engineers_list = GetHumansOutOfUnits(engineers_list);

                              repeat
                                   i = 1;
                                   while i <= buildings_list do
                                        begin
                                             if engineers_list = 0 then
                                                  break;

                                             temp_unit = NearestUnitToUnit(engineers_list,buildings_list[i]);
                                             ComRepairBuilding(temp_unit,buildings_list[i]);
                                      
                                             engineers_list = engineers_list diff temp_unit;

                                             i = i + 1;
                                        end;

                              until engineers_list = 0;

                              continue;
                         end;


                    if not under_attack then
                         begin
                              //Reconstruct buildings if any has been destroyed.
                              //First check if a building is already being constructed - then build that one first.
                              //Upgrading buildings can be hard if the building is working or something, so check if the
                              //building is actually under construction (or being upgraded) - if not then reset the
                              //relevant variables.
                              if ai_building_under_construction[base] > 0 then
                                   if BuildingStatus(ai_building_under_construction[base]) = bs_build then
                                        begin
                                             for i in GetHumansOutOfUnits(engineers_list) do
                                                  ComRepairBuilding(i,ai_building_under_construction[base]);

                                             continue;
                                        end
                                   else
                                        begin
                                             ComCancel(ai_building_under_construction[base]);  //To make sure upgrade of building is possible
                                             ai_building_under_construction = Replace(ai_building_under_construction,base,0);
                                        end;

                              if ai_all_buildings[base] < ai_buildings_locations[base] or ai_upcoming_building_data[base] > 0 then
                                   begin
                                        //Decide which building to construct. We take the first building in the location list which is
                                        //arranged in prioritated order.
                                        if ai_upcoming_building_data[base] = 0 then
                                             begin
                                                  temp_list = [];
                                                  for i in ai_buildings_locations[base] do
                                                       if GetBType(HexInfo(i[1],i[2])) = -1 then  //no building on the spot
                                                            begin
                                                                 temp_list = i;
                                                                 break;
                                                            end;

                                                  if temp_list > 0 then  //Not necessarily the case (one of our buildings could have been captured)
                                                       begin
                                                            //If the building is a bunker then check if we have enough soldiers
                                                            //to occupy it. If not then build a turret instead.
                                                            if temp_list[4] = b_bunker and GetBaseNation(base) in [nation_american,nation_russian] then
                                                                 begin
                                                                      k = 0;

                                                                      for i in ai_buildings_locations[base] do
                                                                           if i[4] in [b_breastwork,b_bunker,b_armoury,b_barracks,b_fort] then
                                                                                k = k + 1;

                                                                      if k > ai_soldiers[base] then
                                                                           begin
                                                                                //Permanently change this to a turret. It would be nice if it would still be built as a
                                                                                //bunker if soldiers are added later but that's a rare case and adds unnecessary complexity.
                                                                                for i = 1 to ai_buildings_locations[base] do
                                                                                     if ai_buildings_locations[base][i] = temp_list then
                                                                                          begin
                                                                                               temp_list_2 = Replace(ai_buildings_locations[base][i],4,b_turret);
                                                                                               temp_list_2 = Replace(ai_buildings_locations[base],i,temp_list_2);
                                                                                               ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list_2);

                                                                                               break;
                                                                                          end;

                                                                                temp_list = Replace(temp_list,4,b_turret);
                                                                           end;
                                                                 end;

                                                            ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,temp_list);
                                                       end;
                                             end;


                                        if ai_upcoming_building_data[base] > 0 then
                                             begin
                                                  //Find the best engineer to construct the building
                                                  if ai_building_constructor[base] = 0 then
                                                       begin
                                                            temp_list_2 = UnitFilter(ai_engineers[base],[f_class,class_engineer]);

                                                            if temp_list_2 > 0 then
                                                                 begin
                                                                      temp_list = [];
                                                                      for i in temp_list_2 do
                                                                           temp_list = temp_list ^ GetSkill(i,skill_engineering);
                                                                      ai_building_constructor = Replace(ai_building_constructor,base, BestFromListByList(temp_list_2,temp_list) );
                                                                 end;
                                                       end;

                                                  if ai_building_constructor[base] in engineers_list and ai_building_constructor[base] > 0 then
                                                       begin
                                                            engineers_list = engineers_list diff ai_building_constructor[base];

                                                                           //Build/upgrade the building
                                                                           case GetType(IsInUnit(ai_building_constructor[base])) of
                                                                                unit_building: ComExitBuilding(ai_building_constructor[base]);
                                                                                unit_vehicle: ComExitVehicle(ai_building_constructor[base]);
                                                                                else
                                                                                case GetBType(HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2])) of
                                                                                     -1: begin
                                                                                          case ai_upcoming_building_data[base][4] of
                                                                                               b_warehouse: i = b_depot;
                                                                                               b_factory: i = b_workshop;
                                                                                               b_lab_half,b_lab_full: i = b_lab;
                                                                                               b_barracks: i = b_armoury;
                                                                                               else i = ai_upcoming_building_data[base][4];
                                                                                          end;

                                                                                          ComBuild(ai_building_constructor[base],i,ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],ai_upcoming_building_data[base][3]);
                                                                                     end;
                                                                                     b_depot: begin
                                                                                          ComUpgrade(ai_depot[base]);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,ai_depot[base]);
                                                                                     end;
                                                                                     b_workshop: begin
                                                                                          ComUpgrade(ai_fact[base]);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,ai_fact[base]);
                                                                                     end;
                                                                                     b_lab,b_lab_half: begin
                                                                                          if ai_upcoming_building_data[base][5] <> b_lab_basic and not ai_upcoming_building_data[base][5] in [GetLabKind(ai_lab[base],1),GetLabKind(ai_lab[base],2)] then
                                                                                               ComUpgradeLab(ai_lab[base],ai_upcoming_building_data[base][5])
                                                                                          else
                                                                                               if ai_upcoming_building_data[base][6] <> b_lab_basic then
                                                                                                    ComUpgradeLab(ai_lab[base],ai_upcoming_building_data[base][6])
                                                                                               else  //should never happen
                                                                                                    begin
                                                                                                         ai_building_constructor = Replace(ai_building_constructor,base,0);
                                                                                                         ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);
                                                                                                    end;

                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,ai_lab[base]);
                                                                                     end;
                                                                                     b_armoury: begin
                                                                                          temp_unit = HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]);
                                                                                          ComUpgrade(temp_unit);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,temp_unit);
                                                                                     end;
                                                                                end;
                                                                           end;
                                                       end;
                                             end;
                                   end;

                              
                              //Gather crates in the vicinity of the base.
                              //Everyone go after the same bunch of crates.
                              case base of
                                   1: temp_unit = rubase1;
                                   2: temp_unit = rubase2;
                                   3: temp_unit = rubase3;
                              end;
                              temp_list = GetListOfCratesInArea(temp_unit);
                              if temp_list > 0 and ai_depot[base] > 0 then
                                   begin
                                        ComCollect(GetHumansOutOfUnits(engineers_list),temp_list[1],temp_list[2]);
                                        continue;
                                   end;
                         end;

                    
                    //Return to and stay inside the depot (if possible)
                    if IsOk(ai_depot[base]) then
                         begin
                              for i in engineers_list do
                                   begin
                                        temp_unit = IsInUnit(i);
                                        if temp_unit <> ai_depot[base] then
                                             case GetType(temp_unit) of
                                                  unit_building: ComExitBuilding(i);
                                                  unit_vehicle: ComExitVehicle(i);
                                                  else
                                                       ComEnterUnit(i,ai_depot[base]);
                                             end;
                                   end;
                         end
                    else
                         for i in engineers_list do
                              if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                                   ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);  
               end;

          enable;
     end;
On BuildingStarted(building,builder) do
     var side, temp_list, base, i;
     begin
          side = GetSide(building);
          if side <> russians then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          ai_building_constructor = Replace(ai_building_constructor,base,0);

          //ONLY 1 building is under construction at a time!
          ai_building_under_construction = Replace(ai_building_under_construction,base,building);
     end;
On BuildingComplete(building) do
     var side, temp_list, temp_unit, base, i;
     begin
          side = GetSide(building);
          if side <> russians then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          BuildUpgradeCommon(base,building);

          temp_list = ai_all_buildings[base] ^ building;
          ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

          UpdateBuildingBasicVariables(base,building,true);
     end;
On UpgradeComplete(building) do
     var side, temp_list, base;
     begin
          side = GetSide(building);
          if side <> russians then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          BuildUpgradeCommon(base,building);
     end;
Function BuildUpgradeCommon(base,building);
     begin
          //Some buildings require upgrade - e.g. workshop -> factory
          if GetBType(building) = ai_upcoming_building_data[base][4] then
               ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);

          ai_building_under_construction = Replace(ai_building_under_construction,base,0);
     end;
On BuildingCaptured(captured_building,building_former_side,capturing_unit) do
     var temp_list, base;
     begin
          if captured_building in ai_depot then
               begin
                    //Set resource amounts to something realistic.
                    //Remember this should be the same as in event UnitGoesToRed.
                    if captured_building = ai_depot[3] then
                         SetResourceType(GetBase(captured_building),mat_cans,120-difficulty*20)
                    else
                         SetResourceType(GetBase(captured_building),mat_cans,150 + Rand(0,7)*10);

                    SetResourceType(GetBase(captured_building),mat_oil,300 + Rand(0,100));
               end;

          base = FindBase(captured_building);

          if base = 0 then
               exit;

          if building_former_side = GetBaseSide(base) then
               begin
                    if captured_building in ai_all_buildings[base] then
                         begin
                              //Someone captured one of our buildings!
                              RemoveBuildingFromVariables(base,captured_building);

                              temp_list = ai_captured_buildings[base] ^ captured_building;
                              ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
                         end;
               end
          else
               begin
                    if GetSide(captured_building) = GetBaseSide(base) then
                         begin
                              //Ha! We captured it back again!
                              temp_list = ai_all_buildings[base] ^ captured_building;
                              ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

                              UpdateBuildingBasicVariables(base,captured_building,true);

                              temp_list = ai_captured_buildings[base] diff captured_building;
                              ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
                         end;
               end;
     end;
On UnitGoesToRed(un) do
     begin
          if un in ai_depot then
               begin
                    //Set resource amounts to something realistic.
                    //Remember this should be the same as in event BuildingCaptured.
                    if un = ai_depot[3] then
                         SetResourceType(GetBase(un),mat_cans,120-difficulty*20)
                    else
                         SetResourceType(GetBase(un),mat_cans,150 + Rand(0,7)*10);

                    SetResourceType(GetBase(un),mat_oil,300 + Rand(0,100));
               end;
     end;


//Function which orders human units inside other units to exit them. Returns a list with the units which weren't inside other units.
Export Function GetHumansOutOfUnits(un_list);
     var i;
     begin
          result = [];
          for i in un_list do
               case GetType(IsInUnit(i)) of
                    unit_building: ComExitBuilding(i);
                    unit_vehicle: ComExitVehicle(i);
                    else result = result ^ i;
               end;
     end;

//Function which tells if a base is under attack
Export Function BaseUnderAttack(side,base);
     begin
          //If side has had contact with someone recently and there are enemies near the base depot then we presume the base is under attack.
          result = ContactTime(side) < 0$10 and FilterAllUnits([[f_enemy,side],[f_distxy,ai_buildings_locations[base][1][1],ai_buildings_locations[base][1][2],ai_near_base_dist]]) > 0;
     end;


//Mechanics (defending, i.e. in the base)
//Priorities if base is under attack (descending):
//- If a mechanic is hurt, pull him back for healing.
//- Repair war vehicles defending the base.
//- Stay in factory.
//Priorites if not under attack (decending):
//- If a mechanic is hurt, pull him back for healing.
//- Refuel vehicles
//- Repair damaged war vehicles within the base
//- Stay in factory (and possibly construct a vehicle or weapon)
Every 0$1 do
     var side, i, mechanics_list, temp_list, taken_vehicles, temp_list_3, temp_unit, vehicles_list, allowed_to_repair_vehicles;
     var under_attack, free_parking_spots, k, ready_to_attack, base, base_area;
     begin
          side = russians;

          for base in ai_bases do
               begin
                    under_attack = BaseUnderAttack(side,base);  //Base under attack
                    ready_to_attack = not under_attack;  //Are we ready to launch an attack ourselves?

                    case base of
                         1: base_area = rubase1;
                         2: base_area = rubase2;
                         3: base_area = rubase3;
                    end;

                    mechanics_list = ai_mechanics_defend[base] diff ai_heal_these_humans[base];


                    //Count down to attack.
                    //When we are ready to attack (this goes only for base 1 and 2) there is a chance the
                    //other base will attack instead making it harder to predict where attacks will come
                    //from.
                    if base < 3 and ai_attack_delay[base] > 0$0 and UnitFilter(ai_vehicles_attack[base],[f_ok]) = 0 then
                         begin
                              ai_attack_delay = Replace(ai_attack_delay,base, ai_attack_delay[base] - 0$1);  //Must match update time of this every

                              if ai_attack_delay[base] <= 0$0 and UnitFilter(ai_vehicles_attack[[2,1][base]],[f_ok]) = 0 and Rand(1,2) = 1 then
                                   begin
                                        ai_attack_delay = Replace(ai_attack_delay,base, ai_attack_delay[[2,1][base]] );
                                        ai_attack_delay = Replace(ai_attack_delay,[2,1][base],0$0);
                                   end;
                              
                              ready_to_attack = false;
                         end;


                    //Identify mechanics who need healing
                    temp_list = ai_heal_these_humans[base];
                    i = 1;
                    while i <= mechanics_list do
                         begin
                              if GetLives(mechanics_list[i]) <= 900 then
                                   begin
                                        temp_list = temp_list ^ mechanics_list[i];
                                        mechanics_list = Delete(mechanics_list,i);
                                        i = i - 1;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);

                    
                    //Find vehicles which no longer need to refuel.
                    temp_list = [];
                    for i in ai_refuel_vehicles_list[base] do
                         if GetFuel(i) < 95 then
                              temp_list = temp_list ^ i;
                    ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);


                    if under_attack then
                         temp_list = FilterAllUnits([[f_enemy,side],[f_ok],[f_distxy,ai_buildings_locations[base][1][1],ai_buildings_locations[base][1][2],ai_near_base_dist]])
                    else temp_list = [];

                    if temp_list > 0 then
                         begin
                              //Order the vehicles to attack an enemy unit near the base.
                              vehicles_list = ai_vehicles_defend[base];
                              ComAgressiveMove(vehicles_list,GetX(temp_list[1]),GetY(temp_list[1]));
                         end
                    else
                         begin
                              if IsOk(ai_depot[base]) then
                                   begin
                                        //If some vehicles need to refuel then make 'em refuel.
                                        temp_list = ai_refuel_vehicles_list[base];
                                        for i in ai_vehicles_defend[base] diff ai_refuel_vehicles_list[base] do
                                             if GetFuel(i) < 80 then
                                                  temp_list = temp_list ^ i;
                                        ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);

                                        for i in ai_refuel_vehicles_list[base] do
                                             begin
                                                  if IsInArea(i,base_area) then
                                                       begin
                                                            ComMoveUnit(i,ai_depot[base]);
                                                            AddComRefuel(i,ai_depot[base]);
                                                       end
                                                  else
                                                       ComAgressiveMove(i,ai_buildings_locations[base][1][1],ai_buildings_locations[base][1][2]);
                                             end;
                                   end;

                              //Move vehicles outside the base inside (to the depot).
                              for i in ai_vehicles_defend[base] diff ai_refuel_vehicles_list[base] do
                                   if not IsInArea(i,base_area) then
                                        ComAgressiveMove(i,ai_buildings_locations[base][1][1],ai_buildings_locations[base][1][2]);
                         end;


                    if mechanics_list = 0 then
                         continue;


                    //Repair vehicles.
                    //All mechanics go for the same vehicle.
                    allowed_to_repair_vehicles = UnitFilter(ai_vehicles_defend[base],[[f_not,[f_lives,1000]],[f_inarea,base_area]]);

                    if not under_attack then
                         allowed_to_repair_vehicles = allowed_to_repair_vehicles ^ UnitFilter(ai_cargo_bay[base] diff 0,[[f_not,[f_lives,1000]],[f_inarea,base_area]]);

                    if allowed_to_repair_vehicles > 0 then
                         begin
                              ComRepairVehicle( GetHumansOutOfUnits(mechanics_list) , allowed_to_repair_vehicles[1]);
                         end
                    else
                         begin
                              //Attack if we have enough war vehicles to do so, and we are not attacking right now, and we
                              //are ready (everything is fine - no damaged vehicles, not under attack and so on).
                              //The computer attacks with maximum (difficulty + 1).
                              //This must be synchronized with how many vehicles will be produced (see every below).
                              if UnitFilter(ai_vehicles_attack[base],[f_ok]) = 0 and ready_to_attack and ai_refuel_vehicles_list[base] = 0 and ai_vehicles_defend[base] >= NumOfVehicleReqToAttack then
                                   begin
                                        //Pick base to attack. If the player has taken over Russian base 3 there is a chance
                                        //Russians will attack it (can only happen from Russian base 2).
                                        if FilterAllUnits([[f_side,you],[f_type,unit_building],[f_inarea,rubase3]]) > 0 and Rand(1,100) <= [0,50,50][difficulty] and base = 2 then
                                             k = 2
                                        else k = 1;
                                        ai_going_to_attack_this_base = Replace(ai_going_to_attack_this_base,base,k);

                                        //Pick vehicles for attack
                                        temp_list = [];
                                        for k = 1 to NumOfVehicleReqToAttack do
                                             begin
                                                  temp_list = temp_list ^ ai_vehicles_defend[base][1];

                                                  //temp_list_3 = Delete(ai_vehicles_defend[base],1);
                                                  //ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list_3);
                                                  RemoveVehicleFromVariables(base,ai_vehicles_defend[base][1]);
                                             end;
                                        ai_vehicles_attack = Replace(ai_vehicles_attack,base,temp_list);

                                        //Reset attack delay
                                        ResetAttackDelay(base);
                                   end;
                              

                              //Rest mechanics stay inside the factory (if possible).
                              //Change class if necessary
                              if IsOk(ai_fact[base]) then
                                   begin
                                        for i in mechanics_list do
                                             begin
                                                  temp_unit = IsInUnit(i);
                                                  if temp_unit <> ai_fact[base] then
                                                       case GetType(temp_unit) of
                                                            unit_vehicle: ComExitVehicle(i);
                                                            unit_building: ComExitBuilding(i);
                                                            else
                                                                 begin
                                                                      ComEnterUnit(i,ai_fact[base]);

                                                                      if GetClass(i) <> class_mechanic then
                                                                           AddComChangeProfession(i,class_mechanic);
                                                                 end;
                                                       end;
                                             end;
                                   end
                              else
                                   for i in mechanics_list do
                                        if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                                             ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                         end;
               end;

          enable;
     end;
Function NumOfVehicleReqToAttack;
     begin
          if tick < 25$0 then
               result = [2,3,3][difficulty]
          else result = [3,4,4][difficulty];
     end;
//Construct combat vehicles and weapons for bunkers. Weapons for bunkers have highest priority.
//Construct automatic cargo bay if we don't have any (goes after weapons for bunkers and before war vehicles).
Every 0$1+0$0.1 do
     var side, i, temp_value, temp_unit, temp_list, base;
     begin
          side = russians;

          for base in ai_bases do
               begin
                    if BuildingStatus(ai_fact[base]) <> bs_idle or not IsOk(ai_fact[base]) or GetBType(ai_fact[base]) <> b_factory then
                         continue;


                    //Check if any bunker needs a weapon
                    temp_value = false;
                    for i in ai_buildings_locations[base] do
                         if i[4] in [b_bunker,b_turret] then
                              begin
                                   temp_unit = HexInfo(i[1],i[2]);

                                   if GetBType(temp_unit) in [b_bunker,b_turret] and not IsConstructed(temp_unit) and GetBWeapon(temp_unit) <> i[7] then
                                        //if i[7] in AvailableWeaponList(ai_fact[base]) then  //Can the factory produce the weapon? (does it have the gun extension, that is).
                                        if IsWeaponFactory(ai_fact[base]) then
                                             begin
                                                  ComPlaceWeapon(temp_unit,i[7]);
                                                  temp_value = true;
                                                  break;
                                             end;
                              end;

                    if temp_value then
                         continue;


                    //Construct cargo bay if we have none.
                    temp_value = false;
                    if ai_cargo_bay[base] = 0 then
                         if ru_medium_tracked in AvailableChassisList(ai_fact[base]) and
                            ru_cargo_bay in AvailableWeaponList(ai_fact[base]) and
                            control_computer in AvailableControlList(ai_fact[base]) then
                              begin
                                   ComConstruct(ai_fact[base],ru_medium_tracked,engine_combustion,control_computer,ru_cargo_bay);
                                   temp_value = true;
                              end;

                    if temp_value then
                         continue;


                    //Construct vehicles.
                    //If there are less vehicles than difficulty + 1 the side will produce a vehicle.
                    if UnitFilter(ai_vehicles_defend[base],[f_ok]) < NumOfVehicleReqToAttack and survivors_found > 0 then
                         case side of
                              russians: begin
                                   if Rand(1,3) = 1 then
                                        begin
                                             if Rand(1,3) = 1 then
                                                  temp_value = ru_heavy_machine_gun
                                             else temp_value = ru_gatling_gun;
                                        end
                                   else
                                        temp_value = ru_gun;

                                   //if not temp_value in AvailableWeaponList(ai_fact[base]) then
                                   if not IsWeaponFactory(ai_fact[base]) then
                                        temp_value = ru_heavy_machine_gun;

                                   if Rand(1,difficulty+1) = 1 then
                                        i = ru_medium_tracked
                                   else i = ru_heavy_tracked;

                                   ComConstruct(ai_fact[base],i,engine_combustion,control_computer,temp_value);
                              end;
                         end;
               end;
          
          enable;
     end;
//If a factory has the gun extension we presume it has all necessary extensions to construct
//any weapon.
Function IsWeaponFactory(factory);
     begin
          if FilterAllUnits([[f_dist,factory,4],[f_btype,b_ext_gun]]) > 0 then
               result = true
          else
               result = false;
     end;
//If the player captures one of the computer's vehicles, then remove it from our variables-system.
On VehicleCaptured(new_identifier,old_identifier,old_side,capturing_unit) do
     var temp_list, base;
     begin
          if old_side = russians_alt and GetSide(capturing_unit) = you and GetWeapon(new_identifier) = ru_cargo_bay then
               cargo_bay_captured = true;

          if old_side <> russians then
               exit;

          for base in ai_bases do
               RemoveVehicleFromVariables(base,old_identifier);
     end;
//When a vehicle is constructed
On VehicleConstructed(vehicle,factory) do
     var side, temp_list, base;
     begin
          side = GetSide(vehicle);
          if side <> russians then
               exit;

          base = FindBase(vehicle);
          if base = 0 then
               exit;
                
          if GetWeapon(vehicle) <> ru_cargo_bay then
               begin
                    temp_list = ai_vehicles_defend[base] ^ vehicle;
                    ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
               end
          else
               ai_cargo_bay = Replace(ai_cargo_bay,base,vehicle);
     end;

//Attacking war vehicles
Every 0$1 do
     var side, i, temp_value, base, is_idle, temp_list, attack_hex, temp_unit, idle_check, temp_list_2, k;
     var idle_time, has_switched_base_target;
     begin
          has_switched_base_target = [false,false,false];  //True if base has attacked one of the player bases and then swicthed to another because there was nothing to shoot at.
          idle_time = [0$0,0$0,0$0];
          side = russians;

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if UnitFilter(ai_vehicles_attack[base],[f_ok]) = 0 then
                         begin
                              idle_time = Replace(idle_time,base,0$0);
                              has_switched_base_target = Replace(has_switched_base_target,base,false);
                              continue;
                         end;


                    //Command vehicles to attack.
                    case ai_going_to_attack_this_base[base] of
                         1: attack_hex = [66,64];
                         2: attack_hex = [116,48];
                         3: begin
                              //Attack the player's base whereever it is.
                              temp_list = FilterAllUnits([[f_side,you],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]]]);
                              if temp_list > 0 then
                                   begin
                                        if temp_list+0 = 1 then
                                             temp_unit = temp_list[1]
                                        else
                                             begin
                                                  //The depot with the most buildings connected to it must be the main depot.
                                                  temp_list_2 = [];
                                                  for k in temp_list do
                                                       temp_list_2 = Replace(temp_list_2,k,0);

                                                  for k in FilterAllUnits([[f_side,you],[f_type,unit_building]]) do
                                                       for i in temp_list do
                                                            if GetBase(k) = GetBase(i) then
                                                                 begin
                                                                      temp_list_2 = Replace(temp_list_2,i,temp_list_2[i]+1);
                                                                      break;
                                                                 end;

                                                  temp_unit = temp_list[1];
                                                  for i in temp_list do
                                                       if temp_list_2[i] > temp_list_2[temp_unit] then
                                                            temp_unit = i;
                                             end;

                                        attack_hex = [GetX(temp_unit),GetY(temp_unit)];
                                   end
                              else
                                   begin
                                        //Abort the attack
                                        temp_list = ai_vehicles_defend[base] ^ ai_vehicles_attack[base];
                                        ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
                                        ai_vehicles_attack = Replace(ai_vehicles_attack,base,[]);

                                        continue;
                                   end;
                         end;
                    end;

                    idle_check = 0;
                    for i in ai_vehicles_attack[base] do
                         begin
                              temp_value = GetTaskList(i);

                              //If the unit is shooting at a unit which is Ok and there is a dying human
                              //unit within the same distance or closer than the current target then
                              //kill off that human unit first.
                              {if temp_value > 0 then
                                        if temp_value[1][1] = '^' then  //'^' is auto attack
                                             begin
                                                  //The unit is auto attacking because it has met an enemy.
                                                  temp_unit = Attacks(i);
                                                  if temp_unit > 0 and IsOk(temp_unit) then
                                                       begin
                                                            temp_value = GetDistUnits(i,temp_unit);
                                                            temp_list = FilterAllUnits([[f_enemy,side],[f_type,unit_human],[f_not,[f_ok]],[f_dist,i,temp_value]]);
                                                            if temp_list > 0 then
                                                                 ComAttackUnit(i,temp_list[1]);

                                                            continue;
                                                       end;
                                             end;}

                              //If the vehicle is near the base then start shooting at humans if possible - else vehicles and buildings.
                              //Shoot at nearest non-human unit (not so important with human units since we just agressive move).
                              if GetDistUnitXY(i,attack_hex[1],attack_hex[2]) > 14 then
                                   ComAgressiveMove(i,attack_hex[1],attack_hex[2])
                              else
                                   begin
                                        temp_list = FilterAllUnits([[f_side,you],[f_type,unit_human],[f_dist,i,20],[f_see,russians]]);

                                        //Finish off dying humans as first priority
                                        temp_list_2 = UnitFilter(temp_list,[f_not,[f_lives,250]]);
                                        if temp_list_2 > 0 then
                                             temp_list = temp_list_2;

                                        if temp_list > 0 then
                                             begin
                                                  temp_unit = AllNearestUnitToUnit(temp_list,i);

                                                  if GetLives(temp_unit) > 250 then
                                                       ComAgressiveMove(i,GetX(temp_unit),GetY(temp_unit))
                                                  else
                                                       ComAttackUnit(i,temp_unit);
                                             end
                                        else
                                             begin
                                                  temp_list = FindNonhumansNearUnit(russians,i,20,true);
                                                  if temp_list > 0 then
                                                       begin
                                                            ComAgressiveMove(i,GetX(temp_list[1]),GetY(temp_list[1]));
                                                       end
                                                  else
                                                       begin
                                                            temp_list = FindNonhumansNearUnit(russians,i,20,false);
                                                            if temp_list > 0 then
                                                                 begin
                                                                      temp_unit = NearestUnitToUnit(temp_list,i);
                                                                      ComAttackUnit(i,temp_unit);
                                                                 end
                                                            else
                                                                 if Attacks(i) = 0 then
                                                                      idle_check = idle_check + 1;
                                                       end;
                                             end;
                                   end;
                         end;

                    //If the vehicles are just standing and doing nothing because there are nothing to shoot at then
                    //move on to next player base or move back to Russian base.
                    if idle_check = ai_vehicles_attack[base] then
                         begin
                              idle_time = Replace(idle_time,base, idle_time[base] + 0$1 );

                              if idle_time[base] >= 0$10 then
                                   begin
                                        if has_switched_base_target[base] then
                                             begin
                                                  temp_list = ai_vehicles_defend[base] ^ ai_vehicles_attack[base];
                                                  ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
                                                  ai_vehicles_attack = Replace(ai_vehicles_attack,base,[]);

                                                  has_switched_base_target = Replace(has_switched_base_target,base,false);
                                             end
                                        else
                                             begin
                                                  ai_going_to_attack_this_base = Replace(ai_going_to_attack_this_base,base,3);
                                                  has_switched_base_target = Replace(has_switched_base_target,base,true);
                                             end;
                                       
                                        idle_time = Replace(idle_time,base,0$0);
                                   end;
                         end
                    else
                         idle_time = Replace(idle_time,base,0$0);
               end;

          until false;
     end;
//The computers's vehicles never seem to run completely out of fuel...
Every 0$5 do
     var base, i;
     begin
          for base in ai_bases do
               for i in (ai_vehicles_attack[base] ^ ai_vehicles_defend[base] ^ ai_cargo_bay[base]) diff 0 do
                    if GetFuel(i) < 10 then
                         SetFuel(i,10);

          enable;
     end;
Export Function FindNonhumansNearUnit(side,un,dist,only_dangerous);
     var weapon_list, temp_list, i, btype, b, val;
     begin
          temp_list = FilterAllUnits([[f_enemy,side],[f_not,[f_type,unit_human]],[f_dist,un,dist],[f_see,side]]);

          if only_dangerous then
               begin
                    result = DangerousUnits(temp_list);
               end
          else
               result = temp_list
     end;
Export Function DangerousUnits(list);
     var weapon_list, i, btype, b, val;
     begin
          weapon_list = [us_machine_gun,us_light_gun,us_gatling_gun,us_double_gun,us_heavy_gun,us_rocket_launcher,
                                   us_siberium_rocket,us_laser,us_double_laser,
                                   ar_multimissile_ballista,ar_light_gun,ar_double_machine_gun,ar_gatling_gun,
                                   ar_flame_thrower,ar_gun,ar_rocket_launcher,ar_selfpropelled_bomb,
                                   ru_heavy_machine_gun,ru_gatling_gun,ru_gun,ru_rocket_launcher,ru_heavy_gun,
                                   ru_rocket,ru_siberium_rocket,ru_time_lapser];

                    result = [];

                    for i in list do
                         case GetType(i) of
                              unit_human: begin
                                   if not IsOk(i) then  //IsOk does take stimulation drugs into consideration
                                        continue;

                                   result = result ^ i;
                              end;
                              unit_vehicle: begin
                                   if not IsOk(i) then
                                        continue;

                                   case GetControl(i) of
                                        control_manual,control_rider: begin
                                             if UnitsInside(i) = 0 then
                                                  continue;
                                        end;
                                        control_remote: begin
                                             if IsControledBy(i) = 0 then
                                                  continue;
                                        end;
                                        control_computer,control_apeman: begin
                                        end;
                                   end;

                                   if GetWeapon(i) in weapon_list then
                                        result = result ^ i;
                              end;
                              unit_building: begin
                                   if not IsOk(i) then
                                        continue;

                                   btype = GetBType(i);

                                   case btype of
                                        b_turret: begin
                                        end;
                                        b_bunker,b_breastwork,b_armoury,b_barracks,b_fort: begin
                                             if UnitsInside(i) = 0 then
                                                  continue;
                                        end;
                                        else
                                             continue;
                                   end;

                                   if btype in [b_bunker,b_turret] then
                                        if not GetBWeapon(i) in weapon_list then
                                             continue
                                        else
                                             begin
                                                  b = GetBase(i);
                                                  val = false;

                                                  if b = 0 then
                                                       val = true
                                                  else
                                                       if GetEnergy(b)[4] = 0 then
                                                            val = true;

                                                  if val then
                                                       continue;
                                             end;

                                   result = result ^ i;
                              end;
                         end;
     end;

//Automatic cargo bay
Every 0$1+0$0.5 do
     var base, area_list, area, c, temp_list, crates_list, b, temp_value;
     var refueling;
     begin
          refueling = [false,false,false];

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if ai_cargo_bay[base] = 0 then
                         continue;

                    //If cargo bay is damaged and inside the base then do nothing (mechanics will repair it).
                    //If cargo bay is outside the base and somewhat damaged then pull back to base.
                    temp_value = GetLives(ai_cargo_bay[base]);

                    case base of
                         1: area = rubase1;
                         2: area = rubase2;
                         3: area = rubase3;
                    end;

                    if IsInArea(ai_cargo_bay[base],area) then
                         begin
                              if temp_value < 1000 then
                                   continue;
                         end
                    else
                         if temp_value < 600 then
                              begin
                                   if IsLive(ai_depot[base]) then
                                        ComGive(ai_cargo_bay[base],ai_depot[base])
                                   else
                                        ComMoveXY(ai_cargo_bay[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);

                                   continue;
                              end;

                    //Refuel if necessary
                    c = GetFuel(ai_cargo_bay[base]);
                    if c > 90 then
                         refueling = Replace(refueling,base,false)
                    else
                         if ( c < 25 or refueling[base] ) and IsLive(ai_depot[base]) then
                              begin
                                   ComMoveUnit(ai_cargo_bay[base],ai_depot[base]);
                                   AddComRefuel(ai_cargo_bay[base],ai_depot[base]);
                                   refueling = Replace(refueling,base,true);
                                   continue;
                              end;

                    //Determine which areas to check for crates
                    case base of
                         1: area_list = [rucrate1];
                         2: begin
                              area_list = [rucrate2_safe];
                              if FilterAllUnits([[f_side,you],[f_type,unit_building],[f_inarea,rubase3]]) = 0 then  //if player haven't taken over third Russian base
                                   area_list = area_list ^ rucrate2_relativesafe;
                         end;
                         3: area_list = [];
                    end;

                    //Check for crates in the areas
                    crates_list = [];
                    for b in area_list do
                         begin
                              crates_list = crates_list ^ GetListOfCratesInArea_ForGathering(base,b);
                         end;

                    //If there are any crates then collect them - else stay inside the base.
                    if crates_list > 0 and ai_depot[base] > 0 then
                         begin
                              //find the closest crate
                              temp_list = [];
                              for c in crates_list do
                                   temp_list = temp_list ^ GetDistUnitXY(ai_cargo_bay[base],c[1],c[2]);
                              temp_list = WorstFromListByList(crates_list,temp_list);

                              ComCollect(ai_cargo_bay[base],temp_list[1],temp_list[2]);
                         end
                    else
                         if IsOk(ai_depot[base]) and Carry(ai_cargo_bay[base]) then
                              ComGive(ai_cargo_bay[base],ai_depot[base])
                         else
                              if not IsInArea(ai_cargo_bay[base],area) then
                                   if IsOk(ai_depot[base]) then
                                        ComGive(ai_cargo_bay[base],ai_depot[base])
                                   else
                                        ComMoveXY(ai_cargo_bay[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
               end;

          until false;
     end;


//Scientists
//If a scientist is wounded them pull him/her back. Else heal what people needs healing. Else stay inside the lab (if lab not Ok then help
//construct buildings).
Every 0$1 do
     var side, i, scientists_list, temp_list, temp_unit, base, under_attack;
     begin
          side = russians;

          for base in ai_bases do
               begin
                    scientists_list = ai_scientists[base] diff ai_heal_these_humans[base];


                    //Identify scientists who need healing
                    temp_list = ai_heal_these_humans[base];
                    i = 1;
                    while i <= scientists_list do
                         begin
                              if GetLives(scientists_list[i]) <= 700 then
                                   begin
                                        temp_list = temp_list ^ scientists_list[i];
                                        scientists_list = Delete(scientists_list,i);
                                        i = i - 1;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Update people who need healing. People at full HP or people inside a unit (relevant for soldiers and mechanics)
                    //will not receive healing.
                    temp_list = [];
                    for i in ai_heal_these_humans[base] do
                         if GetLives(i) < 1000 and IsInUnit(i) = 0 then
                              temp_list = temp_list ^ i;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Control people who need healing (except soldiers). Make 'em retreat to the human pullback hex.
                    under_attack = BaseUnderAttack(side,base);
                    for i in ai_heal_these_humans[base] do
                         if not ( under_attack and i in ai_soldiers[base] ) and GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                              ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);


                    if scientists_list = 0 then
                         continue;


                    //Heal people. At least one scientist for each human if possible.
                    if ai_heal_these_humans[base] > 0 then
                         begin
                              scientists_list = GetHumansOutOfUnits(scientists_list);
                              temp_list = ai_heal_these_humans[base];

                              repeat
                                   i = 1;
                                   while i <= temp_list do
                                        begin
                                             if scientists_list = 0 then
                                                  break;

                                             temp_unit = NearestUnitToUnit(scientists_list,temp_list[i]);
                                             ComHeal(temp_unit,temp_list[i]);
                                             scientists_list = scientists_list diff temp_unit;

                                             i = i + 1;
                                        end;

                              until scientists_list = 0;
                         end
                    else
                         //Enter and stay in lab
                         if IsOk(ai_lab[base]) and BuildingStatus(ai_lab[base]) <> bs_build then
                              begin
                                   //Return to and stay inside lab
                                   for i in scientists_list do
                                        begin
                                             temp_unit = IsInUnit(i);
                                             if temp_unit <> ai_lab[base] then
                                                  case GetType(temp_unit) of
                                                       unit_building: ComExitBuilding(i);
                                                       unit_vehicle: ComExitVehicle(i);
                                                       else ComEnterUnit(i,ai_lab[base]);
                                                  end;
                                        end;
                              end
                         else
                              //Help building building
                              if ai_building_under_construction[base] > 0 then
                                   begin
                                        for i in scientists_list do
                                             SetTaskList(i,[['h',0,0,ai_building_under_construction[base],0,0,0]]);  //'h' is "help building building"
                                   end
                              else
                                   //Pull back
                                   for i in scientists_list do
                                        if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                                             ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
               end;

          enable;
     end;