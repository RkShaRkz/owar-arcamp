

//Function DistributeHumansToBuildings - base = 2 won't change soldier class to special class in barracks (sniper,bazooker,mortar).
//Scientist control code - Exception for Alliance main characters (base = 2).
//ai_buildings_locations is modified in module "Events_Alliance".

//Known "bug" - if a factory is having an extension rebuilt and the base comes under attack that factory will not produce vehicles
//while under attack even if it should.


//The computer has unlimited resources
Every 0$1.5 do
     var i, base, val, oil_val, sib_val;
     begin
          if GetTech(Tech_Tech2,3)=state_researched then
             oil_val=0.012190476
          else
              oil_val=0.009047619;

          if GetTech(Tech_Sib1,3)=state_researched then
             sib_val=0.00347619
          else
              sib_val=0.00247619;

          for i = 1 to ai_depot do
               if IsOk(ai_depot[i]) and GetSide(ai_depot[i]) <> you then  //IsOk -> no sib spawn if depot is destroyed. See UnitGoesToRed.
                    begin
                         case i of
                              1: begin
                                      SetResourceType(GetBase(ai_depot[i]),mat_cans,600);
                                      SetResourceType(GetBase(ai_depot[i]),mat_oil,tick*oil_val * 0.2);
                                      SetResourceType(GetBase(ai_depot[i]),mat_siberit,25);

                                      if (tick*oil_val * 0.2) <50 then
                                         SetResourceType(GetBase(ai_depot[i]),mat_oil,50);
                                 end;
                              2: begin
                                      SetResourceType(GetBase(ai_depot[i]),mat_cans,800);
                                      SetResourceType(GetBase(ai_depot[i]),mat_oil,tick*oil_val);
                                      SetResourceType(GetBase(ai_depot[i]),mat_siberit,25);

                                      if (tick*oil_val * 0.2) <50 then
                                         SetResourceType(GetBase(ai_depot[i]),mat_oil,50);
                                 end;
                              3: begin
                                      SetResourceType(GetBase(ai_depot[i]),mat_cans,250);
                                      SetResourceType(GetBase(ai_depot[i]),mat_oil,0);
                                      SetResourceType(GetBase(ai_depot[i]),mat_siberit,80);
                                 end;
                              4: begin
                                      SetResourceType(GetBase(ai_depot[i]),mat_cans,250);
                                      SetResourceType(GetBase(ai_depot[i]),mat_oil,0);
                                      SetResourceType(GetBase(ai_depot[i]),mat_siberit,80);
                                 end;
                              5: begin
                                      SetResourceType(GetBase(ai_depot[i]),mat_cans,250);
                                      SetResourceType(GetBase(ai_depot[i]),mat_oil,0);
                                      SetResourceType(GetBase(ai_depot[i]),mat_siberit,0);
                                 end;
                              6: begin
                                      SetResourceType(GetBase(ai_depot[i]),mat_cans,300);
                                      SetResourceType(GetBase(ai_depot[i]),mat_oil,50);
                                      SetResourceType(GetBase(ai_depot[i]),mat_siberit,0);
                                 end;
                              7: begin
                                      SetResourceType(GetBase(ai_depot[i]),mat_cans,300);
                                      SetResourceType(GetBase(ai_depot[i]),mat_oil,50);
                                      SetResourceType(GetBase(ai_depot[i]),mat_siberit,0);
                                 end;
                              8: begin
                                      SetResourceType(GetBase(ai_depot[i]),mat_cans,50);
                                      SetResourceType(GetBase(ai_depot[i]),mat_oil,0);
                                      SetResourceType(GetBase(ai_depot[i]),mat_siberit,tick*sib_val * 0.3);
                                 end;
                         end;
                    end;

          enable;
     end;

On UnitGoesToRed(un) do
     var base, oil_val, sib_val;
     begin
          base = FindBase(un);
          if base = 0 then
               exit;

          //Russian teleporter exit is reset when teleporter goes to red.
          if un = ai_teleporter[base] then
               ai_teleporter_exit_placed = Replace(ai_teleporter_exit_placed,base,false);

          //If the player destroys a depot no siberite shall spawn. This cannot be set in UnitDestroyed but works fine
          //here in UnitGoesToRed even if the depot goes from yellow to destroyed in one go.
          if GetBType(un) in [b_depot,b_warehouse] then
          begin
               if GetTech(Tech_Tech2,3)=state_researched then
                   oil_val=0.012190476
               else
                   oil_val=0.009047619;
               if GetTech(Tech_Sib1,3)=state_researched then
                   sib_val=0.00347619
               else
                   sib_val=0.00247619;

               //Mission specific amounts
               case un of
                    ai_depot[1]: begin
                                      SetResourceType(GetBase(un),mat_cans,450);
                                      SetResourceType(GetBase(un),mat_oil,tick*oil_val * 0.2);
                                      SetResourceType(GetBase(un),mat_siberit,25);
                                 end;
                    ai_depot[2]: begin
                                      SetResourceType(GetBase(un),mat_cans,550);
                                      SetResourceType(GetBase(un),mat_oil,tick*oil_val);
                                      SetResourceType(GetBase(un),mat_siberit,25);
                                 end;
                    ai_depot[3]: begin
                                      SetResourceType(GetBase(un),mat_cans,150);
                                      SetResourceType(GetBase(un),mat_oil,0);
                                      SetResourceType(GetBase(un),mat_siberit,50);
                                 end;
                    ai_depot[4]: begin
                                      SetResourceType(GetBase(un),mat_cans,150);
                                      SetResourceType(GetBase(un),mat_oil,0);
                                      SetResourceType(GetBase(un),mat_siberit,50);
                                 end;
                    ai_depot[5]: begin
                                      SetResourceType(GetBase(un),mat_cans,150);
                                      SetResourceType(GetBase(un),mat_oil,0);
                                      SetResourceType(GetBase(un),mat_siberit,0);
                                 end;
                    ai_depot[6]: begin
                                      SetResourceType(GetBase(un),mat_cans,200);
                                      SetResourceType(GetBase(un),mat_oil,0);
                                      SetResourceType(GetBase(un),mat_siberit,0);
                                 end;
                    ai_depot[7]: begin
                                      SetResourceType(GetBase(un),mat_cans,200);
                                      SetResourceType(GetBase(un),mat_oil,0);
                                      SetResourceType(GetBase(un),mat_siberit,0);
                                 end;
                    ai_depot[8]: begin
                                      SetResourceType(GetBase(un),mat_cans,50);
                                      SetResourceType(GetBase(un),mat_oil,0);
                                      SetResourceType(GetBase(un),mat_siberit,tick*sib_val * 0.3);
                                 end;
               end;

          end;

     end;


On UnitDestroyed(un) do
     var side, temp_list, base, temp_value, i;
     begin
          if un = Heike then
               begin
                    ExclusiveOn;
                    Wait(0$1);
                    YouLost('HeikeDead');
                    ExclusiveOff;
               end;

          if un=ruteleprt then
             teleport_status=0;


          for base in ai_bases do
               begin
                    temp_list = ai_captured_buildings[base] diff un;
                    ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
               end;

          side = GetSide(un);

          if side = you then
               exit;


          //Update computer variables
          case GetType(un) of
               unit_human:
                    for base in ai_bases do
                         RemoveHumanFromVariables(base,un,false);

               unit_vehicle:
                    for base in ai_bases do
                         RemoveVehicleFromVariables(base,un);

               unit_building:
                    for base in ai_bases do
                         RemoveBuildingFromVariables(base,un);
          end;
     end;

Export Function RemoveBuildingFromVariables(base,building);
     var temp_list;
     begin
          temp_list = ai_all_buildings[base] diff building;
          ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

          temp_list = ai_excepted_buildings[base] diff building;
          ai_excepted_buildings = Replace(ai_excepted_buildings,base,temp_list);

          temp_list = ai_dismantle_these_buildings[base] diff building;
          ai_dismantle_these_buildings = Replace(ai_dismantle_these_buildings,base,temp_list);

          if building = ai_building_under_construction[base] then
               ai_building_under_construction = Replace(ai_building_under_construction,base,0);


          UpdateBuildingBasicVariables(base,building,false);
     end;
Function RemoveVehicleFromVariables(base,vehicle);
     var temp_list;
     begin
          //Global "basis" lists of vehicles. If a vehicle belong to this base it will be in one
          //and only one of these lists.
          if vehicle in ai_vehicles_defend[base] then
               begin
                    temp_list = ai_vehicles_defend[base] diff vehicle;
                    ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
               end;

{          if vehicle in ai_vehicles_attack[base] then
               begin
                    temp_list = ai_vehicles_attack[base] diff vehicle;
                    ai_vehicles_attack = Replace(ai_vehicles_attack,base,temp_list);
               end;         }

          if vehicle in ai_taufield_vehicles[base] then
               begin
                    temp_list = ai_taufield_vehicles[base] diff vehicle;
                    ai_taufield_vehicles = Replace(ai_taufield_vehicles,base,temp_list);
               end;

          if vehicle = ai_cargo_bay[base] then
               begin
                    ai_cargo_bay = Replace(ai_cargo_bay,base,0);
                    ai_cargo_bay_destroy_tick = Replace(ai_cargo_bay_destroy_tick,base,tick);
               end;

          if vehicle = ai_crane[base] then
               begin
                    ai_crane = Replace(ai_crane,base,0);
                    ai_crane_destroy_tick = Replace(ai_crane_destroy_tick,base,tick);
                    ai_crane_driver = Replace(ai_crane_driver,base,0);
                    ai_crane_is_being_repaired = Replace(ai_crane_is_being_repaired,base,false);

                    if vehicle = ai_building_constructor[base] then
                         ai_building_constructor = Replace(ai_building_constructor,base,0);
               end;


          //Global "transient" lists of vehicles. Vehicles belonging to this base may be in one or more of these lists if
          //it performs a special or temporary job (you could say that the vehicle is in a special state).
          if vehicle in ai_retreating_vehicles_defend[base] then
               begin
                    temp_list = ai_retreating_vehicles_defend[base] diff vehicle;
                    ai_retreating_vehicles_defend = Replace(ai_retreating_vehicles_defend,base,temp_list);
               end;

          if vehicle in ai_vehicles_being_repaired[base] then
               begin
                    temp_list = ai_vehicles_being_repaired[base] diff vehicle;
                    ai_vehicles_being_repaired = Replace(ai_vehicles_being_repaired,base,temp_list);
               end;

          if vehicle in ai_refuel_vehicles_list[base] then
               begin
                    temp_list = ai_refuel_vehicles_list[base] diff vehicle;
                    ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);
               end;

          if vehicle = ai_vehicle_being_moved[base] then
               ai_vehicle_being_moved = Replace(ai_vehicle_being_moved,base,0);

          if vehicle in ai_vehicles_having_been_moved[base] then
               begin
                    temp_list = ai_vehicles_having_been_moved[base] diff vehicle;
                    ai_vehicles_having_been_moved = Replace(ai_vehicles_having_been_moved,base,temp_list);
               end;

     end;
Export Function RemoveHumanFromVariables(base,human,check_if_base_is_dead);
     var temp_list, i;
     begin
          result = false;

          //Global "basis" lists of humans. If a human belong to this base he/she will be in one
          //and only one of these lists.
          if human in ai_soldiers[base] then
               begin
                    temp_list = ai_soldiers[base] diff human;
                    ai_soldiers = Replace(ai_soldiers,base,temp_list);
                    result = true;
               end;

          if human in ai_engineers[base] then
               begin
                    temp_list = ai_engineers[base] diff human;
                    ai_engineers = Replace(ai_engineers,base,temp_list);
                    result = true;
               end;

          if human in ai_apemen_engineers[base] then
               begin
                    temp_list = ai_apemen_engineers[base] diff human;
                    ai_apemen_engineers = Replace(ai_apemen_engineers,base,temp_list);
                    result = true;
               end;

          if human in ai_mechanics_defend[base] then
               begin
                    temp_list = ai_mechanics_defend[base] diff human;
                    ai_mechanics_defend = Replace(ai_mechanics_defend,base,temp_list);
                    result = true;
               end;

          if human in ai_scientists[base] then
               begin
                    temp_list = ai_scientists[base] diff human;
                    ai_scientists = Replace(ai_scientists,base,temp_list);
                    result = true;
               end;


          //Global "transient" lists of humans. Humans belonging to this base may be in one or more of these lists if
          //he/she performs a special or temporary job (you could say that the human is in a special state).
          if human in ai_heal_these_humans[base] then
               begin
                    temp_list = ai_heal_these_humans[base] diff human;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
               end;

          if human = ai_building_constructor[base] then
               ai_building_constructor = Replace(ai_building_constructor,base,0);

          if human = ai_crane_driver[base] then
               ai_crane_driver = Replace(ai_crane_driver,base,0);

          //If there are no human units left the base is "dead"
          if check_if_base_is_dead then
               if ((ai_soldiers[base] ^ ai_engineers[base] ^ ai_apemen_engineers[base] ^ ai_mechanics_defend[base] ^ ai_scientists[base] ^
                   ai_attacking_scientists[base]) diff 0) = 0 then
                    begin
                         ai_bases = ai_bases diff base;


                    end;
     end;


Export Function GetBaseArea(base);
     begin
          case base of
               1: result = area_base1;
               2: result = area_base2;
               3: result = area_base3;
               4: result = area_base4;
               5: result = area_base5;
               6: result = area_base6;
               7: result = area_base7;
               8: result = area_base8;
               9: result = area_base9;
               10: result = area_base10;
          end;
     end;
Export Function GetBaseSide(base);
     begin
          case base of
               1: result = russians;
               2: result = russians;
               3: result = russians;
               4: result = russians;
               5: result = russians;
               6: result = russians;
               7: result = russians;
               8: result = russians;
               9: result = russians;
               10: result = russians;
          end;
     end;
Export Function GetBaseNation(base);
     begin
          case base of
               1: result = nation_russian;
               2: result = nation_russian;  
               3: result = nation_russian;
               4: result = nation_russian;
               5: result = nation_russian;
               6: result = nation_russian;
               7: result = nation_russian;
               8: result = nation_russian;
               9: result = nation_russian;
               10: result = nation_russian;
          end;
     end;
Export Function FindBase(un);
     var base;
     begin
          result = 0;

          for base in ai_bases do
               if IsInArea(un,GetBaseArea(base)) then
                    begin
                         result = base;
                         exit;
                    end;
     end;


{//Every which tries to spawn new units for AI.
Every 0$2+0$0.1 do
     var base, i, temp_unit, temp_list, away, buildings_list, b, cl;
     begin

          repeat
          wait(0$2);

          for base in ai_bases do
               begin
                    if base in [1,3,4] then
                         continue;  //Only spawning for Alliance

                    if am_going_to_destroy_alli then
                         begin
                              for i in ai_spawn_people[base] do
                                   DestroyUnit(i);

                              ai_spawn_people = Replace(ai_spawn_people,base,[]);
                              exit;
                         end;

                    if BaseUnderAttack(base,-1) then
                         continue;

                    i = 1;
                    while i <= ai_spawn_people[base] do
                         begin
                              temp_unit = 0;
                              cl = GetClass(ai_spawn_people[base][i]);

                              case cl of
                                   class_soldier, class_apeman_soldier, class_sniper, class_mortar, class_bazooker: buildings_list = ai_armouries[base];
                                   class_engineer,class_apeman_engineer: buildings_list = [ai_depot[base]];
                                   class_mechanic: buildings_list = ai_facts[base];
                                   class_scientistic: buildings_list = ai_labs[base];
                              end;

                              away = false;
                              for b in buildings_list do
                                   begin
                                        //Spawn engineers at human pullback hex if there are no depot.
                                        if ( IsOk(b) and UnitsInside(b) < 6 ) or cl = class_engineer then
                                             begin
                                                  if IsOk(b) and UnitsInside(b) < 6 then
                                                       PlaceHumanInUnit(ai_spawn_people[base][i],b)
                                                  else
                                                       PlaceUnitXYR(ai_spawn_people[base][i],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2],7,false);

                                                  case cl of
                                                       class_soldier, class_apeman_soldier, class_sniper, class_mortar, class_bazooker: begin
                                                            temp_list = ai_soldiers[base] ^ ai_spawn_people[base][i];
                                                            ai_soldiers = Replace(ai_soldiers,base,temp_list);
                                                       end;
                                                       class_engineer: begin
                                                            temp_list = ai_engineers[base] ^ ai_spawn_people[base][i];
                                                            ai_engineers = Replace(ai_engineers,base,temp_list);
                                                       end;
                                                       class_apeman_engineer: begin
                                                            temp_list = ai_apemen_engineers[base] ^ ai_spawn_people[base][i];
                                                            ai_apemen_engineers = Replace(ai_apemen_engineers,base,temp_list);
                                                       end;
                                                       class_mechanic: begin
                                                            temp_list = ai_mechanics_defend[base] ^ ai_spawn_people[base][i];
                                                            ai_mechanics_defend = Replace(ai_mechanics_defend,base,temp_list);
                                                       end;
                                                       class_scientistic: begin
                                                            temp_list = ai_scientists[base] ^ ai_spawn_people[base][i];
                                                            ai_scientists = Replace(ai_scientists,base,temp_list);
                                                       end;
                                                  end;

                                                  away = true;
                                                  break;
                                             end;
                                   end;

                              if away then
                                   begin
                                        temp_list = Delete(ai_spawn_people[base],i);
                                        ai_spawn_people = Replace(ai_spawn_people,base,temp_list);

                                        continue;
                                   end;

                              i = i + 1;
                         end;
               end;

          until false;
     end;
            }

//Soldiers
//Keep them in bunkers/armouries. If that's not possible due to structure restrictions then help construct buildings. Else retreat to
//the center of the base.
Every 0$1+0$0.1 do
     var side, i, temp_list, buildings_list, soldiers_list, temp_unit, base, val, special_units, bunkers, under_attack, j;
     var temp_list_2, special_defenders;
     begin

          repeat
          if ai_bases = 0 then
               exit;

          wait(0$1 mod (ai_bases+0));

          for base in ai_bases do
               begin
                    wait(0$1 div (ai_bases+0));

                    side = GetBaseSide(base);

                    soldiers_list = ai_soldiers[base] diff ai_excepted_soldiers[base];
                    under_attack := BaseUnderAttack(base,-1);

                    special_defenders = [];
              {      if base in [1,3,4] and under_attack then
                         begin
                              special_defenders = UnitFilter(soldiers_list,[f_not,[f_inside]]);

                              for i in ai_armouries[base] do
                                   begin
                                        temp_list = UnitFilter(UnitsInside(i),[f_or,[f_class,class_sniper],[f_class,class_mortar],[f_class,class_bazooker]]);
                                        for j = 1 to temp_list - [5,4,3][difficulty] do  //leave some units inside
                                             special_defenders = special_defenders ^ temp_list[j];
                                   end;
                         end
                    else
                         special_defenders = [];    }

                    //Identify soldiers who need healing.
                    temp_list = ai_heal_these_humans[base];
                    for i in soldiers_list diff ai_heal_these_humans[base] do
                         if GetLives(i) <= 500 or ( GetLives(i) < 800 and not i in special_defenders ) then
                              temp_list = temp_list ^ i;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Make soldiers needing healing go outside (else they won't be healed, cf. the healing
                    //code (controlling scientists) below.
                    if not under_attack then
                         begin
                              for i in ai_heal_these_humans[base] do
                                   if i in soldiers_list then
                                        case GetType(IsInUnit(i)) of
                                             unit_vehicle: ComExitVehicle(i);
                                             unit_building: ComExitBuilding(i);
                                        end;

                              soldiers_list = soldiers_list diff ai_heal_these_humans[base];
                              special_defenders = special_defenders diff ai_heal_these_humans[base];
                         end;


                    if soldiers_list = 0 then
                         continue;


   {                 //Special defenders charge towards attackers.
                    if special_defenders > 0 then
                         begin
                              case base of
                                   1: begin
                                        temp_list_2 = FilterAllUnits([[f_enemy,side],[f_type,unit_human],[f_inarea,ru_bazooker_defend_area]]);
                                   end;
                                   2: begin
                                        temp_list_2 = [];
                                   end;
                                   3: begin
                                        temp_list_2 = FilterAllUnits([[f_enemy,side],[f_type,unit_human],[f_inarea,ar_mortar_defend_area]]);
                                   end;
                                   4: begin
                                        temp_list_2 = FilterAllUnits([[f_enemy,side],[f_type,unit_human],[f_inarea,am_sniper_defend_area]]);
                                   end;
                              end;

                              if temp_list_2 > 0 then
                                   begin
                                        soldiers_list = soldiers_list diff special_defenders;

                                        //Charge!
                                        ComAgressiveMove(GetHumansOutOfUnits(special_defenders),GetX(temp_list_2[1]),GetY(temp_list_2[1]));
                                   end;
                         end;
  }

                    //Find the bunkers which need to be occupied.
                    //Remember which soldiers are already inside a building.
                    //Don't occupy b_bunker if there is no power.
                    i = false;
                    if IsOk(ai_depot[base]) then
                         if GetEnergy(GetBase(ai_depot[base]))[4] > 0 then
                              i = true;

                    if i then
                         bunkers = ai_bunkers[base]
                    else
                         begin
                              bunkers = [];
                              for i in ai_bunkers[base] do
                                   if GetBType(i) = b_breastwork then
                                        bunkers = bunkers ^ i;
                         end;

                    buildings_list = [];
                    for i in UnitFilter(bunkers,[f_ok]) do
                         begin
                              temp_unit = UnitsInside(i);
                              if temp_unit = 0 then
                                   buildings_list = buildings_list ^ i
                              else soldiers_list = soldiers_list diff temp_unit;
                         end;


                    //The best soldiers should go to the bunkers. The rest in the armouries.
                    //If the base is under attack then just the nearest soldier.
                    if buildings_list > 0 then
                         begin
                              if not under_attack then
                                   begin
                                        temp_list = [];
                                        for i in soldiers_list do
                                             temp_list = temp_list ^ GetSkill(i,skill_combat);
                                        soldiers_list = SortListByListDesc(soldiers_list,temp_list);
                                   end;

                              //Bazookers/snipers/mortar in armouries or breastworks if possible.
                              special_units = UnitFilter(soldiers_list,[f_or,[f_class,class_bazooker],[f_class,class_sniper],[f_class,class_mortar]]);
                              soldiers_list = soldiers_list diff special_units;

                              for i = 1 to buildings_list do
                                   begin
                                        if soldiers_list = 0 then
                                             begin
                                                  if special_units = 0 then
                                                       break;

                                                  soldiers_list = special_units;
                                                  special_units = [];
                                             end;

                                        if not under_attack then
                                             begin
                                                  if GetBType(buildings_list[i]) = b_breastwork and special_units > 0 then
                                                       temp_unit = special_units[1]
                                                  else
                                                       temp_unit = soldiers_list[1];
                                             end
                                        else
                                             begin
                                                  if GetBType(buildings_list[i]) = b_breastwork and special_units > 0 then
                                                       temp_list_2 = special_units
                                                  else
                                                       temp_list_2 = soldiers_list;

                                                  temp_list = [];
                                                  for j in temp_list_2 do
                                                       temp_list = temp_list ^ GetDistUnits(j,buildings_list[i]);

                                                  temp_unit = WorstFromListByList(temp_list_2,temp_list);
                                             end;

                                        if IsOk(buildings_list[i]) then
                                             ComEnterUnit(temp_unit,buildings_list[i])
                                        else
                                             if GetDistUnits(temp_unit,buildings_list[i]) > 4 then
                                                  ComAgressiveMove(temp_unit,GetX(buildings_list[i]),GetY(buildings_list[i]));

                                        soldiers_list = soldiers_list diff temp_unit;
                                        special_units = special_units diff temp_unit;
                                   end;
                         end
                    else
                         special_units = [];


                    //The rest enter armouries (if possible)
                    DistributeHumansToBuildings(base,soldiers_list ^ special_units, UnitFilter(ai_armouries[base],[[f_ok],[f_not,[f_constructed]]]),
                         false,6,true,true);

               end;

          until false;
     end;


//Make defending bazookers shoot time shifting rockets at their targets.
Every 0$1+0$0.1 do
     var side, base, i, temp_list, un1, temp_list_2, temp_value, val, lapsers;
     begin


          repeat
          wait(0$1);

          for base in ai_bases do
               begin

                    side = GetBaseSide(base);

                    //Find time lapsers
                    lapsers = [];
                    val = false;
                    if IsOk(ai_depot[base]) then
                         if GetEnergy(GetBase(ai_depot[base]))[4] > 0 then
                              val = true;

                    if val then
                         for i in ai_bunkers[base] ^ ai_turrets[base] do
                              if GetBWeapon(i) = ru_time_lapser and IsOk(i) and ( UnitsInside(i) > 0 or GetBType(i) = b_turret ) then
                                   lapsers = lapsers ^ i;

                    //Control bazookers
                    for i in ai_soldiers[base] diff ai_heal_these_humans[base] do
                              if GetClass(i) = class_bazooker then
                                   begin
                                        //Don't bother the bazooker if he/she is about to fire a time shifting or space shifting rocket.
                                        temp_list = GetTaskList(i);
                                        if temp_list > 0 then
                                             if temp_list[1][1] = '&' or temp_list[1][1] = '%' then
                                                  continue;

                                        un1 = Attacks(i);
                                        if un1 > 0 and DangerousUnits([un1]) > 0 then
                                             begin
                                                  temp_list_2 = [GetX(un1),GetY(un1)];
                                                  temp_value = false;

                                                  for val in ai_time_shift_hexes[base] ^ ai_time_shift_hexes_underway[base] do  //don't send a rocket where someone already have or (probably) soon will
                                                       if GetDistXY(temp_list_2[1],temp_list_2[2],val[1],val[2]) <= ai_time_shift_data[side][2] then
                                                            begin
                                                                 temp_value = true;
                                                                 break;
                                                            end;

                                                  //Don't shoot rockets in areas permanently time shiftet by time lapsers.
                                                  //Time lapsers affect an area with about 11 hexes radius at max level of space time technology
                                                  //and it is not affected by height. The radius is affected by stacking lapsers close to each other, though,
                                                  //but the effect is not very predictable so we will not take that into consideration here.
                                                  if not temp_value then
                                                       for val in lapsers do
                                                            if GetDistXY(temp_list_2[1],temp_list_2[2],GetX(val),GetY(val)) <= 11 then
                                                                 begin
                                                                      temp_value = true;
                                                                      break;
                                                                 end;

                                                  if not temp_value then  //not inside a time shifted area
                                                       begin
                                                            ComTimeShift(i,temp_list_2[1],temp_list_2[2]);

                                                            //The bazooker could die before he/she fires the rocket
                                                            //so we store the hex temporarily and check if the rocket actually is fired later.
                                                            temp_list = Insert(ai_time_shift_hexes_underway[base],1,[temp_list_2[1],temp_list_2[2],i,tick]);
                                                            ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);
                                                       end;
                                             end;
                                   end;
               end;

          until false;
     end;

//Make defending bazookers shoot space shifting rockets at their targets.
//Doing this intelligently is extremely difficult so we just shoot one rocket from time
//to time behind a target hoping we push the target closer to our base instead of
//pushing it away.
//Only bazookers inside barrackses.
Every 0$1+0$0.2 do
     var base, i, temp_list, un1, temp_list_2, temp_value;
     var shooting_delay;
     begin
          shooting_delay = [0$0,0$0,0$0,0$0,0$0,0$0,0$0,0$0,0$0,0$0];

          repeat
          wait(0$1);

          if difficulty = 1 then
               exit;

          for base in ai_bases do
               begin

                    if shooting_delay[base] > 0$0 then
                         begin
                              shooting_delay = Replace(shooting_delay,base, shooting_delay[base] - 0$1 );
                              continue;
                         end;

                    if Rand(1,10) > 1 then
                         continue;

                    temp_list = [];
                    for i in ai_soldiers[base] diff ai_heal_these_humans[base] do
                         if IsInUnit(i) in ai_armouries[base] then
                              temp_list = temp_list ^ i;

                    for i in temp_list do
                              if GetClass(i) = class_bazooker then
                                   begin
                                        //Don't bother the bazooker if he/she is about to fire a time shifting or space shifting rocket.
                                        temp_list = GetTaskList(i);
                                        if temp_list > 0 then
                                             if temp_list[1][1] = '&' or temp_list[1][1] = '%' then
                                                  continue;

                                        un1 = Attacks(i);
                                        if un1 > 0 and not IsInArea(un1,GetBaseArea(base)) then
                                             begin
                                                  //Shoot just behind the target. We are higher elevated so this should be possible
                                                  temp_list_2 = [GetX(un1),GetY(un1)];
                                                  temp_value = AI_GetTurnDirection(GetX(i),GetY(i),temp_list_2[1],temp_list_2[2]);
                                                  ComSpaceShift(i, ShiftX(temp_list_2[1],temp_value,1), ShiftY(temp_list_2[2],temp_value,1) );

                                                  shooting_delay = Replace(shooting_delay,base,0$10);

                                                  break;
                                             end;
                                   end;
               end;

          until false;
     end;

//Determine which bazookers have successfully fired their time shifting rocket.
//We need an extremely short update time on this update to prevent the situation where
//a bazooker has shot a time shifting rocket but is brought to red life before the
//update runs (in which case we do not detect the time shifting rocket as fired).
Every 0$1 do
     var base, side, val, temp_value, temp_list;
     begin

          repeat
          wait(1);

          for base in ai_bases do
               begin

                    side = GetBaseSide(base);

                    val = 1;
                    while val <= ai_time_shift_hexes_underway[base] do
                         begin
                              if tick = ai_time_shift_hexes_underway[base][val][4] then  //If the order was given at exactly this tick then the unit's task list is not yet updated
                                   begin
                                        val = val + 1;
                                        continue;
                                   end;

                              temp_value = false;
                              temp_list = GetTaskList(ai_time_shift_hexes_underway[base][val][3]);

                              if IsOk(ai_time_shift_hexes_underway[base][val][3]) then  //Task list is reset upon going to red life
                                   begin
                                        if temp_list = 0 then
                                             temp_value = true
                                        else
                                             if not temp_list[1][1] = '&' then
                                                  temp_value = true;
                                   end
                              else
                                   begin
                                        temp_list = Delete(ai_time_shift_hexes_underway[base],val);
                                        ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);

                                        continue;
                                   end;

                              if temp_value then
                                   begin
                                        temp_list = Insert(ai_time_shift_hexes[base],1,[ai_time_shift_hexes_underway[base][val][1],ai_time_shift_hexes_underway[base][val][2],ai_time_shift_data[side][1]]);
                                        ai_time_shift_hexes = Replace(ai_time_shift_hexes,base,temp_list);

                                        temp_list = Delete(ai_time_shift_hexes_underway[base],val);
                                        ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);

                                        continue;
                                   end;

                              val = val + 1;
                         end;
               end;

          until false;
     end;

//Update time shifted areas (determine when they have faded away).
Every 0$1+0$0.3 do
     var base, val, temp_list, time;
     begin

          repeat
          wait(0$1);

          for base in ai_bases do
               begin

                    val = 1;
                    while val <= ai_time_shift_hexes[base] do
                         begin
                              time = ai_time_shift_hexes[base][val][3]-0$1;

                              if time <= 0$0 then
                                   begin
                                        temp_list = Delete(ai_time_shift_hexes[base],val);
                                        ai_time_shift_hexes = Replace(ai_time_shift_hexes,base,temp_list);

                                        continue;
                                   end
                              else
                                   begin
                                        temp_list = Replace(ai_time_shift_hexes[base][val],3,time);
                                        temp_list = Replace(ai_time_shift_hexes[base],val,temp_list);
                                        ai_time_shift_hexes = Replace(ai_time_shift_hexes,base,temp_list);
                                   end;

                              val = val + 1;
                         end;
               end;

          until false;
     end;


//Function which sends humans to buildings, distributing them equally and changing their class (if specified).
//The humans there wasn't space for will stay near the pullback hex.
//base - the base calling the function.
//human_list - list of humans
//building_list - list of buildings
//change_to_this_class - class to change to when the human has entered the building (false if none)
//building_capacity - the number of humans the building can handle
//help_building - boolean. If true then units which could not enter a building will help building the building under
//construction (if any).
//aggressive_pullback - boolean. True if movement to pullback hex should be aggressive (else just normal move)
Function DistributeHumansToBuildings(base,human_list,building_list,change_to_this_class,building_capacity,help_building,aggressive_pullback);
     var i, j, temp_list, val, temp_unit, area, special_un_count, counter, k, under_attack;
     begin
          if human_list = 0 then
               exit;

          area = GetBaseArea(base);
          under_attack = BaseUnderAttack(base,-1);

          //If this is soldiers going to armouries then special units
          //should be distributed equally among the armouries.
          if not GetClass(human_list[1]) in [class_engineer,class_apeman_engineer,class_mechanic,class_scientistic] and building_list > 0 then
               begin
                    val = 0;
                    for i in human_list do
                         if GetClass(i) in [class_sniper,class_mortar,class_bazooker] then
                              val = val + 1;

                    special_un_count = val div (building_list+0);
               end
          else                        
               special_un_count = 0;

          val = building_list+0;
          while val > 0 and human_list > 0 do
               begin
                    //Rearrange "human_list" so humans already inside this building goes
                    //first in the list. Else this algorithm could pick 6 people for a barracks
                    //let's say 2 outside and 4 actually in the barracks but there is a 5. unit
                    //inside the barracks already which is further down "human_list"- the result is
                    //one human can't get in because there isn't space.
                    temp_list = [];
                    for i in human_list do
                         if IsInUnit(i) = building_list[val] then
                              temp_list = temp_list ^ i;
                    human_list = temp_list ^ (human_list diff temp_list);

                    //Distribute humans equally to the buildings
                    counter = 0;
                    temp_list = [];
                    for i = 1 to human_list div val do
                         begin
                              if i > building_capacity then
                                   break;

                              if special_un_count = 0 then
                                   begin
                                        temp_list = temp_list ^ human_list[1];
                                        human_list = Delete(human_list,1);
                                   end
                              else
                                   if counter = special_un_count or (counter = [1,2,3][difficulty] and GetBtype(building_list[val])=b_armoury) then    //decrease the amounts of bazookers in armoury to [1,2,3][difficulty]
                                        begin
                                             //Search for a non-special unit in the list.
                                             temp_unit = 0;
                                             for k = 1 to human_list do
                                                  if not GetClass(human_list[k]) in [class_sniper,class_mortar,class_bazooker] then
                                                       begin
                                                            temp_unit = k;
                                                            break;
                                                       end;

                                             if temp_unit = 0 then
                                                  temp_unit = 1;

                                             temp_list = temp_list ^ human_list[temp_unit];
                                             human_list = Delete(human_list,temp_unit);
                                        end
                                   else
                                        begin
                                             counter = counter + 1;

                                             //Search for a special unit in the list.
                                             temp_unit = 0;
                                             for k = 1 to human_list do
                                                  if GetClass(human_list[k]) in [class_sniper,class_mortar,class_bazooker] then
                                                       begin
                                                            temp_unit = k;
                                                            break;
                                                       end;

                                             if temp_unit = 0 then
                                                  temp_unit = 1;

                                             temp_list = temp_list ^ human_list[temp_unit];
                                             human_list = Delete(human_list,temp_unit);
                                        end;
                         end;

                    for i in temp_list do
                         begin
                              temp_unit = IsInUnit(i);
                              if temp_unit <> building_list[val] then
                                   case GetType(IsInUnit(i)) of
                                        unit_vehicle: ComExitVehicle(i);
                                        unit_building: ComExitBuilding(i);
                                        else
                                             begin
                                                  if IsInArea(i,area) or not aggressive_pullback then
                                                       ComEnterUnit(i,building_list[val])
                                                  else
                                                       ComAgressiveMove(i,GetX(building_list[val]),GetY(building_list[val]));

                                                  if change_to_this_class > 0 then
                                                       begin
                                                            if GetClass(i) <> change_to_this_class and GetNation(i) <> nation_nature then  //ignore apemen
                                                                 if not ( change_to_this_class in [class_sniper,class_mortar,class_bazooker] and not GetBType(building_list[val]) in [b_barracks,b_fort] ) then  //Will change class to sniper/mortar/bazooker even if the building is only an armoury
                                                                      AddComChangeProfession(i,change_to_this_class);
                                                       end
                                                  else
                                                       begin
                                                            //If the building is a barracks then always change to the special combat class the barracks allows.
                                                            if GetBType(building_list[val]) in [b_barracks{,b_fort}] then
                                                                 case GetNation(building_list[val]) of
                                                                      nation_american: AddComChangeProfession(i,class_sniper);
                                                                      nation_arabian: AddComChangeProfession(i,class_mortar);
                                                                      nation_russian: AddComChangeProfession(i,class_bazooker);
                                                                 end;
                                                       end;
                                             end;
                                   end;
                         end;

                    val = val - 1;
               end;

          if human_list > 0 then
               if ai_building_under_construction[base] > 0 and help_building and not under_attack then
                    begin
                         for i in GetHumansOutOfUnits(human_list) do
                              SetTaskList(i,[['h',0,0,ai_building_under_construction[base],0,0,0]]);  //'h' is "help building building"
                    end
               else
                    for i in GetHumansOutOfUnits(human_list) do
                         if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                              if aggressive_pullback then
                                   ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2])
                              else
                                   ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
     end;


//Engineers and Apemen Engineers
//These are the priorities (descending order):
//- If an engineer is hurt, them pull him/her back for healing.
//- Reparation of red buildings
//- Reparation of any building
//- Reconstruct destroyed buildings if necessary, but only if the base is not under attack (only engineers)
//- Gather crates in the vicinity of the base, but for engineers only if the base is not under attack.
//- Return to and stay inside the depot (if possible).
Every 0$1+0$0.3 do
     var side, i, engineers_list, temp_list, buildings_list, temp_unit, away_dist, temp_list_2, base, apemen_engineers_list;
     var humans_list, crane_usable, b_value, engineers_not_allowed_to_repair_area, crane_not_allowed_to_repair_area, workers_list;
     var k, repairing_buildings, under_attack, is_dismantling;
     var crane_is_refueling, try_rebuild_again_time;
     begin
          crane_is_refueling = [false,false,false,false];

          try_rebuild_again_time = [];
          for base in ai_bases do
               try_rebuild_again_time = Replace(try_rebuild_again_time,base,0$0);

          repeat
          if ai_bases = 0 then
               exit;

          wait(0$1 mod (ai_bases+0));

          for base in ai_bases do
               begin
                    wait(0$1 div (ai_bases+0));
                    side = GetBaseSide(base);
                    under_attack := BaseUnderAttack(base,-1);

                    //Reset "move empty manual vehicles so we can build our building"-variables if we are under attack so we can use our vehicles freely.
                    if under_attack then
                         begin
                              ai_vehicle_being_moved = Replace(ai_vehicle_being_moved,base,0);
                              ai_vehicles_having_been_moved = Replace(ai_vehicles_having_been_moved,base,[]);
                         end;

                    //Check if we can rebuild some of the buildings we couldn't before.
                    if ai_cannot_rebuild_these_buildings[base] > 0 and ( ai_engineers[base] > 0 or try_rebuild_again_time[base] >= 0$20 ) then
                         begin
                              ai_cannot_rebuild_these_buildings = Replace(ai_cannot_rebuild_these_buildings,base,[]);
                              try_rebuild_again_time = Replace(try_rebuild_again_time,base,0$0);
                         end
                    else
                         try_rebuild_again_time = Replace(try_rebuild_again_time,base, try_rebuild_again_time[base] + 0$1 );


                    engineers_list = ai_engineers[base] diff ai_heal_these_humans[base];
                    apemen_engineers_list = ai_apemen_engineers[base] diff ai_heal_these_humans[base];


                    //Identify engineers who need healing
                    temp_list = ai_heal_these_humans[base];
                    humans_list = engineers_list ^ apemen_engineers_list;
                    i = 1;
                    while i <= humans_list do
                         begin
                              if GetLives(humans_list[i]) <= 700 then
                                   begin
                                        temp_list = temp_list ^ humans_list[i];
                                        engineers_list = engineers_list diff humans_list[i];
                                        apemen_engineers_list = apemen_engineers_list diff humans_list[i];
                                        humans_list = Delete(humans_list,i);

                                        continue;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Crane
                    crane_usable = false;
                    if ai_crane[base] > 0 then
                         begin
                              if GetControl(ai_crane[base]) = control_manual and not ai_crane[base] = ai_vehicle_being_moved[base] then
                                   begin
                                        temp_list = UnitsInside(ai_crane[base]);
                                        if temp_list > 0 then
                                             if temp_list[1] <> ai_crane_driver[base] then
                                                  ComExitVehicle(temp_list[1]);
                                   end;

                              if GetLives(ai_crane[base]) <= 500 or ( ai_crane_driver[base] > 0 and GetLives(ai_crane_driver[base]) <= 500 ) or ( ai_crane_is_being_repaired[base] and ( GetLives(ai_crane[base]) < 1000 or ( ai_crane_driver[base] > 0 and GetLives(ai_crane_driver[base]) < 1000 ) ) ) then
                                   begin
                                        ai_crane_is_being_repaired = Replace(ai_crane_is_being_repaired,base,true);

                                        //Code for defending mechanics below will take care of repairing the crane
                                        if GetDistUnitXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 6 then
                                             ComMoveXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                                   end
                              else
                                   begin
                                        ai_crane_is_being_repaired = Replace(ai_crane_is_being_repaired,base,false);

                                        //Refuel if necessary
                                        if GetEngine(ai_crane[base]) = engine_combustion then
                                             begin
                                                  i = GetFuel(ai_crane[base]);
                                                  if i > 90 or not IsOk(ai_depot[base]) then
                                                       crane_is_refueling = Replace(crane_is_refueling,base,false)
                                                  else
                                                       if i < 25 or crane_is_refueling[base] then
                                                            begin
                                                                 ComMoveUnit(ai_crane[base],ai_depot[base]);
                                                                 AddComRefuel(ai_crane[base],ai_depot[base]);
                                                                 crane_is_refueling = Replace(crane_is_refueling,base,true);
                                                            end;
                                             end;

                                        if not crane_is_refueling[base] then
                                             crane_usable = true;
                                   end;
                         end;

                    if engineers_list = 0 and apemen_engineers_list = 0 and not crane_usable then
                         continue;

                    //Recapture buildings if necessary. Depots first. Here we assume the player hasn't changed the base
                    //of the captured building.
                    //Apemen engineers and cranes can't capture buildings.
                    temp_list_2 = UnitFilter(engineers_list,[f_class,class_engineer]);
                    if ai_captured_buildings[base] > 0 and temp_list_2 > 0 then
                         begin
                              temp_list = [];
                              for i in ai_captured_buildings[base] do
                                   if GetBType(i) in [b_depot,b_warehouse] then
                                        temp_list = temp_list ^ 1
                                   else
                                        temp_list = temp_list ^ 0;

                              temp_list = SortListByListDesc(ai_captured_buildings[base],temp_list);

                              //Normal "ComEnterUnit" for capturing doesn't work for buildings which can't be entered (e.g. power plants).
                              temp_list_2 = GetHumansOutOfUnits(temp_list_2);
                              if temp_list_2 > 0 then
                                   begin
                                        temp_list_2 = SortListByListDesc(temp_list_2, temp_list_2);  //To ensure we take the same unit each time
                                        SetTaskList(temp_list_2[1],[['e',GetX(temp_list[1]),GetY(temp_list[1]),temp_list[1],0,0,0]]);
                                        engineers_list = engineers_list diff temp_list_2[1];
                                   end;

                              if engineers_list = 0 and apemen_engineers_list = 0 and not crane_usable then
                                   continue;
                         end;

                    //Find buildings which need to be repaired. At least one engineer for each if possible.
                    //If the base is under attack human (not including apemen) engineers may not be allowed
                    //to repair certain buildings.
                    //The crane may not be allowed to repair certain buildings at all (e.g. because it can't reach
                    //them).
                    case base of
                         1: begin
                              engineers_not_allowed_to_repair_area = no_engineer_repair_area;
                              crane_not_allowed_to_repair_area = no_crane_repair_area;
                         end;
                         2: begin
                              engineers_not_allowed_to_repair_area = no_engineer_repair_area;
                              crane_not_allowed_to_repair_area = no_crane_repair_area;
                         end;
                         3: begin
                              engineers_not_allowed_to_repair_area = no_engineer_repair_area;
                              crane_not_allowed_to_repair_area = no_crane_repair_area;
                         end;
                    end;

                    repairing_buildings = [false,false,false];  //True if group is repairing a building

                    for k = 1 to 3 do begin

                    //1 = apemen engineers
                    //2 = human engineers
                    //3 = crane

                    i = 1;
                    buildings_list = [];
                    repeat
                         case i of
                              1: buildings_list = UnitFilter(ai_all_buildings[base] diff ai_dismantle_these_buildings[base],[f_not,[f_ok]]);  //If building is dead then it won't be part of ai_all_buildings
                              2: buildings_list = UnitFilter(ai_all_buildings[base] diff ai_dismantle_these_buildings[base],[f_not,[f_lives,1000]]);
                         end;

                         case k of
                              2: begin
                                   if under_attack and engineers_not_allowed_to_repair_area > 0 then
                                        buildings_list = UnitFilter(buildings_list,[f_not,[f_inarea,engineers_not_allowed_to_repair_area]]);
                              end;
                              3: begin
                                   if crane_not_allowed_to_repair_area > 0 then
                                        buildings_list = UnitFilter(buildings_list,[f_not,[f_inarea,crane_not_allowed_to_repair_area]]);
                              end;
                         end;

                         i = i + 1;
                    until buildings_list > 0 or i > 2;

                    if buildings_list > 0 then
                         begin
                              case k of
                                   1: begin
                                        if apemen_engineers_list > 0 then
                                             repairing_buildings = Replace(repairing_buildings,k,true);

                                        workers_list = GetHumansOutOfUnits(apemen_engineers_list);
                                   end;
                                   2: begin
                                        if engineers_list > 0 then
                                             repairing_buildings = Replace(repairing_buildings,k,true);

                                        workers_list = GetHumansOutOfUnits(engineers_list);
                                   end;
                                   3: begin
                                        if ai_crane[base] > 0 then
                                             repairing_buildings = Replace(repairing_buildings,k,true);

                                        if ai_crane[base] > 0 and crane_usable then
                                             begin
                                                  workers_list = [ai_crane[base]];
                                                  crane_usable = false;
                                             end
                                        else
                                             workers_list = [];
                                   end;
                              end;

                              repeat
                                   i = 1;
                                   while i <= buildings_list do
                                        begin
                                             if workers_list = 0 then
                                                  break;

                                             temp_unit = NearestUnitToUnit(workers_list,buildings_list[i]);
                                             ComRepairBuilding(temp_unit,buildings_list[i]);

                                             workers_list = workers_list diff temp_unit;
                                             engineers_list = engineers_list diff temp_unit;
                                             apemen_engineers_list = apemen_engineers_list diff temp_unit;

                                             i = i + 1;
                                        end;

                              until workers_list = 0;
                         end;
                    end;

                    if true in repairing_buildings then
                         begin
                              //Humans and/or apemen could possibly not be repairing anything. Make them go
                              //to the depot in that case

                              temp_list = [];
                              if not repairing_buildings[1] then
                                   temp_list = temp_list ^ apemen_engineers_list;

                              if not repairing_buildings[2] then
                                   temp_list = temp_list ^ engineers_list;


                              DistributeHumansToBuildings(base,temp_list, UnitFilter(ai_depot[base],[[f_ok],[f_not,[f_constructed]]]),
                                   class_engineer,[6,6,6,6,6,6,6,6,6,6][base],false,false);

                              continue;
                         end;


                    if not under_attack then
                         begin
                              //Reconstruct buildings if any has been destroyed.
                              //First check if a building is already being constructed - then build that one first.
                              //Upgrading buildings can be hard if the building is working or something, so check if the
                              //building is actually under construction (or being upgraded) - if not then reset the
                              //relevant variables.
                              if ai_building_under_construction[base] > 0 then
                                   if BuildingStatus(ai_building_under_construction[base]) = bs_build then
                                        begin
                                             temp_list_2 = GetHumansOutOfUnits(engineers_list ^ apemen_engineers_list);

                                             if crane_usable and not IsInArea(ai_building_under_construction[base],crane_not_allowed_to_repair_area) then
                                                  temp_list_2 = temp_list_2 ^ ai_crane[base];

                                             for i in temp_list_2 do
                                                  ComRepairBuilding(i,ai_building_under_construction[base]);

                                             continue;
                                        end
                                   else
                                        begin
                                             ComCancel(ai_building_under_construction[base]);  //To make sure upgrade of building is possible
                                             ai_building_under_construction = Replace(ai_building_under_construction,base,0);
                                        end;

                              //Dismantle buildings. This goes before constructing buildings because we may have to construct a building
                              //on the spot where a building to dismantle is now. If we are already constructing a building we wait, though.
                              //Only engineers can dismantle buildings (apemen engineers and cranes cannot).
                              if ai_dismantle_these_buildings[base] > 0 and engineers_list > 0 then
                                   begin
                                        is_dismantling = true;

                                        //Find someone to dismantle, preferably the building constructor
                                        if ai_building_constructor[base] in engineers_list then
                                             k = ai_building_constructor[base]
                                        else
                                             k = BestFromListByList(engineers_list, engineers_list);  //Make sure we take the same unit each time

                                        engineers_list = engineers_list diff k;

                                        case GetType(IsInUnit(k)) of
                                             unit_vehicle: ComExitVehicle(k);
                                             unit_building: ComExitBuilding(k);
                                             else
                                                  ComDismantle(k,ai_dismantle_these_buildings[base][1]);
                                        end;
                                   end
                              else
                                   is_dismantling = false;

                              if ( ai_all_buildings[base] - ai_excepted_buildings[base] < ai_buildings_locations[base] or ai_upcoming_building_data[base] > 0 ) and not is_dismantling and not ai_buildingsleft[base]<1 then
                                   begin
                                        //Decide which building to construct. We take the first building in the location list which is
                                        //arranged in prioritated order.
                                        if ai_upcoming_building_data[base] = 0 then
                                             begin
                                                  for i in ai_buildings_locations[base] do
                                                       if GetBType(HexInfo(i[1],i[2])) = -1 and not i in ai_cannot_rebuild_these_buildings[base] then  //no building on the spot
                                                            begin
                                                                 temp_list = i;
                                                                 break;
                                                            end;

                                                  if temp_list > 0 then
                                                       begin
                                                            //If the building is a bunker then check if we have enough soldiers
                                                            //to occupy it. If not then build a turret instead.
                                                            if temp_list[4] = b_bunker and GetBaseNation(base) in [nation_american,nation_russian] then
                                                                 begin
                                                                      k = 0;

                                                                      for i in ai_buildings_locations[base] do
                                                                           if i[4] in [b_breastwork,b_bunker,b_armoury,b_barracks,b_fort] then
                                                                                k = k + 1;

                                                                      if k > ai_soldiers[base] then
                                                                           begin
                                                                                //Permanently change this to a turret. It would be nice if it would still be built as a
                                                                                //bunker if soldiers are added later but that's a rare case and adds unnecessary complexity.
                                                                                for i = 1 to ai_buildings_locations[base] do
                                                                                     if ai_buildings_locations[base][i] = temp_list then
                                                                                          begin
                                                                                               temp_list_2 = Replace(ai_buildings_locations[base][i],4,b_turret);
                                                                                               temp_list_2 = Replace(ai_buildings_locations[base],i,temp_list_2);
                                                                                               ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list_2);

                                                                                               break;
                                                                                          end;

                                                                                temp_list = Replace(temp_list,4,b_turret);
                                                                           end;
                                                                 end;

                                                            ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,temp_list);
                                                       end;
                                             end;

                                        if ai_upcoming_building_data[base] > 0 then
                                             begin
                                                  //Find the best engineer to construct the building
                                                  if ai_building_constructor[base] = 0 then
                                                       begin
                                                            temp_list_2 = UnitFilter(ai_engineers[base],[f_class,class_engineer]);

                                                            if temp_list_2 > 0 then
                                                                 begin
                                                                      temp_list = [];
                                                                      for i in temp_list_2 do
                                                                           temp_list = temp_list ^ GetSkill(i,skill_engineering);
                                                                      ai_building_constructor = Replace(ai_building_constructor,base, BestFromListByList(temp_list_2,temp_list) );
                                                                 end
                                                            else
                                                                 if ai_engineers[base] = 0 and ai_crane[base] > 0 and crane_usable then
                                                                      begin
                                                                           if InArea(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],crane_not_allowed_to_repair_area) then
                                                                                begin
                                                                                     //Can't build this building with a crane.
                                                                                     temp_list = ai_cannot_rebuild_these_buildings[base] ^ [ai_upcoming_building_data[base]];
                                                                                     ai_cannot_rebuild_these_buildings = Replace(ai_cannot_rebuild_these_buildings,base,temp_list);

                                                                                     ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);
                                                                                end
                                                                           else
                                                                                ai_building_constructor = Replace(ai_building_constructor,base,ai_crane[base]);
                                                                      end;
                                                       end;

                                                  if ai_building_constructor[base] > 0 and ( ai_building_constructor[base] in engineers_list or ( ai_building_constructor[base] = ai_crane[base] and crane_usable ) ) then
                                                       begin
                                                            engineers_list = engineers_list diff ai_building_constructor[base];

                                                            if ai_building_constructor[base] = ai_crane[base] then
                                                                 crane_usable = false;

                                                            //Move vehicles away from the building site.
                                                            away_dist = 7; //Max distance needed for a workshop
                                                            if ai_vehicle_being_moved[base] = 0 then
                                                                 begin
                                                                      temp_list = UnitFilter(ai_vehicles_defend[base] ^ ai_taufield_vehicles[base] ^ ai_implosion_vehicles[base] ^ ai_control_tower_vehicles[base] ^ ai_crane[base] ^ ai_cargo_bay[base],
                                                                                             [[f_control,control_manual],[f_empty],[f_distxy,ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],away_dist]]);  //Don't consider "ai_vehicles_attack" - they will soon move by themselves
                                                                      if temp_list > 0 then
                                                                           begin
                                                                                if ai_building_constructor[base] = ai_crane[base] then
                                                                                     begin
                                                                                          //Can't build this building with a crane.
                                                                                          temp_list = ai_cannot_rebuild_these_buildings[base] ^ [ai_upcoming_building_data[base]];
                                                                                          ai_cannot_rebuild_these_buildings = Replace(ai_cannot_rebuild_these_buildings,base,temp_list);

                                                                                          ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);
                                                                                          ai_building_constructor = Replace(ai_building_constructor,base,0);
                                                                                     end
                                                                                else
                                                                                     begin
                                                                                          ai_vehicle_being_moved = Replace(ai_vehicle_being_moved,base,temp_list[1]);
                                                                                          temp_list_2 = ai_vehicles_having_been_moved[base] ^ temp_list[1];
                                                                                          ai_vehicles_having_been_moved = Replace(ai_vehicles_having_been_moved,base,temp_list_2);
                                                                                     end;
                                                                           end
                                                                      else
                                                                           //Build/upgrade the building
                                                                           case GetType(IsInUnit(ai_building_constructor[base])) of
                                                                                unit_building: ComExitBuilding(ai_building_constructor[base]);
                                                                                unit_vehicle: ComExitVehicle(ai_building_constructor[base]);
                                                                                else
                                                                                case GetBType(HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2])) of
                                                                                     -1: begin
                                                                                          case ai_upcoming_building_data[base][4] of
                                                                                               b_warehouse: i = b_depot;
                                                                                               b_factory: i = b_workshop;
                                                                                               b_lab_half,b_lab_full: i = b_lab;
                                                                                               b_barracks: i = b_armoury;
                                                                                               else i = ai_upcoming_building_data[base][4];
                                                                                          end;

                                                                                          //ComBuild(ai_building_constructor[base],i,ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],ai_upcoming_building_data[base][3]);
                                                                                          //ComBuild doesn't work with cranes even though their task list looks the same after having been given the order.
                                                                                          //The task list order looks like this:
                                                                                          {
                                                                                          SetTaskList(crane,[['B',x,y,0,value_from_below,dir,0]]);
                                                                                          b_depot (0) = (ru) 64, (am) 1, (ar) 34
                                                                                          b_workshop (2) = (ru) 68, (am) 5, (ar) 38
                                                                                          b_armoury (4) = (ru) 66, (am) 3, (ar) 36
                                                                                          b_lab (6) = (ru) 77, (am) 17, (ar) 48
                                                                                          b_oil_power (26) = (ru) 85, (am) 25, (ar) 56
                                                                                          b_solar_power (27) = (am) 26, (ar) 57
                                                                                          b_siberite_power (28) = (ru) 86, (am) 27, (ar) 58
                                                                                          b_oil_mine (29) = (ru) 87, (am) 28, (ar) 59
                                                                                          b_siberite_mine (30) = (ru) 88, (am) 29, (ar) 60
                                                                                          b_breastwork (31) = (ru) 89, (am) 30, (ar) 61
                                                                                          b_bunker (32) = (ru) 90, (am) 31, (ar) 62
                                                                                          b_turret (33) = (ru) 91, (am) 32
                                                                                          b_teleport (34) = (ru) 92
                                                                                          b_control_tower (36) = (am) 94
                                                                                          b_ext_track (16) = (ru) 70, (am) 7, (ar) 40
                                                                                          b_ext_gun (17) = (ru) 71, (am) 8, (ar) 41
                                                                                          b_ext_rocket (18) = (ru) 72, (am) 9, (ar) 42
                                                                                          b_ext_noncombat (19) = (ru) 73, (am) 10
                                                                                          b_ext_radar (20) = (am) 11, (ar) 44
                                                                                          b_ext_siberium (21) = (ru) 75, (am) 12, (ar) 45
                                                                                          b_ext_stitch (23) = (ar) 43
                                                                                          b_ext_computer (24) = (ru) 76, (am) 15
                                                                                          b_ext_laser (25) = (am) 16
                                                                                          }
                                                                                          case i of
                                                                                               b_depot: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 64;
                                                                                                         nation_american: b_value = 1;
                                                                                                         nation_arabian: b_value = 34;
                                                                                                    end;
                                                                                               end;
                                                                                               b_workshop: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 68;
                                                                                                         nation_american: b_value = 5;
                                                                                                         nation_arabian: b_value = 38;
                                                                                                    end;
                                                                                               end;
                                                                                               b_armoury: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 66;
                                                                                                         nation_american: b_value = 3;
                                                                                                         nation_arabian: b_value = 36;
                                                                                                    end;
                                                                                               end;
                                                                                               b_lab: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 77;
                                                                                                         nation_american: b_value = 17;
                                                                                                         nation_arabian: b_value = 48;
                                                                                                    end;
                                                                                               end;
                                                                                               b_oil_power: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 85;
                                                                                                         nation_american: b_value = 25;
                                                                                                         nation_arabian: b_value = 56;
                                                                                                    end;
                                                                                               end;
                                                                                               b_solar_power: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 26;
                                                                                                         nation_arabian: b_value = 57;
                                                                                                    end;
                                                                                               end;
                                                                                               b_siberite_power: begin
                                                                                                   case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 86;
                                                                                                         nation_american: b_value = 27;
                                                                                                         nation_arabian: b_value = 58;
                                                                                                    end;
                                                                                               end;
                                                                                               b_oil_mine: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 87;
                                                                                                         nation_american: b_value = 28;
                                                                                                         nation_arabian: b_value = 59;
                                                                                                    end;
                                                                                               end;
                                                                                               b_siberite_mine: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 88;
                                                                                                         nation_american: b_value = 29;
                                                                                                         nation_arabian: b_value = 60;
                                                                                                    end;
                                                                                               end;
                                                                                               b_breastwork: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 89;
                                                                                                         nation_american: b_value = 30;
                                                                                                         nation_arabian: b_value = 61;
                                                                                                    end;
                                                                                               end;
                                                                                               b_bunker: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 90;
                                                                                                         nation_american: b_value = 31;
                                                                                                         nation_arabian: b_value = 62;
                                                                                                    end;
                                                                                               end;
                                                                                               b_turret: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 91;
                                                                                                         nation_american: b_value = 32;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_teleport: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 92;
                                                                                                         nation_american: b_value = -7;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_control_tower: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 94;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_track: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 70;
                                                                                                         nation_american: b_value = 7;
                                                                                                         nation_arabian: b_value = 40;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_gun: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 71;
                                                                                                         nation_american: b_value = 8;
                                                                                                         nation_arabian: b_value = 41;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_rocket: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 72;
                                                                                                         nation_american: b_value = 9;
                                                                                                         nation_arabian: b_value = 42;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_noncombat: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 73;
                                                                                                         nation_american: b_value = 10;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_radar: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 11;
                                                                                                         nation_arabian: b_value = 44;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_siberium: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 75;
                                                                                                         nation_american: b_value = 12;
                                                                                                         nation_arabian: b_value = 45;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_stitch: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = -7;
                                                                                                         nation_arabian: b_value = 43;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_computer: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 76;
                                                                                                         nation_american: b_value = 15;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_laser: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 16;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               else
                                                                                                    b_value = -42;
                                                                                          end;

                                                                                          SetTaskList(ai_building_constructor[base],[['B',ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],0,b_value,ai_upcoming_building_data[base][3],0]]);
                                                                                     end;
                                                                                     b_depot: begin
                                                                                          ComUpgrade(ai_depot[base]);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,ai_depot[base]);
                                                                                     end;
                                                                                     b_workshop: begin
                                                                                          temp_unit = HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]);
                                                                                          ComUpgrade(temp_unit);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,temp_unit);
                                                                                     end;
                                                                                     b_lab,b_lab_half: begin
                                                                                          temp_unit = HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]);

                                                                                          if ai_upcoming_building_data[base][5] <> b_lab_basic and not ai_upcoming_building_data[base][5] in [GetLabKind(temp_unit,1),GetLabKind(temp_unit,2)] then
                                                                                               begin
                                                                                                    ComUpgradeLab(temp_unit,ai_upcoming_building_data[base][5]);


                                                                                               end
                                                                                          else
                                                                                               if ai_upcoming_building_data[base][6] <> b_lab_basic then
                                                                                                    begin
                                                                                                         ComUpgradeLab(temp_unit,ai_upcoming_building_data[base][6]);


                                                                                                    end
                                                                                               else  //should never happen
                                                                                                    begin
                                                                                                         ai_building_constructor = Replace(ai_building_constructor,base,0);
                                                                                                         ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);
                                                                                                    end;

                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,temp_unit);
                                                                                     end;
                                                                                     b_armoury: begin
                                                                                          temp_unit = HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]);
                                                                                          ComUpgrade(temp_unit);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,temp_unit);
                                                                                     end;
                                                                                end;
                                                                           end;
                                                                 end
                                                            else
                                                                 if UnitsInside(ai_vehicle_being_moved[base]) > 0 then
                                                                      begin
                                                                           if GetDistUnitXY(ai_vehicle_being_moved[base],ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]) <= away_dist then
                                                                                AI_GetAwayFromXY(ai_vehicle_being_moved[base],ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],away_dist+2,false)
                                                                           else
                                                                                ai_vehicle_being_moved = Replace(ai_vehicle_being_moved,base,0);
                                                                      end
                                                                 else
                                                                      case GetType(IsInUnit(ai_building_constructor[base])) of
                                                                           unit_building: ComExitBuilding(ai_building_constructor[base]);
                                                                           unit_vehicle: ComExitVehicle(ai_building_constructor[base]);
                                                                           else
                                                                                ComEnterUnit(ai_building_constructor[base],ai_vehicle_being_moved[base]);
                                                                      end;
                                                       end;
                                             end;
                                   end;


                              //Gather crates in the vicinity of the base (engineers).
                              //Everyone go after the same bunch of crates.
                              if (engineers_list ^ apemen_engineers_list) > 0 and ai_depot[base] > 0 then
                                   begin
                                        temp_list = GetListOfCratesInArea(GetBaseArea(base));
                                        while temp_list > 0 do
                                             begin
                                                  if GetResourceTypeXY(temp_list[1],temp_list[2]) = mat_artifact then
                                                       begin
                                                            temp_list = Delete(temp_list,1);
                                                            temp_list = Delete(temp_list,1);
                                                            continue;
                                                       end;

                                                  ComCollect(GetHumansOutOfUnits(engineers_list ^ apemen_engineers_list),temp_list[1],temp_list[2]);
                                                  engineers_list = [];
                                                  apemen_engineers_list = [];

                                                  break;
                                             end;
                                   end;
                         end;


                    DistributeHumansToBuildings(base,engineers_list ^ apemen_engineers_list, UnitFilter(ai_depot[base],[[f_ok],[f_not,[f_constructed]]]),
                         class_engineer,[6,6,6,6,6,6,6,6,6,6][base],false,false);

                    if crane_usable then
                         if not IsInArea(ai_crane[base],GetBaseArea(base)) then
                              ComMoveXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2])
                         else
                              if GetLives(ai_crane[base]) < 1000 and not under_attack then
                                   ai_crane_is_being_repaired = Replace(ai_crane_is_being_repaired,base,true);
               end;

          until false;
     end;
On BuildingStarted(building,builder) do
     var side, temp_list, base, i;
     begin
          side = GetSide(building);
          if side = you then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          ai_building_constructor = Replace(ai_building_constructor,base,0);
          ai_vehicles_having_been_moved = Replace(ai_vehicles_having_been_moved,base,[]);

          //ONLY 1 building is under construction at a time!
          ai_building_under_construction = Replace(ai_building_under_construction,base,building);

          ai_buildingsleft=replace(ai_buildingsleft,base,ai_buildingsleft[base]-1);
     end;
On BuildingComplete(building) do
     var side, temp_list, temp_unit, base, i, hex;
     begin
          side = GetSide(building);
          {if side = you then
          begin
               if GetBType(building) in [b_armoury,b_workshop,b_depot,b_teleport,b_lab] then
                  mainbuildings=mainbuildings^building;
               exit;
          end;           }  //switched off, not counting the player buildings anymore

          base = FindBase(building);
          if base = 0 then
               exit;

          hex = [GetX(building),GetY(building)];
          if hex in ai_fact_extension_replace_locations[base] then
               begin
                    for i in ai_facts[base] do
                         if ai_facts_with_ext_rebuild_map >= i then
                              begin
                                   temp_list = ai_facts_with_ext_rebuild_map[i] diff [hex];
                                   ai_facts_with_ext_rebuild_map = Replace(ai_facts_with_ext_rebuild_map,i,temp_list);
                              end;
               end;

          BuildUpgradeCommon(base,building);

          temp_list = ai_all_buildings[base] ^ building;
          ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

          UpdateBuildingBasicVariables(base,building,true);
     end;
On UpgradeComplete(building) do
     var side, temp_list, base;
     begin
          side = GetSide(building);
          if side = you then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          BuildUpgradeCommon(base,building);
     end;
Function BuildUpgradeCommon(base,building);
     begin
          //Some buildings require upgrade - e.g. workshop -> factory
          if GetBType(building) = ai_upcoming_building_data[base][4] then
               ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);

          ai_building_under_construction = Replace(ai_building_under_construction,base,0);
     end;
On BuildingCaptured(captured_building,building_former_side,capturing_unit) do
     var temp_list, base, i, oil_val, sib_val;
     begin

          if captured_building in ai_depot then
          begin
               //Mission specific values
               if GetTech(Tech_Tech2,3)=state_researched then
                   oil_val=0.012190476
               else
                   oil_val=0.009047619;
               if GetTech(Tech_Sib1,3)=state_researched then
                   sib_val=0.00347619
               else
                   sib_val=0.00247619;

               case captured_building of
                    ai_depot[1]: begin
                                      SetResourceType(GetBase(captured_building),mat_cans,450);
                                      SetResourceType(GetBase(captured_building),mat_oil,tick*oil_val * 0.2);
                                      SetResourceType(GetBase(captured_building),mat_siberit,25);
                                 end;
                    ai_depot[2]: begin
                                      SetResourceType(GetBase(captured_building),mat_cans,550);
                                      SetResourceType(GetBase(captured_building),mat_oil,tick*oil_val);
                                      SetResourceType(GetBase(captured_building),mat_siberit,25);
                                 end;
                    ai_depot[3]: begin
                                      SetResourceType(GetBase(captured_building),mat_cans,150);
                                      SetResourceType(GetBase(captured_building),mat_oil,0);
                                      SetResourceType(GetBase(captured_building),mat_siberit,50);
                                 end;
                    ai_depot[4]: begin
                                      SetResourceType(GetBase(captured_building),mat_cans,150);
                                      SetResourceType(GetBase(captured_building),mat_oil,0);
                                      SetResourceType(GetBase(captured_building),mat_siberit,50);
                                 end;
                    ai_depot[5]: begin
                                      SetResourceType(GetBase(captured_building),mat_cans,150);
                                      SetResourceType(GetBase(captured_building),mat_oil,0);
                                      SetResourceType(GetBase(captured_building),mat_siberit,0);
                                 end;
                    ai_depot[6]: begin
                                      SetResourceType(GetBase(captured_building),mat_cans,200);
                                      SetResourceType(GetBase(captured_building),mat_oil,0);
                                      SetResourceType(GetBase(captured_building),mat_siberit,0);
                                 end;
                    ai_depot[7]: begin
                                      SetResourceType(GetBase(captured_building),mat_cans,200);
                                      SetResourceType(GetBase(captured_building),mat_oil,0);
                                      SetResourceType(GetBase(captured_building),mat_siberit,0);
                                 end;
                    ai_depot[8]: begin
                                      SetResourceType(GetBase(captured_building),mat_cans,50);
                                      SetResourceType(GetBase(captured_building),mat_oil,0);
                                      SetResourceType(GetBase(captured_building),mat_siberit,tick*sib_val * 0.3);
                                 end;
               end;
          end;

          base = FindBase(captured_building);

          if base = 0 then
               exit;

          if building_former_side = GetBaseSide(base) then
               begin
                    if captured_building in ai_all_buildings[base] then
                         begin
                              //Someone captured one of our buildings!
                              RemoveBuildingFromVariables(base,captured_building);

                              temp_list = ai_captured_buildings[base] ^ captured_building;
                              ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
                         end;
               end
          else
               begin
                    if GetSide(captured_building) = GetBaseSide(base) then
                         begin
                              //Ha! We captured it back again!
                              temp_list = ai_all_buildings[base] ^ captured_building;
                              ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

                              UpdateBuildingBasicVariables(base,captured_building,true);

                              temp_list = ai_captured_buildings[base] diff captured_building;
                              ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
                         end;
               end;
     end;


//Function which orders human units inside other units to exit them. Returns a list with the units which weren't inside other units.
Export Function GetHumansOutOfUnits(un_list);
     var i;
     begin
          result = [];
          for i in un_list do
               case GetType(IsInUnit(i)) of
                    unit_building: ComExitBuilding(i);
                    unit_vehicle: ComExitVehicle(i);
                    else result = result ^ i;
               end;
     end;


//Function which tells if a base is under attack.
//attack_side - side which is attacking def_side's base. -1 if any enemy side of the base's side.
Export Function BaseUnderAttack(base,attack_side);
     var area, i, val, def_side, temp_list;
     begin
          result = false;

          def_side = GetBaseSide(base);
          area = GetBaseArea(base);

          if attack_side = def_side then
               exit;

          if attack_side = -1 then
               begin
                    if FilterAllUnits([[f_enemy,def_side],[f_inarea,area]]) > 0 then
                         begin
                              result = true;
                              exit;
                         end;

                    val = true;
                    for i in ai_contact_time[def_side] do
                         if i < 0$10 then
                              begin
                                   val = false;
                                   break;
                              end;

                    if ContactTime(def_side) >= 0$10 and val then
                         exit;

                    //if ListFilterNearArea( FilterAllUnits([f_enemy,def_side]) ,area) = 0 then
                    //     exit;
                    //The above was the former way of checking if enemy units was nearby but this implied looping through
                    //a lot of units on the map (in function ListFilterNearArea). This caused laggs. Filter-functions like
                    //FilterAllUnits are much much faster than loops with function calls. All we need is to assume that no
                    //unit inside another base's area will ever attack another base which seems reasonable.
                    temp_list = [];
                    for i in (ai_bases diff base) do
                         temp_list = Insert(temp_list,1,[f_not,[f_inarea,GetBaseArea(i)]]);

                    temp_list = FilterAllUnits([[f_enemy,def_side],[f_not,[f_type,unit_building]]] ^ temp_list);
                    if not AnyNearBaseArea(temp_list,base) then
                         exit;
               end
          else
               begin
                    if FilterAllUnits([[f_side,attack_side],[f_inarea,area]]) > 0 then
                         begin
                              result = true;
                              exit;
                         end;

                    if ContactTime([def_side,attack_side]) >= 0$10 and ai_contact_time[def_side][attack_side] >= 0$10 then
                         exit;

                    //if ListFilterNearArea( FilterAllUnits([f_side,attack_side]) ,area) = 0 then
                    //     exit;
                    temp_list = [];
                    for i in (ai_bases diff base) do
                         temp_list = Insert(temp_list,1,[f_not,[f_inarea,GetBaseArea(i)]]);

                    temp_list = FilterAllUnits([[f_side,attack_side],[f_not,[f_type,unit_building]]] ^ temp_list);
                    if not AnyNearBaseArea(temp_list,base) then
                         exit;
               end;

          result = true;
     end;
Export Function ListFilterNearArea(list,area);
     var i;
     begin
          result = [];

          for i in list do
               if GetDistUnitArea(i,area) <= ai_near_base_dist then
                    result = result ^ i;
     end;
Function AnyNearBaseArea(list,base);
     var i, area;
     begin
          result = false;
          area = GetBaseArea(base);

          for i in list do
               if GetDistUnitArea(i,area) <= ai_near_base_dist then
                    begin
                         result = true;
                         break;
                    end;
     end;

On Command(com) do
     var i, j, temp_list, temp_val, temp, hex_list, un, k, target_hex;
     begin
          if com=137 then        //enter teleport
          begin
               for i in filterallunits([f_or,[f_side,2],[f_side,5]]) do
                   if hastask(i)>0 then
                   begin
                        temp_val=0;
                        for j in Gettasklist(i) do
                            if j[1]='q' and j[4]=ruteleprt then
                               temp_val=1;
                        if temp_val=1 then
                        begin
                             entering_teleport_unit=entering_teleport_unit^i;
                        end;
                   end;

               if entering_teleport_unit>0 and teleport_status=1 then
                  if GetTech(Tech_Opto3,2)=state_researched then
                  begin
                       temp=0;
                       for i in entering_teleport_unit do
                           if GetWeapon(i)=ar_radar and GetControl(i)=control_remote and Teleportation_test=0 then
                              temp=i;

                       comstop(entering_teleport_unit diff temp);
                       entering_teleport_unit=temp;
                  end
                  else
                      begin
                           async;
                           Say(Heike,'Tr2_He1');
                           sync;
                           Comstop(entering_teleport_unit);
                           entering_teleport_unit=[];
                      end;

               if entering_teleport_unit>0 and teleport_status=2 then
               begin
                    async;
                    Say(Heike,'Tr3_He1');
                    sync;
                    Comstop(entering_teleport_unit);
                    entering_teleport_unit=[];
               end;

               if entering_teleport_unit>0 and teleport_status>2 then
               begin
                    Comstop(entering_teleport_unit);
                    entering_teleport_unit=[];
               end;


               temp_val=0;
               for i in filterallunits([f_side,2]) do        //do not let the player enter the teleports leading to the ones in map corners, if there's no way out
                   if hastask(i)>0 then
                   begin
                        for j in Gettasklist(i) do
                            if j[1]='q' then
                            begin
                                 if j[4]=Teleport_centre then
                                    if not IsOk(Teleport_bottomRight) then
                                       temp_val=1;
                                 if j[4]=Teleport_right then
                                    if not IsOk(Teleport_bottomLeft) and not GetChassis(isinunit(i))=ar_hovercraft then
                                       temp_val=1;
                            end;
                        if temp_val=1 then
                           comstop(i);
                   end;

               if temp_val=1 then
               begin
                    async;
                    Say(heike,'tel_attack1_He');
                    sync;
               end;
          end;

          if com=65 then       //attack teleport
          begin
               for i in filterallunits([f_side,2]) do
                 if hastask(i)>0 then
                 begin
                      temp_val=0;
                      for j in Gettasklist(i) do
                          if j[1]='A' then
                          begin
                               if j[4]=10 and Teleport_status>0 then
                                  temp_val=1;

                               if j[4] in [Hexinfo(81,54),Hexinfo(117,71),Hexinfo(120,75),Hexinfo(101,70),Hexinfo(101,67),Hexinfo(97,66),Hexinfo(78,67),Hexinfo(75,66),Hexinfo(77,70),Hexinfo(104,65)] and minesready then
                                  temp_val=2;

                               if j[4]=Snake then
                                  temp_val=3;

                               if j[4]=Teleport_BottomLeft then
                               begin
                                    temp_list=[];
                                    for k in filterallunits([[f_side,2],[f_type,unit_human]]) do
                                        if isinarea(k,left_teleport_area) or isinarea(isinunit(k),left_teleport_area) then
                                           temp_list=temp_list^k;
                                    if filterunitsinarea(left_teleport_area,[f_chassis,ar_hovercraft])<temp_list then
                                       temp_val=4;
                               end;

                               if j[4]=Teleport_BottomRight then
                               begin
                                    temp_list=[];
                                    for k in filterallunits([[f_side,2],[f_type,unit_human]]) do
                                        if isinarea(k,area_base9) or isinarea(isinunit(k),area_base9) then
                                           temp_list=temp_list^k;
                                    if temp_list>0 then
                                       temp_val=4;
                               end;
                          end;


                      if temp_val=1 or temp_val=3 or temp_val=4 then
                         comstop(i);

                      if temp_val=2 then
                      begin
                           case query('mines_detonate') of
                                1: detonate;
                           end;
                           exit;
                      end;

                 end;


               if temp_val=1 then
               begin
                    async;
                    Say(heike,'tel_attack3_He');
                    sync;
               end;

               if temp_val=3 then
                  case rand(1,4) of
                       1: begin async; Say(Snake,'Snake_1'); sync; end;
                       2: begin async; Say(Snake,'Snake_2'); sync; end;
                       3: begin async; Say(Snake,'Snake_3'); sync; end;
                       4: begin async; Say(Snake,'Snake_4'); sync; end;
                  end;

               if temp_val=4 then
               begin
                    async;
                    Say(heike,'tel_attack1_He');
                    sync;
               end;
          end;


         { if com=65 then
             if minesready then
                for i in filterallunits([f_side,2]) do
                    if hastask(i)>0 then
                    begin
                         temp=[gettasklist(i)[1][2],gettasklist(i)[1][3]];
                         for j in [ [118,72],[118,73],[76,67],[79,67],[100,68],[81,53],[104,65] , [81,54],[117,71],[120,75],[101,70],[101,67],[97,66],[78,67],[75,66],[77,70]] do
                             if temp[1]=j[1] and temp[2]=j[2] {and query2_time<=tick} then
                             begin
                                  case query('mines_detonate') of
                                       1: detonate;
                                  end;

                                  //query2_time=tick+0$1;
                                  exit;
                             end;
                    end;   }

          if com=112 then   //place a mine - applies to both types
          begin
               for i in filterallunits([f_side,2]) do
                   if hastask(i)>0 then
                   begin
                        temp_val=0;
                        for j in Gettasklist(i) do
                            if j[1]='p' and j[5]=0 then  //'p' placing the mine again applies to both types. The distinction is in the 5th number of the task list, 0 for delayed, 1 for remote
                            begin
                                 if GetDistXY(228,164,j[2],j[3])<5 then  //if it's near bottom right teleporter
                                 begin
                                      comstop(i);
                                      temp_val=1;
                                 end;

                                 if GetDistXY(74,141,j[2],j[3])<5 then   //if it's near bottom left teleporter
                                 begin
                                      temp_list=[];
                                      for k in filterallunits([[f_side,2],[f_type,unit_human]]) do
                                          if isinarea(k,left_teleport_area) or isinarea(isinunit(k),left_teleport_area) then
                                             temp_list=temp_list^k;
                                      if filterunitsinarea(left_teleport_area,[f_chassis,ar_hovercraft])<temp_list then
                                      begin
                                           comstop(i);
                                           temp_val=1;
                                      end;
                                 end;
                            end;
                   end;

               if temp_val=1 then
               begin
                    async;
                    Say(heike,'tel_attack1_He');
                    sync;
               end;
          end;

          if com=42 then //detonating a remote charge
          begin
               for i in filterallunits([f_side,2]) do
                   if hastask(i)>0 then
                   begin
                        for j in Gettasklist(i) do
                            if j[1]='*' then         //task of detonating
                            begin
                                 if GetDistxy(74,141,MineOfUnit(i)[1],MineOfUnit(i)[2])<5 then   //if the mine is near bottom left teleporter
                                 begin
                                      temp_list=[];
                                      for k in filterallunits([[f_side,2],[f_type,unit_human]]) do
                                          if isinarea(k,left_teleport_area) or isinarea(isinunit(k),left_teleport_area) then
                                             temp_list=temp_list^k;
                                      if filterunitsinarea(left_teleport_area,[f_chassis,ar_hovercraft])<temp_list then
                                      begin
                                           temp_val=1;
                                           comstop(i);
                                           async;
                                           Say(heike,'tel_attack1_He');
                                           sync;
                                      end;
                                 end;

                                 if GetDistxy(228,164,MineOfUnit(i)[1],MineOfUnit(i)[2])<5 then   //if the mine is near bottom right teleporter
                                 begin
                                      temp_list=[];
                                      for k in filterallunits([[f_side,2],[f_type,unit_human]]) do
                                          if isinarea(k,area_base9) or isinarea(isinunit(k),area_base9) then
                                             temp_list=temp_list^k;
                                      if temp_list>0 then
                                      begin
                                           temp_val=1;
                                           comstop(i);
                                           async;
                                           Say(heike,'tel_attack1_He');
                                           sync;
                                      end;
                                 end;
                            end;
                   end;
          end;

          if com = 124 then  //attack ground
               begin
                    //Find one of the unit which were given the command
                    for i in FilterAllUnits([f_side,you]) do
                         if IsSelected(i) and HasTask(i) then
                              begin
                                   target_hex = [];
                                   for k in GetTaskList(i) do
                                        if k[1] = '|' then  //Attack ground is ['|',x,y,0,0,0,0]
                                             begin
                                                  target_hex = [k[2],k[3]];
                                                  break;
                                             end;

                                   if target_hex > 0 then
                                             begin
                                                  hex_list = target_hex;

                                                  //Units within distance 1 of the hex will take damage. Find all units within that distance.
                                                  temp_list = [];
                                                  for k = 0 to 5 do
                                                       temp_list = Insert(temp_list,1,[ShiftX(hex_list[1],k,1),ShiftY(hex_list[2],k,1)]);

                                                  hex_list = [hex_list] ^ temp_list;

                                                  temp_list = [];
                                                  for k in hex_list do
                                                       begin
                                                            un = HexInfo(k[1],k[2]);

                                                            if un > 0 and not un in temp_list then
                                                                 begin
                                                                      ai_attack_ground_info_initial = Insert(ai_attack_ground_info_initial,1,[i,un,GetSide(un),target_hex[1],target_hex[2]]);
                                                                      temp_list = temp_list ^ un;
                                                                 end;
                                                       end;
                                             end;
                              end;
               end;     
     end;
//Every updating "ai_contact_time", "ai_attack_ground_info_initial" and "ai_attack_ground_info_sustain".
Every 0$1+0$0.1 do
     var a, b, temp_list, temp_list_2, yup, i, t;
     begin
          repeat
          wait(0$0.5);

          //Check if some of the units, that were going to attack ground, gave up before
          //doing so.
          i = 1;
          while i <= ai_attack_ground_info_initial do
               begin
                    yup = false;
                    for t in GetTaskList(ai_attack_ground_info_initial[i][1]) do
                         if t[1] = '|' then  //Attack ground is ['|',x,y,0,0,0,0]
                              if t[2] = ai_attack_ground_info_initial[i][4] and t[3] = ai_attack_ground_info_initial[i][5] then
                                   begin
                                        yup = true;
                                        break;
                                   end;

                    if not yup then
                         begin
                              ai_attack_ground_info_initial = Delete(ai_attack_ground_info_initial,i);
                              continue;
                         end;

                    i = i + 1;
               end;

          //Check if some of the units attacking ground has stopped.
          i = 1;
          while i <= ai_attack_ground_info_sustain do
               begin
                    yup = false;
                    for t in GetTaskList(ai_attack_ground_info_sustain[i][1]) do
                         if t[1] = '|' then  //Attack ground is ['|',x,y,0,0,0,0]
                              if t[2] = ai_attack_ground_info_sustain[i][4] and t[3] = ai_attack_ground_info_sustain[i][5] then
                                   begin
                                        yup = true;
                                        break;
                                   end;

                    if not yup then
                         begin
                              ai_attack_ground_info_sustain = Delete(ai_attack_ground_info_sustain,i);
                              continue;
                         end;

                    i = i + 1;
               end;

          //Update all times
          temp_list = ai_contact_time;
          for a = 1 to temp_list do
               for b = 1 to temp_list[a] do
                    if temp_list[a][b] < 100000 then
                         begin
                              temp_list_2 = Replace(ai_contact_time[a],b, temp_list[a][b] + 0$0.5 );
                              ai_contact_time = Replace(ai_contact_time,a,temp_list_2);
                         end;

          //New attacks?
          //Function SideShoot and UnitShoot does detect damage from attacking ground.
          for a in ai_attack_ground_info_initial do
               begin
                         if IsDead(a[2]) or UnitShoot(a[2]) = a[1] then
                              begin
                                   temp_list = Replace(ai_contact_time[you],a[3],0);
                                   ai_contact_time = Replace(ai_contact_time,you,temp_list);

                                   temp_list = Replace(ai_contact_time[a[3]],you,0);
                                   ai_contact_time = Replace(ai_contact_time,a[3],temp_list);

                                   ai_attack_ground_info_initial = ai_attack_ground_info_initial diff [a];
                                   ai_attack_ground_info_sustain = Insert(ai_attack_ground_info_sustain,1,a);
                              end;
               end;

          //Sustained attacks?
          for a in ai_attack_ground_info_sustain do
               begin
                    temp_list = Replace(ai_contact_time[you],a[3],0);
                    ai_contact_time = Replace(ai_contact_time,you,temp_list);

                    temp_list = Replace(ai_contact_time[a[3]],you,0);
                    ai_contact_time = Replace(ai_contact_time,a[3],temp_list);
               end;

          until false;
     end;


//Mechanics (defending, i.e. in the base)
//Priorities if base is under attack (descending):
//- If a mechanic is hurt, pull him back for healing.
//- Repair war vehicles defending the base.
//- Stay in factory.
//Priorites if not under attack (decending):
//- If a mechanic is hurt, pull him back for healing.
//- Refuel vehicles
//- Repair damaged war vehicles within the base
//- Stay in factory (and possibly construct a vehicle or weapon)
//When it comes to American remote control we pick some mechanics to control
//specific vehicles. Their priorities are (descending):
//- If a mechanic is hurt, pull him back for healing.
//- Repair war vehicles defending the base (if all vehicles you control are burning or dead)
//- Stay in control tower and link to vehicles.
//Priorites if not under attack (decending):
//- If a mechanic is hurt, pull him back for healing.
//- Repair damaged war vehicles within the base (if all remote vehicles are inside the base)
//- Stay in control tower and link to vehicles.
Every 0$1+0$0.4 do
     var side, i, mechanics_list, temp_list, temp_list_3, temp_unit, vehicles_list, allowed_to_repair_vehicles;
     var under_attack, free_parking_spots, k, base, area, temp_list_2, remote_mechanics, parked_vehicles, n, a;
     var temp_list_4, temp_list_5, num_control_stations, free_behemoth_parking_spots, parked_behemoths, already_inside_mecs;
     var vehicles_drivers, remote_driver_vehicles;
     begin
          //Index is vehicle id, value is driver id.
          //For use to ensure the driver first chosen to drive the
          //vehicle goes for it (doesn't change to another driver).
          vehicles_drivers = [];

          remote_driver_vehicles = [[],[],[],[]];  //For remote control. [driver_id,[veh1,veh2,veh3]]

          repeat
          if ai_bases = 0 then
               exit;

          wait(0$1 mod (ai_bases+0));

          for base in ai_bases do
               begin
                    wait(0$1 div (ai_bases+0));

                    side = GetBaseSide(base);
                    area = GetBaseArea(base);
                    under_attack = BaseUnderAttack(base,-1);  //Base under attack


                    //Update vehicles drivers so vehicles with a driver no longer has that driver assigned
                    //so a possible new driver can be assigned next time.
                    for i in ai_vehicles_defend[base] do
                         if vehicles_drivers >= i then
                              if vehicles_drivers[i] > 0 then
                                   if IsInUnit(vehicles_drivers[i]) = i or IsDead(vehicles_drivers[i]) then
                                        vehicles_drivers = Replace(vehicles_drivers,i,0);


                    //Find a driver for the (manual) crane if necessary.
                    if ai_crane[base] > 0 and GetControl(ai_crane[base]) = control_manual and ai_crane_driver[base] = 0 and ai_mechanics_defend[base] > 0 then
                         begin
                              ai_crane_driver = Replace(ai_crane_driver,base, FindBestCraneDriver(base) );

                              for i = 1 to remote_driver_vehicles[base]+0 do
                                   if remote_driver_vehicles[base][i][1] = ai_crane_driver[base] then
                                        begin
                                             temp_list = Delete(remote_driver_vehicles[base],i);
                                             remote_driver_vehicles = Replace(remote_driver_vehicles,base,temp_list);

                                             break;
                                        end;
                         end;

                    //Clear crane driver from vehicles drivers
                    {if ai_crane_driver[base] > 0 and ai_crane_driver[base] in vehicles_drivers then
                         begin
                              for i = 1 to vehicles_drivers do
                                   if vehicles_drivers[i] = ai_crane_driver[base] then
                                        begin
                                             vehicles_drivers = Replace(vehicles_drivers,i,0);
                                             break;
                                        end;
                         end; -> if not crane driver is in mechanics_list then another driver will be found, cf. function "FindDriverHelper"}


                    mechanics_list = UnitFilter(ai_mechanics_defend[base] diff (ai_heal_these_humans[base] ^ ai_crane_driver[base]),[f_not,[f_driving]]);
                    if ai_crane_driver[base] > 0 and not IsOk(ai_crane[base]) then
                         mechanics_list = mechanics_list ^ ai_crane_driver[base];

                    remote_mechanics = [];


                    //Identify mechanics who need healing
                    temp_list = ai_heal_these_humans[base];
                    i = 1;
                    while i <= mechanics_list do
                         begin
                              if GetLives(mechanics_list[i]) <= 900 then
                                   begin
                                        temp_list = temp_list ^ mechanics_list[i];
                                        mechanics_list = Delete(mechanics_list,i);
                                        continue;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Find vehicles which no longer need to be repaired (fully repaired).
                    temp_list = [];
                    for i in ai_vehicles_being_repaired[base] do
                         if GetLives(i) < 1000 then
                              temp_list = temp_list ^ i;
                    ai_vehicles_being_repaired = Replace(ai_vehicles_being_repaired,base,temp_list);


                    //Find vehicles which do no longer need to retreat (they have been fully repaired or are being repaired)
                    temp_list = [];
                    for i in ai_retreating_vehicles_defend[base] diff ai_vehicles_being_repaired[base] do
                         if GetLives(i) < 1000 then
                              temp_list = temp_list ^ i;
                    ai_retreating_vehicles_defend = Replace(ai_retreating_vehicles_defend,base,temp_list);


                    //Identify defending vehicles which need to retreat.
                    //Make vehicles retreat if they exceed a certain threshold of damage. Works for any amount of health
                    //(except full health) but is only used when the vehicles are burning. Defend the base at all costs!
                    temp_list = ai_retreating_vehicles_defend[base];
                    for i in ai_vehicles_defend[base] diff (ai_retreating_vehicles_defend[base] ^ ai_vehicles_being_repaired[base]) do
                         if GetLives(i) <= 250 then
                              temp_list = temp_list ^ i;
                    ai_retreating_vehicles_defend = Replace(ai_retreating_vehicles_defend,base,temp_list);


                    //Find vehicles which no longer need to refuel.
                    //If a vehicles was scheduled to refuel but didn't make it before the base was attacked
                    //and was added to retreating vehicles during the attack it must be removed from
                    //refueling vehicles.
                    temp_list = [];
                    for i in ai_refuel_vehicles_list[base] diff (ai_retreating_vehicles_defend[base] ^ ai_vehicles_being_repaired[base] ^ ai_vehicle_being_moved[base] ^ ai_vehicles_having_been_moved[base]) do
                         if GetFuel(i) < 95 then
                              temp_list = temp_list ^ i;
                    ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);


                    if under_attack then  
                         begin
                              //Find the vehicles which need a driver and get them a driver (take the
                              //nearest available mechanic).
                              vehicles_list = ai_vehicles_defend[base] diff (ai_retreating_vehicles_defend[base] ^ ai_vehicles_being_repaired[base] ^ ai_vehicle_being_moved[base] ^ ai_vehicles_having_been_moved[base]);

                              temp_list = UnitFilter(vehicles_list,[[f_control,control_manual],[f_ok],[f_empty],[f_inarea,area]]);
                              temp_list = FindDriverHelper(temp_list,mechanics_list,vehicles_drivers);
                              mechanics_list = temp_list[1];
                              vehicles_drivers = temp_list[2];

                              //Order the vehicles to attack an enemy unit near the base.
                              case base of
                                   1: temp_list = DangerousUnits(FilterAllUnits([[f_enemy,side],[f_inarea,base1_vehicle_defend]]));
                                   2: temp_list = DangerousUnits(FilterAllUnits([[f_enemy,side],[f_inarea,base2_vehicle_defend]]));
                                   3: temp_list = DangerousUnits(FilterAllUnits([[f_enemy,side],[f_inarea,base3_vehicle_defend]]));
                                   4: temp_list = DangerousUnits(FilterAllUnits([[f_enemy,side],[f_inarea,base4_vehicle_defend]]));
                                   5: temp_list = DangerousUnits(FilterAllUnits([[f_enemy,side],[f_inarea,base5_vehicle_defend]]));
                                   6: temp_list = DangerousUnits(FilterAllUnits([[f_enemy,side],[f_inarea,base6_vehicle_defend]]));
                              end;
   
                              //temp_list = DangerousUnits(ListFilterNearArea( FilterAllUnits([f_enemy,side]),GetBaseArea(base)));
                                                                       
                              if temp_list > 0 then
                              begin
                                   if validhex(GetX(temp_list[1]),GetY(temp_list[1])) then
                                      ComAgressiveMove(vehicles_list ,GetX(temp_list[1]),GetY(temp_list[1]));
                              end
                              else
                                   begin
                                        temp_list = FilterAllUnits([[f_enemy,side],[f_inarea,area]]);

                                        if temp_list > 0 then
                                             begin
                                                  temp_list_2 = DangerousUnits(temp_list);

                                                  if temp_list_2 = 0 then
                                                       ComAttackUnit(vehicles_list,temp_list[1])  //Destroy e.g. empty manual vehicles so they won't block.
                                                  else
                                                      if validhex(GetX(temp_list[1]),GetY(temp_list[1])) then
                                                         ComAgressiveMove(vehicles_list ,GetX(temp_list_2[1]),GetY(temp_list_2[1]));
                                             end;
                                   end;
                         end                                                   
                    else
                         begin
                              if IsOk(ai_depot[base]) then
                                   begin
                                        //If some vehicles need to refuel then make 'em refuel.
                                        temp_list = ai_refuel_vehicles_list[base];
                                        for i in (ai_vehicles_defend[base] ^ ai_taufield_vehicles[base]) diff ai_refuel_vehicles_list[base] do
                                             if GetFuel(i) < 70 and GetEngine(i) = engine_combustion then
                                                  temp_list = temp_list ^ i;
                                        temp_list = temp_list diff (ai_retreating_vehicles_defend[base] ^ ai_vehicles_being_repaired[base] ^ ai_vehicle_being_moved[base] ^ ai_vehicles_having_been_moved[base]);
                                        ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);

                                        temp_list = UnitFilter(ai_refuel_vehicles_list[base],[[f_control,control_manual],[f_empty],[f_ok]]);
                                        temp_list = FindDriverHelper(temp_list,mechanics_list,vehicles_drivers);
                                        mechanics_list = temp_list[1];
                                        vehicles_drivers = temp_list[2];

                                        for i in ai_refuel_vehicles_list[base] do
                                             begin
                                                  if IsInArea(i,area) then
                                                       begin
                                                            ComMoveUnit(i,ai_depot[base]);
                                                            AddComRefuel(i,ai_depot[base]);
                                                       end
                                                  else
                                                       ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                                             end;
                                   end;

                              //Move non-manual vehicles outside the base inside (not behemoths, though)
                              for i in UnitFilter(ai_vehicles_defend[base] ^ ai_taufield_vehicles[base],[f_not,[f_control,control_manual]]) diff (ai_refuel_vehicles_list[base] ^ ai_retreating_vehicles_defend[base] ^ ai_vehicles_being_repaired[base] ^ ai_vehicle_being_moved[base] ^ ai_vehicles_having_been_moved[base]) do
                                   if not IsInArea(i,area) then
                                        ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                         end;


                    //Determine which vehicles are allowed to repair. If base is under attack then only the vehicles on the
                    //parking/retreat spots. If not under attack then all defending vehicles.
                    //Get mechanics in these vehicles out so they can repair too (if we are not under attack).
                    //If the base is not under attack then scan for vehicles which are not parked correctly.
                    free_parking_spots = [];  //Keeps track of the pullback hexes available
                    parked_vehicles = [];  //Keeps track of vehicles on pullback hexes
                    temp_list_2 = UnitFilter(ai_vehicles_defend[base] ^ ai_taufield_vehicles[base],[f_control,control_manual]);
                    for i in ai_vehicle_pullback_hexes[base] do
                         begin
                              temp_unit = HexInfo(i[1],i[2]);

                              if temp_unit in temp_list_2 then
                                   begin
                                        parked_vehicles = parked_vehicles ^ temp_unit;

                                        if not under_attack and not temp_unit in (ai_refuel_vehicles_list[base] ^ ai_vehicle_being_moved[base] ^ ai_vehicles_having_been_moved[base] {^ ai_vehicles_attack[base]} ^ ai_crane[base] ^ ai_cargo_bay[base]) then
                                             begin
                                                  k = IsDrivenBy(temp_unit);
                                                  if GetControl(temp_unit) = control_manual and k > 0 and not k in remote_mechanics then
                                                       begin
                                                            ComExitVehicle(k);
                                                       end;
                                             end;
                                   end
                              else
                                   if temp_unit = 0 or not ( GetType(temp_unit) = unit_building or ( GetType(temp_unit) = unit_vehicle and ( ( GetControl(temp_unit) = control_manual and IsDrivenBy(temp_unit) = 0 ) or ( GetControl(temp_unit) = control_remote and IsControledBy(temp_unit) = 0 ) ) ) ) then
                                        free_parking_spots = Insert(free_parking_spots,1,i);
                         end;


                    if under_attack then
                         begin
                              allowed_to_repair_vehicles = parked_vehicles;
                              vehicles_list = UnitFilter((ai_vehicles_being_repaired[base] ^ ai_retreating_vehicles_defend[base]) diff parked_vehicles,[[f_control,control_manual],[f_ok]]);
                              vehicles_list = vehicles_list union UnitFilter((parked_vehicles ^ ai_refuel_vehicles_list[base] ^ ai_vehicles_having_been_moved[base] ^ ai_vehicle_being_moved[base]),[f_ok]);

                              //Man only the vehicles being repaired and retreating vehicles which are parked on a parking spot and ( are under attack
                              //or where mechanics are under attack nearby (i.e. the enemy is near) ).
                              //Else use your time on repairing the vehicles.
                              //UnitShoot resets after 10 seconds and detects all kinds of contact (direct hit, bombs, attack ground etc.).
                              temp_list = [];
                              temp_list_3 = parked_vehicles isect UnitFilter(ai_vehicles_being_repaired[base] ^ ai_retreating_vehicles_defend[base],[f_ok]);
                              for i in temp_list_3 do
                                   if UnitShoot(i) > 0 then
                                        if GetSide(UnitShoot(i)) <> side then
                                             temp_list = temp_list ^ i;

                              for i in ai_mechanics_defend[base] do
                                   if UnitShoot(i) > 0 then
                                        if GetSide(UnitShoot(i)) <> side then
                                             temp_list = temp_list ^ UnitFilter(temp_list_3 diff temp_list,[f_dist,i,5]);

                              for i in temp_list_3 diff temp_list do
                                   if GetControl(i) = control_manual then
                                        begin
                                             ComExitVehicle(IsDrivenBy(i));
                                        end;

                              temp_list = UnitFilter(temp_list,[[f_empty],[f_ok]]);  //These vehicles are all manually controlled
                              temp_list = FindDriverHelper(temp_list,mechanics_list,vehicles_drivers);
                              mechanics_list = temp_list[1];
                              vehicles_drivers = temp_list[2];
                         end
                    else
                         begin
                              //Don't go near burning vehicles too far away from the base - could be dangerous if the
                              //enemy has set up an ambush.
                              allowed_to_repair_vehicles = (ai_vehicles_defend[base] ^ ai_taufield_vehicles[base]) diff (ai_refuel_vehicles_list[base] ^ ai_vehicles_having_been_moved[base] ^ ai_vehicle_being_moved[base]);

                              i = 1;
                              while i <= allowed_to_repair_vehicles do
                                   begin
                                        if not IsOk(allowed_to_repair_vehicles[i]) and GetDistUnitArea(allowed_to_repair_vehicles[i],area) > 7 then
                                             begin
                                                  allowed_to_repair_vehicles = Delete(allowed_to_repair_vehicles,i);
                                                  continue;
                                             end;

                                        i = i + 1;
                                   end;

                              vehicles_list = UnitFilter(allowed_to_repair_vehicles diff parked_vehicles,[[f_control,control_manual],[f_ok]]);

                              //Find drivers for the vehicles which aren't parked correctly
                              temp_list = UnitFilter(vehicles_list,[[f_control,control_manual],[f_empty],[f_ok]]);
                              temp_list = FindDriverHelper(temp_list,mechanics_list,vehicles_drivers);
                              mechanics_list = temp_list[1];
                              vehicles_drivers = temp_list[2];
                         end;

                    //Command (damaged vehicles)/(vehicles parked the wrong places) to retreat to the pullback hexes.
                    //If no pullback hexes are available then the vehicle won't retreat.
                    for i in vehicles_list do
                         if free_parking_spots > 0 then
                              begin
                                   //Take the closest spot
                                   temp_list = [];
                                   for k in free_parking_spots do
                                        temp_list = temp_list ^ GetDistUnitXY(i,k[1],k[2]);
                                   temp_list = WorstFromListByList(free_parking_spots,temp_list);

                                   ComMoveXY(i,temp_list[1],temp_list[2]);
                                   AddComHold(i);

                                   free_parking_spots = free_parking_spots diff [temp_list];
                              end
                         else
                              break;



                    //Repair vehicles.
                    //All mechanics go for the same vehicle.
                    if not under_attack then
                         allowed_to_repair_vehicles = allowed_to_repair_vehicles ^ UnitFilter(ai_cargo_bay[base] diff 0,[f_inarea,area]);

                    allowed_to_repair_vehicles = UnitFilter(allowed_to_repair_vehicles,[[f_not,[f_lives,1000]],[f_or,[f_not,[f_ok]],[f_inarea,area]]]);

                    if ai_crane[base] > 0 then
                         begin
                              k = false;

                              if ai_crane_is_being_repaired[base] and ( GetDistUnitXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) <= 6 or ( IsInArea(ai_crane[base],area) and not under_attack ) ) then
                                   begin
                                        if GetLives(ai_crane[base]) < 1000 then
                                             allowed_to_repair_vehicles = ai_crane[base] ^ allowed_to_repair_vehicles;

                                        if ai_crane_driver[base] > 0 then
                                             begin
                                                  if GetLives(ai_crane_driver[base]) = 1000 then
                                                       begin
                                                            mechanics_list = mechanics_list ^ ai_crane_driver[base];
                                                       end
                                                  else
                                                       begin
                                                            if GetDistUnitXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) <= 6 then
                                                                 begin
                                                                      if GetHumansOutOfUnits([ai_crane_driver[base]]) > 0 and not ai_crane_driver[base] in ai_heal_these_humans[base] then
                                                                           begin
                                                                                temp_list = ai_heal_these_humans[base] ^ ai_crane_driver[base];
                                                                                ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
                                                                           end;
                                                                 end
                                                            else
                                                                 k = true;
                                                       end;
                                             end;
                                   end
                              else
                                   k = true;

                              if k then
                                   begin
                                        if IsOk(ai_crane[base]) and ai_crane_driver[base] > 0 and not ai_crane_driver[base] in mechanics_list and not ai_crane_driver[base] in ai_heal_these_humans[base] then
                                             begin
                                                  if IsInUnit(ai_crane_driver[base]) <> ai_crane[base] then
                                                       case GetType(IsInUnit(ai_crane_driver[base])) of
                                                            unit_building: ComExitBuilding(ai_crane_driver[base]);
                                                            unit_vehicle: ComExitVehicle(ai_crane_driver[base]);
                                                            else
                                                                 ComEnterUnit(ai_crane_driver[base],ai_crane[base]);
                                                       end;
                                             end;
                                   end;
                         end;

                    if mechanics_list = 0 and remote_mechanics = 0 then
                         continue;

                    allowed_to_repair_vehicles = allowed_to_repair_vehicles diff ai_vehicles_being_repaired[base];
                    if allowed_to_repair_vehicles > 0 or ai_vehicles_being_repaired[base] > 0 then
                         begin
                              if remote_mechanics > 0 then
                                   begin
                                        if under_attack or UnitFilter(ai_vehicles_attack[base],[[f_control,control_remote],[f_ok]]) > 0 then
                                             begin
                                                  //Repair vehicles if all vehicles you control are burning or dead
                                                  for i in remote_driver_vehicles[base] do
                                                       if UnitFilter(i[2],[f_ok]) = 0 and i[1] in remote_mechanics then
                                                            begin
                                                                 mechanics_list = mechanics_list ^ i[1];
                                                                 remote_mechanics = remote_mechanics diff i[1];
                                                            end;
                                             end
                                        else
                                             begin
                                                  //All help repair vehicles if all vehicles are inside the base
                                                  //(to prevent a lot of destination unreachable messages from other vehicles
                                                  //all must be inside the base).
                                                  //Perhaps it's not so smart if we have a remotely controlled cargo bay but hopefully the
                                                  //repair won't take long now that everybody is helping.
                                                  //Remember some remote vehicles may not be controlled by anyone.
                                                  temp_unit = true;
                                                  temp_list = ai_vehicles_defend[base] ^ ai_taufield_vehicles[base];
                                                  for i in remote_driver_vehicles[base] do
                                                       begin
                                                            for k in i[2] do
                                                                 if not IsInArea(k,area) then
                                                                      begin
                                                                           temp_unit = false;
                                                                           break;
                                                                      end
                                                                 else
                                                                      temp_list = temp_list diff k;

                                                            if not temp_unit then
                                                                 break;
                                                       end;

                                                  if temp_unit then
                                                       for i in temp_list do
                                                            if not IsInArea(i,area) then
                                                                 begin
                                                                      temp_unit = false;
                                                                      break;
                                                                 end;

                                                  if temp_unit then
                                                       begin
                                                            mechanics_list = mechanics_list ^ remote_mechanics;
                                                            remote_mechanics = [];
                                                       end;
                                             end;
                                   end;

                              if allowed_to_repair_vehicles > 0 then
                                   begin
                                        k = false;
                                        if ai_vehicles_being_repaired[base] = 0 then
                                             k = true
                                        else
                                             if IsOk(ai_vehicles_being_repaired[base][1]) then
                                                  begin
                                                       allowed_to_repair_vehicles = UnitFilter(allowed_to_repair_vehicles,[f_not,[f_ok]]);
                                                       k := allowed_to_repair_vehicles > 0;
                                                  end;

                                        if k then
                                             begin
                                                  temp_list = [];
                                                  for i in allowed_to_repair_vehicles do
                                                       temp_list = temp_list ^ GetLives(i);
                                                  temp_unit = WorstFromListByList(allowed_to_repair_vehicles,temp_list);

                                                  temp_list = temp_unit ^ ai_vehicles_being_repaired[base];
                                                  ai_vehicles_being_repaired = Replace(ai_vehicles_being_repaired,base,temp_list);

                                                  temp_list = ai_retreating_vehicles_defend[base] diff temp_unit;
                                                  ai_retreating_vehicles_defend = Replace(ai_retreating_vehicles_defend,base,temp_list);
                                             end;
                                   end;

                              ComRepairVehicle( GetHumansOutOfUnits(mechanics_list) , ai_vehicles_being_repaired[base][1]);
                         end
                    else
                         begin
                              //Rest mechanics stay inside the factory (if possible).
                              //Change class if necessary
                              DistributeHumansToBuildings(base,mechanics_list, UnitFilter(ai_facts[base] ,[[f_ok],[f_not,[f_constructed]]]),
                                   class_mechanic,6,true,false);
                         end;

               end;

          until false;
     end;
Function FindDriverHelper(vehicles_list,mechanics_list,vehicles_drivers);
     var i, k, temp_unit;
     begin
          for i in vehicles_list do
               begin
                    if mechanics_list = 0 then
                         break;

                    k = false;
                    if vehicles_drivers < i then
                         k = true
                    else
                         if not vehicles_drivers[i] in mechanics_list then
                              k = true;

                    if k then
                         vehicles_drivers = Replace(vehicles_drivers,i,AllNearestUnitToUnit(mechanics_list,i));

                    if vehicles_drivers[i] > 0 then
                        begin
                             temp_unit = IsInUnit(vehicles_drivers[i]);

                             if temp_unit <> i then
                                  case GetType(temp_unit) of
                                       unit_vehicle: ComExitVehicle(vehicles_drivers[i]);  //could sit in a vehicle which is now parked correctly
                                       unit_building: ComExitBuilding(vehicles_drivers[i]);
                                       else ComEnterUnit(vehicles_drivers[i],i);
                                  end;

                             mechanics_list = mechanics_list diff vehicles_drivers[i];
                        end;
               end;

          result = [mechanics_list,vehicles_drivers];
     end;
//The funny thing about a crane is that it repairs buildings faster the higher mechanic skill the driver has,
//but when constructing buildings the building's level will correspond to the driver's engineering skill.
//Therefore the crane driver should be the mechanic with the highest engineering and mechanical skill combined.
Function FindBestCraneDriver(base);
     var i, temp_list;
     begin
          if ai_mechanics_defend[base] = 0 then
               begin
                    result = 0;
                    exit;
               end;

          temp_list = [];
          for i in ai_mechanics_defend[base] do
               temp_list = temp_list ^ (GetSkill(i,skill_engineering)+GetSkill(i,skill_mechanical));

          result = BestFromListByList(ai_mechanics_defend[base],temp_list);
     end;


Function MaxNumWarVehiclesDefend(base);
     var time;
     begin
          case base of
               1: result = 3;
               2: result = 3;
               3: result = 2;
               4: result = 2;
               5: result = 3;
               6: result = 1;
               7: result = 0;
               8: result = 0;
          end;

     end;


//Construct combat vehicles and weapons for bunkers. Weapons for bunkers have highest priority.
//Construct a crane if we don't have one.
//Construct a cargo bay if we don't have one (but not if we are under attack).
//Since we do not build new buildings while under attack, don't try to build weapons that requires other factory
//extensions than the ones we have while under attack.
Every 0$1+0$0.6 do
     var i, temp, temp_value, temp_unit, temp_list, base, idle_factories, fact, b, construct_list;
     var vehicle_prod_delay, saved_construct_list, under_attack;
     begin
          vehicle_prod_delay = [0$0,0$0,0$0,0$0,0$0,0$0,0$0,0$0];
          saved_construct_list = [[],[],[],[],[],[],[],[]];


          repeat
          if ai_bases = 0 then
               exit;

          wait(0$1 mod (ai_bases+0));

          for base in ai_bases do
               begin
                    wait(0$1 div (ai_bases+0));

                    under_attack = BaseUnderAttack(base,-1);

                    if under_attack and ai_vehicles_defend[base] >= [0,1,2][difficulty]  then
                         begin
                              vehicle_prod_delay = Replace(vehicle_prod_delay,base,[1$15,0$45,0$30][difficulty]);
                         end;

                    idle_factories = [];
                    for i in ai_facts[base] do
                         if BuildingStatus(i) = bs_idle and IsOk(i) and GetBType(i) = b_factory then
                              begin
                                   b = true;
                                   if ai_facts_with_ext_rebuild_map >= i then
                                        if ai_facts_with_ext_rebuild_map[i] > 0 then
                                             b = false;

                                   if b then
                                        idle_factories = idle_factories ^ i;
                              end;

                    if producing_the_attack and base=2 then
                       idle_factories=idle_factories diff ai_facts[2][1];

                    if idle_factories = 0 then
                         continue;


                    //Check if any bunker needs a weapon
                    temp_value = false;
                    for i in ai_buildings_locations[base] do
                         if i[4] in [b_bunker,b_turret] then
                              begin
                                   temp_unit = HexInfo(i[1],i[2]);

                                   if GetBType(temp_unit) in [b_bunker,b_turret] and not IsConstructed(temp_unit) and GetBWeapon(temp_unit) = 0 {<> i[7]} then  //Alliance rebuilds Russian bunkers/turrets as American
                                        //If there are multiple weapon factories and more than one or another factory than
                                        //the factory getting the job invokes this part of the function the bunker/turret may
                                        //get the weapon placed several times, but since factories don't have a task list
                                        //there is no simple way to stop this. Better several times than never.
                                   begin
                                        ComPlaceWeapon(temp_unit, i[7]);

                                        temp_value = true;
                                        break;

                                   end;
                              end;

                    if temp_value then
                         continue;

{


                    //Construct a crane if we have none.
                    if base in [1,2,4] and difficulty > 1 then
                         begin
                              if ai_crane[base] = 0 and not ai_crane_under_construction[base] and tick - ai_crane_destroy_tick[base] >= [8$0,6$0,4$0][difficulty] then
                                   begin
                                        temp_list = [];

                                        case GetBaseNation(base) of
                                             nation_american: begin
                                                  temp_list = [us_medium_tracked,engine_siberite,control_manual,us_crane];

                                                  if ai_mechanics_defend[base] + ai_mechanics_attack[base] = 1 then  //We need someone to work in the factory
                                                       temp_list = Replace(temp_list,3,control_computer);

                                                  if base = 2 then
                                                       begin
                                                            temp_list = Replace(temp_list,1,us_medium_wheeled);  //Haven't got track extension
                                                            temp_list = Replace(temp_list,3,control_computer);  //Else repair is too strong - makes American attacks look futile
                                                       end;
                                             end;
                                             nation_russian: begin
                                                  temp_list = [ru_medium_tracked,engine_siberite,control_manual,ru_crane];

                                                  if ai_mechanics_defend[base] + ai_mechanics_attack[base] = 1 then  //We need someone to work in the factory
                                                       temp_list = Replace(temp_list,3,control_computer);
                                             end;
                                        end;

                                        if temp_list > 0 then
                                             begin
                                                  b = false;
                                                  if not under_attack then
                                                       b = true
                                                  else
                                                       begin
                                                            if CanFactConstructThis(idle_factories[1],temp_list[4],false) = 1 then  //Only build it if we can build it right now
                                                                 b = true;
                                                       end;

                                                  if b then
                                                       begin
                                                            b = FactConstruct(base,[idle_factories[1]],temp_list,false);
                                                            if b in [0,1] then
                                                                 begin
                                                                      if b = 1 then
                                                                           ai_crane_under_construction = Replace(ai_crane_under_construction,base,true);

                                                                      continue;
                                                                 end;
                                                       end;
                                             end;
                                   end;
                         end;
 }

                    //Construct war vehicles.
                    //If we are under attack then make sure we produce something we can construct without replacing
                    //factory extensions.


                    temp=0;                                     
                    for i in ai_facts[base] do
                        if GetWorkingProgress(i)>0 then
                           temp=temp+1;                         //include currently produced vehicles in the count

                    if ai_vehicles_defend[base] + temp < MaxNumWarVehiclesDefend(base) and ai_VehiclesLeft[base]>0 then  //"59" identifies behemoths
                         begin
                              if saved_construct_list[base] > 0 and not under_attack then
                                   begin
                                        construct_list = saved_construct_list[base];
                                   end
                              else begin
                              construct_list = [];

                              case base of
                                   2: begin
                                        //It's rather annoying that AvailableEngineList (and the other related functions) only work correctly if the required technology is also invented.

                                        temp_list = [ru_gun,ru_heavy_gun,ru_rocket_launcher,ru_rocket,ru_gatling_gun];

                                        if difficulty = 2 then
                                             temp_list = temp_list ^ ru_heavy_gun;  //Greater chance

                                        if difficulty = 3 then
                                             begin
                                                  temp_list = Replace(temp_list,1,ru_heavy_gun);
                                                  temp_list = Delete(temp_list,3);
                                             end;
                                        {if under_attack then
                                             temp_list = temp_list isect AvailableWeaponList(idle_factories[1]);

                                        if temp_list > 0 then
                                             temp_value = temp_list[Rand(1,temp_list+0)]
                                        else
                                             temp_value = ru_heavy_machine_gun;}  //You can always at least make ru_heavy_machine_gun
                                        temp_value = temp_list[Rand(1,temp_list+0)];

                                        {if difficulty = 1 and temp_value = ru_heavy_gun and Rand(1,2) = 1 then
                                             temp_value = ru_gun;}


                                        if Rand(1,[2,3,4][difficulty]) = 1 and not temp_value in [ru_heavy_gun,ru_rocket] then
                                             i = ru_medium_tracked
                                        else
                                             i = ru_heavy_tracked;

                                        {if under_attack and ( not i in AvailableChassisList(idle_factories[1]) or not engine_siberite in AvailableEngineList(idle_factories[1]) or not control_computer in AvailableControlList(idle_factories[1]) ) then
                                             construct_list = []
                                        else}
                                             construct_list = [i,engine_siberite,control_computer,temp_value];
                                   end;
                                   1: begin
                                        //It's rather annoying that AvailableEngineList (and the other related functions) only work correctly if the required technology is also invented.

                                        temp_list = [ru_gun,ru_heavy_gun,ru_rocket_launcher,ru_rocket,ru_gatling_gun];

                                        if difficulty = 2 then
                                             temp_list = temp_list ^ ru_heavy_gun;  //Greater chance

                                        if difficulty = 3 then
                                             begin
                                                  temp_list = Replace(temp_list,1,ru_heavy_gun);
                                                  temp_list = Delete(temp_list,3);
                                             end;
                                        {if under_attack then
                                             temp_list = temp_list isect AvailableWeaponList(idle_factories[1]);

                                        if temp_list > 0 then
                                             temp_value = temp_list[Rand(1,temp_list+0)]
                                        else
                                             temp_value = ru_heavy_machine_gun;}  //You can always at least make ru_heavy_machine_gun
                                        temp_value = temp_list[Rand(1,temp_list+0)];

                                        {if difficulty = 1 and temp_value = ru_heavy_gun and Rand(1,2) = 1 then
                                             temp_value = ru_gun;}


                                        if Rand(1,[2,3,4][difficulty]) = 1 and not temp_value in [ru_heavy_gun,ru_rocket] then
                                             i = ru_medium_tracked
                                        else
                                             i = ru_heavy_tracked;

                                        {if under_attack and ( not i in AvailableChassisList(idle_factories[1]) or not engine_siberite in AvailableEngineList(idle_factories[1]) or not control_computer in AvailableControlList(idle_factories[1]) ) then
                                             construct_list = []
                                        else}
                                             construct_list = [i,engine_siberite,control_computer,temp_value];
                                   end;

                              end;
                              end;

                              if construct_list > 0 then
                                   begin
                                        ComConstruct([idle_factories[1]],construct_list[1],construct_list[2],construct_list[3],construct_list[4]);

                                        {b = FactConstruct(base,[idle_factories[1]],construct_list,base = 3);

                                        case b of
                                             0: saved_construct_list = Replace(saved_construct_list,base,construct_list);
                                             1,2: saved_construct_list = Replace(saved_construct_list,base,[]);
                                        end;                                                                         }
                                   end;

                              //vehicle_prod_delay = Replace(vehicle_prod_delay,base,[1$0,0$30,0$15][difficulty]);  -> Disrupts the planned attack time
                              continue;
                         end;



               end;

          until false;
     end;
{Function FactConstruct(base,fact_list,construct_list,check_ar_control_tower_amount);
     var i, temp_list, map_list, val;
     begin
          if fact_list = 0 then
               begin
                    result = 2;
                    exit;
               end;

          result = CanFactConstructThis(fact_list[1],construct_list[4],true);
          if result = 1 then
               begin
                    if construct_list[2] = -1 then
                         ComPlaceWeapon(construct_list[1],construct_list[4])
                    else
                         ComConstruct(fact_list[1],construct_list[1],construct_list[2],construct_list[3],construct_list[4]);
               end;
 }
          {
          This is generic code for handling if there actually are more factories to choose among
          but CanFactConstructThis is a tough function and causes laggs so we won't call it more
          than strictly necessary.

          temp_list = [];
          map_list = [];
          for i in fact_list do
               begin
                    case CanFactConstructThis(i,construct_list[4],false) of
                         0: val = 2;
                         1: val = 1;
                         2: val = 3;
                    end;

                    temp_list = temp_list ^ val;
                    map_list = Replace(map_list,i,val);
               end;

          fact_list = SortListByListAsc(fact_list,temp_list);

          case map_list[fact_list[1]] of
               1: begin
                    if construct_list[2] = -1 then
                         ComPlaceWeapon(construct_list[1],construct_list[4])
                    else
                         ComConstruct(fact_list[1],construct_list[1],construct_list[2],construct_list[3],construct_list[4]);
               end;
               2: begin
                    CanFactConstructThis(fact_list[1],construct_list[4],true);
               end;
               3: begin
                    result = 2;
               end;
          end;
     end;     }
{Function CheckAndFixArControlTowerAmount(base,fact_list,going_to_build_a_vehicle_after_this_check);
     var temp_list;
     begin
          temp_list = UnitFilter(ai_vehicles_defend[base] ^ ai_vehicles_attack[base] ^ ai_taufield_vehicles[base] ^ ai_cargo_bay[base] ^ ai_crane[base],[f_control,control_remote]);

          if (  ( temp_list+0 >= ai_control_tower_vehicles[base] * 2 and going_to_build_a_vehicle_after_this_check ) ) //2 vehicles per control tower if possible
            and ai_control_tower_vehicles[base] < ai_vehicle_pullback_hexes[base]  //We have to be able to park them
            and ai_control_tower_vehicles[base] < ((ai_mechanics_defend[base] ^ ai_mechanics_attack[base]) diff ai_crane_driver[base]) - 1 then  //There must be a mechanic available. At least one in factory to produce
               begin
                    result = FactConstruct(base,fact_list,[ar_half_tracked,engine_siberite,control_manual,ar_control_tower],false);
               end
          else
               result = -1;
     end;     }
//Function to test if a factory can build a specified weapon and if not then possibly doing something about it
//(dismantling existing not necessary factory extensions and building requires one(s)).
//0 -> can't build it but we are gonna do something about it.
//1 -> can build it. Go ahead.
//2 -> can't built it and we can't do anything about it.
{Function CanFactConstructThis(fact,weapon,do_something_about_it);
     var base, i, temp_list, un, loc_list, btype_list_planned, btype_list_exists, temp_list_2, temp_list_3, all_needed, currently_needed;
     var fact_ext_replace_loc_list;
     begin
          base = FindBase(fact);
          if base = 0 then
               begin
                    result = 2;
                    exit;
               end;

          btype_list_planned = [];
          temp_list = [GetX(fact),GetY(fact)];

          for i = 1 to ai_buildings_locations[base]+0 do
               if ai_buildings_locations[base][i][4] in [b_ext_computer,b_ext_gun,b_ext_noncombat,b_ext_laser,b_ext_radar,b_ext_radio,b_ext_rocket,b_ext_siberium,b_ext_stitch,b_ext_track] then
                    if GetDistXY(ai_buildings_locations[base][i][1],ai_buildings_locations[base][i][2],temp_list[1],temp_list[2]) <= 4 then
                         begin
                              btype_list_planned = btype_list_planned ^ ai_buildings_locations[base][i][4];

                              un = HexInfo(ai_buildings_locations[base][i][1],ai_buildings_locations[base][i][2]);
                              if un > 0 and GetType(un) = unit_building and not IsConstructed(un) then
                                   btype_list_exists = btype_list_exists ^ GetBType(un);
                         end;

          currently_needed = [];

          case weapon of
               ar_cargo_bay,ru_cargo_bay,us_cargo_bay,ru_crane,us_crane,ru_bulldozer,us_bulldozer: begin //siberium extension for siberite engine
                    if ( ( b_ext_noncombat in btype_list_exists and b_ext_computer in btype_list_exists ) or ( GetBaseNation(base) = nation_arabian and b_ext_stitch in btype_list_exists ) ) and b_ext_siberium in btype_list_exists then
                         begin
                              result = 1;
                              exit;
                         end
                    else
                         begin
                              if GetBaseNation(base) = nation_arabian then
                                   begin
                                        if not b_ext_stitch in btype_list_planned then
                                             currently_needed = [b_ext_stitch];

                                        all_needed = [b_ext_stitch];
                                   end
                              else
                                   begin
                                        if not b_ext_noncombat in btype_list_planned then
                                             currently_needed = currently_needed ^ b_ext_noncombat;

                                        if not b_ext_computer in btype_list_planned then
                                             currently_needed = currently_needed ^ b_ext_computer;

                                        all_needed = [b_ext_noncombat,b_ext_computer];
                                   end;

                              if not b_ext_siberium in btype_list_planned then
                                   currently_needed = currently_needed ^ b_ext_siberium;

                              all_needed = all_needed ^ b_ext_siberium;
                         end;
               end;
               us_rocket_launcher,ru_rocket_launcher,ru_rocket,ar_rocket_launcher: begin
                    if b_ext_rocket in btype_list_exists then
                         begin
                              result = 1;
                              exit;
                         end
                    else
                         begin
                              if not b_ext_rocket in btype_list_planned then
                                   currently_needed = [b_ext_rocket];

                              all_needed = [b_ext_rocket];
                         end;
               end;
               us_light_gun,us_double_gun,us_heavy_gun,ru_gun,ru_heavy_gun,ar_light_gun,ar_gun: begin
                    if b_ext_gun in btype_list_exists then
                         begin
                              result = 1;
                              exit;
                         end
                    else
                         begin
                              if not b_ext_gun in btype_list_planned then
                                   currently_needed = [b_ext_gun];

                              all_needed = [b_ext_gun];
                         end;
               end;
               us_laser,us_double_laser: begin
                    if b_ext_laser in btype_list_exists then
                         begin
                              result = 1;
                              exit;
                         end
                    else
                         begin
                              if not b_ext_laser in btype_list_planned then
                                   currently_needed = [b_ext_laser];

                              all_needed = [b_ext_laser];
                         end;
               end;
               us_radar,ar_radar,ar_control_tower: begin
                    if b_ext_radar in btype_list_exists then
                         begin
                              result = 1;
                              exit;
                         end
                    else
                         begin
                              if not b_ext_radar in btype_list_planned then
                                   currently_needed = [b_ext_radar];

                              all_needed = [b_ext_radar];
                         end;
               end;
               ar_flame_thrower: begin
                    if b_ext_stitch in btype_list_exists then
                         begin
                              result = 1;
                              exit;
                         end
                    else
                         begin
                              if not b_ext_stitch in btype_list_planned then
                                   currently_needed = [b_ext_stitch];

                              all_needed = [b_ext_stitch];
                         end;
               end;
               ar_selfpropelled_bomb,ru_time_lapser: begin
                    if b_ext_siberium in btype_list_exists then
                         begin
                              result = 1;
                              exit;
                         end
                    else
                         begin
                              if not b_ext_siberium in btype_list_planned then
                                   currently_needed = [b_ext_siberium];

                              all_needed = [b_ext_siberium];
                         end;
               end;
               else begin
                    //No requirements
                    result = 1;
                    exit;
               end;
          end;

          if currently_needed = 0 then
               begin
                    result = 0;
               end
          else
               begin
                    if ai_engineers[base] = 0 then  //Only engineers can dismantle
                         begin
                              result = 2;
                              exit;
                         end;

                    //Determine the factory extension replace locations for this factory (if there are any).
                    fact_ext_replace_loc_list = [];
                    for i in ai_fact_extension_replace_locations[base] do
                         if GetDistUnitXY(fact,i[1],i[2]) <= 4 then
                              fact_ext_replace_loc_list = fact_ext_replace_loc_list ^ [i];

                    if fact_ext_replace_loc_list = 0 then
                         begin
                              result = 2;
                              exit;
                         end;

                    if not do_something_about_it then
                         exit;

                    temp_list_2 = [];
                    for i = 1 to ai_buildings_locations[base]+0 do
                         if [ai_buildings_locations[base][i][1],ai_buildings_locations[base][i][2]] in fact_ext_replace_loc_list then
                              temp_list_2 = temp_list_2 ^ i;

                    for i in temp_list_2 do
                         begin
                              if currently_needed = 0 then
                                   break;

                              if not ai_buildings_locations[base][i][4] in all_needed then
                                   begin
                                        //Dismantle the old factory extension and replace it with the right one.
                                        //Only dismantle finished buildings not to interfere with rebuild process.
                                        un = HexInfo(ai_buildings_locations[base][i][1],ai_buildings_locations[base][i][2]);
                                        if un > 0 and GetType(un) = unit_building and not IsConstructed(un) then
                                             begin
                                                  temp_list = Replace(ai_buildings_locations[base][i],4,currently_needed[1]);
                                                  temp_list = Replace(ai_buildings_locations[base],i,temp_list);
                                                  ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list);

                                                  temp_list = ai_dismantle_these_buildings[base] ^ un;
                                                  ai_dismantle_these_buildings = Replace(ai_dismantle_these_buildings,base,temp_list);

                                                  if ai_facts_with_ext_rebuild_map < fact then
                                                       ai_facts_with_ext_rebuild_map = Replace(ai_facts_with_ext_rebuild_map,fact,[]);

                                                  temp_list = ai_facts_with_ext_rebuild_map[fact] ^ [[ai_buildings_locations[base][i][1],ai_buildings_locations[base][i][2]]];
                                                  ai_facts_with_ext_rebuild_map = Replace(ai_facts_with_ext_rebuild_map,fact,temp_list);
                                             end;

                                        currently_needed = Delete(currently_needed,1);
                                   end;
                         end;

                    //If there are more factory extensions that may be replaced with other extensions then swap the building locations around
                    //for those locations in ai_buildings_locations so number 1 becomes the last, number 2 number 1, number 3 number 2 etc.
                    //This is to ensure that it isn't the factory extension on the same spot that is rebuild every time.
                    //In this particular mission it is useful since the Americans replace a lot of factory extensions. If both rebuild spots
                    //are replaced with computer ext and noncombat ext then only one of those will be rebuild over and over again each
                    //time they want to build a new weapon (laser/gun/rocket launcher). Not very optimal.
                    if temp_list_2 >= 2 then
                         begin
                              temp_list_3 = ai_buildings_locations[base];
                              temp_list = ai_buildings_locations[base][temp_list_2[1]];

                              for i = 2 to temp_list_2+0 do
                                   begin
                                        temp_list_3 = Replace(temp_list_3,temp_list_2[i-1], temp_list_3[temp_list_2[i]] );
                                   end;

                              temp_list_3 = Replace(temp_list_3,temp_list_2[temp_list_2+0],temp_list);
                              ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list_3);

                              //SortBuildingLocationsListInCorrectOrder(base);  //Just to make sure we don't screw something up. There should be no danger but just to be sure.
                         end;

                    if currently_needed = 0 then  //should be the case
                         result = 0
                    else
                         result = 2;
               end;
     end;
}

//If the player captures one of the computer's vehicles, then remove it from our variables-system.
On VehicleCaptured(new_identifier,old_identifier,old_side,capturing_unit) do
     var temp_list, base;
     begin
          if old_side = you then
               exit;

          for base in ai_bases do
               RemoveVehicleFromVariables(base,old_identifier);
     end;
//When a vehicle is constructed
On VehicleConstructed(vehicle,factory) do
     var side, temp_list, base, un;
     begin
          side = GetSide(vehicle);

          base = FindBase(vehicle);
          if base = 0 then
               exit;

          case GetWeapon(vehicle) of
               us_cargo_bay,ar_cargo_bay,ru_cargo_bay: begin
                    ai_cargo_bay = Replace(ai_cargo_bay,base,vehicle);
                    ai_cargo_bay_under_construction = Replace(ai_cargo_bay_under_construction,base,false);
               end;
               us_crane,ru_crane: begin
                    ai_crane = Replace(ai_crane,base,vehicle);
                    ai_crane_under_construction = Replace(ai_crane_under_construction,base,false);
               end;

               ru_time_lapser: begin
                    temp_list = ai_taufield_vehicles[base] ^ vehicle;
                    ai_taufield_vehicles = Replace(ai_taufield_vehicles,base,temp_list);
               end;

               else begin
                    temp_list = ai_vehicles_defend[base] ^ vehicle;
                    if producing_the_attack=0 or factory=ai_facts[2][2] then
                       ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);


                    ai_VehiclesLeft=replace(ai_VehiclesLeft,base,ai_VehiclesLeft[base]-1);
               end;
          end;
     end;
On BehemothConstructed(behe) do
     var side, base, temp_list, i;
     begin
          side = GetSide(behe);
          if side = you then
               exit;

          base = 0;
          for i in ai_bases do
               if GetX(behe) = ai_behemoth_construction_hex[i][1] and GetY(behe) = ai_behemoth_construction_hex[i][2] then
                    begin
                         base = i;
                         break;
                    end;

          if base = 0 then
               exit;

          temp_list = ai_behemoths[base] ^ behe;
          ai_behemoths = Replace(ai_behemoths,base,temp_list);
     end;




Export Function ResetVehicleAttackDelay(base);
     var time;
     begin

     end;
Export Function ResetHumanAttackDelay(base);
     begin
          //ai_human_attack_delay = Replace(ai_human_attack_delay,base, Rand(6$30,8$30) - 0$45 * difficulty );
          //Not used in this mission
     end;



Export Function FindNonhumansNearUnit(side,un,dist,only_dangerous);
     var weapon_list, temp_list, i, btype, b, val;
     begin
          temp_list = FilterAllUnits([[f_enemy,side],[f_not,[f_type,unit_human]],[f_dist,un,dist],[f_see,side]]);

          if only_dangerous then
               begin
                    result = DangerousUnits(temp_list);
               end
          else
               result = temp_list
     end;
Function DangerousUnits(list);
     var weapon_list, i, btype, b, val;
     begin
          weapon_list = [us_machine_gun,us_light_gun,us_gatling_gun,us_double_gun,us_heavy_gun,us_rocket_launcher,
                                   us_siberium_rocket,us_laser,us_double_laser,
                                   ar_multimissile_ballista,ar_light_gun,ar_double_machine_gun,ar_gatling_gun,
                                   ar_flame_thrower,ar_gun,ar_rocket_launcher,ar_selfpropelled_bomb,
                                   ru_heavy_machine_gun,ru_gatling_gun,ru_gun,ru_rocket_launcher,ru_heavy_gun,
                                   ru_rocket,ru_siberium_rocket,ru_time_lapser];

                    result = [];

                    for i in list do
                         case GetType(i) of
                              unit_human: begin
                                   if not IsOk(i) then  //IsOk does take stimulation drugs into consideration
                                        continue;

                                   result = result ^ i;
                              end;
                              unit_vehicle: begin
                                   if not IsOk(i) then
                                        continue;

                                   case GetControl(i) of
                                        control_manual,control_rider: begin
                                             if UnitsInside(i) = 0 then
                                                  continue;
                                        end;
                                        control_remote: begin
                                             if IsControledBy(i) = 0 then
                                                  continue;
                                        end;
                                        control_computer,control_apeman: begin
                                        end;
                                   end;

                                   if GetWeapon(i) in weapon_list then
                                        result = result ^ i;
                              end;
                              unit_building: begin
                                   if not IsOk(i) then
                                        continue;

                                   btype = GetBType(i);

                                   case btype of
                                        b_turret: begin
                                        end;
                                        b_bunker,b_breastwork,b_armoury,b_barracks,b_fort: begin
                                             if UnitsInside(i) = 0 then
                                                  continue;
                                        end;
                                        else
                                             continue;
                                   end;

                                   if btype in [b_bunker,b_turret] then
                                        if not GetBWeapon(i) in weapon_list then
                                             continue
                                        else
                                             begin
                                                  b = GetBase(i);
                                                  val = false;

                                                  if b = 0 then
                                                       val = true
                                                  else
                                                       if GetEnergy(b)[4] = 0 then
                                                            val = true;

                                                  if val then
                                                       continue;
                                             end;

                                   result = result ^ i;
                              end;
                         end;
     end;


//The computers's vehicles never seem to run completely out of fuel...
Every 0$5 do
     var base, i;
     begin
          for base in ai_bases do
               for i in ( ai_vehicles_defend[base] ^ ai_cargo_bay[base] ^ ai_crane[base] {^ ai_taufield_vehicles[base] ^ ai_implosion_vehicles[base] ^ ai_control_tower_vehicles[base] ^ ai_sib_bomb_vehicles[base]}) diff 0 do
                    if GetFuel(i) < 10 and GetEngine(i) = engine_combustion then
                         SetFuel(i,10);

          enable;
     end;



//Scientists
//If a scientist is wounded them pull him/her back. Else heal what people needs healing. Else stay inside a lab (if no lab is Ok then help
//construct buildings).
Every 0$1+0$0.7 do
     var side, i, scientists_list, temp_list, temp_unit, base, k, temp_list_3, area;
     begin

          repeat
          if ai_bases = 0 then
               exit;

          wait(0$1 mod (ai_bases+0));

          for base in ai_bases do
               begin
                    wait(0$1 div (ai_bases+0));

                    side = GetBaseSide(base);

                    scientists_list = ai_scientists[base] diff ai_heal_these_humans[base];


                    //Identify scientists who need healing
                    temp_list = ai_heal_these_humans[base];
                    i = 1;
                    while i <= scientists_list do
                         begin
                              if GetLives(scientists_list[i]) <= 700 then
                                   begin
                                        temp_list = temp_list ^ scientists_list[i];
                                        scientists_list = Delete(scientists_list,i);
                                        continue;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Update people who need healing. People at full HP or people inside a unit (relevant for soldiers and mechanics)
                    //will not receive healing.
                    temp_list = [];
                    for i in ai_heal_these_humans[base] do
                         if GetLives(i) < 1000 and IsInUnit(i) = 0 then
                              temp_list = temp_list ^ i;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Control people who need healing. Make 'em retreat to the human pullback hex.
                    for i in ai_heal_these_humans[base] do
                         begin
                              if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                                   ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                         end;


                    if scientists_list = 0 then
                         continue;


                    //Heal people. At least one scientist for each human if possible.
                    //Only heal people inside the base.
                    if ai_heal_these_humans[base] > 0 then
                         begin
                              area = GetBaseArea(base);
                              temp_list = UnitFilter(ai_heal_these_humans[base],[f_inarea,area]);

                              if temp_list > 0 then
                                   begin
                                        scientists_list = GetHumansOutOfUnits(scientists_list);


                                        temp_list_3 = [];

                                        repeat
                                             i = 1;
                                             while i <= temp_list do
                                                  begin
                                                       if scientists_list = 0 then
                                                            break;

                                                       temp_unit = NearestUnitToUnit(scientists_list,temp_list[i]);
                                                       ComHeal(temp_unit,temp_list[i]);
                                                       scientists_list = scientists_list diff temp_unit;

                                                       i = i + 1;
                                                  end;

                                        until scientists_list = 0;

                                        scientists_list = temp_list_3;
                                   end;
                         end;


                    //Enter and stay in lab
                    DistributeHumansToBuildings(base,scientists_list, UnitFilter(ai_labs[base],[[f_ok],[f_not,[f_constructed]]]),
                         class_scientistic,6,true,false);
               end;

          until false;
     end;









//Checking if a base personnel should start to run, if the base goes down. Only applies to 4 major ones.
//Triggered when a base's warehouse goes to red and there are no undamaged engineers to start repairing it immediately,
//or when half of the people in base get killed (all human units including apes)
every 0$1 trigger starting_people_count=8 {base_spawn_delay>9} do
var base,temp_list,i,temp,marking,basearea,buildings;
begin
     for base in ai_bases do
         if base in [1,2,3,4] then
         begin
              if isdead(ai_depot[base]) OR (not IsOk(ai_depot[base]) and unitfilter(ai_engineers[base],[f_lives,701])=0) OR unitfilter(ai_soldiers[base],[f_alive])+unitfilter(ai_engineers[base],[f_alive])+unitfilter(ai_mechanics_defend[base],[f_alive])+unitfilter(ai_scientists[base],[f_alive])+unitfilter(ai_apemen_engineers[base],[f_alive]) < starting_people_count[base]/2   then
              begin
                   temp_list=ai_soldiers[base]^ai_engineers[base]^ai_mechanics_defend[base]^ai_scientists[base]^ai_apemen_engineers[base];   //take all civilians out of buildings

                   comexitbuilding(temp_list diff ai_soldiers[base]);

                   ai_soldiers=replace(ai_soldiers,base,[]);
                   ai_engineers=replace(ai_engineers,base,[]);                            //"kill" the base
                   ai_mechanics_defend=replace(ai_mechanics_defend,base,[]);
                   ai_scientists=replace(ai_scientists,base,[]);
                   ai_apemen_engineers=replace(ai_apemen_engineers,base,[]);

                   ai_bases=ai_bases diff base;

                   //update the X on the map
                   marking = [base1_mark, base2_mark, base3_mark, base4_mark, base5_mark, base6_mark, base7_mark, base8_mark, base9_mark, base10_mark][base];
                   SetAreaMapShow(marking, 5);

                   //a little cheat to speed up the demolishing
                   basearea = [area_base1, area_base2, area_base3, area_base4, area_base5, area_base6, area_base7, area_base8, area_base9, area_base10][base];
                   buildings = filterunitsinarea(basearea,[[f_type,unit_building], [f_not,[f_btype,b_teleport]], [f_side,3]]);
                   SetBLevel(buildings,0);

                   ai_people_running=ai_people_running^[temp_list];                      //add all to the running list

                   case base of       //and their waypoints in format of: [start area, [hexes], number of base they are running to (0 if leaving the map)]
                        1: begin
                                if 2 in ai_bases then
                                   ai_people_running_path=ai_people_running_path^[ [area_base1, [[115,73],[129,83],[139,91],[149,100],[152,105],[163,118],[173,124],[181,124],[181,108],[176,99]], 2] ]
                                else
                                    ai_people_running_path=ai_people_running_path^[ [area_base1, [[86,74],[78,81],[76,86],[73,90],[67,95],[58,95],[48,94]], 0] ];
                           end;

                        2: begin
                           //if 1 in ai_bases and 3 in ai_bases then
                              ai_people_running_path=ai_people_running_path^[ [area_base2, [[181,108],[181,122],[171,122],[159,114],[147,104],[130,89],[118,83],[102,75],[94,69]], 1] ]
                           //else
                           //    ai_people_running_path=ai_people_running_path^[ [area_base2, [[187,89],[195,88],[202,87]], 0] ];
                           end;

                        3: begin
                                if 1 in ai_bases then
                                   ai_people_running_path=ai_people_running_path^[ [area_base3, [[121,122],[117,108],[112,96],[105,83],[100,74]], 1] ]
                                else
                                    ai_people_running_path=ai_people_running_path^[ [area_base3, [[86,118],[78,113],[67,107],[56,102],[61,104],[51,99],], 0] ];
                           end;

                        4: begin
                                if 3 in ai_bases then
                                   ai_people_running_path=ai_people_running_path^[ [area_base4, [[156,164],[145,164],[134,155],[122,144],[112,131]], 3] ]
                                else
                                    if 1 in ai_bases then
                                       ai_people_running_path=ai_people_running_path^[ [area_base4, [[156,164],[145,164],[134,155],[125,140],[123,125],[120,111],[112,96],[105,81],[97,71]], 1] ]
                                    else
                                        ai_people_running_path=ai_people_running_path^[ [area_base4, [[156,164],[145,164],[134,155],[122,144],[112,131],[90,121],[78,114],[66,105],[59,100],[50,98]], 0] ];
                           end;
                   end;

                   for i in temp_list do
                       settag(i,1);                                                     //keep individual tag, so they all run independently and not as a group


                   case rand(1,3) of
                        1: Say(Heike,'Esc_He1');
                        2: Say(Heike,'Esc_He2');
                        3: Say(Heike,'Esc_He3');
                   end;

              end;
         end
               //for other bases: delete them from ai_bases list if all people are killed
         else
             if unitfilter(ai_soldiers[base],[f_ok])+unitfilter(ai_engineers[base],[f_ok])+unitfilter(ai_mechanics_defend[base],[f_ok])+unitfilter(ai_scientists[base],[f_ok])+unitfilter(ai_apemen_engineers[base],[f_ok]) = 0 then
             begin
                  ai_bases=ai_bases diff base;

                  //update the X on the map
                   marking = [base1_mark, base2_mark, base3_mark, base4_mark, base5_mark, base6_mark, base7_mark, base8_mark, base9_mark, base10_mark][base];
                   SetAreaMapShow(marking, 5);

                   //a little cheat to speed up the demolishing
                   basearea = [area_base1, area_base2, area_base3, area_base4, area_base5, area_base6, area_base7, area_base8, area_base9, area_base10][base];
                   buildings = filterunitsinarea(basearea,[[f_type,unit_building], [f_not,[f_btype,b_teleport]], [f_side,3]]);
                   SetBLevel(buildings,0);
             end;


     if temp_people_running>0 then          //Same as above, only kept separately to prevent "resurrecting" bases which can cause bugs
     begin
          ai_people_running=ai_people_running^[temp_people_running[1][1]];

          for i in temp_people_running[1][1] do
              settag(i,1);         //reset the tag

          case temp_people_running[1][2] of
               1: begin
                       if 2 in ai_bases then
                          ai_people_running_path=ai_people_running_path^[ [area_base1, [[115,73],[129,83],[139,91],[149,100],[152,105],[163,118],[173,124],[181,124],[181,108],[176,99]], 2] ]
                       else
                           ai_people_running_path=ai_people_running_path^[ [area_base1, [[86,74],[78,81],[76,86],[73,90],[67,95],[58,95],[48,94]], 0] ];
                  end;

               2: ai_people_running_path=ai_people_running_path^[ [area_base2, [[181,108],[181,122],[171,122],[159,114],[147,104],[130,89],[118,83],[102,75],[94,69]], 1] ];

               3: begin
                       if 1 in ai_bases then
                          ai_people_running_path=ai_people_running_path^[ [area_base3, [[121,122],[117,108],[112,96],[105,83],[100,74]], 1] ]
                       else
                           ai_people_running_path=ai_people_running_path^[ [area_base3, [[86,118],[78,113],[67,107],[56,102],[61,104],[51,99],], 0] ];
                  end;
          end;

          temp_people_running=delete(temp_people_running,1);
     end;

     enable;
end;

//Controlling the escaping humans
every 0$1 trigger ai_people_running>0 do
var i,j,group,path,area,PathEnd,temp_hex,un,temp,temp_val;
begin
     for i=1 to ai_people_running do
     begin
          group=unitfilter(ai_people_running[i], [f_placed]);
          area=ai_people_running_path[i][1];
          path=ai_people_running_path[i][2];
          PathEnd=ai_people_running_path[i][3];

          {if unitfilter(group,[ [f_not, [f_or,[f_class,class_soldier],[f_class,class_bazooker]] ], [f_inarea,area], [f_ok] ])>0 then     //soldiers wait until all civilians leave the base
             group=group diff unitfilter(group,[f_or,[f_class,class_soldier],[f_class,class_bazooker]]);
          }
          for un in group do
              if islive(un)=0 then
                 group=group diff un
              else
                  begin
                       if GetTag(un)=path then
                          temp_val=2
                       else temp_val=5;
                       for j=1 to path do
                           if j=GetTag(un) then
                              if Getdistunitxy(un,path[j][1],path[j][2])>temp_val then
                              begin
                                   if getclass(un)=class_soldier or getclass(un)=class_bazooker then   //soldiers will attack the player along their way
                                      comagressivemove(un,path[j][1],path[j][2])
                                   else
                                       commovexy(un,path[j][1],path[j][2]);                          //civilians just run
                              end
                              else
                                  SetTag(un,j+1);

                       if GetTag(un)>path then
                          if PathEnd = 0 then
                             RemoveUnit(un)
                          else
                              begin                            //people who reach shelter will become a part of that base
                                   if not PathEnd in ai_bases then
                                   begin
                                        temp_people_running=temp_people_running ^ [[group,PathEnd]];
                                        ai_people_running=replace(ai_people_running,i,ai_people_running[i] diff group);
                                   end
                                   else

                                   begin
                                        case GetClass(un) of
                                             class_soldier:      ai_soldiers=replace(ai_soldiers,PathEnd,ai_soldiers[PathEnd] ^ un);
                                             class_bazooker:     ai_soldiers=replace(ai_soldiers,PathEnd,ai_soldiers[PathEnd] ^ un);
                                             class_engineer:     ai_engineers=replace(ai_engineers,PathEnd,ai_engineers[PathEnd] ^ un);
                                             class_mechanic:     ai_mechanics_defend=replace(ai_mechanics_defend,PathEnd,ai_mechanics_defend[PathEnd] ^ un);
                                             class_scientistic:  ai_scientists=replace(ai_scientists,PathEnd,ai_scientists[PathEnd] ^ un);
                                             class_apeman_engineer: ai_apemen_engineers=replace(ai_apemen_engineers,PathEnd,ai_apemen_engineers[PathEnd] ^ un);
                                        end;
                                        ai_people_running=replace(ai_people_running,i,ai_people_running[i] diff un);
                                   end;
                              end;
                  end;

          if group=0 then
          begin
               ai_people_running=delete(ai_people_running,i);
               ai_people_running_path=delete(ai_people_running_path,i);
               break;
          end;
     end;

     temp=0;
     for i in ai_people_running do
         if i>0 then
            temp=1;
     if temp=0 then
     begin
          ai_people_running=[];
          ai_people_running_path=[];
     end;

     enable;
end;





//Small AI of the two smallest bases
//Repair bulidings with apes (no healing if hurt)
//Escape through the teleport if the player critically damages some of the buildings
every 0$1 trigger base9_people>0 or base10_people>0 do
var turrets, depot, lab, plant, i;
begin
     for i in base9_people do
         if isdead(i) then
            base9_people=base9_people diff i;
     for i in base10_people do
         if isdead(i) then
            base10_people=base10_people diff i;


     if base9_people>0 then
     begin
          turrets=base9_buildings[4]^base9_buildings[5]^base9_buildings[6];
          depot=base9_buildings[2];
          lab=base9_buildings[1];
          plant=base9_buildings[3];

          if unitfilter(turrets,[f_ok])<2 or not isok(lab) or not isok(depot) or not isok(plant) then
          begin
               for i in base9_people do
                   if not isinarea(i,area_base2) then
                      commoveunit(i,hexinfo(228,164));
          end
          else
              begin
                   if unitfilter(base9_buildings,[f_not,[f_lives,1000]])>0 then
                   begin
                        for i in turrets^depot^lab^plant do
                            if GetLives(i)<1000 then
                            begin
                                 if unitfilter(base9_people,[[f_class,class_apeman_engineer],[f_inside]]) then
                                    comexitbuilding(unitfilter(base9_people,[f_class,class_apeman_engineer]))
                                 else
                                     comrepairbuilding(unitfilter(base9_people,[f_class,class_apeman_engineer]),i);
                                 break;
                            end;
                   end
                   else
                       comenterunit(unitfilter(base9_people,[f_class,class_apeman_engineer]),depot);

                   comenterunit(unitfilter(base9_people,[f_class,class_scientistic]),lab);
              end;


          if unitfilter(base9_people,[f_inarea,area_base2])=base9_people then
          begin
               if not 2 in ai_bases then
                  temp_people_running=temp_people_running ^ [[base9_people,2]]
               else

               begin
                    ai_scientists=replace(ai_scientists,2,ai_scientists[2] ^ unitfilter(base9_people,[f_class,class_scientistic]));
                    ai_apemen_engineers=replace(ai_apemen_engineers,2,ai_apemen_engineers[2] ^ unitfilter(base9_people,[f_class,class_apeman_engineer]));
               end;

               base9_people=[];
          end;
     end;


     if base10_people>0 then
     begin
          turrets=base10_buildings[4]^base10_buildings[5];
          depot=base10_buildings[2];
          lab=base10_buildings[1];
          plant=base10_buildings[3];

          if unitfilter(turrets,[f_ok])<1 or not isok(lab) or not isok(depot) or not isok(plant) then
          begin
               for i in base10_people do
                   if not isinarea(i,area_base1) then
                      commoveunit(i,hexinfo(74,141));
          end
          else
              begin
                   if unitfilter(base10_buildings,[f_not,[f_lives,1000]])>0 then
                   begin
                        for i in turrets^depot^lab^plant do
                            if GetLives(i)<1000 then
                            begin
                                 if unitfilter(base10_people,[[f_class,class_apeman_engineer],[f_inside]]) then
                                    comexitbuilding(unitfilter(base10_people,[f_class,class_apeman_engineer]))
                                 else
                                     comrepairbuilding(unitfilter(base10_people,[f_class,class_apeman_engineer]),i);
                                 break;
                            end;
                   end
                   else
                       comenterunit(unitfilter(base10_people,[f_class,class_apeman_engineer]),depot);

                   comenterunit(unitfilter(base10_people,[f_class,class_scientistic]),lab);
                   comenterunit(unitfilter(base10_people,[f_class,class_bazooker]),HexInfo(75,134));
              end;

          if unitfilter(base10_people,[f_inarea,area_base1])=base10_people then
          begin
               if not 1 in ai_bases then
                  temp_people_running=temp_people_running ^ [[base10_people,1]]
               else

               begin
                    ai_scientists=replace(ai_scientists,1,ai_scientists[1] ^ unitfilter(base10_people,[f_class,class_scientistic]));
                    ai_soldiers=replace(ai_soldiers,1,ai_soldiers[1] ^ unitfilter(base10_people,[f_class,class_bazooker]));
                    ai_apemen_engineers=replace(ai_apemen_engineers,1,ai_apemen_engineers[1] ^ unitfilter(base10_people,[f_class,class_apeman_engineer]));
               end;

               base10_people=[];
          end;
     end;

     enable;
end;



//New controling of the secondary destruction objective
every 0$1 trigger ai_bases < 8 do
var i, area, marking, main_amount, sec_amount, teleport, base_exempted, temp_list;
begin
     base_list = [1,2,3,4,5,6,7,8,9,10];
     area = [area_base1, area_base2, area_base3, area_base4, area_base5, area_base6, area_base7, area_base8, area_base9, area_base10];
     marking = [base1_mark, base2_mark, base3_mark, base4_mark, base5_mark, base6_mark, base7_mark, base8_mark, base9_mark, base10_mark];

     teleport = HexInfo(87,63); //the teleport that takes you to the lower right corner base.
     base_exempted = 0;

     main_amount = [2,1,1,0,1,1,1,0,1,1];
     sec_amount  = [6,8,4,3,3,2,2,1,1,1];

     repeat
           wait(0$5);

           if 9 in base_list and IsDead(teleport) and FilterUnitsInArea(area_base9,[[f_side,2],[f_ok]]) = 0 then
           begin
                base_exempted = 9;
                base9_people = [];
           end;

           for i in base_list do
               if i in ai_bases then
                  continue
               else
                   if unitfilter(mainbuildings, [f_inarea, area[i]]) <= main_amount[i] and unitfilter(minorbuildings, [f_inarea, area[i]]) <= sec_amount[i] then
                   begin
                        SetAreaMapShow(marking[i],0);
                        base_list = base_list diff i;
                        break;
                   end;

           temp_list = (base_list diff base_exempted);
     until temp_list = 0;

     if base_list = 0 then
        destruction_status = 1;

     base_list = 0;
     ChangeMissionObjectives('sec_destroy');
end;
