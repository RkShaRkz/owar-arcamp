
//NOTE TO THIS AI
//Although the work has been done to add a crane to the AI it is not fully operational because it was never tested.
//E.g. there are no checks if the crane can reach the building it should build/repair and a crane cannot move another
//blocking vehicle ("ai_vehicle_being_moved"). This has been implemented in the AI for mission 13a_cont.


//The computer has unlimited resources
Every 0$10 do
     var i, base;
     begin
          for i = 1 to ai_depot do
               if IsOk(ai_depot[i]) and GetSide(ai_depot[i]) <> you then
                    begin
                         base = GetBase(ai_depot[i]);

                         SetResourceType(base,mat_cans,300);
                         SetResourceType(base,mat_oil,300);
                         SetResourceType(base,mat_siberit,300);
                    end;

          enable;
     end;


//Russians receive a crane from another base if they don't have one.
{Every 0$10+0$0.6 do
     var temp_unit;
     begin
          if difficulty = 1 then
               exit;

          if ai_crane[3] > 0 then
               begin
                    enable;
                    exit;
               end;

          if FilterAllUnits([[f_side,russians],[f_type,unit_human]]) = 0 then
               exit;

          if ai_crane[3] = 0 then
               if not BaseUnderAttack(3,-1) then
                    begin
                         InitUc;
                         InitVc;

                         uc_side = russians;
                         uc_nation = nation_russian;
                         uc_direction = 0;
                         vc_engine = engine_siberite;
                         vc_control = control_computer;
                         vc_weapon = ru_crane;
                         vc_chassis = ru_medium_tracked;

                         temp_unit = CreateVehicle;

                         while not PlaceUnitArea(temp_unit,ru_enter_area,false) do
                              wait(0$1);

                         ai_crane = Replace(ai_crane,3,temp_unit);
                    end;

          enable;
     end;}


On UnitDestroyed(un) do
     var side, temp_list, base;
     begin
          if un = Heike then
               begin
                    ExclusiveOn;
                    Wait(0$1);
                    YouLost('HeikeDead');
                    ExclusiveOff;
               end;
          
          if un = Gensher then
               begin
                    ExclusiveOn;
                    Wait(0$1);
                    YouLost('GensherDead');
                    ExclusiveOff;
               end;

          if UnitFilter(original_gensher_people,[[f_class,class_scientistic],[f_lives,1]]) = 0 then
               begin
                    ExclusiveOn;
                    wait(0$1);
                    YouLost('GensherScisDead');
                    ExclusiveOff;
               end;


          for base in ai_bases do
               begin
                    temp_list = ai_captured_buildings[base] diff un;
                    ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
               end;

          side = GetSide(un);
          if side = you then
               exit;

          if side = you_alt and game_phase = 1 then
               begin
                    case GetType(un) of
                         unit_human: russian_interference_points = russian_interference_points + 3;
                         unit_building: russian_interference_points = russian_interference_points + 2;
                    end;
               end;


          //Update computer variables
          case GetType(un) of
               unit_human:
                    for base in ai_bases do
                         RemoveHumanFromVariables(base,un,true);
               unit_vehicle:
                    for base in ai_bases do
                         RemoveVehicleFromVariables(base,un);
               unit_building:
                    for base in ai_bases do
                         RemoveBuildingFromVariables(base,un);
          end;
     end;
Function RemoveBuildingFromVariables(base,building);
     var temp_list;
     begin
          temp_list = ai_all_buildings[base] diff building;
          ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

          temp_list = ai_excepted_buildings[base] diff building;
          ai_excepted_buildings = Replace(ai_excepted_buildings,base,temp_list);

          if building = ai_building_under_construction[base] then
               ai_building_under_construction = Replace(ai_building_under_construction,base,0);

          UpdateBuildingBasicVariables(base,building,false);
     end;
Function RemoveVehicleFromVariables(base,vehicle);
     var temp_list;
     begin
          //Global "basis" lists of vehicles. If a vehicle belong to this base it will be in one
          //and only one of these lists.
          if vehicle in ai_vehicles_defend[base] then
               begin
                    temp_list = ai_vehicles_defend[base] diff vehicle;
                    ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
               end;

          if vehicle in ai_vehicles_attack[base] then
               begin
                    temp_list = ai_vehicles_attack[base] diff vehicle;
                    ai_vehicles_attack = Replace(ai_vehicles_attack,base,temp_list);
               end;

          if vehicle = ai_cargo_bay[base] then
               begin
                    ai_cargo_bay = Replace(ai_cargo_bay,base,0);
               end;

          if vehicle = ai_crane[base] then
               begin
                    ai_crane = Replace(ai_crane,base,0);

                    if vehicle = ai_building_constructor[base] then
                         ai_building_constructor = Replace(ai_building_constructor,base,0);
               end;


          //Global "transient" lists of vehicles. Vehicles belonging to this base may be in one or more of these lists if
          //it performs a special or temporary job (you could say that the vehicle is in a special state).
          if vehicle in ai_vehicles_being_repaired[base] then
               begin
                    temp_list = ai_vehicles_being_repaired[base] diff vehicle;
                    ai_vehicles_being_repaired = Replace(ai_vehicles_being_repaired,base,temp_list);
               end;

          if vehicle in ai_refuel_vehicles_list[base] then
               begin
                    temp_list = ai_refuel_vehicles_list[base] diff vehicle;
                    ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);
               end;
     end;
Function RemoveHumanFromVariables(base,human,check_if_base_is_dead);
     var temp_list;
     begin
          //Global "basis" lists of humans. If a human belong to this base he/she will be in one
          //and only one of these lists.
          if human in ai_soldiers[base] then
               begin
                    temp_list = ai_soldiers[base] diff human;
                    ai_soldiers = Replace(ai_soldiers,base,temp_list);
               end;

          if human in ai_attacking_soldiers[base] then
               begin
                    temp_list = ai_attacking_soldiers[base] diff human;
                    ai_attacking_soldiers = Replace(ai_attacking_soldiers,base,temp_list);
               end;

          if human in ai_engineers[base] then
               begin
                    temp_list = ai_engineers[base] diff human;
                    ai_engineers = Replace(ai_engineers,base,temp_list);
               end;

          if human in ai_apemen_engineers[base] then
               begin
                    temp_list = ai_apemen_engineers[base] diff human;
                    ai_apemen_engineers = Replace(ai_apemen_engineers,base,temp_list);
               end;

          if human in ai_mechanics_defend[base] then
               begin
                    temp_list = ai_mechanics_defend[base] diff human;
                    ai_mechanics_defend = Replace(ai_mechanics_defend,base,temp_list);
               end;

          if human in ai_scientists[base] then
               begin
                    temp_list = ai_scientists[base] diff human;
                    ai_scientists = Replace(ai_scientists,base,temp_list);
               end;

          if human in ai_attacking_scientists[base] then
               begin
                    temp_list = ai_attacking_scientists[base] diff human;
                    ai_attacking_scientists = Replace(ai_attacking_scientists,base,temp_list);
               end;


          //Global "transient" lists of humans. Humans belonging to this base may be in one or more of these lists if
          //he/she performs a special or temporary job (you could say that the human is in a special state).
          if human in ai_heal_these_humans[base] then
               begin
                    temp_list = ai_heal_these_humans[base] diff human;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
               end;

          if human = ai_building_constructor[base] then
               ai_building_constructor = Replace(ai_building_constructor,base,0);

          if human in ai_retreating_attacking_humans[base] then
               begin
                    temp_list = ai_retreating_attacking_humans[base] diff human;
                    ai_retreating_attacking_humans = Replace(ai_retreating_attacking_humans,base,temp_list);
               end;

          //If there are no human units left the base is "dead"
          if check_if_base_is_dead then
               if ((ai_soldiers[base] ^ ai_attacking_soldiers[base] ^ ai_engineers[base] ^ ai_apemen_engineers[base] ^ ai_mechanics_defend[base] ^ ai_scientists[base] ^
                   ai_attacking_scientists[base]) diff 0) = 0 then
                    ai_bases = ai_bases diff base;
     end;


Function GetBaseArea(base);
     begin
          case base of
               1: result = Am_base;
               2: result = Gensher_base;
               3: result = Ru_base;
          end;
     end;
Function GetBaseSide(base);
     begin
          case base of
               1: result = americans;
               2: result = you_alt;
               3: result = russians;
          end;
     end;
Function GetBaseNation(base);
     begin
          case base of
               1: result = nation_american;
               2: result = nation_arabian;
               3: result = nation_russian;
          end;
     end;
Function FindBase(un);
     var base;
     begin
          for base in ai_bases do
               if IsInArea(un,GetBaseArea(base)) then
                    begin
                         result = base;
                         exit;
                    end;

          result = -1;
     end;


//Soldiers
//Keep them in bunkers/armouries. If that's not possible due to structure restrictions then help construct buildings. Else retreat to
//the center of the base.
Every 0$1 do
     var side, i, temp_list, buildings_list, soldiers_list, temp_unit, base, val, special_units, bunkers, under_attack, j;
     var am_snipers, temp_list_2;
     begin
          for base in ai_bases do
               begin
                    side = GetBaseSide(base);

                    soldiers_list = ai_soldiers[base];
                    under_attack := BaseUnderAttack(base,-1);

                    if base = 1 and under_attack and game_phase > 1 then
                         am_snipers = UnitFilter(ai_soldiers[base],[f_class,class_sniper])
                    else
                         am_snipers = [];

                    //Soldiers don't care if they are wounded if the base is under attack
                    if under_attack then
                         begin
                              temp_list = ai_heal_these_humans[base] diff (soldiers_list diff am_snipers);
                              ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);
                         end
                    else
                         begin
                              //Identify soldiers who need healing.
                              temp_list = ai_heal_these_humans[base];
                              for i in soldiers_list diff ai_heal_these_humans[base] do
                                   if GetLives(i) < 800 then
                                        temp_list = temp_list ^ i;
                              ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);

                              //Make soldiers needing healing go outside (else they won't be healed, cf. the healing
                              //code (controlling scientists) below.
                              for i in ai_heal_these_humans[base] do
                                   if i in soldiers_list then
                                        case GetType(IsInUnit(i)) of
                                             unit_vehicle: ComExitVehicle(i);
                                             unit_building: ComExitBuilding(i);
                                        end;

                              soldiers_list = soldiers_list diff ai_heal_these_humans[base];
                         end;
                         

                    //Identify snipers needing healing
                    temp_list = ai_heal_these_humans[base];
                    for i in am_snipers diff ai_heal_these_humans[base] do
                         if GetLives(i) <= 500 then
                              temp_list = temp_list ^ i;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);

                    am_snipers = am_snipers diff ai_heal_these_humans[base];


                    if soldiers_list = 0 then
                         continue;


                    //Snipers in the American base charges towards humans attacking from the
                    //south or east because here vehicles can do nothing.
                    if am_snipers > 0 then
                         begin
                              temp_list_2 = FilterAllUnits([[f_enemy,side],[f_type,unit_human],[f_inarea,am_sniper_defend_area]]);

                              if temp_list_2 > 0 then
                                   begin
                                        soldiers_list = soldiers_list diff am_snipers;

                                        //Charge!
                                        ComAgressiveMove(GetHumansOutOfUnits(am_snipers),GetX(temp_list_2[1]),GetY(temp_list_2[1]));
                                   end;
                         end;


                    //Find the bunkers which need to be occupied.
                    //Remember which soldiers are already inside a building.
                    //Don't occupy b_bunker if there is no power.
                    i = false;
                    if IsOk(ai_depot[base]) then
                         if GetEnergy(GetBase(ai_depot[base]))[4] > 0 then
                              i = true;

                    if i then
                         bunkers = ai_bunkers[base]
                    else
                         begin
                              bunkers = [];
                              for i in ai_bunkers[base] do
                                   if GetBType(i) = b_breastwork then
                                        bunkers = bunkers ^ i;
                         end;

                    buildings_list = [];
                    for i in UnitFilter(bunkers,[f_ok]) do
                         begin
                              temp_unit = UnitsInside(i);
                              if temp_unit = 0 then
                                   buildings_list = buildings_list ^ i
                              else soldiers_list = soldiers_list diff temp_unit;
                         end;


                    //The best soldiers should go to the bunkers. The rest in the armouries.
                    //If the base is under attack then just the nearest soldier.
                    //Gensher is always in the barracks.
                    soldiers_list = soldiers_list diff Gensher;
                    if buildings_list > 0 then
                         begin
                              if not under_attack then
                                   begin
                                        temp_list = [];
                                        for i in soldiers_list do
                                             temp_list = temp_list ^ GetSkill(i,skill_combat);
                                        soldiers_list = SortListByListDesc(soldiers_list,temp_list);
                                   end;

                              //Bazookers/snipers/mortar in armouries if possible.
                              special_units = UnitFilter(soldiers_list,[f_or,[f_class,class_bazooker],[f_class,class_sniper],[f_class,class_mortar]]);
                              soldiers_list = soldiers_list diff special_units;

                              for i = 1 to buildings_list do
                                   begin
                                        if soldiers_list = 0 then
                                             begin
                                                  if special_units = 0 then
                                                       break;

                                                  soldiers_list = special_units;
                                                  special_units = [];
                                             end;

                                        if not under_attack then
                                             temp_unit = soldiers_list[1]
                                        else
                                             begin
                                                  temp_list = [];
                                                  for j in soldiers_list do
                                                       temp_list = temp_list ^ GetDistUnits(j,buildings_list[i]);

                                                  temp_unit = WorstFromListByList(soldiers_list,temp_list);
                                             end;

                                        ComEnterUnit(temp_unit,buildings_list[i]);
                                        soldiers_list = soldiers_list diff temp_unit;
                                   end;
                         end
                    else
                         special_units = [];


                    if base = 2 then
                         soldiers_list = soldiers_list ^ UnitFilter([Gensher],[f_alive]);

                    //The rest enter armouries (if possible)
                    DistributeHumansToBuildings(base,soldiers_list ^ special_units, UnitFilter(ai_armouries[base],[[f_ok],[f_not,[f_constructed]]]),
                         false,6,true,true);
               end;

          enable;
     end;

//Make defending bazookers shoot time shifting rockets at their targets.
Every 0$1+0$0.1 do
     var side, base, i, temp_list, un1, temp_list_2, temp_value, val;
     begin


          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if base in [1,2] then
                         continue;

                    side = GetBaseSide(base);

                    for i in ai_soldiers[base] diff ai_heal_these_humans[base] do
                              if GetClass(i) = class_bazooker then
                                   begin
                                        //Don't bother the bazooker if he/she is about to fire a time shifting or space shifting rocket.
                                        temp_list = GetTaskList(i);
                                        if temp_list > 0 then
                                             if temp_list[1][1] = '&' or temp_list[1][1] = '%' then
                                                  continue;

                                        un1 = Attacks(i);
                                        if un1 > 0 and DangerousUnits([un1]) > 0 then
                                             begin
                                                  temp_list_2 = [GetX(un1),GetY(un1)];
                                                  temp_value = false;

                                                  for val in ai_time_shift_hexes[base] ^ ai_time_shift_hexes_underway[base] do  //don't send a rocket where someone else (probably) soon will
                                                       if GetDistXY(temp_list_2[1],temp_list_2[2],val[1],val[2]) <= ai_time_shift_data[side][2] then
                                                            begin
                                                                 temp_value = true;
                                                                 break;
                                                            end;

                                                  if not temp_value then  //not inside a time shifted area
                                                       begin
                                                            ComTimeShift(i,temp_list_2[1],temp_list_2[2]);

                                                            //The bazooker could die before he/she fires the rocket
                                                            //so we store the hex temporarily and check if the rocket actually is fired later.
                                                            temp_list = Insert(ai_time_shift_hexes_underway[base],1,[temp_list_2[1],temp_list_2[2],i,tick]);
                                                            ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);
                                                       end;
                                             end;
                                   end;
               end;

          until false;
     end;

//Make defending bazookers shoot space shifting rockets at their targets.
//Doing this intelligently is extremely difficult so we just shoot one rocket from time
//to time behind a target hoping we push the target closer to our base instead of
//pushing it away.
//Only bazookers inside barrackses.
Every 0$1+0$0.2 do
     var base, i, temp_list, un1, temp_list_2, temp_value;
     var shooting_delay;
     begin
          shooting_delay = [0$0,0$0,0$0];

          if not yashin_alive then
               exit;

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if base in [1,2] then
                         continue;

                    if shooting_delay[base] > 0$0 then
                         begin
                              shooting_delay = Replace(shooting_delay,base, shooting_delay[base] - 0$1 );
                              continue;
                         end;

                    if Rand(1,15) > 1 then
                         continue;

                    temp_list = [];
                    for i in ai_soldiers[base] diff ai_heal_these_humans[base] do
                         if IsInUnit(i) in ai_armouries[base] then
                              temp_list = temp_list ^ i;

                    for i in temp_list do
                              if GetClass(i) = class_bazooker then
                                   begin
                                        //Don't bother the bazooker if he/she is about to fire a time shifting or space shifting rocket.
                                        temp_list = GetTaskList(i);
                                        if temp_list > 0 then
                                             if temp_list[1][1] = '&' or temp_list[1][1] = '%' then
                                                  continue;
                                        
                                        un1 = Attacks(i);
                                        if un1 > 0 and not IsInArea(un1,GetBaseArea(base)) then
                                             begin
                                                  //Shoot just behind the target. We are higher elevated so this should be possible
                                                  temp_list_2 = [GetX(un1),GetY(un1)];
                                                  temp_value = AI_GetTurnDirection(GetX(i),GetY(i),temp_list_2[1],temp_list_2[2]);
                                                  ComSpaceShift(i, ShiftX(temp_list_2[1],temp_value,1), ShiftY(temp_list_2[2],temp_value,1) );

                                                  shooting_delay = Replace(shooting_delay,base,0$5);

                                                  break;
                                             end;
                                   end;
               end;

          until false;
     end;
//Function which returns the direction in which the unit one the specified hex ([x1,y1]) would turn if it was asked to face
//the other specified hex ([x,y]) (ComTurnXY)
Function AI_GetTurnDirection(x1,y1,x,y);
     var dist_1, dist_2, b, temp_dist, dir;
     begin
          if not ValidHex(x1,y1) or not ValidHex(x,y) then
               begin
                    result = -1;
                    exit;
               end;

          dist_1 = GetDistXY(x1,y1,x,y);
          dist_2 = 99999;

          //this is the algorithm
          for b = 0 to 5 do
               begin
                    temp_dist = GetDistXY(ShiftX(x1,b,dist_1),ShiftY(y1,b,dist_1),x,y);
                    if temp_dist < dist_2 then
                         begin
                              dist_2 = temp_dist;
                              dir = b;
                         end;
               end;

          result = dir;
     end;


//Function which sends humans to buildings, distributing them equally and changing their class (if specified).
//The humans there wasn't space for will stay near the pullback hex.
//base - the base calling the function.
//human_list - list of humans
//building_list - list of buildings
//change_to_this_class - class to change to when the human has entered the building (false if none)
//building_capacity - the number of humans the building can handle
//help_building - boolean. If true then units which could not enter a building will help building the building under
//construction (if any).
//aggressive_pullback - boolean. True if movement to pullback hex should be aggressive (else just normal move)
//under_attack - boolean. True if we are under attack.
Function DistributeHumansToBuildings(base,human_list,building_list,change_to_this_class,building_capacity,help_building,aggressive_pullback);
     var i, temp_list, val, temp_unit, area, special_un_count, counter, k, under_attack;
     begin
          if human_list = 0 then
               exit;

          area = GetBaseArea(base);
          under_attack = BaseUnderAttack(base,-1);

          //If this is soldiers going to armouries then special units
          //should be distributed equally among the armouries.
          if not GetClass(human_list[1]) in [class_engineer,class_apeman_engineer,class_mechanic,class_scientistic] and building_list > 0 then
               begin
                    val = 0;
                    for i in human_list do
                         if GetClass(i) in [class_sniper,class_mortar,class_bazooker] then
                              val = val + 1;

                    special_un_count = val div (building_list+0);
               end
          else
               special_un_count = 0;

          val = building_list+0;
          while val > 0 and human_list > 0 do
               begin
                    //Rearrange "human_list" so humans already inside this building goes
                    //first in the list. Else this algorithm could pick 6 people for a barracks
                    //let's say 2 outside and 4 actually in the barracks but there is a 5. unit
                    //inside the barracks already which is further down "human_list"- the result is
                    //one human can't get in because there isn't space.
                    temp_list = [];
                    for i in human_list do
                         if IsInUnit(i) = building_list[val] then
                              temp_list = temp_list ^ i;
                    human_list = temp_list ^ (human_list diff temp_list);

                    //Distribute humans equally to the buildings
                    counter = 0;
                    temp_list = [];
                    for i = 1 to human_list div val do
                         begin
                              if i > building_capacity then
                                   break;

                              if special_un_count = 0 then
                                   begin
                                        temp_list = temp_list ^ human_list[1];
                                        human_list = Delete(human_list,1);
                                   end
                              else
                                   if counter = special_un_count then
                                        begin
                                             //Search for a non-special unit in the list.
                                             temp_unit = 0;
                                             for k = 1 to human_list do
                                                  if not GetClass(human_list[k]) in [class_sniper,class_mortar,class_bazooker] then
                                                       begin
                                                            temp_unit = k;
                                                            break;
                                                       end;

                                             if temp_unit = 0 then
                                                  temp_unit = 1;

                                             temp_list = temp_list ^ human_list[temp_unit];
                                             human_list = Delete(human_list,temp_unit);
                                        end
                                   else
                                        begin
                                             counter = counter + 1;

                                             //Search for a special unit in the list.
                                             temp_unit = 0;
                                             for k = 1 to human_list do
                                                  if GetClass(human_list[k]) in [class_sniper,class_mortar,class_bazooker] then
                                                       begin
                                                            temp_unit = k;
                                                            break;
                                                       end;

                                             if temp_unit = 0 then
                                                  temp_unit = 1;

                                             temp_list = temp_list ^ human_list[temp_unit];
                                             human_list = Delete(human_list,temp_unit);
                                        end;
                         end;

                    for i in temp_list do
                         begin
                              temp_unit = IsInUnit(i);
                              if temp_unit <> building_list[val] then
                                   case GetType(IsInUnit(i)) of
                                        unit_vehicle: ComExitVehicle(i);
                                        unit_building: ComExitBuilding(i);
                                        else
                                             begin
                                                  if IsInArea(i,area) or not aggressive_pullback then
                                                       ComEnterUnit(i,building_list[val])
                                                  else
                                                       ComAgressiveMove(i,GetX(building_list[val]),GetY(building_list[val]));

                                                  if change_to_this_class > 0 then
                                                       begin
                                                            if GetClass(i) <> change_to_this_class and GetNation(i) <> nation_nature then  //ignore apemen
                                                                 if not ( change_to_this_class in [class_sniper,class_mortar,class_bazooker] and not GetBType(building_list[val]) in [b_barracks,b_fort] ) then  //Will change class to sniper/mortar/bazooker even if the building is only an armoury
                                                                      AddComChangeProfession(i,change_to_this_class);
                                                       end;
                                             end;
                                   end;
                         end;

                    val = val - 1;
               end;

          if human_list > 0 then
               if ai_building_under_construction[base] > 0 and help_building and not under_attack then
                    begin
                         for i in GetHumansOutOfUnits(human_list) do
                              SetTaskList(i,[['h',0,0,ai_building_under_construction[base],0,0,0]]);  //'h' is "help building building"
                    end
               else
                    for i in GetHumansOutOfUnits(human_list) do
                         if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                              if aggressive_pullback then
                                   ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2])
                              else
                                   ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
     end;


//Engineers and Apemen Engineers
//These are the priorities (descending order):
//- If an engineer is hurt, them pull him/her back for healing.
//- Reparation of red buildings
//- Reparation of any building
//- Reconstruct destroyed buildings if necessary, but only if the base is not under attack (only engineers)
//- Gather crates in the vicinity of the base, but for engineers only if the base is not under attack.
//- Return to and stay inside the depot (if possible).
Every 0$1 do
     var side, i, engineers_list, temp_list, buildings_list, temp_unit, away_dist, temp_list_2, base, apemen_engineers_list;
     var humans_list, crane_usable, b_value, k;
     var crane_being_repaired;
     begin
          crane_being_repaired = false;  //If crane is being repaired by mechanics

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    side = GetBaseSide(base);

                    engineers_list = ai_engineers[base] diff ai_heal_these_humans[base];
                    apemen_engineers_list = ai_apemen_engineers[base] diff ai_heal_these_humans[base];
                    

                    //Identify engineers who need healing
                    temp_list = ai_heal_these_humans[base];
                    humans_list = engineers_list ^ apemen_engineers_list;
                    i = 1;
                    while i <= humans_list do
                         begin
                              if GetLives(humans_list[i]) <= 700 then
                                   begin
                                        temp_list = temp_list ^ humans_list[i];
                                        engineers_list = engineers_list diff humans_list[i];
                                        apemen_engineers_list = apemen_engineers_list diff humans_list[i];
                                        humans_list = Delete(humans_list,i);
                                        i = i - 1;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);

                    //Crane
                    crane_usable = false;
                    if ai_crane[base] > 0 then
                         if GetLives(ai_crane[base]) <= 500 or ( crane_being_repaired and GetLives(ai_crane[base]) < 1000 ) then
                              begin
                                   crane_being_repaired = true;

                                   //Code for defending mechanics below will take care of repairing the crane
                                   if GetDistUnitXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 6 then
                                        ComMoveXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                              end
                         else
                              begin
                                   crane_usable = true;
                                   crane_being_repaired = false;
                              end;

                    if engineers_list = 0 and apemen_engineers_list = 0 and not crane_usable then
                         continue;


                    //Recapture buildings if necessary. Depots first. Here we assume the player hasn't changed the base
                    //of the captured building.
                    //Apemen engineers and cranes can't capture buildings.
                    temp_list_2 = UnitFilter(engineers_list,[f_class,class_engineer]);
                    if ai_captured_buildings[base] > 0 and temp_list_2 > 0 then
                         begin
                              temp_list = [];
                              for i in ai_captured_buildings[base] do
                                   if GetBType(i) in [b_depot,b_warehouse] then
                                        temp_list = temp_list ^ 1
                                   else
                                        temp_list = temp_list ^ 0;

                              temp_list = SortListByListDesc(ai_captured_buildings[base],temp_list);

                              //Normal "ComEnterUnit" for capturing doesn't work for buildings which can't be entered (e.g. power plants).
                              temp_list_2 = GetHumansOutOfUnits(temp_list_2);
                              if temp_list_2 > 0 then
                                   begin
                                        temp_list_2 = SortListByListDesc(temp_list_2, temp_list_2);  //To ensure we take the same unit each time
                                        SetTaskList(temp_list_2[1],[['e',GetX(temp_list[1]),GetY(temp_list[1]),temp_list[1],0,0,0]]);
                                        engineers_list = engineers_list diff temp_list_2[1];
                                   end;

                              if engineers_list = 0 and apemen_engineers_list = 0 then
                                   continue;
                         end;


                    //Find buildings which need to be repaired. At least one engineer for each if possible.
                    i = 1;
                    buildings_list = [];
                    repeat
                         case i of
                              1: buildings_list = UnitFilter(ai_all_buildings[base],[f_not,[f_ok]]);  //If building is dead then it won't be part of ai_all_buildings
                              2: buildings_list = UnitFilter(ai_all_buildings[base],[f_not,[f_lives,1000]]);
                         end;

                         i = i + 1;
                    until buildings_list > 0 or i > 2;

                    if buildings_list > 0 then
                         begin
                              humans_list = engineers_list ^ apemen_engineers_list;
                              humans_list = GetHumansOutOfUnits(humans_list);

                              if crane_usable then
                                   begin
                                        humans_list = humans_list ^ ai_crane[base];
                                        crane_usable = false;
                                   end;

                              repeat
                                   i = 1;
                                   while i <= buildings_list do
                                        begin
                                             if humans_list = 0 then
                                                  break;

                                             temp_unit = NearestUnitToUnit(humans_list,buildings_list[i]);
                                             ComRepairBuilding(temp_unit,buildings_list[i]);

                                             humans_list = humans_list diff temp_unit;
                                             engineers_list = engineers_list diff temp_unit;
                                             apemen_engineers_list = apemen_engineers_list diff temp_unit;

                                             i = i + 1;
                                        end;

                              until humans_list = 0;

                              continue;
                         end;


                    if not BaseUnderAttack(base,-1) then
                         begin
                              //Reconstruct buildings if any has been destroyed.
                              //First check if a building is already being constructed - then build that one first.
                              //Upgrading buildings can be hard if the building is working or something, so check if the
                              //building is actually under construction (or being upgraded) - if not then reset the
                              //relevant variables.
                              if ai_building_under_construction[base] > 0 then
                                   if BuildingStatus(ai_building_under_construction[base]) = bs_build then
                                        begin
                                             temp_list_2 = GetHumansOutOfUnits(engineers_list ^ apemen_engineers_list);

                                             if crane_usable then
                                                  temp_list_2 = temp_list_2 ^ ai_crane[base];

                                             for i in temp_list_2 do
                                                  ComRepairBuilding(i,ai_building_under_construction[base]);

                                             continue;
                                        end
                                   else
                                        begin
                                             ComCancel(ai_building_under_construction[base]);  //To make sure upgrade of building is possible
                                             ai_building_under_construction = Replace(ai_building_under_construction,base,0);
                                        end;

                              if ai_all_buildings[base] - ai_excepted_buildings[base] < ai_buildings_locations[base] or ai_upcoming_building_data[base] > 0 then
                                   begin
                                        //Decide which building to construct. We take the first building in the location list which is
                                        //arranged in prioritated order.
                                        if ai_upcoming_building_data[base] = 0 then
                                             begin
                                                  temp_list = [];
                                                  for i in ai_buildings_locations[base] do
                                                       if GetBType(HexInfo(i[1],i[2])) = -1 then  //no building on the spot
                                                            begin
                                                                 temp_list = i;
                                                                 break;
                                                            end;
                                                                        
                                                  if temp_list > 0 then //Not necessarily the case (one of our buildings could have been captured)
                                                       begin
                                                            //If the building is a bunker then check if we have enough soldiers
                                                            //to occupy it. If not then build a turret instead.
                                                            if temp_list[4] = b_bunker and GetBaseNation(base) in [nation_american,nation_russian] then
                                                                 begin
                                                                      k = 0;

                                                                      for i in ai_buildings_locations[base] do
                                                                           if i[4] in [b_breastwork,b_bunker,b_armoury,b_barracks,b_fort] then
                                                                                k = k + 1;

                                                                      if k > ai_soldiers[base] then
                                                                           begin
                                                                                //Permanently change this to a turret. It would be nice if it would still be built as a
                                                                                //bunker if soldiers are added later but that's a rare case and adds unnecessary complexity.
                                                                                for i = 1 to ai_buildings_locations[base] do
                                                                                     if ai_buildings_locations[base][i] = temp_list then
                                                                                          begin
                                                                                               temp_list_2 = Replace(ai_buildings_locations[base][i],4,b_turret);
                                                                                               temp_list_2 = Replace(ai_buildings_locations[base],i,temp_list_2);
                                                                                               ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list_2);

                                                                                               break;
                                                                                          end;

                                                                                temp_list = Replace(temp_list,4,b_turret);
                                                                           end;
                                                                 end;

                                                            ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,temp_list);
                                                       end;
                                             end;


                                        if ai_upcoming_building_data[base] > 0 then
                                             begin
                                                  //Find the best engineer to construct the building
                                                  if ai_building_constructor[base] = 0 then
                                                       begin
                                                            temp_list_2 = UnitFilter(ai_engineers[base],[f_class,class_engineer]);

                                                            if crane_usable then
                                                                 temp_list_2 = temp_list_2 ^ ai_crane[base];

                                                            if temp_list_2 > 0 then
                                                                 begin
                                                                      temp_list = [];
                                                                      for i in temp_list_2 do
                                                                           temp_list = temp_list ^ GetSkill(i,skill_engineering);
                                                                      ai_building_constructor = Replace(ai_building_constructor,base, BestFromListByList(temp_list_2,temp_list) );
                                                                 end;
                                                       end;

                                                  if ai_building_constructor[base] > 0 and ( ai_building_constructor[base] in engineers_list or ( ai_building_constructor[base] = ai_crane[base] and crane_usable ) ) then
                                                       begin
                                                            engineers_list = engineers_list diff ai_building_constructor[base];

                                                                           //Build/upgrade the building
                                                                           case GetType(IsInUnit(ai_building_constructor[base])) of
                                                                                unit_building: ComExitBuilding(ai_building_constructor[base]);
                                                                                unit_vehicle: ComExitVehicle(ai_building_constructor[base]);
                                                                                else
                                                                                case GetBType(HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2])) of
                                                                                     -1: begin
                                                                                          case ai_upcoming_building_data[base][4] of
                                                                                               b_warehouse: i = b_depot;
                                                                                               b_factory: i = b_workshop;
                                                                                               b_lab_half,b_lab_full: i = b_lab;
                                                                                               b_barracks: i = b_armoury;
                                                                                               else i = ai_upcoming_building_data[base][4];
                                                                                          end;

                                                                                          //ComBuild(ai_building_constructor[base],i,ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],ai_upcoming_building_data[base][3]);
                                                                                          //ComBuild doesn't work with cranes even though their task list looks the same after having been given the order.
                                                                                          //The task list order looks like this:
                                                                                          {
                                                                                          SetTaskList(crane,[['B',x,y,0,value_from_below,dir,0]]);
                                                                                          b_depot (0) = (ru) 64, (am) 1, (ar) 34
                                                                                          b_workshop (2) = (ru) 68, (am) 5, (ar) 38
                                                                                          b_armoury (4) = (ru) 66, (am) 3, (ar) 36
                                                                                          b_lab (6) = (ru) 77, (am) 17, (ar) 48
                                                                                          b_oil_power (26) = (ru) 85, (am) 25, (ar) 56
                                                                                          b_solar_power (27) = (am) 26, (ar) 57
                                                                                          b_siberite_power (28) = (ru) 86, (am) 27, (ar) 58
                                                                                          b_oil_mine (29) = (ru) 87, (am) 28, (ar) 59
                                                                                          b_siberite_mine (30) = (ru) 88, (am) 29, (ar) 60
                                                                                          b_breastwork (31) = (ru) 89, (am) 30, (ar) 61
                                                                                          b_bunker (32) = (ru) 90, (am) 31, (ar) 62
                                                                                          b_turret (33) = (ru) 91, (am) 32
                                                                                          b_teleport (34) = (ru) 92
                                                                                          b_control_tower (36) = (am) 94
                                                                                          b_ext_track (16) = (ru) 70, (am) 7, (ar) 40
                                                                                          b_ext_gun (17) = (ru) 71, (am) 8, (ar) 41
                                                                                          b_ext_rocket (18) = (ru) 72, (am) 9, (ar) 42
                                                                                          b_ext_noncombat (19) = (ru) 73, (am) 10
                                                                                          b_ext_radar (20) = (am) 11, (ar) 44
                                                                                          b_ext_siberium (21) = (ru) 75, (am) 12, (ar) 45
                                                                                          b_ext_stitch (23) = (ar) 43
                                                                                          b_ext_computer (24) = (ru) 76, (am) 15
                                                                                          b_ext_laser (25) = (am) 16
                                                                                          }
                                                                                          case i of
                                                                                               b_depot: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 64;
                                                                                                         nation_american: b_value = 1;
                                                                                                         nation_arabian: b_value = 34;
                                                                                                    end;
                                                                                               end;
                                                                                               b_workshop: begin
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 68;
                                                                                                         nation_american: b_value = 5;
                                                                                                         nation_arabian: b_value = 38;
                                                                                                    end;
                                                                                               end;
                                                                                               b_armoury: begin             
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 66;
                                                                                                         nation_american: b_value = 3;
                                                                                                         nation_arabian: b_value = 36;
                                                                                                    end;
                                                                                               end;
                                                                                               b_lab: begin            
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 77;
                                                                                                         nation_american: b_value = 17;
                                                                                                         nation_arabian: b_value = 48;
                                                                                                    end;
                                                                                               end;
                                                                                               b_oil_power: begin          
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 85;
                                                                                                         nation_american: b_value = 25;
                                                                                                         nation_arabian: b_value = 56;
                                                                                                    end;
                                                                                               end;
                                                                                               b_solar_power: begin         
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 26;
                                                                                                         nation_arabian: b_value = 57;
                                                                                                    end;
                                                                                               end;
                                                                                               b_siberite_power: begin       
                                                                                                   case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 86;
                                                                                                         nation_american: b_value = 27;
                                                                                                         nation_arabian: b_value = 58;
                                                                                                    end;
                                                                                               end;
                                                                                               b_oil_mine: begin           
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 87;
                                                                                                         nation_american: b_value = 28;
                                                                                                         nation_arabian: b_value = 59;
                                                                                                    end;
                                                                                               end;
                                                                                               b_siberite_mine: begin      
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 88;
                                                                                                         nation_american: b_value = 29;
                                                                                                         nation_arabian: b_value = 60;
                                                                                                    end;
                                                                                               end;
                                                                                               b_breastwork: begin         
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 89;
                                                                                                         nation_american: b_value = 30;
                                                                                                         nation_arabian: b_value = 61;
                                                                                                    end;
                                                                                               end;
                                                                                               b_bunker: begin       
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 90;
                                                                                                         nation_american: b_value = 31;
                                                                                                         nation_arabian: b_value = 62;
                                                                                                    end;
                                                                                               end;
                                                                                               b_turret: begin       
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 91;
                                                                                                         nation_american: b_value = 32;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_teleport: begin      
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 92;
                                                                                                         nation_american: b_value = -7;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_control_tower: begin   
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 94;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_track: begin     
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 70;
                                                                                                         nation_american: b_value = 7;
                                                                                                         nation_arabian: b_value = 40;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_gun: begin  
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 71;
                                                                                                         nation_american: b_value = 8;
                                                                                                         nation_arabian: b_value = 41;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_rocket: begin       
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 72;
                                                                                                         nation_american: b_value = 9;
                                                                                                         nation_arabian: b_value = 42;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_noncombat: begin      
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 73;
                                                                                                         nation_american: b_value = 10;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_radar: begin        
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 11;
                                                                                                         nation_arabian: b_value = 44;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_siberium: begin     
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 75;
                                                                                                         nation_american: b_value = 12;
                                                                                                         nation_arabian: b_value = 45;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_stitch: begin  
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = -7;
                                                                                                         nation_arabian: b_value = 43;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_computer: begin             
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = 76;
                                                                                                         nation_american: b_value = 15;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               b_ext_laser: begin          
                                                                                                    case GetNation(ai_building_constructor[base]) of
                                                                                                         nation_russian: b_value = -7;
                                                                                                         nation_american: b_value = 16;
                                                                                                         nation_arabian: b_value = -7;
                                                                                                    end;
                                                                                               end;
                                                                                               else
                                                                                                    b_value = -42;
                                                                                          end;

                                                                                          SetTaskList(ai_building_constructor[base],[['B',ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2],0,b_value,ai_upcoming_building_data[base][3],0]]);
                                                                                     end;
                                                                                     b_depot: begin
                                                                                          ComUpgrade(ai_depot[base]);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,ai_depot[base]);
                                                                                     end;
                                                                                     b_workshop: begin
                                                                                          temp_unit = HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]);
                                                                                          ComUpgrade(temp_unit);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,temp_unit);
                                                                                     end;
                                                                                     b_lab,b_lab_half: begin
                                                                                          temp_unit = HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]);

                                                                                          if ai_upcoming_building_data[base][5] <> b_lab_basic and not ai_upcoming_building_data[base][5] in [GetLabKind(temp_unit,1),GetLabKind(temp_unit,2)] then
                                                                                               ComUpgradeLab(temp_unit,ai_upcoming_building_data[base][5])
                                                                                          else
                                                                                               if ai_upcoming_building_data[base][6] <> b_lab_basic then
                                                                                                    ComUpgradeLab(temp_unit,ai_upcoming_building_data[base][6])
                                                                                               else  //should never happen
                                                                                                    begin
                                                                                                         ai_building_constructor = Replace(ai_building_constructor,base,0);
                                                                                                         ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);
                                                                                                    end;

                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,temp_unit);
                                                                                     end;
                                                                                     b_armoury: begin
                                                                                          temp_unit = HexInfo(ai_upcoming_building_data[base][1],ai_upcoming_building_data[base][2]);
                                                                                          ComUpgrade(temp_unit);
                                                                                          ai_building_under_construction = Replace(ai_building_under_construction,base,temp_unit);
                                                                                     end;
                                                                                end;
                                                                           end;
                                                       end;
                                             end;
                                   end;


                              //Gather crates in the vicinity of the base (engineers).
                              //Everyone go after the same bunch of crates.
                              if (engineers_list ^ apemen_engineers_list) > 0 and ai_depot[base] > 0 then
                                   begin
                                        temp_list = GetListOfCratesInArea(GetBaseArea(base));
                                        if temp_list > 0 then
                                             begin
                                                  ComCollect(GetHumansOutOfUnits(engineers_list ^ apemen_engineers_list),temp_list[1],temp_list[2]);
                                                  engineers_list = [];
                                                  apemen_engineers_list = [];
                                             end;
                                   end;
                         end;


                    //Return to and stay inside the depot (if possible)
                    DistributeHumansToBuildings(base,engineers_list ^ apemen_engineers_list, UnitFilter(ai_depot[base],[[f_ok],[f_not,[f_constructed]]]),
                         class_engineer,6,false,false);

                    if crane_usable and ai_crane[base] <> ai_building_constructor[base] then
                         if not IsInArea(ai_crane[base],GetBaseArea(base)) then
                              ComMoveXY(ai_crane[base],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
               end;

          until false;
     end;
On BuildingStarted(building,builder) do
     var side, temp_list, base, i;
     begin
          side = GetSide(building);
          if side = you then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          ai_building_constructor = Replace(ai_building_constructor,base,0);

          //ONLY 1 building is under construction at a time!
          ai_building_under_construction = Replace(ai_building_under_construction,base,building);
     end;
On BuildingComplete(building) do
     var side, temp_list, temp_unit, base, i;
     begin
          side = GetSide(building);
          if side = you then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          BuildUpgradeCommon(base,building);

          temp_list = ai_all_buildings[base] ^ building;
          ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

          UpdateBuildingBasicVariables(base,building,true);
     end;
On UpgradeComplete(building) do
     var side, temp_list, base;
     begin
          side = GetSide(building);
          if side = you then
               exit;

          base = FindBase(building);
          if base = 0 then
               exit;

          BuildUpgradeCommon(base,building);
     end;
Function BuildUpgradeCommon(base,building);
     begin
          //Some buildings require upgrade - e.g. workshop -> factory
          if GetBType(building) = ai_upcoming_building_data[base][4] then
               ai_upcoming_building_data = Replace(ai_upcoming_building_data,base,[]);

          ai_building_under_construction = Replace(ai_building_under_construction,base,0);
     end;
On BuildingCaptured(captured_building,building_former_side,capturing_unit) do
     var temp_list, base;
     begin
          if captured_building in ai_depot then
               begin
                    //Set resource amounts to something realistic.
                    //Remember this should be the same as in event UnitGoesToRed.
                    case captured_building of
                         ai_depot[1]: begin
                              SetResourceType(GetBase(captured_building),mat_cans,200 + Rand(0,7)*10);
                              SetResourceType(GetBase(captured_building),mat_oil,0);
                              SetResourceType(GetBase(captured_building),mat_siberit,80 + Rand(0,10)*5);
                         end;
                         ai_depot[2]: begin  //Gensher's base
                              SetResourceType(GetBase(captured_building),mat_cans,100);
                              SetResourceType(GetBase(captured_building),mat_oil,55);
                              SetResourceType(GetBase(captured_building),mat_siberit,20);  //So can rebuild lab if necessary
                         end;
                         ai_depot[3]: begin
                              SetResourceType(GetBase(captured_building),mat_cans,200 + Rand(0,7)*10);
                              SetResourceType(GetBase(captured_building),mat_oil,400 + Rand(0,100));
                              SetResourceType(GetBase(captured_building),mat_siberit,80 + Rand(0,10)*5);
                         end;
                    end;
               end;

          base = FindBase(captured_building);

          if base = 0 then
               exit;

          if building_former_side = GetBaseSide(base) then
               begin
                    if captured_building in ai_all_buildings[base] then
                         begin
                              //Someone captured one of our buildings!
                              RemoveBuildingFromVariables(base,captured_building);

                              temp_list = ai_captured_buildings[base] ^ captured_building;
                              ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
                         end;
               end
          else
               begin
                    if GetSide(captured_building) = GetBaseSide(base) then
                         begin
                              //Ha! We captured it back again!
                              temp_list = ai_all_buildings[base] ^ captured_building;
                              ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

                              UpdateBuildingBasicVariables(base,captured_building,true);

                              temp_list = ai_captured_buildings[base] diff captured_building;
                              ai_captured_buildings = Replace(ai_captured_buildings,base,temp_list);
                         end;
               end;
     end;
On UnitGoesToRed(un) do
     begin
          if un in ai_depot then
               begin
                    //Set resource amounts to something realistic.
                    //Remember this should be the same as in event BuildingCaptured.
                    case un of
                         ai_depot[1]: begin
                              SetResourceType(GetBase(un),mat_cans,200 + Rand(0,7)*10);
                              SetResourceType(GetBase(un),mat_oil,0);
                              SetResourceType(GetBase(un),mat_siberit,80 + Rand(0,10)*5);
                         end;
                         ai_depot[2]: begin  //Gensher's base
                              SetResourceType(GetBase(un),mat_cans,100);
                              SetResourceType(GetBase(un),mat_oil,55);
                              SetResourceType(GetBase(un),mat_siberit,20);  //So can rebuild lab if necessary
                         end;
                         ai_depot[3]: begin
                              SetResourceType(GetBase(un),mat_cans,200 + Rand(0,7)*10);
                              SetResourceType(GetBase(un),mat_oil,400 + Rand(0,100));
                              SetResourceType(GetBase(un),mat_siberit,80 + Rand(0,10)*5);
                         end;
                    end;
               end;
     end;


//Function which orders human units inside other units to exit them. Returns a list with the units which weren't inside other units.
Export Function GetHumansOutOfUnits(un_list);
     var i;
     begin
          result = [];
          for i in un_list do
               case GetType(IsInUnit(i)) of
                    unit_building: ComExitBuilding(i);
                    unit_vehicle: ComExitVehicle(i);
                    else result = result ^ i;
               end;
     end;

//Function which tells if a base is under attack.
//attack_side - side which is attacking def_side's base. -1 if any enemy side of the base's side.
Export Function BaseUnderAttack(base,attack_side);
     var area, i, val, def_side, temp_list;
     begin
          result = false;

          def_side = GetBaseSide(base);
          area = GetBaseArea(base);

          if attack_side = def_side then
               exit;

          if attack_side = -1 then
               begin
                    if FilterAllUnits([[f_enemy,def_side],[f_inarea,area]]) > 0 then
                         begin
                              result = true;
                              exit;
                         end;

                    val = true;
                    for i in ai_contact_time[def_side] do
                         if i < 0$10 then
                              begin
                                   val = false;
                                   break;
                              end;

                    if ContactTime(def_side) >= 0$10 and val then
                         exit;

                    //if ListFilterNearArea( FilterAllUnits([f_enemy,def_side]) ,area) = 0 then
                    //     exit;
                    //The above was the former way of checking if enemy units was nearby but this implied looping through
                    //a lot of units on the map (in function ListFilterNearArea). This caused laggs. Filter-functions like
                    //FilterAllUnits are much much faster than loops with function calls. All we need is to assume that no
                    //unit inside another base's area will ever attack another base which seems reasonable.
                    temp_list = [];
                    for i in (ai_bases diff base) do
                         temp_list = Insert(temp_list,1,[f_not,[f_inarea,GetBaseArea(i)]]);

                    temp_list = FilterAllUnits([[f_enemy,def_side],[f_not,[f_type,unit_building]]] ^ temp_list);
                    if not AnyNearBaseArea(temp_list,base) then
                         exit;
               end
          else
               begin
                    if FilterAllUnits([[f_side,attack_side],[f_inarea,area]]) > 0 then
                         begin
                              result = true;
                              exit;
                         end;

                    if ContactTime([def_side,attack_side]) >= 0$10 and ai_contact_time[def_side][attack_side] >= 0$10 then
                         exit;

                    //if ListFilterNearArea( FilterAllUnits([f_side,attack_side]) ,area) = 0 then
                    //     exit;
                    temp_list = [];
                    for i in (ai_bases diff base) do
                         temp_list = Insert(temp_list,1,[f_not,[f_inarea,GetBaseArea(i)]]);

                    temp_list = FilterAllUnits([[f_side,attack_side],[f_not,[f_type,unit_building]]] ^ temp_list);
                    if not AnyNearBaseArea(temp_list,base) then
                         exit;
               end;

          result = true;
     end;
Export Function ListFilterNearArea(list,area);
     var i;
     begin
          result = [];

          for i in list do
               if GetDistUnitArea(i,area) <= ai_near_base_dist then
                    result = result ^ i;
     end;
Function AnyNearBaseArea(list,base);
     var i, area;
     begin
          result = false;
          area = GetBaseArea(base);

          for i in list do
               if GetDistUnitArea(i,area) <= ai_near_base_dist then
                    begin
                         result = true;
                         break;
                    end;
     end;

On Command(com) do
     var i, temp_list, hex_list, un, k, target_hex;
     begin
          CheckCamerasOnCommand(com);

          if com = 124 then  //attack ground
               begin
                    //Find one of the unit which were given the command
                    for i in FilterAllUnits([f_side,you]) do
                         if IsSelected(i) and HasTask(i) then
                              begin
                                   target_hex = [];
                                   for k in GetTaskList(i) do
                                        if k[1] = '|' then  //Attack ground is ['|',x,y,0,0,0,0]
                                             begin
                                                  target_hex = [k[2],k[3]];
                                                  break;
                                             end;

                                   if target_hex > 0 then
                                             begin
                                                  hex_list = target_hex;

                                                  //Units within distance 1 of the hex will take damage. Find all units within that distance.
                                                  temp_list = [];
                                                  for k = 0 to 5 do
                                                       temp_list = Insert(temp_list,1,[ShiftX(hex_list[1],k,1),ShiftY(hex_list[2],k,1)]);

                                                  hex_list = [hex_list] ^ temp_list;

                                                  temp_list = [];
                                                  for k in hex_list do
                                                       begin
                                                            un = HexInfo(k[1],k[2]);

                                                            if un > 0 and not un in temp_list then
                                                                 begin
                                                                      ai_attack_ground_info_initial = Insert(ai_attack_ground_info_initial,1,[i,un,GetSide(un),target_hex[1],target_hex[2]]);
                                                                      temp_list = temp_list ^ un;
                                                                 end;
                                                       end;
                                             end;
                              end;
               end;
     end;
//Every updating "ai_contact_time", "ai_attack_ground_info_initial" and "ai_attack_ground_info_sustain".
Every 0$1+0$0.1 do
     var a, b, temp_list, temp_list_2, yup, i, t;
     begin
          repeat
          wait(0$0.5);

          //Check if some of the units, that were going to attack ground, gave up before
          //doing so.
          i = 1;
          while i <= ai_attack_ground_info_initial do
               begin
                    yup = false;
                    for t in GetTaskList(ai_attack_ground_info_initial[i][1]) do
                         if t[1] = '|' then  //Attack ground is ['|',x,y,0,0,0,0]
                              if t[2] = ai_attack_ground_info_initial[i][4] and t[3] = ai_attack_ground_info_initial[i][5] then
                                   begin
                                        yup = true;
                                        break;
                                   end;

                    if not yup then
                         begin
                              ai_attack_ground_info_initial = Delete(ai_attack_ground_info_initial,i);
                              continue;
                         end;

                    i = i + 1;
               end;

          //Check if some of the units attacking ground has stopped.
          i = 1;
          while i <= ai_attack_ground_info_sustain do
               begin
                    yup = false;
                    for t in GetTaskList(ai_attack_ground_info_sustain[i][1]) do
                         if t[1] = '|' then  //Attack ground is ['|',x,y,0,0,0,0]
                              if t[2] = ai_attack_ground_info_sustain[i][4] and t[3] = ai_attack_ground_info_sustain[i][5] then
                                   begin
                                        yup = true;
                                        break;
                                   end;

                    if not yup then
                         begin
                              ai_attack_ground_info_sustain = Delete(ai_attack_ground_info_sustain,i);
                              continue;
                         end;

                    i = i + 1;
               end;

          //Update all times
          temp_list = ai_contact_time;
          for a = 1 to temp_list do
               for b = 1 to temp_list[a] do
                    if temp_list[a][b] < 100000 then
                         begin
                              temp_list_2 = Replace(ai_contact_time[a],b, temp_list[a][b] + 0$0.5 );
                              ai_contact_time = Replace(ai_contact_time,a,temp_list_2);
                         end;

          //New attacks?
          //Function SideShoot and UnitShoot does detect damage from attacking ground.
          for a in ai_attack_ground_info_initial do
               begin
                         if IsDead(a[2]) or UnitShoot(a[2]) = a[1] then
                              begin
                                   temp_list = Replace(ai_contact_time[you],a[3],0);
                                   ai_contact_time = Replace(ai_contact_time,you,temp_list);

                                   temp_list = Replace(ai_contact_time[a[3]],you,0);
                                   ai_contact_time = Replace(ai_contact_time,a[3],temp_list);

                                   ai_attack_ground_info_initial = ai_attack_ground_info_initial diff [a];
                                   ai_attack_ground_info_sustain = Insert(ai_attack_ground_info_sustain,1,a);
                              end;
               end;

          //Sustained attacks?
          for a in ai_attack_ground_info_sustain do
               begin
                    temp_list = Replace(ai_contact_time[you],a[3],0);
                    ai_contact_time = Replace(ai_contact_time,you,temp_list);

                    temp_list = Replace(ai_contact_time[a[3]],you,0);
                    ai_contact_time = Replace(ai_contact_time,a[3],temp_list);
               end;

          until false;
     end;


//Mechanics (defending, i.e. in the base)
//Priorities if base is under attack (descending):
//- If a mechanic is hurt, pull him back for healing.
//- Repair war vehicles defending the base.
//- Stay in factory.
//Priorites if not under attack (decending):
//- If a mechanic is hurt, pull him back for healing.
//- Refuel vehicles
//- Repair damaged war vehicles within the base
//- Stay in factory (and possibly construct a vehicle or weapon)
//When it comes to American remote control we pick some mechanics to control
//specific vehicles. Their priorities are (descending):
//- If a mechanic is hurt, pull him back for healing.
//- Repair war vehicles defending the base (if all vehicles you control are burning or dead)
//- Stay in control tower and link to vehicles.
//Priorites if not under attack (decending):
//- If a mechanic is hurt, pull him back for healing.
//- Repair damaged war vehicles within the base (if all remote vehicles are inside the base)
//- Stay in control tower and link to vehicles.
Every 0$1 do
     var side, i, mechanics_list, temp_list, taken_vehicles, temp_list_3, temp_unit, vehicles_list, allowed_to_repair_vehicles;
     var under_attack, free_parking_spots, k, ready_to_attack, base, area, free_spaces, temp_list_2, remote_mechanics;
     var destroy_gensher_base, temp_list_4, temp_list_5, n, a;
     var remote_driver_vehicles;
     begin
          remote_driver_vehicles = [[],[],[]];  //For remote control (americans). [driver_id,[veh1,veh2,veh3]]

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    side = GetBaseSide(base);

                    under_attack = BaseUnderAttack(base,-1);  //Base under attack
                    ready_to_attack = not under_attack;  //Are we ready to launch an attack ourselves?

                    if base = 1 and GetAttitude(americans,you_alt) = att_enemy and FilterAllUnits([[f_inarea,Gensher_base],[f_type,unit_building]]) > 0 then
                         destroy_gensher_base = true  //So Americans will destroy Gensher's base
                    else
                         destroy_gensher_base = false;

                    mechanics_list = ai_mechanics_defend[base] diff ai_heal_these_humans[base];
                    remote_mechanics = [];  //mechanics controlling one or more remote vehicles


                    //Count down to attack.
                    //When we are ready to attack with vehicles (this goes only for base 1) there is a chance the
                    //we attack with humans instead making it harder to predict where attacks will come
                    //from.
                    {if ai_vehicle_attack_delay[base] > 0$0 and UnitFilter(ai_vehicles_attack[base],[f_ok]) = 0 then
                         begin
                              ai_vehicle_attack_delay = Replace(ai_vehicle_attack_delay,base, ai_vehicle_attack_delay[base] - 0$1);  //Must match update time of this every

                              if ai_vehicle_attack_delay[base] <= 0$0 and ai_attacking_soldiers[base] = 0 and ai_attacking_scientists[base] = 0 and base = 1 and Rand(1,2) = 1 then
                                   begin
                                        ai_vehicle_attack_delay = Replace(ai_vehicle_attack_delay,base, ai_human_attack_delay[base] );
                                        ai_human_attack_delay = Replace(ai_human_attack_delay,base,0$0);
                                   end;

                              ready_to_attack = false;
                         end;}


                    //Identify mechanics who need healing
                    temp_list = ai_heal_these_humans[base];
                    i = 1;
                    while i <= mechanics_list do
                         begin
                              if GetLives(mechanics_list[i]) <= 900 then
                                   begin
                                        temp_list = temp_list ^ mechanics_list[i];
                                        mechanics_list = Delete(mechanics_list,i);
                                        continue;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Remote control (Americans)
                    if ai_control_tower[base] > 0 then
                         begin
                              //Sort away dead vehicles and vehicles controlled by dead mechanics.
                              //Find vehicles currently connected to a mechanic.
                              temp_list = remote_driver_vehicles[base];
                              vehicles_list = [];

                              i = 1;
                              while i <= temp_list do
                                   begin
                                        if IsDead(temp_list[i][1]) then
                                             begin
                                                  temp_list = Delete(temp_list,i);
                                                  continue;
                                             end
                                        else
                                             begin
                                                  temp_list_3 = temp_list[i][2];

                                                  k = 1;
                                                  while k <= temp_list_3 do
                                                       begin
                                                            if IsDead(temp_list_3[k]) then
                                                                 begin
                                                                      temp_list_3 = Delete(temp_list_3,k);
                                                                      continue;
                                                                 end;

                                                            k = k + 1;
                                                       end;

                                                  if temp_list_3 > 0 then
                                                       begin
                                                            temp_list_2 = Replace(temp_list[i],2,temp_list_3);
                                                            temp_list = Replace(temp_list,i,temp_list_2);
                                                       end
                                                  else
                                                       begin
                                                            temp_list = Delete(temp_list,i);
                                                            continue;
                                                       end;
                                             end;

                                        vehicles_list = vehicles_list ^ temp_list[i][2];

                                        i = i + 1;
                                   end;

                              remote_driver_vehicles = Replace(remote_driver_vehicles,base,temp_list);

                              //Connect remote vehicles to mechanics.
                              //As for now we want only one vehicle per mechanic.
                              temp_list = ai_vehicles_defend[base] diff vehicles_list;
                              if temp_list > 0 then
                                   begin
                                        //Always leave at least one mechanic to work in the factory.
                                        temp_list_3 = ai_mechanics_defend[base];
                                        for i in remote_driver_vehicles[base] do
                                             temp_list_3 = temp_list_3 diff i[1];

                                        if temp_list_3 > 0 then
                                             temp_list_3 = temp_list_3 diff FindMinSkill(temp_list_3,skill_mechanical);

                                        for i in temp_list do
                                             begin
                                                  if temp_list_3 = 0 then
                                                       break;
                                             
                                                  //Take the best mechanic
                                                  temp_unit = FindMaxSkill(temp_list_3,skill_mechanical);
                                                  temp_list_3 = temp_list_3 diff temp_unit;

                                                  temp_list_2 = Insert(remote_driver_vehicles[base],1,[temp_unit,[i]]);
                                                  remote_driver_vehicles = Replace(remote_driver_vehicles,base,temp_list_2);
                                             end;
                                   end;

                              //Find all remote mechanics
                              for i in remote_driver_vehicles[base] do
                                   remote_mechanics = remote_mechanics ^ i[1];

                              mechanics_list = mechanics_list diff remote_mechanics;
                              remote_mechanics = remote_mechanics diff ai_heal_these_humans[base];

                              //There must always be at least one mechanic to work in the factory.
                              if mechanics_list = 0 and remote_driver_vehicles[base] > 0 then
                                   begin
                                        //Release the mechanic controlling the least vehicles.
                                        n = 0;
                                        a = 9999;
                                        for i = 1 to (remote_driver_vehicles[base]+0) do
                                             begin
                                                  if remote_driver_vehicles[base][i][2]+0 < a then
                                                       begin
                                                            a = remote_driver_vehicles[base][i][2]+0;
                                                            n = i;
                                                       end;
                                             end;

                                        mechanics_list = mechanics_list ^ remote_driver_vehicles[base][n][1];
                                        remote_mechanics = remote_mechanics diff remote_driver_vehicles[base][n][1];
                                        temp_list_2 = Delete(remote_driver_vehicles[base],n);
                                        remote_driver_vehicles = Replace(remote_driver_vehicles,base,temp_list_2);
                                   end;
                         end
                    else
                         begin
                              remote_driver_vehicles = Replace(remote_driver_vehicles,base,[]);
                         end;


                    //Find vehicles which no longer need to be repaired (fully repaired).
                    temp_list = [];
                    for i in ai_vehicles_being_repaired[base] do
                         if GetLives(i) < 1000 then
                              temp_list = temp_list ^ i;
                    ai_vehicles_being_repaired = Replace(ai_vehicles_being_repaired,base,temp_list);


                    //Find vehicles which no longer need to refuel.
                    //If a vehicles was scheduled to refuel but didn't make it before the base was attacked
                    //and was added to retreating vehicles during the attack it must be removed from
                    //refueling vehicles.
                    temp_list = [];
                    for i in ai_refuel_vehicles_list[base] diff ai_vehicles_being_repaired[base] do
                         if GetFuel(i) < 95 then
                              temp_list = temp_list ^ i;
                    ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);


                    if under_attack or destroy_gensher_base then
                         begin
                              //Order the vehicles to defend
                              vehicles_list = ai_vehicles_defend[base] diff ai_vehicles_being_repaired[base];

                              case base of
                                   1: begin  //Americans
                                        //Don't do anything in game phase 1. Moving units out of the base could cause the
                                        //player to be seen.
                                        repeat
                                        if game_phase = 1 then
                                             break;

                                        //Vehicles only go for enemies in specified area.
                                        //If no enemies are present but Gensher has betrayed the Americans then
                                        //start destroying his base.
                                        //Go for Gensher humans as first priority if within range (not beyond the Russian base).
                                        temp_list = [];
                                        if destroy_gensher_base then
                                             for i in original_gensher_people ^ Gensher do
                                                  if IsPlaced(i) and GetY(i) <= 70 then
                                                       temp_list = temp_list ^ i;

                                        if temp_list > 0 then
                                             begin
                                                  //American vehicles can be distracted by the defenses in Gensher's base so make the vehicles
                                                  //go close to the humans before agressive move.
                                                  {for i in vehicles_list do
                                                       if GetDistUnits(AllNearestUnitToUnit(temp_list,i),i) <= 7 then
                                                            ComAgressiveMove(i,GetX(temp_list[1]),GetY(temp_list[1]))
                                                       else
                                                            ComAttackUnit(i,temp_list[1]);}
                                                            //We use old waypoint system instead (find the closest hex, then take the next) because the nearest unit
                                                            //could be relatively far away.
                                                  temp_list_3 = [[105,40],[98,44],[90,44],[82,46],[78,52],[79,61]];
                                                  for i in vehicles_list do
                                                       begin
                                                            temp_unit = AllNearestUnitToUnit(temp_list,i);
                                                            if GetDistUnits(i,temp_unit) <= 6 then
                                                                 ComAgressiveMove(i,GetX(temp_unit),GetY(temp_unit))
                                                            else
                                                                 begin
                                                                      temp_list = FindNextHexOldWaypointSystem(temp_list_3,i);
                                                                      ComMoveXY(i,temp_list[1],temp_list[2]);
                                                                 end;
                                                       end;
                                             end
                                        else
                                             begin
                                                  temp_list = FilterAllUnits([[f_enemy,side],[f_inarea,am_vehicle_defend_area]]);
                                                  temp_list = DangerousUnits(temp_list);

                                                  if temp_list > 0 then
                                                       begin
                                                            for i in vehicles_list do
                                                                 begin
                                                                      temp_unit = NearestUnitToUnit(temp_list,i);
                                                                      ComAgressiveMove(i,GetX(temp_unit),GetY(temp_unit));
                                                                 end;
                                                           // ComAgressiveMove(vehicles_list,GetX(temp_list[1]),GetY(temp_list[1]))
                                                       end
                                                  else
                                                       if destroy_gensher_base then
                                                            begin
                                                                 temp_list = FilterAllUnits([[f_enemy,side],[f_inarea,gensher_base]]);
                                                                 temp_list_2 = DangerousUnits(temp_list);

                                                                 if temp_list_2 > 0 then
                                                                      begin
                                                                           for i in vehicles_list do
                                                                                begin
                                                                                     temp_unit = NearestUnitToUnit(temp_list_2,i);
                                                                                     ComAgressiveMove(i,GetX(temp_unit),GetY(temp_unit));
                                                                                end;

                                                                           //ComAgressiveMove(vehicles_list,GetX(temp_list_2[1]),GetY(temp_list_2[1]))
                                                                      end
                                                                 else
                                                                      if temp_list > 0 then
                                                                           begin
                                                                                for i in vehicles_list do
                                                                                     begin
                                                                                          temp_unit = NearestUnitToUnit(temp_list,i);
                                                                                          ComAttackUnit(i,temp_unit);
                                                                                     end;

                                                                                //ComAttackUnit(vehicles_list,temp_list[1]);
                                                                           end;
                                                            end;
                                             end;

                                        until true;
                                   end;
                                   2: begin  //Gensher
                                        //No vehicles
                                   end;
                                   3: begin  //Russians
                                        //If there are more enemies in the backdoor area then go north the west and flank them.
                                        //Else just go for some enemy near the base.
                                        temp_list = FilterAllUnits([f_enemy,side]);
                                        temp_list = ListFilterNearArea(temp_list,GetBaseArea(base));
                                        temp_list = DangerousUnits(temp_list);

                                        temp_list_2 = FilterAllUnits([[f_enemy,side],[f_inarea,Ru_backdoor_area]]);
                                        temp_list_2 = DangerousUnits(temp_list_2);

                                        temp_list_3 = [[53,80],[61,80],[63,73],[67,66],[67,59]];  //waypoints northway out of the base
                                        temp_list_4 = [[53,80],[61,91],[70,97],[78,99],[88,98]]; //waypoints southway out of the base

                                        if temp_list_2 >= temp_list then
                                             begin
                                                  if temp_list_2 > 0 then  //should be the case
                                                       begin
                                                            for i in vehicles_list do
                                                                 if IsInArea(i,Ru_base) then
                                                                      begin
                                                                           temp_list_5 = FindNextHexOldWaypointSystem(temp_list_3,i);
                                                                           ComAgressiveMove(i,temp_list_5[1],temp_list_5[2]);
                                                                          { ComAgressiveMove(i,62,55);
                                                                           AddComAgressiveMove(i,GetX(temp_list_2[1]),GetY(temp_list_2[1]));}
                                                                      end
                                                                 else
                                                                      begin
                                                                           temp_unit = NearestUnitToUnit(temp_list_2,i);
                                                                           ComAgressiveMove(i,GetX(temp_unit),GetY(temp_unit));
                                                                      end;
                                                       end;
                                             end
                                        else
                                             begin
                                                  if temp_list > 0 then
                                                       begin
                                                            //Send half the vehicles out the south entrance, the other half the north entrance.

                                                            k = 0;
                                                            for i in vehicles_list do
                                                                 begin
                                                                      k = k + 1;

                                                                      if k mod 2 = 0 then
                                                                           begin
                                                                                //North
                                                                                if IsInArea(i,Ru_base) then
                                                                                     begin
                                                                                          temp_list_5 = FindNextHexOldWaypointSystem(temp_list_3,i);
                                                                                          ComAgressiveMove(i,temp_list_5[1],temp_list_5[2]);
                                                                                     end
                                                                                else
                                                                                     begin
                                                                                          temp_unit = NearestUnitToUnit(temp_list,i);
                                                                                          ComAgressiveMove(i,GetX(temp_unit),GetY(temp_unit));
                                                                                     end;
                                                                           end
                                                                      else
                                                                           begin
                                                                                //South
                                                                                if IsInArea(i,Ru_base) or IsInArea(i,Ru_base_south) then
                                                                                     begin
                                                                                          temp_list_5 = FindNextHexOldWaypointSystem(temp_list_4,i);
                                                                                          ComAgressiveMove(i,temp_list_5[1],temp_list_5[2]);
                                                                                     end
                                                                                else
                                                                                     begin
                                                                                          temp_unit = NearestUnitToUnit(temp_list,i);
                                                                                          ComAgressiveMove(i,GetX(temp_unit),GetY(temp_unit));
                                                                                     end;
                                                                           end;
                                                                 end;
                                                            //ComAgressiveMove(vehicles_list,GetX(temp_list[1]),GetY(temp_list[1]));
                                                       end;
                                             end;
                                   end;
                              end;
                         end
                    else
                         begin
                              area = GetBaseArea(base);
                              if IsOk(ai_depot[base]) then
                                   begin
                                        //If some vehicles need to refuel then make 'em refuel.
                                        temp_list = ai_refuel_vehicles_list[base];
                                        for i in ai_vehicles_defend[base] diff ai_refuel_vehicles_list[base] do
                                             if GetFuel(i) < 70 and GetEngine(i) = engine_combustion then
                                                  temp_list = temp_list ^ i;
                                        temp_list = temp_list diff ai_vehicles_being_repaired[base];
                                        ai_refuel_vehicles_list = Replace(ai_refuel_vehicles_list,base,temp_list);

                                        for i in ai_refuel_vehicles_list[base] do
                                             begin
                                                  if IsInArea(i,area) then
                                                       begin
                                                            ComMoveUnit(i,ai_depot[base]);
                                                            AddComRefuel(i,ai_depot[base]);
                                                       end
                                                  else
                                                       ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                                             end;
                                   end;

                              //Move vehicles outside the base inside
                              for i in ai_vehicles_defend[base] diff ai_refuel_vehicles_list[base] do
                                   if not IsInArea(i,area) then
                                        ComAgressiveMove(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);
                         end;


                    if mechanics_list = 0 and remote_mechanics = 0 then
                         continue;


                    //Repair vehicles.
                    //All mechanics go for the same vehicle.
                    allowed_to_repair_vehicles = UnitFilter(ai_vehicles_defend[base] ^ (ai_crane[base] diff 0),[[f_not,[f_lives,1000]],[f_inarea,GetBaseArea(base)]]);
                    if not under_attack then
                         allowed_to_repair_vehicles = allowed_to_repair_vehicles ^ UnitFilter(ai_cargo_bay[base] diff 0,[[f_not,[f_lives,1000]],[f_inarea,GetBaseArea(base)]]);

                    allowed_to_repair_vehicles = allowed_to_repair_vehicles diff (ai_refuel_vehicles_list[base] ^ ai_vehicles_being_repaired[base]);

                    if allowed_to_repair_vehicles > 0 or ai_vehicles_being_repaired[base] > 0 then
                         begin
                              if remote_mechanics > 0 then
                                   begin
                                        if under_attack then
                                             begin
                                                  //Repair vehicles if all vehicles you control are burning or dead
                                                  for i in remote_driver_vehicles[base] do
                                                       if UnitFilter(i[2],[f_ok]) = 0 and i[1] in remote_mechanics then
                                                            begin
                                                                 mechanics_list = mechanics_list ^ i[1];
                                                                 remote_mechanics = remote_mechanics diff i[1];
                                                            end;
                                             end
                                        else
                                             begin
                                                  //All help repair vehicles if all remote vehicles are inside the base
                                                  //(to prevent a lot of destination unreachable messages from other vehicles
                                                  //all must be inside the base).
                                                  temp_unit = true;
                                                  for i in remote_driver_vehicles[base] do
                                                       begin
                                                            for k in i[2] do
                                                                 if not IsInArea(k,GetBaseArea(base)) then
                                                                      begin
                                                                           temp_unit = false;
                                                                           break;
                                                                      end;

                                                            if not temp_unit then
                                                                 break;
                                                       end;

                                                  if temp_unit then
                                                       begin
                                                            mechanics_list = mechanics_list ^ remote_mechanics;
                                                            remote_mechanics = [];
                                                       end;
                                             end;
                                   end;

                              if allowed_to_repair_vehicles > 0 then
                                   begin
                                        k = false;
                                        if ai_vehicles_being_repaired[base] = 0 then
                                             k = true
                                        else
                                             if IsOk(ai_vehicles_being_repaired[base][1]) then
                                                  begin
                                                       allowed_to_repair_vehicles = UnitFilter(allowed_to_repair_vehicles,[f_not,[f_ok]]);
                                                       k := allowed_to_repair_vehicles > 0;
                                                  end;

                                        if k then
                                             begin
                                                  temp_list = [];
                                                  for i in allowed_to_repair_vehicles do
                                                       temp_list = temp_list ^ GetLives(i);
                                                  temp_unit = WorstFromListByList(allowed_to_repair_vehicles,temp_list);

                                                  temp_list = temp_unit ^ ai_vehicles_being_repaired[base];
                                                  ai_vehicles_being_repaired = Replace(ai_vehicles_being_repaired,base,temp_list);
                                             end;
                                   end;

                              ComRepairVehicle( GetHumansOutOfUnits(mechanics_list) , ai_vehicles_being_repaired[base][1]);
                         end
                    else
                         begin
                              //Count down to attack if we have enough war vehicles to do so, and we are not attacking right now, and we
                              //are ready (everything is fine - no damaged vehicles, not under attack and so on).
                              //The computer attacks with maximum "the required number of vehicles to attack".
                              //This must be synchronized with how many vehicles will be produced (see every below).
                              {
                              if UnitFilter(ai_vehicles_attack[base],[f_ok]) = 0 and ready_to_attack and ai_refuel_vehicles_list[base] = 0 and ai_vehicles_defend[base] >= NumOfVehicleReqToAttack then
                                   begin
                                        //Pick vehicles for attack
                                        temp_list = [];
                                        for k = 1 to NumOfVehicleReqToAttack do
                                             begin
                                                  temp_list = temp_list ^ ai_vehicles_defend[base][1];
                                                  temp_list_3 = Delete(ai_vehicles_defend[base],1);
                                                  ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list_3);
                                             end;
                                        ai_vehicles_attack = Replace(ai_vehicles_attack,base,temp_list);

                                        //Reset attack hexes reached
                                        for k in ai_vehicles_attack[base] do
                                             begin
                                                  temp_list = Replace(ai_attacking_unit_hex_index[base],k,1);
                                                  ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index,base,temp_list);
                                             end;

                                        //Reset vehicle attack delay
                                        ResetVehicleAttackDelay(base);
                                   end;
                              }

                              //Rest mechanics stay inside the factory (if possible).
                              //Change class if necessary
                              DistributeHumansToBuildings(base,mechanics_list, UnitFilter(ai_facts[base],[[f_ok],[f_not,[f_constructed]]]),
                                   class_mechanic,6,true,false);
                         end;


                    //Connect remote driver and vehicles
                    if remote_driver_vehicles[base] > 0 then
                         begin
                              if not IsOk(ai_control_tower[base]) then
                                   begin
                                        //Just go to factory
                                        DistributeHumansToBuildings(base,remote_mechanics, UnitFilter(ai_facts[base],[[f_ok],[f_not,[f_constructed]]]),
                                             class_mechanic,6,true,false);
                                   end
                              else
                                   begin
                                        for i in remote_driver_vehicles[base] do
                                             begin
                                                  if not i[1] in remote_mechanics then
                                                       continue;

                                                  //Class must be mechanic
                                                  if GetClass(i[1]) <> class_mechanic then
                                                       begin
                                                            temp_unit = 0;
                                                            for k in ai_facts[base] do
                                                                 if IsOk(k) and UnitsInside(k) < 6 then
                                                                      begin
                                                                           temp_unit = k;
                                                                           break;
                                                                      end;

                                                            if temp_unit > 0 then
                                                                 begin
                                                                      if IsInUnit(i[1]) = temp_unit then
                                                                           ComChangeProfession(i[1],class_mechanic)
                                                                      else
                                                                           begin
                                                                                case GetType(IsInUnit(i[1])) of
                                                                                     unit_building: ComExitBuilding(i[1]);
                                                                                     unit_vehicle: ComExitVehicle(i[1]);
                                                                                     else
                                                                                          ComEnterUnit(i[1],temp_unit);
                                                                                end;
                                                                           end;
                                                                 end;
                                                       end
                                                  else
                                                       begin
                                                            temp_unit = IsInUnit(i[1]);
                                                            if temp_unit <> ai_control_tower[base] then
                                                                 begin
                                                                      case GetType(temp_unit) of
                                                                           unit_building: ComExitBuilding(i[1]);
                                                                           unit_vehicle: ComExitVehicle(i[1]);
                                                                           else
                                                                                ComEnterUnit(i[1],ai_control_tower[base]);
                                                                      end;
                                                                 end
                                                            else
                                                                 for k in i[2] do
                                                                      if IsControledBy(k) <> i[1] then
                                                                           ComLinkTo(k,i[1]);
                                                       end;
                                             end;
                                   end;
                         end;
               end;

          until false;
     end;
Function MaxNumWarVehicles(base);
     begin
          case base of
               1: result = WorstFromListByList([ai_mechanics_defend[base]+0,3],[ai_mechanics_defend[base]+0,3]);  //remote control. Max 3 people in control tower
               2: result = 0;
               3: result = [3,4,5][difficulty]; //Computer control
          end;
     end;
Function FindNextHexOldWaypointSystem(waypoints,un);
     var dist, k, num, temp;
     begin
          dist = GetDistUnitXY(un,waypoints[1][1],waypoints[1][2]);
          num = 1;

          for k = 2 to waypoints do
               begin
                    temp = GetDistUnitXY(un,waypoints[k][1],waypoints[k][2]);
                    if temp < dist then
                         begin
                              dist = temp;
                              num = k;
                         end;
               end;

          if num < waypoints+0 then
               num = num + 1;

          result = waypoints[num];
     end;
//Construct combat vehicles and weapons for bunkers. Weapons for bunkers have highest priority.
Every 0$1+0$0.1 do
     var i, temp_value, temp_unit, temp_list, base, idle_factories, fact;
     var vehicle_prod_delay;
     begin
          vehicle_prod_delay = [0$0,0$0,0$0];


          repeat
          wait(0$1);
          
          for base in ai_bases do
               begin
                    //if BaseUnderAttack(base,-1) then  -> donsn't work too well with Gensher's base just beside the American base - they think they are constantly under attack (and the apemen soldiers are left behind so a simple "ignore buildings" doesn't work)
                    if ContactTime(GetBaseSide(base)) <= 0$10 and ai_vehicles_defend[base] >= [0,1,2][difficulty] then
                         begin
                              vehicle_prod_delay = Replace(vehicle_prod_delay,base,[1$15,0$45,0$30][difficulty]);
                         end;

                    idle_factories = [];
                    for i in ai_facts[base] do
                         if BuildingStatus(i) = bs_idle and IsOk(i) and GetBType(i) = b_factory then
                              idle_factories = idle_factories ^ i;

                    if idle_factories = 0 then
                         continue;


                    //Check if any bunker needs a weapon
                    temp_value = false;
                    for i in ai_buildings_locations[base] do
                         if i[4] in [b_bunker,b_turret] then
                              begin
                                   temp_unit = HexInfo(i[1],i[2]);

                                   if GetBType(temp_unit) in [b_bunker,b_turret] and not IsConstructed(temp_unit) and GetBWeapon(temp_unit) <> i[7] then
                                        for fact in idle_factories do
                                             //if i[7] in AvailableWeaponList(fact) then  //Can the factory produce the weapon? (does it have the gun extension, that is).
                                             if IsWeaponFactory(fact) then
                                                  begin
                                                       //If there are multiple weapon factories and more than one or another factory than
                                                       //the factory getting the job invokes this part of the function the bunker/turret may
                                                       //get the weapon placed several times, but since factories don't have a task list
                                                       //there is no simple way to stop this. Better several times than never.
                                                       ComPlaceWeapon(temp_unit,i[7]);
                                                       temp_value = true;
                                                       break;
                                                  end;

                                   if temp_value then
                                        break;
                              end;

                    if temp_value then
                         continue;

                   
                    //Construct war vehicles.
                    if vehicle_prod_delay[base] > 0$0 or game_phase = 2 then
                         begin
                              vehicle_prod_delay = Replace(vehicle_prod_delay,base, vehicle_prod_delay[base] - 0$1 );
                              continue;
                         end;

                    if ai_vehicles_defend[base] < MaxNumWarVehicles(base) then
                         begin
                         case base of
                              1: begin
                                   case Rand(1,4) of
                                        1: temp_value = us_gatling_gun;
                                        2: temp_value = us_laser;
                                        3: temp_value = us_double_gun;
                                        4: temp_value = us_rocket_launcher;
                                   end;

                                   ComConstruct(idle_factories[1],us_medium_wheeled,engine_siberite,control_remote,temp_value);
                              end;
                              2: begin
                              end;
                              3: begin
                                   //If the player has built base near the eastern border of the map only produce vehicles
                                   //with swirwling weapons, cf. the attacking procedure below.
                                   if PlayerAtEasternBorder then
                                        temp_list = [ru_heavy_machine_gun, ru_gun, ru_rocket_launcher]
                                   else
                                        temp_list = [ru_gatling_gun, ru_heavy_gun, ru_rocket_launcher];

                                   temp_value = temp_list[Rand(1,temp_list+0)];
                                   
                                   //if not temp_value in AvailableWeaponList(idle_factories[1]) then
                                   if not IsWeaponFactory(idle_factories[1]) then
                                        temp_value = ru_heavy_machine_gun;

                                   if temp_value = ru_heavy_gun then
                                        i = ru_heavy_tracked
                                   else
                                        if Rand(difficulty,4) = 4 then
                                             i = ru_heavy_tracked
                                        else
                                             i = ru_medium_tracked;
                                   
                                   ComConstruct(idle_factories[1],i,engine_siberite,control_computer,temp_value);
                              end;
                         end;

                         //vehicle_prod_delay = Replace(vehicle_prod_delay,base,[1$0,0$30,0$15][difficulty]);  -> Disrupts the planned attack time
                         end;
               end;

          until false;
     end;
//If a factory has the gun extension we presume it has all necessary extensions to construct
//any weapon.
Function IsWeaponFactory(factory);
     begin
          if FilterAllUnits([[f_dist,factory,4],[f_btype,b_ext_gun]]) > 0 then
               result = true
          else
               result = false;
     end;
//If the player captures one of the computer's vehicles, then remove it from our variables-system.
On VehicleCaptured(new_identifier,old_identifier,old_side,capturing_unit) do
     var temp_list, base;
     begin
          if old_side = you then
               exit;

          for base in ai_bases do
               RemoveVehicleFromVariables(base,old_identifier);
     end;
//When a vehicle is constructed
On VehicleConstructed(vehicle,factory) do
     var side, temp_list, base;
     begin
          side = GetSide(vehicle);
          if side = you then
               exit;

          base = FindBase(vehicle);
          if base = 0 then
               exit;

          if not GetWeapon(vehicle) in [us_cargo_bay,ar_cargo_bay,ru_cargo_bay] then
               begin
                    temp_list = ai_vehicles_defend[base] ^ vehicle;
                    ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list);
               end
          else
               begin
                    ai_cargo_bay = Replace(ai_cargo_bay,base,vehicle);
                    ai_cargo_bay_under_construction = Replace(ai_cargo_bay_under_construction,base,false);
               end;
     end;

//Tells if the player has built base at the Eastern borde of the map (also true if the player hasn't built
//a base yet).
Export Function PlayerAtEasternBorder;
     var temp_list;
     begin
          result = false;

          temp_list = FilterAllUnits([[f_side,you],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]]]);
          if temp_list = 0 then
               result = true
          else
               if UnitFilter(temp_list,[f_inarea,player_base_outer]) > 0 then
                    result = true;
     end;


//"Ordinary" Russian attackers.
Every 0$1+0$0.3 do
     var i, temp_list, human_list, num_sol, num_baz, num_sci, temp_list_2, temp_list_3, k;
     var base, side, attack_strat_history, first_time_attack_gensher;
     begin
          base = 3;
          side = russians;
          attack_strat_history = [];
          first_time_attack_gensher = true;
            
          while not scout_event_over do
               wait(0$1);

          //Cut a little off the attack delay the first time
          ai_vehicle_attack_delay = Replace(ai_vehicle_attack_delay,base, ai_vehicle_attack_delay[base] - 2$0 );

          repeat
          wait(0$1);

          if UnitFilter(ai_attacking_soldiers[base],[f_ok]) > 0 or UnitFilter(ai_attacking_scientists[base],[f_ok]) > 0 or UnitFilter(ai_vehicles_attack[base],[f_ok]) > 0 then
               continue;
             
          if IsPlaced(Cornell) and not IsDead(Cornell) then  //Don't attack while the Cornell-event is running
               continue;

          if IsPlaced(Khattam) and not ( IsDead(Khattam) or GetSide(Khattam) = you ) then  //Don't attack while the Khattam-event is running
               continue;

          ai_vehicle_attack_delay = Replace(ai_vehicle_attack_delay,base, ai_vehicle_attack_delay[base] - 0$1 );

          if ai_vehicle_attack_delay[base] > 0$0 then
               continue;

          if BaseUnderAttack(base,-1) then
               continue; 

          if ai_vehicles_defend[base] < MaxNumWarVehiclesForAttack(base) then
               continue;


          //Pick vehicles
          temp_list = [];
          temp_list_2 = ai_vehicles_defend[base];

          for i = 1 to MaxNumWarVehiclesForAttack(base) do
               begin
                    temp_list = temp_list ^ temp_list_2[i];
                    RemoveVehicleFromVariables(base,temp_list_2[i]);
               end;
          ai_vehicles_attack = Replace(ai_vehicles_attack,base,temp_list);


          //The humans for the attack arrive
          human_list = [];
          num_sci = difficulty+Rand(0,1);
          num_sol = difficulty+1+Rand(0,1);
          num_baz = difficulty+Rand(0,1);

          case num_russian_attacks of
               0: begin
                    if num_sci > 1 then
                         num_sci = 1;

                    if num_sol > 2 then
                         num_sol = 2;

                    num_baz = num_baz - 1;
               end;
               1: begin
                    if num_sol > 3 then
                         num_sol = 3;

                    if num_baz > 1 then
                         num_baz = num_baz - 1;
               end;
               2: begin
               end;
               else
                    begin
                         num_baz = num_baz + Rand(0,1);
                    end;
          end;

          if yashin_alive then
               begin
                    num_baz = num_baz + num_sol;
                    num_sol = Rand(1,2);
               end;

          temp_list = CreateUnitsWithClass(num_sci,class_scientistic,side);
          human_list = human_list ^ temp_list;
          ai_attacking_scientists = Replace(ai_attacking_scientists,base,temp_list);

          temp_list = CreateUnitsWithClass(num_sol,class_soldier,side) ^ CreateUnitsWithClass(num_baz,class_bazooker,side);
          human_list = human_list ^ temp_list;
          ai_attacking_soldiers = Replace(ai_attacking_soldiers,base,temp_list);

          for i in human_list do
               PlaceUnitArea(i,russian_reinforcements_area,false);
          

          //Set attack strategy
          if MayAttackGensherBase and Rand(1,2) = 1 then
               russian_attack_strategy = 1
          else
               if PlayerAtEasternBorder then
                    russian_attack_strategy = 2
               else
                    russian_attack_strategy = 3;

          if russian_attack_strategy <> 1 and not 1 in attack_strat_history then
               if attack_strat_history >= [5,4,3][difficulty] and MayAttackGensherBase then 
                    russian_attack_strategy = 1;

          attack_strat_history = attack_strat_history ^ russian_attack_strategy;

          //Don't bring bazookers or rocket launchers the first time you attack Gensher.
          //Generally don't attack Gensher as violently as the player.
          if russian_attack_strategy = 1 then
               begin
                    if first_time_attack_gensher or difficulty = 1 then
                         begin
                              first_time_attack_gensher = false;

                              //Humans - remove bazookas
                              temp_list = UnitFilter(ai_attacking_soldiers[base],[f_class,class_bazooker]);

                              for i in temp_list do
                                   begin
                                        RemoveHumanFromVariables(base,i,false);
                                        DestroyUnit(i);
                                   end;

                              //Vehicles - replace rocket launchers with machine guns
                              temp_list = UnitFilter(ai_vehicles_attack[base],[f_weapon,ru_rocket_launcher]);

                              temp_list_2 = [];
                              InitUc;
                              InitVc;
                              uc_side = side;
                              uc_nation = nation_russian;
                              for i in temp_list do
                                   begin
                                        RemoveVehicleFromVariables(base,i);

                                        vc_chassis = GetChassis(i);
                                        vc_control = GetControl(i);
                                        vc_engine = GetEngine(i);
                                        vc_weapon = ru_heavy_machine_gun;
                                        temp_list_3 = [GetX(i),GetY(i),GetDir(i)];

                                        DestroyUnit(i);
                                        i = CreateVehicle;
                                        SetDir(i,temp_list_3[3]);

                                        PlaceUnitXY(i,temp_list_3[1],temp_list_3[2],false);
                                        temp_list_2 = temp_list_2 ^ i;
                                   end;

                              ai_vehicles_attack = Replace(ai_vehicles_attack,base, ai_vehicles_attack[base] ^ temp_list_2 );
                         end
                    else
                         begin
                              //Remove some humans
                              temp_list = [];
                              temp_list_2 = UnitFilter(ai_attacking_soldiers[base],[f_class,class_bazooker]);
                              temp_list_3 = ai_attacking_soldiers[base] diff temp_list_2;

                              if temp_list_2 > 0 then
                                   temp_list = temp_list ^ temp_list_2[Rand(1,temp_list_2)];

                              if temp_list_3 > 0 then
                                   temp_list = temp_list ^ temp_list_3[Rand(1,temp_list_3)];

                              temp_list_2 = ai_attacking_scientists[base];
                              temp_list = temp_list ^ temp_list_2[Rand(1,temp_list_2)];

                              for i in temp_list do
                                   begin
                                        RemoveHumanFromVariables(base,i,false);
                                        DestroyUnit(i);
                                   end;
                         end;

                    //Remove some vehicles
                    temp_list_2 = ai_vehicles_attack[base];

                    temp_list = [];
                    for i = 1 to [2,2,1][difficulty] do
                         begin
                              if temp_list_2 = 0 then
                                   break;

                              k = temp_list_2[Rand(1,temp_list_2+0)];
                              temp_list = temp_list ^ k;
                              temp_list_2 = temp_list_2 diff k;
                         end;

                    for i in temp_list do
                         begin
                              RemoveVehicleFromVariables(base,i);
                              temp_list_2 = ai_vehicles_defend[base] ^ i;
                              ai_vehicles_defend = Replace(ai_vehicles_defend,base,temp_list_2);
                         end;
               end;

          temp_list = ai_attacking_unit_hex_index[base];
          for i in ai_vehicles_attack[base] ^ ai_attacking_soldiers[base] ^ ai_attacking_scientists[base] do
               temp_list = Replace(temp_list,i,1);

          ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index,base,temp_list);


          num_russian_attacks = num_russian_attacks + 1;

          ai_new_attack_commencing = Replace(ai_new_attack_commencing,base,true);

          ResetVehicleAttackDelay(base);

          until false;
     end;
Function MayAttackGensherBase;
     begin
          if not scout_event_over or game_phase > 1 then
               result = false
          else
               result := tick >= russians_allowed_to_attack_gensher_time;
     end;
Function MaxNumWarVehiclesForAttack(base);
     begin
          case base of
               1,2: result = MaxNumWarVehicles(base);
               3: begin
                    //Computer control
                    result = [0,1,2][difficulty];

                    case num_russian_attacks of
                         0: begin
                         end;
                         1: result = result + 1;
                         2: result = result + 2;
                         else
                              result = result + 3;
                    end;

                    if result > MaxNumWarVehicles(base) then
                         result = MaxNumWarVehicles(base);
               end;
          end;
     end;

//Russian special attackers (only bazookers). Attack Gensher's base from the hill west of Gensher.
Every 0$1+0$0.2 do
     var i, temp_list;
     var base, side;
     begin
          base = 3;
          side = russians;

          while not scout_event_over do
               wait(0$1);

          repeat
          wait(0$1);

          if game_phase > 1 then
               exit;

          if special_russian_attackers > 0 or not MayAttackGensherBase then
               continue;

          ai_human_attack_delay = Replace(ai_human_attack_delay,base, ai_human_attack_delay[base] - 0$1 );

          if ai_human_attack_delay[base] > 0$0 then
               continue;

          if BaseUnderAttack(base,-1) then
               continue;

          //The bazookers to attack arrive
          special_russian_attackers = CreateUnitsWithClass(difficulty + yashin_alive, class_bazooker, side);

          temp_list = ai_attacking_unit_hex_index[base];
          for i in special_russian_attackers do
               begin
                    PlaceUnitArea(i,russian_reinforcements_area,false);

                    temp_list = Replace(temp_list,i,1);
               end;
          ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index,base,temp_list);

          //Reset human attack delay
          ResetHumanAttackDelay(base);

          until false;
     end;


//Attacking war vehicles and humans
//Only Russians attack in this mission.
Every 0$1 do
     var side, i, temp_value, base, temp_list, temp_unit, temp_list_2, k, human_attack_hexes, vehicle_attack_hexes, temp_list_3;
     var center_hex, center_dist, attacking_humans, area, x, y, all_done, un1, val, attacking_vehicles;
     var human_prepare_hexes, vehicle_prepare_hexes;
     var human_dist, vehicle_dist, all_are_ready, strat_2_attack_permitted, vehs_to_move_to_start_pos, prepare_veh_movement;
     var wait_indexes, wait_indexes_pos;
     begin
          side = russians;
          human_dist = 3;  //Max dist to attack hex for humans before proceeding to the next hex
          vehicle_dist = 6;
          vehs_to_move_to_start_pos = [];  //Used to make the Russian vehicles exit the base and form the initial line one at a time (strategy 2).

          all_are_ready = false;  //True when both humans and vehicles are in position and ready to start attacking
          strat_2_attack_permitted = false;  //When using strategy 2. True when vehicles may agressive move and AttackUnit
          prepare_veh_movement = true;  //Supports vehicle line forming (strategy 2) by making the vehicle enter the base before lining up.
          wait_indexes_pos = 1; //The index of "wait_indexes" that is the next stop point on the route

          //Vehicles and humans must be at the last hex in the Vehicle/human attack hexes (respectively)
          //before both groups attack together via the common_attack_hexes.

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if base in [1,2] then
                         continue;

                    if ai_vehicles_attack[base] = 0 and ai_attacking_soldiers[base] = 0 and ai_attacking_scientists[base] = 0 then
                         continue;

                    if ai_new_attack_commencing[base] then
                         begin
                              all_are_ready = false;
                              strat_2_attack_permitted = false;
                              prepare_veh_movement = true;
                              wait_indexes_pos = 1;

                              ai_new_attack_commencing = Replace(ai_new_attack_commencing,base,false);
                         end;

                    case russian_attack_strategy of
                         1: begin  //Go for Gensher's base, then Epsilon Base
                              vehicle_prepare_hexes = [[64,51]];
                              human_prepare_hexes = [[72,55]];
                              vehicle_attack_hexes = [[75,46],[75,30],[70,20],[84,20],[99,29],[108,42],[112,33]];
                              human_attack_hexes = [[75,46],[75,30],[70,20],[84,20],[99,29],[108,42],[112,33]];
                              wait_indexes = [];
                         end;
                         2: begin  //Go for player (player's base is in area "player_base_outer")
                              vehicle_prepare_hexes = [[70,100]];
                              human_prepare_hexes = [[60,82]];
                              vehicle_attack_hexes = [[105,95],[121,93],[123,79],[143,78],[143,71],[144,64],[149,74],[158,88],[141,85],[124,79],[121,93],[105,95],[88,81],[80,63],[78,48],[89,43],[108,40],[100,28]];
                              human_attack_hexes = [[73,95],[84,101],[95,102],[104,100],[114,97],[124,99],[132,100],[137,94],[149,99],[161,104],[158,88],[149,74],[144,64],[143,71],[141,85],[124,79],[121,93],[105,95],[88,81],[80,63],[78,48],[89,43],[108,40],[100,28]];
                              wait_indexes = [[1,5],[3,8]];  //[vehicle_index, human_index] of their respective attack hexes to wait for each other. E.g. [3,6] means at least one vehicle must be on vehicle_attack_hexes[3] and all humans must be on human_attack_hex[6] before anyone proceed to the next attack hex.
                         end;
                         3: begin  //Go for player (player's base is not in area "player_base_outer")
                              vehicle_prepare_hexes = [[71,100]];
                              human_prepare_hexes = [[69,76]];
                              vehicle_attack_hexes = [[94,97],[99,109],[103,94],[88,81],[80,63],[78,48],[89,43],[108,40],[100,28]];
                              human_attack_hexes = [[94,97],[99,109],[103,94],[88,81],[80,63],[78,48],[89,43],[108,40],[100,28]];
                              wait_indexes = [];
                         end;
                    end;

                    area = GetBaseArea(base);

                    attacking_humans = UnitFilter(ai_attacking_soldiers[base],[f_ok]);
                    attacking_vehicles = UnitFilter(ai_vehicles_attack[base],[f_ok]);


                    //Control scientists.
                    //Scientists just follow the attacking soldiers. The "average position" of the
                    //attacking soldiers are calcualted. The scientists should be no further away from
                    //that hex than the soldier furthest away.
                    //If there are no attacking soldiers then attack yourself ("For mother Russia!".
                    if ai_attacking_scientists[base] > 0 then
                         if ai_attacking_soldiers[base] = 0 then
                              begin
                                   attacking_humans = attacking_humans ^ ai_attacking_scientists[base];
                              end
                         else
                              begin
                                   x = 0;
                                   y = 0;
                                   for i in ai_attacking_soldiers[base] do
                                        begin
                                             x = x + GetX(i);
                                             y = y + GetY(i);
                                        end;

                                   x = x div ai_attacking_soldiers[base];
                                   y = y div ai_attacking_soldiers[base];

                                   temp_value = 0;
                                   for i in ai_attacking_soldiers[base] do
                                        begin
                                             k = GetDistUnitXY(i,x,y);

                                             if k > temp_value then
                                                  temp_value = k;
                                        end;

                                   for i in ai_attacking_scientists[base] do
                                        if GetDistUnitXY(i,x,y) > temp_value then
                                             case GetType(IsInUnit(i)) of
                                                  unit_building: ComExitBuilding(i);
                                                  unit_vehicle: ComExitVehicle(i);
                                                  else ComMoveXY(i,x,y);
                                             end;
                              end;


                    //Check if units are ready to go for the next hex
                    if not all_are_ready then
                         begin
                              all_done = true;

                              for k = 1 to 2 do
                                   begin
                                        case k of
                                             1: begin
                                                  temp_list = attacking_vehicles;
                                                  temp_list_2 = vehicle_prepare_hexes;

                                                  if russian_attack_strategy = 2 then
                                                       begin
                                                            if prepare_veh_movement then
                                                                 begin
                                                                      prepare_veh_movement = false;

                                                                      for i in temp_list do
                                                                           if not IsInArea(i,area) then
                                                                                begin
                                                                                     prepare_veh_movement = true;
                                                                                     break;
                                                                                end;
                                                                 end;

                                                            vehs_to_move_to_start_pos = [];

                                                            for i in temp_list do
                                                                 begin
                                                                      vehs_to_move_to_start_pos = vehs_to_move_to_start_pos ^ i;

                                                                      if IsInArea(i,area) then
                                                                           break;
                                                                 end;
                                                       end;
                                             end;
                                             2: begin
                                                  temp_list = attacking_humans;
                                                  temp_list_2 = human_prepare_hexes;
                                             end;
                                        end;

                                        temp_value = true;

                                        for i in temp_list do
                                                  begin
                                                       if ai_attacking_unit_hex_index[base][i] = temp_list_2+0 then  //Units follow each other so if one is out of bounds, all are.
                                                            temp_value = false
                                                       else
                                                            all_done = false;

                                                       temp_list_3 = temp_list_2[ai_attacking_unit_hex_index[base][i]];

                                                       //Make vehicles form a line if strategy 2.
                                                       if k = 1 and russian_attack_strategy = 2 then
                                                            begin
                                                                 temp_list_3 = CalculateVehicleNotReadyHex(temp_list_3,i,attacking_vehicles);
                                                            end;

                                                       if GetDistUnitXY(i,temp_list_3[1],temp_list_3[2]) > [vehicle_dist,human_dist+1][k] and
                                                          not ( GetDistUnitXY(i,temp_list_3[1],temp_list_3[2]) <= 10 and not HasTask(i) ) then
                                                            begin
                                                                 temp_value = false;
                                                                 all_done = false;

                                                                 break;
                                                            end;
                                                  end;

                                        if temp_value then
                                             begin
                                                  if k = 2 then
                                                       temp_list = temp_list union ai_attacking_scientists[base];

                                                  for i in temp_list do
                                                       begin
                                                            temp_list_2 = Replace(ai_attacking_unit_hex_index[base],i, ai_attacking_unit_hex_index[base][i]+1 );
                                                            ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index,base,temp_list_2);
                                                       end;
                                             end;
                                   end;

                              if all_done then
                                   begin
                                        all_are_ready = true;

                                        //Reset attacking unit hex index
                                        for i in attacking_vehicles ^ ai_attacking_soldiers[base] ^ ai_attacking_scientists[base] do
                                             begin
                                                  temp_list_2 = Replace(ai_attacking_unit_hex_index[base], i, 1);
                                                  ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index, base, temp_list_2);
                                             end;
                                   end;
                         end
                    else
                         begin
                              temp_list_3 = [false,false];

                              //Vehicles move individually
                              for i in attacking_vehicles do
                                   if ai_attacking_unit_hex_index[base][i] < vehicle_attack_hexes+0 then
                                        begin
                                             if GetDistUnitXY(i,vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]) <= vehicle_dist then
                                                  begin
                                                       if wait_indexes_pos <= wait_indexes+0 then
                                                            if ai_attacking_unit_hex_index[base][i] = wait_indexes[wait_indexes_pos][1] then
                                                                 begin
                                                                      temp_list_3 = Replace(temp_list_3,1,true);
                                                                      continue;
                                                                 end;

                                                       temp_list_2 = Replace(ai_attacking_unit_hex_index[base],i, ai_attacking_unit_hex_index[base][i]+1 );
                                                       ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index,base,temp_list_2);
                                                  end;
                                        end;

                              //Humans move together
                              temp_value = true;
                              for i in attacking_humans do
                                   if ai_attacking_unit_hex_index[base][i] <= human_attack_hexes+0 then
                                        begin
                                             if GetDistUnitXY(i,human_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],human_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]) > human_dist then
                                                  begin
                                                       temp_value = false;
                                                       break;
                                                  end;
                                        end;

                              if temp_value then
                                   for i in ai_attacking_soldiers[base] ^ ai_attacking_scientists[base] do
                                        if ai_attacking_unit_hex_index[base][i] < human_attack_hexes+0 then
                                             begin
                                                  if wait_indexes_pos <= wait_indexes+0 then
                                                       if ai_attacking_unit_hex_index[base][i] = wait_indexes[wait_indexes_pos][2] then
                                                            begin
                                                                 temp_list_3 = Replace(temp_list_3,2,true);
                                                                 break;  //Since humans follow each other
                                                            end;

                                                  temp_list_2 = Replace(ai_attacking_unit_hex_index[base],i, ai_attacking_unit_hex_index[base][i]+1 );
                                                  ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index,base,temp_list_2);
                                             end;

                              //Check if all can move on after having waited for each other
                              if (temp_list_3 diff true) = 0 then
                                   wait_indexes_pos = wait_indexes_pos + 1;
                         end;
                    

                    //Check if vehicles may attack (strategy 2)
                    if russian_attack_strategy = 2 and not strat_2_attack_permitted then
                         begin
                              temp_list = UnitFilter(attacking_vehicles,[f_inarea,player_base_1]);

                              if temp_list+0 >= attacking_vehicles+0 or temp_list+0 >= 3 then
                                   strat_2_attack_permitted = true
                              else
                                   begin
                                        temp_value = true;

                                        for i in attacking_vehicles do
                                             if Attacks(i) = 0 then
                                                  begin
                                                       temp_value = false;
                                                       break;
                                                  end;

                                        if temp_value then
                                             strat_2_attack_permitted = true;
                                   end;
                         end;


                    //Make the attack
                    for i in attacking_vehicles ^ attacking_humans do
                         begin
                              //Make bazookers shoot time shifting rockets at their targets.
                              if GetClass(i) = class_bazooker then
                                   begin
                                        //Don't bother the bazooker if he/she is about to fire a time shifting or space shifting rocket.
                                        temp_list = GetTaskList(i);
                                        if temp_list > 0 then
                                             if temp_list[1][1] = '&' or temp_list[1][1] = '%' then
                                                  continue;

                                        un1 = Attacks(i);
                                        if un1 > 0 and DangerousUnits([un1]) > 0 then
                                             begin
                                                  temp_list_2 = [GetX(un1),GetY(un1)];
                                                  temp_value = false;

                                                  for val in ai_time_shift_hexes[base] ^ ai_time_shift_hexes_underway[base] do  //don't send a rocket where someone else (probably) soon will
                                                       if GetDistXY(temp_list_2[1],temp_list_2[2],val[1],val[2]) <= ai_time_shift_data[side][2] then
                                                            begin
                                                                 temp_value = true;
                                                                 break;
                                                            end;

                                                  if not temp_value then  //not inside a time shifted area
                                                       begin
                                                            ComTimeShift(i,temp_list_2[1],temp_list_2[2]);

                                                            //The bazooker could die before he/she fires the rocket
                                                            //so we store the hex temporarily and check if the rocket actually is fired later.
                                                            temp_list = Insert(ai_time_shift_hexes_underway[base],1,[temp_list_2[1],temp_list_2[2],i,tick]);
                                                            ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);

                                                            continue;
                                                       end;
                                             end;
                                   end;

                              //If the unit is shooting at a unit which is Ok and there is a dying human
                              //unit within the same distance or closer than the current target then
                              //kill off that human unit first.
                              {temp_value = GetTaskList(i);
                              if temp_value > 0 then
                                        if temp_value[1][1] = '^' then  //'^' is auto attack
                                             begin
                                                  //The unit is auto attacking because it has met an enemy.
                                                  temp_unit = Attacks(i);
                                                  if temp_unit > 0 and IsOk(temp_unit) then
                                                       begin
                                                            temp_value = GetDistUnits(i,temp_unit);
                                                            temp_list = FilterAllUnits([[f_enemy,side],[f_type,unit_human],[f_not,[f_ok]],[f_dist,i,temp_value]]);
                                                            if temp_list > 0 then
                                                                 ComAttackUnit(i,temp_list[1]);

                                                            continue;
                                                       end;
                                             end;}

                              //If the unit is near the base then start shooting at humans if possible - else vehicles and buildings.
                              //Shoot at nearest non-human unit (not so important with human units since we just agressive move).
                              if not all_are_ready then
                                   begin
                                        if i in attacking_vehicles then
                                             begin
                                                  if russian_attack_strategy = 2 then
                                                       begin
                                                            if prepare_veh_movement then
                                                                 begin
                                                                      if not IsInArea(i,area) then
                                                                           ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);

                                                                      continue;
                                                                 end;

                                                            if not i in vehs_to_move_to_start_pos then
                                                                 continue;
                                                       end;

                                                  temp_list = vehicle_prepare_hexes;
                                                  k = vehicle_dist;
                                             end
                                        else
                                             begin
                                                  temp_list = human_prepare_hexes;
                                                  k = human_dist;
                                             end;

                                        if ai_attacking_unit_hex_index[base][i] <= temp_list then
                                             begin
                                                  temp_list_3 = temp_list[ai_attacking_unit_hex_index[base][i]];

                                                  //Make vehicles form a line if strategy 2.
                                                  if i in attacking_vehicles and russian_attack_strategy = 2 then
                                                       begin
                                                            temp_list_3 = CalculateVehicleNotReadyHex(temp_list_3,i,attacking_vehicles);
                                                       end;
                                        
                                                  if GetDistUnitXY(i,temp_list_3[1],temp_list_3[2]) > k then
                                                       begin
                                                            case GetType(IsInUnit(i)) of
                                                                 unit_building: ComExitBuilding(i);
                                                                 unit_vehicle: ComExitVehicle(i);
                                                                 else ComMoveXY(i,temp_list_3[1],temp_list_3[2]);
                                                            end;
                                                       end;
                                             end;
                                   end
                              else
                                   begin
                                        temp_list = FilterAllUnits([[f_enemy,side],[f_type,unit_human],[f_dist,i,20],[f_see,side]]);
                                        if russian_attack_strategy = 2 and GetY(i) >= 59 then  //Don't attack the American base from the south
                                             begin
                                                  k = 1;
                                                  while k <= temp_list+0 do
                                                       begin
                                                            if GetY(temp_list[k]) >= 59 then
                                                                 begin
                                                                      temp_list = Delete(temp_list,k);
                                                                      continue;
                                                                 end;

                                                            k = k + 1;
                                                       end;
                                             end;

                                        temp_value := russian_attack_strategy = 2 and i in attacking_vehicles and not strat_2_attack_permitted;

                                        if temp_list > 0 and not temp_value then
                                             begin
                                                  //Finish off dying humans as first priority
                                                  temp_list_2 = UnitFilter(temp_list,[f_not,[f_lives,250]]);
                                                  if temp_list_2 > 0 then
                                                       temp_list = temp_list_2;

                                                  temp_unit = AllNearestUnitToUnit(temp_list,i);

                                                  if GetLives(temp_unit) > 250 then
                                                       ComAgressiveMove(i,GetX(temp_unit),GetY(temp_unit))
                                                  else
                                                       ComAttackUnit(i,temp_unit);
                                             end
                                        else
                                             begin
                                                  temp_list = FindNonhumansNearUnit(side,i,20,true);
                                                  if temp_list > 0 and not temp_value then
                                                       begin
                                                            //ComAgressiveMove(i,GetX(temp_list[1]),GetY(temp_list[1]));  -> Just follow route so attack strategy won't start attacking the Americans from the south
                                                            if i in attacking_vehicles then
                                                                 begin
                                                                      if GetDistUnitXY(i,vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]) > vehicle_dist then
                                                                           ComAgressiveMove(i,vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]);
                                                                 end
                                                            else
                                                                 if GetDistUnitXY(i,human_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],human_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]) > human_dist then
                                                                      ComAgressiveMove(i,human_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],human_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]);
                                                       end
                                                  else
                                                       begin
                                                            temp_list = FindNonhumansNearUnit(side,i,20,false);
                                                            if temp_list > 0 and not temp_value then
                                                                 begin
                                                                      temp_unit = NearestUnitToUnit(temp_list,i);
                                                                      ComAttackUnit(i,temp_unit);
                                                                 end
                                                            else
                                                                 if i in attacking_vehicles and russian_attack_strategy = 2 and not strat_2_attack_permitted then
                                                                      begin
                                                                           //Form a line. Follow the vehicle in front of you.
                                                                           //Vehicles don't start agressive move and AttackUnit before all attack something. All vehicles
                                                                           //have swirling weapons. This strategy is necessary because of the narrow pass leading up to the
                                                                           //player's base.
                                                                                     if i = attacking_vehicles[1] then
                                                                                          begin
                                                                                               if ai_attacking_unit_hex_index[base][i] <= vehicle_attack_hexes then
                                                                                                    if GetDistUnitXY(i,vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]) > vehicle_dist then
                                                                                                         begin
                                                                                                              //Only move on if all are properly in line
                                                                                                              temp_value = true;
                                                                                                              for k = 2 to attacking_vehicles do
                                                                                                                   if GetDistUnits(attacking_vehicles[k],attacking_vehicles[k-1]) > 7 then
                                                                                                                   //if HasTask(attacking_vehicles[k]) then
                                                                                                                        begin
                                                                                                                             temp_value = false;
                                                                                                                             break;
                                                                                                                        end;

                                                                                                              if temp_value then
                                                                                                                   ComMoveXY(i,vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]);
                                                                                                         end;
                                                                                          end
                                                                                     else
                                                                                          begin
                                                                                               //Follow the vehicle in front of you in the attacking vehicles list
                                                                                               temp_value = 2;
                                                                                               for k = 2 to attacking_vehicles do
                                                                                                    if i = attacking_vehicles[k] then
                                                                                                         begin
                                                                                                              temp_value = k;
                                                                                                              break;
                                                                                                         end;

                                                                                               temp_value = temp_value - 1;

                                                                                               x = GetX(attacking_vehicles[temp_value]);
                                                                                               y = GetY(attacking_vehicles[temp_value]);
                                                                                               
                                                                                               if temp_value > 1 then
                                                                                                    begin
                                                                                                         k = AI_GetTurnDirection(GetX(attacking_vehicles[temp_value-1]), GetY(attacking_vehicles[temp_value-1]),x,y);
                                                                                                    end
                                                                                               else
                                                                                                    k = AI_InvertDirection(GetDir(attacking_vehicles[temp_value]));

                                                                                                         //Slightly complicated calculations to make the cortege of vehicle able to
                                                                                                         //go around corners without greater troubles.
                                                                                                         k = k - 1;
                                                                                                         if k = -1 then
                                                                                                              k = 5;

                                                                                                         temp_list_3 = [];
                                                                                                         for val = 1 to 3 do
                                                                                                              begin
                                                                                                                   temp_list_2 = [];
                                                                                                                   temp_list_2 = Insert(temp_list_2,1,ShiftX(x,k,4));
                                                                                                                   temp_list_2 = Insert(temp_list_2,2,ShiftY(y,k,4));

                                                                                                                   temp_list_3 = Insert(temp_list_3,1,temp_list_2);

                                                                                                                   k = k + 1;
                                                                                                                   if k = 6 then
                                                                                                                        k = 0;
                                                                                                              end;

                                                                                                         temp_list_2 = [];
                                                                                                         for val in temp_list_3 do
                                                                                                              temp_list_2 = temp_list_2 ^ GetDistUnitXY(i,val[1],val[2]);
                                                                                                         temp_list_3 = WorstFromListByList(temp_list_3,temp_list_2);

                                                                                               //if GetDistUnitXY(i,x,y) > 2 then
                                                                                                    ComMoveXY(i,temp_list_3[1],temp_list_3[2]);
                                                                                          end;
                                                                      end
                                                                 else
                                                                      begin
                                                                           if i in attacking_vehicles then
                                                                                begin
                                                                                     if GetDistUnitXY(i,vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]) > vehicle_dist then
                                                                                          ComAgressiveMove(i,vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],vehicle_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]);
                                                                                end
                                                                           else
                                                                                if GetDistUnitXY(i,human_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],human_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]) > human_dist then
                                                                                     ComAgressiveMove(i,human_attack_hexes[ai_attacking_unit_hex_index[base][i]][1],human_attack_hexes[ai_attacking_unit_hex_index[base][i]][2]);
                                                                      end;
                                                       end;
                                             end;
                                   end;
                         end;
               end;

          until false;
     end;
Function FindNonhumansNearUnit(side,un,dist,only_dangerous);
     var weapon_list, temp_list, i, btype, b, val;
     begin
          temp_list = FilterAllUnits([[f_enemy,side],[f_not,[f_type,unit_human]],[f_dist,un,dist],[f_see,side]]);

          if only_dangerous then
               begin
                    result = DangerousUnits(temp_list);
               end
          else
               result = temp_list
     end;
Function DangerousUnits(list);
     var weapon_list, i, btype, b, val;
     begin
          weapon_list = [us_machine_gun,us_light_gun,us_gatling_gun,us_double_gun,us_heavy_gun,us_rocket_launcher,
                                   us_siberium_rocket,us_laser,us_double_laser,
                                   ar_multimissile_ballista,ar_light_gun,ar_double_machine_gun,ar_gatling_gun,
                                   ar_flame_thrower,ar_gun,ar_rocket_launcher,ar_selfpropelled_bomb,
                                   ru_heavy_machine_gun,ru_gatling_gun,ru_gun,ru_rocket_launcher,ru_heavy_gun,
                                   ru_rocket,ru_siberium_rocket,ru_time_lapser];

                    result = [];

                    for i in list do
                         case GetType(i) of
                              unit_human: begin
                                   if not IsOk(i) then  //IsOk does take stimulation drugs into consideration
                                        continue;

                                   result = result ^ i;
                              end;
                              unit_vehicle: begin
                                   if not IsOk(i) then
                                        continue;

                                   case GetControl(i) of
                                        control_manual,control_rider: begin
                                             if UnitsInside(i) = 0 then
                                                  continue;
                                        end;
                                        control_remote: begin
                                             if IsControledBy(i) = 0 then
                                                  continue;
                                        end;
                                        control_computer,control_apeman: begin
                                        end;
                                   end;

                                   if GetWeapon(i) in weapon_list then
                                        result = result ^ i;
                              end;
                              unit_building: begin
                                   if not IsOk(i) then
                                        continue;

                                   btype = GetBType(i);

                                   case btype of
                                        b_turret: begin
                                        end;
                                        b_bunker,b_breastwork,b_armoury,b_barracks,b_fort: begin
                                             if UnitsInside(i) = 0 then
                                                  continue;
                                        end;
                                        else
                                             continue;
                                   end;

                                   if btype in [b_bunker,b_turret] then
                                        if not GetBWeapon(i) in weapon_list then
                                             continue
                                        else
                                             begin
                                                  b = GetBase(i);
                                                  val = false;

                                                  if b = 0 then
                                                       val = true
                                                  else
                                                       if GetEnergy(b)[4] = 0 then
                                                            val = true;

                                                  if val then
                                                       continue;
                                             end;

                                   result = result ^ i;
                              end;
                         end;
     end;
//Function which returns inverted direction
Function AI_InvertDirection(direction);
     var dir;
     begin
          dir = direction - 3;
          if dir < 0 then dir = dir + 6;
          result = dir;
     end;
//Function which returns the direction in which the unit one the specified hex ([x1,y1]) would turn if it was asked to face
//the other specified hex ([x,y]) (ComTurnXY)
Export Function AI_GetTurnDirection(x1,y1,x,y);
     var dist_1, dist_2, b, temp_dist, dir;
     begin
          if not ValidHex(x1,y1) or not ValidHex(x,y) then
               begin
                    result = -1;
                    exit;
               end;

          dist_1 = GetDistXY(x1,y1,x,y);
          dist_2 = 99999;

          //this is the algorithm
          for b = 0 to 5 do
               begin
                    temp_dist = GetDistXY(ShiftX(x1,b,dist_1),ShiftY(y1,b,dist_1),x,y);
                    if temp_dist < dist_2 then
                         begin
                              dist_2 = temp_dist;
                              dir = b;
                         end;
               end;

          result = dir;
     end;
Function CalculateVehicleNotReadyHex(hex,veh,attacking_vehicles);
     var x, num;
     begin
          for num = 1 to attacking_vehicles do
               if attacking_vehicles[num] = veh then
                    break;

          x = ShiftX(hex[1],1,5*(attacking_vehicles-num));
          result = Replace(hex,1,x);
     end;

//Russian special attackers. Bazookers who make their way to the mountain west of Gensher's base and shoot
//from there.
Every 0$1+0$0.1 do
     var i, k, temp_list, un1, temp_list_2, temp_value, val;
     var side, base, attack_hexes;
     begin
          side = russians;
          base = 3;
          
          attack_hexes = [[41,65],[25,46],[26,24],[41,21],[53,17],[60,27],[53,17]];

          repeat
          wait(0$1);

          special_russian_attackers = UnitFilter(special_russian_attackers,[f_alive]);

          for i in special_russian_attackers do
               begin
                    //Make bazookers shoot time shifting rockets at their targets.
                              if GetClass(i) = class_bazooker then
                                   begin
                                        //Don't bother the bazooker if he/she is about to fire a time shifting rocket.
                                        temp_list = GetTaskList(i);
                                        if temp_list > 0 then
                                             if temp_list[1][1] = '&' then
                                                  continue;

                                        un1 = Attacks(i);
                                        if un1 > 0 and DangerousUnits([un1]) > 0 then
                                             begin
                                                  temp_list_2 = [GetX(un1),GetY(un1)];
                                                  temp_value = false;

                                                  for val in ai_time_shift_hexes[base] ^ ai_time_shift_hexes_underway[base] do  //don't send a rocket where someone else (probably) soon will
                                                       if GetDistXY(temp_list_2[1],temp_list_2[2],val[1],val[2]) <= ai_time_shift_data[side][2] then
                                                            begin
                                                                 temp_value = true;
                                                                 break;
                                                            end;

                                                  if not temp_value then  //not inside a time shifted area
                                                       begin
                                                            ComTimeShift(i,temp_list_2[1],temp_list_2[2]);

                                                            //The bazooker could die before he/she fires the rocket
                                                            //so we store the hex temporarily and check if the rocket actually is fired later.
                                                            temp_list = Insert(ai_time_shift_hexes_underway[base],1,[temp_list_2[1],temp_list_2[2],i,tick]);
                                                            ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);

                                                            continue;
                                                       end;
                                             end;
                                   end;

                    k = ai_attacking_unit_hex_index[base][i];

                    if GetDistUnitXY(i,attack_hexes[k][1],attack_hexes[k][2]) > 1 then
                         ComAgressiveMove(i,attack_hexes[k][1],attack_hexes[k][2])
                    else
                         begin
                              if k < attack_hexes - 1 then
                                   begin
                                        temp_list = Replace(ai_attacking_unit_hex_index[base],i,k + 1);
                                        ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index,base,temp_list);
                                   end
                              else
                                   begin
                                        //Patrol back and forth between the last two attack hexes
                                        if Rand(1,6) = 1 then
                                             begin
                                                  if k = attack_hexes - 1 then
                                                       k = attack_hexes+0
                                                  else
                                                       k = attack_hexes - 1;

                                                  temp_list = Replace(ai_attacking_unit_hex_index[base],i,k);
                                                  ai_attacking_unit_hex_index = Replace(ai_attacking_unit_hex_index,base,temp_list);
                                             end;
                                   end;
                         end;
               end;

          until false;
     end;

//Determine which bazookers have successfully fired their time shifting rocket.
//We need an extremely short update time on this update to prevent the situation where
//a bazooker has shot a time shifting rocket but is brought to red life before the
//update runs (in which case we do not detect the time shifting rocket as fired).
Every 0$1 do
     var base, side, val, temp_value, temp_list;
     begin

          repeat
          wait(1);

          for base in ai_bases do
               begin
                    if base in [1,2] then
                         continue;

                    side = GetBaseSide(base);

                    val = 1;
                    while val <= ai_time_shift_hexes_underway[base] do
                         begin
                              if tick = ai_time_shift_hexes_underway[base][val][4] then  //If the order was given at exactly this tick then the unit's task list is not yet updated
                                   begin
                                        val = val + 1;
                                        continue;
                                   end;

                              temp_value = false;
                              temp_list = GetTaskList(ai_time_shift_hexes_underway[base][val][3]);

                              if IsOk(ai_time_shift_hexes_underway[base][val][3]) then  //Task list is reset upon going to red life
                                   begin
                                        if temp_list = 0 then
                                             temp_value = true
                                        else
                                             if not temp_list[1][1] = '&' then
                                                  temp_value = true;
                                   end
                              else
                                   begin
                                        temp_list = Delete(ai_time_shift_hexes_underway[base],val);
                                        ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);

                                        continue;
                                   end;

                              if temp_value then
                                   begin
                                        temp_list = Insert(ai_time_shift_hexes[base],1,[ai_time_shift_hexes_underway[base][val][1],ai_time_shift_hexes_underway[base][val][2],ai_time_shift_data[side][1]]);
                                        ai_time_shift_hexes = Replace(ai_time_shift_hexes,base,temp_list);

                                        temp_list = Delete(ai_time_shift_hexes_underway[base],val);
                                        ai_time_shift_hexes_underway = Replace(ai_time_shift_hexes_underway,base,temp_list);

                                        continue;
                                   end;

                              val = val + 1;
                         end;
               end;

          until false;
     end;

//Update time shifted areas (determine when they have faded away).
Every 0$1+0$0.3 do
     var base, val, temp_list, time;
     begin

          repeat
          wait(0$1);

          for base in ai_bases do
               begin
                    if base in [1,2] then
                         continue;

                    val = 1;
                    while val <= ai_time_shift_hexes[base] do
                         begin
                              time = ai_time_shift_hexes[base][val][3]-0$1;

                              if time <= 0$0 then
                                   begin
                                        temp_list = Delete(ai_time_shift_hexes[base],val);
                                        ai_time_shift_hexes = Replace(ai_time_shift_hexes,base,temp_list);

                                        continue;
                                   end
                              else
                                   begin
                                        temp_list = Replace(ai_time_shift_hexes[base][val],3,time);
                                        temp_list = Replace(ai_time_shift_hexes[base],val,temp_list);
                                        ai_time_shift_hexes = Replace(ai_time_shift_hexes,base,temp_list);
                                   end;

                              val = val + 1;
                         end;
               end;

          until false;
     end;

//The computers's vehicles never seem to run completely out of fuel...
Every 0$5 do
     var base, i;
     begin
          for base in ai_bases do
               for i in (ai_vehicles_attack[base] ^ ai_vehicles_defend[base] ^ ai_cargo_bay[base]) diff 0 do
                    if GetFuel(i) < 10 and GetEngine(i) = engine_combustion then
                         SetFuel(i,10);

          enable;
     end;


//Scientists
//If a scientist is wounded them pull him/her back. Else heal what people needs healing. Else stay inside a lab (if no lab is Ok then help
//construct buildings).
Every 0$1 do
     var side, i, scientists_list, temp_list, temp_unit, base, k, temp_list_3, free_spaces, area;
     begin
          for base in ai_bases do
               begin
                    side = GetBaseSide(base);

                    scientists_list = ai_scientists[base] diff ai_heal_these_humans[base];


                    //Identify scientists who need healing
                    temp_list = ai_heal_these_humans[base];
                    i = 1;
                    while i <= scientists_list do
                         begin
                              if GetLives(scientists_list[i]) <= 700 then
                                   begin
                                        temp_list = temp_list ^ scientists_list[i];
                                        scientists_list = Delete(scientists_list,i);
                                        i = i - 1;
                                   end;

                              i = i + 1;
                         end;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Update people who need healing. People at full HP or people inside a unit (relevant for soldiers and mechanics)
                    //will not receive healing.
                    temp_list = [];
                    for i in ai_heal_these_humans[base] do
                         if GetLives(i) < 1000 and IsInUnit(i) = 0 then
                              temp_list = temp_list ^ i;
                    ai_heal_these_humans = Replace(ai_heal_these_humans,base,temp_list);


                    //Control people who need healing. Make 'em retreat to the human pullback hex.
                    for i in ai_heal_these_humans[base] do
                         if GetDistUnitXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]) > 4 then
                              ComMoveXY(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2]);


                    if scientists_list = 0 then
                         continue;


                    //Heal people. At least one scientist for each human if possible.
                    //Only heal people inside the base.
                    if ai_heal_these_humans[base] > 0 then
                         begin
                              area = GetBaseArea(base);
                              temp_list = UnitFilter(ai_heal_these_humans[base],[f_inarea,area]);

                              if temp_list > 0 then
                                   begin
                                        scientists_list = GetHumansOutOfUnits(scientists_list);

                                        repeat
                                             i = 1;
                                             while i <= temp_list do
                                                  begin
                                                       if scientists_list = 0 then
                                                            break;

                                                       temp_unit = NearestUnitToUnit(scientists_list,temp_list[i]);
                                                       ComHeal(temp_unit,temp_list[i]);
                                                       scientists_list = scientists_list diff temp_unit;

                                                       i = i + 1;
                                                  end;

                                        until scientists_list = 0;
                                   end;
                         end;


                    //Enter and stay in lab
                    DistributeHumansToBuildings(base,scientists_list, UnitFilter(ai_labs[base],[[f_ok],[f_not,[f_constructed]]]),
                         class_scientistic,6,true,false);
               end;

          enable;
     end;