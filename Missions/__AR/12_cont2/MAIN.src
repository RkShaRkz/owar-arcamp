
Export testing;

Export you, nature, legion, legion_alt, americans, mines_side, you_alt, you_alt_escaping;
       
Export Heike, Sonya, Oswald, Ralph, Kowalski, Evelyn, Olaf, Dwayne, Aviradze, Swansson, Khattam, Makise, Gonzo;
Export Abdul, Hugh;
Export Ortlieb;

Export ai_bases;
Export ai_soldiers, ai_attacking_soldiers, ai_engineers, ai_mechanics_defend, ai_mechanics_attack, ai_scientists, ai_attacking_scientists;
Export ai_apemen_engineers, ai_excepted_soldiers, ai_depot, ai_labs, ai_facts, ai_armouries, ai_bunkers, ai_turrets, ai_oil_mine, ai_siberite_mines;
Export ai_fact_extensions, ai_power_plants, ai_control_tower, ai_teleporter, ai_buildings_locations, ai_captured_buildings, ai_sib_bomb_fact;
Export ai_sib_bomb_fact_location, ai_sib_bomb_mechanics;
Export ai_vehicles_defend, ai_vehicles_attack, ai_retreating_vehicles_defend, ai_vehicles_being_repaired, ai_refuel_vehicles_list;
Export ai_vehicle_pullback_hexes, ai_human_pullback_hex, ai_building_under_construction, ai_heal_these_humans, ai_all_buildings;
Export ai_building_constructor, ai_vehicle_being_moved, ai_vehicles_having_been_moved, ai_upcoming_building_data, ai_cannot_rebuild_these_buildings;
Export ai_near_base_dist, ai_vehicle_attack_delay, ai_human_attack_delay, ai_cargo_bay, ai_cargo_bay_under_construction;
Export ai_cargo_bay_destroy_tick, ai_crane, ai_crane_under_construction, ai_crane_destroy_tick, ai_crane_is_being_repaired;
Export ai_crane_driver, ai_attacking_unit_hex_index, ai_retreating_attacking_humans, ai_control_tower_vehicles;
Export ai_teleporter_exit_placed, ai_excepted_buildings, ai_fact_extension_replace_locations, ai_dismantle_these_buildings;
Export ai_taufield_vehicles, ai_implosion_vehicles, ai_attack_strategy, ai_behemoths, ai_behemoth_parking_hexes, ai_behemoth_construction_hex;
Export ai_new_attack_commencing, ai_sib_bomb_vehicles, ai_facts_with_ext_rebuild_map;
Export ai_time_shift_data, ai_time_shift_hexes, ai_time_shift_hexes_underway;
Export ai_contact_time, ai_attack_ground_info_initial, ai_attack_ground_info_sustain, ai_sib_bomb_used_time_matrix, ai_sib_bomb_contamination_duration;
Export ai_defence_replace_mines_centerhexes, ai_defence_mines_hexes, ai_defence_max_num_replace_mines, ai_mine_guys, ai_defence_replace_mines_hexes;

Export cargo_bay_destroyed_in_unsafe_area, legion_prisoners, legion_base_captured, legion_prisoners_shot_to_red, vehicle_captured_events;
Export may_attack_americans, num_legion_prisoners, current_attack_num, remote_vehicles_impossible, sib_imp_veh_dismantled;
Export heike_reinforcements_people, heike_reinforcements_vehicles, contaminating_scientist, contaminating_scientist_went_to_lab;
Export traveling_humans, legion_main_depot_resources;


Starting
begin
     RandomizeAll;
     ResetFog;

     testing = false;  //Testing mission or real campaign?

     ai_bases = [1,2];  //1 = Legion base (former American outpost), 2 = American base, 3 = Legion-pseudo base (used for attack only), 4 = American pseudo-base (used for attack only)
     ai_soldiers = [[],[],[],[]];  //Soldiers for computer sides
     ai_attacking_soldiers = [[],[],[],[]];  //Soldiers who are attacking
     ai_excepted_soldiers = [[],[],[],[]];  //Soldiers who should not be controlled by the ordinary soldier control mechanism.
     ai_engineers = [[],[],[],[]]; //Engineers for computer sides
     ai_mechanics_defend = [[],[],[],[]];  //Mechanics for computer sides (in the base)
     ai_mechanics_attack = [[],[],[],[]];  //Mechanics for computer sides (attacking in vehicles)
     ai_scientists = [[],[],[],[]];  //Scientists for computer sides
     ai_attacking_scientists = [[],[],[],[]];  //Scientists who are attacking
     ai_apemen_engineers = [[],[],[],[]];  //Apemen engineers for computer sides
     ai_sib_bomb_mechanics = [[],[],[],[]];  //Mechanics dedicated to constructing the siberite bomb (in ai_sib_bomb_fact).
     ai_depot = [0,0,0,0];  //The depot of each computer side
     ai_labs = [[],[],[],[]];  //The lab of each computer side
     ai_facts = [[],[],[],[]];  //The factory of each computer side
     ai_armouries = [[],[],[],[]];  //The armouries of each computer side
     ai_bunkers = [[],[],[],[]];  //The bunkers of each computer side
     ai_turrets = [[],[],[],[]];  //The turrets of each computer side
     ai_oil_mine = [0,0,0,0];  //The oil mine of each computer side
     ai_siberite_mines = [[],[],[],[]];  //The siberite mines of each computer side/base
     ai_fact_extensions = [[],[],[],[]];  //The factory extensions of each computer side
     ai_power_plants = [[],[],[],[]];  //The power plants of each computer side
     ai_control_tower = [0,0,0,0];  //Control tower (American) of each side
     ai_teleporter = [0,0,0,0];  //Teleporter (Russian) of each base
     ai_buildings_locations = [[],[],[],[]];  //The locations of all buildings for each side. Data looking like [x,y,dir,btype,labkind1,labkind2,bweapon] (CF. function "ScanBuildings")
     ai_captured_buildings = [[],[],[],[]];  //Identifiers of the buildings each base has lost because someone captured them. Will be recaptured if possible.
     ai_sib_bomb_fact = [0,am_sib_fact,0,0];  //Identifier of the factory dedicated to produce the siberite bomb.
     ai_sib_bomb_fact_location = [[],[GetX(am_sib_fact),GetY(am_sib_fact)],[],[]];  //Location of the factory dedicated to produce the siberite bomb.
     ai_vehicles_defend = [[],[],[],[]];  //Vehicles of each computer side (in the base)
     ai_vehicles_attack = [[],[],[],[]];  //Vehicles of each computer side (attacking the enemy)
     ai_retreating_vehicles_defend = [[],[],[],[]];  //The defending vehicles which need to retreat during an attack on the base.
     ai_vehicles_being_repaired = [[],[],[],[]];  //The vehicles which are going to be or are being repaired.
     ai_refuel_vehicles_list = [[],[],[],[]];  //(defending) vehicles needing to be refueled
     ai_vehicle_pullback_hexes = [ [],
                                   [[39,30],[48,22],[52,44],[49,46]],
                                   [],
                                   []];  //Hexes where vehicles can be parked
     ai_human_pullback_hex = [[137,123],[51,43],[],[]];  //Hex where humans can safely retreat to (center of the base)
     ai_building_under_construction = [0,0,0,0];  //Identifier of building under construction (only 1 building at a time)
     ai_heal_these_humans = [[],[],[],[]];  //Humans needing to be healed
     ai_all_buildings = [[],[],[],[]];  //Identifiers of all buildings for each computer side
     ai_building_constructor = [0,0,0,0];  //Identifier of the engineer who are going to build a building
     ai_vehicle_being_moved = [0,0,0,0];  //Identifier of vehicle which is being moved away from building site
     ai_vehicles_having_been_moved = [[],[],[],[]];  //Identifiers of the vehicles which have been moved away from building site. Don't move them again until construction has started
     ai_upcoming_building_data = [[],[],[],[]];  //Holds the data (building_location syntax) of the building which is going to be build. Isn't reset until the building is completely done.
     ai_cannot_rebuild_these_buildings = [[],[],[],[]];  //Holds the buildings the AI cannot rebuild, typically because the constructor is a crane and a crane can't move blocking vehicles or reach all places like a human. Same format as "ai_buildings_locations".
     ai_near_base_dist = 18;  //Distance within base where the computer scans for enemies to determine if the base is under attack (so this distance also decides how far away from the base retreating attackers will be pursued).
     ai_vehicle_attack_delay = [0$0,0$0,0$0,0$0];  //The minimum time between attacking (with vehicles) (cf. function "ResetVehicleAttackDelay").
     ai_human_attack_delay = [0$0,0$0,0$0,0$0];  //The minimum time between attacking (with humans) (cf. function "ResetHumanAttackDelay").
     ai_attack_strategy = [0,0,0,0];  //The attack strategy for each base.
     ai_cargo_bay = [0,0,0,0];  //holds the identifier of the (automatic) cargo bay
     ai_cargo_bay_under_construction = [false,false,false,false];  //True if the base is currently constructing a cargo bay
     ai_cargo_bay_destroy_tick = [tick,tick,tick,tick];  //To make it worth destroying the cargo bay there is a cooldown on its reconstruction. This variable holds the tick when the cargo bay was destroyed for each base.
     ai_crane = [0,0,0,0];  //Identifier of the crane of each computer
     ai_crane_under_construction = [false,false,false,false];  //True if the base is currently constructing a crane
     ai_crane_destroy_tick = [tick,tick,tick,tick];  //To make it worth destroying the crane there is a cooldown on its reconstruction. This variable holds the tick when the crane was destroyed for each base.
     ai_crane_is_being_repaired = [false,false,false,false];  //True if the crane is under repairation (or needs repairation).
     ai_crane_driver = [0,0,0,0];  //Identifier of the mechanic driving the crane (if the crane is manual).
     ai_attacking_unit_hex_index = [];  //What hex an attacking unit is going for now (index is unit id, value is hex number). Must be reset/prepared when new attacking units are added.
     ai_retreating_attacking_humans = [[],[],[],[]];  //Holds the attacking humans who are retreating.
     ai_control_tower_vehicles = [[],[],[],[]];  //The control tower vehicles of each base (Arabian remote control).
     ai_teleporter_exit_placed = [false,false,false,false];  //Tells if the base's teleport's exit has been placed. There is no function to check if a teleporter's exit has been placed, hence this variable.
     ai_excepted_buildings = [[],[],[],[]];  //Identifier of the buildings the base will not rebuild. Does not work well with capturing buildings (if the player captures one of these buildings and the computer captures it back the building will remain removed from this list) - it's a rare bug though.
     ai_fact_extension_replace_locations = [[],[],[],[]];  //Coordinates of the factory extensions which may be switched with another extension (dismantled and the other extension build instead). Note that ongoing construction in the factory stops if a required extensions is removed.
     ai_facts_with_ext_rebuild_map = [];  //Identifiers of factories that is going to have one or more factory extensions rebuilt is index; value is a list of coordinates for the extensions to rebuild. Used to determine when all extensions have been rebuild for a certain factory.
     ai_dismantle_these_buildings = [[],[],[],[]];  //Identifiers of the buildings which should be dismantled. Does not work well with capturing buildings (if the player captures one of these buildings and the computer captures it back the building will remain removed from this list) - it's a rare bug though.
     ai_taufield_vehicles = [[],[],[],[]];  //Identifiers of the taufield vehicles (Russian) for each base.
     ai_implosion_vehicles = [[],[],[],[]];  //Identifiers of the siberite implosion vehicles (Arabian) for each base.
     ai_sib_bomb_vehicles = [[],[],[],[]];  //Identifiers of the siberite rocket vehicles for each base.
     ai_behemoths = [[],[],[],[]];  //Identifiers of the behemoth vehicles (Russian) for each base.
     ai_behemoth_parking_hexes = [ [],
                                   [],
                                   [],
                                   []];  //Hexes where behemoths can be parked
     ai_behemoth_construction_hex = [[],[],[],[]];  //The hex where the base will construct behemoths.
     ai_new_attack_commencing = [false,false,false,false];  //True when new units have been transfered to the attack variables. The attack procedure should reset. Used only be attack initialize code and attack code.
     ai_time_shift_data = [[],[],[],[],[],[],[],[]];  //[time,radius] - duration and radius of a time shifting rocket (for each side (NOT BASE!)).
     ai_time_shift_hexes = [[],[],[],[]];  //[x,y,time] - hexes where a time shifting rocket has landed (and how long until the effect disappears).
     ai_time_shift_hexes_underway = [[],[],[],[]];  //[x,y,id,tick] - The bazooker who have been ordered to fire a time shifting rocket at hex [x,y] but haven't done so yet.
     Initiate_ai_contact_time;
     ai_attack_ground_info_initial = [];  //[attacking_un,target_un,target_un_side,x,y] - Used to determine if we are under attack by attacking ground, cf. "ai_contact_time".
     ai_attack_ground_info_sustain = [];  //[attacking_un,target_un,target_un_side,x,y] - Used to determine if we are under attack by attacking ground, cf. "ai_contact_time".
     Initiate_ai_sib_bomb_used_time_matrix;
     ai_sib_bomb_contamination_duration = 175*35;  //The time (in ticks) the contamination of a siberite rocket lasts.
     ai_defence_replace_mines_centerhexes = [[],[],[],[]];  //The central hexes in the vicinity of which the computer will (re-)place defensive mines which will only blow when enemies step on them.
     ai_defence_max_num_replace_mines = [-1,-1,-1,-1];  //The number of defensive mines the computer will (re-)place.
     ai_mine_guys = [[],[],[],[]];  //Identifiers of the soldiers who replaces the mines outside the computer's base.
     ai_defence_mines_hexes = [[],[],[],[]];  //The hexes where the computer's defensive mines are currently placed.
     ai_defence_replace_mines_hexes = [[],[],[],[]];  //The hexes where the computer's defence mines are currently placed, but only those mines that can be or have been replaced.

     InitCrateModule;
     InitArtifactVariables;
     InitAttackModule;


     cargo_bay_destroyed_in_unsafe_area = false;  //Turns true if the American cargo bay is destroyed while gathering crates in the unsafe area (probably because the player has captured the minor American base)
     legion_prisoners = [];  //Identifiers of the Legion prisoners the player took when taking over the Legion base.
     legion_base_captured = false;  //True when the player has captured the Legion base on the hill.
     legion_prisoners_shot_to_red = [];  //Identifiers of legion prisoners who have gone to red HP.
     vehicle_captured_events = [];  //[[old_id,new_id],[old_id,new_id]]  Contains info from VehicleCaptured event of the old and new id of the vehicle. Used by the legion prisoner control code.
     may_attack_americans = false;  //True when the player is allowed to attack the main American base.
     num_legion_prisoners = -1;  //The number of Legion prisoners the player must have to get the medal.
     current_attack_num = 0;  //The number of the attack currently going on (or the last attack if the player has repelled it).
     remote_vehicles_impossible = false;  //Turns true if all legion remote control stations in the mountains have been incapacitated.
     sib_imp_veh_dismantled = false;  //True if the player has dismantled a siberite implosion vehicle.
     heike_reinforcements_people =  [];  //The reinforcements from Gensher (the humans)
     heike_reinforcements_vehicles = [];  //The reinforcements from Gensher (the vehicles)
     contaminating_scientist = 0;  //Id of the scientist who contaminates the siberite deposit.
     contaminating_scientist_went_to_lab = false;  //True if the contaminating scientist was brought to a lab (medal).
     traveling_humans = [];  //Identifiers of the humans traveling uphill/downhill.
     legion_main_depot_resources = [[45,Rand(150,250),0],
                                    [25,Rand(150,250),0],
                                    [ 5,Rand(150,250),0]][difficulty];  //[cans,oil,siberite] The resources in Legion's main depot.


     PrepareSides;
     PrepareNature;
     PreparePlayer;
     ScanBuildings;
     PrepareComputerSides;
     PrepareMines;
     InitiateTimeShiftData;

          
     Action;
end;

Function Initiate_ai_contact_time;
     var i;
     begin
          //2-dimensional array which tells how long it was since a side was in contact with another side.
          {
          [[100000,150,100000,100000,1800,100000,100000,100000],
           [150,100000,500,100000,100000,100000,100000,100000],
           [100000,500,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [1800,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000],
           [100000,100000,100000,100000,100000,100000,100000,100000]]
          }
          //Here side 1 (first row) was in contact with side 2 150 ticks ago and with side 5 1800 ticks ago.
          //The variable is necessary because function ContactTime doesn't take attacking ground into consideration
          //(if you attack ground where an enemy unit is, ContactTime doesn't take it as you are attacking the enemy).

          ai_contact_time = [];
          for i = 1 to 8 do
               ai_contact_time = ai_contact_time ^ [[100000,100000,100000,100000,100000,100000,100000,100000]];
     end;

Function Initiate_ai_sib_bomb_used_time_matrix;
     var base;
     begin
          //2-dimensional array which tells when a side used a siberite bomb on a base. If a side has used
          //a bomb more than once, the most recent bomb time is used.
          //First dimension is base. Second dimension is side.
          {
          [[-1,-1,-1,-1,7000,-1,-1,-1],
           [-1,-1,-1,-1,-1,-1,-1,-1],
           [-1,-1,-1,-1,-1,-1,-1,-1],
           [-1,3500,-1,-1,-1,-1,-1,-1]]
          }
          //Here we have 4 bases. Side 2 fired a rocket into base 4 at tick 3500. Side 5 fired a rocket intro base 1
          //at tick 7000.

          ai_sib_bomb_used_time_matrix = [];
          for base in ai_bases do
               ai_sib_bomb_used_time_matrix = ai_sib_bomb_used_time_matrix ^ [[-1,-1,-1,-1,-1,-1,-1,-1]];
     end;

Function InitiateTimeShiftData;
     var side;
     begin
          //The following is approximate data on time shifting rockets.
          //No space-time upgrade researched: Duration 215 tick, radius 4 hexes.
          //Space-time upgrade 1 researched: Duration 320 tick, radius 7 hexes.
          //Space-time upgrade 2 researched: Duration 420 tick, radius 10 hexes.
          //Space-time upgrade 3 researched: Duration 420 tick, radius 10 hexes.

          for side = 1 to 8 do
               if Researched(side,tech_st3) then
                    ai_time_shift_data = Replace(ai_time_shift_data,side,[420,10])
               else
                    if Researched(side,tech_st2) then
                         ai_time_shift_data = Replace(ai_time_shift_data,side,[420,10])
                    else
                         if Researched(side,tech_st1) then
                              ai_time_shift_data = Replace(ai_time_shift_data,side,[320,7])
                         else
                              ai_time_shift_data = Replace(ai_time_shift_data,side,[215,4]);
     end;

Function PrepareSides;
     begin
          //Who is who and decide initial attitudes
          nature = 0;
          americans = 1;
          you = 2;
          legion_alt = 4;  //Legion impostor
          you_alt = 5;     //Player legion prisoners
          you_alt_escaping = 7;  //Player legion prisoners (when they try to escape)
          legion = 8;
          mines_side = 0; //Side mines will be set to belong to

          SetAttitude(americans,you,att_enemy,true);
          SetAttitude(americans,legion_alt,att_friend,true);
          SetAttitude(americans,you_alt,att_enemy,true);
          SetAttitude(americans,you_alt_escaping,att_enemy,true);
          SetAttitude(americans,legion,att_enemy,true);

          SetAttitude(you,legion_alt,att_neutral,true);
          SetAttitude(you,you_alt,att_friend,true);
          SetAttitude(you,you_alt_escaping,att_neutral,true);
          SetAttitude(you,legion,att_enemy,true);

          SetAttitude(legion_alt,you_alt,att_friend,true);
          SetAttitude(legion_alt,you_alt_escaping,att_friend,true);
          SetAttitude(legion_alt,legion,att_friend,true);

          SetAttitude(you_alt,you_alt_escaping,att_friend,true);
          SetAttitude(you_alt,legion,att_friend,true);

          SetAttitude(you_alt_escaping,legion,att_friend,true);
     end;

Function PrepareNature;
     var i, spots, num, agres, count;
     begin
          spots = [[78,148],[68,114],[80,90],[96,63],[178,113],[147,65],[124,15],[114,51]];

          InitUc;
          InitHc;

          uc_side = nature;
          uc_nation = nation_nature;

          agres = -10 + difficulty * 20;

          //Apemen
          count = 3 + Rand(0,1);
          hc_class = class_apeman;
          for i = 1 to count do
               begin
                    if spots = 0 then
                         exit;

                    uc_direction = Rand(0,5);

                    hc_agressivity = Rand(-1*agres,agres);

                    hc_attr = [Rand(11,13),Rand(10,11)];
                    hc_sex = Rand(sex_male,sex_female);
                    hc_skills = [Rand(0,1),Rand(0,1),0,0];

                    num = Rand(1,spots);
                    PlaceUnitXYR(CreateHuman,spots[num][1],spots[num][2],5,false);
                    spots = Delete(spots,num);
               end;

          //Baggies
          hc_class = class_baggie;
          hc_gallery = 'nature_foreg';
          hc_face_number = 4;
          hc_skills = [0,0,0,0];
          for i = 1 to 2 do
               begin
                    if spots = 0 then
                         exit;

                    uc_direction = Rand(0,5);
                    hc_agressivity = Rand(-30,0);
                    hc_attr = [Rand(9,10),Rand(11,12)];

                    num = Rand(1,spots);
                    PlaceUnitXYR(CreateHuman,spots[num][1],spots[num][2],5,false);
                    spots = Delete(spots,num);
               end;
     end;

Function PreparePlayer;
     var other_folks, i, player_humans, player_vehicles, un, temp_list, driver, temp_list_2, k;
     begin
          InitHc;
          InitUc;
          uc_side = you;
          uc_nation = nation_arabian;
          
          if not testing then
               begin
                    Heike = LoadPlayerChar('Heike');

                    Sonya = LoadPlayerChar('Sonya');
                    Oswald = LoadPlayerChar('Oswald');
                    Ralph = LoadPlayerChar('Ralph');
                    Kowalski = LoadPlayerChar('Kowalski');
                    Evelyn = LoadPlayerChar('Evelyn');
                    Olaf = LoadPlayerChar('Olaf');
                    Dwayne = LoadPlayerChar('Dwayne');
                    Aviradze = LoadPlayerChar('Aviradze');
                    Swansson = LoadPlayerChar('Swansson');
                    Khattam = LoadPlayerChar('Khattam');
                    Makise = LoadPlayerChar('Makise');
                    Gonzo = LoadPlayerChar('Gonzo');

                    other_folks = CreateCharacterSet('Others_12_sel') diff 0;
               end
          else
               begin
                    InitHc;

                    PrepareSoldier(sex_female,8);
                    hc_name = 'Heike';
                    Heike = CreateHuman;
                    SetClass(Heike,class_mortar);

                    PrepareScientist(sex_male,8);
                    hc_name = 'Aviradze';
                    Aviradze = CreateHuman;

                    PrepareScientist(sex_female,8);
                    hc_name = 'Makise';
                    Makise = CreateHuman;

                    PrepareSoldier(sex_male,8);
                    hc_name = 'Ralph';
                    Ralph = CreateHuman;
                    SetClass(Ralph,class_mortar);

                    PrepareSoldier(sex_male,8);
                    hc_name = 'Oswald';
                    Oswald = CreateHuman;
                    SetClass(Oswald,class_mortar);

                    PrepareScientist(sex_female,8);
                    hc_name = 'Sonya';
                    Sonya = CreateHuman;
                    SetClass(Sonya,class_engineer);

                    if difficulty <= 2 then
                         begin
                              Preparescientist(sex_male,8);
                              hc_name = 'Khattam';
                              Khattam = CreateHuman;
                         end
                    else
                         Khattam = 0;

                    if difficulty = 1 then
                         begin
                              PrepareSoldier(sex_male,8);
                              hc_name = 'Kowalski';
                              Kowalski = CreateHuman;
                              SetClass(Kowalski,class_mortar);
                         end
                    else
                         Kowalski = 0;

                    Evelyn = 0;
                    Olaf = 0;
                    Dwayne = 0;
                    Swansson = 0;

                    uc_nation = nation_nature;
                    hc_name = 'Gonzo';
                    hc_class = class_apeman_soldier;
                    hc_sex = sex_male;
                    hc_attr = [13,12];
                    hc_basic_skills = [0,0,0,0];
                    hc_skills = [2,0,0,0];
                    Gonzo = CreateHuman;

                    other_folks = [];
               end;

          Abdul = NewCharacter('Abdul');

          player_humans = (([Heike, Sonya, Oswald, Ralph, Kowalski, Evelyn, Olaf, Dwayne, Aviradze, Swansson, Khattam, Makise, Gonzo]) diff 0) ^ other_folks;

          if not testing then
               temp_list = LoadVariable('Vehicles_12_sel',[])
          else
               temp_list = [[nation_arabian,ar_half_tracked,engine_siberite,control_manual,ar_cargo_bay,0,0,0,1],
                            [nation_arabian,ar_half_tracked,engine_siberite,control_manual,ar_cargo_bay,80,0,20,0],
                            [nation_arabian,ar_half_tracked,engine_siberite,control_manual,ar_cargo_bay,40,60,0,0],
                            [nation_arabian,ar_half_tracked,engine_siberite,control_manual,ar_gun,0,0,0,0]];

          player_vehicles = [];
          player_humans = player_humans diff Gonzo;  //Don't make the ape drive

          for i in temp_list do
               begin
                    uc_nation = i[1];
                    vc_chassis = i[2];
                    vc_engine = i[3];
                    vc_control = i[4];
                    vc_weapon = i[5];

                    un = CreateVehicle;

                    if vc_weapon in [ar_cargo_bay,us_cargo_bay,ru_cargo_bay] then
                         begin
                              if i[9] then
                                   SetCargo(un,mat_artifact,40) //artifact
                              else
                                   begin
                                        SetCargo(un,mat_cans,i[6]);
                                        AddCargo(un,mat_oil,i[7]);
                                        AddCargo(un,mat_siberit,i[8]);
                                   end;
                         end;

                    //Find driver, preferably mechanic
                    driver = 0;
                    if UnitFilter(player_humans,[f_class,class_mechanic]) > 0 then
                         driver = UnitFilter(player_humans,[f_class,class_mechanic])[1]
                    else
                         if player_humans > 0 then  //should be the case
                              driver = player_humans[1];

                    if driver > 0 then
                         begin
                              PlaceHumanInUnit(driver,un);
                              player_humans = player_humans diff driver;
                         end;

                    player_vehicles = player_vehicles ^ un;
               end;

          if Gonzo > 0 then
               player_humans = player_humans ^ Gonzo;

          //Place player's units
          for i in player_vehicles ^ player_humans do  //place vehicles first so there is space for them
               begin
                    SetDir(i,4);
                    PlaceUnitArea(i,player_enter_area,false);
               end;

          If Aviradze > 0 then
               SetTech(tech_biodet,you,state_enabled);


          //Reinforcements from Gensher.
          //Consists of non-primary characters from New Kaaba + a few known faces from Ar01.
          InitHc;
          hc_attr = [11,10];
          hc_basic_skills = [2,0,0,0];
          hc_skills = [7,2,2,2];
          hc_class = class_soldier;
          hc_sex = sex_male;
          hc_name = 'Ortlieb';
          hc_gallery = 'ar_new';
          hc_face_number = 38;
          Ortlieb = CreateHuman;

          InitHc;
          hc_attr = [10,12];
          hc_basic_skills = [1,0,1,0];
          hc_skills = [9,0,4,0];
          hc_class = class_soldier;
          hc_sex = sex_male;
          hc_name = 'Gluckman';
          hc_gallery = 'ar_new';
          hc_face_number = 37;
          un = CreateHuman;

          heike_reinforcements_people = [Ortlieb,un];

          if not testing then
               temp_list = CreateCharacterSet('Others_12_not_sel') diff 0
          else
               begin
                    InitHc;
                    temp_list = [];

                    for i = 1 to 3 do
                         begin
                              PrepareHuman(false,[class_soldier,class_soldier,class_mechanic,class_mechanic,class_scientistic][Rand(1,5)],7);
                              temp_list = temp_list ^ CreateHuman;
                         end;
               end;

          //Order the humans by total skill
          temp_list_2 = [];
          for i in temp_list do
               temp_list_2 = temp_list_2 ^ ( GetSkill(i,skill_combat) * 3 + GetSkill(i,skill_mechanical) * 3 + GetSkill(i,skill_scientistic) * 2 );  //We don't care about engineering skill and scientistic skill is not so important
          temp_list = SortListByListDesc(temp_list,temp_list_2);

          for i = 1 to [6,5,4][difficulty] do
               begin
                    if temp_list = 0 then
                         begin
                              InitHc;
                              PrepareHuman(false,[class_soldier,class_soldier,class_mechanic,class_mechanic,class_scientistic][Rand(1,5)],7);
                              temp_list = [CreateHuman];
                         end;

                    heike_reinforcements_people = heike_reinforcements_people ^ temp_list[1];
                    temp_list = Delete(temp_list,1);
               end;

          for i in temp_list do
               SetLastMission(i,11);  //for correct xp bonus later on
          SaveCharacters(temp_list,'NewKaaba_folks_12_cont2');

          InitVc;
          for i = 1 to [2,1,0][difficulty] do
               begin
                    vc_control = control_manual;
                    vc_engine = engine_combustion;
                    vc_chassis = ar_half_tracked;
                    vc_weapon = [ar_gatling_gun,ar_gun,ar_rocket_launcher][Rand(1,3)];

                    un = CreateVehicle;
                    heike_reinforcements_vehicles = heike_reinforcements_vehicles ^ un;

                    temp_list = [];
                    for k in heike_reinforcements_people do
                         temp_list = temp_list ^ GetSkill(k,skill_mechanical);

                    driver = BestFromListByList(heike_reinforcements_people,temp_list);
                    heike_reinforcements_people = heike_reinforcements_people diff driver;

                    SetClass(driver,class_mechanic);
                    PlaceHumanInUnit(driver,un);
               end;
     end;
Function LoadPlayerChar(c_name);
     begin
          if TestCharacters(c_name&'_12_sel') then
               result = CreateCharacter(c_name&'_12_sel')
          else
               result = 0;
     end;

Function ScanBuildings;
     var side, i, temp_list, base, area, k;
     begin
          for base in ai_bases do
               begin
                    area = GetBaseArea(base);
                    side = GetBaseSide(base);

                    ai_all_buildings = Replace(ai_all_buildings,base, FilterAllUnits([[f_side,side],[f_type,unit_building],[f_inarea,area]]) );

                    if base = 1 then
                         begin
                              //Legion has just taken over the base. Buildings are damaged, especially defensive buildings.
                              for i in ai_all_buildings[base] do
                                   begin
                                        if GetNation(i) = nation_arabian then  //These buildings Legion have built themselves after the takeover
                                             continue;

                                        if GetBType(i) in [b_depot,b_warehouse] then
                                             continue;
                                        
                                        if GetBType(i) in [b_armoury,b_barracks,b_bunker,b_turret,b_breastwork] then
                                             k = Rand(800,1000) - [500,450,400][difficulty]
                                        else
                                             if Rand(1,4) = 1 then
                                                  k = Rand(300,500)  //Let's see some smoke
                                             else
                                                  k = Rand(700,1000);

                                        SetLives(i,k);
                                   end;

                              //The AI can't handle multiple depots so ignore one of the depots. Also ignore a lot of the defensive buildings
                              //to focus the computer's defences against the player.
                              i = 1;
                              while i <= ai_all_buildings[base] do
                                   begin
                                        if IsInArea(ai_all_buildings[base][i],legion_base_ignore_scan) then
                                             begin
                                                  temp_list = Delete(ai_all_buildings[base],i);
                                                  ai_all_buildings = Replace(ai_all_buildings,base,temp_list);

                                                  continue;
                                             end;

                                        i = i + 1;
                                   end;
                         end;

                    for i in ai_all_buildings[base] do
                         UpdateBuildingBasicVariables(base,i,true);

                    //Update buildings locations.
                    temp_list = [];
                    //for i in (ai_depot[base] ^ ai_armouries[base] ^ ai_bunkers[base] ^ ai_power_plants[base] ^ ai_control_tower[base] ^ ai_turrets[base] ^ ai_labs[base] ^ ai_facts[base] ^ ai_fact_extensions[base] ^ ai_siberite_mines[base] ^ ai_oil_mine[base] ^ ai_teleporter[base]) diff 0 do
                    for i in ai_all_buildings[base] do
                         begin
                              temp_list = temp_list ^ [ [GetX(i),GetY(i),GetDir(i),GetBType(i),GetLabKind(i,1),GetLabKind(i,2),GetBWeapon(i)] ];
                         end;

                    ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list);
                    SortBuildingLocationsListInCorrectOrder(base);
                    
                    //Make sources visible
                    for i in ai_siberite_mines[base] ^ ai_oil_mine[base] do
                         SetResourceVisibility(GetX(i),GetY(i),side);
               end;


          //Factories switch between extensions as needed.
          //Americans between gun and rocket.
          ai_fact_extension_replace_locations = Replace(ai_fact_extension_replace_locations,2,[[GetX(am_ext_rep),GetY(am_ext_rep)]]);
     end;
Export Function UpdateBuildingBasicVariables(base,un,add);
     var temp_list;
     begin
          //un - unit to add/remove from basic building variables
          //add - boolean (true for add units, false for remove)

          case GetBType(un) of
               b_depot,b_warehouse:
                    if add then
                         ai_depot = Replace(ai_depot,base,un)
                    else
                         if un = ai_depot[base] then
                              ai_depot = Replace(ai_depot,base,0);
               b_lab,b_lab_half,b_lab_full: begin
                    if add then
                         temp_list = ai_labs[base] ^ un
                    else temp_list = ai_labs[base] diff un;
                    ai_labs = Replace(ai_labs,base,temp_list);
               end;
               b_factory,b_workshop: begin
                    if add then
                         temp_list = ai_facts[base] ^ un
                    else temp_list = ai_facts[base] diff un;
                    ai_facts = Replace(ai_facts,base,temp_list);
               end;
               b_armoury,b_barracks,b_fort: begin
                    if add then
                         temp_list = ai_armouries[base] ^ un
                    else temp_list = ai_armouries[base] diff un;
                    ai_armouries = Replace(ai_armouries,base,temp_list);
               end;
               b_breastwork,b_bunker: begin
                    if add then
                         temp_list = ai_bunkers[base] ^ un
                    else temp_list = ai_bunkers[base] diff un;
                    ai_bunkers = Replace(ai_bunkers,base,temp_list);
               end;
               b_turret: begin
                    if add then
                         temp_list = ai_turrets[base] ^ un
                    else temp_list = ai_turrets[base] diff un;
                    ai_turrets = Replace(ai_turrets,base,temp_list);
               end;
               b_oil_mine:
                    if add then
                         ai_oil_mine = Replace(ai_oil_mine,base,un)
                    else
                         if un = ai_oil_mine[base] then
                              ai_oil_mine = Replace(ai_oil_mine,base,0);
               b_siberite_mine: begin
                    if add then
                         temp_list = ai_siberite_mines[base] ^ un
                    else temp_list = ai_siberite_mines[base] diff un;
                    ai_siberite_mines = Replace(ai_siberite_mines,base,temp_list);
               end;
               b_ext_gun,b_ext_noncombat,b_ext_laser,b_ext_computer,b_ext_radar,b_ext_rocket,b_ext_siberium,b_ext_track,b_ext_stitch: begin
                    if add then
                         temp_list = ai_fact_extensions[base] ^ un
                    else temp_list = ai_fact_extensions[base] diff un;
                    ai_fact_extensions = Replace(ai_fact_extensions,base,temp_list);
               end;
               b_solar_power,b_oil_power,b_siberite_power: begin
                    if add then
                         temp_list = ai_power_plants[base] ^ un
                    else temp_list = ai_power_plants[base] diff un;
                    ai_power_plants = Replace(ai_power_plants,base,temp_list);
               end;
               b_control_tower: begin
                    if add then
                         ai_control_tower = Replace(ai_control_tower,base,un)
                    else
                         if un = ai_control_tower[base] then
                              ai_control_tower = Replace(ai_control_tower,base,0);
               end;
               b_teleport: begin
                    if add then
                         begin
                              ai_teleporter = Replace(ai_teleporter,base,un);
                              ai_teleporter_exit_placed = Replace(ai_teleporter_exit_placed,base,false);
                         end
                    else
                         if un = ai_teleporter[base] then
                              begin
                                   ai_teleporter = Replace(ai_teleporter,base,0);
                                   ai_teleporter_exit_placed = Replace(ai_teleporter_exit_placed,base,false);
                              end;
               end;
          end;
     end;
Export Function SortBuildingLocationsListInCorrectOrder(base);
     var i, temp_list, p;
     begin
         temp_list = [];

         for i in ai_buildings_locations[base] do
              begin
                   //Prioritated order in which buildings should be (re-)build.
                   case i[4] of
                        b_depot, b_warehouse: p = 100;
                        b_armoury, b_barracks, b_fort: p = 99;
                        b_solar_power, b_oil_power, b_siberite_power: p = 98;
                        b_breastwork: p = 97;
                        b_factory, b_workshop: p = 96;
                        b_ext_gun, b_ext_noncombat, b_ext_laser, b_ext_computer,
                        b_ext_radar, b_ext_rocket, b_ext_siberium, b_ext_track, b_ext_stitch: p = 95;
                        b_bunker: p = 94;
                        b_control_tower: p = 93;
                        b_turret: p = 92;
                        b_lab, b_lab_half, b_lab_full: p = 91;
                        b_teleport: p = 90;
                        b_siberite_mine: p = 89;
                        b_oil_mine: p = 88;
                   end;

                   temp_list = temp_list ^ p;
              end;

          temp_list = SortListByListDesc(ai_buildings_locations[base],temp_list);
          ai_buildings_locations = Replace(ai_buildings_locations,base,temp_list);
     end;

Function PrepareComputerSides;
     var i, temp_list, base, num;
     begin
          for base in ai_bases do
               begin
                    InitUc;
                    InitHc;

                    uc_side = GetBaseSide(base);
                    uc_nation = GetBaseNation(base);


                    //Soldiers - at least one for each defensive building (remember armouries)
                    //Special units (bazoookers, snipers, mortars) go to armouries as first priority.
                    case base of
                         1: begin
                              temp_list = CreateUnitsWithClass(ai_bunkers[base]+0, class_soldier, base);
                              temp_list = CreateUnitsWithClass([1,2,3][difficulty]*ai_armouries[base], class_mortar, base) ^ temp_list;
                              temp_list = temp_list ^ CreateApemenWithClass([0,1,2][difficulty],class_apeman_soldier,base);
                         end;
                         2: begin
                              temp_list = CreateUnitsWithClass(ai_bunkers[base]+0, class_soldier, base);
                              temp_list = CreateUnitsWithClass([1,3,5][difficulty], class_sniper, base) ^ temp_list;
                         end;
                    end;

                    ai_soldiers = Replace(ai_soldiers,base,temp_list);
                    PlaceComputerUnits(base,ai_soldiers[base],ai_armouries[base]);


                    //Engineers
                    num = [[1,1,2][difficulty],[3,4,5][difficulty]][base];
                    ai_engineers = Replace(ai_engineers,base, CreateUnitsWithClass(num, class_engineer, base) );
                    PlaceComputerUnits(base,ai_engineers[base],[ai_depot[base]]);

                    //Adapt the level of buildings to the highest engineering skill.
                    temp_list = [];
                    for i in ai_engineers[base] do
                         temp_list = temp_list ^ GetSkill(i,skill_engineering);
                    num = BestFromListByList(temp_list,temp_list);
                    for i in ai_all_buildings[base] do
                         SetBLevel(i,num);

                    //Apemen engineers
                    num = [0,[0,1,2][difficulty]][base];
                    ai_apemen_engineers = Replace(ai_apemen_engineers,base, CreateApemenWithClass(num,class_apeman_engineer,base) );
                    PlaceComputerUnits(base,ai_apemen_engineers[base],[ai_depot[base]]);

                    //Mechanics
                    num = [[0,1,2][difficulty],[4,5,6][difficulty]][base];
                    ai_mechanics_defend = Replace(ai_mechanics_defend,base, CreateUnitsWithClass(num, class_mechanic, base) );
                    PlaceComputerUnits(base,ai_mechanics_defend[base],ai_facts[base] diff ai_sib_bomb_fact[base]);

                    num = [0,3][base];
                    ai_sib_bomb_mechanics = Replace(ai_sib_bomb_mechanics,base, CreateUnitsWithClass(num, class_mechanic, base) );
                    PlaceComputerUnits(base,ai_sib_bomb_mechanics[base],ai_sib_bomb_fact[base]);

                    for i in ai_sib_bomb_mechanics[base] do
                         SetSkill(i,skill_mechanical,10);


                    //Scientists
                    num = [[0,1,2][difficulty],[6,7,8][difficulty]][base];
                    ai_scientists = Replace(ai_scientists,base, CreateUnitsWithClass(num,class_scientistic,base) );
                    PlaceComputerUnits(base,ai_scientists[base],ai_labs[base]);


                    //Resources
                    SetResourceType(GetBase(ai_depot[base]),mat_cans,300);
                    SetResourceType(GetBase(ai_depot[base]),mat_oil,300);
                    SetResourceType(GetBase(ai_depot[base]),mat_siberit,300);


                    //Place units
                    //for i in ai_soldiers[base] ^ ai_engineers[base] ^ ai_mechanics_defend[base] ^ ai_scientists[base] ^ ai_apemen_engineers[base] do
                    //     PlaceUnitXYR(i,ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2],7,false);
               end;


          //American main characters
          uc_side = americans;

          Hugh = NewCharacter('Stevens');
          SetClass(Hugh,class_scientistic);

          temp_list = ai_scientists[2] ^ Hugh;
          ai_scientists = Replace(ai_scientists,2,temp_list);

          PlaceComputerUnits(2,[Hugh],[]);


          //Technologies
          SetTech(tech_tech1,americans,state_researched);
          SetTech(tech_tech2,americans,state_researched);
          SetTech(tech_weap1,americans,state_researched);
          SetTech(tech_sib1,americans,state_researched);
          SetTech(tech_comp1,americans,state_researched);

          if difficulty >= 2 then
               begin
                    SetTech(tech_tech3,americans,state_researched);
                    SetTech(tech_weap2,americans,state_researched);
                    SetTech(tech_sib2,americans,state_researched);
                    SetTech(tech_comp2,americans,state_researched);
                    SetTech(tech_opto1,americans,state_researched);
               end;

          if difficulty = 3 then
               begin
                    SetTech(tech_weap3,americans,state_researched);
                    SetTech(tech_sib3,americans,state_researched);
                    SetTech(tech_comp3,americans,state_researched);
                    SetTech(tech_opto2,americans,state_researched);
                    SetTech(tech_opto3,americans,state_researched);
               end;

          SetTech(tech_spacanom,legion,state_researched);
          SetTech(tech_taurad,legion,state_researched);
          SetTech(tech_tech1,legion,state_researched);

          if difficulty >= 2 then
               begin
                    SetTech(tech_stimdrugs,legion,state_researched);
                    SetTech(tech_tech2,legion,state_researched);
                    SetTech(tech_weap1,legion,state_researched);
                    SetTech(tech_sib1,legion,state_researched);
                    SetTech(tech_opto1,legion,state_researched);
                    SetTech(tech_st1,legion,state_researched);
               end;

          if difficulty = 3 then
               begin
                    SetTech(tech_tech3,legion,state_researched);
                    SetTech(tech_weap2,legion,state_researched);
                    SetTech(tech_sib2,legion,state_researched);
                    SetTech(tech_opto2,legion,state_researched);
                    SetTech(tech_opto3,legion,state_researched);
                    SetTech(tech_bio1,legion,state_researched);
                    SetTech(tech_st2,legion,state_researched);
               end;
     end;
Export Function CreateUnitsWithClass(num_units,un_class,base);
     var i, overskill;
     begin
          result = [];

          InitUc;
          InitHc;

          uc_side = GetBaseSide(base);
          uc_nation = GetBaseNation(base);

          overskill = difficulty + 5;

          for i = 1 to num_units do
               begin
                    if Rand(1,3) = 1 then
                         PrepareHuman(false,un_class,-overskill+1)
                    else PrepareHuman(false,un_class,overskill);

                    result = result ^ CreateHuman;
               end;
     end;
Export Function CreateApemenWithClass(num_units,un_class,base);
     var i;
     begin
          result = [];

          InitUc;
          InitHc;
          uc_side = GetBaseSide(base);
          uc_nation = nation_nature;
          hc_class = un_class;

          for i = 1 to num_units do
               begin
                    hc_attr = [Rand(11,13),Rand(10,11)];
                    hc_sex = Rand(sex_male,sex_female);
                    hc_skills = [Rand(1,2),Rand(1,2),0,0];

                    result = result ^ CreateHuman;
               end;
     end;
Function PlaceComputerUnits(base,un_list,buildings_list);
     var num, i, b;
     begin
          //buildings_list contains the buildings in which the units should be placed.
          //It's assumed the buildings can contain 6 units (depot, armoury, workshop, lab).
          //If there isn't space the rest is placed on the human pullback hex.

          num = 1;
          for b in buildings_list do
               begin
                    if num > un_list then
                         break;

                    for i = UnitsInside(b)+1 to 6 do
                         begin
                              if num > un_list then
                                   break;

                              PlaceHumanInUnit(un_list[num],b);
                              num = num + 1;
                         end;
               end;

          for i = num to un_list do
               PlaceUnitXYR(un_list[i],ai_human_pullback_hex[base][1],ai_human_pullback_hex[base][2],7,false);
     end;

Function PrepareMines;
     var temp_list, i, k, temp_list_2, temp_list_3, p;
     begin
          //Mines does damage to units up to 3 hexes away - the further away the less damage.

          //Legion mines in the mountains. These mines are not replaced.
          if difficulty > 1 then
               begin
                    temp_list = [];

                    //East mountain
                    temp_list_2 = [[152,51],[150,49],[148,48],[145,49],[143,49],[140,48],[135,43]];
                    k = [0,3,6][difficulty];
                    for i = 1 to k do
                         begin
                              p = Rand(1,temp_list_2+0);
                              temp_list = temp_list ^ [temp_list_2[p]];
                         end;

                    //North mountain
                    temp_list_2 = [[102,18],[105,21],[109,24],[117,27],[120,26]];
                    k = [0,2,4][difficulty];
                    for i = 1 to k do
                         begin
                              p = Rand(1,temp_list_2+0);
                              temp_list = temp_list ^ [temp_list_2[p]];
                         end;

                    //North-west mountain
                    temp_list_2 = [[92,15],[94,17],[96,20],[98,22],[99,25],[101,26]];
                    k = [0,3,6][difficulty];
                    for i = 1 to k do
                         begin
                              p = Rand(1,temp_list_2+0);
                              temp_list = temp_list ^ [temp_list_2[p]];
                         end;

                    temp_list_3 = [];
                    for i = 1 to temp_list+0 do
                         begin
                              temp_list_2 = GetHexesNearHex(temp_list[i][1],temp_list[i][2],1);
                              k = Rand(1,temp_list_2+0);
                              temp_list_3 = temp_list_3 ^ [temp_list_2[k]];
                         end;

                    temp_list_3 = temp_list_3 diff 0;  //Remove duplicates

                    for i in temp_list_3 do
                         PlaceMine(i[1],i[2],mines_side,0);

                    ai_defence_mines_hexes = Replace(ai_defence_mines_hexes,3,temp_list_3);
               end;
     end;


Function Action;
     var i;
     begin 
          InGameOn;
          wait(2);
          CenterNowOnXY(194,133);

          ComStand(FilterAllUnits([[f_side,you],[f_type,unit_human]]));
          
          wait(0$2);

          InGameOff;

          ComFree(FilterAllUnits([[f_side,you],[f_type,unit_human]]));

          wait(0$0.2);
          ChangeMissionObjectives('M1');

          wait(0$0.2);
          SaveForQuickRestart; 
     end;