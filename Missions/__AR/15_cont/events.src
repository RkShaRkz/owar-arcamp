//Events and dialogues         

//Intro
Export Function Action;
var i, temp, hex;
begin
     Randomize;
     CenterOnXY(88,2);
     InGameOn;


     if GetSide(Omar) = 5 then
     begin
          SetTech(tech_bio1, 5, state_researched);
          PlaceUnitXY(Omar, 289, 249, false);

          repeat

                ComTameXY(Omar, 290, 250);

                for i in OmarTigers do
                    if GetDistUnitXY(i, 299, 259) > 12 then
                       ComMoveXY(i, 299, 259);

                temp = 0;

                for i in OmarTigers do
                    if not IsTamedBy(i) and IsOk(i) then
                       temp = 1;

                if temp = 0 then
                begin
                     RemoveUnit(Omar);
                     SetSide(Omar, 2);

                     ComStop(OmarTigers);

                     for i in OmarTigers do
                         RemoveUnit(i);

                     if OmarVeh > 0 then
                     begin
                          PlaceHumanInUnit(Omar, OmarVeh);
                          PlayerTeam = PlayerTeam ^ OmarVeh;
                     end
                        else
                            PlayerTeam = PlayerTeam ^ Omar;
                end;

                wait(0$0.5);

          until GetSide(Omar) = 2;
     end;


     hex = [];
     for i = 1 to PlayerTeam do
         if GetType(PlayerTeam[i]) = unit_human then
            hex = hex ^ [[Rand(74,102), 1]]
         else
             if not GetChassis(PlayerTeam[i]) in [ru_heavy_wheeled,ru_heavy_tracked,us_heavy_tracked,us_morphling] then
                hex = hex ^ [[Rand(74,102), 2]]
             else
                 hex = hex ^ [[Rand(74,102), 3]];


     for i = 1 to PlayerTeam do
     begin
          SetDir(PlayerTeam[i], [2,3][rand(1,2)]);

          repeat
                //PlaceUnitArea(i, PlayerStartArea, false);

                if HexInfo(hex[i][1], hex[i][2]) = 0 then
                   PlaceUnitXY(PlayerTeam[i], hex[i][1], hex[i][2], false);

                if IsPlaced(PlayerTeam[i]) then
                   break;

                wait(0$0.3);
          until PlayerTeam = 0;

          if GetControl(PlayerTeam[i]) = control_remote then
             LinkVehicleToHuman(PlayerTeam[i], Control_drivers[rand(1,Control_drivers)]);

          ComMoveXY(PlayerTeam[i], GetX(PlayerTeam[i])+2, GetY(PlayerTeam[i])+4);
          AddComMoveXY(PlayerTeam[i], GetX(PlayerTeam[i])+4, GetY(PlayerTeam[i])+8);
          AddComMoveXY(PlayerTeam[i], GetX(PlayerTeam[i])+6, GetY(PlayerTeam[i])+12);
     end;

     wait(0$2);

     if OmarTigers > 0  then
        for i in OmarTigers do
            PlaceUnitArea(i, PlayerStartArea, false);


     Say(Heike, 'In_Heike');

     case Lead of
          Gensher:  SayRadio(Gensher ,'In_Gensher_1');
          Oswald:   SayRadio(Oswald ,'In_Oswald_1');
          Swansson: SayRadio(Swansson ,'In_Swansson_1');
          Dwayne:   SayRadio(Dwayne ,'In_Dwayne_1');
          Ralph:    SayRadio(Ralph ,'In_Ralph_1');
          Kowalski: SayRadio(Kowalski ,'In_Kowalski_1');
     end;

     case Lead of
          Gensher:  SayRadio(Gensher ,'In_Gensher_2');
          Oswald:   SayRadio(Oswald ,'In_Oswald_2');
          Swansson: SayRadio(Swansson ,'In_Swansson_2');
          Dwayne:   SayRadio(Dwayne ,'In_Dwayne_2');
          Ralph:    SayRadio(Ralph ,'In_Ralph_2');
          Kowalski: SayRadio(Kowalski ,'In_Kowalski_2');
     end;

     case Lead of
          Gensher:  SayRadio(Gensher ,'In_Gensher_3');
          Oswald:   SayRadio(Oswald ,'In_Oswald_3');
          Swansson: SayRadio(Swansson ,'In_Swansson_3');
          Dwayne:   SayRadio(Dwayne ,'In_Dwayne_3');
          Ralph:    SayRadio(Ralph ,'In_Ralph_3');
          Kowalski: SayRadio(Kowalski ,'In_Kowalski_3');
     end;

     wait(0$0.5);

     case difficulty of
          1: ChangeMissionObjectives('Main_goals_easy');
          2: ChangeMissionObjectives('Main_goals_medium');
          3: ChangeMissionObjectives('Main_goals_hard');
     end;
     
     wait(0$0.5);

     if 1 in [ATech_SibPlant,ATech_Beh,ATech_TimeLapse,ATech_Laser,ATech_SuperStim,ATech_SPBomb] then
        Query('artifact_use_info');


     SetAreaMapShow(ContaminationArea, 1); //This is for appearance only

     InGameOff;

SaveForQuickRestart;
end;


//Legion bomb
every 0$1 trigger tick > 2$0 do
var temp;
begin
     temp = filterallunits([[f_side,8],[f_btype,b_lab_full],[f_nation,nation_russian]])[1];

     SetTech(tech_sibfiss, 8, state_enabled);
     ComResearch(temp ,tech_sibfiss);

     ComEnterUnit(Kozlov, temp);

     repeat                                       //total time for making a bomb should be [25$0,23$0,20$0][difficulty]
           wait(0$1);

           if 1 in BasesDestroyed then
              exit;
     until tick > [32$0,27$0,22$0][difficulty];

     SetWorkingProgress(temp, 100);

     temp = filterallunits([[f_side,8],[f_btype,b_factory],[f_nation,nation_russian]])[1];

     ComExitBuilding(Kozlov);
     AddComEnterUnit(Kozlov, temp);
     AddComChangeProfession(Kozlov, class_mechanic);

     ComConstruct(temp, ru_heavy_tracked, engine_siberite, control_computer, ru_siberium_rocket);

     repeat
           wait(0$1);

           if 1 in BasesDestroyed then
              exit;
     until tick > [35$0,30$0,25$0][difficulty];

     SetWorkingProgress(temp, 100);
     SetTech(tech_sib3, 8, state_researched);

     repeat
           wait(0$1);
     until ai_sib_bomb_vehicles[1] > 0;


     async;
     case LegionLeader of
          Kurt: SayRadio(Kurt, 'Le_BombKurt');
          Gordon: SayRadio(Gordon, 'Le_BombGordon');
     end;
     sync;


     repeat
           wait(0$0.1);

           if ai_sib_bomb_vehicles[1] > 0 then
              temp = ai_sib_bomb_vehicles[1][1];

           ComAttackPlace(temp, 207, 217);
     until GetWeapon(temp) = ru_siberium_rocket_remainder;

     SayRadio(Kozlov, 'Le_BombKozlov');
end;                                                                                  
                                                                                 
//Russian Bomb                                                                        
every 0$1 trigger tick > 15$0 do
var temp;
begin
     temp = HexInfo(198,238);

     SetTech(tech_sibfiss, 3, state_enabled);
     ComResearch(temp ,tech_sibfiss);

     repeat                                       //total time for making a bomb should be [35$0,33$0,30$0][difficulty]
           wait(0$1);
     until tick > [57$0,47$0,37$0][difficulty];

     SetWorkingProgress(temp, 100);


     ComConstruct(ru_sib_fact, ru_heavy_tracked, engine_siberite, control_computer, ru_siberium_rocket);

     repeat
           wait(0$1);

           //if IsIdle(ru_sib_fact) then
           //   ComConstruct(ru_sib_fact, ru_heavy_tracked, engine_siberite, control_computer, ru_siberium_rocket);

           if GetWorkingProgress(ru_sib_fact) >= 95 then
              SetWorkingProgress(ru_sib_fact, 94);

     until tick > [60$0,50$0,40$0][difficulty];

     SetWorkingProgress(ru_sib_fact, 100);

     SetTech(tech_sib3, 3, state_researched);

     repeat
           wait(0$1);
     until ai_sib_bomb_vehicles[2] > 0;

     if IsOk(Platonov) then
     begin
          DialogueOn;

          SayRadio(Platonov, 'Ru_BombPlatonov1');
          SayRadio(Powell, 'Ru_BombPowel');
          Say(Heike, 'Ru_BombHeike');

          Dialogueoff;
     end;

     RussianNukeAttack = 1;
end;

every 0$1 trigger RussianNukeAttack do
var i, temp, fact, defending_hexes, target, dist;
begin

     if not 2 in ai_bases then
        exit;

     //Recycle the used bombs in normal factory
     for i in ai_sib_bomb_vehicles[2] do
         if GetWeapon(i) = ru_siberium_rocket_remainder then
         begin
              ai_sib_bomb_vehicles = Replace(ai_sib_bomb_vehicles,2, ai_sib_bomb_vehicles[2] diff i);
              ai_sib_bomb_remainder = ai_sib_bomb_remainder ^ i;
         end;

     for i in ai_sib_bomb_remainder do
         if IsDead(i) then
            ai_sib_bomb_remainder = ai_sib_bomb_remainder diff i;


     fact = ai_facts[2][1];

     if IsIdle(fact) and ai_sib_bomb_remainder > 0 then
        ComRecycle(ai_sib_bomb_remainder[1], fact);
     
     //Constantly make new Sib Bombs
     If IsIdle(ru_sib_fact) and ai_sib_bomb_vehicles[2] < 5 then
        ComConstruct(ru_sib_fact, ru_heavy_tracked, engine_siberite, control_computer, ru_siberium_rocket);


     //Attack Pattern: keep one bomb for defense, if we have more then nuke the Americans if they are sill alive, then the closest player unit with siberite on it
     //Defending with Sib Bomb: fire away from the base if the player is attackig. If the player is already entering the base, fire right at them (and trigger loosing contamination)
     if ai_sib_bomb_vehicles[2] > 0 then
     begin
          defending_hexes = [[258,249],[253,233],[244,216],[236,200],[223,184],[209,167],[195,154],[177,152],[160,152],[149,175],[151,193],[151,210],[154,227],[163,244]];

          if BaseUnderAttack(2,2) then
          begin
               temp = FilterUnitsInArea(base_russians, [f_side,2]);

               if temp > 0 then
                  ComAttackPlace(ai_sib_bomb_vehicles[2][1], GetX(temp[1]), GetY(temp[1]))
               else
                   begin
                        temp = [];

                        for i in FilterAllUnits([f_side,2]) do
                            if GetDistUnitArea(i, base_russians) <=20 then
                               temp = temp ^ i;

                        target = 0;

                        for i in temp do
                            if UnitFilter(temp, [f_dist,i,10]) >= 4 then
                            begin
                                 target = i;
                                 break;
                            end;

                        if target > 0 then
                        begin
                             temp = 0;
                             dist = 999;

                             for i in defending_hexes do
                                 if GetDistUnitXY(target, i[1], i[2]) < dist then
                                 begin
                                      temp = i;
                                      dist = GetDistUnitXY(target, i[1], i[2]);
                                 end;

                             ComAttackPlace(ai_sib_bomb_vehicles[2][1], temp[1], temp[2]);

                             if not 2 in bomb_dlg then
                             begin
                                  SayRadio(Platonov, 'Ru_BombPlatonov3');
                                  bomb_dlg = bomb_dlg ^ 2;
                             end;
                        end;
                   end;

          end
             else
                 if ai_sib_bomb_vehicles[2] > 1 then
                    if 3 in ai_bases and ai_depots[3] > 0 then
                    begin
                         ComAttackPlace(ai_sib_bomb_vehicles[2][2], 229, 150);

                         if not 1 in bomb_dlg then
                         begin
                              SayRadio(Platonov, 'Ru_BombPlatonov2');
                              bomb_dlg = bomb_dlg ^ 1;
                         end;
                    end
                    else
                        begin
                             temp = [];

                             for i in FilterAllUnits([[f_side,2],[f_type,unit_vehicle]]) do
                                 if GetWeapon(i) in [ar_cargo_bay,us_cargo_bay,ru_cargo_bay] then
                                 begin
                                      if GetCargo(i, mat_siberit) > 0 then
                                         temp = temp ^ i;
                                 end
                                    else
                                        if GetWeapon(i) = ar_selfpropelled_bomb or GetEngine(i) = engine_siberite then
                                           temp = temp ^ i;


                             if temp > 0 then
                             begin
                                  target = 0;
                                  dist = 999;

                                  for i in temp do
                                      if GetDistUnitArea(i, base_russians) < dist then
                                      begin
                                           target = i;
                                           dist = GetDistUnitArea(i, base_russians);
                                      end;

                                  ComAttackPlace(ai_sib_bomb_vehicles[2][2], GetX(target), GetY(target));
                             end;

                        end;

     end;

enable;
end;

//Initial spawinig of Alliance
every 0$1 trigger AllianceDestroyed = 0 and AllianceSpawned = 0 do
var i, temp, hex, temp_list, temp_list2, base, temp2;
begin
     Randomize;

     for base in [1,3] do
         if not base in ai_bases   or   not IsOk(ai_depots[base][1])   or   ( ai_all_buildings[base] < InitialBuildingCount[base] - 10 and ai_soldiers[base] < InitialSoldierCount[base]/1.5 ) then
            temp2 = base;


     if temp2 = 0 then
        if not 2 in mb_bases or UnitFilter(mb_people, [f_or,[f_class,class_soldier],[f_class,class_bazooker]]) then
           temp2 = 2;


     case temp2 of
          1: begin
                  AllTarget = [1,2,3];

                  if FilterUnitsInArea(base_legion,[f_side,2]) = 0 then
                     temp = [59,83]
                  else
                      begin
                           temp_list = FilterUnitsInArea(base_legion,[f_side,2]);
                           temp_list2 = [];

                           for i in temp_list do
                               temp_list2 = temp_list2 ^ GetDistUnitXY(i, 90,116);

                           i = WorstFromListByList(temp_list, temp_list2);
                           if GetX(i) < 106 then
                              temp = [59,83]
                           else
                               temp = [97,91];
                      end;
             end;

          2: begin
                  temp = [114, 34];
                  AllTarget = [2,1,3];
             end;

          3: begin
                  temp = [193,73];
                  AllTarget = [3,2,1];
             end;
     end;


     if temp > 0 then
        for i in AllianceTeam do
        begin
             PlaceUnitArea(i, AllSpawnArea, false);
             hex = RandHexXYR(temp[1], temp[2], 10, true);

             TeleportUnit(i, hex[1], hex[2], 10, true);

             ai_patrol = replace(ai_patrol, 3, AllianceTeam);
             AllianceSpawned = 1;
        end;

enable;
end;

on Contact(s1, s2) do
begin
     if 2 in [s1,s2] and 7 in [s1,s2] and Alldlg = 0 then
     begin
          CenterOnUnits(AllianceTeam);
          Say(Heike, 'All_Heike2');
          Alldlg = 1;
     end;

end;

//Defeating the enemies
every 0$1 trigger BasesDestroyed < 2 do
var i, j, base, exit_hex, dist, temp, temp_list, Leader;
begin
     i = [0.5, 0.33, 0.25][difficulty];

     if Getlives(LegionLeader) > 0 then
        Leader = [1, 0]
     else
         Leader = [0, 0];

     if not FinalAttack then
        temp = Powell
     else
         if ai_depots[3] = 0 then
            temp = 0
         else
             temp = ai_depots[3][1];

     if GetLives(temp) > 0 then
        Leader = Leader ^ 1
     else
         Leader = Leader ^ 0;


     for base in [1,3] diff BasesDestroyed do
          if Leader[base] = 0 and (ai_soldiers[base] < InitialSoldierCount[base]*i OR ai_soldiers[base] <= 8 OR (base = 3 and AmericansNuked) )then
          begin 
               if base = 1 and tick < LLKilledTick + 0$4 then
                  continue;

               if not base in Dlg_cap and not -base in Dlg_cap then
                  Dlg_cap = Dlg_cap ^ base;

               if base = 1 and tick < LLKilledTick + 0$7 then
                  continue;


               if base in ai_bases then
                  ai_bases = ai_bases diff base;

               if BaseDestroyedTick[base] = -1 then
               begin
                    BaseDestroyedTick = Replace(BaseDestroyedTick, base, tick);

                    if base = 1 then
                       for i in FilterAllUnits([[f_side,8],[f_or,[f_btype,b_factory],[f_btype,b_lab_full]]]) do
                           ComCancel(i);
               end;

               if tick < BaseDestroyedTick[base] + 0$10 then
                  SetAttitude([8,3,1][base], 2, att_neutral, true);


               exit_hex = [[83,164],[45,87],[12,22],[188,35],[207,72],[248,155]];

               for i in FilterAllUnits([[f_side,[8,3,1][base]],[f_type,unit_human]]) do
                   case GetType(IsInUnit(i)) of
                        unit_building: ComExitBuilding(i);
                        unit_vehicle: ComExitVehicle(i);
                        else
                            begin
                                 dist = 99;
                                 temp = 0;

                                 for j in exit_hex do
                                     if GetDistUnitXY(i,j[1],j[2]) < dist then
                                     begin
                                          dist = GetDistUnitXY(i,j[1],j[2]);
                                          temp = j;
                                     end;

                                 if GetDistUnitXY(i,temp[1],temp[2]) > 2 then
                                    ComMoveXY(i,temp[1],temp[2])
                                 else
                                     RemoveUnit(i);
                            end;
                   end;

               if FilterAllUnits([[f_side,[8,3,1][base]],[f_type,unit_human],[f_placed]]) = 0 then
                  BasesDestroyed = BasesDestroyed ^ base;
          end;

enable;
end;

On DiplomacyChanged(side1, side2, attitude) Do
var i, enemyside;
begin
     if side1 <> 2 and side2 <> 2 or attitude = att_neutral then
        exit;

     for i in [side1, side2] do
         if not i = 2 then
            enemyside = i;

     case enemyside of
          8: if tick < BaseDestroyedTick[1] + 0$10 then
                SetAttitude(enemyside, 2, att_neutral, true);
          1: if tick < BaseDestroyedTick[3] + 0$10 then
                SetAttitude(enemyside, 2, att_neutral, true);
     end;
end;

//Reinforcements
every 0$1 trigger BasesDestroyed > 0 do
var i, temp, leader, control;
begin
     DialogueOn;

     case Lead of
          Gensher: leader = 'Gensher';
          Oswald: leader = 'Oswald';
          Swansson: leader = 'Swansson';
          Dwayne: leader = 'Dwayne';
          Ralph: leader = 'Ralph';
          Kowalski: leader = 'Kowalski';
     end;

     
     case BasesDestroyed[1] of
          1: SayRadio(Lead, 'DefLe_' & leader);
          3: SayRadio(Lead, 'DefUs_' & leader);
     end;

     SayRadio(Lead, 'Def2_' & leader);


     DialogueOff;

     repeat
           wait(0$1);
     until BasesDestroyed = 2;

     
     CenterOnXY(89,2);
     Say(Lead, 'Backup_' & leader);

     control = [];
     for i in reinforcements do
         if GetWeapon(i) = ar_control_tower then
            control = control ^ IsDrivenBy(i);

     for i in Reinforcements do
     begin
          SetDir(i, [2,3][rand(1,2)]);

          repeat
                PlaceUnitArea(i, PlayerStartArea, false);

                if IsPlaced(i) then
                   break;

                wait(0$0.3);
          until Reinforcements = 0;

          if GetControl(i) = control_remote then
             LinkVehicleToHuman(i, Control[rand(1,Control)]);

          ComMoveXY(i, GetX(i)+2, GetY(i)+4);
          AddComMoveXY(i, GetX(i)+4, GetY(i)+8);
     end;
end;

//When entering Russian base - contamination
every 0$1 trigger FilterUnitsInArea(base_russians, [f_side,2]) do
var i, temp;
begin

     repeat
           wait(0$1);
     
           for i in FilterUnitsInArea(base_russians, [f_side,2]) do
               if GetClass(i) = class_scientistic or GetClass( IsDrivenBy(i) ) = class_scientistic then
                  temp = 1;
     until temp = 1;

     SetAreaMapShow(ContaminationArea, 0);

     wait(0$0.2);

     case difficulty of
          1: Query('Contamination_easy');
          2: Query('Contamination_medium');
          3: Query('Contamination_hard');
     end;

     SetAreaMapShow(ContaminationArea1, 5);
     SetAreaMapShow(ContaminationArea2, 5);
     SetAreaMapShow(ContaminationArea3, 5);
end;

On SibDepositContaminated(un, x, y) Do
var i, temp, area;
begin
     for i in TargetDeposits do
         if x = i[1] and y = i[2] then
         begin
              Contamination_count = Contamination_count - 1;

              if IsInArea(un, ContaminationArea1) then
                 Contamination_sci = Contamination_sci ^ [[un,ContaminationArea1]]
              else
                  if IsInArea(un, ContaminationArea2) then
                     Contamination_sci = Contamination_sci ^ [[un,ContaminationArea2]]
                  else
                      Contamination_sci = Contamination_sci ^ [[un,ContaminationArea3]];

              break;
         end;
end;

every 0$1 trigger Contamination_sci > 0 do   
var i, temp;
begin
     for i in Contamination_sci do
         if not IsInArea(i[1],i[2]) then
            SetLives(i[1],0);

     for i = 1 to Contamination_sci do
         if GetLives(Contamination_sci[i][1]) = 0 then
         begin
              Contamination_sci = Delete(Contamination_sci,i);
              break;
         end;

enable;
end;

every 0$1 trigger Contamination_count = 0 do
begin
     GameOver(1);                      //Good Chain Reaction - YouWin
end;

On SiberiteRocketExploded(un, x, y) Do
begin
     if InArea(x,y,base_russians) then
        GameOver(0);                   //Bad Chain Reaction - Youlost


     if InArea(x,y,base_us) then
        AmericansNuked = 1;
end;

//Responses from enemy soldiers
every 0$1 do
var i, d, temp, temp2, temp_list;
begin
     Randomize;

     //Legion capitulation
     if 1 in Dlg_cap then
     begin
          temp = UnitFilter(ai_soldiers[1]^ai_engineers[1], [f_or,[f_class,class_apeman],[f_class,class_apeman_soldier],[f_class,class_apeman_kamikaze],[f_class,class_apeman_engineer]]);
          temp_list = UnitFilter(ai_soldiers[1] ^ ai_engineers[1] ^ ai_mechanics_defend[1] ^ ai_scientists[1], [f_ok]);
          temp_list = temp_list diff temp ^ Kurt ^ Gordon ^ Kozlov;

          temp = [];

          for i = 1 to 2 do
          begin
               temp2 = temp_list[Rand(1,temp_list)];
               temp_list = temp_list diff temp2;
               temp = temp ^ temp2;
          end;

          case LegionLeader of
               Kurt: d = 2;
               Gordon: d = 3;
          end;

          if d > 0 then
          begin
               async;
               case temp[1] of
                    Louis: Say(Louis, 'cap_le_Louis' & d);
                    Martin: Say(Martin, 'cap_le_Martin' & d);
                    MarkB: Say(MarkB, 'cap_le_Mark' & d);
                    Suze: Say(Suze, 'cap_le_Suze' & d);
                    Hadarach: Say(Hadarach, 'cap_le_Hadarach' & d);
                    else
                        if GetSex(temp[1]) = sex_male then
                           Say(temp[1], 'cap_le_M' & d)
                        else
                            Say(temp[1], 'cap_le_F' & d);
               end;
               sync;

               Wait(0$7);
          end;

          case temp[2] of
               Louis: Say(Louis, 'cap_le_Louis1');
               Martin: Say(Martin, 'cap_le_Martin1');
               MarkB: Say(MarkB, 'cap_le_Mark1');
               Suze: Say(Suze, 'cap_le_Suze1');
               Hadarach: Say(Hadarach, 'cap_le_Hadarach1');
               else
                   if GetSex(temp[2]) = sex_male then
                      Say(temp[2], 'cap_le_M1')
                   else
                       Say(temp[2], 'cap_le_F1');
          end;

          Dlg_cap = Dlg_cap diff 1;
          Dlg_cap = Dlg_cap ^ -1;
     end;

     //American capitulation
     if 3 in Dlg_cap then
     begin
          temp = UnitFilter(ai_soldiers[3]^ai_engineers[3], [f_or,[f_class,class_apeman],[f_class,class_apeman_soldier],[f_class,class_apeman_kamikaze],[f_class,class_apeman_engineer]]);
          temp_list = UnitFilter(ai_soldiers[3] ^ ai_engineers[3] ^ ai_mechanics_defend[3] ^ ai_scientists[3], [f_ok]);
          temp_list = temp_list diff temp ^ Powell;
          temp = temp_list[Rand(1,temp_list)];

          d = Rand(1,2);
          if GetSex(temp) = sex_male then
             Say(temp, 'cap_am_M' & d)
          else
              Say(temp, 'cap_am_F' & d);

          Dlg_cap = Dlg_cap diff 3;
          Dlg_cap = Dlg_cap ^ -3;
     end;

     //Response to radiation
     if ai_units_irradiated > 0 and DRadCount < 5 then
     begin
          DRadTime = DRadTime - 0$1;

          if DRadTime <= 0 then        //A soldier inside a bunker speaking
          begin
               temp_list = [];

               for i in ai_units_irradiated do
                   temp_list = temp_list ^ UnitsInside(i);

               if temp_list = [] then
                  DRadTime = Rand(0$10,0$40)
               else
                   begin
                        temp = temp_list[Rand(1,temp_list)];
                        d = Rand(1,3);

                        if temp = Suze then
                           Say(Suze, 'rad_Suze' & d)
                        else
                            if not GetNation(temp) = nation_nature then
                               if GetSex(temp) = sex_male then
                                  Say(temp, 'rad_M' & d)
                               else
                                   Say(temp, 'rad_F' & d);

                        DRadTime = Rand(0$10,0$40);
                        DRadCount = DRadCount + 1
                   end;
          end;

          if not DRadEng then        //An engineer that comes close
          begin
               temp_list = [];

               if ArtUse_SibPlant_contaminated > 0 then
                  for i in ArtUse_SibPlant_contaminated do
                      temp_list = temp_list ^ i[1];

               if ArtUse_Beh_count > 0 then
                  for i in ArtUse_Beh_count do
                      temp_list = temp_list ^ HexInfo(i[3],i[4]);


               for i in temp_list do
               begin
                    if GetType(i) = unit_building then
                       temp = 10
                    else
                        temp = 20;

                    temp2 = FilterAllUnits([[f_or,[f_side,1],[f_side,3],[f_side,8]],[f_class,class_engineer],[f_dist,i,temp]]);

                    if temp2 > 0 then
                    begin
                         case GetNation(temp2[1]) of
                              nation_russian: if GetSex(temp2[1]) = sex_male then
                                                 Say(temp2[1], 'rad_engru_M')
                                              else
                                                  Say(temp2[1], 'rad_engru_F');
                              nation_arabian,nation_american:
                                                             if temp2[1] = Louis then
                                                                Say(temp2[1], 'rad_eng_Louis')
                                                             else
                                                                 if GetSex(temp2[1]) = sex_male then
                                                                    Say(temp2[1], 'rad_eng_M')
                                                                 else
                                                                     Say(temp2[1], 'rad_eng_F');
                         end;

                         DRadEng = 1;
                         break;
                    end;
               end;
          end;

     end;

     //When exposed to intense radiation - by the Self Propelled Bomb tech
     if DHighRadList > 0 then
     begin
          wait(0$3);
          temp = DHighRadList[Rand(1,DHighRadList)];
          d = Rand(1,2);

          case temp of
               Suze: Say(Suze, 'highrad_Suze');
               MarkB: Say(MarkB, 'highrad_Mark');
               Martin: Say(Martin, 'highrad_Martin');
               Louis: Say(Louis, 'highrad_Louis');
               Hadarach: Say(Hadarach, 'highrad_Hadarach');
               else
                   if not GetNation(temp) = nation_nature then
                      if GetSex(temp) = sex_male then
                         Say(temp, 'highrad_M' & d)
                      else
                          Say(temp, 'highrad_F' & d);
          end;

          DHighRadList = [];
     end;

     //When double lasers are hacked
     if ContactTime(4) < 0$5 and dlg_DoubleLaserHack < 3 and 3 in ai_bases then
     begin
          temp = FilterUnitsInArea(base_us, [[f_side,1],[f_not,[f_lives,1000]]]);

          if temp > 0 then
             for i in temp do
                 if GetSide(UnitShoot(i)) = 4 then
                 begin
                      case dlg_DoubleLaserHack of
                           0: begin
                                   if UnitsInside(i) > 0 then
                                   begin
                                        temp2 = UnitsInside(i)[1];
                                        d = 1;
                                   end
                                      else
                                          begin
                                               temp2 = ai_soldiers[3][Rand(1,ai_soldiers[3])] diff Powell;
                                               d = 2;
                                          end;

                                   if GetSex(temp2) = sex_male then
                                      Say(temp2, 'DLHack_solM' & d)
                                   else
                                       Say(temp2, 'DLHack_solF' & d);

                                   wait(0$5);
                                   dlg_DoubleLaserHack = 1;
                              end;
                           1: begin
                                   temp2 = ai_scientists[3][Rand(1,ai_scientists[3])];

                                   if GetSex(temp2) = sex_male then
                                      Say(temp2, 'DLHack_sciM')
                                   else
                                       Say(temp2, 'DLHack_sciF');

                                   wait(0$3);
                                   dlg_DoubleLaserHack = 2;
                              end;
                           2: begin
                                   Say(Powell, 'DLHack_Powell');
                                   dlg_DoubleLaserHack = 3;
                              end;
                      end;

                      break;
                 end;
     end;

enable;
end;

//GameStage controls how active the AI will be about engaging the player
every 0$1 do
var i, temp, side;
begin
     GSCount = GSCount + 0$1;


     if GSCount > [13$0, 10$0, 8$0][difficulty] then
        if GSTech < 6 and TechUpdated = 0 then
        begin
             GSTech = GSTech + 1;
             TechUpdated = 1;

             for side in [8,3,1] do
             begin
                  temp = [];

                  case GSTech of
                       1: temp = temp ^ tech_tech3;

                       2: begin
                               if side in [3,1] then
                                  temp = temp ^ tech_comp2;

                               if side in [8,1] then
                                  temp = temp ^ tech_opto2;

                               if side = 8 then
                                  temp = temp ^ tech_bio2;
                          end;

                       3: begin
                               temp = temp ^ tech_weap2;
                               temp = temp ^ tech_sib2;

                               if side = 3 then
                                  temp = temp ^ tech_st2;
                          end;

                       4: begin
                               if side in [3,1] then
                                  temp = temp ^ tech_comp3;

                               if side in [8,1] then
                                  temp = temp ^ tech_opto3;

                               if side = 8 then
                                  temp = temp ^ tech_bio3;
                          end;

                       5: begin
                               temp = temp ^ tech_weap3;
                               temp = temp ^ tech_sib3;
                          end;

                       6: if side = 3 then
                             temp = temp ^ tech_st3;
                  end;

                  case side of
                       8: i = 1;
                       3: i = 2;
                       1: i = 3;
                  end;

                  AiResearch = Replace(AiResearch, i, AiResearch[i] union temp);
             end;
        end;


     if GSCount > [15$0, 12$0, 10$0][difficulty] then
     begin
          GSCount = 0;
          TechUpdated = 0;

          if GSVeh < 3 then
          begin
               GSVeh = GSVeh + 1;

               if GSVeh = 1 then
                  ai_patrol_weapons = [WeaponsForPatrol(1), WeaponsForPatrol(2)];
          end;

          if GSDef < 4 then
          begin
               GSDef = GSDef + 1;
          end;

          if (Rudefences diff 4) > 0 then
             AddDefences(2, GSDef, 0);
     end;

     if LeDefences < GSDef and 1 in ai_bases and not BaseUnderAttack(1, 2) then
     begin
          AddDefences(1, GSDef, 0);
          LeDefences = LeDefences + 1;
     end;

     if UsDefences < GSDef and 3 in ai_bases and not BaseUnderAttack(3, 2) then
     begin
          AddDefences(3, GSDef, 0);
          UsDefences = UsDefences + 1;
     end;


     strings = [];

     if testing then
        strings = strings ^ ['#Am15-1',tick, 'GSVeh', GSVeh, 'GSDef', GSDef, 'GSTech', GSTech];


     if difficulty < 3 then
     begin
          if not 1 in BasesDestroyed then
             temp = [35,30,25][difficulty] - tick/2100
          else
              temp = [60,50,40][difficulty] - tick/2100;

          if temp < 5 then
             temp = 0
          else
              for i in [50,40,30,20,10,0] do
                  if temp > i then
                  begin
                       temp = i + 10;
                       break;
                  end;

          if not 1 in BasesDestroyed then
          begin
               if temp > 0 then
                  strings = strings ^ ['#Ar15-BombCountLegion1', temp]
               else
                   strings = strings ^ ['#Ar15-BombCountLegion2'];
          end
          else
              if temp > 0 then
                 strings = strings ^ ['#Ar15-BombCountRussians1', temp]
              else
                  strings = strings ^ ['#Ar15-BombCountRussians2'];
     end;


     if ArtUse_SibPlant then
        strings = strings ^ ['#Ar15-ArtUseplant'];

     if ArtUse_Beh then
        strings = strings ^ ['#Ar15-ArtUsebeh'];

     if ArtUse_TimeLapse_time then
        strings = strings ^ ['#Ar15-ArtUsetime', ArtUse_TimeLapse_time];

     if ArtUse_Laser then
        strings = strings ^ ['#Ar15-ArtUselaser'];

     if ArtUse_SuperStim then
        strings = strings ^ ['#Ar15-ArtUsestim'];

     if ArtUse_SPBomb then
        strings = strings ^ ['#Ar15-ArtUsebomb'];


    display_strings = strings;


    //setting alternative detection of siberite deposits
    for i = 1 to SibDeposits do
    begin
         if FilterAllUnits([[f_side,2],[f_class,class_scientistic],[f_distxy,SibDeposits[i],SibDeposits[i+1],12]]) > 0 then
            SetResourceVisibility(SibDeposits[i],SibDeposits[i+1], 2);

         i = i + 2;
    end;

enable;
end;


every 0$1 do
var i, j, k, temp, lab;
begin
     for i = 1 to AiResearch do
         for j in AiResearch[i] do
         begin
              case j of
                   tech_weap1,tech_weap2,tech_weap3:  temp = b_lab_weapon;
                   tech_opto1,tech_opto2,tech_opto3:  temp = b_lab_opto;
                   tech_sib1,tech_sib2,tech_sib3:     temp = b_lab_siberium;
                   tech_bio1,tech_bio2,tech_bio3:     temp = b_lab_biological;
                   tech_comp1,tech_comp2,tech_comp3:  temp = b_lab_computer;
                   tech_ST1,tech_ST2,tech_ST3:        temp = b_lab_spacetime;
              end;

              for k in FilterAllUnits([[f_side,[8,3,1][i]],[f_or,[f_btype,b_lab],[f_btype,b_lab_half],[f_btype,b_lab_full]]]) do
                  if temp = 0 or GetLabKind(k, 1) = temp or GetLabKind(k, 2) = temp then
                     if not IsBusy(k) then
                     begin
                          ComResearch(k, j);
                          break;
                     end;
         end;

enable;
end;

On ResearchComplete(research, lab) Do
var base;
begin
     case GetSide(lab) of
          8: base = 1;
          3: base = 2;
          1: base = 3;
     end;

     AiResearch = Replace(AiResearch, base, AiResearch[base] diff research);
end;

