
every 0$1 do
var base, i, j, val, time, temp, base_list;
begin
     Randomize;


     temp = 0;

     if 1 in ai_bases then                        //if half of the patrol was destroyed, trigger the cooldown
        for i in ai_patrol[1] do
            if IsDead(i) then
               temp = temp + 1;

     if temp >= 4 and ai_patrol_status[1] > 0 then
     begin
          ai_patrol_respawntime = Replace(ai_patrol_respawntime, 1, [8$0,7$0,6$0][difficulty]); //[6$30, 5$0, 3$30][difficulty]);
          ai_patrol_status = Replace(ai_patrol_status,1, -1);
     end;

     temp = 0;

     if 2 in ai_bases then
        for i in ai_patrol[2] do
            if IsDead(i) then
               temp = temp + 1;

     if temp >= 4 and ai_patrol_status[2] > 0 then
     begin
          ai_patrol_respawntime = Replace(ai_patrol_respawntime, 2, [8$0,7$0,6$0][difficulty]); //[6$30, 5$0, 3$30][difficulty]);
          ai_patrol_status = Replace(ai_patrol_status,2, -1);
     end;

     ai_patrol_respawntime = [ai_patrol_respawntime[1] - 0$1, ai_patrol_respawntime[2] - 0$1];



     base_list = [];

     if 1 in ai_bases and ai_patrol_respawntime[1] <= 0 then
        base_list = base_list ^ 1;
     if 3 in ai_bases and ai_patrol_respawntime[2] <= 0 then
        base_list = base_list ^ 2;

     if not 1 in ai_bases and not 3 in ai_bases then
        exit;


     for base in base_list do                    //Legion, Americans
     begin

          if base in ai_patrol_out then                  //continously check if the group is ready, unless it is already out
             continue;

          val = 0;

          for i in ai_patrol[base] do
              if GetLives(i) <= 250 then
                 val = 1;

          if val = 0 then
          begin
               if ai_patrol_status[base] = 0 then
                  ai_patrol_status = Replace(ai_patrol_status,base,1);
          end
          else
              begin
                   if ai_patrol_status[base] > 0 then       // if the group was ready but got damaged, the timer is reset
                      ai_patrol_timer = Replace(ai_patrol_timer,base,3$0);

                   if ai_patrol_status[base] = -1 then
                      ai_patrol_weapons = Replace(ai_patrol_weapons, base, WeaponsForPatrol(base));

                   ai_patrol_status = Replace(ai_patrol_status,base,0);
                   ai_patrol_PathChoice = Replace(ai_patrol_PathChoice, base, 1);
              end;
     end;


     for base in base_list do                                 //countdown
         if ai_patrol_status[base] > 0 and not (base in ai_patrol_out) then
         begin
              //Triggered: sent out against attacking player, either the main or minor base
              if (ai_patrol[base] diff 0 ^ -1) > 2 then
                 if BaseUnderAttack([1,3][base], 2) then
                 begin
                      ai_patrol_out = ai_patrol_out ^ base;
                      ai_patrol_hexcount = Replace(ai_patrol_hexcount, base, 1);
                      ai_patrol_timer = Replace(ai_patrol_timer, base, 3$0);
    
                      ai_patrol_path = Replace(ai_patrol_path, base, []);
                      ai_patrol_PathChoice = Replace(ai_patrol_PathChoice, base, 5);
                 end
                 else
                     if GSVeh > 1 then
                     begin
                          i = [1,3][base];
                          temp = 0;
             
                          for j in mb_buildings[i] do
                              if GetLives(j) < 500 then
                                 temp = temp + 1;
                 
                          if temp + mb_to_build_list[i] > 2 then
                          begin
                               ai_patrol_out = ai_patrol_out ^ base;
                               ai_patrol_hexcount = Replace(ai_patrol_hexcount, base, 1);
                               ai_patrol_timer = Replace(ai_patrol_timer, base, 3$0);
                       
                               ai_patrol_path = Replace(ai_patrol_path, base, possible_paths[base][1]);
                               ai_patrol_PathChoice = Replace(ai_patrol_PathChoice, base, 1);
                          end;
                     end;


              //Timed: send on patrol once in a while
              time = ai_patrol_timer[base] - 0$1;
              ai_patrol_timer = Replace(ai_patrol_timer,base,time);

              if ai_patrol_timer[base] <= 0 then
                 ai_patrol_status = Replace(ai_patrol_status, base, ai_patrol_status[base] + 1);

              if ai_patrol_timer[base] <= 0 and ai_patrol_status[base] = 2 then
              begin
                   //select path and additional time

                   case GSVeh of
                        0,1: begin
                                ai_patrol_timer = Replace(ai_patrol_timer,base,3$0);
                                ai_patrol_status = Replace(ai_patrol_status, base, 1);
                                break;
                           end;
                        2: begin
                                if base = 1 then
                                   temp = [1,2]
                                else
                                    temp = [1];
                           end;
                        3: temp = [2,3,3,4];
                   end;

                   i = temp[rand(1,temp)];
                   ai_patrol_PathChoice = Replace(ai_patrol_PathChoice, base, i);

                   if base = 1 then
                      val = [1$0, 1$0, 2$0, 3$0][i]
                   else
                       val = [1$0, 2$0, 3$0, 3$0][i];

                   ai_patrol_timer = Replace(ai_patrol_timer, base, val);
              end;

              if ai_patrol_status[base] = 3 then
              begin
                   ai_patrol_out = ai_patrol_out ^ base;
                   ai_patrol_hexcount = Replace(ai_patrol_hexcount, base, 1);
                   ai_patrol_timer = Replace(ai_patrol_timer, base, 3$0);
                   ai_patrol_status = Replace(ai_patrol_status, base, 0);

                   ai_patrol_path = Replace(ai_patrol_path, base, possible_paths[base][ai_patrol_PathChoice[base]]);
                   ai_patrol_PathChoice = Replace(ai_patrol_PathChoice, base, 1);
              end;

         end;

enable;
end;


//Controlling the patrol
every 0$1 trigger ai_patrol_out > 0 do
var side, i, j, temp, temp_list, detected_enemies, priority, patrol_units;
var tSoldiers, tMortars, tCivilians, tHovercrafts, tGuns, tRockets, tBombs, tCargos, tControls;   //Targets for the AI
var pGuns, pHGs, pRockets, pLasers, pGatlings, pBombs, pRadar, pCargo, pLapsers;                                            //Specific Patrol units
var tAmLasers, tAmHgs, tAmRockets, tAmMedium;     //include american units for legion, in case they meet
var tbuilding;
begin

     for side in ai_patrol_out do
     begin
          if side in ai_patrol_out_otherenemies then
             continue;

          temp_list = [];

          for i = 1 to ai_patrol[side] do
              if IsOk(ai_patrol[side][i]) then
                 temp_list = temp_list ^ ai_patrol[side][i]
              else
                  temp_list = temp_list ^ 0;

          ai_patrol = Replace(ai_patrol, side, temp_list);

          patrol_units = temp_list diff 0;


          if patrol_units = 0 then
          begin
               ai_patrol_out = ai_patrol_out diff side;                              //Return to base
               ai_patrol_timer = Replace(ai_patrol_timer,side,2$0);
               break;
          end;


          detected_enemies = [];

          //Detected enemies are the ones currently seen and within a radar range from any of the patrol units
          for i in patrol_units do
          begin
               temp = FilterAllunits([ [f_see, [8,1,7][side]], [f_enemy, [8,1,7][side]], [f_dist,i,25], [f_not,[f_side,3]], [f_not,[f_type,unit_building]] ]);
               {
               temp = temp ^ FilterAllUnits([ [f_see, [8,1,7][side]], [f_enemy, [8,1,7][side]], [f_dist,i,25], [f_or,[f_btype,b_bunker],[f_btype,b_armoury],[f_btype,b_barracks]], [f_not,[f_empty]] ]);

               temp_list = FilterAllUnits([ [f_see, [8,1,7][side]], [f_enemy, [8,1,7][side]], [f_dist,i,25], [f_btype,b_turret]]);
               if GetBase(temp_list[1]) > 0 then
                  if GetEnergy( GetBase(temp_list[1]) )[4] > 0 then
                     temp = temp ^ temp_list;
               }

               if temp > 0 then
                  for j in temp do
                      if not j in detected_enemies then
                         detected_enemies = detected_enemies ^ j;

          end;

          if side in [2,3] then
             detected_enemies = detected_enemies diff FilterAllUnits([f_side,4]); //an exception for americans (and alliance) - don't attack the altamerican side

          for i in detected_enemies do
              if unitfilter(patrol_units,[f_dist,i,35]) = 0 then
                 detected_enemies = detected_enemies diff i;



          if side = 3 then  //Alliance detects all player units automatically
          begin
               case AllTarget[1] of
                    1: temp_list = [AllSeekLeftCentre, base_legion, AllSeekLeftFront, AllSeekLeftBack];
                    2: temp_list = [AllSeekCentre];
                    3: temp_list = [AllSeekRightCentre, base_us, AllSeekRightFront, AllSeekRightBack];
               end;

               detected_enemies = [];

               for i in temp_list do
                   if FilterUnitsInArea(i, [f_side,2]) > 0 then
                   begin
                        detected_enemies = detected_enemies ^ FilterUnitsInArea(i, [f_side,2]);
                        break;
                   end;

               if detected_enemies = 0 then
               begin
                    ai_patrol_out = ai_patrol_out diff 3;
                    continue;
               end;
          end;


          if detected_enemies > 0 then
             ai_patrol_engaging = Replace(ai_patrol_engaging, side, 1)
          else
              ai_patrol_engaging = Replace(ai_patrol_engaging, side, 0);


          if ai_patrol_engaging[side] = 1 then
          begin
               tSoldiers = unitfilter(detected_enemies,[f_class,class_soldier]);
               tMortars = unitfilter(detected_enemies,[f_class,class_mortar]);
               tCivilians = unitfilter(detected_enemies,[f_or,[f_class,class_engineer],[f_class,class_mechanic],[f_class,class_scientistic]]);
               tHovercrafts = unitfilter(detected_enemies,[f_chassis,ar_hovercraft]);

               tGuns = unitfilter(detected_enemies,[ [f_not,[f_chassis,ar_hovercraft]],                     //gun set comprises all weapons, except rockets and bombs, that aren't hovercrafts
                     [f_or,[f_weapon,ar_gun],[f_weapon,ar_double_machine_gun],[f_weapon,ar_flame_thrower],[f_weapon,ar_gatling_gun],[f_weapon,ar_light_gun],[f_weapon,ar_multimissile_ballista],
                           [f_weapon,ru_gun],[f_weapon,ru_heavy_machine_gun],[f_weapon,ru_gatling_gun],
                           [f_weapon,us_double_gun],[f_weapon,us_machine_gun],[f_weapon,us_gatling_gun],[f_weapon,us_light_gun]] ]);

               tRockets = unitfilter(detected_enemies,[f_or,[f_weapon,ar_rocket_launcher],[f_weapon,ru_rocket_launcher],[f_and,[f_weapon,us_rocket_launcher],[f_not,[f_chassis,us_morphling]]]]);

               tBombs = unitfilter(detected_enemies,[f_weapon,ar_selfpropelled_bomb]);
               tCargos = unitfilter(detected_enemies,[f_or,[f_weapon,ar_radar],[f_weapon,ar_cargo_bay]]);      //cargos and radars grouped together
               tControls = unitfilter(detected_enemies,[f_weapon,ar_control_tower]);

               tAmRockets = unitfilter(detected_enemies, [f_and,[f_weapon,us_rocket_launcher],[f_chassis,us_morphling]]);    
               tAmHgs = unitfilter(detected_enemies, [f_or,[f_weapon,us_heavy_gun],[f_weapon,us_laser]]);
               tAmLasers = unitfilter(detected_enemies, [f_weapon,us_double_laser]);
               tAmMedium = unitfilter(detected_enemies, [f_or,[f_weapon,us_double_gun],[f_weapon,us_gatling_gun]]);

               tbuilding = unitfilter(detected_enemies, [f_type,unit_building]);

               pGuns = unitfilter(patrol_units,[[f_or,[f_weapon,ar_gun],[f_weapon,us_double_gun],[f_weapon,ru_gun]], [f_ok]]);
               pHGs = unitfilter(patrol_units,[[f_or,[f_weapon,us_heavy_gun],[f_weapon,us_laser],[f_weapon,ru_heavy_gun]], [f_ok]]);   //include normal lasers together with hgs
               pRockets = unitfilter(patrol_units,[[f_or,[f_weapon,ar_rocket_launcher],[f_weapon,us_rocket_launcher],[f_weapon,ru_rocket_launcher]], [f_ok]]);
               pLasers = unitfilter(patrol_units,[[f_weapon,us_double_laser], [f_ok]]);
               pGatlings = unitfilter(patrol_units,[[f_or,[f_weapon,ar_flame_thrower],[f_weapon,ar_gatling_gun],[f_weapon,us_gatling_gun],[f_weapon,ru_gatling_gun]], [f_ok]]);   //Gatlings and Flamers grouped together
               pBombs = unitfilter(patrol_units, [f_weapon,ar_selfpropelled_bomb]);
               pLapsers = unitfilter(patrol_units, [f_weapon,ru_time_lapser]);

               pCargo = unitfilter(patrol_units, [f_or,[f_weapon,us_cargo_bay],[f_weapon,ru_cargo_bay]]);

               temp = unitfilter(patrol_units, [f_or,[f_weapon,ar_radar],[f_weapon,us_radar]]);
               if temp > 0 then
                  pRadar = temp[1];



               //Attack pattern

               if pGuns > 0 then  //Target priority for guns: Controls, Bombs, Rockets, Hovercrafts, Guns, Cargos, humans
               begin
                    priority = [tControls, tBombs, tRockets, tHovercrafts, tGuns, tCargos, tMortars, tSoldiers, tCivilians,   tAmLasers, tAmHgs, tAmRockets, tAmMedium, tbuilding];

                    for i in priority do
                        if i > 0 then
                        begin
                             temp = unitfilter(i,[f_not,[f_lives,700]]);

                             if temp > 0 then
                             begin
                                  temp_list = [];
                                  for j in temp do
                                      temp_list = temp_list ^ GetLives(j);

                                  temp = WorstFromListByList(temp, temp_list);

                                  ComAttackUnit(pGuns,temp[1]);
                                  break;
                             end
                             else
                                 begin
                                      ComAttackUnit(pGuns,i[1]);
                                      break;
                                 end;

                        end;

               end;

               if pHGs > 0 then  //Target priority for heavy guns: Controls, Bombs, Rockets, Hovercrafts, Guns, Cargos, humans
               begin
                    priority = [tControls, tBombs, tRockets, tHovercrafts, tGuns, tCargos, tMortars, tSoldiers, tCivilians,   tAmLasers, tAmHgs, tAmRockets, tAmMedium, tbuilding];

                    for i in priority do
                        if i > 0 then
                        begin
                             temp = unitfilter(i,[f_not,[f_lives,700]]);

                             if temp > 0 then
                             begin
                                  temp_list = [];
                                  for j in temp do
                                      temp_list = temp_list ^ GetLives(j);

                                  temp = WorstFromListByList(temp, temp_list);

                                  ComAttackUnit(pHGs,temp[1]);
                                  break;
                             end
                             else
                                 begin
                                      ComAttackUnit(pHGs,i[1]);
                                      break;
                                 end;

                        end;

               end;

               if pRockets > 0 then  //Target priority for rockets: Mortars, Controls, Rockets, Guns, Bombs, Hovercrafts, Cargos, other humans
               begin
                    Priority = [tMortars, tControls, tRockets, tGuns, tBombs, tHovercrafts, tCargos, tSoldiers, tCivilians,   tAmLasers, tAmHgs, tAmRockets, tAmMedium, tbuilding];

                    for i in priority do
                        if i > 0 then
                        begin
                             temp = unitfilter(i,[f_not,[f_lives,700]]);

                             if temp > 0 then
                             begin
                                  temp_list = [];
                                  for j in temp do
                                      temp_list = temp_list ^ GetLives(j);

                                  temp = WorstFromListByList(temp, temp_list);

                                  ComAttackUnit(pRockets,temp[1]);
                                  break;
                             end
                             else
                                 begin
                                      ComAttackUnit(pRockets,i[1]);
                                      break;
                                 end;

                        end;
               end;

               if pLasers > 0 then  //Target priority for Lasers: Controls, other vehicles, humans
               begin
                    Priority = [tControls, tBombs, tRockets, tGuns, tHovercrafts, tCargos, tMortars, tSoldiers, tCivilians,  tAmLasers, tAmHgs, tAmRockets, tAmMedium, tbuilding];
    
                    for i in priority do
                        if i > 0 then
                        begin
                             temp = unitfilter(i,[f_not,[f_lives,700]]);

                             if temp > 0 then
                             begin
                                  temp_list = [];
                                  for j in temp do
                                      temp_list = temp_list ^ GetLives(j);

                                  temp = WorstFromListByList(temp, temp_list);

                                  if pLasers = 1 then
                                     ComAttackUnit(pLasers,temp[1])   
                                  else 
                                      DoubleLaserAttack(pLasers, temp[1], Area_inaccessible, 1);

                                  break;
                             end
                             else
                                 begin
                                      if pLasers = 1 then
                                         ComAttackUnit(pLasers, i[1])
                                      else
                                          DoubleLaserAttack(pLasers, i[1], Area_inaccessible, 1);

                                      break;
                                 end;

                        end;
               end;

               if pGatlings > 0 then  //Target priority for flamers: Mortars, Soldiers, Civilians, Controls, Rockets, other vehicles
               begin
                    Priority = [tMortars, tSoldiers, tCivilians, tControls, tRockets, tGuns, tBombs, tHovercrafts, tCargos,   tAmLasers, tAmHgs, tAmRockets, tAmMedium, tbuilding];

                    for i in priority do
                        if i > 0 then
                        begin
                             temp = unitfilter(i,[f_not,[f_lives,700]]);

                             if temp > 0 then
                             begin
                                  temp_list = [];
                                  for j in temp do
                                      temp_list = temp_list ^ GetLives(j);

                                  temp = WorstFromListByList(temp, temp_list);

                                  ComAttackUnit(pGatlings,temp[1]);
                                  break;
                             end
                             else
                                 begin
                                      ComAttackUnit(pGatlings,i[1]);
                                      break;
                                 end;

                        end;
               end;

               if pBombs > 0 then
               begin
                    Priority = [tControls, tGuns, tRockets, tMortars, tSoldiers, tCivilians, tCargos, tHovercrafts, tBombs,   tAmLasers, tAmHgs, tAmRockets, tAmMedium, tbuilding];

                    for i in priority do
                        if i > 0 then
                        begin
                             temp = unitfilter(i,[f_not,[f_lives,700]]);

                             if temp > 0 then
                             begin
                                  temp_list = [];
                                  for j in temp do
                                      temp_list = temp_list ^ GetLives(j);

                                  temp = WorstFromListByList(temp, temp_list);

                                  ComAttackUnit(pBombs,temp[1]);
                                  break;
                             end
                             else
                                 begin
                                      ComAttackUnit(pBombs,i[1]);
                                      break;
                                 end;

                        end;
               end;

               if pRadar > 0 then              
                  if UnitFilter(patrol_units diff pRadar, [f_ok]) > 0 then
                  begin
                       temp = [0,0];

                       for i in UnitFilter(patrol_units diff pRadar, [f_ok]) do
                       begin
                            temp = Replace(temp, 1, temp[1] + GetX(i));
                            temp = Replace(temp, 2, temp[2] + GetY(i));
                       end;

                       temp = Replace(temp, 1, temp[1] / UnitFilter(patrol_units diff [pRadar, pCargo, pLapsers], [f_ok]));
                       temp = Replace(temp, 2, temp[2] / UnitFilter(patrol_units diff [pRadar, pCargo, pLapsers], [f_ok]));

                       
                       if GetDistUnitXY(pRadar, temp[1], temp[2]) > 10 then     //keep the radar close to the group, but not too close
                          ComMoveXY(pRadar ^ pCargo, temp[1], temp[2])
                       else
                           ComStop(pRadar ^ pCargo);

                  end
                  else
                      begin
                           if GetNation(pRadar) = nation_american or detected_enemies = 0 then
                              ai_patrol_out = ai_patrol_out diff side
                           else
                               begin
                                    temp = NearestUnitToUnit(detected_enemies, pRadar);

                                    if GetDistUnits(pRadar, temp) > 3 then
                                       ComMoveUnit(pRadar, temp)
                                    else
                                        SetTaskList(pRadar, [['K',0,0,0,0,0,0]]);    //self destruction comand
                               end;
                      end;

               if pLapsers > 0 then
               begin
                    Priority = [tMortars, tControls, tRockets, tGuns, tBombs, tHovercrafts, tCargos, tSoldiers, tCivilians,   tAmLasers, tAmHgs, tAmRockets, tAmMedium, tbuilding];

                    for i in priority do
                        if i > 0 then
                        begin
                             temp = i;
                             temp_list = [];

                             for j in temp do
                                 temp_list = temp_list ^ GetDistUnits(patrol_units[1], j);

                             temp = WorstFromListByList(temp, temp_list);

                             ComMoveUnit(pLapsers, temp);
                             break;
                        end;

               end;
          end

          else
              if ai_patrol_PathChoice[side] = 5 then
              begin
                   temp = FilterUnitsInArea([base_legion, base_us][side], [f_side,2]) ^ FilterUnitsInArea([base_legion_perimeter, base_us_perimeter][side], [f_side,2]);

                   if temp > 0 then
                   begin
                        i = NearestUnitToUnit(temp, patrol_units[1]);
                        commovexy(patrol_units, GetX(i), GetY(i));
                   end
                   else
                       begin
                            ai_patrol_out = ai_patrol_out diff side;                              //Return to base
                            ai_patrol_timer = Replace(ai_patrol_timer,side,3$0);
                       end;

              end
              else
                  begin
                       if UnitFilter(patrol_units, [f_not, [f_distxy, ai_patrol_path[side][ai_patrol_hexcount[side]][1], ai_patrol_path[side][ai_patrol_hexcount[side]][2], 15] ]) = 0 then
                       begin
          
                            if ai_patrol_hexcount[side] = ai_patrol_path[side] then
                            begin
                                 ai_patrol_out = ai_patrol_out diff side;                              //Return to base
                                 ai_patrol_timer = Replace(ai_patrol_timer,side,3$0);
                            end
                            else
                                ai_patrol_hexcount = Replace(ai_patrol_hexcount, side, ai_patrol_hexcount[side] + 1);
                  
                       end
                          else
                              commovexy(patrol_units, ai_patrol_path[side][ai_patrol_hexcount[side]][1], ai_patrol_path[side][ai_patrol_hexcount[side]][2]);

                  end;

     end;

enable;
end;


//Made to work like comattackunit for double lasers. Gives an order to move to proper hexes to trigger the special attack.
Function DoubleLaserAttack(Units, AllTargets, Area, val);
var Lasers, LaserGroups, L1, L2, Target, temp_target_list, TargetX, TargetY;
var hex_list1, hex_list2, hex1, hex2, temp_hex, choosen_hexes, temp_list_x, temp_list_y, chosen_list;
var i, j, un, temp, temp_list, dist, dist1, dist2, common_hex;
var dir0_x, dir0_y, dir1_x, dir1_y, dir2_x, dir2_y, dir3_x, dir3_y, dir4_x, dir4_y, dir5_x, dir5_y, dir6_x, dir6_y, dir7_x, dir7_y, dir8_x, dir8_y, dir9_x, dir9_y, dir10_x, dir10_y, dir11_x, dir11_y;
begin
     if AllTargets = 0 then
        exit;

     temp_list = UnitFilter(Units, [f_not,[f_weapon,us_double_laser]]);

     if temp_list > 0 then
        ComAttackUnit(temp_list, AllTargets[1]);

     Lasers = UnitFilter(Units, [f_weapon,us_double_laser]);

     if Lasers < 2 then
     begin
          ComAttackUnit(Lasers, AllTargets[1]);
          exit;
     end
     else
         begin
              LaserGroups = [];

              while Lasers > 1 do
              begin
                   temp = [Lasers[1], Lasers[2]];
                   Lasers = Lasers diff temp;

                   if Lasers = 1 then
                      temp = temp ^ Lasers[1];

                   LaserGroups = LaserGroups ^ [temp];
              end;
         end;

     if val < 0 then
        val = 0;

     if val > 2 then
        val = 2;

     Dir0_X = [0, 0, 0, 0, 0, 0, 0];    Dir0_Y = [-3, -5, -7, -9, -11, -13, -15]; Dir1_X = [2, 3, 4, 5, 6, 7, 8];     Dir1_Y = [-2, -3, -4, -5, -6, -7, -8];
     Dir2_X = [3, 5, 7, 9, 11, 13, 15]; Dir2_Y = [0, 0, 0, 0, 0, 0, 0];           Dir3_X = [4, 6, 8, 10, 12, 14, 16]; Dir3_Y = [2, 3, 4, 5, 6, 7, 8];
     Dir4_X = [4, 5, 7, 9, 11, 13, 15]; Dir4_Y = [4, 5, 7, 9, 11, 13, 15];        Dir5_X = [2, 3, 4, 5, 6, 7, 8];     Dir5_Y = [4, 6, 8, 10, 12, 14, 16];
     Dir6_X = [0, 0, 0, 0, 0, 0, 0];    Dir6_Y = [3, 5, 7, 9, 11, 13, 15];        Dir7_X = [-2, -3, -4, -5, -6, -7, -8]; Dir7_Y = [2, 3, 4, 5, 6, 7, 8];
     Dir8_X = [-3, -5, -7, -9, -11, -13, -15]; Dir8_Y = [0, 0, 0, 0, 0, 0, 0];    Dir9_X = [-4, -6, -8, -10, -12, -14, -16]; Dir9_Y = [-2, -3, -4, -5, -6, -7, -8];
     Dir10_X = [-3, -5, -7, -9, -11, -13, -15]; Dir10_Y = [-3, -5, -7, -9, -11, -13, -15]; Dir11_X = [-2, -3, -4, -5, -6, -7, -8]; Dir11_Y = [-4, -6, -8, -10, -12, -14, -16];

     temp_list_x = [dir0_x, dir1_x, dir2_x, dir3_x, dir4_x, dir5_x, dir6_x, dir7_x, dir8_x, dir9_x, dir10_x, dir11_x];
     temp_list_y = [dir0_y, dir1_y, dir2_y, dir3_y, dir4_y, dir5_y, dir6_y, dir7_y, dir8_y, dir9_y, dir10_y, dir11_y];

     temp_target_list = 0;

     for un in LaserGroups do
     begin
          common_hex = [(GetX(un[1]) + GetX(un[2]))/2, (GetY(un[1]) + GetY(un[2]))/2];
          temp_list = [];

          if temp_target_list = 0 then
             temp_target_list = AllTargets;

          dist = 999;

          for i in temp_target_list do
          begin
               dist1 = GetDistUnits(i, un[1]);
               dist2 = GetDistUnits(i, un[2]);

               if dist1 > dist2 then
                  temp = dist1
               else temp = dist2;

              if temp + 3 < dist then
              begin
                   dist = temp;
                   Target = i;
              end;
          end;

          temp_target_list = temp_target_list diff Target;

          TargetX = GetX(Target);
          TargetY = GetY(Target);

          hex_list1 = [];
          hex_list2 = [];

          for i = 1 to 6 do
          begin
               hex1 = [];
               hex2 = [];

               hex_list1 = hex_list1 ^ [hex1];
               hex_list2 = hex_list2 ^ [hex2];

               case val of
                    0: temp_list = [1,2,3,4,5,6,7];
                    1: temp_list = [4,5,3,6,2,7,1];
                    else
                        temp_list = [7,6,5,4,3,2,1];
               end;

               for j in temp_list do
               begin
                    temp_hex = [TargetX + temp_list_x[i][j], TargetY + temp_list_y[i][j]];

                    if not ValidHex(temp_hex[1], temp_hex[2]) or ( HexInfo(temp_hex[1], temp_hex[2]) > 0 and not HexInfo(temp_hex[1], temp_hex[2]) in un ) then
                       continue;

                    if Area > 0 then
                       if InArea(temp_hex[1], temp_hex[2], Area) then
                          continue;

                    hex1 = temp_hex;
                    break;
               end;

               if hex1 = [] then
                  continue;

               for j in temp_list do
               begin
                    temp_hex = [TargetX + temp_list_x[i+6][j], TargetY + temp_list_y[i+6][j]];

                    if not ValidHex(temp_hex[1], temp_hex[2]) or ( HexInfo(temp_hex[1], temp_hex[2]) > 0 and not HexInfo(temp_hex[1], temp_hex[2]) in un ) then
                       continue;

                    if Area > 0 then
                       if InArea(temp_hex[1], temp_hex[2], Area) then
                          continue;

                    hex2 = temp_hex;
                    break;
               end;

               if hex2 = [] then
                  continue;

               hex_list1 = Replace(hex_list1, i, hex1);
               hex_list2 = Replace(hex_list2, i, hex2);
          end;


          if (hex_list1 diff 0) = 0 then
          begin
               ComMoveUnit(un, Target);
               exit;
          end;

          hex_list1 = hex_list1 ^ hex_list2;
          hex_list2 = hex_list2 ^ hex_list1;

          temp_list = [];
          j = [1,2,3,4,5,6,7,8,9,10,11,12];

          for i in j do
              temp_list = temp_list ^ GetDistXY(common_hex[1],common_hex[2], TargetX + temp_list_x[i][5],TargetY + temp_list_y[i][5]);

          i = WorstFromListByList(j,temp_list);

          case i of
               1,7: temp_list = [4,5,6,1,2,3];
               2,8: temp_list = [5,6,1,2,3,4];
               3,9: temp_list = [6,1,2,3,4,5];
               4,10: temp_list = [1,2,3,4,5,6];
               5,11: temp_list = [2,3,4,5,6,1];
               6,12: temp_list = [3,4,5,6,1,2];
          end;

          dist = 999;

          for i in temp_list do
          begin
               if hex_list1[i] = [] then
                  continue;

               hex1 = hex_list1[i];
               hex2 = hex_list2[i];
               L1 = un[1];
               L2 = un[2];

               dist1 = GetDistUnitXY(L1, hex1[1], hex1[2]);
               dist2 = GetDistUnitXY(L2, hex2[1], hex2[2]);

               if dist1 < [3,4,4][val+1] and dist2 < [3,4,4][val+1] then
               begin
                    choosen_hexes = [];

                    for j = 1 to 3 do
                        if i + j > hex_list1 then
                           choosen_hexes = choosen_hexes ^ [hex_list1[i+j - hex_list1], hex_list2[i+j - hex_list1]]
                        else
                            choosen_hexes = choosen_hexes ^ [hex_list1[i+j], hex_list2[i+j]];
                    break;
               end;

               if dist1 > dist2 then
                  temp = dist1
               else
                   temp = dist2;


               if (temp + [6,8,10][val+1]) < dist then
               begin
                    dist = temp;
                    choosen_hexes = [hex1, hex2];
               end;
          end;

          if un > 2 then
             L2 = L2 ^ un[3];

          if choosen_hexes[1] = [] then
          begin
               ComMoveUnit([L1,L2], Target);
               exit;
          end;

          ComMoveXY(L1, choosen_hexes[1][1],choosen_hexes[1][2]);
          ComMoveXY(L2, choosen_hexes[2][1],choosen_hexes[2][2]);

          if choosen_hexes > 2 then
             for i = 3 to choosen_hexes do
                 if choosen_hexes[i] > [] then
                    if i in [3,5] then
                       AddComMoveXY(L1, choosen_hexes[i][1],choosen_hexes[i][2])
                    else
                        AddComMoveXY(L2, choosen_hexes[i][1],choosen_hexes[i][2]);

     end;
end;


//For hovercrafts: standby mode same as patrol
//                 don't move out without a target, that's what the patrol is for
//                 screen the given areas for living units (biodetection)
//                 get the biggest group of units in 9 hexes range
//                 prepare a path from the fragments and go
every 0$1 trigger 1 in ai_bases do
var i, j, temp, temp2, hovercrafts, count, un;
begin
     Randomize;

     hovercrafts = ai_hovercrafts diff 0 ^ -1;

                                           
     for i in hovercrafts do               //if their number is reduced to two, trigger the cooldown
         if IsOk(i) then
            temp = temp + 1;

     if temp < 3 and ai_hovercrafts_status > 0 then
     begin
          ai_hovercrafts_respawntime = [6$0, 5$0, 4$0][difficulty];  //[4$30, 3$0, 2$0][difficulty];
          ai_hovercrafts_status = -1;
     end;

     ai_hovercrafts_respawntime = ai_hovercrafts_respawntime - 0$1;




     if ai_hovercrafts_out = 0 and ai_hovercrafts_respawntime <= 0 then
     begin
          temp = 0;

          for i in ai_hovercrafts do
              if GetLives(i) <= 250 then
                 temp = 1;

          if temp = 0 then
          begin
               if ai_hovercrafts_status = 0 then
                  ai_hovercrafts_status = 1;
          end
          else
              begin
                   if ai_hovercrafts_status > 0 then       // if the group was ready but got damaged, the timer is reset
                      ai_hovercrafts_timer = 2$0;

                   ai_hovercrafts_status = 0
              end;
     end;

     if ai_hovercrafts_status > 0 and ai_hovercrafts_out = 0 then
     begin
          ai_hovercrafts_timer = ai_hovercrafts_timer - 0$1;

          if ai_hovercrafts_timer <= 0 then
          begin
               ai_hovercrafts_status = ai_hovercrafts_status + 1;
               ai_hovercrafts_timer = 1$0;
          end;


          if ai_hovercrafts_status = 2 and GSVeh > 0 then
          begin

               //check if the minor base is attacked
               if ai_hovercrafts_out = 0 and 1 in mb_bases then
               begin
                    temp = 0;

                    for j in mb_buildings[1] do
                        if GetLives(j) < 500 then
                           temp = temp + 1;

                    if temp + mb_to_build_list[1] > 2 then
                    begin
                         ai_hovercrafts_out = 1;
                         ai_hovercrafts_hexcount = 1;
                         ai_hovercrafts_timer = 3$0;
                         ai_hovercrafts_status = 0;


                         if FilterAllUnits([[f_side,2],[f_distxy,120,123,20]]) <= FilterAllUnits([[f_side,2],[f_distxy,75,125,20]]) then
                            temp = possible_paths[3][2]   //right side exit
                         else
                             temp = possible_paths[3][1]; //left side exit

                         temp2 = HovercraftDetection(1);

                         case temp2[1] of
                              base_legion_minor: temp = temp ^ [[43,56], [32,28], [49,22]];
                              mb_legion_perimeter: temp = temp ^ [[43,56], [32,28], [49,22]];
                              hv_area2: temp = temp ^ [possible_paths[3][3][1]];
                              hv_area3: temp = temp ^ possible_paths[3][3];
                              hv_area4: temp = temp ^ possible_paths[3][4];
                              hv_area5: temp = temp ^ possible_paths[3][5];
                         end;

                         ai_hovercrafts_target = temp2[2];
                         ai_hovercrafts_path = temp;
                    end;
               end;


               //intercept player crossing the swamp
               if ai_hovercrafts_out = 0 
                  and FilterUnitsInArea(hv_area2, [[f_side,2],[f_or,[f_type,unit_human],[f_and,[f_type,unit_vehicle],[f_control,control_manual],[f_occupied]]]]) >= [6,4,2][difficulty] then
                  begin
                       ai_hovercrafts_out = 1;
                       ai_hovercrafts_hexcount = 1;
                       ai_hovercrafts_timer = 3$0;
                       ai_hovercrafts_status = 0;

                       if FilterAllUnits([[f_side,2],[f_distxy,120,123,20]]) <= FilterAllUnits([[f_side,2],[f_distxy,75,125,20]]) then
                          temp = possible_paths[3][2]   //right side exit
                       else
                           temp = possible_paths[3][1]; //left side exit

                       temp = temp ^ [possible_paths[3][3][1]];

                       ai_hovercrafts_path = temp;


                       count = 0;
                       un = 0;

                       for j in FilterUnitsInArea(hv_area2, [[f_side,2],[f_or,[f_type,unit_human],[f_and,[f_type,unit_vehicle],[f_control,control_manual],[f_occupied]]]]) do
                       begin
                            temp = FilterUnitsInArea(hv_area2, [[f_side,2],[f_or,[f_type,unit_human],[f_and,[f_type,unit_vehicle],[f_control,control_manual],[f_occupied]]],[f_dist,j,9]]);

                            if temp > count then
                            begin
                                 count = temp;
                                 un = j;
                            end;
                       end;

                       ai_hovercrafts_target = j;
                  end;


               //going past the main base
               if ai_hovercrafts_out = 0 
                  and FilterUnitsInArea(hv_area6, [[f_side,2],[f_or,[f_type,unit_human],[f_and,[f_type,unit_vehicle],[f_control,control_manual],[f_occupied]]]]) > [6,4,2][difficulty] then
                  begin
                       ai_hovercrafts_out = 1;
                       ai_hovercrafts_hexcount = 1;
                       ai_hovercrafts_timer = 3$0;
                       ai_hovercrafts_status = 0;

                       ai_hovercrafts_path = possible_paths[3][6];

                       count = 0;
                       un = 0;

                       for j in FilterUnitsInArea(hv_area6, [[f_side,2],[f_or,[f_type,unit_human],[f_and,[f_type,unit_vehicle],[f_control,control_manual],[f_occupied]]]]) do
                       begin
                            temp = FilterUnitsInArea(hv_area6, [[f_side,2],[f_or,[f_type,unit_human],[f_and,[f_type,unit_vehicle],[f_control,control_manual],[f_occupied]]],[f_dist,j,9]]);

                            if temp > count then
                            begin
                                 count = temp;
                                 un = j;
                            end;
                       end;

                       ai_hovercrafts_target = j;
                  end;


               if GSVeh < 2 then
                  ai_hovercrafts_timer = 0$30;
          end;


          if ai_hovercrafts_status = 3 and GSVeh > 1 then     // attacking the player beyond the swamp
          begin
               temp2 = HovercraftDetection(1);

               if temp2 > 0 then
               begin
                    ai_hovercrafts_out = 1;
                    ai_hovercrafts_hexcount = 1;
                    ai_hovercrafts_timer = 3$0;
                    ai_hovercrafts_status = 0;


                    if FilterAllUnits([[f_side,2],[f_distxy,120,123,20]]) <= FilterAllUnits([[f_side,2],[f_distxy,75,125,20]]) then
                       temp = possible_paths[3][2]   //right side exit
                    else
                        temp = possible_paths[3][1]; //left side exit

                    case temp2[1] of
                         base_legion_minor: temp = temp ^ [[43,56], [32,28], [49,22]];
                         mb_legion_perimeter: temp = temp ^ [[43,56], [32,28], [49,22]];
                         hv_area2: temp = temp ^ [possible_paths[3][3][1]];
                         hv_area3: temp = temp ^ possible_paths[3][3];
                         hv_area4: temp = temp ^ possible_paths[3][4];
                         hv_area5: temp = temp ^ possible_paths[3][5];
                    end;


                   ai_hovercrafts_target = temp2[2];
                   ai_hovercrafts_path = temp;

               end;
          end;

     end;


     //triggering a counterstrike when the main base is attacked
     if hovercrafts >= 3 and ai_hovercrafts_out = 0 then
        if BaseUnderAttack(1, 2) then
        begin
             temp2 = HovercraftDetection(0);

             if temp2 > 0 then
             begin
                  ai_hovercrafts_out = 1;
                  ai_hovercrafts_hexcount = 1;
                  ai_hovercrafts_timer = 3$0;


                  if FilterAllUnits([[f_side,2],[f_distxy,120,123,20]]) < FilterAllUnits([[f_side,2],[f_distxy,75,125,20]]) then
                     temp = possible_paths[3][2]   //right side exit
                  else
                      temp = possible_paths[3][1]; //left side exit


                  case temp2[1] of
                       base_legion_minor: temp = temp ^ [[43,56], [32,28], [49,22]];
                       mb_legion_perimeter: temp = temp ^ [[43,56], [32,28], [49,22]];
                       hv_area2: temp = temp ^ [possible_paths[3][3][1]];
                       hv_area3: temp = temp ^ possible_paths[3][3];
                       hv_area4: temp = temp ^ possible_paths[3][4];
                       hv_area5: temp = temp ^ possible_paths[3][5];
                  end;

                  ai_hovercrafts_path = temp;
                  ai_hovercrafts_target = temp2[2];
             end;
        end;

enable;
end;


every 0$1 trigger ai_hovercrafts_out = 1 do
var i, j, hovercrafts, enemiesinrange, temp, temp_list, priority, selfdestruct, target;
var soldiers, civilians, scientists, controls, vehicles;
var machineguns, lightguns, radar;
begin
     Randomize;

     hovercrafts = [];

     for i in ai_hovercrafts do
         if IsOk(i) then
            hovercrafts = hovercrafts ^ i;

     if hovercrafts = 0 then
        ai_hovercrafts_out = 0;


     enemiesinrange = [];

     if hovercrafts > 0 then
        if IsDead(ai_hovercrafts_target) then
        begin
             for i in FilterAllUnits([[f_side,2], [f_or, [f_type,unit_human], [f_and,[f_type,unit_vehicle],[f_control,control_manual],[f_occupied]]] ]) do
                 if GetDistUnits(i, NearestUnitToUnit(hovercrafts, i) ) <= 15 then
                    enemiesinrange = enemiesinrange ^ i;
        end
        else
            begin
                 if GetDistUnits(ai_hovercrafts_target, hovercrafts[1]) <= 15 then
                    enemiesinrange = enemiesinrange ^ ai_hovercrafts_target;

                 for i in FilterAllUnits([[f_side,2], [f_or, [f_type,unit_human], [f_and,[f_type,unit_vehicle],[f_control,control_manual],[f_occupied]]], [f_dist,ai_hovercrafts_target,9]]) do
                     if GetDistUnits(i, NearestUnitToUnit(hovercrafts, i) ) <= 15 then
                        enemiesinrange = enemiesinrange ^ i;
            end;


     if enemiesinrange > 0 then
     begin
          soldiers = unitfilter(enemiesinrange, [[f_side,2],[f_or,[f_class,class_soldier],[f_class,class_mortar],[f_class,class_desert_warior]]]);
          scientists = unitfilter(enemiesinrange, [[f_side,2],[f_class,class_scientistic]]);
          civilians = unitfilter(enemiesinrange, [[f_side,2],[f_type,unit_human]]) diff soldiers ^ scientists;
          controls = unitfilter(enemiesinrange, [[f_side,2],[f_weapon,ar_control_tower]]);
          vehicles = unitfilter(enemiesinrange, [[f_side,2],[f_type,unit_vehicle]]) diff controls;

          machineguns = unitfilter(hovercrafts, [f_weapon,ar_double_machine_gun]);
          lightguns = unitfilter(hovercrafts, [f_weapon,ar_light_gun]);
          //radar = unitfilter(hovercrafts, [f_weapon,ar_radar])[1];


          if machineguns > 0 then
          begin
               priority = [scientists, soldiers, civilians, controls, vehicles];

               for i in priority do
                   if i > 0 then
                   begin
                        temp = unitfilter(i,[f_not,[f_lives,700]]);

                        if temp > 0 then
                        begin
                             temp_list = [];
                             for j in temp do
                                 temp_list = temp_list ^ GetLives(j);

                             temp = WorstFromListByList(temp, temp_list);

                             target = temp[1];
                             break;
                        end
                        else
                            begin
                                 target = i[1];
                                 break;
                            end;

                   end;

               for i in machineguns do
                   if not GetTag(i) = 1 then
                      ComAttackUnit(i, target)
                   else
                       if GetDistUnits(i, target) > 3 then
                           ComMoveUnit(i, target)
                        else
                            SetTaskList(i, [['K',0,0,0,0,0,0]]);    //self destruction comand

          end;

          if lightguns > 0 then
          begin
               priority = [controls, vehicles, scientists, soldiers, civilians];

               for i in priority do
                   if i > 0 then
                   begin
                        temp = unitfilter(i,[f_not,[f_lives,700]]);

                        if temp > 0 then
                        begin
                             temp_list = [];
                             for j in temp do
                                 temp_list = temp_list ^ GetLives(j);

                             temp = WorstFromListByList(temp, temp_list);

                             target = temp[1];
                             break;
                        end
                        else
                            begin
                                 target = i[1];
                                 break;
                            end;

                   end;


               for i in lightguns do
                   if not GetTag(i) = 1 then
                      ComAttackUnit(i, target)
                   else
                       if GetDistUnits(i, target) > 3 then
                           ComMoveUnit(i, target)
                        else
                            SetTaskList(i, [['K',0,0,0,0,0,0]]);    //self destruction comand

          end;

     end
     else
         begin
              if UnitFilter(hovercrafts, [f_not, [f_distxy, ai_hovercrafts_path[ai_hovercrafts_hexcount][1], ai_hovercrafts_path[ai_hovercrafts_hexcount][2], 15] ]) = 0 or ai_hovercrafts_hexcount = ai_hovercrafts_path then
              begin
                   if ai_hovercrafts_target = 0 then
                      ai_hovercrafts_out = 0
                   else
                       if ai_hovercrafts_hexcount < ai_hovercrafts_path then
                          ai_hovercrafts_hexcount = ai_hovercrafts_hexcount + 1
                       else
                           if IsDead(ai_hovercrafts_target) then
                              ai_hovercrafts_out = 0
                           else
                               ComMoveUnit(hovercrafts, ai_hovercrafts_target);
              end
                 else
                     commovexy(hovercrafts, ai_hovercrafts_path[ai_hovercrafts_hexcount][1], ai_hovercrafts_path[ai_hovercrafts_hexcount][2]);
         end;

enable;
end;


Function HovercraftDetection(num);
var i, j, count, temp, areas, area, un;
begin
     if num = 1 then
        areas = [hv_area1, hv_area2, hv_area3, hv_area4, hv_area5, hv_area6]
     else
         areas = [hv_area2, hv_area3, hv_area4, hv_area5];

     if not 1 in mb_bases then
        areas = areas ^ base_legion_minor ^ mb_legion_perimeter;

     count = 0;
     area = areas[1];
     un = 0;

     for i in areas do
         for j in FilterUnitsInArea(i, [[f_side,2],[f_or,[f_type,unit_human],[f_and,[f_type,unit_vehicle],[f_control,control_manual],[f_occupied]]]]) do
         begin
              temp = FilterUnitsInArea(i, [[f_side,2],[f_or,[f_type,unit_human],[f_and,[f_type,unit_vehicle],[f_control,control_manual],[f_occupied]]],[f_dist,j,9]]);

              if temp > count then
              begin
                   count = temp;
                   area = i;
                   un = j;
              end;
         end;

     if count > 0 then
        result = [area, un]
     else
         result = 0;
end;


//Alliance - spawns (teleports) after the destruction of first base. So starts either on left or right side of the map
//detection pattern: check areas centre, base, front and back respectively for enemy (player) units
//if none are found, teleport to centre area of the map, and then to the other side. No teleporting if the Alliance is in back area
//once detected the alliance should be added to patrol lists
every 0$1 trigger AllianceSpawned do
var i, j, temp, areas_list, temp_list,temp_list2;
begin

     for i in AllianceTeam do
         if GetLives(i) < 250 or (GetControl(i) = control_manual and IsDrivenBy(i) = 0) then
            AllianceTeam = AllianceTeam diff i;



     for i in FilterAllUnits([f_side,7]) diff AllianceTeam do
         if GetClass(i) = class_mechanic then
         begin
              temp_list = FilterAllUnits([[f_side,7],[f_type,unit_vehicle]]);
              temp_list2 = [];

              for j in temp_list do
                  temp_list2 = temp_list2 ^ GetDistUnits(i,j);

              temp = WorstFromListByList(temp_list, temp_list2);

              if GetLives(temp) < 600 then
                 ComrepairVehicle(i,temp)
              else
                  if GetControl(temp) = control_manual then
                     ComEnterUnit(i,temp);
         end
            else
                if GetType(i) = unit_vehicle and GetLives(i) >= 600 and (IsDrivenBy(i) or GetControl(i) = control_computer) then
                   AllianceTeam = AllianceTeam ^ i;



     if ( AllianceTeam diff FilterAllUnits([[f_side,7],[f_ok],[f_or,[f_weapon,us_radar],[f_weapon,ru_cargo_bay],[f_weapon,ru_time_lapser]]]) ) = 0 then
        if FilterAllUnits([[f_side,7],[f_class,class_mechanic],[f_ok],[f_placed]]) = 0 then
        begin
             AllianceSpawned = 0;
             AllianceDestroyed = 1;
        end;



     if not 3 in ai_patrol_out then
     begin
          case AllTarget[1] of
               1: areas_list = [AllSeekLeftCentre, base_legion, AllSeekLeftFront, AllSeekLeftBack];
               2: areas_list = [AllSeekCentre];
               3: areas_list = [AllSeekRightCentre, base_us, AllSeekRightFront, AllSeekRightBack];
          end;

          for i in areas_list do
          begin
               temp = FilterUnitsInArea(i, [f_side,2]);

               if temp > 0 then
               begin
                    ai_patrol_out = ai_patrol_out ^ 3;
                    ai_patrol_hexcount = Replace(ai_patrol_hexcount,3,1);
                    break;
               end;
          end;

          if temp = 0 then
          begin
               if IsInarea(AllianceTeam[1], AllSeekLeftBack) or IsInarea(AllianceTeam[1], AllSeekRightBack) then
               begin
                    ai_patrol_out = ai_patrol_out ^ 3;
                    ai_patrol_path = Replace(ai_patrol_out, 3, [[114, 34]]);
                    ai_patrol_hexcount = Replace(ai_patrol_hexcount,3,1);
               end
                  else
                      begin
                           temp_list = [[52,75],[114, 34],[193,73]];

                           for i in AllianceTeam do
                               TeleportUnit(i, temp_list[AllTarget[2]][1], temp_list[AllTarget[2]][2], 10, true);
                      end;

               AllTarget = AllTarget ^ AllTarget[1];
               AllTarget = Delete(AllTarget,1);
          end;
     end;

enable;
end;

